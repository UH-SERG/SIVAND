
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "@", "validator", "#NEWLINE#", "def email(", "value", ",", "whitelist", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate an email address.\\n\\n    This validator is based on `Django's email validator`_. Returns\\n    ``True`` on success and :class:`~validators.utils.ValidationFailure`\\n    when validation fails.\\n\\n    Examples::\\n\\n        >>> email('someone@example.com')\\n        True\\n\\n        >>> email('bogus@@')\\n        ValidationFailure(func=email, ...)\\n\\n    .. _Django's email validator:\\n       https://github.com/django/django/blob/master/django/core/validators.py\\n\\n    .. versionadded:: 0.1\\n\\n    :param value: value to validate\\n    :param whitelist: domain names to whitelist\\n\\n    :copyright: (c) Django Software Foundation and individual contributors.\\n    :license: BSD\\n    \"", "#NEWLINE#", "if", "(", "whitelist", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "whitelist", "=", "domain_whitelist", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "not", "value", ")", "or", "(", "'@'", "not in", "value", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "(", "user_part", ",", "domain_part", ")", "=", "value", ".", "rsplit", "(", "'@'", ",", "1", ")", "#NEWLINE#", "if", "(", "not", "user_regex", ".", "match", "(", "user_part", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "domain_part", "not in", "whitelist", ")", "and", "(", "not", "domain_regex", ".", "match", "(", "domain_part", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "domain_part", "=", "domain_part", ".", "encode", "(", "'idna'", ")", ".", "decode", "(", "'ascii'", ")", "#NEWLINE#", "return", "domain_regex", ".", "match", "(", "domain_part", ")", "#NEWLINE#", "#UNINDENT#", "except", "UnicodeError", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "True"], "error_location": [0], "repair_targets": [], "repair_candidates": [53, 85, 96, 107, 109, 126, 51, 72, 5, 34, 40, 56, 7, 18, 25, 87], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "SickRage/SickRage/lib/validators/email.py", "license": "gpl-3.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1210, "results": {"model": "transformer", "prob": {"loc": [[0.9049582481384277, 5.8857854128291365e-06, 1.172469978882873e-07, 1.294027782705598e-07, 1.2523013026566332e-07, 3.1550644052913412e-06, 4.730981117972988e-08, 1.1765067938540597e-05, 1.809772811611765e-07, 4.3584339692870344e-08, 3.4725406550251137e-08, 7.74099291334096e-08, 1.890922050051813e-07, 1.739850574722368e-07, 5.584879545494914e-07, 3.2174992270483926e-07, 2.0092876695798623e-07, 1.0606969880200268e-07, 0.0020581672433763742, 6.051969194231788e-06, 1.0994893955285079e-06, 3.013236096194305e-07, 5.232587341197359e-07, 4.020306221264036e-07, 1.7359690218654578e-07, 1.6173575204447843e-05, 2.808411920796061e-07, 0.0004976087948307395, 3.992208803538233e-07, 3.166463216075499e-07, 3.806944448569993e-07, 4.9075957520017255e-08, 1.1530355550348759e-06, 8.473182901980181e-07, 0.013369441032409668, 1.6934742461671703e-06, 2.669879677341669e-07, 2.8864167234132765e-06, 3.1302712159231305e-05, 7.063868565637677e-07, 0.014215180650353432, 2.453746219543973e-07, 7.659743062049529e-08, 7.343055017372535e-07, 5.561716420743323e-07, 2.7016889703190827e-07, 1.547258960954423e-07, 2.996707735292148e-06, 4.684895884565776e-07, 2.903538245391246e-07, 3.511282997692433e-08, 3.717856452567503e-05, 2.509351872959087e-07, 1.519985653430922e-05, 2.8564123510932404e-08, 1.6831559435104282e-07, 0.00022048471146263182, 3.9068879686965374e-07, 1.1838985756185139e-06, 7.977647555890144e-07, 1.2215093192935456e-05, 4.6101166617518174e-07, 3.0372895707841963e-05, 8.832404887471057e-07, 6.853827017039293e-07, 1.061445345840184e-06, 5.661797217726416e-07, 7.043001915008062e-07, 8.99201353377066e-08, 2.7579505967878504e-07, 1.1420359768976596e-08, 2.0383754417707678e-07, 0.01180882379412651, 2.29413359420505e-07, 1.1039459479889047e-07, 1.4677507351734675e-06, 1.3102763887218316e-06, 6.789350663893856e-07, 6.826820140304335e-07, 1.828897325140133e-06, 1.1215834092581645e-06, 8.247205869338359e-07, 2.4014951804929296e-07, 5.6328470776634276e-08, 9.307906339017791e-07, 0.014469522051513195, 8.523204542143503e-07, 0.011521952226758003, 1.0206296252590619e-07, 5.575789714384882e-07, 6.517354336210701e-07, 4.2088552731911477e-07, 5.615519285129267e-07, 3.152569263420446e-07, 8.34623481438257e-09, 5.156359179636638e-07, 0.024548493325710297, 6.476930138887838e-07, 2.670264223070262e-07, 1.580033028858452e-07, 9.33317721774074e-07, 4.3284873640914157e-07, 3.0793287919550494e-07, 2.2400648447273852e-07, 1.2067700936313486e-06, 1.0695348464651033e-06, 4.886302349405014e-07, 1.02175836218521e-05, 5.288411486503719e-08, 1.678549665484752e-06, 3.1837012670621334e-07, 6.671360779364477e-07, 5.961203441984253e-07, 8.139152214425849e-07, 1.0970511539198924e-06, 7.265144290613534e-07, 2.162882310585701e-06, 3.49775405084074e-06, 7.84904696047306e-05, 5.176343620405532e-07, 6.868012292216008e-07, 3.1082919349501026e-08, 6.257521789621023e-08, 2.002471859441357e-07, 9.976168335867897e-09, 2.8005484864479513e-07, 0.0018368822056800127, 5.524685207092261e-07, 7.213275807771424e-07, 3.8320050066431577e-07, 1.6424535260739503e-06, 1.45495476999713e-07, 2.6253067062498303e-06, 9.43257305152656e-07, 5.223299126555503e-07, 3.169502349464892e-07, 1.0421165825391654e-05, 1.5012969925010111e-06, 1.2525324564194307e-06, 9.277084700443083e-07, 2.5296648686889966e-07, 0.0001549807348055765]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.2602766156196594, 0.0, 0.17902304232120514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0038270647637546062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19997788965702057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06534699350595474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01477013435214758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1347782015800476, 0.0, 0.09793836623430252, 0.0, 0.0, 0.02160714566707611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002354903146624565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019005159847438335, 0.0, 0.0019221799448132515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007713822647929192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007009095977991819, 0.0, 0.0014886147109791636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.543914787471294e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.09986639022827148, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', '@', 'validator', '#NEWLINE#', 'def email(', 'value', ',', 'whitelist', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    Validate an email address.\\n\\n    This validator is based on `Django\'s email validator`_. Returns\\n    ``True`` on success and :class:`~validators.utils.ValidationFailure`\\n    when validation fails.\\n\\n    Examples::\\n\\n        >>> email(\'someone@example.com\')\\n        True\\n\\n        >>> email(\'bogus@@\')\\n        ValidationFailure(func=email, ...)\\n\\n    .. _Django\'s email validator:\\n       https://github.com/django/django/blob/master/django/core/validators.py\\n\\n    .. versionadded:: 0.1\\n\\n    :param value: value to validate\\n    :param whitelist: domain names to whitelist\\n\\n    :copyright: (c) Django Software Foundation and individual contributors.\\n    :license: BSD\\n    "', '#NEWLINE#', 'if', '(', 'whitelist', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'whitelist', '=', 'domain_whitelist', '#NEWLINE#', '#UNINDENT#', 'if', '(', '(', 'not', 'value', ')', 'or', '(', "'@'", 'not in', 'value', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', '(', 'user_part', ',', 'domain_part', ')', '=', 'value', '.', 'rsplit', '(', "'@'", ',', '1', ')', '#NEWLINE#', 'if', '(', 'not', 'user_regex', '.', 'match', '(', 'user_part', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'if', '(', '(', 'domain_part', 'not in', 'whitelist', ')', 'and', '(', 'not', 'domain_regex', '.', 'match', '(', 'domain_part', ')', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'try', ':', '#NEWLINE#', '#INDENT#', 'domain_part', '=', 'domain_part', '.', 'encode', '(', "'idna'", ')', '.', 'decode', '(', "'ascii'", ')', '#NEWLINE#', 'return', 'domain_regex', '.', 'match', '(', 'domain_part', ')', '#NEWLINE#', '#UNINDENT#', 'except', 'UnicodeError', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', 'True']


All attention probs:

[0.013265449553728104, 0.009448189288377762, 0.018949992954730988, 0.01313867513090372, 0.010357314720749855, 0.022749587893486023, 0.008617679588496685, 0.03749397024512291, 0.009582879953086376, 0.00800155010074377, 0.009109603241086006, 0.008701587095856667, 0.009139648638665676, 0.007521629333496094, 0.007970385253429413, 0.0077712638303637505, 0.007526889443397522, 0.006233853287994862, 0.023701444268226624, 0.0068121920339763165, 0.006451898720115423, 0.005275240633636713, 0.005543120205402374, 0.00609209481626749, 0.0058541023172438145, 0.018507234752178192, 0.0049663567915558815, 0.011304705403745174, 0.004763242322951555, 0.004821569658815861, 0.005572022870182991, 0.0034142015501856804, 0.00462891161441803, 0.004443948622792959, 0.016254106536507607, 0.003549149027094245, 0.0040472582913935184, 0.0037894356064498425, 0.006854081992059946, 0.003566595260053873, 0.02152046002447605, 0.003540138015523553, 0.004567015450447798, 0.003983943723142147, 0.0046593365259468555, 0.004537471104413271, 0.004389945417642593, 0.004117813892662525, 0.0044747996143996716, 0.004938917700201273, 0.004098979756236076, 0.015699448063969612, 0.004176500253379345, 0.020008308812975883, 0.004059117753058672, 0.0031592301093041897, 0.01131603866815567, 0.002326477086171508, 0.003244164399802685, 0.002869810676202178, 0.006141066551208496, 0.0030722026713192463, 0.006519979797303677, 0.0026505878195166588, 0.0044066342525184155, 0.0050803665071725845, 0.00442787678912282, 0.004007578827440739, 0.009145647287368774, 0.0026407993864268064, 0.004700626712292433, 0.0036440768744796515, 0.016104500740766525, 0.0032420658972114325, 0.0032040937803685665, 0.0031168030109256506, 0.004383521620184183, 0.0042879655957221985, 0.004160695243626833, 0.005059412214905024, 0.004435127601027489, 0.004621720872819424, 0.005368542391806841, 0.002666937652975321, 0.00318006775341928, 0.02125602774322033, 0.0037856241688132286, 0.030134765431284904, 0.003771423129364848, 0.00421918835490942, 0.0035671743098646402, 0.0032776647713035345, 0.007982867769896984, 0.0025533526204526424, 0.004179048351943493, 0.0038399221375584602, 0.022147946059703827, 0.0038405032828450203, 0.004185125231742859, 0.003969048615545034, 0.003922696225345135, 0.005407880060374737, 0.00526666734367609, 0.007295201066881418, 0.004693568684160709, 0.004862503614276648, 0.004196598660200834, 0.01881856843829155, 0.004508825019001961, 0.007915664464235306, 0.0026290039531886578, 0.0052735633216798306, 0.004281774163246155, 0.005016503855586052, 0.0029271726962178946, 0.0020377200562506914, 0.0044077238999307156, 0.00354217691347003, 0.006242829374969006, 0.0028133352752774954, 0.00553525285795331, 0.00692492863163352, 0.008311999030411243, 0.0037657967768609524, 0.0044607557356357574, 0.006404625251889229, 0.01707925647497177, 0.006529646459966898, 0.007744472473859787, 0.006674500182271004, 0.006374177988618612, 0.007480609230697155, 0.004751548171043396, 0.005132670048624277, 0.0043610576540231705, 0.005415423773229122, 0.004804650321602821, 0.005282222293317318, 0.005147953052073717, 0.005356119479984045, 0.007584195118397474, 0.008358602412045002]


Top-k source tokens:

['whitelist', 'whitelist', 'whitelist', 'value', 'domain_part', 'value', 'domain_part', 'domain_part', 'validator', 'domain_part']


Top-k attention probs:

[0.03749397024512291, 0.030134765431284904, 0.023701444268226624, 0.022749587893486023, 0.022147946059703827, 0.02152046002447605, 0.02125602774322033, 0.020008308812975883, 0.018949992954730988, 0.01881856843829155]
