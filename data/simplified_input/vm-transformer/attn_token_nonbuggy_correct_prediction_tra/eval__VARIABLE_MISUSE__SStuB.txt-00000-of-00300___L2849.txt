
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "@", "contextmanager", "#NEWLINE#", "def process_dialog(", "delay", "=", "0", ",", "accept", "=", "False", ",", "reject", "=", "False", ",", "function", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Context manager to automatically capture the active dialog and carry out\\n    certain actions.\\n\\n    Note that only one of ``accept``, ``reject``, or ``function`` should be\\n    specified.\\n\\n    Parameters\\n    ----------\\n    delay : int, optional\\n        The delay in ms before acting on the dialog (since it may not yet exist\\n        when the context manager is called).\\n    accept : bool, optional\\n        If `True`, accept the dialog after the specified delay.\\n    reject : bool, optional\\n        If `False`, reject the dialog after the specified delay\\n    function : func, optional\\n        For more complex user actions, specify a function that takes the dialog\\n        as the first and only argument.\\n    '", "#NEWLINE#", "def _accept(", "dialog", ")", ":", "#NEWLINE#", "#INDENT#", "dialog", ".", "accept", "(", ")", "#NEWLINE#", "#UNINDENT#", "def _reject(", "dialog", ")", ":", "#NEWLINE#", "#INDENT#", "dialog", ".", "reject", "(", ")", "#NEWLINE#", "#UNINDENT#", "n_args", "=", "sum", "(", "(", "accept", ",", "reject", ",", "(", "function", "is not", "None", ")", ")", ")", "#NEWLINE#", "if", "(", "n_args", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Only one of ``accept``, ``reject``, or ``function`` should be specified'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "n_args", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'One of ``accept``, ``reject``, or ``function`` should be specified'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "accept", ":", "#NEWLINE#", "#INDENT#", "function", "=", "_accept", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "reject", ":", "#NEWLINE#", "#INDENT#", "function", "=", "_reject", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "def wrapper(", ")", ":", "#NEWLINE#", "#INDENT#", "from", "glue.external.qt", "import", "get_qapp", "#NEWLINE#", "app", "=", "get_qapp", "(", ")", "#NEWLINE#", "dialog", "=", "app", ".", "focusWidget", "(", ")", ".", "window", "(", ")", "#NEWLINE#", "function", "(", "dialog", ")", "#NEWLINE#", "#UNINDENT#", "timer", "=", "QtCore", ".", "QTimer", "(", ")", "#NEWLINE#", "timer", ".", "setInterval", "(", "delay", ")", "#NEWLINE#", "timer", ".", "setSingleShot", "(", "True", ")", "#NEWLINE#", "timer", ".", "timeout", ".", "connect", "(", "wrapper", ")", "#NEWLINE#", "timer", ".", "start", "(", ")", "#NEWLINE#", "(", "yield", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [165, 173, 180, 187, 196, 127, 113, 5, 177, 52, 71, 91, 17, 62, 111, 125, 159, 9, 34, 57, 107, 193, 13, 47, 59, 121], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "glue-viz/glue/glue/utils/qt/helpers.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2849, "results": {"model": "transformer", "prob": {"loc": [[0.6355275511741638, 2.5965953227569116e-06, 9.827188307554025e-08, 1.5488981830458215e-07, 1.0831025747393142e-06, 1.0681243338694912e-06, 6.570511601466933e-08, 5.379283152251446e-07, 8.388238370571344e-08, 7.838934834580868e-07, 2.204089781798757e-07, 4.602606225034833e-07, 4.947436949009898e-08, 3.923654219306627e-07, 2.823241516125563e-07, 5.936213938184665e-07, 7.129447965326108e-08, 1.626334437787591e-06, 4.0942987311609613e-07, 2.3231412171753618e-07, 8.820929764397079e-08, 1.2995464260256995e-07, 1.8608594132274447e-07, 1.203353150458497e-07, 9.190760579258495e-07, 1.2690030359863158e-07, 5.423919446911896e-07, 6.552162085426971e-05, 2.7046775130656897e-07, 2.640907723616692e-07, 1.9513544202709454e-07, 1.4286780469774385e-07, 8.804943973927948e-08, 4.5221337785505966e-08, 4.231414152400248e-07, 9.901699513648055e-07, 1.6503785218446865e-06, 3.921409756912908e-07, 2.6458437218934705e-07, 2.0039874470967334e-07, 1.908204831124749e-05, 2.5936517999980424e-07, 2.4026689970924053e-07, 2.543793868881039e-07, 1.8364944764925895e-07, 8.344462685272447e-07, 1.19708531087781e-07, 2.419626298433286e-06, 5.400749500950042e-07, 2.3514394342782907e-06, 4.4447094182942237e-07, 2.7441146244200354e-07, 5.292825449032534e-07, 3.689745753376883e-08, 2.262235021532888e-08, 2.4178280000342056e-07, 1.004847376862017e-06, 0.15397077798843384, 7.16522322363744e-07, 0.035339199006557465, 3.022383054940292e-07, 1.0376772934250766e-06, 0.0033640938345342875, 8.69236544076557e-07, 8.133792448461463e-07, 1.525771381238883e-06, 5.094887569612183e-07, 4.0688536273592035e-07, 6.470017410720175e-07, 4.829971089748142e-07, 4.642493252049462e-07, 0.00022944113879930228, 2.4691028102097334e-06, 6.519889666378731e-06, 4.209426549550699e-07, 9.408902315044543e-07, 3.9901507875583775e-07, 1.9722223498774838e-07, 5.343186444406456e-07, 4.3650885572787956e-07, 4.197630914859474e-06, 2.0481668343563797e-06, 7.556617447335157e-07, 6.777456178497232e-07, 3.213777404198481e-07, 5.270069323159987e-07, 4.005191271971853e-07, 4.392880441628222e-07, 3.197595788151375e-07, 3.4467620935174637e-07, 6.493284558928281e-07, 0.0005119382403790951, 1.0906651368713938e-06, 5.155837698112009e-06, 1.8303379079043225e-07, 9.934483387041837e-07, 5.405072442954406e-07, 2.953192108634539e-07, 1.2794677104466246e-06, 8.798677981758374e-07, 3.6417111459741136e-07, 1.2426391549524851e-05, 4.860764306613419e-07, 5.360785166885762e-07, 6.709524882353435e-07, 1.0397923233540496e-06, 4.047478796564974e-07, 0.09300292283296585, 1.7966804080060683e-06, 1.3091463415548787e-06, 6.640476044594834e-07, 2.3206291643873556e-06, 6.168672825879185e-07, 0.0029203081503510475, 4.591549327415123e-07, 3.0347305823852366e-07, 4.549252992092079e-07, 5.172051373847353e-07, 4.113727243293397e-07, 3.461595667886286e-07, 4.92483479774819e-07, 0.03422846272587776, 1.1656621836664272e-06, 7.84769383699313e-07, 5.332628347787249e-07, 1.6953265458141686e-06, 5.131914804223925e-07, 0.009191121906042099, 6.176371698529692e-07, 4.698131306213327e-07, 3.434912798638834e-07, 0.0002068525063805282, 4.6573802592320135e-07, 6.759788107046916e-07, 3.34159921067112e-07, 2.237335081645142e-07, 8.605700259067817e-07, 5.395035600486153e-07, 2.910368493758142e-06, 5.417142892838456e-05, 1.6294399074467947e-07, 2.1299435957189417e-06, 6.327265111849556e-08, 2.2528288354806136e-06, 5.6461733038304374e-05, 1.485687107560807e-06, 6.745665928065137e-07, 5.134032107889652e-06, 1.0594345667414018e-07, 3.6380663459567586e-07, 2.0168290859601257e-07, 5.036305950056885e-08, 8.19405443053256e-07, 1.913510686790687e-06, 4.390376204810309e-07, 4.376676940864854e-07, 2.9270136110426392e-06, 1.4657885003543925e-06, 3.0010400564606243e-07, 3.683647810248658e-05, 8.612247626160752e-08, 0.0010588231962174177, 1.4956596032789093e-06, 1.1377206874385593e-06, 5.612860149994958e-07, 4.074771311479708e-07, 1.5105611339549796e-07, 2.223044646143535e-07, 2.029497778721634e-07, 1.2945589844548522e-07, 1.5910658476059325e-05, 6.376106284733396e-06, 5.966044227534439e-07, 1.7816967101680348e-07, 1.7495599990979827e-07, 1.816668415699496e-08, 2.50975489279881e-07, 0.0027743205428123474, 2.090577936542104e-06, 5.280775212668232e-07, 2.6314157963724938e-08, 2.454002299145941e-07, 8.926048877810899e-08, 1.3671293572770082e-06, 5.057043017586693e-05, 3.526590717228828e-06, 8.121793939608324e-07, 2.938969885235565e-07, 1.6901195465379715e-07, 2.761894108971319e-07, 1.9261830175310024e-07, 2.424406488898967e-07, 1.3175618960303837e-06, 0.027080994099378586, 6.35209016763838e-06, 1.0858930181711912e-06, 3.6522443735975685e-08, 3.455744206348754e-07, 1.2699157991846732e-07, 5.642407359118806e-06, 3.6921170249115676e-05, 2.450638021400664e-06, 4.1875566125781916e-07, 5.790617797174491e-05, 3.317995651741512e-05]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.14831547439098358, 0.0, 0.0, 0.0, 0.0150029007345438, 0.0, 0.0, 0.0, 0.047896746546030045, 0.0, 0.0, 0.0, 0.7273216247558594, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0023026256822049618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011638687923550606, 0.0, 0.0, 0.0, 0.0, 0.01024492084980011, 0.0, 0.0, 0.0, 0.0, 0.00010774989641504362, 0.0, 6.104938802309334e-05, 0.0, 0.0, 0.0007967138080857694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001103720860555768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010976461926475167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005608619539998472, 0.0, 0.0, 0.0, 0.005995529238134623, 0.0, 0.0014839333016425371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0018035101238638163, 0.0, 0.0, 0.0, 0.0056184083223342896, 0.0, 0.0004531635786406696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008539730682969093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001742855180054903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003595057176426053, 0.0, 0.0, 0.0, 0.0005139645654708147, 0.0, 0.0, 0.0003197542391717434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012192075373604894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00038442405639216304, 0.0, 0.0, 0.0018797337543219328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.4532998204231262, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', '@', 'contextmanager', '#NEWLINE#', 'def process_dialog(', 'delay', '=', '0', ',', 'accept', '=', 'False', ',', 'reject', '=', 'False', ',', 'function', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n    Context manager to automatically capture the active dialog and carry out\\n    certain actions.\\n\\n    Note that only one of ``accept``, ``reject``, or ``function`` should be\\n    specified.\\n\\n    Parameters\\n    ----------\\n    delay : int, optional\\n        The delay in ms before acting on the dialog (since it may not yet exist\\n        when the context manager is called).\\n    accept : bool, optional\\n        If `True`, accept the dialog after the specified delay.\\n    reject : bool, optional\\n        If `False`, reject the dialog after the specified delay\\n    function : func, optional\\n        For more complex user actions, specify a function that takes the dialog\\n        as the first and only argument.\\n    '", '#NEWLINE#', 'def _accept(', 'dialog', ')', ':', '#NEWLINE#', '#INDENT#', 'dialog', '.', 'accept', '(', ')', '#NEWLINE#', '#UNINDENT#', 'def _reject(', 'dialog', ')', ':', '#NEWLINE#', '#INDENT#', 'dialog', '.', 'reject', '(', ')', '#NEWLINE#', '#UNINDENT#', 'n_args', '=', 'sum', '(', '(', 'accept', ',', 'reject', ',', '(', 'function', 'is not', 'None', ')', ')', ')', '#NEWLINE#', 'if', '(', 'n_args', '>', '1', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', "'Only one of ``accept``, ``reject``, or ``function`` should be specified'", ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'n_args', '==', '0', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', "'One of ``accept``, ``reject``, or ``function`` should be specified'", ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'if', 'accept', ':', '#NEWLINE#', '#INDENT#', 'function', '=', '_accept', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', 'reject', ':', '#NEWLINE#', '#INDENT#', 'function', '=', '_reject', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'def wrapper(', ')', ':', '#NEWLINE#', '#INDENT#', 'from', 'glue.external.qt', 'import', 'get_qapp', '#NEWLINE#', 'app', '=', 'get_qapp', '(', ')', '#NEWLINE#', 'dialog', '=', 'app', '.', 'focusWidget', '(', ')', '.', 'window', '(', ')', '#NEWLINE#', 'function', '(', 'dialog', ')', '#NEWLINE#', '#UNINDENT#', 'timer', '=', 'QtCore', '.', 'QTimer', '(', ')', '#NEWLINE#', 'timer', '.', 'setInterval', '(', 'delay', ')', '#NEWLINE#', 'timer', '.', 'setSingleShot', '(', 'True', ')', '#NEWLINE#', 'timer', '.', 'timeout', '.', 'connect', '(', 'wrapper', ')', '#NEWLINE#', 'timer', '.', 'start', '(', ')', '#NEWLINE#', '(', 'yield', ')']


All attention probs:

[0.00910936389118433, 0.007899757474660873, 0.012020636349916458, 0.010764080099761486, 0.00886701699346304, 0.01700868457555771, 0.007576657924801111, 0.006128082983195782, 0.005496517289429903, 0.02000313065946102, 0.0074712978675961494, 0.007724633440375328, 0.006857185158878565, 0.022786106914281845, 0.007758294232189655, 0.0070010279305279255, 0.005955646280199289, 0.020425744354724884, 0.006925482768565416, 0.006011216435581446, 0.0053578638471663, 0.004901710897684097, 0.004738862160593271, 0.004705039784312248, 0.005481079686433077, 0.004520271439105272, 0.006053565070033073, 0.010427922941744328, 0.003755623009055853, 0.0038409687113016844, 0.003646237775683403, 0.003709515556693077, 0.006298992317169905, 0.002829395467415452, 0.0029987934976816177, 0.003144596004858613, 0.003316948190331459, 0.004137350711971521, 0.004285989794880152, 0.0046384274028241634, 0.010677890852093697, 0.005081190261989832, 0.004115551244467497, 0.0037642756942659616, 0.0030940333381295204, 0.0066407364793121815, 0.002468183869495988, 0.0030159030575305223, 0.003057279158383608, 0.0031300459522753954, 0.0032295426353812218, 0.003014311660081148, 0.010310388170182705, 0.0031038967426866293, 0.002904624445363879, 0.0022115735337138176, 0.0022739425767213106, 0.023457778617739677, 0.0021594788413494825, 0.012729654088616371, 0.002310472307726741, 0.0022380026057362556, 0.01893683150410652, 0.002013792283833027, 0.002060126978904009, 0.002388510387390852, 0.002596569014713168, 0.0027377919759601355, 0.0038057814817875624, 0.0035433622542768717, 0.0022801365703344345, 0.006992243230342865, 0.002419044030830264, 0.00407723244279623, 0.0019544099923223257, 0.0019286929164081812, 0.0026030687149614096, 0.002500781323760748, 0.0031355826649814844, 0.0028899034950882196, 0.0033554898109287024, 0.0027346517890691757, 0.0019274827791377902, 0.0028403238393366337, 0.0029492315370589495, 0.00748657388612628, 0.0026902982499450445, 0.0033190303947776556, 0.0030012100469321012, 0.0031719340477138758, 0.0018383192364126444, 0.006136438809335232, 0.0019760720897465944, 0.0033351073507219553, 0.0018442627042531967, 0.0020362013019621372, 0.0025871761608868837, 0.002699685748666525, 0.0034842893946915865, 0.0028196023777127266, 0.004475080408155918, 0.0028884883504360914, 0.001963651040568948, 0.0038650461938232183, 0.002972659422084689, 0.0027318589854985476, 0.003628498176112771, 0.01772029511630535, 0.0017746014054864645, 0.002319571329280734, 0.0027141706086695194, 0.00610028300434351, 0.0027495555114001036, 0.009375962428748608, 0.002440107986330986, 0.0023907916620373726, 0.004577644634991884, 0.0019845860078930855, 0.0022752168588340282, 0.002488201018422842, 0.0030050580389797688, 0.01393971499055624, 0.0023635781835764647, 0.0024546082131564617, 0.0026387160178273916, 0.007138859946280718, 0.0029112668707966805, 0.012670658528804779, 0.002928436268121004, 0.0026440892834216356, 0.0027925940230488777, 0.011935273185372353, 0.005365899298340082, 0.002199891721829772, 0.0023032177705317736, 0.002191821113228798, 0.00300630833953619, 0.001604831893928349, 0.0043867891654372215, 0.0068581597879529, 0.0032614925876259804, 0.01088687963783741, 0.0030213070567697287, 0.0043240501545369625, 0.003675188170745969, 0.001627219608053565, 0.002875552512705326, 0.008685829117894173, 0.0030473030637949705, 0.00790852215141058, 0.0017294726567342877, 0.0018119129817932844, 0.0032395569141954184, 0.0036024341825395823, 0.003313368186354637, 0.0025325273163616657, 0.0035389168187975883, 0.0025425623171031475, 0.003882259363308549, 0.007598248776048422, 0.003340036142617464, 0.011825179681181908, 0.001890188897959888, 0.0029407660476863384, 0.002725814701989293, 0.011259892955422401, 0.003078106325119734, 0.002870795549824834, 0.0015285921981558204, 0.0021764482371509075, 0.0029397725593298674, 0.002000342821702361, 0.0035787620581686497, 0.006275353021919727, 0.001788755296729505, 0.0027181615587323904, 0.0024696269538253546, 0.019906923174858093, 0.0019886766094714403, 0.003277515061199665, 0.005694750230759382, 0.0018068572971969843, 0.0023085882421582937, 0.0027838179375976324, 0.0035985272843390703, 0.002897006692364812, 0.004853330552577972, 0.008448630571365356, 0.00453556701540947, 0.003517881967127323, 0.003203009255230427, 0.004205096047371626, 0.003951824735850096, 0.020293785259127617, 0.0032665980979800224, 0.004239113535732031, 0.005352223291993141, 0.0018927837954834104, 0.0030371418688446283, 0.0027044687885791063, 0.002418763004243374, 0.0032727874349802732, 0.0022831731475889683, 0.0036056782118976116, 0.002702530473470688]


Top-k source tokens:

['accept', 'reject', 'function', 'wrapper', 'accept', 'delay', 'function', 'accept', 'delay', 'reject']


Top-k attention probs:

[0.023457778617739677, 0.022786106914281845, 0.020425744354724884, 0.020293785259127617, 0.02000313065946102, 0.019906923174858093, 0.01893683150410652, 0.01772029511630535, 0.01700868457555771, 0.01393971499055624]
