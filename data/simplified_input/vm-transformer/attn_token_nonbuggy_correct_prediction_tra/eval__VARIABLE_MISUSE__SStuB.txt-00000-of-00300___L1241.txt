
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "/", "Catalan", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "symbols", "(", "'n'", ",", "integer", "=", "True", ")", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [94, 148, 156, 6, 21, 26, 37, 52, 58, 72, 118, 122, 127, 134, 13, 35, 44, 70, 110, 144, 87, 146, 154], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "sympy/sympy/sympy/printing/tests/test_ccode.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1241, "results": {"model": "transformer", "prob": {"loc": [[0.7329419255256653, 2.561670044087805e-06, 8.718274102648138e-08, 9.774112186278217e-08, 1.2374279378946085e-07, 9.014568291831893e-08, 1.4838328752375674e-06, 2.9369859433359125e-08, 6.26487093313699e-08, 1.233015183288444e-07, 1.8998538280357025e-06, 7.332398865855794e-08, 6.700872745568631e-08, 1.1810144314949866e-05, 2.6628722338273292e-08, 7.392685574814095e-08, 9.809064493992992e-08, 5.37447078841069e-07, 7.317715500221311e-08, 3.5075974125220455e-08, 5.1003517853587255e-08, 4.595121936290525e-05, 2.0361724750728172e-08, 3.143572513408799e-08, 7.993101462488994e-06, 2.7074850805774986e-08, 0.00017495782230980694, 5.703109096089065e-08, 3.27821325640798e-08, 2.8227807646885594e-08, 1.5271484699042048e-07, 1.2122389136948186e-07, 4.1683552609583785e-08, 1.7016225228871917e-07, 7.08827201378881e-08, 1.4718496458954178e-05, 4.882020334662229e-07, 0.0006661706138402224, 1.621728102918496e-07, 1.6678677994264035e-08, 7.544044677842976e-08, 1.589902353771322e-06, 5.512284815267776e-07, 2.9241957122394524e-07, 1.6207386579480954e-05, 4.382460971896762e-08, 2.0036900139075442e-07, 1.8779068966523482e-07, 4.765040102938656e-06, 2.555327398567897e-07, 6.737757018981938e-08, 9.301900405489505e-08, 0.00022226608416531235, 4.312411050477749e-08, 3.0964535824296036e-08, 2.2212336148186296e-07, 1.797441473172512e-05, 8.606716050962859e-08, 0.000172460509929806, 3.4091343081854575e-08, 6.651732320506198e-08, 3.672458433356951e-06, 2.553417743911268e-07, 2.0797301658603828e-07, 1.7046615141680377e-07, 7.913079684840341e-07, 3.714591230163933e-07, 6.427472243331067e-08, 4.2000726807600586e-07, 1.1433494506718489e-07, 1.9318282284075394e-05, 3.765007079437055e-07, 0.0009119306923821568, 3.5538090514819487e-07, 8.158395559121345e-08, 3.2041938879956433e-07, 3.287620131686708e-07, 6.579807632078882e-06, 2.3655295535718324e-06, 1.0227247457805788e-06, 5.374317311179766e-07, 1.4033132345048216e-07, 9.86585746431956e-07, 1.888167389552109e-06, 8.132422522066918e-07, 7.027120432212541e-07, 5.550862738346041e-07, 1.7268499732381315e-06, 2.586104699275893e-07, 8.420968100608661e-08, 2.12087570616859e-06, 7.914246452855878e-06, 1.3106484857416945e-06, 1.5391105989692733e-06, 2.1831758658663603e-06, 2.5896537181324675e-07, 8.798844675084183e-08, 1.1108774060630822e-06, 5.5827672440500464e-06, 1.021724528982304e-06, 5.796125179813316e-08, 1.1499483889565454e-06, 1.5506842828472145e-05, 1.0543657253947458e-06, 9.512245924270246e-07, 3.6053285157322534e-07, 3.696548901643837e-06, 9.446938520341064e-07, 7.576378493467928e-07, 1.0585953305053408e-06, 4.732629895443097e-05, 2.7672129476741247e-07, 4.572076193198882e-07, 5.535865170713805e-07, 1.0209556421614252e-05, 8.204152095458994e-07, 2.0213377638356178e-07, 1.311683945459663e-06, 0.007653747219592333, 1.024572213736974e-07, 2.970106152133667e-07, 9.159386991086649e-07, 0.004636365920305252, 1.7860611478681676e-07, 4.0771249132376397e-07, 2.0516838048934005e-05, 7.048114412100404e-07, 0.0075064837001264095, 7.858181447772949e-07, 1.7786024386623467e-07, 2.547854478507361e-07, 2.256152669133371e-07, 0.0004696917603723705, 9.022381846079952e-07, 0.004909893963485956, 1.899855647025106e-06, 8.033538847485033e-07, 7.681683200644329e-07, 8.402617481806374e-07, 1.4540646589011885e-06, 6.117519433246343e-07, 3.173167328895943e-07, 1.1525389709277079e-05, 1.1416132110753097e-06, 0.000187768237083219, 7.352173270191997e-06, 0.10335277020931244, 1.9197288565919735e-05, 0.0369950570166111, 2.0502313873294042e-06, 9.91169031294703e-07, 3.8061381246734527e-07, 5.814289579575416e-06, 1.7426574459022959e-06, 0.08863724768161774, 1.0113038115378004e-05, 0.010149596258997917, 1.2335674455243861e-06, 8.943397347138671e-07, 1.2786010756826727e-06, 2.4334925910807215e-05, 4.878476829617284e-06]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05219472572207451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033327531069517136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012275944463908672, 0.0, 0.0, 0.0, 0.0, 0.015461876057088375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00023740630422253162, 0.0, 0.030516691505908966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07669716328382492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023069996386766434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016360372304916382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.026511543197557e-05, 0.0, 0.04876381531357765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03772691637277603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14412100613117218, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2370242327451706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02987823821604252, 0.0, 0.0, 0.0, 0.06384336948394775, 0.0, 0.0, 0.0, 0.0, 0.04782993346452713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0692642405629158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008586655021645129, 0.0, 0.0002956395619548857, 0.0, 0.024233035743236542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00038735283305868506, 0.0, 0.035541653633117676, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.3106888234615326, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def test_ccode_inline_function(', ')', ':', '#NEWLINE#', '#INDENT#', 'x', '=', 'symbols', '(', "'x'", ')', '#NEWLINE#', 'g', '=', 'implemented_function', '(', "'g'", ',', 'Lambda', '(', 'x', ',', '(', '2', '*', 'x', ')', ')', ')', '#NEWLINE#', 'assert', '(', 'ccode', '(', 'g', '(', 'x', ')', ')', '==', "'2*x'", ')', '#NEWLINE#', 'g', '=', 'implemented_function', '(', "'g'", ',', 'Lambda', '(', 'x', ',', '(', '(', '2', '*', 'x', ')', '/', 'Catalan', ')', ')', ')', '#NEWLINE#', 'assert', '(', 'ccode', '(', 'g', '(', 'x', ')', ')', '==', '(', "'double const Catalan = %s;\\n2*x/Catalan'", '%', 'Catalan', '.', 'n', '(', ')', ')', ')', '#NEWLINE#', 'A', '=', 'IndexedBase', '(', "'A'", ')', '#NEWLINE#', 'i', '=', 'Idx', '(', "'i'", ',', 'symbols', '(', "'n'", ',', 'integer', '=', 'True', ')', ')', '#NEWLINE#', 'g', '=', 'implemented_function', '(', "'g'", ',', 'Lambda', '(', 'x', ',', '(', '(', 'x', '*', '(', '1', '+', 'x', ')', ')', '*', '(', '2', '+', 'x', ')', ')', ')', ')', '#NEWLINE#', 'assert', '(', 'ccode', '(', 'g', '(', 'A', '[', 'i', ']', ')', ',', 'assign_to', '=', 'A', '[', 'i', ']', ')', '==', "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ')']


All attention probs:

[0.014501135796308517, 0.00880287867039442, 0.0156736858189106, 0.009085501544177532, 0.008579283952713013, 0.008033666759729385, 0.023654920980334282, 0.010265587829053402, 0.00912019144743681, 0.006414839066565037, 0.011115196160972118, 0.007481291890144348, 0.008324717171490192, 0.016854701563715935, 0.00872751884162426, 0.00774924922734499, 0.006020831409841776, 0.006952798925340176, 0.005835412535816431, 0.008503319695591927, 0.005855189636349678, 0.017818545922636986, 0.004996179603040218, 0.0047644637525081635, 0.010587271302938461, 0.0042105927132070065, 0.01723644882440567, 0.0034952436108142138, 0.003312282497063279, 0.003527527442201972, 0.005147148389369249, 0.005177145823836327, 0.0035058811772614717, 0.005016722250729799, 0.003329694736748934, 0.01038173958659172, 0.0036225169897079468, 0.012145341373980045, 0.0034478050656616688, 0.002772815525531769, 0.0029757125303149223, 0.004808276891708374, 0.0038344489876180887, 0.005407566670328379, 0.013561880216002464, 0.00672166096046567, 0.005056635942310095, 0.0028508102986961603, 0.004101006779819727, 0.0033054635860025883, 0.004164454061537981, 0.0023689100053161383, 0.010041735135018826, 0.00272313947789371, 0.0022639217786490917, 0.0026882763486355543, 0.009643519297242165, 0.0027399123646318913, 0.009695232845842838, 0.0028384383767843246, 0.0029726559296250343, 0.007157094310969114, 0.0029732969123870134, 0.002889645053073764, 0.0026531685143709183, 0.004784903023391962, 0.005351467523723841, 0.003111825091764331, 0.004576501436531544, 0.002980452263727784, 0.010329925455152988, 0.0033353723119944334, 0.013504821807146072, 0.0030208402313292027, 0.0029521442484110594, 0.0029018549248576164, 0.002301835920661688, 0.003282377729192376, 0.002632793039083481, 0.0040740966796875, 0.002187902107834816, 0.002880001673474908, 0.002948022447526455, 0.0029565475415438414, 0.002745310077443719, 0.0026540968101471663, 0.004888717085123062, 0.015361183322966099, 0.0038301213644444942, 0.004319522529840469, 0.0030180204194039106, 0.004176714923232794, 0.0026050452142953873, 0.003934822045266628, 0.01639723591506481, 0.00439445860683918, 0.003725061658769846, 0.002970860106870532, 0.0044574919156730175, 0.0030453430954366922, 0.0032299913000315428, 0.0028643980622291565, 0.005476520396769047, 0.004334408789873123, 0.005235078278928995, 0.0032864082604646683, 0.003433082951232791, 0.0022695367224514484, 0.0017348268302157521, 0.004431617446243763, 0.01356540061533451, 0.005360215902328491, 0.005243799649178982, 0.00277706584893167, 0.0034364634193480015, 0.002548238728195429, 0.0051105571910738945, 0.003186661982908845, 0.01482528354972601, 0.002876448445022106, 0.00280876737087965, 0.0030317306518554688, 0.01322893239557743, 0.0034339374396950006, 0.003271813038736582, 0.005304745864123106, 0.005319586489349604, 0.013088157400488853, 0.003173511242493987, 0.002947710221633315, 0.0032752796541899443, 0.003071510698646307, 0.009459862485527992, 0.00297484896145761, 0.011414913460612297, 0.002200888004153967, 0.0022683104034513235, 0.002229308011010289, 0.0021428170148283243, 0.0046653784811496735, 0.005187977571040392, 0.0028011752292513847, 0.004639416933059692, 0.00300454068928957, 0.012898134998977184, 0.0040033068507909775, 0.028460467234253883, 0.003294815542176366, 0.014609077014029026, 0.0030293266754597425, 0.003005698788911104, 0.0040380521677434444, 0.00911294762045145, 0.0067220390774309635, 0.036103732883930206, 0.006412268150597811, 0.017370734363794327, 0.00545666366815567, 0.0055440329015254974, 0.005073660984635353, 0.0051202597096562386, 0.00445181829854846]


Top-k source tokens:

['A', 'A', 'x', 'x', 'i', 'x', 'g', 'i', ')', 'A']


Top-k attention probs:

[0.036103732883930206, 0.028460467234253883, 0.023654920980334282, 0.017818545922636986, 0.017370734363794327, 0.01723644882440567, 0.016854701563715935, 0.01639723591506481, 0.0156736858189106, 0.015361183322966099]
