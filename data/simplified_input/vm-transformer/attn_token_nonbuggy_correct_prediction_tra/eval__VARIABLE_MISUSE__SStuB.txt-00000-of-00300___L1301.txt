
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def is_fullfilled_by(", "self", ",", "other", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Checks if the other index already fulfills\\n        all the indexing and constraint needs of the current one.\\n\\n        :param other: The other index\\n        :type other: Index\\n\\n        :rtype: bool\\n        '", "#NEWLINE#", "if", "(", "len", "(", "other", ".", "get_columns", "(", ")", ")", "!=", "len", "(", "self", ".", "get_columns", "(", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "self", ".", "spans_columns", "(", "other", ".", "get_columns", "(", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "self", ".", "same_partial_index", "(", "other", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "is_simple_index", "(", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "if", "(", "other", ".", "is_primary", "(", ")", "!=", "self", ".", "is_primary", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "(", "other", ".", "is_unique", "(", ")", "!=", "self", ".", "is_unique", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "return", "True"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 15, 45, 66, 91, 112, 2, 24, 41, 62, 77, 97, 118], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "sdispater/orator/orator/dbal/index.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1301, "results": {"model": "transformer", "prob": {"loc": [[0.9857699871063232, 1.0431219379825052e-05, 1.1529082257766277e-06, 9.005464107758598e-08, 4.1872286260513647e-07, 1.9369812775948958e-07, 2.675316466138611e-07, 3.0355261060321936e-07, 2.281090161204702e-07, 1.3827367411067826e-06, 8.759953971093637e-07, 2.7573881311582227e-07, 6.613971237356964e-08, 7.941883950479678e-08, 1.3499148963092011e-06, 0.0019952324219048023, 2.3065367713570595e-06, 2.9539833690250816e-07, 1.1024872037523892e-06, 7.42507063478115e-06, 7.136024748888303e-08, 2.1955321471978095e-07, 1.297756710982867e-07, 9.194270205625799e-06, 3.550646943040192e-05, 1.0702563031372847e-06, 1.0246303361327591e-07, 1.2268296813999768e-05, 3.8415469134633895e-06, 9.356362795642781e-08, 8.420024499855572e-08, 1.103546651393117e-06, 9.248804389017096e-08, 7.162383752756796e-08, 4.197966418928445e-08, 3.6199089663568884e-06, 1.6856382956120797e-07, 4.0662968103788444e-07, 2.9053529715383775e-07, 6.909652938702493e-07, 3.459452045717626e-06, 2.0914681954309344e-05, 8.107205644591886e-07, 6.708216204742712e-08, 5.733227226301096e-07, 2.2709626136929728e-05, 2.7107910227641696e-06, 3.4760716971504735e-07, 7.673036634514574e-06, 4.1653847802081145e-06, 1.6150889337041008e-07, 7.477805752387212e-08, 7.145283120735257e-07, 7.25152631275705e-08, 3.348270638525719e-08, 3.3959096867874905e-08, 1.0437761375214905e-06, 9.094064523651468e-08, 9.040519444170059e-08, 6.118779083408299e-08, 4.1684387497298303e-07, 1.1552988326002378e-06, 7.89965815783944e-06, 6.663153726549353e-07, 5.2100041614266956e-08, 4.989082071915618e-07, 0.010681835003197193, 7.180165795261928e-08, 1.767132573604613e-08, 1.5462245528397034e-06, 9.979230242151971e-08, 8.162600551031574e-08, 9.387609622990567e-08, 6.51369236948085e-06, 7.164764497247234e-07, 1.3013067245992715e-06, 5.366150048757845e-07, 2.4171247787307948e-05, 1.117387910198886e-06, 1.9720360455721675e-07, 4.688120952778263e-06, 2.4783832941466244e-06, 9.336298717244063e-06, 1.86151680736657e-06, 4.963833930560213e-07, 6.452056027228537e-07, 4.558288310363423e-06, 8.822968879940163e-07, 1.1983032663920312e-06, 5.431538738775998e-07, 3.4401332413835917e-06, 8.486100705340505e-05, 3.7009317566116806e-06, 2.4388253905271995e-07, 1.401707595505286e-05, 5.256520694274514e-07, 5.666233278134314e-07, 5.9552094171522185e-05, 4.4596395127882715e-06, 1.8161755122036993e-07, 8.114810043480247e-05, 2.1244446543278173e-05, 5.626042707262968e-07, 3.0316094125737436e-05, 2.2138590338727226e-06, 1.1436831073297071e-06, 4.23802504201376e-07, 1.5568744856864214e-05, 3.4607917314133374e-06, 5.234842319623567e-06, 7.478550969608477e-07, 3.62235539341782e-07, 0.0001190581388073042, 2.433949475744157e-06, 2.595475052658003e-07, 1.925435572047718e-05, 5.017869852963486e-07, 8.691974358043808e-07, 2.62764315266395e-05, 3.1012575618660776e-06, 1.64212721642798e-07, 0.0001545117556815967, 1.2143118510721251e-05, 1.106143940887705e-06, 3.370066042407416e-05, 1.2866883025708375e-06, 9.055289069692662e-07, 7.655183367205609e-07, 2.385574407526292e-05, 2.659629672052688e-06, 2.603056600491982e-06, 1.4031619457455236e-06, 0.0005751837161369622]], "pointer": [[0.0, 0.0, 0.3335733115673065, 0.0, 0.01191670447587967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11601945757865906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03970717638731003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32822200655937195, 0.0, 0.0, 0.0, 0.1082853153347969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029795551672577858, 0.0, 0.0, 0.0, 8.232069376390427e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013508082367479801, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020112101919949055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004071091301739216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007844862528145313, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004962970968335867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.014332211576402187, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def is_fullfilled_by(', 'self', ',', 'other', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Checks if the other index already fulfills\\n        all the indexing and constraint needs of the current one.\\n\\n        :param other: The other index\\n        :type other: Index\\n\\n        :rtype: bool\\n        '", '#NEWLINE#', 'if', '(', 'len', '(', 'other', '.', 'get_columns', '(', ')', ')', '!=', 'len', '(', 'self', '.', 'get_columns', '(', ')', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'self', '.', 'spans_columns', '(', 'other', '.', 'get_columns', '(', ')', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'self', '.', 'same_partial_index', '(', 'other', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'if', 'self', '.', 'is_simple_index', '(', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'True', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'other', '.', 'is_primary', '(', ')', '!=', 'self', '.', 'is_primary', '(', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'other', '.', 'is_unique', '(', ')', '!=', 'self', '.', 'is_unique', '(', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'False', '#NEWLINE#', '#UNINDENT#', 'return', 'True']


All attention probs:

[0.02249395288527012, 0.010423555038869381, 0.05390897020697594, 0.018035976216197014, 0.032249052077531815, 0.015400304459035397, 0.010826444253325462, 0.010507727973163128, 0.009972495958209038, 0.014446389861404896, 0.011410110630095005, 0.012503576464951038, 0.008069097995758057, 0.007128434721380472, 0.007221813313663006, 0.02758803404867649, 0.006294298451393843, 0.007355039939284325, 0.007229916285723448, 0.007459674030542374, 0.006630252115428448, 0.005701194051653147, 0.005291656590998173, 0.005927009973675013, 0.020685913041234016, 0.004110762849450111, 0.004018720239400864, 0.00500973965972662, 0.005246960092335939, 0.00468401750549674, 0.004180500749498606, 0.005225666798651218, 0.005885870661586523, 0.005778544116765261, 0.006230746861547232, 0.007933957502245903, 0.006163766607642174, 0.006500772200524807, 0.007293743081390858, 0.005308046005666256, 0.004111214075237513, 0.014476238749921322, 0.004039319232106209, 0.0047212811186909676, 0.003791868221014738, 0.010684899985790253, 0.004199806600809097, 0.004112607333809137, 0.004192115738987923, 0.005066574085503817, 0.004100610967725515, 0.003324934048578143, 0.0036337871570140123, 0.004275121260434389, 0.004510455299168825, 0.004765932913869619, 0.00626898230984807, 0.004384238738566637, 0.004660542588680983, 0.0049954624846577644, 0.004231273662298918, 0.003969860728830099, 0.013060610741376877, 0.0027435817755758762, 0.0044930544681847095, 0.004048507660627365, 0.03585422784090042, 0.0048263114877045155, 0.004536101128906012, 0.004551439546048641, 0.005691923666745424, 0.005516717676073313, 0.006879962515085936, 0.006212141364812851, 0.004976283293217421, 0.004800252616405487, 0.006165576633065939, 0.009402147494256496, 0.002802672330290079, 0.004240407142788172, 0.004189243074506521, 0.0038506542332470417, 0.003844210412353277, 0.004743227269500494, 0.004583653528243303, 0.005008740350604057, 0.00722337793558836, 0.006200669799000025, 0.006841168273240328, 0.007308777887374163, 0.0043146139942109585, 0.011892370879650116, 0.0030444355215877295, 0.004012970253825188, 0.004970623645931482, 0.004000821616500616, 0.004969508852809668, 0.011948755010962486, 0.004301030654460192, 0.003978218883275986, 0.005376747809350491, 0.004839017987251282, 0.00426940992474556, 0.006220508832484484, 0.0069155278615653515, 0.005907466169446707, 0.006944118533283472, 0.005360799375921488, 0.0058841765858232975, 0.006141571793705225, 0.00800298061221838, 0.00537325581535697, 0.015000407584011555, 0.002820890862494707, 0.004357337485998869, 0.004617363680154085, 0.002861566608771682, 0.00330523238517344, 0.011247395537793636, 0.002557197120040655, 0.00454986235126853, 0.005784368608146906, 0.004833866376429796, 0.00412964029237628, 0.006667531561106443, 0.007424223702400923, 0.008817806839942932, 0.009972063824534416, 0.008386344648897648, 0.008320724591612816, 0.007974994368851185, 0.011489533819258213, 0.01076724473387003]


Top-k source tokens:

['self', 'other', 'other', 'other', '#NEWLINE#', 'self', ',', ')', 'other', 'self']


Top-k attention probs:

[0.05390897020697594, 0.03585422784090042, 0.032249052077531815, 0.02758803404867649, 0.02249395288527012, 0.020685913041234016, 0.018035976216197014, 0.015400304459035397, 0.015000407584011555, 0.014476238749921322]
