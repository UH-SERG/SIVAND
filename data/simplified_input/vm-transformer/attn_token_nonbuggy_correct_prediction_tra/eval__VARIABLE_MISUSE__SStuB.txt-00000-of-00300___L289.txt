
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def enable(", "instrumentation_key", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Enables the Application Insights logging handler for the root logger for the supplied instrumentation key.\\n    Multiple calls to this function with different instrumentation keys result in multiple handler instances.\\n\\n    .. code:: python\\n\\n        import logging\\n        from applicationinsights.logging import enable\\n\\n        # set up logging\\n        enable('<YOUR INSTRUMENTATION KEY GOES HERE>')\\n\\n        # log something (this will be sent to the Application Insights service as a trace)\\n        logging.info('This is a message')\\n\\n        # logging shutdown will cause a flush of all un-sent telemetry items\\n        # alternatively set up an async channel via enable('<YOUR INSTRUMENTATION KEY GOES HERE>', telemetry_channel=...)\\n\\n    Args:\\n        instrumentation_key (str). the instrumentation key to use while sending telemetry to the service.\\n\\n    Returns:\\n        :class:`ApplicationInsightsHandler`. the newly created or existing handler.\\n    \"", "#NEWLINE#", "if", "(", "not", "instrumentation_key", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "'Instrumentation key was required but not provided'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "instrumentation_key", "in", "enabled_instrumentation_keys", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "getLogger", "(", ")", ".", "removeHandler", "(", "enabled_instrumentation_keys", "[", "instrumentation_key", "]", ")", "#NEWLINE#", "#UNINDENT#", "handler", "=", "LoggingHandler", "(", "instrumentation_key", ",", "*", "args", ",", "**", "kwargs", ")", "#NEWLINE#", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "#NEWLINE#", "enabled_instrumentation_keys", "[", "instrumentation_key", "]", "=", "handler", "#NEWLINE#", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "handler", ")", "#NEWLINE#", "return", "handler"], "error_location": [0], "repair_targets": [], "repair_candidates": [63, 2, 17, 31, 48, 57, 77, 53, 66, 80, 90, 94, 5, 60], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Microsoft/ApplicationInsights-Python/applicationinsights/logging/LoggingHandler.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 289, "results": {"model": "transformer", "prob": {"loc": [[0.7266179919242859, 2.110123432430555e-06, 2.588289476079808e-07, 3.3731062387687416e-08, 3.484264610165155e-08, 5.921479555581755e-07, 2.9562224668211456e-08, 2.7040237000619527e-06, 2.8580860345073233e-08, 7.03110885069691e-08, 1.5699339428465464e-07, 1.26135944356065e-07, 2.468369189045916e-07, 1.7903066407143342e-07, 6.99144493410131e-08, 6.910453720365695e-08, 7.591497706016526e-07, 0.019143162295222282, 2.1725854537635314e-07, 4.4779253016713483e-07, 1.3164842584956205e-06, 1.2951727512700018e-07, 1.6572817784776817e-08, 3.3762020734684484e-08, 8.472822514704603e-07, 4.7203780013660435e-06, 3.324523163428239e-07, 2.891948440719716e-07, 1.0653220527956364e-07, 1.2518083281065628e-07, 4.0426815672844896e-08, 0.0055565787479281425, 3.370098227151175e-07, 0.0003645160177256912, 4.190066960063632e-08, 1.7412787656212458e-07, 1.5950917031659628e-07, 9.921743071572564e-08, 1.3234491724745112e-08, 6.468521007718664e-08, 1.3808575616280905e-08, 1.9125023698052246e-07, 3.338671490382694e-07, 1.39212119165677e-07, 2.364109619179544e-08, 1.994863367826838e-07, 0.001044762902893126, 1.863097622845089e-06, 0.00316506321541965, 1.0246515103062848e-06, 8.639644306640548e-07, 1.1325622608637786e-06, 2.3457043596408766e-07, 7.975633593559905e-07, 3.7422221765837094e-08, 4.4379170560659986e-08, 3.1278938195100636e-07, 0.004112353082746267, 7.15283405838818e-08, 2.351621901652834e-07, 0.0010333292884752154, 3.662528627046413e-07, 3.8851268868711486e-07, 0.0001800821628421545, 2.8684067387985124e-07, 3.5391090591474494e-07, 1.8846698424113129e-07, 8.321825362145319e-08, 8.669898932112119e-08, 2.057451098380625e-07, 2.052895297310897e-06, 5.436923515844683e-07, 1.0635989156071446e-06, 6.6726869363265e-07, 1.8295486370334402e-06, 0.00015621850616298616, 6.278756359279214e-08, 0.01862894557416439, 2.2335464677780692e-07, 4.6045641965974937e-07, 0.005223301239311695, 1.7755792214302346e-06, 1.056155056744501e-07, 1.6439967964743119e-07, 2.106966334736171e-08, 4.4342431237964774e-07, 2.3813049665477592e-06, 3.5262928577139974e-07, 2.355378114771156e-08, 7.854080195102142e-07, 0.03430816903710365, 1.0834703516593436e-06, 1.960751433216501e-06, 1.582964728186198e-06, 0.18042142689228058]], "pointer": [[0.0, 0.0, 0.2799724042415619, 0.0, 0.0, 0.11179352551698685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012438392266631126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053813569247722626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05296818166971207, 0.0, 0.0, 0.0, 0.0, 0.16617603600025177, 0.0, 0.0, 0.0, 0.00155935890506953, 0.0, 0.0, 0.0379774309694767, 0.0, 0.0, 0.05168529599905014, 0.0, 0.0, 0.0920601487159729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09906208515167236, 0.0, 0.0, 0.002822148147970438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03174905478954315, 0.0, 0.0, 0.0, 0.005922406446188688]], "target": [0.0]}, "loss": [0.319354385137558, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def enable(', 'instrumentation_key', ',', '*', 'args', ',', '**kwargs', ')', ':', '#NEWLINE#', '#INDENT#', '"Enables the Application Insights logging handler for the root logger for the supplied instrumentation key.\\n    Multiple calls to this function with different instrumentation keys result in multiple handler instances.\\n\\n    .. code:: python\\n\\n        import logging\\n        from applicationinsights.logging import enable\\n\\n        # set up logging\\n        enable(\'<YOUR INSTRUMENTATION KEY GOES HERE>\')\\n\\n        # log something (this will be sent to the Application Insights service as a trace)\\n        logging.info(\'This is a message\')\\n\\n        # logging shutdown will cause a flush of all un-sent telemetry items\\n        # alternatively set up an async channel via enable(\'<YOUR INSTRUMENTATION KEY GOES HERE>\', telemetry_channel=...)\\n\\n    Args:\\n        instrumentation_key (str). the instrumentation key to use while sending telemetry to the service.\\n\\n    Returns:\\n        :class:`ApplicationInsightsHandler`. the newly created or existing handler.\\n    "', '#NEWLINE#', 'if', '(', 'not', 'instrumentation_key', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'Exception', '(', "'Instrumentation key was required but not provided'", ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'instrumentation_key', 'in', 'enabled_instrumentation_keys', ')', ':', '#NEWLINE#', '#INDENT#', 'logging', '.', 'getLogger', '(', ')', '.', 'removeHandler', '(', 'enabled_instrumentation_keys', '[', 'instrumentation_key', ']', ')', '#NEWLINE#', '#UNINDENT#', 'handler', '=', 'LoggingHandler', '(', 'instrumentation_key', ',', '*', 'args', ',', '**', 'kwargs', ')', '#NEWLINE#', 'handler', '.', 'setLevel', '(', 'logging', '.', 'INFO', ')', '#NEWLINE#', 'enabled_instrumentation_keys', '[', 'instrumentation_key', ']', '=', 'handler', '#NEWLINE#', 'logging', '.', 'getLogger', '(', ')', '.', 'addHandler', '(', 'handler', ')', '#NEWLINE#', 'return', 'handler']


All attention probs:

[0.01419917680323124, 0.010643534362316132, 0.027628617361187935, 0.016279323026537895, 0.014631696045398712, 0.028225025162100792, 0.011295787058770657, 0.026378292590379715, 0.014881686307489872, 0.011811882257461548, 0.014132504351437092, 0.012611700221896172, 0.013879033736884594, 0.010761022567749023, 0.01045150961726904, 0.012153648771345615, 0.008262909017503262, 0.024174420163035393, 0.006768789142370224, 0.006831658072769642, 0.007933473214507103, 0.007388634607195854, 0.008793551474809647, 0.006347107235342264, 0.007191706448793411, 0.009565663523972034, 0.004889797884970903, 0.006889776326715946, 0.0063392543233931065, 0.006746478844434023, 0.005182610359042883, 0.02550809271633625, 0.006030860356986523, 0.021864505484700203, 0.005338696297258139, 0.006183071061968803, 0.008089045062661171, 0.008315999060869217, 0.010161878541111946, 0.004252682905644178, 0.005437014624476433, 0.008503219112753868, 0.007586296647787094, 0.004538533743470907, 0.006684252060949802, 0.0057375673204660416, 0.015049921348690987, 0.005574606359004974, 0.014655363745987415, 0.0051285685040056705, 0.004419003613293171, 0.006001851987093687, 0.006232232786715031, 0.019504938274621964, 0.0058869896456599236, 0.009194056503474712, 0.0056077223271131516, 0.015372955240309238, 0.004494903609156609, 0.00484247924759984, 0.01940060965716839, 0.0043494305573403835, 0.0057641807943582535, 0.022749437019228935, 0.006396500859409571, 0.009665179997682571, 0.019524693489074707, 0.005932142958045006, 0.005388874094933271, 0.006369829643517733, 0.009707601740956306, 0.004017113707959652, 0.0063528576865792274, 0.003915551584213972, 0.008116989396512508, 0.0214949082583189, 0.012754454277455807, 0.01956397108733654, 0.0044613485224545, 0.004951772280037403, 0.02031954936683178, 0.007479286286979914, 0.009110750630497932, 0.0038935444317758083, 0.005103680770844221, 0.00835107546299696, 0.006114421412348747, 0.0053333803080022335, 0.007023520302027464, 0.007190711796283722, 0.02684747241437435, 0.005083732306957245, 0.00725939404219389, 0.011970671825110912, 0.03857378661632538]


Top-k source tokens:

['handler', 'args', 'instrumentation_key', 'handler', '**kwargs', 'instrumentation_key', 'instrumentation_key', 'kwargs', 'enabled_instrumentation_keys', 'enabled_instrumentation_keys']


Top-k attention probs:

[0.03857378661632538, 0.028225025162100792, 0.027628617361187935, 0.02684747241437435, 0.026378292590379715, 0.02550809271633625, 0.024174420163035393, 0.022749437019228935, 0.021864505484700203, 0.0214949082583189]
