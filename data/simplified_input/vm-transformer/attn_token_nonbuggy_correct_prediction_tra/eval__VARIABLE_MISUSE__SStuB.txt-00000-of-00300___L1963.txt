
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 21, 2, 6, 32, 15, 28, 40, 55], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "google/yapf/yapftests/pytree_unwrapper_test.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1963, "results": {"model": "transformer", "prob": {"loc": [[0.9342119693756104, 3.29677482113766e-06, 1.0447350859976723e-06, 6.638419591808997e-08, 1.7590816696611e-06, 4.270540543416246e-08, 1.181428615382174e-06, 1.4323474317734508e-07, 7.270200086395562e-08, 1.2640246183082127e-08, 3.882264820731507e-08, 8.653574923300766e-08, 6.306719768645053e-08, 1.6203649977342138e-07, 7.611711083654882e-08, 1.5132507087400882e-06, 5.5876974158763915e-09, 8.387731753600747e-08, 4.931880681624534e-08, 8.705966614286353e-09, 8.916033067407625e-08, 0.0004955076728947461, 6.031646648807509e-08, 4.29515303324024e-08, 1.7206527758162338e-08, 3.756488098360933e-08, 1.1961451384934207e-08, 6.773018412786769e-08, 0.0043652234598994255, 5.4789659031939664e-08, 6.114642303600704e-08, 1.0487394774827408e-07, 0.00044881508802063763, 1.44733633078431e-07, 1.3792180197924608e-07, 6.551838538371157e-08, 8.026840419006476e-07, 7.857827455381994e-08, 1.136742078244879e-08, 1.1883390982347919e-07, 0.022556114941835403, 1.669178573138197e-07, 2.2996100312866474e-07, 3.8947570146774524e-07, 3.024363650183659e-05, 1.6923183920880547e-06, 1.9536580566636985e-06, 3.0757394142710837e-07, 4.2246148268532124e-07, 2.672712469120597e-07, 1.2841603336255503e-08, 1.034802750154995e-07, 2.1799526450649864e-07, 1.2719354458567977e-08, 1.2760840206738067e-07, 0.0378745011985302, 1.1214074646659355e-07]], "pointer": [[0.0, 0.0, 0.020844237878918648, 0.0, 0.6618089079856873, 0.0, 0.09013686329126358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006450843997299671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11071135103702545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019302709260955453, 0.0, 0.0, 0.0, 0.1069323867559433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008303115610033274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003548048553057015, 0.0]], "target": [0.0]}, "loss": [0.06805212050676346, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def _ParseAndUnwrap(', 'self', ',', 'code', ',', 'dumptree', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", '#NEWLINE#', 'tree', '=', 'pytree_utils', '.', 'ParseCodeToTree', '(', 'code', ')', '#NEWLINE#', 'comment_splicer', '.', 'SpliceComments', '(', 'tree', ')', '#NEWLINE#', 'if', 'dumptree', ':', '#NEWLINE#', '#INDENT#', 'pytree_visitor', '.', 'DumpPyTree', '(', 'tree', ',', 'target_stream', '=', 'sys', '.', 'stderr', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'pytree_unwrapper', '.', 'UnwrapPyTree', '(', 'tree', ')']


All attention probs:

[0.02317202463746071, 0.015197220258414745, 0.06441759318113327, 0.01992056332528591, 0.03431573510169983, 0.017083004117012024, 0.036106470972299576, 0.013324880972504616, 0.01665305718779564, 0.014954236336052418, 0.016168195754289627, 0.01708141341805458, 0.01371309906244278, 0.016724396497011185, 0.014504636637866497, 0.039378706365823746, 0.012891149148344994, 0.011887388303875923, 0.00725068524479866, 0.00791835691779852, 0.009916321374475956, 0.04109092801809311, 0.007684044539928436, 0.01307525672018528, 0.018955375999212265, 0.006918887607753277, 0.00815248116850853, 0.009344986639916897, 0.03813890740275383, 0.00840659812092781, 0.011281422339379787, 0.011827075853943825, 0.04816568270325661, 0.014790646731853485, 0.012768801301717758, 0.014451147988438606, 0.020619576796889305, 0.008451989851891994, 0.010020586661994457, 0.010626466013491154, 0.03605440631508827, 0.010742390528321266, 0.01892387680709362, 0.009329077787697315, 0.01740225777029991, 0.008768806234002113, 0.010223220102488995, 0.006433652248233557, 0.012928455136716366, 0.013504734262824059, 0.012975038960576057, 0.014637310989201069, 0.0073402198031544685, 0.007993940263986588, 0.011820422485470772, 0.05250755697488785, 0.011064638383686543]


Top-k source tokens:

['self', 'tree', 'dumptree', 'code', 'tree', 'tree', 'dumptree', 'tree', 'code', '#NEWLINE#']


Top-k attention probs:

[0.06441759318113327, 0.05250755697488785, 0.04816568270325661, 0.04109092801809311, 0.039378706365823746, 0.03813890740275383, 0.036106470972299576, 0.03605440631508827, 0.03431573510169983, 0.02317202463746071]
