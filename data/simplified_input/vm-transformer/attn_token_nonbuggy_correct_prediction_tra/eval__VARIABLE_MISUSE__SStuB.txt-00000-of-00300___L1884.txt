
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def get_conv_shape_1axis(", "image_shape", ",", "kernel_shape", ",", "border_mode", ",", "subsample", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    This function compute the output shape of convolution operation.\\n\\n    Parameters\\n    ----------\\n    image_shape: int or None. Corresponds to the input image shape on a\\n        given axis. None if undefined.\\n    kernel_shape: int or None. Corresponds to the kernel shape on a given\\n        axis. None if undefined.\\n    border_mode: string or int. If it is a string, it must be\\n        'valid', 'half' or 'full'. If it is an integer, it must correspond to\\n        the padding on the considered axis.\\n    subsample: int. It must correspond to the subsampling on the\\n        considered axis.\\n\\n    Returns\\n    -------\\n    out_shp: int corresponding to the output image shape on the\\n        considered axis. None if undefined.\\n\\n    \"", "#NEWLINE#", "if", "(", "None", "in", "[", "image_shape", ",", "kernel_shape", ",", "border_mode", ",", "subsample", "]", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "if", "(", "border_mode", "==", "'half'", ")", ":", "#NEWLINE#", "#INDENT#", "pad", "=", "(", "kernel_shape", "//", "2", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "border_mode", "==", "'full'", ")", ":", "#NEWLINE#", "#INDENT#", "pad", "=", "(", "kernel_shape", "-", "1", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "border_mode", "==", "'valid'", ")", ":", "#NEWLINE#", "#INDENT#", "pad", "=", "0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "pad", "=", "border_mode", "#NEWLINE#", "if", "(", "pad", "<", "0", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'border_mode must be >= 0'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "out_shp", "=", "(", "(", "(", "(", "image_shape", "+", "(", "2", "*", "pad", ")", ")", "-", "kernel_shape", ")", "//", "subsample", ")", "+", "1", ")", "#NEWLINE#", "return", "out_shp"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 20, 127, 4, 22, 48, 70, 136, 45, 67, 89, 98, 104, 132, 8, 26, 139, 121, 146, 6, 24, 38, 60, 82, 100], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "rizar/attention-lvcsr/libs/Theano/theano/tensor/nnet/abstract_conv.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1884, "results": {"model": "transformer", "prob": {"loc": [[0.6086446642875671, 3.2494538118044147e-06, 1.2540994021037477e-06, 1.1794162446676637e-07, 3.1839185794524383e-06, 1.4190891306498088e-07, 1.4692414879391436e-05, 1.6648306200295337e-07, 9.153892278845888e-06, 2.0178751469757117e-07, 2.7313464556755207e-07, 3.8099193488960736e-07, 3.627799856076308e-07, 1.9171907297277357e-06, 6.476837484115094e-07, 3.742555065855413e-07, 1.6728016589695471e-06, 8.8851948021329e-06, 5.098196425024071e-07, 1.1344066479068715e-05, 0.004532084800302982, 1.188187752632075e-06, 0.004748915787786245, 4.1325529309688136e-07, 0.0224517360329628, 2.1860422805275448e-07, 0.001263901824131608, 2.542216748224746e-07, 5.702079874936317e-07, 7.753526460874127e-07, 3.768622036659508e-07, 2.613905962789431e-07, 5.521977186617733e-07, 1.4339661902340595e-06, 4.919589287055715e-07, 5.026504368288442e-07, 4.099141790447902e-07, 1.1079025625804206e-06, 0.016575898975133896, 1.2914721082779579e-05, 2.0505203792708926e-05, 7.541927971033147e-07, 2.0925381249981e-06, 9.203836270899046e-07, 2.981378770527954e-07, 7.171985544118797e-06, 1.8255974509884254e-07, 8.265559472420136e-07, 0.02337491698563099, 4.054924374941038e-06, 0.00020142961875535548, 2.89347212856228e-06, 7.810195938873221e-07, 2.5065631348297757e-07, 9.866104164757417e-07, 6.205661406966101e-07, 3.771987451273162e-07, 3.378229109785025e-07, 3.596781255055248e-07, 8.822033237265714e-07, 0.013151105493307114, 6.8494528022711165e-06, 0.00047263255692087114, 1.170023324448266e-06, 1.7689161495582084e-06, 7.576169878120709e-07, 4.384199030482705e-07, 1.9830191376968287e-05, 8.582306350035651e-07, 1.7278140376220108e-06, 0.03605485334992409, 4.501183411775855e-06, 0.00048523920122534037, 2.1271960122248856e-06, 8.567423037675326e-07, 5.31764044353622e-07, 4.5375072659226134e-06, 8.037441716624016e-07, 1.0299700079485774e-06, 8.66327241055842e-07, 8.891836387192598e-07, 1.5727620166217093e-06, 0.008618243038654327, 8.8425649664714e-06, 3.417440893827006e-05, 1.893613557513163e-06, 1.7717220544000156e-06, 7.54055463403347e-07, 2.7864714979841665e-07, 5.183883786230581e-06, 1.5093461342985393e-06, 3.746047877939418e-05, 4.0505895526621316e-07, 4.229181911341584e-07, 1.013397650240222e-06, 1.3529290754377143e-06, 5.623011247735121e-07, 3.904071945726173e-07, 5.2261812015785836e-06, 6.061895874154288e-07, 0.017435144633054733, 7.124534704416874e-07, 7.177804945968091e-07, 1.8397325902697048e-06, 0.13701030611991882, 3.0783905913267517e-06, 3.635096800280735e-05, 4.840903216063452e-07, 1.3286147577673546e-06, 8.24988035219576e-07, 2.882574960949569e-07, 1.627893198019592e-06, 7.035409339550824e-07, 2.0227239474479575e-06, 5.1950570195913315e-05, 1.3981592701384216e-06, 6.830708230154414e-07, 2.4999192760333244e-07, 1.602389971822049e-07, 1.6046149653448083e-07, 1.86395283208185e-07, 1.5046350654301932e-06, 1.0798323302196877e-07, 2.1501401192836056e-07, 3.3432971235924924e-07, 1.3413075521384599e-06, 2.934604253823636e-06, 0.0018140400061383843, 8.756426836953324e-07, 2.8951062631676905e-06, 0.00015869774506427348, 1.6943416767389863e-06, 0.016051141545176506, 1.2115048093619407e-06, 2.948741553154832e-07, 8.045801109801687e-07, 0.07736199349164963, 1.6656681509630289e-06, 7.472532388419495e-07, 0.005581842735409737, 1.6078324733825866e-06, 8.183079671653104e-07, 0.0034893322736024857, 1.1665864803944714e-05, 3.1697427402832545e-06, 3.1347897220257437e-06, 0.00010284006566507742]], "pointer": [[0.0, 0.0, 0.08849241584539413, 0.0, 0.0938245952129364, 0.0, 0.07627144455909729, 0.0, 0.11601386219263077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06775470823049545, 0.0, 0.001156377955339849, 0.0, 0.0070269242860376835, 0.0, 0.09801489859819412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030907636508345604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012361894361674786, 0.0, 0.0, 0.09658464044332504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06252551823854446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013089540414512157, 0.0, 0.0, 0.08182429522275925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05188263580203056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005142294801771641, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011922476813197136, 0.0, 0.002791815437376499, 0.0, 0.0, 0.0, 0.0004513174353633076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005680205766111612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04392018914222717, 0.0, 0.0, 0.0, 0.0, 0.00021841964917257428, 0.0, 0.0, 0.0, 8.445944695267826e-05, 0.0, 0.0, 0.0320068784058094, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0515547627583146e-05]], "target": [0.0]}, "loss": [0.49652063846588135, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def get_conv_shape_1axis(', 'image_shape', ',', 'kernel_shape', ',', 'border_mode', ',', 'subsample', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    This function compute the output shape of convolution operation.\\n\\n    Parameters\\n    ----------\\n    image_shape: int or None. Corresponds to the input image shape on a\\n        given axis. None if undefined.\\n    kernel_shape: int or None. Corresponds to the kernel shape on a given\\n        axis. None if undefined.\\n    border_mode: string or int. If it is a string, it must be\\n        \'valid\', \'half\' or \'full\'. If it is an integer, it must correspond to\\n        the padding on the considered axis.\\n    subsample: int. It must correspond to the subsampling on the\\n        considered axis.\\n\\n    Returns\\n    -------\\n    out_shp: int corresponding to the output image shape on the\\n        considered axis. None if undefined.\\n\\n    "', '#NEWLINE#', 'if', '(', 'None', 'in', '[', 'image_shape', ',', 'kernel_shape', ',', 'border_mode', ',', 'subsample', ']', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'None', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'border_mode', '==', "'half'", ')', ':', '#NEWLINE#', '#INDENT#', 'pad', '=', '(', 'kernel_shape', '//', '2', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'border_mode', '==', "'full'", ')', ':', '#NEWLINE#', '#INDENT#', 'pad', '=', '(', 'kernel_shape', '-', '1', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'border_mode', '==', "'valid'", ')', ':', '#NEWLINE#', '#INDENT#', 'pad', '=', '0', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'pad', '=', 'border_mode', '#NEWLINE#', 'if', '(', 'pad', '<', '0', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', "'border_mode must be >= 0'", ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', '#UNINDENT#', '#UNINDENT#', 'out_shp', '=', '(', '(', '(', '(', 'image_shape', '+', '(', '2', '*', 'pad', ')', ')', '-', 'kernel_shape', ')', '//', 'subsample', ')', '+', '1', ')', '#NEWLINE#', 'return', 'out_shp']


All attention probs:

[0.00852210447192192, 0.009362943470478058, 0.0177692212164402, 0.012358549050986767, 0.024954793974757195, 0.008889327757060528, 0.02547728829085827, 0.008571600541472435, 0.02046819217503071, 0.009352768771350384, 0.008770373649895191, 0.009800441563129425, 0.008200529031455517, 0.008368651382625103, 0.007086219731718302, 0.007986198179423809, 0.006880022119730711, 0.005948860198259354, 0.00615696981549263, 0.006343071814626455, 0.01879958063364029, 0.0053515867330133915, 0.012738180346786976, 0.004977893084287643, 0.017864316701889038, 0.0042508975602686405, 0.016841724514961243, 0.003700917586684227, 0.00424340832978487, 0.004402100574225187, 0.004749244078993797, 0.005018646363168955, 0.005231759045273066, 0.004718402400612831, 0.004909667652100325, 0.004704988095909357, 0.005221478641033173, 0.0036389296874403954, 0.013531719334423542, 0.0037966547533869743, 0.00478843878954649, 0.0028119797352701426, 0.004724359605461359, 0.0046678693033754826, 0.003835691837593913, 0.009984933771193027, 0.0046055009588599205, 0.002770280698314309, 0.013919970951974392, 0.0033381704706698656, 0.006831041071563959, 0.002469595754519105, 0.003484677290543914, 0.0036517244298011065, 0.008017844520509243, 0.003255140269175172, 0.0031253232154995203, 0.0030325399711728096, 0.0038593346253037453, 0.002516821026802063, 0.011139774695038795, 0.003020990639925003, 0.006080962717533112, 0.00259033078327775, 0.0028628234285861254, 0.0038200244307518005, 0.00420565577223897, 0.009500433690845966, 0.004750635474920273, 0.003189519979059696, 0.015822863206267357, 0.003540933830663562, 0.007127662189304829, 0.0025692624039947987, 0.004248710349202156, 0.003837458323687315, 0.011436873115599155, 0.0029574683867394924, 0.0033135192934423685, 0.003478610422462225, 0.004560424014925957, 0.0027067356277257204, 0.01191024575382471, 0.002736202208325267, 0.0033512271475046873, 0.002579501597210765, 0.0032048416323959827, 0.00417389115318656, 0.0038000543136149645, 0.008851183578372002, 0.002805928699672222, 0.004698480479419231, 0.0031745629385113716, 0.0035182791762053967, 0.010120028629899025, 0.004081605467945337, 0.004454585257917643, 0.004900929052382708, 0.011881815269589424, 0.004508640617132187, 0.026092438027262688, 0.004555734805762768, 0.0060048955492675304, 0.005127140320837498, 0.027005016803741455, 0.003327517304569483, 0.004209895618259907, 0.002355536911636591, 0.002569396048784256, 0.0035776689182966948, 0.004128749016672373, 0.005070813000202179, 0.005302922334522009, 0.003783870954066515, 0.007218245882540941, 0.002417741809040308, 0.004043587017804384, 0.0033749749418348074, 0.0034131656866520643, 0.0035314138513058424, 0.004126154351979494, 0.022650258615612984, 0.005753675010055304, 0.003426103387027979, 0.004625547677278519, 0.006671892013400793, 0.00736435130238533, 0.013062682934105396, 0.006657145917415619, 0.004300242755562067, 0.007353989873081446, 0.0043952674604952335, 0.018677040934562683, 0.0029398342594504356, 0.002798615489155054, 0.003112519858404994, 0.010691004805266857, 0.0024807497393339872, 0.0031725100707262754, 0.018973376601934433, 0.002791906474158168, 0.0034608521964401007, 0.006188062485307455, 0.0033342749811708927, 0.004668534733355045, 0.006666538305580616, 0.015381012111902237]


Top-k source tokens:

['pad', 'border_mode', 'border_mode', 'kernel_shape', 'out_shp', 'subsample', 'subsample', 'image_shape', 'pad', 'border_mode']


Top-k attention probs:

[0.027005016803741455, 0.026092438027262688, 0.02547728829085827, 0.024954793974757195, 0.022650258615612984, 0.02046819217503071, 0.018973376601934433, 0.01879958063364029, 0.018677040934562683, 0.017864316701889038]
