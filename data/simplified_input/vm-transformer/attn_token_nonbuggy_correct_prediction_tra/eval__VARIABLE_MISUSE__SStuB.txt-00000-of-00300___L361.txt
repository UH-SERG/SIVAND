
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def RunThreaded(", "target", ",", "thread_params", ",", "max_concurrent_threads", "=", "200", ")", ":", "#NEWLINE#", "#INDENT#", "\"Runs the target method in parallel threads.\\n\\n  The method starts up threads with one arg from thread_params as the first arg.\\n\\n  Args:\\n    target: The method to invoke in the thread.\\n    thread_params: A thread is launched for each value in the list. The items\\n        in the list can either be a singleton or a (args, kwargs) tuple/list.\\n        Usually this is a list of VMs.\\n    max_concurrent_threads: The maximum number of concurrent threads to allow.\\n\\n  Returns:\\n    List of the same length as thread_params. Contains the return value from\\n    each threaded function call in the corresponding order as thread_params.\\n\\n  Raises:\\n    ValueError: when thread_params is not valid.\\n    errors.VmUtil.ThreadException: When an exception occurred in any of the\\n        called functions.\\n\\n  Example 1: # no args other than list.\\n    args = [self.CreateVm()\\n            for x in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n\\n  Example 2: # using args only to pass to the thread:\\n    args = [((self.CreateVm(), i, 'somestring'), {})\\n            for i in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n\\n  Example 3: # using args & kwargs to pass to the thread:\\n    args = [((self.CreateVm(),), {'num': i, 'name': 'somestring'})\\n            for i in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n  \"", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "thread_params", ",", "list", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Param \"thread_params\" must be a list'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "thread_params", ")", ":", "#NEWLINE#", "#INDENT#", "return", "[", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "isinstance", "(", "thread_params", "[", "0", "]", ",", "tuple", ")", ")", ":", "#NEWLINE#", "#INDENT#", "target_arg_tuples", "=", "[", "(", "target", ",", "(", "arg", ",", ")", ",", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", ")", "for", "arg", "in", "thread_params", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "not", "isinstance", "(", "thread_params", "[", "0", "]", "[", "0", "]", ",", "tuple", ")", ")", "or", "(", "not", "isinstance", "(", "thread_params", "[", "0", "]", "[", "1", "]", ",", "dict", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'If Param is a tuple, the tuple must be (tuple, dict)'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "target_arg_tuples", "=", "[", "(", "target", ",", "args", ",", "kwargs", ")", "for", "(", "args", ",", "kwargs", ")", "in", "thread_params", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "RunParallelThreads", "(", "target_arg_tuples", ",", "max_concurrency", "=", "max_concurrent_threads", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [64, 141, 166, 2, 68, 145, 147, 153, 4, 20, 38, 53, 85, 99, 115, 158, 6, 170, 149, 155, 71, 83], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "GoogleCloudPlatform/PerfKitBenchmarker/perfkitbenchmarker/background_tasks.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 361, "results": {"model": "transformer", "prob": {"loc": [[0.8919702172279358, 1.4795336028328165e-05, 6.193376975716092e-06, 1.7086034631574876e-07, 2.2448580239142757e-06, 1.6022367788082192e-07, 2.5194660338456742e-05, 9.810846677282825e-07, 1.1760802408389281e-05, 1.2530225035334297e-07, 3.917606079539837e-07, 4.882560915575596e-07, 3.882936141508253e-07, 5.905305442865938e-06, 9.145491048911936e-07, 1.0901570703936159e-06, 1.9561132376111345e-06, 2.4166638468159363e-06, 9.768639301910298e-07, 1.91281446859648e-06, 0.022542636841535568, 1.4481582866210374e-06, 1.5154174434428569e-05, 1.9553995400656277e-07, 1.262291391412873e-07, 3.1177276582639024e-07, 2.363192095344857e-07, 1.746439863836713e-07, 7.910982162684377e-07, 2.59997051443861e-07, 6.052138132872642e-07, 1.1507321687531658e-05, 7.645630262231862e-07, 5.551895583266742e-07, 3.796545513523597e-07, 3.997538158273528e-07, 2.5403176096006064e-06, 6.139416200312553e-06, 0.02447771281003952, 9.984731832446414e-07, 1.6499259345437167e-06, 1.0096371170220664e-06, 2.3266119342224556e-07, 3.4725280784186907e-07, 9.080042946152389e-05, 1.6346508573406027e-06, 1.2324361478022183e-06, 8.570061140744656e-07, 5.769325639448653e-07, 9.222321182278392e-07, 6.731450866936939e-06, 5.92105266150611e-07, 3.52178244611423e-06, 0.004108985420316458, 6.976143595238682e-06, 2.1522150746022817e-06, 1.2768415444952552e-06, 7.643129720236175e-07, 5.212686573941028e-06, 2.32650094744713e-07, 1.850408466452791e-07, 6.687016593787121e-07, 3.682304452468088e-07, 2.4387944108639203e-07, 3.063496478716843e-05, 2.576474571469589e-07, 1.8233212983886915e-07, 3.456408421698143e-07, 0.012330788187682629, 3.1870271754996793e-07, 3.1053033922034956e-07, 0.006228725425899029, 3.8671672086820763e-07, 5.785579446637712e-07, 3.392633800558542e-07, 3.6694227674161084e-06, 8.845004799695744e-07, 6.999356969572545e-07, 1.0949572697427357e-06, 1.095071070267295e-06, 1.777423335624917e-06, 3.502530034893425e-06, 2.0043505628564162e-06, 5.9965990658383816e-05, 4.036952248043235e-07, 0.012037131935358047, 1.6720770190659096e-06, 1.392163653690659e-06, 5.866408514521027e-07, 1.4804530792389414e-06, 1.4651629953732481e-06, 9.772878684088937e-07, 9.105988851842994e-07, 2.6918933144770563e-06, 1.6514269418621552e-07, 1.8785342035698704e-05, 6.576821306225611e-06, 1.9186131794413086e-06, 6.204496912687318e-06, 0.0062337410636246204, 2.158328015866573e-06, 4.242776867613429e-06, 1.450885633857979e-06, 4.386274667922407e-06, 5.823952051287051e-06, 1.3536824781112955e-06, 1.2948454468642012e-06, 2.73657660727622e-05, 1.248189164471114e-06, 3.70964897911108e-07, 5.814015366922831e-07, 4.517282832239289e-06, 2.8688771180895856e-06, 1.248317857971415e-06, 6.923187811480602e-06, 0.0035130681935697794, 4.3583208935160656e-06, 5.111327482154593e-06, 9.322970981884282e-07, 2.1938267309451476e-06, 1.4548699255101383e-05, 7.153810201998567e-07, 6.585755158994289e-07, 3.134120925096795e-05, 6.648957082688867e-07, 2.611045033518167e-07, 2.1171240405237768e-07, 8.701383649167838e-07, 2.9738814077973075e-07, 1.6783916123586096e-07, 3.500447860460554e-07, 3.799001149218384e-07, 5.613560816186691e-08, 3.1102794309845194e-05, 7.545617108917213e-07, 5.796918571832066e-07, 2.433366717013996e-07, 4.977659386895539e-07, 2.696444880712079e-07, 3.423282066705724e-07, 1.9167833897881792e-07, 3.869183274218813e-06, 5.380601209026281e-08, 9.468715944649375e-08, 3.423376710998127e-07, 0.0030380464158952236, 4.6417690668931755e-07, 0.0011164656607434154, 4.1221446167583053e-07, 0.0003869763168040663, 1.014741656035767e-06, 1.5954401533235796e-06, 2.4016733846110583e-07, 9.232691809302196e-06, 2.648336305810517e-07, 6.232916348380968e-06, 8.984314803228699e-08, 1.7256984108371398e-07, 0.01002386212348938, 2.220072019554209e-06, 5.283477548800875e-07, 5.19620016348199e-07, 4.225141765346052e-07, 1.1468756611066055e-07, 3.033827411513812e-08, 2.1098195190916158e-07, 8.663130574859679e-05, 4.2664788679758203e-07, 1.5260826558005647e-07, 2.5874464881781023e-07, 0.0013093261513859034, 1.6533833786525065e-06]], "pointer": [[0.0, 0.0, 0.19471588730812073, 0.0, 0.20259886980056763, 0.0, 0.11611868441104889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0487704798579216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0027776407077908516, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025415321812033653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0668954849243164, 0.0, 0.0, 0.0, 0.06423607468605042, 0.0, 0.0, 0.007511976175010204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18312613666057587, 0.0, 0.026441382244229317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0051073008216917515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007112990133464336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008710023947060108, 0.0, 0.0, 0.0, 0.0027708043344318867, 0.0, 0.000309137802105397, 0.0, 0.0020885549020022154, 0.0, 0.0, 0.0, 0.008856261149048805, 0.0, 0.00953226163983345, 0.0, 0.0, 0.003079142654314637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000337547215167433, 0.0, 0.0, 0.0, 0.013488058932125568, 0.0]], "target": [0.0]}, "loss": [0.11432242393493652, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def RunThreaded(', 'target', ',', 'thread_params', ',', 'max_concurrent_threads', '=', '200', ')', ':', '#NEWLINE#', '#INDENT#', '"Runs the target method in parallel threads.\\n\\n  The method starts up threads with one arg from thread_params as the first arg.\\n\\n  Args:\\n    target: The method to invoke in the thread.\\n    thread_params: A thread is launched for each value in the list. The items\\n        in the list can either be a singleton or a (args, kwargs) tuple/list.\\n        Usually this is a list of VMs.\\n    max_concurrent_threads: The maximum number of concurrent threads to allow.\\n\\n  Returns:\\n    List of the same length as thread_params. Contains the return value from\\n    each threaded function call in the corresponding order as thread_params.\\n\\n  Raises:\\n    ValueError: when thread_params is not valid.\\n    errors.VmUtil.ThreadException: When an exception occurred in any of the\\n        called functions.\\n\\n  Example 1: # no args other than list.\\n    args = [self.CreateVm()\\n            for x in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n\\n  Example 2: # using args only to pass to the thread:\\n    args = [((self.CreateVm(), i, \'somestring\'), {})\\n            for i in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n\\n  Example 3: # using args & kwargs to pass to the thread:\\n    args = [((self.CreateVm(),), {\'num\': i, \'name\': \'somestring\'})\\n            for i in range(0, 10)]\\n    RunThreaded(MyThreadedTargetMethod, args)\\n  "', '#NEWLINE#', 'if', '(', 'not', 'isinstance', '(', 'thread_params', ',', 'list', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', '\'Param "thread_params" must be a list\'', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'thread_params', ')', ':', '#NEWLINE#', '#INDENT#', 'return', '[', ']', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'isinstance', '(', 'thread_params', '[', '0', ']', ',', 'tuple', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'target_arg_tuples', '=', '[', '(', 'target', ',', '(', 'arg', ',', ')', ',', '{', '#NEWLINE#', '#INDENT#', '#NEWLINE#', '#UNINDENT#', '}', ')', 'for', 'arg', 'in', 'thread_params', ']', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', '(', 'not', 'isinstance', '(', 'thread_params', '[', '0', ']', '[', '0', ']', ',', 'tuple', ')', ')', 'or', '(', 'not', 'isinstance', '(', 'thread_params', '[', '0', ']', '[', '1', ']', ',', 'dict', ')', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', "'If Param is a tuple, the tuple must be (tuple, dict)'", ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'target_arg_tuples', '=', '[', '(', 'target', ',', 'args', ',', 'kwargs', ')', 'for', '(', 'args', ',', 'kwargs', ')', 'in', 'thread_params', ']', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', 'RunParallelThreads', '(', 'target_arg_tuples', ',', 'max_concurrency', '=', 'max_concurrent_threads', ')']


All attention probs:

[0.01062581967562437, 0.008854145184159279, 0.02421603538095951, 0.012709959410130978, 0.021586325019598007, 0.008496800437569618, 0.017399180680513382, 0.008132473565638065, 0.016141584143042564, 0.006602508015930653, 0.007785251829773188, 0.008643276058137417, 0.007352706976234913, 0.009432351216673851, 0.006369051057845354, 0.007155046798288822, 0.0072728050872683525, 0.006079291924834251, 0.005865256767719984, 0.006172219291329384, 0.01968979276716709, 0.005148604046553373, 0.01035748515278101, 0.004631043877452612, 0.004059942904859781, 0.004289440345019102, 0.004246194381266832, 0.004048153292387724, 0.005435002967715263, 0.00417640944942832, 0.003990347497165203, 0.004828083794564009, 0.003900090930983424, 0.004964753054082394, 0.004352970514446497, 0.00432429276406765, 0.004177938215434551, 0.0038214493542909622, 0.022325877100229263, 0.002881851280108094, 0.0030400508549064398, 0.004132573492825031, 0.004965906031429768, 0.00691181281581521, 0.0036253309808671474, 0.003194565884768963, 0.003811989678069949, 0.003916558343917131, 0.003704013768583536, 0.00436102319508791, 0.00317618390545249, 0.0026115686632692814, 0.0026352955028414726, 0.00930619053542614, 0.0025962444487959146, 0.003663666546344757, 0.002390350913628936, 0.002441658405587077, 0.006763664539903402, 0.002849235665053129, 0.0026063688565045595, 0.0030148131772875786, 0.003087149001657963, 0.003319610608741641, 0.011833129450678825, 0.0032858499325811863, 0.002698243595659733, 0.003083521034568548, 0.015282565727829933, 0.0032837337348610163, 0.002759154187515378, 0.016925882548093796, 0.0029107581358402967, 0.0028370432555675507, 0.002602033084258437, 0.002406518906354904, 0.0036067869514226913, 0.0029972523916512728, 0.003094902727752924, 0.003563163336366415, 0.0036184582859277725, 0.004577330779284239, 0.003613713663071394, 0.013032251037657261, 0.004108003806322813, 0.015513298101723194, 0.0037321108393371105, 0.004668731242418289, 0.004453880712389946, 0.010440394282341003, 0.0033662968780845404, 0.0031070515979081392, 0.003575453534722328, 0.004597438964992762, 0.0021105874329805374, 0.0035865758545696735, 0.0034709961619228125, 0.004069743677973747, 0.0029487598221749067, 0.010404868051409721, 0.0024501231964677572, 0.0032481830567121506, 0.003088550642132759, 0.003818172961473465, 0.004064449109137058, 0.0026782830245792866, 0.0023229934740811586, 0.004822013434022665, 0.0020777550525963306, 0.0026505349669605494, 0.0030190779361873865, 0.003968970850110054, 0.0037098578177392483, 0.002889229916036129, 0.0026310866232961416, 0.008794433437287807, 0.0021989813540130854, 0.0027246710378676653, 0.0022683432325720787, 0.0019963853992521763, 0.004429743159562349, 0.0024025843013077974, 0.002491613617166877, 0.00754672521725297, 0.00318296835757792, 0.003812713548541069, 0.0038672832306474447, 0.004532929975539446, 0.00421771639958024, 0.003762068459764123, 0.003408617340028286, 0.0028376621194183826, 0.0036441837437450886, 0.006289174314588308, 0.0018173744902014732, 0.003809796879068017, 0.00344290304929018, 0.006952004507184029, 0.002973049646243453, 0.0034431975800544024, 0.003382474882528186, 0.013079322874546051, 0.003446026472374797, 0.00207007909193635, 0.003178876591846347, 0.012702745385468006, 0.0025401231832802296, 0.011564210057258606, 0.0026845945976674557, 0.014905881136655807, 0.0029411311261355877, 0.004697466269135475, 0.00603542709723115, 0.01431439258158207, 0.0077933045104146, 0.01640418730676174, 0.006368258036673069, 0.004822328686714172, 0.018107393756508827, 0.004764231387525797, 0.004838974680751562, 0.00426656287163496, 0.003978048916906118, 0.00551680289208889, 0.007254969794303179, 0.003771356772631407, 0.019429905340075493, 0.0032964968122541904, 0.006543297320604324, 0.003420027671381831, 0.017320137470960617, 0.003440442029386759]


Top-k source tokens:

['target', 'thread_params', 'thread_params', 'thread_params', 'target_arg_tuples', 'thread_params', 'max_concurrent_threads', 'max_concurrent_threads', 'arg', 'kwargs']


Top-k attention probs:

[0.02421603538095951, 0.022325877100229263, 0.021586325019598007, 0.01968979276716709, 0.019429905340075493, 0.018107393756508827, 0.017399180680513382, 0.017320137470960617, 0.016925882548093796, 0.01640418730676174]
