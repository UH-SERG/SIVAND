
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"], "error_location": [0], "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 148, 155, 2, 20, 33, 91, 113, 124, 137, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "StackHut/stackhut/stackhut_toolkit/common/barrister/runtime.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2311, "results": {"model": "transformer", "prob": {"loc": [[0.7390168905258179, 2.100736082866206e-06, 5.967602305645414e-07, 3.182355001740689e-08, 2.2413803435483715e-06, 3.3737872939809677e-08, 1.1595858495638822e-06, 1.5885711945884395e-07, 2.1893313828513783e-08, 1.8550442959508473e-08, 4.0199818585051617e-08, 6.916754813346415e-08, 5.859435248112277e-08, 9.823455826563077e-08, 6.979132649576059e-08, 1.616988993191626e-05, 1.2677568861363397e-07, 2.931738265488093e-07, 9.171368731131224e-08, 1.2094643864202226e-07, 3.27174348058179e-06, 4.5118888181150396e-08, 4.260834174374395e-08, 1.427920324204024e-07, 1.8143930802239083e-08, 7.17129182703502e-07, 3.164049758197507e-06, 2.2740221083950019e-07, 5.2038490139239e-07, 1.0717998577547405e-07, 3.7444831946231716e-07, 7.540256774518639e-08, 3.771032552890574e-08, 1.1474646299802771e-07, 2.716494051924201e-08, 5.5358057693410956e-08, 6.097010896155552e-08, 3.2803001204229076e-08, 1.2573778462865448e-07, 1.5400514996599668e-07, 9.71575673247571e-07, 1.0068647782190965e-07, 7.540007729289755e-09, 1.352878342686381e-07, 0.0030152287799865007, 3.3252294429075846e-07, 2.4878445969989116e-07, 2.0717767768019257e-07, 1.936338236419033e-07, 1.3630821626975376e-07, 1.4248881541334413e-07, 1.853244313565483e-08, 1.9345681323557073e-07, 0.003896464593708515, 1.9885243318640278e-07, 2.745327265074593e-06, 7.836021609364252e-08, 2.2618858963596722e-07, 1.1191863080739495e-07, 8.47332515263588e-08, 1.742421176231801e-07, 3.402317716449943e-08, 3.6482191489994875e-08, 2.0822034230150166e-07, 0.008545201271772385, 7.041226268711398e-08, 1.8297599524430552e-07, 5.96459813095862e-07, 1.0121995330791833e-07, 1.8520843525493547e-07, 1.3993059155836818e-07, 1.0504992786763978e-07, 2.6683092073653825e-05, 2.902474989241455e-07, 0.00018497837299946696, 6.732582278345944e-06, 2.8820516035921173e-06, 7.342516141761735e-07, 1.2813699186153826e-06, 6.378887178470904e-07, 1.3968373195893946e-06, 2.764531075172272e-07, 3.1043151693666005e-07, 1.9986084964784823e-07, 3.167638169543352e-07, 2.3301680585063878e-07, 2.087625574631602e-07, 1.220358996079085e-07, 1.4788709449931048e-05, 2.757998061042599e-07, 1.4471743270405568e-06, 1.818324193436638e-07, 2.1074934863918315e-07, 2.5349406129748786e-08, 7.869313094488462e-07, 0.0003756549849640578, 4.499070200836286e-07, 0.06502845883369446, 7.603545668644074e-07, 2.012963477682206e-06, 4.4998487283010036e-06, 1.1856086956640866e-07, 0.05417139455676079, 9.712848623166792e-07, 5.00282737903035e-07, 3.657285390090692e-07, 3.327126592012064e-07, 8.072579475992825e-07, 3.005888515872357e-07, 3.9251165162568213e-07, 1.814913161979348e-07, 1.3213939382694662e-05, 8.741037760273684e-08, 2.8919095029777964e-07, 1.4607398668431415e-07, 2.414404498551903e-08, 4.695903896845266e-07, 0.09344690293073654, 3.2251000448013656e-07, 0.02096034213900566, 8.058856337811449e-07, 3.5761982530857495e-07, 1.8170085525071045e-07, 1.5668463504425745e-07, 2.9977869417052716e-05, 1.430954768011361e-07, 1.574610308807678e-07, 2.5625686816965754e-07, 3.011717808476533e-08, 7.101709229573316e-07, 2.220980059064459e-05, 5.465191748044163e-07, 5.928812356614799e-07, 4.639637438685895e-07, 1.0397018286312232e-06, 2.8603582791220106e-07, 8.967436571083454e-08, 4.4331130766295246e-07, 7.643339472451771e-08, 5.15533393752321e-08, 1.4136566051092814e-07, 4.281983834175662e-08, 1.5664474517507188e-07, 3.982048610851052e-07, 1.4358068938236102e-06, 1.3403123944044637e-07, 1.1459914617262257e-07, 9.103872571358806e-07, 0.003720249282196164, 7.772857202326122e-07, 7.456508228642633e-07, 5.491775141308608e-07, 2.6703000344241445e-07, 3.8154570347614936e-07, 1.0772988190410615e-07, 0.007446525618433952]], "pointer": [[0.0, 0.0, 0.004121857695281506, 0.0, 0.32290568947792053, 0.0, 0.1058480516076088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04466245695948601, 0.0, 0.0, 0.0, 0.0, 0.0002840061788447201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003209258138667792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.057877812534570694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18706195056438446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053248386830091476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12566737830638885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020091816782951355, 0.0, 0.0, 0.001209551701322198, 0.0, 0.0, 0.0, 0.0036394093185663223, 0.0, 0.019048351794481277, 0.0, 0.0, 0.028060859069228172, 0.0, 0.004030322190374136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010779579170048237, 0.0, 0.0017581275897100568, 0.0, 0.0, 0.0, 0.0056032598949968815, 0.0, 0.003299614181742072, 0.0, 0.0, 0.0, 0.0, 5.9145953855477273e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002066979359369725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4827146262396127e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00018995943537447602]], "target": [0.0]}, "loss": [0.3024345934391022, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def call(', 'self', ',', 'req', ',', 'props', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", '#NEWLINE#', 'resp', '=', 'None', '#NEWLINE#', 'if', 'self', '.', 'log', '.', 'isEnabledFor', '(', 'logging', '.', 'DEBUG', ')', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'log', '.', 'debug', '(', '(', "'Request: %s'", '%', 'str', '(', 'req', ')', ')', ')', '#NEWLINE#', '#UNINDENT#', 'if', 'isinstance', '(', 'req', ',', 'list', ')', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'len', '(', 'req', ')', '<', '1', ')', ':', '#NEWLINE#', '#INDENT#', 'resp', '=', 'err_response', '(', 'None', ',', 'ERR_INVALID_REQ', ',', "'Invalid Request. Empty batch.'", ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'resp', '=', '[', 'self', '.', '_call_and_format', '(', 'r', ',', 'props', ')', 'for', 'r', 'in', 'req', ']', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'resp', '=', 'self', '.', '_call_and_format', '(', 'req', ',', 'props', ')', '#NEWLINE#', '#UNINDENT#', 'if', 'self', '.', 'log', '.', 'isEnabledFor', '(', 'logging', '.', 'DEBUG', ')', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'log', '.', 'debug', '(', '(', "'Response: %s'", '%', 'str', '(', 'resp', ')', ')', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'resp']


All attention probs:

[0.011335917748510838, 0.008600256405770779, 0.04190815985202789, 0.013740981929004192, 0.024104012176394463, 0.010095791891217232, 0.022641504183411598, 0.008359470404684544, 0.007390906102955341, 0.008064545691013336, 0.007989399135112762, 0.008928029797971249, 0.007677881047129631, 0.007174795959144831, 0.007434236817061901, 0.017383160069584846, 0.007190276402980089, 0.006051810458302498, 0.006971457041800022, 0.006837708409875631, 0.01279205922037363, 0.004501271061599255, 0.004785337019711733, 0.004730644170194864, 0.004314662888646126, 0.005107525270432234, 0.006843704264611006, 0.003266293555498123, 0.004256617743521929, 0.003450918709859252, 0.004183556418865919, 0.004670917056500912, 0.004821510519832373, 0.010549015365540981, 0.0026095814537256956, 0.003974745515733957, 0.00295163132250309, 0.004182131960988045, 0.0037617513444274664, 0.0036021964624524117, 0.0038661572616547346, 0.003360813483595848, 0.006776551250368357, 0.004223980009555817, 0.017742417752742767, 0.00302639277651906, 0.002988058840855956, 0.002563714049756527, 0.004428137559443712, 0.00445394404232502, 0.0042835138738155365, 0.0034997668117284775, 0.00289511657319963, 0.019337551668286324, 0.00313264480791986, 0.01042584516108036, 0.0027691524010151625, 0.0027458909898996353, 0.003108948701992631, 0.0032698744907975197, 0.004066120833158493, 0.0026774683501571417, 0.0023715405259281397, 0.00307933590374887, 0.014360284432768822, 0.002731648273766041, 0.003362860530614853, 0.006063869688659906, 0.0033440017141401768, 0.0035445510875433683, 0.004204793833196163, 0.004018696956336498, 0.010639083571732044, 0.0034755365923047066, 0.008496930822730064, 0.0031698448583483696, 0.002168133156374097, 0.0023370874114334583, 0.004734795540571213, 0.0026457763742655516, 0.002976873656734824, 0.0025234175845980644, 0.003987303003668785, 0.004443571902811527, 0.009788566268980503, 0.0033646984957158566, 0.004018345847725868, 0.004431585781276226, 0.010929691605269909, 0.00327673670835793, 0.0030393104534596205, 0.006524017080664635, 0.002089329296723008, 0.00322311301715672, 0.0032988484017550945, 0.011459393426775932, 0.0034052510745823383, 0.027836119756102562, 0.0031977572944015265, 0.003857090836390853, 0.01246894896030426, 0.005025159101933241, 0.024354154244065285, 0.004566393792629242, 0.005033473484218121, 0.004133320413529873, 0.00408877432346344, 0.011964268051087856, 0.0031693577766418457, 0.0037844404578208923, 0.004208676517009735, 0.016823632642626762, 0.004692754242569208, 0.007883971557021141, 0.0017882093088701367, 0.002646873239427805, 0.003242235165089369, 0.01962304674088955, 0.0028422290924936533, 0.019327711313962936, 0.002841147594153881, 0.0040950714610517025, 0.0039459699764847755, 0.005543523468077183, 0.009118723683059216, 0.004408289212733507, 0.003331260522827506, 0.0037241275422275066, 0.0035726132337003946, 0.004166428931057453, 0.005653302185237408, 0.0024394397623836994, 0.0038746024947613478, 0.0021970639936625957, 0.0030093591194599867, 0.0040270015597343445, 0.003636791370809078, 0.0068463534116744995, 0.001853110734373331, 0.0029685148037970066, 0.0022673197090625763, 0.00352665688842535, 0.003329714061692357, 0.003322242060676217, 0.0035757473669946194, 0.0029015811160206795, 0.0049758898094296455, 0.0038914268370717764, 0.01806727796792984, 0.0031984648667275906, 0.003439706051722169, 0.0041625015437603, 0.006322762928903103, 0.006772114895284176, 0.01006016880273819, 0.01996786892414093]


Top-k source tokens:

['self', 'props', 'req', 'req', 'props', 'resp', 'req', 'req', 'props', 'resp']


Top-k attention probs:

[0.04190815985202789, 0.027836119756102562, 0.024354154244065285, 0.024104012176394463, 0.022641504183411598, 0.01996786892414093, 0.01962304674088955, 0.019337551668286324, 0.019327711313962936, 0.01806727796792984]
