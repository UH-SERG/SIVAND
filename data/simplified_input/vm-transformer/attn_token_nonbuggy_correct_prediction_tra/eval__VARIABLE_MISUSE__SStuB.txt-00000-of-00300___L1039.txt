
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "peer", ",", "headers", ",", "host", ",", "path", ",", "params", ",", "version", ",", "origin", ",", "protocols", ",", "extensions", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n\\n        :param peer: Descriptor of the connecting client (e.g. IP address/port in case of TCP transports).\\n        :type peer: str\\n        :param headers: HTTP headers from opening handshake request.\\n        :type headers: dict\\n        :param host: Host from opening handshake HTTP header.\\n        :type host: str\\n        :param path: Path from requested HTTP resource URI. For example, a resource URI of `/myservice?foo=23&foo=66&bar=2` will be parsed to `/myservice`.\\n        :type path: str\\n        :param params: Query parameters (if any) from requested HTTP resource URI. For example, a resource URI of `/myservice?foo=23&foo=66&bar=2` will be parsed to `{'foo': ['23', '66'], 'bar': ['2']}`.\\n        :type params: dict of arrays of strings\\n        :param version: The WebSocket protocol version the client announced (and will be spoken, when connection is accepted).\\n        :type version: int\\n        :param origin: The WebSocket origin header or None. Note that this only a reliable source of information for browser clients!\\n        :type origin: str\\n        :param protocols: The WebSocket (sub)protocols the client announced. You must select and return one of those (or None) in :meth:`autobahn.websocket.WebSocketServerProtocol.onConnect`.\\n        :type protocols: list of str\\n        :param extensions: The WebSocket extensions the client requested and the server accepted (and thus will be spoken, when WS connection is established).\\n        :type extensions: list of str\\n        \"", "#NEWLINE#", "self", ".", "peer", "=", "peer", "#NEWLINE#", "self", ".", "headers", "=", "headers", "#NEWLINE#", "self", ".", "host", "=", "host", "#NEWLINE#", "self", ".", "path", "=", "path", "#NEWLINE#", "self", ".", "params", "=", "params", "#NEWLINE#", "self", ".", "version", "=", "version", "#NEWLINE#", "self", ".", "origin", "=", "origin", "#NEWLINE#", "self", ".", "protocols", "=", "protocols", "#NEWLINE#", "self", ".", "extensions", "=", "extensions"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 29, 31, 2, 27, 33, 39, 45, 51, 57, 63, 69, 75, 14, 59, 61, 12, 53, 55, 16, 65, 67, 10, 47, 49, 18, 71, 73, 6, 35, 37, 20, 77, 79, 8, 41, 43], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "crossbario/autobahn-python/autobahn/websocket/types.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1039, "results": {"model": "transformer", "prob": {"loc": [[0.9568480849266052, 6.917551900187391e-07, 2.631009188291955e-08, 2.8719332689775e-08, 3.981153611221089e-07, 2.4485050431621858e-08, 1.7550637494423427e-06, 9.95459714658864e-09, 2.5632207325543277e-06, 5.926275470358178e-09, 1.528179950582853e-06, 6.306008604184399e-09, 4.3846100084010686e-07, 9.273928291975153e-09, 5.07908453073469e-06, 1.3364648943081647e-08, 6.5777403506217524e-06, 1.0606684419656176e-08, 3.974342689616606e-06, 7.887542174955797e-09, 1.4486694453808013e-05, 3.3857572301343453e-09, 7.566536197600726e-08, 1.7912698524469306e-07, 1.1881308381589406e-07, 8.582112513977336e-07, 1.718282902629653e-07, 1.204339383775732e-07, 1.0689715423950474e-07, 2.02089243117598e-08, 1.3054965108949546e-07, 0.0004022645007353276, 5.153607389729586e-07, 1.8139928670279915e-07, 1.1516836195823998e-07, 4.186666160421737e-07, 1.2556297690480278e-07, 0.002650358248502016, 7.361308576037118e-07, 4.60461002660395e-08, 1.7438146926451736e-07, 1.982002402201033e-07, 1.4964715546739171e-06, 0.008095383644104004, 7.524085390286928e-07, 4.7738751618453534e-08, 2.3633670309664012e-07, 8.896295611293681e-08, 5.908062661319491e-08, 0.00010569385631242767, 2.1732455479650525e-06, 2.3381194580451847e-07, 3.6981037965233554e-07, 2.659774445135099e-08, 9.461950867262203e-08, 0.003398620756343007, 1.6939043234742712e-06, 2.282755104943135e-07, 3.614167383148015e-07, 5.5521230279964584e-08, 1.2704039420441404e-07, 0.01733914017677307, 1.0826956895471085e-06, 2.55758862977018e-07, 1.884811950958465e-07, 6.909398564403091e-08, 5.40039877705567e-07, 0.007586913648992777, 2.910763896579738e-07, 2.9490718134184135e-07, 1.4299727979505406e-07, 3.288645800125778e-08, 2.1440779107706476e-07, 0.003486740170046687, 2.7461172180665017e-07, 7.206752457022958e-07, 1.8327344264434942e-07, 1.3014513911002723e-07, 2.081370986672937e-08, 3.226488479413092e-05]], "pointer": [[0.0, 0.0, 0.0034090583212673664, 0.0, 0.025526253506541252, 0.0, 0.26833394169807434, 0.0, 0.10910463333129883, 0.0, 0.0580865778028965, 0.0, 0.08159039169549942, 0.0, 0.08541198819875717, 0.0, 0.1606866866350174, 0.0, 0.09785022586584091, 0.0, 0.03476979210972786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008614797843620181, 0.0, 0.0029927275609225035, 0.0, 1.4796337381994817e-05, 0.0, 0.0013439561007544398, 0.0, 0.007459352258592844, 0.0, 5.309882908477448e-06, 0.0, 0.000505395233631134, 0.0, 0.004781241063028574, 0.0, 1.2640231261684676e-06, 0.0, 0.000396996911149472, 0.0, 0.004061007406562567, 0.0, 3.2141804695129395e-05, 0.0, 0.0009913946269080043, 0.0, 0.01975683495402336, 0.0, 1.8016200556303374e-05, 0.0, 0.0005504328873939812, 0.0, 0.013399599120020866, 0.0, 1.2243588116689352e-06, 0.0, 0.0008250436512753367, 0.0, 0.009352938272058964, 0.0, 6.035465958120767e-06, 0.0, 0.0005477904924191535, 0.0, 0.006597806699573994, 0.0, 3.9848609958426096e-06, 0.0, 9.427345503354445e-05, 0.0, 0.0005105045856907964, 0.0, 0.00011898282537003979]], "target": [0.0]}, "loss": [0.044110722839832306, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def __init__(', 'self', ',', 'peer', ',', 'headers', ',', 'host', ',', 'path', ',', 'params', ',', 'version', ',', 'origin', ',', 'protocols', ',', 'extensions', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n\\n        :param peer: Descriptor of the connecting client (e.g. IP address/port in case of TCP transports).\\n        :type peer: str\\n        :param headers: HTTP headers from opening handshake request.\\n        :type headers: dict\\n        :param host: Host from opening handshake HTTP header.\\n        :type host: str\\n        :param path: Path from requested HTTP resource URI. For example, a resource URI of `/myservice?foo=23&foo=66&bar=2` will be parsed to `/myservice`.\\n        :type path: str\\n        :param params: Query parameters (if any) from requested HTTP resource URI. For example, a resource URI of `/myservice?foo=23&foo=66&bar=2` will be parsed to `{\'foo\': [\'23\', \'66\'], \'bar\': [\'2\']}`.\\n        :type params: dict of arrays of strings\\n        :param version: The WebSocket protocol version the client announced (and will be spoken, when connection is accepted).\\n        :type version: int\\n        :param origin: The WebSocket origin header or None. Note that this only a reliable source of information for browser clients!\\n        :type origin: str\\n        :param protocols: The WebSocket (sub)protocols the client announced. You must select and return one of those (or None) in :meth:`autobahn.websocket.WebSocketServerProtocol.onConnect`.\\n        :type protocols: list of str\\n        :param extensions: The WebSocket extensions the client requested and the server accepted (and thus will be spoken, when WS connection is established).\\n        :type extensions: list of str\\n        "', '#NEWLINE#', 'self', '.', 'peer', '=', 'peer', '#NEWLINE#', 'self', '.', 'headers', '=', 'headers', '#NEWLINE#', 'self', '.', 'host', '=', 'host', '#NEWLINE#', 'self', '.', 'path', '=', 'path', '#NEWLINE#', 'self', '.', 'params', '=', 'params', '#NEWLINE#', 'self', '.', 'version', '=', 'version', '#NEWLINE#', 'self', '.', 'origin', '=', 'origin', '#NEWLINE#', 'self', '.', 'protocols', '=', 'protocols', '#NEWLINE#', 'self', '.', 'extensions', '=', 'extensions']


All attention probs:

[0.014907815493643284, 0.010801855474710464, 0.03147522360086441, 0.015970390290021896, 0.020648878067731857, 0.012430107221007347, 0.025811735540628433, 0.011001106351613998, 0.0286580678075552, 0.013241363689303398, 0.028383247554302216, 0.013891404494643211, 0.02611703984439373, 0.010921170003712177, 0.025350093841552734, 0.009407639503479004, 0.022404124960303307, 0.00876347441226244, 0.02466980554163456, 0.009598159231245518, 0.02589963749051094, 0.00815459806472063, 0.007668782956898212, 0.00819929875433445, 0.007522180676460266, 0.006890715565532446, 0.00745793990790844, 0.014205791987478733, 0.004177398979663849, 0.009806751273572445, 0.006401951890438795, 0.018779804930090904, 0.008342641405761242, 0.014675538055598736, 0.004376003984361887, 0.009711328893899918, 0.006824225187301636, 0.020017355680465698, 0.008821900002658367, 0.01045333780348301, 0.003678147681057453, 0.011387624777853489, 0.008180945180356503, 0.021205050870776176, 0.007979029789566994, 0.009379062801599503, 0.005235790275037289, 0.00802386924624443, 0.005018435884267092, 0.02325456030666828, 0.0073584821075201035, 0.010560133494436741, 0.003527216613292694, 0.009771161712706089, 0.0057257856242358685, 0.018679281696677208, 0.006872071884572506, 0.010838832706212997, 0.0034343982115387917, 0.00965975597500801, 0.005918519571423531, 0.019728537648916245, 0.00793775450438261, 0.012858188711106777, 0.005437219515442848, 0.009960412047803402, 0.010958983562886715, 0.02112291194498539, 0.01026455033570528, 0.01293172873556614, 0.005092450883239508, 0.01191052794456482, 0.008457018993794918, 0.02617296203970909, 0.009322335943579674, 0.01430705189704895, 0.005303515121340752, 0.010444793850183487, 0.007227798458188772, 0.022033216431736946]


Top-k source tokens:

['self', 'host', 'path', 'protocols', 'params', 'extensions', 'headers', 'version', 'protocols', 'path']


Top-k attention probs:

[0.03147522360086441, 0.0286580678075552, 0.028383247554302216, 0.02617296203970909, 0.02611703984439373, 0.02589963749051094, 0.025811735540628433, 0.025350093841552734, 0.02466980554163456, 0.02325456030666828]
