
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "dont_use", "=", "None", ",", "host", "=", "'127.0.0.1'", ",", "ports", "=", "None", ",", "up_bandwidth", "=", "'0'", ",", "down_bandwidth", "=", "'0'", ",", "delay_ms", "=", "'0'", ",", "packet_loss_rate", "=", "'0'", ",", "init_cwnd", "=", "'0'", ",", "use_loopback", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "\"Start shaping traffic.\\n\\n    Args:\\n      host: a host string (name or IP) for the web proxy.\\n      ports: a list of ports to shape traffic on.\\n      up_bandwidth: Upload bandwidth\\n      down_bandwidth: Download bandwidth\\n           Bandwidths measured in [K|M]{bit/s|Byte/s}. '0' means unlimited.\\n      delay_ms: Propagation delay in milliseconds. '0' means no delay.\\n      packet_loss_rate: Packet loss rate in range [0..1]. '0' means no loss.\\n      init_cwnd: the initial cwnd setting. '0' means no change.\\n      use_loopback: True iff shaping is done on the loopback (or equiv) adapter.\\n    \"", "#NEWLINE#", "assert", "(", "dont_use", "is", "None", ")", "#NEWLINE#", "self", ".", "host", "=", "host", "#NEWLINE#", "self", ".", "ports", "=", "ports", "#NEWLINE#", "self", ".", "up_bandwidth", "=", "up_bandwidth", "#NEWLINE#", "self", ".", "down_bandwidth", "=", "down_bandwidth", "#NEWLINE#", "self", ".", "delay_ms", "=", "delay_ms", "#NEWLINE#", "self", ".", "packet_loss_rate", "=", "packet_loss_rate", "#NEWLINE#", "self", ".", "init_cwnd", "=", "init_cwnd", "#NEWLINE#", "self", ".", "use_loopback", "=", "use_loopback", "#NEWLINE#", "if", "(", "not", "self", ".", "_BANDWIDTH_RE", ".", "match", "(", "self", ".", "up_bandwidth", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "BandwidthValueError", "(", "self", ".", "up_bandwidth", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "self", ".", "_BANDWIDTH_RE", ".", "match", "(", "self", ".", "down_bandwidth", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "BandwidthValueError", "(", "self", ".", "down_bandwidth", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "is_shaping", "=", "False"], "error_location": [0], "repair_targets": [], "repair_candidates": [16, 66, 68, 111, 122, 4, 47, 8, 54, 56, 2, 52, 58, 64, 70, 76, 82, 88, 94, 103, 109, 120, 129, 135, 146, 152, 28, 84, 86, 36, 96, 98, 20, 72, 74, 137, 148, 24, 78, 80, 12, 60, 62, 32, 90, 92], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "chromium/web-page-replay/trafficshaper.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2352, "results": {"model": "transformer", "prob": {"loc": [[0.9661343097686768, 3.273032405104459e-07, 2.4226054051723622e-08, 1.8682918323520425e-08, 2.9462519250955665e-06, 2.2188460846450653e-08, 1.24865460193746e-08, 8.042628785176476e-09, 2.864193675122806e-06, 8.876526891299363e-08, 2.442664879254153e-07, 4.28099999894016e-09, 7.193632427515695e-07, 5.874360553548286e-08, 1.5720267754204542e-08, 6.9005676728295384e-09, 5.585234816862794e-07, 6.741130675891327e-08, 7.10672978243565e-08, 2.0042429937916495e-08, 1.3221693961895653e-06, 1.1024798851622108e-07, 5.623915058095008e-07, 1.7820735109808084e-08, 4.359856120572658e-07, 2.0483362561662943e-07, 6.838690183030849e-07, 1.81512262997785e-08, 5.969489507151593e-07, 2.7933162982662907e-07, 1.0259942655466148e-06, 2.3817278815840837e-08, 1.0216756436420837e-06, 2.6250489781887154e-07, 2.0320346720836824e-06, 2.789242081746579e-08, 6.008350510455784e-07, 3.40912919227776e-07, 1.1461003168733441e-07, 1.1045009351562385e-08, 2.8378025263009476e-07, 1.7701093213418062e-07, 6.905152361014189e-08, 1.1334038418908676e-07, 7.325513706746278e-08, 2.8671315988049173e-08, 2.394935165739298e-07, 0.029857302084565163, 9.605616469343659e-06, 9.596629979569116e-07, 3.648372910447506e-07, 3.2108957270793326e-07, 9.127496980454453e-09, 3.258715608467355e-08, 1.0090397495332581e-07, 7.338940122281201e-08, 0.0005608667270280421, 1.1149182910230593e-07, 2.004067134464549e-08, 2.62621462354673e-08, 1.2973432106377913e-08, 1.3350455674299155e-07, 0.00013005109212826937, 1.9015547536582744e-07, 4.233807260334288e-08, 2.9702768244987965e-08, 7.594162099167079e-08, 1.0226349331787787e-06, 0.0005867155850864947, 2.005350978606657e-07, 6.127237384134787e-08, 4.4553686961990024e-08, 1.9843464826863055e-07, 9.115484544963692e-07, 0.000728920625988394, 2.1237909209048667e-07, 4.3101533009348714e-08, 3.380704427513592e-08, 8.208694168843067e-08, 8.712596866189415e-08, 0.000333982752636075, 4.2028329971799394e-07, 3.238744739064714e-08, 6.443679723133755e-08, 3.6750712695265975e-08, 4.950822685145795e-08, 0.0014252919936552644, 6.179055276334111e-07, 3.185742514233425e-08, 5.2020730834101414e-08, 2.323366743439692e-08, 8.037449816811204e-08, 9.048240463016555e-05, 1.5708862974861404e-06, 2.1324437327052692e-08, 4.902635453163384e-08, 8.470090051559964e-08, 3.230208278637292e-07, 1.514432005933486e-05, 3.3106841783592245e-06, 1.67430044939465e-07, 1.8549270635048742e-06, 2.447336328259553e-06, 1.0315719691789127e-06, 8.005947194078544e-08, 6.805087160444145e-09, 1.034924750342725e-07, 1.618486322740864e-07, 1.444887942625428e-07, 6.27416193310637e-06, 2.3187725162188144e-07, 1.127954760704597e-06, 1.0032155728367798e-07, 1.284040394011754e-07, 8.624862743999984e-07, 1.165079481779685e-07, 4.7311328188470725e-08, 1.523568329275804e-07, 2.156683542864357e-08, 4.374935997475404e-06, 7.261917289724806e-06, 1.4025718542143295e-07, 1.7745081777320593e-06, 8.151013730639534e-08, 1.5072404835336783e-07, 2.0640905518121144e-07, 3.178095653311175e-08, 7.504001473535027e-07, 6.554638503075694e-07, 6.216191081875877e-07, 6.316385281479597e-08, 1.4043767926352757e-08, 6.984189582226463e-08, 2.177745273002074e-07, 2.66489280420501e-07, 8.479999451083131e-06, 1.6187981088933157e-07, 2.9758302844129503e-07, 5.23096659321709e-08, 1.3335403536984813e-07, 4.4204378468748473e-07, 4.541345788311446e-08, 2.029079659848776e-08, 3.5319498437047514e-08, 2.2624234929935483e-08, 3.331875291223696e-07, 1.5459474525414407e-05, 1.5497704453082406e-07, 1.1498528920128592e-06, 7.94481138655101e-08, 6.3649409298705e-08, 3.63911389911209e-08, 4.566578226672391e-08, 8.231930337387894e-08, 3.788894975542689e-09, 5.009473170503043e-06, 3.249380461056717e-05]], "pointer": [[0.0, 0.0, 0.0026987504679709673, 0.0, 0.18815410137176514, 0.0, 0.0, 0.0, 0.029045626521110535, 0.0, 0.0, 0.0, 0.12647885084152222, 0.0, 0.0, 0.0, 0.0672239139676094, 0.0, 0.0, 0.0, 0.0438249297440052, 0.0, 0.0, 0.0, 0.09932863712310791, 0.0, 0.0, 0.0, 0.11287207901477814, 0.0, 0.0, 0.0, 0.2367963194847107, 0.0, 0.0, 0.0, 0.03419127315282822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003255700576119125, 0.0, 0.0, 0.0, 0.0, 0.001670851488597691, 0.0, 0.0027342159301042557, 0.0, 1.0443817473060335e-06, 0.0, 0.00045196228893473744, 0.0, 0.005649106111377478, 0.0, 4.110670488444157e-06, 0.0, 0.0011894875206053257, 0.0, 0.005922200158238411, 0.0, 1.152817048932775e-06, 0.0, 0.002787295263260603, 0.0, 0.011357607319951057, 0.0, 7.195592957032204e-07, 0.0, 0.0003828394110314548, 0.0, 0.0017944956198334694, 0.0, 7.604859888488136e-07, 0.0, 0.0013533839955925941, 0.0, 0.00291453511454165, 0.0, 4.69364380251136e-07, 0.0, 0.0001933746098075062, 0.0, 0.007217135280370712, 0.0, 5.104490810481366e-06, 0.0, 0.00026404217351228, 0.0, 0.00238272943533957, 0.0, 4.54506198366289e-06, 0.0, 0.0, 0.0, 0.0, 0.0004494137247093022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016532243171241134, 0.0, 0.003862461308017373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00034387578489258885, 0.0, 0.001415414153598249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00022988891578279436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011774218728533015, 0.0, 0.0026284316554665565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.632026972714812e-05, 0.0, 0.0010899716289713979, 0.0, 0.0, 0.0, 0.000397909723687917, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.034452300518751144, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def __init__(', 'self', ',', 'dont_use', '=', 'None', ',', 'host', '=', "'127.0.0.1'", ',', 'ports', '=', 'None', ',', 'up_bandwidth', '=', "'0'", ',', 'down_bandwidth', '=', "'0'", ',', 'delay_ms', '=', "'0'", ',', 'packet_loss_rate', '=', "'0'", ',', 'init_cwnd', '=', "'0'", ',', 'use_loopback', '=', 'True', ')', ':', '#NEWLINE#', '#INDENT#', '"Start shaping traffic.\\n\\n    Args:\\n      host: a host string (name or IP) for the web proxy.\\n      ports: a list of ports to shape traffic on.\\n      up_bandwidth: Upload bandwidth\\n      down_bandwidth: Download bandwidth\\n           Bandwidths measured in [K|M]{bit/s|Byte/s}. \'0\' means unlimited.\\n      delay_ms: Propagation delay in milliseconds. \'0\' means no delay.\\n      packet_loss_rate: Packet loss rate in range [0..1]. \'0\' means no loss.\\n      init_cwnd: the initial cwnd setting. \'0\' means no change.\\n      use_loopback: True iff shaping is done on the loopback (or equiv) adapter.\\n    "', '#NEWLINE#', 'assert', '(', 'dont_use', 'is', 'None', ')', '#NEWLINE#', 'self', '.', 'host', '=', 'host', '#NEWLINE#', 'self', '.', 'ports', '=', 'ports', '#NEWLINE#', 'self', '.', 'up_bandwidth', '=', 'up_bandwidth', '#NEWLINE#', 'self', '.', 'down_bandwidth', '=', 'down_bandwidth', '#NEWLINE#', 'self', '.', 'delay_ms', '=', 'delay_ms', '#NEWLINE#', 'self', '.', 'packet_loss_rate', '=', 'packet_loss_rate', '#NEWLINE#', 'self', '.', 'init_cwnd', '=', 'init_cwnd', '#NEWLINE#', 'self', '.', 'use_loopback', '=', 'use_loopback', '#NEWLINE#', 'if', '(', 'not', 'self', '.', '_BANDWIDTH_RE', '.', 'match', '(', 'self', '.', 'up_bandwidth', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'BandwidthValueError', '(', 'self', '.', 'up_bandwidth', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'self', '.', '_BANDWIDTH_RE', '.', 'match', '(', 'self', '.', 'down_bandwidth', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'raise', 'BandwidthValueError', '(', 'self', '.', 'down_bandwidth', ')', '#NEWLINE#', '#UNINDENT#', 'self', '.', 'is_shaping', '=', 'False']


All attention probs:

[0.013732654973864555, 0.008069496601819992, 0.02209826372563839, 0.014027312397956848, 0.02372054010629654, 0.012708504684269428, 0.007873138412833214, 0.007459792774170637, 0.02344938926398754, 0.007105551660060883, 0.00972282886505127, 0.009155502542853355, 0.024457070976495743, 0.007135734893381596, 0.006030313670635223, 0.006469502113759518, 0.017571130767464638, 0.006737810559570789, 0.00641728425398469, 0.006230050697922707, 0.01436888799071312, 0.0058171674609184265, 0.0056597026996314526, 0.005026377737522125, 0.015082038938999176, 0.004158441908657551, 0.004265404772013426, 0.0037086133379489183, 0.01184789091348648, 0.004214880056679249, 0.004721241537481546, 0.004430536646395922, 0.013497496023774147, 0.0037510127294808626, 0.004184849560260773, 0.004026416689157486, 0.010457368567585945, 0.004087264649569988, 0.0060655781999230385, 0.003105931682512164, 0.003616341156885028, 0.004798672161996365, 0.005482115782797337, 0.004779837094247341, 0.004422721453011036, 0.004920960403978825, 0.0031779708806425333, 0.017309753224253654, 0.003874128218740225, 0.0034407824277877808, 0.0029239999130368233, 0.0038438451010733843, 0.006754497531801462, 0.0019966568797826767, 0.005527060478925705, 0.00283462624065578, 0.013882714323699474, 0.0036060460843145847, 0.0076211243867874146, 0.0020405808463692665, 0.004721136298030615, 0.0033688002731651068, 0.012384945526719093, 0.0038910822477191687, 0.0077987718395888805, 0.00221061403863132, 0.0068474807776510715, 0.004009651485830545, 0.013742450624704361, 0.005126937758177519, 0.008106373250484467, 0.0023158942349255085, 0.006213561166077852, 0.0035192440263926983, 0.015760380774736404, 0.004316459409892559, 0.007071196101605892, 0.00204789312556386, 0.006293852813541889, 0.0026175749953836203, 0.012569383718073368, 0.004127487540245056, 0.006707858294248581, 0.0020251001697033644, 0.005814502481371164, 0.00304674101062119, 0.01400243304669857, 0.004934745840728283, 0.008778254501521587, 0.0022113723680377007, 0.00558471167460084, 0.0034620047081261873, 0.012526208534836769, 0.004111061803996563, 0.008191226050257683, 0.0024089354556053877, 0.006416139658540487, 0.0036084819585084915, 0.013329957611858845, 0.004723613150417805, 0.005385377909988165, 0.003519914811477065, 0.003412495134398341, 0.00996958278119564, 0.002644842490553856, 0.0028300879057496786, 0.0019308199407532811, 0.002750243293121457, 0.0026516278740018606, 0.012619542889297009, 0.0024687498807907104, 0.004578772000968456, 0.0025057534221559763, 0.002262741792947054, 0.003088644938543439, 0.0036233493592590094, 0.003259938210248947, 0.004592329729348421, 0.00338221644051373, 0.003779209917411208, 0.018978195264935493, 0.002414585091173649, 0.00320666772313416, 0.0028643866535276175, 0.004406186752021313, 0.0052894484251737595, 0.00689814193174243, 0.00439913896843791, 0.0039801811799407005, 0.009097792208194733, 0.002170495456084609, 0.002560531487688422, 0.0019493787549436092, 0.00323274708352983, 0.0028553211595863104, 0.012154036201536655, 0.0019443091005086899, 0.003285402664914727, 0.002129310742020607, 0.002434952650219202, 0.00351712666451931, 0.0038470502477139235, 0.0035080171655863523, 0.004939516540616751, 0.002749067498371005, 0.003670730860903859, 0.016862960532307625, 0.0023805347736924887, 0.004459718242287636, 0.002997360657900572, 0.004391803871840239, 0.0047159986570477486, 0.009467307478189468, 0.004099477548152208, 0.006660533603280783, 0.007149564567953348, 0.00662783719599247]


Top-k source tokens:

['ports', 'dont_use', 'host', 'self', 'self', 'up_bandwidth', 'dont_use', 'self', 'down_bandwidth', 'delay_ms']


Top-k attention probs:

[0.024457070976495743, 0.02372054010629654, 0.02344938926398754, 0.02209826372563839, 0.018978195264935493, 0.017571130767464638, 0.017309753224253654, 0.016862960532307625, 0.015760380774736404, 0.015082038938999176]
