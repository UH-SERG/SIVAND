
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def incidence_matrix(", "G", ",", "nodelist", "=", "None", ",", "edgelist", "=", "None", ",", "oriented", "=", "False", ",", "weight", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Return incidence matrix of G.\\n\\n    The incidence matrix assigns each row to a node and each column to an edge.\\n    For a standard incidence matrix a 1 appears wherever a row\\'s node is\\n    incident on the column\\'s edge.  For an oriented incidence matrix each\\n    edge is assigned an orientation (arbitrarily for undirected and aligning to\\n    direction for directed).  A -1 appears for the tail of an edge and 1\\n    for the head of the edge.  The elements are zero otherwise.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A NetworkX graph\\n\\n    nodelist : list, optional   (default= all nodes in G)\\n       The rows are ordered according to the nodes in nodelist.\\n       If nodelist is None, then the ordering is produced by G.nodes().\\n\\n    edgelist : list, optional (default= all edges in G)\\n       The columns are ordered according to the edges in edgelist.\\n       If edgelist is None, then the ordering is produced by G.edges().\\n\\n    oriented: bool, optional (default=False)\\n       If True, matrix elements are +1 or -1 for the head or tail node\\n       respectively of each edge.  If False, +1 occurs at both nodes.\\n\\n    weight : string or None, optional (default=None)\\n       The edge data key used to provide each value in the matrix.\\n       If None, then each edge has weight 1.  Edge weights, if used,\\n       should be positive so that the orientation can provide the sign.\\n\\n    Returns\\n    -------\\n    A : SciPy sparse matrix\\n      The incidence matrix of G.\\n\\n    Notes\\n    -----\\n    For MultiGraph/MultiDiGraph, the edges in edgelist should be\\n    (u,v,key) 3-tuples.\\n\\n    \"Networks are the best discrete model for so many problems in\\n    applied mathematics\" [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Gil Strang, Network applications: A = incidence matrix,\\n       http://academicearth.org/lectures/network-applications-incidence-matrix\\n    '", "#NEWLINE#", "import", "scipy.sparse", "#NEWLINE#", "if", "(", "nodelist", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "nodelist", "=", "list", "(", "G", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "edgelist", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "G", ".", "is_multigraph", "(", ")", ":", "#NEWLINE#", "#INDENT#", "edgelist", "=", "list", "(", "G", ".", "edges", "(", "keys", "=", "True", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "edgelist", "=", "list", "(", "G", ".", "edges", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "A", "=", "scipy", ".", "sparse", ".", "lil_matrix", "(", "(", "len", "(", "nodelist", ")", ",", "len", "(", "edgelist", ")", ")", ")", "#NEWLINE#", "node_index", "=", "dict", "(", "(", "(", "node", ",", "i", ")", "for", "(", "i", ",", "node", ")", "in", "enumerate", "(", "nodelist", ")", ")", ")", "#NEWLINE#", "for", "(", "ei", ",", "e", ")", "in", "enumerate", "(", "edgelist", ")", ":", "#NEWLINE#", "#INDENT#", "(", "u", ",", "v", ")", "=", "e", "[", ":", "2", "]", "#NEWLINE#", "if", "(", "u", "==", "v", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "ui", "=", "node_index", "[", "u", "]", "#NEWLINE#", "vi", "=", "node_index", "[", "v", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "raise", "NetworkXError", "(", "'node %s or %s in edgelist but not in nodelist\"%(u,v)'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "weight", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "wt", "=", "1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "G", ".", "is_multigraph", "(", ")", ":", "#NEWLINE#", "#INDENT#", "ekey", "=", "e", "[", "2", "]", "#NEWLINE#", "wt", "=", "G", "[", "u", "]", "[", "v", "]", "[", "ekey", "]", ".", "get", "(", "weight", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "wt", "=", "G", "[", "u", "]", "[", "v", "]", ".", "get", "(", "weight", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "oriented", ":", "#NEWLINE#", "#INDENT#", "A", "[", "(", "ui", ",", "ei", ")", "]", "=", "(", "-", "wt", ")", "#NEWLINE#", "A", "[", "(", "vi", ",", "ei", ")", "]", "=", "wt", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "A", "[", "(", "ui", ",", "ei", ")", "]", "=", "wt", "#NEWLINE#", "A", "[", "(", "vi", ",", "ei", ")", "]", "=", "wt", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "A", ".", "asformat", "(", "'csc'", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [124, 128, 122, 130, 155, 168, 186, 247, 272, 4, 30, 37, 106, 135, 95, 292, 306, 322, 333, 347, 8, 47, 63, 82, 111, 149, 218, 243, 268, 303, 315, 331, 342, 144, 160, 238, 12, 288, 116, 184, 191, 236, 253, 2, 41, 55, 67, 86, 228, 245, 270, 182, 295, 325, 142, 297, 311, 327, 338, 189, 309, 336, 16, 211, 258, 280, 157, 170, 193, 250, 275], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "networkx/networkx/networkx/linalg/graphmatrix.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2737, "results": {"model": "transformer", "prob": {"loc": [[0.5826452374458313, 2.8458196084102383e-06, 1.60701597451407e-06, 5.190405261146225e-08, 2.895912984968163e-06, 7.669897428286276e-08, 5.2394721450355064e-08, 5.0560128528331916e-08, 2.4543871859350475e-06, 2.1591532117781753e-07, 6.077998193632084e-08, 4.4433164703150396e-08, 1.9217106910218718e-06, 2.0728759864141466e-07, 3.1195102678793774e-07, 5.6417452043433514e-08, 3.2811396977194818e-06, 3.3256583265028894e-07, 2.0873176254099235e-07, 5.741179975871091e-08, 8.081549651706155e-08, 1.4534906256358227e-07, 9.764287511870862e-08, 2.661980715856771e-07, 1.1192184956598794e-07, 2.146380438716733e-06, 1.621474325474992e-06, 1.1861619242381494e-07, 1.1042293834861994e-07, 1.0013855700208296e-07, 0.001119384658522904, 4.612871009612718e-07, 1.1578913472476415e-07, 9.67956523822977e-08, 1.7652099870701932e-07, 1.8305806293028581e-07, 1.135006399977101e-07, 5.7163160818163306e-06, 1.5834409339277045e-07, 5.0730232459272884e-08, 1.93345627508279e-07, 0.0015994712011888623, 3.388781237845251e-07, 2.4860423764039297e-07, 1.6244264600118186e-07, 2.2437258451191155e-07, 1.2164026941263728e-07, 0.0006320870015770197, 6.000494067848194e-06, 6.431432666431647e-07, 2.3071997645729425e-07, 3.288894845354662e-07, 3.0316465426949435e-07, 1.1295446711301338e-07, 1.5602482505983062e-07, 3.9629162529308815e-06, 5.287671100973057e-08, 3.810215787325433e-08, 8.945763170231658e-07, 7.545663720520679e-07, 5.275212515698513e-07, 2.2412149291994865e-07, 1.1900120000518655e-07, 5.330185103957774e-06, 1.3222778250110423e-07, 7.361675358197317e-08, 1.501733208897349e-07, 1.9991377939732047e-06, 8.945102791813042e-08, 5.464833066071151e-07, 5.277497052702529e-07, 1.0385836503701285e-05, 4.0343371665585437e-07, 5.25139284945908e-06, 3.8880068586877314e-07, 2.751724537120026e-07, 2.268537855343311e-07, 2.30611760798638e-07, 7.105551276254118e-07, 2.126420781678462e-07, 3.306941493974591e-07, 2.1034878727732575e-07, 1.4523447134706657e-05, 1.201389920879592e-07, 1.638101139178616e-07, 3.632311234014196e-07, 2.6512755084695527e-06, 1.1836013413812907e-07, 5.341906899047899e-07, 1.1131118299090303e-05, 1.51969095441018e-06, 3.9238108229255886e-07, 3.8986036088317633e-07, 2.1254273008253222e-07, 2.020001232949653e-07, 4.378740868560271e-06, 2.420615032860951e-07, 4.182298198429635e-06, 1.463438223936464e-07, 1.0952548109344207e-05, 2.1895728252729896e-07, 5.848914952366613e-07, 2.490859856152383e-07, 2.870058892767702e-07, 2.2725828330294462e-07, 7.320660415643943e-07, 0.0023926158901304007, 2.2588963588532351e-07, 1.8951233471398155e-07, 5.012926251879435e-08, 5.885834184482519e-07, 0.0019852695986628532, 7.975739890753175e-07, 3.845856042516971e-07, 2.9671798529307125e-07, 3.0507305837090826e-07, 1.3266310361359501e-06, 2.187089478411508e-07, 7.403878043987788e-08, 2.0328876360053982e-07, 8.579107770856353e-07, 1.7254152453460847e-06, 0.0005101854912936687, 6.263967975428386e-07, 0.00506919389590621, 1.2869263628090266e-06, 1.3568743497671676e-06, 4.970731311004783e-07, 1.6573585526202805e-05, 5.452724280985422e-07, 9.053713256435003e-06, 9.451569127350012e-08, 1.274800922601571e-07, 2.1302091681718593e-06, 5.000209171157621e-07, 0.004291179124265909, 6.011339337419486e-07, 3.7153154153202195e-07, 3.055266688534175e-07, 4.5901128942205105e-07, 3.6838650885329116e-07, 1.0768470559696652e-07, 3.471771560725756e-05, 4.93283891955798e-07, 2.1603706045425497e-05, 4.657043817246631e-08, 3.80201967686844e-08, 7.989485311554745e-06, 2.4250098817901744e-07, 0.005532621406018734, 6.022354170909239e-08, 3.6101641853747424e-07, 2.3544784255591367e-07, 1.5252713581048738e-07, 1.2308962027418602e-07, 1.0139175174117554e-05, 3.2422806839349505e-07, 1.8475193428457715e-05, 2.4865926206985023e-07, 1.9441284848653595e-07, 0.0063308109529316425, 4.411951522342861e-06, 4.7456020979552704e-07, 0.0004357495345175266, 3.668334613848856e-07, 4.937536459692637e-07, 4.7190837904054206e-07, 2.375807071075542e-07, 0.03384033590555191, 1.8992351442648214e-06, 0.004104486666619778, 1.038539608089195e-06, 4.7371739242407784e-07, 3.772535137613886e-07, 1.9074713009104016e-07, 5.911297648708569e-06, 2.0976463588340266e-07, 2.488129950961593e-07, 5.053860263615206e-07, 4.5003019977229997e-07, 2.446207076900464e-07, 1.8683526548102236e-07, 7.022099453024566e-05, 3.824422947218409e-07, 0.09153725206851959, 4.608502422343008e-06, 0.0026089283637702465, 2.0566898228935315e-07, 1.4326468544823e-07, 1.2226143553561997e-05, 1.4203838816229108e-07, 0.08031345903873444, 3.7568543120869435e-06, 0.002714051865041256, 5.595249490397691e-07, 2.247147676825989e-07, 2.3133954130116763e-07, 2.0299285097280517e-06, 3.059068376387586e-07, 8.852265409586835e-07, 4.642815838451497e-07, 2.4450503133266466e-07, 1.676128960070855e-07, 8.590910027805876e-08, 1.0189040722252685e-06, 6.188140105223283e-05, 1.5763422425152385e-06, 2.9358068331930554e-07, 2.880236991131824e-07, 1.270492475669016e-07, 1.2164885276888526e-07, 0.007798944599926472, 9.935406524164136e-06, 1.0930608596027014e-06, 8.961637263382727e-07, 3.1451043014385505e-07, 1.1301070657054879e-07, 6.726934742573576e-08, 1.2376332279018243e-06, 1.0612471896820352e-06, 4.192879714537412e-05, 9.146075541366372e-08, 1.1980033320924122e-07, 3.678802613649168e-07, 5.240054292698915e-07, 1.966816540743821e-07, 1.8551783398379484e-07, 2.92457855266548e-07, 3.4934312225232134e-06, 5.088606513936611e-08, 8.066272982887313e-08, 1.4174381249176804e-05, 2.0643899460992543e-06, 6.503353802145284e-07, 2.5512326828902587e-07, 1.8037131610526558e-07, 3.0666938073409256e-06, 3.719839583027351e-07, 0.004284854978322983, 1.7053591818694258e-06, 0.0004849066608585417, 2.595395756088692e-07, 3.594954591790156e-07, 2.9369930416578427e-06, 1.6812496141938027e-06, 0.007298138923943043, 6.704231509502279e-06, 0.0025581486988812685, 4.311872316975496e-07, 1.817351176214288e-06, 0.003495566314086318, 2.804766836561612e-07, 5.934656996942067e-07, 0.0021391198970377445, 9.505081521865577e-08, 4.8424947607372815e-08, 4.073081072419882e-07, 6.998405410740816e-07, 0.024085069075226784, 3.963746166846249e-07, 0.0006173707661218941, 5.91643811276299e-07, 8.045672075240873e-07, 7.904545782366768e-07, 4.2221004150633235e-06, 7.467361911039916e-07, 7.023479042800318e-07, 5.423805191639985e-07, 1.1410134902689606e-05, 7.259819199134654e-07, 0.008620086126029491, 3.0237481496442342e-06, 0.013506886549293995, 4.6348395699169487e-07, 1.4769070730835665e-06, 0.004635564982891083, 4.686697252509475e-07, 1.5167596245646564e-07, 9.809906487134867e-07, 1.035513150782208e-06, 0.014066540636122227, 3.0855434829391015e-07, 0.0004417991731315851, 3.7228630844765576e-07, 5.12355711634882e-07, 5.382690346777963e-07, 4.991490527572751e-07, 2.80422653986534e-07, 0.004680239595472813, 1.2699636044999352e-06, 6.612171432607283e-07, 3.2873896316232276e-07, 7.439302862621844e-06, 1.0496391666947602e-07, 1.310490233663586e-06, 0.005902155768126249, 1.0958916618619696e-06, 0.004083218518644571, 7.418229301947576e-07, 2.583133209554944e-07, 1.164576360679348e-06, 5.641780444420874e-05, 7.025247441561078e-07, 0.003175746649503708, 7.27152894341998e-07, 6.24570361651422e-07, 1.0521116564632393e-05, 2.542101071867364e-07, 1.0805592864926439e-06, 0.006141806021332741, 2.456601180256257e-07, 0.003457659622654319, 1.7644659067173052e-07, 7.280310398982692e-08, 2.962785856652772e-07, 0.0051912302151322365, 5.370686153582938e-07, 5.554932158702286e-07, 2.9737410045527213e-07, 5.51696757611353e-07, 7.88107513471914e-07, 4.981009738003195e-07, 1.0990027476509567e-05, 1.36298723418804e-07, 1.384045390295796e-06, 0.00989600270986557, 1.0025652272815933e-06, 0.010819308459758759, 6.381948765010748e-07, 1.9306150988995796e-07, 2.9598658102258923e-07, 0.006627177353948355, 8.026681257433665e-07, 9.866854270512704e-06, 3.9840821841607976e-07, 1.6542122693863348e-06, 0.005682500544935465, 8.95995356131607e-07, 0.00507337274029851, 5.025498239774606e-07, 1.523939516800965e-07, 4.958506565344578e-07, 0.006844834890216589, 5.603868657999556e-07, 5.712956294701144e-07, 4.453079895938572e-07, 6.582872913440951e-08, 3.2001141789805843e-06, 9.698710812244826e-08, 9.738478183862753e-07, 1.1627276990111568e-06, 2.727268474700395e-05, 6.403762426998583e-07]], "pointer": [[0.0, 0.0, 0.0414089560508728, 0.0, 0.021249406039714813, 0.0, 0.0, 0.0, 0.010740244761109352, 0.0, 0.0, 0.0, 0.012856637127697468, 0.0, 0.0, 0.0, 0.012119555845856667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0014980803243815899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016139740124344826, 0.0, 0.0, 0.0, 0.0053509436547756195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001464358065277338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003684353083372116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006153937429189682, 0.0, 0.0, 0.0, 0.002229186939075589, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004735386930406094, 0.0, 0.0, 0.0, 0.0026008563581854105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.041491854935884476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028152416925877333, 0.0, 0.0, 0.0, 0.0, 0.00014548591570928693, 0.0, 0.0, 0.0, 0.0, 0.016719358041882515, 0.0, 0.0, 0.0, 0.0, 0.0, 9.664371464168653e-05, 0.0, 3.1679006497142836e-05, 0.0, 0.0, 0.0, 0.00423015421256423, 0.0, 0.0058118076995015144, 0.0, 0.0, 0.0, 0.0, 0.0029054784681648016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11200994998216629, 0.0, 0.02145286835730076, 0.0, 0.0, 0.0, 0.0, 0.0005022105760872364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.018843820318579674, 0.0, 0.015126223675906658, 0.0, 0.0, 0.0010055669117718935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016231813933700323, 0.0, 0.0012573705753311515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030205190181732178, 0.0, 0.029115553945302963, 0.0, 0.0017144997837021947, 0.0, 0.0, 0.01161959208548069, 0.0, 0.006330001167953014, 0.0, 0.0009526693029329181, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006575886160135269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0043938979506492615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014547166414558887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010283628478646278, 0.0, 0.002833937993273139, 0.0, 0.0, 0.0, 0.0, 0.004511586390435696, 0.0, 0.12323788553476334, 0.0, 0.005236524157226086, 0.0, 0.0, 0.004052485339343548, 0.0, 0.0, 0.0024738702923059464, 0.0, 0.0, 0.0, 0.0, 0.007879642769694328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0062911431305110455, 0.0, 0.23716755211353302, 0.0, 0.012176224030554295, 0.0, 0.0, 0.005594298243522644, 0.0, 0.0, 0.0, 0.0, 0.005868352018296719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028846818022429943, 0.0, 0.0, 0.0, 0.002978970529511571, 0.0, 0.0, 0.003807006636634469, 0.0, 0.004045152571052313, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002120598219335079, 0.0, 0.0, 0.0035761708859354258, 0.0, 0.0, 0.007817421108484268, 0.0, 0.004111151676625013, 0.0, 0.0, 0.0, 0.003226593602448702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005600724834948778, 0.0, 0.0, 0.005279412493109703, 0.0, 0.004006447270512581, 0.0, 0.0, 0.0, 0.006036466918885708, 0.0, 0.00456461263820529, 0.0, 0.0, 0.00936912652105093, 0.0, 0.0054223062470555305, 0.0, 0.0, 0.0, 0.004103528801351786, 0.0, 0.0, 0.0, 0.0, 0.0010054538724943995, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.5401765704154968, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def incidence_matrix(', 'G', ',', 'nodelist', '=', 'None', ',', 'edgelist', '=', 'None', ',', 'oriented', '=', 'False', ',', 'weight', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '\'Return incidence matrix of G.\\n\\n    The incidence matrix assigns each row to a node and each column to an edge.\\n    For a standard incidence matrix a 1 appears wherever a row\\\'s node is\\n    incident on the column\\\'s edge.  For an oriented incidence matrix each\\n    edge is assigned an orientation (arbitrarily for undirected and aligning to\\n    direction for directed).  A -1 appears for the tail of an edge and 1\\n    for the head of the edge.  The elements are zero otherwise.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A NetworkX graph\\n\\n    nodelist : list, optional   (default= all nodes in G)\\n       The rows are ordered according to the nodes in nodelist.\\n       If nodelist is None, then the ordering is produced by G.nodes().\\n\\n    edgelist : list, optional (default= all edges in G)\\n       The columns are ordered according to the edges in edgelist.\\n       If edgelist is None, then the ordering is produced by G.edges().\\n\\n    oriented: bool, optional (default=False)\\n       If True, matrix elements are +1 or -1 for the head or tail node\\n       respectively of each edge.  If False, +1 occurs at both nodes.\\n\\n    weight : string or None, optional (default=None)\\n       The edge data key used to provide each value in the matrix.\\n       If None, then each edge has weight 1.  Edge weights, if used,\\n       should be positive so that the orientation can provide the sign.\\n\\n    Returns\\n    -------\\n    A : SciPy sparse matrix\\n      The incidence matrix of G.\\n\\n    Notes\\n    -----\\n    For MultiGraph/MultiDiGraph, the edges in edgelist should be\\n    (u,v,key) 3-tuples.\\n\\n    "Networks are the best discrete model for so many problems in\\n    applied mathematics" [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Gil Strang, Network applications: A = incidence matrix,\\n       http://academicearth.org/lectures/network-applications-incidence-matrix\\n    \'', '#NEWLINE#', 'import', 'scipy.sparse', '#NEWLINE#', 'if', '(', 'nodelist', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'nodelist', '=', 'list', '(', 'G', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'edgelist', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'if', 'G', '.', 'is_multigraph', '(', ')', ':', '#NEWLINE#', '#INDENT#', 'edgelist', '=', 'list', '(', 'G', '.', 'edges', '(', 'keys', '=', 'True', ')', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'edgelist', '=', 'list', '(', 'G', '.', 'edges', '(', ')', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'A', '=', 'scipy', '.', 'sparse', '.', 'lil_matrix', '(', '(', 'len', '(', 'nodelist', ')', ',', 'len', '(', 'edgelist', ')', ')', ')', '#NEWLINE#', 'node_index', '=', 'dict', '(', '(', '(', 'node', ',', 'i', ')', 'for', '(', 'i', ',', 'node', ')', 'in', 'enumerate', '(', 'nodelist', ')', ')', ')', '#NEWLINE#', 'for', '(', 'ei', ',', 'e', ')', 'in', 'enumerate', '(', 'edgelist', ')', ':', '#NEWLINE#', '#INDENT#', '(', 'u', ',', 'v', ')', '=', 'e', '[', ':', '2', ']', '#NEWLINE#', 'if', '(', 'u', '==', 'v', ')', ':', '#NEWLINE#', '#INDENT#', 'continue', '#NEWLINE#', '#UNINDENT#', 'try', ':', '#NEWLINE#', '#INDENT#', 'ui', '=', 'node_index', '[', 'u', ']', '#NEWLINE#', 'vi', '=', 'node_index', '[', 'v', ']', '#NEWLINE#', '#UNINDENT#', 'except', 'KeyError', ':', '#NEWLINE#', '#INDENT#', 'raise', 'NetworkXError', '(', '\'node %s or %s in edgelist but not in nodelist"%(u,v)\'', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'weight', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'wt', '=', '1', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', 'G', '.', 'is_multigraph', '(', ')', ':', '#NEWLINE#', '#INDENT#', 'ekey', '=', 'e', '[', '2', ']', '#NEWLINE#', 'wt', '=', 'G', '[', 'u', ']', '[', 'v', ']', '[', 'ekey', ']', '.', 'get', '(', 'weight', ',', '1', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'wt', '=', 'G', '[', 'u', ']', '[', 'v', ']', '.', 'get', '(', 'weight', ',', '1', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'if', 'oriented', ':', '#NEWLINE#', '#INDENT#', 'A', '[', '(', 'ui', ',', 'ei', ')', ']', '=', '(', '-', 'wt', ')', '#NEWLINE#', 'A', '[', '(', 'vi', ',', 'ei', ')', ']', '=', 'wt', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'A', '[', '(', 'ui', ',', 'ei', ')', ']', '=', 'wt', '#NEWLINE#', 'A', '[', '(', 'vi', ',', 'ei', ')', ']', '=', 'wt', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', 'A', '.', 'asformat', '(', "'csc'", ')']


All attention probs:

[0.0056884875521063805, 0.007188756484538317, 0.0164481308311224, 0.008968363516032696, 0.011797754094004631, 0.007966994307935238, 0.004879593849182129, 0.004747969098389149, 0.017223460599780083, 0.005944753997027874, 0.0064929174259305, 0.007577506359666586, 0.013519368134438992, 0.007286940235644579, 0.007132924627512693, 0.005489265080541372, 0.010721521452069283, 0.005360664799809456, 0.004713393282145262, 0.0049233706668019295, 0.004523630253970623, 0.004323907196521759, 0.004138916730880737, 0.0038668387569487095, 0.0037819859571754932, 0.0037845722399652004, 0.004403147380799055, 0.0028341002762317657, 0.0028209241572767496, 0.0020360120106488466, 0.00722167594358325, 0.002661434467881918, 0.0030643066857010126, 0.003013692097738385, 0.0025369953364133835, 0.0025803991593420506, 0.002680964069440961, 0.006585419178009033, 0.003057698719203472, 0.004624263383448124, 0.004167554434388876, 0.00935057271271944, 0.003282110905274749, 0.0028909235261380672, 0.0023222919553518295, 0.0023260144516825676, 0.0018342516850680113, 0.006804076489061117, 0.0020846265833824873, 0.0024520389270037413, 0.0018985640490427613, 0.001454756362363696, 0.0016225703293457627, 0.0016599914524704218, 0.0019036438316106796, 0.0031594482716172934, 0.0012061204761266708, 0.0016424395143985748, 0.001709814416244626, 0.0016010907711461186, 0.0014889631420373917, 0.0016171310562640429, 0.0016289256745949388, 0.004911464173346758, 0.0017603589221835136, 0.0016261502169072628, 0.001474008779041469, 0.0033593126572668552, 0.0011455691419541836, 0.001329680671915412, 0.0014270799001678824, 0.0021646092645823956, 0.0014376986073330045, 0.0017938107484951615, 0.0012488364009186625, 0.0009575135773047805, 0.001828990876674652, 0.001807988970540464, 0.004006366245448589, 0.0014554132940247655, 0.0016337718116119504, 0.0016100835055112839, 0.003851149929687381, 0.0018819073447957635, 0.0011983297299593687, 0.0014109276235103607, 0.0026002065278589725, 0.0014364375965669751, 0.0015848176553845406, 0.0018901689909398556, 0.001244004350155592, 0.0010425474029034376, 0.0015843827277421951, 0.0014754908625036478, 0.0017481099348515272, 0.005765581503510475, 0.003108089091256261, 0.002056317636743188, 0.0008955370867624879, 0.0019001859473064542, 0.000821095600258559, 0.0015221461653709412, 0.0012693214230239391, 0.0016956652980297804, 0.0012971214018762112, 0.0013859400060027838, 0.006365033332258463, 0.0008098866092041135, 0.000982310390099883, 0.0012267455458641052, 0.001499953679740429, 0.00717177102342248, 0.0012379451654851437, 0.0009816131787374616, 0.0008505259756930172, 0.0018992496188730001, 0.006453291978687048, 0.0014604770112782717, 0.0010894278530031443, 0.0011485674185678363, 0.001330102328211069, 0.0014511215267702937, 0.006360099650919437, 0.0013616454089060426, 0.004880773834884167, 0.0011343638179823756, 0.0017121416749432683, 0.0025348984636366367, 0.004514981061220169, 0.001730453921481967, 0.004314108286052942, 0.0013562764506787062, 0.001230877940542996, 0.0018291441956534982, 0.0012344621354714036, 0.007723443675786257, 0.0008866111747920513, 0.0007903148070909083, 0.000737376103643328, 0.001854683505371213, 0.0013906062813475728, 0.0020966872107237577, 0.005977618973702192, 0.001543468446470797, 0.003756945952773094, 0.0011980489362031221, 0.0012119675520807505, 0.002129674656316638, 0.0012900559231638908, 0.007071046158671379, 0.0009912272216752172, 0.001401756890118122, 0.0015899775316938758, 0.001758165075443685, 0.0025684291031211615, 0.007292669732123613, 0.001858443720266223, 0.005003312136977911, 0.0021654502488672733, 0.0018868230981752276, 0.0050554340705275536, 0.0012474877294152975, 0.0013040652265772223, 0.0030891397036612034, 0.0008792250300757587, 0.0014769373228773475, 0.0019378972938284278, 0.001161451917141676, 0.008198089897632599, 0.0012282078387215734, 0.004386682063341141, 0.0009311288013122976, 0.001274287118576467, 0.0017382287187501788, 0.0016241077100858092, 0.001812760136090219, 0.0016077535692602396, 0.0017544126603752375, 0.002037613419815898, 0.0014857500791549683, 0.0016233561327680945, 0.0016209266614168882, 0.004842756781727076, 0.0018040729919448495, 0.011432955041527748, 0.0016873182030394673, 0.004855185281485319, 0.002270166063681245, 0.0026504341512918472, 0.0047344788908958435, 0.0029896374326199293, 0.01433262974023819, 0.0017023985274136066, 0.005215878132730722, 0.0015160731272771955, 0.0019267989555373788, 0.0018216745229437947, 0.0025125013198703527, 0.0013383373152464628, 0.0014117778046056628, 0.0017067386070266366, 0.0015046092448756099, 0.0014220677549019456, 0.0009196800529025495, 0.001133403624407947, 0.0020687244832515717, 0.0010325388284400105, 0.0016295546665787697, 0.0020167480688542128, 0.0020201345905661583, 0.0011906918371096253, 0.005444214213639498, 0.0014327818062156439, 0.0011513268109411001, 0.0012044647010043263, 0.0012265273835510015, 0.001403248985297978, 0.0012152661802247167, 0.0038757892325520515, 0.0010524928802624345, 0.0021304022520780563, 0.0013449351536110044, 0.001415171311236918, 0.0023040352389216423, 0.0014743965584784746, 0.0018457159167155623, 0.0018380912952125072, 0.001654009218327701, 0.0022003145422786474, 0.0008896628860384226, 0.0011065190192312002, 0.0014858192298561335, 0.000979960197582841, 0.0010587567230686545, 0.0013740871800109744, 0.00138799287378788, 0.005945216864347458, 0.0013189874589443207, 0.0033077653497457504, 0.0010587824508547783, 0.0029917233623564243, 0.0009075117995962501, 0.001552750007249415, 0.0047324481420218945, 0.0011642280733212829, 0.00506684510037303, 0.0011651189997792244, 0.004462600685656071, 0.0011967674363404512, 0.0012190953129902482, 0.005131841171532869, 0.0018074034014716744, 0.0020389296114444733, 0.005340275354683399, 0.0033857207745313644, 0.0017432142049074173, 0.0015983543125912547, 0.0013243339490145445, 0.009027659893035889, 0.00104399339761585, 0.002386698732152581, 0.0008938200771808624, 0.0013155529741197824, 0.001515144482254982, 0.00294404081068933, 0.0010969474678859115, 0.0013576904311776161, 0.001443974208086729, 0.004591447301208973, 0.0013853708514943719, 0.004739312920719385, 0.0011287516681477427, 0.004703498911112547, 0.000997584662400186, 0.0010021737543866038, 0.004803133197128773, 0.0011327003594487906, 0.0006974575226195157, 0.0013706599129363894, 0.0010357468854635954, 0.010839790105819702, 0.0012751141330227256, 0.0023594130761921406, 0.001374978804960847, 0.002198141533881426, 0.0022888625971972942, 0.002976788207888603, 0.004482661373913288, 0.006119398400187492, 0.001916247303597629, 0.0015104685444384813, 0.0014290718827396631, 0.0033709481358528137, 0.002051931107416749, 0.001066776574589312, 0.006985862739384174, 0.001176514197140932, 0.0052893152460455894, 0.0009769063908606768, 0.0010017231106758118, 0.0008951111230999231, 0.0012973503908142447, 0.000934976153075695, 0.006348410155624151, 0.0011049730237573385, 0.0019878989551216364, 0.004503090400248766, 0.00095603137742728, 0.0010181645629927516, 0.006093454547226429, 0.0012538700830191374, 0.005496310535818338, 0.0013158892979845405, 0.001594253466464579, 0.0014858286594972014, 0.00585184758529067, 0.0019504657248035073, 0.0019971744623035192, 0.002324223518371582, 0.0016414907295256853, 0.001423679874278605, 0.0013449020916596055, 0.004873897880315781, 0.0016041374765336514, 0.0011779449414461851, 0.007469783537089825, 0.0011873161420226097, 0.0068628196604549885, 0.0011155408574268222, 0.0011354807065799832, 0.0012681790394708514, 0.0062366267666220665, 0.0017381868092343211, 0.006436047609895468, 0.0013662994606420398, 0.001059298636391759, 0.005679393652826548, 0.0011028272565454245, 0.006507944781333208, 0.0010803929762914777, 0.0012373148929327726, 0.0010486815590411425, 0.006267699878662825, 0.0017931340262293816, 0.001665816642343998, 0.0017101947451010346, 0.0019672359339892864, 0.005093980580568314, 0.0010867607779800892, 0.0014440857339650393, 0.0012384239817038178, 0.001492680050432682, 0.0011152161750942469]


Top-k source tokens:

['edgelist', 'G', 'node_index', 'oriented', 'nodelist', 'node_index', 'weight', 'weight', 'G', 'weight']


Top-k attention probs:

[0.017223460599780083, 0.0164481308311224, 0.01433262974023819, 0.013519368134438992, 0.011797754094004631, 0.011432955041527748, 0.010839790105819702, 0.010721521452069283, 0.00935057271271944, 0.009027659893035889]
