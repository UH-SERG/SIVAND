
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _apply_common_rules(", "self", ",", "part", ",", "maxlength", ")", ":", "#NEWLINE#", "#INDENT#", "'This method contains the rules that must be applied to both the\\n        domain and the local part of the e-mail address.\\n        '", "#NEWLINE#", "part", "=", "part", ".", "strip", "(", ")", "#NEWLINE#", "if", "self", ".", "fix", ":", "#NEWLINE#", "#INDENT#", "part", "=", "part", ".", "strip", "(", "'.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "part", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "part", ",", "'It cannot be empty.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "part", ")", ">", "maxlength", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "part", ",", "(", "'It cannot be longer than %i chars.'", "%", "maxlength", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "part", "[", "0", "]", "==", "'.'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "part", ",", "'It cannot start with a dot.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "part", "[", "(", "-", "1", ")", "]", "==", "'.'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "part", ",", "'It cannot end with a dot.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "'..'", "in", "part", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "part", ",", "'It cannot contain consecutive dots.'", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "part", ",", "''", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 22, 6, 61, 73, 4, 13, 15, 28, 30, 41, 48, 58, 68, 80, 92, 100, 115, 125, 132, 140], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "marrow/mailer/marrow/mailer/validator.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1743, "results": {"model": "transformer", "prob": {"loc": [[0.7895283102989197, 6.258939265535446e-06, 4.417249783728039e-06, 1.364581123652897e-07, 4.714026999863563e-06, 1.232810404871998e-07, 1.5633842849638313e-05, 6.786367379163494e-08, 1.4148346849651716e-07, 2.634099303122639e-07, 2.63849926795956e-07, 1.1299647439955152e-06, 4.4273014054851956e-07, 1.0627297342580277e-05, 1.0991245602554045e-07, 3.0098000934231095e-05, 2.4696129230505903e-07, 6.152843212703374e-08, 6.021307967785106e-07, 1.8859032024920452e-06, 4.1280134155385895e-07, 1.2923315750867914e-07, 0.03299660608172417, 2.4688409894224606e-07, 4.101085337993027e-08, 8.211899853449722e-07, 2.213316179222602e-07, 1.0005086181763545e-07, 9.102084732148796e-06, 8.308742849294504e-08, 1.308241280639777e-05, 2.9633039844156883e-07, 5.446221962301934e-08, 2.2303936475509545e-06, 6.639515777351335e-05, 9.477780622546561e-07, 1.1264033901170478e-06, 6.605372391277342e-07, 6.972912842684309e-07, 5.787532018075581e-07, 1.1644580126812798e-06, 0.021511323750019073, 9.802909772815838e-08, 2.3659035832679365e-06, 1.2290122413105564e-06, 2.2494403140171926e-07, 2.5921126578509757e-08, 1.1650750053604497e-07, 0.015804244205355644, 1.0265805485687451e-06, 1.841443236116902e-06, 5.681906714016804e-07, 8.504857760271989e-07, 3.870601403832552e-07, 1.5126590824365849e-07, 3.053771635563862e-08, 2.775345819827635e-08, 6.614879453081812e-07, 0.00785102415829897, 3.387484781569583e-08, 1.9507129422891012e-07, 0.00633850134909153, 8.995672118317088e-08, 1.988691337828641e-06, 4.124503618641029e-07, 1.5601432323819608e-07, 1.0267773298267002e-08, 7.23793860402111e-08, 0.008524722419679165, 1.2349049427484715e-07, 7.445324001764675e-08, 1.9743993107113056e-06, 3.3428653978262446e-07, 0.10183583199977875, 8.239607609539235e-07, 5.177955699764425e-07, 1.343794906460971e-06, 1.6420799511251971e-06, 3.733363200808526e-07, 9.830527858412097e-08, 0.0024913314264267683, 1.6440833860542625e-05, 1.621782644178893e-06, 3.28787052694679e-07, 7.805271025063121e-07, 7.472376637451816e-06, 2.2251852271892858e-07, 1.8354821804678068e-06, 3.7598465496557765e-07, 1.2806663107767235e-07, 1.549126693589642e-08, 1.1534469734897357e-07, 0.0006867636693641543, 5.249193577583355e-07, 2.7590608624450397e-06, 3.347459198721481e-07, 6.16414581600111e-07, 5.053495897300309e-07, 2.3790887837549235e-07, 6.818348907700056e-08, 0.0013764554169028997, 7.648446853636415e-08, 2.875283144021523e-06, 1.0943630286419648e-06, 1.3618951015814673e-05, 8.188158631128317e-07, 5.772616304966505e-07, 1.7677298274065834e-06, 1.8236461983178742e-05, 1.285808025386359e-06, 2.8276383545744466e-06, 8.096855026451522e-07, 1.672567151445037e-07, 1.3157777978278773e-08, 8.937814044429615e-08, 0.0005137129337526858, 4.29217635655732e-07, 2.674061533980421e-06, 4.395865573769697e-07, 4.0470894191457774e-07, 2.326145818187797e-07, 1.6022976012664003e-07, 1.0274516881736417e-07, 8.883352165867109e-06, 4.970500526724209e-07, 0.005488348659127951, 4.9644629740441815e-08, 1.2144379297751584e-06, 1.7064243706954585e-07, 9.719871485458498e-08, 1.7002149022005142e-08, 9.785349419644263e-08, 0.0013720428105443716, 1.0034981414719368e-06, 7.308222393476171e-06, 1.0309012168363552e-06, 6.44676219963003e-07, 5.281652875055443e-07, 3.279075855289193e-08, 8.175279475608477e-08, 0.003375743282958865, 4.964418280906102e-07, 3.1122949621931184e-06, 1.260670160263544e-06]], "pointer": [[0.0, 0.0, 0.0080099543556571, 0.0, 0.2463112622499466, 0.0, 0.08617591857910156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14799369871616364, 0.0, 0.0032688030041754246, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017057526856660843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1778375506401062, 0.0, 0.021570740267634392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00271737203001976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003769189352169633, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0937473252415657, 0.0, 0.0, 0.046569813042879105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01905517652630806, 0.0, 0.0, 0.0, 0.0, 0.06778298318386078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0014834139728918672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009012045338749886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01274055615067482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0193620752543211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009463061578571796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01671588607132435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004707471001893282, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.23631969094276428, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def _apply_common_rules(', 'self', ',', 'part', ',', 'maxlength', ')', ':', '#NEWLINE#', '#INDENT#', "'This method contains the rules that must be applied to both the\\n        domain and the local part of the e-mail address.\\n        '", '#NEWLINE#', 'part', '=', 'part', '.', 'strip', '(', ')', '#NEWLINE#', 'if', 'self', '.', 'fix', ':', '#NEWLINE#', '#INDENT#', 'part', '=', 'part', '.', 'strip', '(', "'.'", ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'not', 'part', ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'part', ',', "'It cannot be empty.'", ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'len', '(', 'part', ')', '>', 'maxlength', ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'part', ',', '(', "'It cannot be longer than %i chars.'", '%', 'maxlength', ')', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'part', '[', '0', ']', '==', "'.'", ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'part', ',', "'It cannot start with a dot.'", ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'part', '[', '(', '-', '1', ')', ']', '==', "'.'", ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'part', ',', "'It cannot end with a dot.'", ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', "'..'", 'in', 'part', ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'part', ',', "'It cannot contain consecutive dots.'", ')', '#NEWLINE#', '#UNINDENT#', 'return', '(', 'part', ',', "''", ')']


All attention probs:

[0.011607479304075241, 0.009448939003050327, 0.04754475876688957, 0.013678686693310738, 0.018615735694766045, 0.01026271004229784, 0.021272949874401093, 0.010405231267213821, 0.0076123676262795925, 0.008280051872134209, 0.008871899917721748, 0.01074481476098299, 0.008991272188723087, 0.019276605919003487, 0.008393988944590092, 0.01304600015282631, 0.005214106757193804, 0.0060280198231339455, 0.0063965837471187115, 0.006606745533645153, 0.007484125904738903, 0.006537470500916243, 0.019183194264769554, 0.004362126346677542, 0.0050355675630271435, 0.004796270746737719, 0.0046244156546890736, 0.004522820468991995, 0.017304567620158195, 0.004266959149390459, 0.009516645222902298, 0.0034110790584236383, 0.0036260676570236683, 0.00397687591612339, 0.006178258918225765, 0.003369784913957119, 0.005227188114076853, 0.0051514143124222755, 0.005517718382179737, 0.004901554435491562, 0.003897203365340829, 0.0169550608843565, 0.0042891972698271275, 0.004013640806078911, 0.004339479375630617, 0.004534171894192696, 0.006437688134610653, 0.0033053699880838394, 0.01355691347271204, 0.0040310341864824295, 0.004711922258138657, 0.0028497129678726196, 0.003922454547137022, 0.004000611137598753, 0.004449423402547836, 0.002922160318121314, 0.002987647196277976, 0.003938797861337662, 0.015640534460544586, 0.0029091534670442343, 0.003407050622627139, 0.022614041343331337, 0.003396696178242564, 0.0033346039708703756, 0.003931399900466204, 0.0045716422609984875, 0.00721730524674058, 0.0034873413387686014, 0.015194804407656193, 0.004266489762812853, 0.0035093799233436584, 0.00849201064556837, 0.004023646470159292, 0.030007466673851013, 0.0029461176600307226, 0.002409235807135701, 0.004529057536274195, 0.004193929955363274, 0.00496498541906476, 0.0035418274346739054, 0.009932809509336948, 0.0035019645001739264, 0.003752045566216111, 0.0027096690610051155, 0.0031896887812763453, 0.004333526827394962, 0.0032064516562968493, 0.004402837250381708, 0.004764283075928688, 0.0041833543218672276, 0.005154982674866915, 0.003079511458054185, 0.014758763834834099, 0.0037490781396627426, 0.005796199664473534, 0.003404264571145177, 0.004862732253968716, 0.0050851283594965935, 0.006936087738722563, 0.003333826782181859, 0.013155166991055012, 0.0027807680889964104, 0.004340168554335833, 0.004836574196815491, 0.005490092094987631, 0.002851361408829689, 0.0029028409626334906, 0.0032411394640803337, 0.004378128796815872, 0.0023486518766731024, 0.003919996786862612, 0.005754308775067329, 0.005234959069639444, 0.006080386228859425, 0.0032045827247202396, 0.013934916816651821, 0.0030258370097726583, 0.005080818198621273, 0.0026547147426754236, 0.004344307351857424, 0.004226061049848795, 0.006022114306688309, 0.0035029174759984016, 0.008372360840439796, 0.006106224842369556, 0.016793331131339073, 0.006415071897208691, 0.008578924462199211, 0.0068277926184237, 0.0061951917596161366, 0.00787547416985035, 0.004500729497522116, 0.014877642504870892, 0.0036236848682165146, 0.005767658818513155, 0.002939108991995454, 0.0052271136082708836, 0.0050469315610826015, 0.006365323439240456, 0.00419043330475688, 0.01910531334578991, 0.0040725539438426495, 0.004601862281560898, 0.004044985864311457]


Top-k source tokens:

['self', 'maxlength', 'maxlength', 'maxlength', 'part', 'self', 'part', 'part', 'part', 'part']


Top-k attention probs:

[0.04754475876688957, 0.030007466673851013, 0.022614041343331337, 0.021272949874401093, 0.019276605919003487, 0.019183194264769554, 0.01910531334578991, 0.018615735694766045, 0.017304567620158195, 0.0169550608843565]
