
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "=", "4", ",", "default_flow_style", "=", "False", ")", "#NEWLINE#", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 45, 61, 11, 24, 35, 48, 64, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "fusic-com/flask-todo/utils/ext/bunch.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2604, "results": {"model": "transformer", "prob": {"loc": [[0.9053707718849182, 1.5167217497946694e-05, 2.383953415119322e-06, 2.9476535701178364e-07, 5.034765422351484e-07, 3.4461299946997315e-07, 4.448197330475523e-07, 4.949207550453139e-07, 3.4868844522861764e-07, 1.1631277629930992e-06, 3.507352346332482e-07, 4.695179995906074e-06, 1.6865373027030728e-06, 3.7775183869825923e-08, 5.776737452833913e-07, 2.384998083471146e-07, 2.9357656785578e-06, 5.0260077841812745e-06, 3.492995688247902e-07, 1.0789860738213974e-07, 4.167420399880939e-07, 9.579674042470288e-06, 4.149190147018089e-07, 1.8297440362857742e-07, 2.659998017406906e-07, 1.7465734458710358e-07, 6.365064564306522e-08, 4.4247326513868757e-07, 0.0009201304637826979, 7.693767543059948e-07, 3.6496894040283223e-07, 7.217204256448895e-07, 8.699974500814278e-07, 1.9424936908762902e-05, 2.826846412062878e-06, 0.02690279856324196, 1.5926910634789238e-07, 7.908275847512414e-07, 5.349252205633093e-07, 3.091071221206221e-07, 1.0377615922152472e-07, 1.403568489877216e-06, 4.160828268595651e-07, 1.0899196212221796e-07, 1.6052983937697718e-06, 0.034685056656599045, 1.5445940562131e-06, 2.7689998205460142e-06, 0.013928545638918877, 2.337736532354029e-06, 1.1914203241758514e-06, 5.180233983992366e-07, 6.665837304353772e-08, 5.048328262091673e-07, 6.450546266023593e-07, 3.1269232181330153e-07, 4.907679596044545e-08, 3.0742671697225887e-07, 2.78665993391769e-07, 4.825975352673595e-08, 9.261745503863494e-07, 0.005373029503971338, 6.61686897274194e-07, 6.082882464397699e-07, 0.012727217748761177, 6.462781243499194e-07]], "pointer": [[0.0, 0.0, 0.001960787456482649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016582608222961426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007584873586893082, 0.0, 0.0, 0.0, 0.9679674506187439, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00043822528095915914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007172853802330792, 0.0, 0.0, 0.0019651511684060097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017331367416772991, 0.0, 0.0, 0.002610365627333522, 0.0]], "target": [0.0]}, "loss": [0.09941081702709198, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def toYAML(', 'self', ',', '**options', ')', ':', '#NEWLINE#', '#INDENT#', '" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=[\'bar\', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            \'{foo: [bar, {lol: true}], hello: 42}\\\\n\'\\n            >>> b.toYAML(default_flow_style=True)\\n            \'{foo: [bar, {lol: true}], hello: 42}\\\\n\'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            \'!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n\'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            \'!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n\'\\n        "', '#NEWLINE#', 'opts', '=', 'dict', '(', 'indent', '=', '4', ',', 'default_flow_style', '=', 'False', ')', '#NEWLINE#', 'opts', '.', 'update', '(', 'options', ')', '#NEWLINE#', 'if', '(', "'Dumper'", 'not in', 'opts', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 'yaml', '.', 'safe_dump', '(', 'self', ',', '**', 'opts', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'return', 'yaml', '.', 'dump', '(', 'self', ',', '**', 'opts', ')']


All attention probs:

[0.01928091049194336, 0.014019256457686424, 0.06787608563899994, 0.01827879436314106, 0.031444791704416275, 0.015425260178744793, 0.013067311607301235, 0.014418569393455982, 0.013476537540555, 0.01722978986799717, 0.016680188477039337, 0.034988973289728165, 0.012660461477935314, 0.010994804091751575, 0.009167784824967384, 0.013963630422949791, 0.008786478079855442, 0.014079594053328037, 0.007784474175423384, 0.011325913481414318, 0.007815147750079632, 0.01020872313529253, 0.006501423195004463, 0.010956563986837864, 0.026984941214323044, 0.006106582470238209, 0.007384634576737881, 0.007551111746579409, 0.02204769290983677, 0.0066513726487755775, 0.008957333862781525, 0.009632198140025139, 0.0074626002460718155, 0.015107626095414162, 0.008561708964407444, 0.03585853800177574, 0.00765340868383646, 0.00867675431072712, 0.010903584770858288, 0.009821487590670586, 0.010617619380354881, 0.013961191289126873, 0.007912015542387962, 0.010552008636295795, 0.0071244193241000175, 0.05659737065434456, 0.007663208991289139, 0.008056425489485264, 0.03269617632031441, 0.007521475665271282, 0.008847072720527649, 0.009487644769251347, 0.015258438885211945, 0.008278707042336464, 0.008419147692620754, 0.008449389599263668, 0.010155615396797657, 0.01397866103798151, 0.0061868177726864815, 0.01103346236050129, 0.010303621180355549, 0.05007744953036308, 0.009269645437598228, 0.0132520766928792, 0.03816743940114975, 0.016339853405952454]


Top-k source tokens:

['self', 'self', 'self', 'opts', 'opts', 'opts', 'opts', '**options', 'opts', 'options']


Top-k attention probs:

[0.06787608563899994, 0.05659737065434456, 0.05007744953036308, 0.03816743940114975, 0.03585853800177574, 0.034988973289728165, 0.03269617632031441, 0.031444791704416275, 0.026984941214323044, 0.02204769290983677]
