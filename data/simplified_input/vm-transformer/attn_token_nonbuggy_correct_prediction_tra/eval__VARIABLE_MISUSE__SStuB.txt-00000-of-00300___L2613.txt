
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def items(", "sanitize", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Return all of the minion's grains\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' grains.items\\n\\n    Sanitized CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' grains.items sanitize=True\\n    \"", "#NEWLINE#", "if", "salt", ".", "utils", ".", "is_true", "(", "sanitize", ")", ":", "#NEWLINE#", "#INDENT#", "out", "=", "dict", "(", "__grains__", ")", "#NEWLINE#", "for", "(", "key", ",", "func", ")", "in", "six", ".", "iteritems", "(", "_SANITIZERS", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "in", "out", ")", ":", "#NEWLINE#", "#INDENT#", "out", "[", "key", "]", "=", "func", "(", "out", "[", "key", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "out", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "__grains__"], "error_location": [0], "repair_targets": [], "repair_candidates": [34, 60, 23, 50, 55, 62, 71, 32, 48, 57, 64, 2, 18], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "saltstack/salt/salt/modules/grains.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2613, "results": {"model": "transformer", "prob": {"loc": [[0.8832764625549316, 1.3933751688455231e-05, 8.570250429329462e-06, 1.5022807531295257e-07, 2.177337705688842e-07, 4.3174921415811696e-08, 6.323628554127936e-08, 8.219972613687787e-08, 7.83317801733574e-08, 3.683079512484255e-07, 2.649272801136249e-07, 1.5109159789972182e-07, 1.59741659899737e-07, 7.463458473466744e-08, 1.2944312288709625e-08, 9.893927455095763e-08, 2.0093640529239565e-08, 1.2677307381636638e-07, 0.00034175324253737926, 3.01684472958641e-08, 1.7626800286052458e-07, 6.507981709091837e-08, 3.0782594251377304e-08, 4.521494076925592e-07, 7.693738268699235e-08, 2.0149675705738446e-08, 2.948450799067359e-07, 9.313180271419697e-06, 2.7629957344288414e-07, 2.0611868478681572e-07, 2.737888564752211e-07, 2.0836415259850583e-08, 3.0901148306838877e-07, 6.484711434495694e-08, 2.6123009320144774e-06, 2.4185018787648005e-07, 3.7837974531385044e-08, 2.2453518155884922e-08, 9.319443705635422e-08, 2.8332630463978603e-08, 1.386460013463875e-07, 6.326889706542715e-05, 2.550521749355994e-08, 4.1225644054065924e-07, 2.5493216071481584e-07, 2.9766016496068914e-07, 1.4695025640776294e-07, 5.27942880523824e-08, 0.010283060371875763, 5.920322792007937e-07, 0.01008555293083191, 3.510385795379989e-07, 6.513647008432599e-07, 5.485982228492503e-07, 1.5510151740727451e-07, 3.880203439621255e-05, 8.82337417351664e-07, 0.014332924969494343, 4.280977350390458e-08, 1.1473195371536349e-07, 6.597106403205544e-05, 6.163892294352991e-07, 0.054681431502103806, 7.967910846673476e-07, 0.010577162727713585, 2.9548237989729387e-07, 8.188742413040018e-07, 1.7231224092029152e-07, 1.1955405909702677e-07, 1.0421128848747685e-07, 9.860877447920302e-09, 0.016156302765011787, 3.2890901024984487e-07, 3.700245940763125e-07, 2.0370168840599945e-06, 7.395951797661837e-07, 1.4431477666221326e-06, 9.545566399538075e-07, 2.037523927356233e-06, 4.2743176891235635e-05]], "pointer": [[0.0, 0.0, 0.29025208950042725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17547456920146942, 0.0, 0.0, 0.0, 0.0, 0.0629584789276123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11832357197999954, 0.0, 0.3001566529273987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.024097520858049393, 0.0, 0.002348188776522875, 0.0, 0.0, 0.0, 0.0, 0.008704999461770058, 0.0, 0.006594307254999876, 0.0, 0.0, 0.005432652309536934, 0.0, 0.0011644281912595034, 0.0, 0.004387303721159697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010521362128201872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.12411705404520035, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def items(', 'sanitize', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    Return all of the minion\'s grains\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \'*\' grains.items\\n\\n    Sanitized CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \'*\' grains.items sanitize=True\\n    "', '#NEWLINE#', 'if', 'salt', '.', 'utils', '.', 'is_true', '(', 'sanitize', ')', ':', '#NEWLINE#', '#INDENT#', 'out', '=', 'dict', '(', '__grains__', ')', '#NEWLINE#', 'for', '(', 'key', ',', 'func', ')', 'in', 'six', '.', 'iteritems', '(', '_SANITIZERS', ')', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'key', 'in', 'out', ')', ':', '#NEWLINE#', '#INDENT#', 'out', '[', 'key', ']', '=', 'func', '(', 'out', '[', 'key', ']', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', 'out', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'return', '__grains__']


All attention probs:

[0.015712423250079155, 0.012703626416623592, 0.03708145394921303, 0.019808193668723106, 0.02089650183916092, 0.013193056918680668, 0.01130436547100544, 0.012382358312606812, 0.012290017679333687, 0.015586274676024914, 0.015328988432884216, 0.014891431666910648, 0.01715988665819168, 0.007402366492897272, 0.008878148160874844, 0.007029308471828699, 0.008233744651079178, 0.008049151860177517, 0.03126392886042595, 0.006584060378372669, 0.00741073302924633, 0.008596024475991726, 0.008144094608724117, 0.026206135749816895, 0.006936594843864441, 0.006592323072254658, 0.005542008206248283, 0.00863368809223175, 0.004985046572983265, 0.008515194989740849, 0.009518058970570564, 0.008346538059413433, 0.030273420736193657, 0.011231373995542526, 0.02493908815085888, 0.013335597701370716, 0.008618231862783432, 0.009205293841660023, 0.0051566725596785545, 0.006405968684703112, 0.005701866932213306, 0.01549608912318945, 0.00778292678296566, 0.00672090845182538, 0.007440042681992054, 0.007630027364939451, 0.008000543341040611, 0.005295492243021727, 0.03156602010130882, 0.006067429203540087, 0.02935715764760971, 0.005143559072166681, 0.005066166166216135, 0.006055529695004225, 0.007057777140289545, 0.021327896043658257, 0.007798311300575733, 0.021966654807329178, 0.005416784901171923, 0.0062413872219622135, 0.021053913980722427, 0.005945585202425718, 0.03300408273935318, 0.007389809470623732, 0.021395768970251083, 0.009444599971175194, 0.00890978891402483, 0.01206577941775322, 0.00989410001784563, 0.0098181227222085, 0.0117895333096385, 0.031292106956243515, 0.010089733637869358, 0.009372981265187263, 0.017941895872354507, 0.007806007284671068, 0.009613214060664177, 0.008657014928758144, 0.011460958980023861, 0.011551056988537312]


Top-k source tokens:

['sanitize', 'out', 'key', 'out', 'sanitize', 'key', 'out', 'out', 'func', 'key']


Top-k attention probs:

[0.03708145394921303, 0.03300408273935318, 0.03156602010130882, 0.031292106956243515, 0.03126392886042595, 0.030273420736193657, 0.02935715764760971, 0.026206135749816895, 0.02493908815085888, 0.021966654807329178]
