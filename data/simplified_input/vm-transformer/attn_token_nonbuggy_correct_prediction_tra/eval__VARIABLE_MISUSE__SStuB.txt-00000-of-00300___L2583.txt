
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def crossover_template(", "cls", ",", "length", ",", "points", "=", "2", ")", ":", "#NEWLINE#", "#INDENT#", "'Create a crossover template with the given number of points. The\\n        crossover template can be used as a mask to crossover two\\n        bitstrings of the same length.\\n\\n        Usage:\\n            assert len(parent1) == len(parent2)\\n            template = BitString.crossover_template(len(parent1))\\n            inv_template = ~template\\n            child1 = (parent1 & template) | (parent2 & inv_template)\\n            child2 = (parent1 & inv_template) | (parent2 & template)\\n\\n        Arguments:\\n            length: An int, indicating the desired length of the result.\\n            points: An int, the number of crossover points.\\n        Return:\\n            A BitString instance of the requested length which can be used\\n            as a crossover template.\\n        '", "#NEWLINE#", "assert", "(", "isinstance", "(", "length", ",", "int", ")", "and", "(", "length", ">=", "0", ")", ")", "#NEWLINE#", "assert", "(", "isinstance", "(", "points", ",", "int", ")", "and", "(", "points", ">=", "0", ")", ")", "#NEWLINE#", "points", "=", "random", ".", "sample", "(", "range", "(", "(", "length", "+", "1", ")", ")", ",", "points", ")", "#NEWLINE#", "points", ".", "sort", "(", ")", "#NEWLINE#", "points", ".", "append", "(", "length", ")", "#NEWLINE#", "previous", "=", "0", "#NEWLINE#", "include_range", "=", "bool", "(", "random", ".", "randrange", "(", "2", ")", ")", "#NEWLINE#", "pieces", "=", "[", "]", "#NEWLINE#", "for", "point", "in", "points", ":", "#NEWLINE#", "#INDENT#", "if", "(", "point", ">", "previous", ")", ":", "#NEWLINE#", "#INDENT#", "fill", "=", "(", "numpy", ".", "ones", "if", "include_range", "else", "numpy", ".", "zeros", ")", "#NEWLINE#", "pieces", ".", "append", "(", "fill", "(", "(", "point", "-", "previous", ")", ",", "dtype", "=", "bool", ")", ")", "#NEWLINE#", "#UNINDENT#", "include_range", "=", "(", "not", "include_range", ")", "#NEWLINE#", "previous", "=", "point", "#NEWLINE#", "#UNINDENT#", "bits", "=", "numpy", ".", "concatenate", "(", "pieces", ")", "#NEWLINE#", "bits", ".", "flags", ".", "writeable", "=", "False", "#NEWLINE#", "return", "cls", "(", "bits", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [118, 136, 97, 132, 169, 103, 111, 139, 160, 163, 172, 183, 5, 181, 85, 125, 151, 155, 7, 22, 28, 59, 78, 9, 38, 44, 50, 65, 68, 74, 105, 81, 113, 141, 158], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "hosford42/xcs/xcs/_numpy_bitstrings.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2583, "results": {"model": "transformer", "prob": {"loc": [[0.5766087770462036, 3.978675977123203e-06, 8.068255397120083e-08, 1.2783920055881026e-07, 7.920615985312907e-07, 1.2749228517350275e-06, 4.7085958243542336e-08, 2.1286975879775127e-06, 4.6833019240466456e-08, 1.4554772178598796e-06, 2.1123686622104287e-07, 3.423597718210658e-06, 4.4322518988337833e-08, 9.088477526120187e-08, 1.670552762789157e-07, 1.578868449314541e-07, 5.637981530526304e-07, 2.450698843858845e-07, 9.181921001299997e-08, 4.995457558720773e-08, 1.2504537494351098e-07, 3.026849810794374e-07, 0.0030030477792024612, 2.4489139605066157e-07, 7.199121682788245e-06, 7.364088361327958e-08, 2.0664960231897567e-07, 1.4694093408706976e-07, 0.0038754253182560205, 1.9990085320387152e-07, 2.809479155985173e-06, 1.0593331722930088e-07, 9.57851327143544e-08, 2.0813853041090624e-07, 5.351315124357825e-08, 4.354540195095069e-08, 1.527527331290912e-07, 3.4143553762078227e-07, 0.10946163535118103, 1.7036443011875235e-07, 8.199292096833233e-06, 5.467090957722576e-08, 4.3469992760947207e-07, 2.538543810715055e-07, 0.07937698066234589, 6.789206850044138e-07, 2.8102078886149684e-06, 3.3228988627342915e-07, 2.2292641688181902e-07, 2.4608257831459923e-07, 1.7368092812830582e-06, 4.450142299106119e-08, 6.43600117200549e-07, 1.3323609948656667e-07, 1.4764610511974752e-07, 1.1819721379424664e-07, 2.6291470476280665e-06, 5.069880444352748e-07, 7.426254455822345e-07, 0.006134111899882555, 2.1600216371098213e-07, 3.8133448470034637e-06, 8.634160053588857e-08, 5.378339196226989e-08, 8.589285727111928e-08, 0.017760325223207474, 7.2544004581232e-08, 8.727359812610302e-08, 3.5762485595114413e-07, 6.929912643727221e-08, 5.339908852874942e-07, 2.261172767248354e-06, 1.060702516042511e-06, 1.5580263834635844e-07, 6.482744083768921e-07, 1.2678604832672136e-07, 4.811889198208519e-08, 3.013037144228292e-07, 0.00321220769546926, 8.120814527501352e-07, 2.727894354848104e-07, 1.774182010194636e-06, 2.4657450126142066e-07, 7.924850251583848e-06, 1.4744290410817484e-07, 9.375389709020965e-07, 2.7209520681026333e-07, 1.3294010159370373e-07, 4.968559323970112e-07, 2.1390660549513996e-06, 3.9442340948880883e-07, 5.21826706290085e-08, 3.340871046475513e-07, 0.000389081978937611, 5.205982347433746e-07, 5.066303856438026e-07, 5.055637188888795e-07, 8.62106116983341e-06, 8.111835541058099e-07, 9.566874723532237e-06, 9.98142127173196e-07, 1.272172994504217e-06, 3.035512463611667e-06, 6.0631846281467006e-05, 3.4367400303381146e-07, 0.005433664191514254, 7.847466463317687e-07, 7.215146524686133e-07, 5.003623186894401e-07, 3.7216619830360287e-07, 4.047670358886535e-07, 0.013851468451321125, 9.727373253554106e-07, 0.043080274015665054, 4.0656283317730413e-07, 1.1132519830425736e-06, 6.060021746634447e-07, 2.5597913122510363e-07, 4.320566404203419e-06, 2.1229753599527612e-07, 2.7645943191600963e-05, 0.00022879645985085517, 1.5169913467616425e-06, 5.963532885289169e-07, 1.2440881391739822e-06, 0.0036709795240312815, 3.948903668060666e-06, 7.899328920757398e-05, 1.52582890677877e-06, 3.1939220207277685e-05, 1.3607069604404387e-06, 7.975950779837149e-07, 1.708972831693245e-06, 1.3545407284709654e-07, 6.894592985418058e-08, 2.0688858626272122e-07, 1.239536504726857e-05, 8.554285386708216e-07, 1.213249333886779e-06, 0.024990154430270195, 4.100541275420255e-07, 0.0393858440220356, 6.27754104698397e-07, 2.3458801479137037e-07, 2.4850223212524725e-07, 1.8209973404736957e-06, 0.0012256769696250558, 7.022860017968924e-07, 8.238941973104374e-07, 9.179701692119124e-07, 5.175764954401529e-07, 1.99550845536578e-06, 1.2069891397459287e-07, 4.805005573871313e-06, 2.0984232378395973e-06, 0.0010291743092238903, 1.944254790942068e-06, 9.091428978535987e-07, 2.0178847989882343e-05, 1.0178403044847073e-06, 0.05497139319777489, 1.0545819577600923e-06, 9.00055454167159e-07, 2.924886075561517e-06, 1.1476033279222975e-07, 6.34558148249198e-07, 4.950727543473477e-07, 1.1267275112913921e-07, 1.3576401443060604e-06, 0.009368888102471828, 3.3320939110126346e-06, 2.26848851525574e-06, 8.102635911200196e-05, 1.0336993909731973e-06, 4.821372385777067e-07, 1.0931044016615488e-06, 7.789537903590826e-07, 8.540277121937834e-06, 9.166684321826324e-05, 9.376248044645763e-07, 1.5355750804246782e-07, 2.1945876142126508e-05, 4.253517545294017e-06, 0.0023391449358314276, 1.5144356666496606e-06]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0007636672235094011, 0.0, 0.14973068237304688, 0.0, 0.06778481602668762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05148826539516449, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03387231007218361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008788793347775936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00962734967470169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016831303015351295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03930051252245903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021987545769661665, 0.0, 0.0, 0.010025640949606895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01590392179787159, 0.0, 0.0, 0.0, 0.004068639129400253, 0.0, 0.0, 0.02938276156783104, 0.0, 0.0, 0.0, 0.18259410560131073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017212972044944763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04413526877760887, 0.0, 0.00014384579844772816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004876461811363697, 0.0, 0.00012556168076116592, 0.0, 0.0, 0.0, 0.0, 0.22194470465183258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004310285672545433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01419948972761631, 0.0, 0.0, 0.0, 0.0010182705009356141, 0.0, 0.0, 0.0005672963452525437, 0.0, 0.00041686402983032167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04213804006576538, 0.0, 0.0, 0.0, 0.0007414575084112585, 0.0, 0.0, 0.02026064693927765, 0.0, 0.00012188049731776118, 0.0, 0.0, 0.004201503470540047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00019023253116756678, 0.0, 0.0, 0.00034674149355851114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00036550150252878666, 0.0, 0.0003214665048290044, 0.0]], "target": [0.0]}, "loss": [0.5505911707878113, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', '@', 'classmethod', '#NEWLINE#', 'def crossover_template(', 'cls', ',', 'length', ',', 'points', '=', '2', ')', ':', '#NEWLINE#', '#INDENT#', "'Create a crossover template with the given number of points. The\\n        crossover template can be used as a mask to crossover two\\n        bitstrings of the same length.\\n\\n        Usage:\\n            assert len(parent1) == len(parent2)\\n            template = BitString.crossover_template(len(parent1))\\n            inv_template = ~template\\n            child1 = (parent1 & template) | (parent2 & inv_template)\\n            child2 = (parent1 & inv_template) | (parent2 & template)\\n\\n        Arguments:\\n            length: An int, indicating the desired length of the result.\\n            points: An int, the number of crossover points.\\n        Return:\\n            A BitString instance of the requested length which can be used\\n            as a crossover template.\\n        '", '#NEWLINE#', 'assert', '(', 'isinstance', '(', 'length', ',', 'int', ')', 'and', '(', 'length', '>=', '0', ')', ')', '#NEWLINE#', 'assert', '(', 'isinstance', '(', 'points', ',', 'int', ')', 'and', '(', 'points', '>=', '0', ')', ')', '#NEWLINE#', 'points', '=', 'random', '.', 'sample', '(', 'range', '(', '(', 'length', '+', '1', ')', ')', ',', 'points', ')', '#NEWLINE#', 'points', '.', 'sort', '(', ')', '#NEWLINE#', 'points', '.', 'append', '(', 'length', ')', '#NEWLINE#', 'previous', '=', '0', '#NEWLINE#', 'include_range', '=', 'bool', '(', 'random', '.', 'randrange', '(', '2', ')', ')', '#NEWLINE#', 'pieces', '=', '[', ']', '#NEWLINE#', 'for', 'point', 'in', 'points', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'point', '>', 'previous', ')', ':', '#NEWLINE#', '#INDENT#', 'fill', '=', '(', 'numpy', '.', 'ones', 'if', 'include_range', 'else', 'numpy', '.', 'zeros', ')', '#NEWLINE#', 'pieces', '.', 'append', '(', 'fill', '(', '(', 'point', '-', 'previous', ')', ',', 'dtype', '=', 'bool', ')', ')', '#NEWLINE#', '#UNINDENT#', 'include_range', '=', '(', 'not', 'include_range', ')', '#NEWLINE#', 'previous', '=', 'point', '#NEWLINE#', '#UNINDENT#', 'bits', '=', 'numpy', '.', 'concatenate', '(', 'pieces', ')', '#NEWLINE#', 'bits', '.', 'flags', '.', 'writeable', '=', 'False', '#NEWLINE#', 'return', 'cls', '(', 'bits', ')']


All attention probs:

[0.00893452763557434, 0.008584616705775261, 0.014890069141983986, 0.010842260904610157, 0.007275423966348171, 0.026607977226376534, 0.007125705014914274, 0.01335607934743166, 0.007030500564724207, 0.01572226546704769, 0.007288274820894003, 0.015237966552376747, 0.005972645711153746, 0.005451695993542671, 0.005944236647337675, 0.006101550068706274, 0.008986705914139748, 0.006326811388134956, 0.006045408546924591, 0.0055577452294528484, 0.006042812950909138, 0.004890842363238335, 0.014329841360449791, 0.004597713705152273, 0.007280380465090275, 0.0033090051729232073, 0.0037859478034079075, 0.002758627524599433, 0.00999885331839323, 0.003061571391299367, 0.0046439641155302525, 0.0029606318566948175, 0.0031329214107245207, 0.004362788517028093, 0.0046256487257778645, 0.002833110047504306, 0.004172130022197962, 0.00361580029129982, 0.01634683646261692, 0.003622916294261813, 0.005412291269749403, 0.002551184967160225, 0.004496225621551275, 0.0027899141423404217, 0.017992837354540825, 0.0028243474662303925, 0.003613835433498025, 0.0023352005518972874, 0.0023560018744319677, 0.0043460167944431305, 0.009377754293382168, 0.0030305960681289434, 0.005248371046036482, 0.002136815106496215, 0.002543193055316806, 0.002418320858851075, 0.0029797011520713568, 0.0024304785765707493, 0.002500660717487335, 0.011576414108276367, 0.0026843114756047726, 0.004322233144193888, 0.0023121675476431847, 0.002184899291023612, 0.0024773001205176115, 0.02019946277141571, 0.0031388297211378813, 0.004596815910190344, 0.005754576530307531, 0.002284312853589654, 0.003031729953363538, 0.003485172288492322, 0.0030505957547575235, 0.0038031251169741154, 0.009074307978153229, 0.001689256401732564, 0.0023927849251776934, 0.0026451090816408396, 0.011423162184655666, 0.0020712758414447308, 0.0035543597768992186, 0.006965096574276686, 0.002527214353904128, 0.004300785716623068, 0.0031742716673761606, 0.00938017200678587, 0.0037255214992910624, 0.0027853085193783045, 0.003290241351351142, 0.00392360333353281, 0.001849076128564775, 0.002329884795472026, 0.002358250552788377, 0.006505736615508795, 0.001955309882760048, 0.0018626698292791843, 0.003629806451499462, 0.008056720718741417, 0.004406692925840616, 0.002978242700919509, 0.0024898021947592497, 0.003438025014474988, 0.0033123919274657965, 0.017370745539665222, 0.004770242143422365, 0.01485809963196516, 0.002198535483330488, 0.0026281592436134815, 0.0023955979850143194, 0.003459080820903182, 0.002589740324765444, 0.013864366337656975, 0.0027759696822613478, 0.012916605919599533, 0.0018762240651994944, 0.0019719921983778477, 0.0026630673091858625, 0.002692872192710638, 0.006769323721528053, 0.002103690057992935, 0.0029494832269847393, 0.004575986415147781, 0.00224210973829031, 0.002496813191100955, 0.0031492491252720356, 0.010587304830551147, 0.00274815340526402, 0.0036060737911611795, 0.002042604610323906, 0.0030919513665139675, 0.0018695646431297064, 0.0038932859897613525, 0.013215729966759682, 0.0014394938480108976, 0.0017744802171364427, 0.002040727296844125, 0.005257167853415012, 0.002026235219091177, 0.0021534583065658808, 0.015492457896471024, 0.0022729409392923117, 0.013670450076460838, 0.0015566389774903655, 0.0018181035993620753, 0.004662629682570696, 0.0022696838714182377, 0.005032927263528109, 0.0018291204469278455, 0.0016927437391132116, 0.0031812330707907677, 0.0031008024234324694, 0.009884040802717209, 0.004647275432944298, 0.004694508854299784, 0.005649115424603224, 0.012003093026578426, 0.0038421382196247578, 0.004715166985988617, 0.008588150143623352, 0.004496253561228514, 0.01895158737897873, 0.003785564564168453, 0.00350775383412838, 0.013584531843662262, 0.0035123128909617662, 0.0029763870406895876, 0.0018311550375074148, 0.0023749941028654575, 0.0026951085310429335, 0.015437421388924122, 0.0017915895441547036, 0.0038016773760318756, 0.007444350980222225, 0.0021400710102170706, 0.004661783576011658, 0.0020832866430282593, 0.0034340526908636093, 0.0030168250668793917, 0.004204916302114725, 0.003700978122651577, 0.004277110565453768, 0.00951800961047411, 0.0033826755825430155, 0.011981658637523651, 0.0037049525417387486]


Top-k source tokens:

['cls', 'points', 'point', 'points', 'point', 'points', 'points', 'point', 'pieces', '2']


Top-k attention probs:

[0.026607977226376534, 0.02019946277141571, 0.01895158737897873, 0.017992837354540825, 0.017370745539665222, 0.01634683646261692, 0.01572226546704769, 0.015492457896471024, 0.015437421388924122, 0.015237966552376747]
