
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def smart_str(", "s", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'strict'", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Returns a bytestring version of 's', encoded as specified in 'encoding'.\\n    Borrowed and simplified for this purpose from `django.utils.encoding`.\\n    \"", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "s", ",", "basestring", ")", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "str", "(", "s", ")", "#NEWLINE#", "#UNINDENT#", "except", "UnicodeEncodeError", ":", "#NEWLINE#", "#INDENT#", "return", "unicode", "(", "s", ")", ".", "encode", "(", "encoding", ",", "errors", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "s", ",", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "return", "s", ".", "encode", "(", "encoding", ",", "errors", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "s", "and", "(", "encoding", "!=", "'utf-8'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "s", ".", "decode", "(", "'utf-8'", ",", "errors", ")", ".", "encode", "(", "encoding", ",", "errors", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "s"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 54, 80, 95, 115, 8, 56, 82, 110, 117, 2, 22, 37, 49, 68, 76, 92, 104, 126], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "lethain/lifeflow/markdown/mdx_foreign_formats.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1326, "results": {"model": "transformer", "prob": {"loc": [[0.8338173627853394, 3.3295864341198467e-06, 3.940661201795592e-07, 1.1715818004631728e-07, 8.430455636698753e-06, 3.738115879059478e-07, 4.0702587966734427e-07, 1.3146144794973225e-07, 3.7226564018055797e-06, 9.078274274543219e-07, 3.2371635825256817e-06, 7.852437988731253e-08, 4.3279945316498925e-07, 7.912248065622407e-07, 6.365181093315186e-07, 1.8230782643513521e-06, 1.4360431350723957e-06, 8.520071332895895e-07, 1.3279719723868766e-06, 1.9257602161815157e-06, 2.1619662504690496e-07, 1.2583998341142433e-06, 0.0030010880436748266, 1.135523689299589e-06, 2.648291683726711e-06, 2.844524829015427e-07, 2.040644346834597e-07, 8.775718356446305e-07, 4.6425159894170065e-07, 3.2037470987233974e-07, 5.322020797393634e-07, 8.475304866806255e-07, 5.669121492246632e-07, 3.0845180276628525e-07, 1.2297806506467168e-07, 3.5270385723151776e-08, 1.3474779052558006e-06, 0.0010793304536491632, 1.185969381367613e-06, 1.401798158440215e-06, 5.958902988822956e-07, 3.576576546038268e-06, 7.013554181867221e-07, 1.1632880614342866e-06, 1.151071614913235e-06, 5.614573979073612e-07, 2.815474147155328e-07, 2.8200460633343027e-08, 2.08061848638863e-07, 2.0507715817075223e-05, 6.422547471629514e-07, 4.2107160425075563e-07, 1.8341512486585998e-07, 9.922989647748182e-07, 0.008453740738332272, 5.470210453495383e-07, 0.005016467534005642, 3.4428285289322957e-06, 6.056322376934986e-07, 5.492657351169328e-07, 5.01038243783114e-07, 1.1839759963550023e-06, 6.76763932005997e-07, 8.207781547753257e-07, 6.537825356645044e-07, 6.782759669476945e-07, 3.5342864634912985e-07, 1.1279296359134605e-06, 0.0035454845055937767, 1.433313400411862e-06, 3.281381395936478e-06, 2.5758842525647196e-07, 2.7200621843803674e-06, 1.6637210364933708e-06, 9.615068847779185e-07, 3.7180208778408996e-07, 9.345263407567472e-08, 3.147653160340269e-07, 2.557242737566412e-07, 9.792261153052095e-07, 0.011355942115187645, 1.594514969838201e-06, 0.006547160446643829, 4.901372903987067e-06, 2.405435452601523e-06, 4.7236008526851947e-07, 1.642318125050224e-06, 6.728563448632485e-07, 5.185002009966411e-07, 3.5245992080490396e-07, 6.862830446152657e-07, 1.6890982806216925e-05, 0.03553580865263939, 1.8396351606497774e-06, 5.166344294593728e-07, 0.0439024493098259, 6.890636541356798e-07, 3.9286500395974144e-05, 3.8656139622617047e-07, 2.1689260165658197e-07, 1.2887604725619894e-06, 7.299692583728756e-07, 4.884012696493301e-07, 1.8136645962840703e-07, 7.219837812044716e-07, 3.0909137649359764e-07, 1.4291470051830402e-07, 1.5300497580028605e-06, 0.00024957317509688437, 5.613920848190901e-07, 8.117435936583206e-05, 5.474918225445435e-07, 3.2779956882222905e-07, 1.4652192703579203e-07, 1.723230298011913e-06, 0.010976032353937626, 4.3986244691041065e-07, 0.015893809497356415, 4.4810039980802685e-06, 4.464502012524463e-07, 4.007140148587496e-07, 4.036266147977585e-07, 7.400121262435277e-07, 7.187946380327048e-07, 4.480856432564906e-07, 2.623814623348153e-07, 0.02035565674304962]], "pointer": [[0.0, 0.0, 0.1794867217540741, 0.0, 0.2343817502260208, 0.0, 0.0, 0.0, 0.48368242383003235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0037159298080950975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017973945941776037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004126425366848707, 0.0, 0.0, 0.0, 0.0, 0.013234969228506088, 0.0, 0.00853424146771431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011680882424116135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004374075680971146, 0.0, 0.0, 0.0, 0.005015964154154062, 0.0, 0.008287292905151844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00045367199345491827, 0.0, 0.0, 0.00011158519919263199, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006405545398592949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029674949124455452, 0.0, 0.0, 0.0, 0.0, 0.001381965703330934, 0.0, 0.003358200890943408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002960067067760974]], "target": [0.0]}, "loss": [0.18174058198928833, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def smart_str(', 's', ',', 'encoding', '=', "'utf-8'", ',', 'errors', '=', "'strict'", ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    Returns a bytestring version of \'s\', encoded as specified in \'encoding\'.\\n    Borrowed and simplified for this purpose from `django.utils.encoding`.\\n    "', '#NEWLINE#', 'if', '(', 'not', 'isinstance', '(', 's', ',', 'basestring', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'try', ':', '#NEWLINE#', '#INDENT#', 'return', 'str', '(', 's', ')', '#NEWLINE#', '#UNINDENT#', 'except', 'UnicodeEncodeError', ':', '#NEWLINE#', '#INDENT#', 'return', 'unicode', '(', 's', ')', '.', 'encode', '(', 'encoding', ',', 'errors', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', 'isinstance', '(', 's', ',', 'unicode', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 's', '.', 'encode', '(', 'encoding', ',', 'errors', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 's', 'and', '(', 'encoding', '!=', "'utf-8'", ')', ')', ':', '#NEWLINE#', '#INDENT#', 'return', 's', '.', 'decode', '(', "'utf-8'", ',', 'errors', ')', '.', 'encode', '(', 'encoding', ',', 'errors', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'return', 's']


All attention probs:

[0.011474606581032276, 0.008390462026000023, 0.031064577400684357, 0.013837013393640518, 0.033857159316539764, 0.01154077798128128, 0.008719041012227535, 0.00804164633154869, 0.028531424701213837, 0.008739850483834743, 0.014545302838087082, 0.008409337140619755, 0.00843487773090601, 0.009040202014148235, 0.008100802078843117, 0.008357289247214794, 0.00897033978253603, 0.008974737487733364, 0.009169003926217556, 0.0073832375928759575, 0.0064233094453811646, 0.005827146582305431, 0.019329702481627464, 0.005586274899542332, 0.009171689860522747, 0.004246481228619814, 0.003620556555688381, 0.004570316057652235, 0.005042686127126217, 0.005468293558806181, 0.005781430285423994, 0.005416835658252239, 0.005767895374447107, 0.005293698515743017, 0.006769402418285608, 0.006812320090830326, 0.00454053794965148, 0.014893109910190105, 0.003919635899364948, 0.006036427803337574, 0.005792822223156691, 0.01038700807839632, 0.011727238073945045, 0.005497477483004332, 0.005294739734381437, 0.0049533117562532425, 0.005608704406768084, 0.0036821402609348297, 0.003858740907162428, 0.008828948251903057, 0.003729581832885742, 0.0026548069436103106, 0.004428626969456673, 0.0034010212402790785, 0.015712130814790726, 0.0035307209473103285, 0.020879480987787247, 0.0031516458839178085, 0.004319473169744015, 0.004341604188084602, 0.004823149181902409, 0.012079747393727303, 0.004067127592861652, 0.0038204884622246027, 0.004002575296908617, 0.005419015418738127, 0.0038654496893286705, 0.0038917080964893103, 0.01249567698687315, 0.00451365951448679, 0.007500834297388792, 0.003926568198949099, 0.0038931388407945633, 0.005079841241240501, 0.004480020143091679, 0.005375625565648079, 0.00891457311809063, 0.0023838484194129705, 0.003435856429859996, 0.003465512068942189, 0.017928479239344597, 0.003318922361359, 0.020989179611206055, 0.002825537696480751, 0.004697580821812153, 0.005467044189572334, 0.013306555338203907, 0.005338683724403381, 0.004911946598440409, 0.0043485150672495365, 0.005515256430953741, 0.004076776560395956, 0.0168833676725626, 0.004464880563318729, 0.003102807328104973, 0.02460336871445179, 0.005735110957175493, 0.006573797203600407, 0.0056774308905005455, 0.005009578540921211, 0.005453080870211124, 0.005805266555398703, 0.005817068740725517, 0.008197473362088203, 0.009981261566281319, 0.002864756854251027, 0.003920604940503836, 0.00365203688852489, 0.00539522897452116, 0.003487090114504099, 0.016969723626971245, 0.00478134211152792, 0.0031669680029153824, 0.005038428120315075, 0.004064158070832491, 0.019830375909805298, 0.003264162689447403, 0.021985694766044617, 0.003361108712852001, 0.005265299696475267, 0.005516059696674347, 0.008996671065688133, 0.005614843685179949, 0.005791662726551294, 0.006369974929839373, 0.011190162971615791, 0.020130598917603493]


Top-k source tokens:

['encoding', 's', 'errors', 'encoding', 'errors', 'errors', 'errors', 's', 'encoding', 's']


Top-k attention probs:

[0.033857159316539764, 0.031064577400684357, 0.028531424701213837, 0.02460336871445179, 0.021985694766044617, 0.020989179611206055, 0.020879480987787247, 0.020130598917603493, 0.019830375909805298, 0.019329702481627464]
