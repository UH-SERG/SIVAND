
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "cache_name", ",", "clock", ",", "max_len", "=", "0", ",", "expiry_ms", "=", "0", ",", "reset_expiry_on_get", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Args:\\n            cache_name (str): Name of this cache, used for logging.\\n            clock (Clock)\\n            max_len (int): Max size of dict. If the dict grows larger than this\\n                then the oldest items get automatically evicted. Default is 0,\\n                which indicates there is no max limit.\\n            expiry_ms (int): How long before an item is evicted from the cache\\n                in milliseconds. Default is 0, indicating items never get\\n                evicted based on time.\\n            reset_expiry_on_get (bool): If true, will reset the expiry time for\\n                an item on access. Defaults to False.\\n\\n        '", "#NEWLINE#", "self", ".", "_cache_name", "=", "cache_name", "#NEWLINE#", "self", ".", "_clock", "=", "clock", "#NEWLINE#", "self", ".", "_max_len", "=", "max_len", "#NEWLINE#", "self", ".", "_expiry_ms", "=", "expiry_ms", "#NEWLINE#", "self", ".", "_reset_expiry_on_get", "=", "reset_expiry_on_get", "#NEWLINE#", "self", ".", "_cache", "=", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "caches_by_name", "[", "cache_name", "]", "=", "self", ".", "_cache"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 29, 68, 6, 35, 2, 25, 31, 37, 43, 49, 55, 71, 16, 53, 8, 41, 12, 47], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "matrix-org/synapse/synapse/util/caches/expiringcache.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2002, "results": {"model": "transformer", "prob": {"loc": [[0.9273837804794312, 5.204584340390284e-06, 9.512740462014335e-08, 1.0698256147634311e-07, 8.878546964297129e-07, 8.457579525611436e-08, 1.4113157931205933e-06, 3.970518136497958e-08, 7.88843408372486e-07, 2.490067743110558e-07, 1.1831425439368104e-07, 3.3351419403970795e-08, 3.0333330869325437e-06, 4.608722292687162e-07, 1.6343616948688577e-07, 8.173432775038236e-08, 1.449927140129148e-06, 2.559449114869494e-07, 3.523215355016873e-07, 4.2565439173358754e-08, 2.9903023346378177e-07, 5.543462293644552e-07, 2.1752795476004394e-07, 1.4788598718951107e-06, 2.433494614706433e-07, 4.35276703569798e-08, 5.467543928716623e-08, 1.4640721524017408e-08, 1.8823178038473998e-07, 0.0012726226123049855, 4.6860338898113696e-07, 3.908938595031941e-08, 4.948123333292642e-08, 1.490538359405491e-08, 5.426493316917913e-07, 8.159512799466029e-05, 3.563087318525504e-07, 6.988308598465665e-08, 8.052104760736256e-08, 3.084672783870701e-08, 4.2898406604763295e-07, 0.0006590288248844445, 5.476387059388799e-07, 5.966549565528112e-08, 8.517493910176199e-08, 6.208038971777796e-09, 1.1328203441962614e-07, 5.753578807343729e-05, 2.124811317116837e-06, 2.4891608063626336e-07, 2.01009413558495e-07, 9.491933639083072e-08, 1.417337500697613e-07, 8.899546082830057e-05, 1.4647480384155642e-06, 4.293204654004512e-07, 2.303070374409799e-07, 4.049949353657212e-08, 7.422981980198529e-07, 4.939173595630564e-05, 2.7473170121083967e-06, 1.3535599237002316e-06, 1.127614950746647e-06, 7.915276114545122e-07, 9.649896810515202e-07, 3.6975234252167866e-07, 1.4971559494370013e-06, 9.303000325644462e-08, 0.0701112449169159, 9.558993241398639e-08, 1.431724143685642e-07, 0.00025961711071431637, 2.3127789461341308e-07, 2.279925581660791e-07]], "pointer": [[0.0, 0.0, 0.0041585648432374, 0.0, 0.06591763347387314, 0.0, 0.3577040433883667, 0.0, 0.22364749014377594, 0.0, 0.0, 0.0, 0.26360705494880676, 0.0, 0.0, 0.0, 0.05058933421969414, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003564301412552595, 0.0, 0.0, 0.0, 1.9658200471894816e-05, 0.0, 0.0039667836390435696, 0.0, 0.0, 0.0, 2.0921257601003163e-05, 0.0, 0.006309791002422571, 0.0, 0.0, 0.0, 1.8141417967854068e-06, 0.0, 0.004732977598905563, 0.0, 0.0, 0.0, 1.6009829778340645e-05, 0.0, 0.011284655891358852, 0.0, 0.0, 0.0, 2.616591882542707e-05, 0.0, 0.0034658988006412983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00045751151628792286, 0.0, 0.0, 0.0005093907238915563, 0.0, 0.0]], "target": [0.0]}, "loss": [0.07538771629333496, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def __init__(', 'self', ',', 'cache_name', ',', 'clock', ',', 'max_len', '=', '0', ',', 'expiry_ms', '=', '0', ',', 'reset_expiry_on_get', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Args:\\n            cache_name (str): Name of this cache, used for logging.\\n            clock (Clock)\\n            max_len (int): Max size of dict. If the dict grows larger than this\\n                then the oldest items get automatically evicted. Default is 0,\\n                which indicates there is no max limit.\\n            expiry_ms (int): How long before an item is evicted from the cache\\n                in milliseconds. Default is 0, indicating items never get\\n                evicted based on time.\\n            reset_expiry_on_get (bool): If true, will reset the expiry time for\\n                an item on access. Defaults to False.\\n\\n        '", '#NEWLINE#', 'self', '.', '_cache_name', '=', 'cache_name', '#NEWLINE#', 'self', '.', '_clock', '=', 'clock', '#NEWLINE#', 'self', '.', '_max_len', '=', 'max_len', '#NEWLINE#', 'self', '.', '_expiry_ms', '=', 'expiry_ms', '#NEWLINE#', 'self', '.', '_reset_expiry_on_get', '=', 'reset_expiry_on_get', '#NEWLINE#', 'self', '.', '_cache', '=', '{', '#NEWLINE#', '#INDENT#', '#NEWLINE#', '#UNINDENT#', '}', '#NEWLINE#', 'caches_by_name', '[', 'cache_name', ']', '=', 'self', '.', '_cache']


All attention probs:

[0.0162271186709404, 0.013125172816216946, 0.03298291563987732, 0.018297389149665833, 0.02601895108819008, 0.014336916618049145, 0.0364631824195385, 0.012617074884474277, 0.03200840577483177, 0.012632321566343307, 0.0161592997610569, 0.015468036755919456, 0.03817063570022583, 0.010577958077192307, 0.01205061562359333, 0.009890444576740265, 0.03126944601535797, 0.01039035338908434, 0.009527050890028477, 0.007230242248624563, 0.008535964414477348, 0.009097741916775703, 0.00829388853162527, 0.009043027646839619, 0.008841179311275482, 0.013620041310787201, 0.0044644540175795555, 0.00814035627990961, 0.0069518121890723705, 0.028908636420965195, 0.008520479314029217, 0.013580608181655407, 0.005831331945955753, 0.009149882011115551, 0.006565770599991083, 0.025928441435098648, 0.00914998073130846, 0.013217293657362461, 0.005309654865413904, 0.009846820496022701, 0.006588209420442581, 0.030303258448839188, 0.010722436010837555, 0.01704220287501812, 0.005032749846577644, 0.009874478913843632, 0.006420702673494816, 0.026615114882588387, 0.008646443486213684, 0.011449330486357212, 0.004559092689305544, 0.010133652947843075, 0.005739258136600256, 0.025946682319045067, 0.007784795016050339, 0.013711641542613506, 0.003895085072144866, 0.00708196172490716, 0.006245428696274757, 0.008803373202681541, 0.008161315694451332, 0.006936630234122276, 0.0075209252536296844, 0.00815943069756031, 0.008654932491481304, 0.011968902312219143, 0.02544819749891758, 0.012602153234183788, 0.03617199882864952, 0.008561601862311363, 0.008967570029199123, 0.02282612770795822, 0.008389461785554886, 0.010593966580927372]


Top-k source tokens:

['expiry_ms', 'clock', 'cache_name', 'self', 'max_len', 'reset_expiry_on_get', 'max_len', 'cache_name', 'expiry_ms', 'cache_name']


Top-k attention probs:

[0.03817063570022583, 0.0364631824195385, 0.03617199882864952, 0.03298291563987732, 0.03200840577483177, 0.03126944601535797, 0.030303258448839188, 0.028908636420965195, 0.026615114882588387, 0.02601895108819008]
