
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def toarray(", "table", ",", "dtype", "=", "None", ",", "count", "=", "(", "-", "1", ")", ",", "sample", "=", "1000", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Load data from the given `table` into a\\n    `numpy <http://www.numpy.org/>`_ structured array. E.g.::\\n\\n        >>> import petl as etl\\n        >>> table = [('foo', 'bar', 'baz'),\\n        ...          ('apples', 1, 2.5),\\n        ...          ('oranges', 3, 4.4),\\n        ...          ('pears', 7, .1)]\\n        >>> a = etl.toarray(table)\\n        >>> a\\n        array([('apples', 1, 2.5), ('oranges', 3, 4.4), ('pears', 7, 0.1)],\\n              dtype=(numpy.record, [('foo', '<U7'), ('bar', '<i8'), ('baz', '<f8')]))\\n        >>> # the dtype can be specified as a string\\n        ... a = etl.toarray(table, dtype='a4, i2, f4')\\n        >>> a\\n        array([(b'appl', 1, 2.5), (b'oran', 3, 4.400000095367432),\\n               (b'pear', 7, 0.10000000149011612)],\\n              dtype=[('foo', 'S4'), ('bar', '<i2'), ('baz', '<f4')])\\n        >>> # the dtype can also be partially specified\\n        ... a = etl.toarray(table, dtype={'foo': 'a4'})\\n        >>> a\\n        array([(b'appl', 1, 2.5), (b'oran', 3, 4.4), (b'pear', 7, 0.1)],\\n              dtype=[('foo', 'S4'), ('bar', '<i8'), ('baz', '<f8')])\\n\\n    If the dtype is not completely specified, `sample` rows will be\\n    examined to infer an appropriate dtype.\\n\\n    \"", "#NEWLINE#", "import", "numpy", "as np", "#NEWLINE#", "it", "=", "iter", "(", "table", ")", "#NEWLINE#", "(", "peek", ",", "it", ")", "=", "iterpeek", "(", "it", ",", "sample", ")", "#NEWLINE#", "hdr", "=", "next", "(", "it", ")", "#NEWLINE#", "flds", "=", "list", "(", "map", "(", "str", ",", "hdr", ")", ")", "#NEWLINE#", "dtype", "=", "construct_dtype", "(", "flds", ",", "peek", ",", "dtype", ")", "#NEWLINE#", "it", "=", "(", "tuple", "(", "row", ")", "for", "row", "in", "it", ")", "#NEWLINE#", "sa", "=", "np", ".", "fromiter", "(", "it", ",", "dtype", "=", "dtype", ",", "count", "=", "count", ")", "#NEWLINE#", "return", "sa"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 32, 36, 73, 28, 38, 43, 52, 78, 88, 97, 4, 67, 75, 99, 101, 83, 86, 55, 71, 91, 109, 48, 63, 15, 45, 8, 103, 105], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "alimanfoo/petl/petl/io/numpy.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3299, "results": {"model": "transformer", "prob": {"loc": [[0.882358729839325, 6.6389093262841925e-06, 1.6757594494265504e-06, 1.748990996475186e-07, 4.027466729894513e-06, 2.1667960936611053e-07, 1.5903802363936848e-07, 1.4184362839841924e-07, 3.6782123515877174e-06, 6.790194788663939e-07, 9.94364995676733e-07, 2.9907405973972345e-07, 1.7376178220729344e-05, 1.6430941229828022e-07, 1.760615333523674e-07, 5.848575597156014e-07, 3.864603570491454e-07, 2.333148404431995e-05, 4.146201320054388e-07, 6.061823114578146e-07, 1.255957386092632e-06, 3.3603421911720943e-07, 6.97489326739742e-07, 2.2851251912925363e-07, 2.696216597541934e-06, 5.551890808419557e-06, 6.16541819908889e-06, 2.2956052703193564e-07, 3.4092470286850585e-06, 1.9047450905418373e-07, 5.2737728850615895e-08, 2.04112370738585e-06, 0.0004403289931360632, 1.9974058886873536e-06, 6.293603291851468e-07, 1.9614763857589423e-07, 7.152733360271668e-06, 7.197185141194495e-07, 1.2295648957660887e-05, 9.963892466657853e-08, 4.887469913228415e-07, 4.815901775145903e-07, 6.523298452520976e-06, 0.021556273102760315, 1.1904362509085331e-06, 0.0002394931361777708, 3.519286792652565e-06, 1.0119291573573719e-06, 6.414047675207257e-06, 1.9569921505535604e-07, 1.867365199359483e-06, 2.289021949763992e-06, 0.014659509994089603, 2.9785139759042067e-06, 2.762367330433335e-06, 2.0764200598932803e-05, 1.5970516642482835e-06, 2.5067984665838594e-07, 1.1935202337554074e-06, 1.0071364613395417e-06, 1.1145067219331395e-05, 0.017145050689578056, 2.0147829218331026e-06, 0.00030823505949229, 5.440168479253771e-06, 1.8441511429045931e-06, 1.8904243006545585e-06, 7.498799823224545e-05, 6.098137532717374e-07, 1.6188665767913335e-06, 2.6548864298092667e-06, 9.30594906094484e-05, 1.1257577625656268e-06, 0.0023629628121852875, 1.3941813676865422e-06, 0.007533561438322067, 4.481862561078742e-06, 2.6061620701511856e-06, 1.2085102753189858e-05, 1.2767308987804427e-07, 2.9348021257646906e-07, 5.177616458240664e-06, 1.1999189155176282e-05, 0.0004430788103491068, 6.889309588586912e-05, 3.3528453059261665e-05, 4.270476892997976e-06, 1.452356030995361e-07, 0.037111666053533554, 8.106831955956295e-06, 8.01319856691407e-07, 9.049264235727605e-07, 2.636056706251111e-07, 1.1440820202324176e-07, 2.350873273826437e-07, 6.027158150345713e-08, 4.693557457358111e-06, 0.009000289253890514, 3.8624148146482185e-07, 2.581416083557997e-06, 6.71179748223949e-07, 0.0034106506500393152, 3.567189992281783e-07, 1.2140486660427996e-06, 2.9926093247922836e-07, 0.0025346819311380386, 4.887915110884933e-06, 1.8728323993855156e-05, 7.488115079468116e-05, 0.0002725780359469354]], "pointer": [[0.0, 0.0, 0.15028424561023712, 0.0, 0.15192000567913055, 0.0, 0.0, 0.0, 0.0831175148487091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013701725751161575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05403552204370499, 0.0, 0.0, 0.0, 0.004327422473579645, 0.0, 0.0, 0.0, 0.1103375107049942, 0.0, 0.07333030551671982, 0.0, 0.0, 0.0, 0.0, 8.588884520577267e-05, 0.0, 0.0018366760341450572, 0.0, 0.0, 0.06706555187702179, 0.0, 0.0, 0.0, 0.0010815075365826488, 0.0, 0.0, 0.057946305721998215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005235664430074394, 0.0, 0.0, 0.0, 0.12649385631084442, 0.0, 0.0, 0.0, 0.0007595124188810587, 0.0, 0.00027894374215975404, 0.0, 0.00024905113968998194, 0.0, 0.0, 0.05312767252326012, 0.0, 0.0, 0.0, 0.0, 0.00023155182134360075, 0.0, 0.0, 0.009206671267747879, 0.0, 0.0003117567684967071, 0.0, 0.0, 0.03612235188484192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00023625257017556578, 0.0, 0.0014091728953644633, 0.0, 1.2894178325950634e-05, 0.0, 0.0009309187880717218, 0.0, 4.4760916352970526e-05, 0.0, 0.0, 0.0, 0.0009908657521009445]], "target": [0.0]}, "loss": [0.12515661120414734, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def toarray(', 'table', ',', 'dtype', '=', 'None', ',', 'count', '=', '(', '-', '1', ')', ',', 'sample', '=', '1000', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    Load data from the given `table` into a\\n    `numpy <http://www.numpy.org/>`_ structured array. E.g.::\\n\\n        >>> import petl as etl\\n        >>> table = [(\'foo\', \'bar\', \'baz\'),\\n        ...          (\'apples\', 1, 2.5),\\n        ...          (\'oranges\', 3, 4.4),\\n        ...          (\'pears\', 7, .1)]\\n        >>> a = etl.toarray(table)\\n        >>> a\\n        array([(\'apples\', 1, 2.5), (\'oranges\', 3, 4.4), (\'pears\', 7, 0.1)],\\n              dtype=(numpy.record, [(\'foo\', \'<U7\'), (\'bar\', \'<i8\'), (\'baz\', \'<f8\')]))\\n        >>> # the dtype can be specified as a string\\n        ... a = etl.toarray(table, dtype=\'a4, i2, f4\')\\n        >>> a\\n        array([(b\'appl\', 1, 2.5), (b\'oran\', 3, 4.400000095367432),\\n               (b\'pear\', 7, 0.10000000149011612)],\\n              dtype=[(\'foo\', \'S4\'), (\'bar\', \'<i2\'), (\'baz\', \'<f4\')])\\n        >>> # the dtype can also be partially specified\\n        ... a = etl.toarray(table, dtype={\'foo\': \'a4\'})\\n        >>> a\\n        array([(b\'appl\', 1, 2.5), (b\'oran\', 3, 4.4), (b\'pear\', 7, 0.1)],\\n              dtype=[(\'foo\', \'S4\'), (\'bar\', \'<i8\'), (\'baz\', \'<f8\')])\\n\\n    If the dtype is not completely specified, `sample` rows will be\\n    examined to infer an appropriate dtype.\\n\\n    "', '#NEWLINE#', 'import', 'numpy', 'as np', '#NEWLINE#', 'it', '=', 'iter', '(', 'table', ')', '#NEWLINE#', '(', 'peek', ',', 'it', ')', '=', 'iterpeek', '(', 'it', ',', 'sample', ')', '#NEWLINE#', 'hdr', '=', 'next', '(', 'it', ')', '#NEWLINE#', 'flds', '=', 'list', '(', 'map', '(', 'str', ',', 'hdr', ')', ')', '#NEWLINE#', 'dtype', '=', 'construct_dtype', '(', 'flds', ',', 'peek', ',', 'dtype', ')', '#NEWLINE#', 'it', '=', '(', 'tuple', '(', 'row', ')', 'for', 'row', 'in', 'it', ')', '#NEWLINE#', 'sa', '=', 'np', '.', 'fromiter', '(', 'it', ',', 'dtype', '=', 'dtype', ',', 'count', '=', 'count', ')', '#NEWLINE#', 'return', 'sa']


All attention probs:

[0.01341484859585762, 0.010007604956626892, 0.018112894147634506, 0.013960890471935272, 0.020823350176215172, 0.017456740140914917, 0.009528382681310177, 0.009448684751987457, 0.02156084030866623, 0.010321728885173798, 0.012965134344995022, 0.010110591538250446, 0.016926364973187447, 0.007362624164670706, 0.007691618986427784, 0.016622528433799744, 0.008459808304905891, 0.010231374762952328, 0.006364367436617613, 0.0073080481961369514, 0.007668411359190941, 0.006604595109820366, 0.0063012829050421715, 0.007025476079434156, 0.008453038521111012, 0.005921401083469391, 0.006238741800189018, 0.006160231772810221, 0.016003547236323357, 0.005532507784664631, 0.006094804033637047, 0.004857271444052458, 0.014672253280878067, 0.004403828643262386, 0.006592718884348869, 0.005175917409360409, 0.01703205145895481, 0.008055810816586018, 0.014188017696142197, 0.006347580347210169, 0.004411556292325258, 0.0068007903173565865, 0.006037955638021231, 0.018570052459836006, 0.004447543062269688, 0.016953248530626297, 0.003840439720079303, 0.0064041526056826115, 0.011780934408307076, 0.00621831277385354, 0.004167848266661167, 0.0036962542217224836, 0.015644270926713943, 0.003057337598875165, 0.005676811095327139, 0.012582004070281982, 0.004416514188051224, 0.004537113476544619, 0.0035845907405018806, 0.004302389919757843, 0.004107061307877302, 0.014134512282907963, 0.004002916626632214, 0.012205936014652252, 0.0038327102083712816, 0.003973510582000017, 0.007268625311553478, 0.012578305788338184, 0.009332102723419666, 0.006440100725740194, 0.0046374015510082245, 0.015417780727148056, 0.0042226132936775684, 0.014617749489843845, 0.0037172683514654636, 0.017839737236499786, 0.0028891032561659813, 0.006020027212798595, 0.01463937759399414, 0.004893941804766655, 0.0030405044090002775, 0.0044150929898023605, 0.004398774355649948, 0.012693850323557854, 0.0033987821079790592, 0.004297894891351461, 0.012221865355968475, 0.0063530937768518925, 0.030248090624809265, 0.004327642731368542, 0.005974493455141783, 0.018138514831662178, 0.006501907482743263, 0.004989356268197298, 0.003604440251365304, 0.004606375005096197, 0.007007320877164602, 0.020549356937408447, 0.009525932371616364, 0.00864600669592619, 0.007092444226145744, 0.016610685735940933, 0.008172143250703812, 0.013016501441597939, 0.007178362924605608, 0.01724938489496708, 0.0037322058342397213, 0.005930442828685045, 0.007397076580673456, 0.012772645801305771]


Top-k source tokens:

['it', 'count', 'dtype', 'it', 'it', 'sa', 'table', 'dtype', '=', 'count']


Top-k attention probs:

[0.030248090624809265, 0.02156084030866623, 0.020823350176215172, 0.020549356937408447, 0.018570052459836006, 0.018138514831662178, 0.018112894147634506, 0.017839737236499786, 0.017456740140914917, 0.01724938489496708]
