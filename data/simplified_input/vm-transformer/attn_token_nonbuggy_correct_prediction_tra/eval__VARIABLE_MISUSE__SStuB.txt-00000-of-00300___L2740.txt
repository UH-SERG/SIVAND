
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _interpret_task_logs(", "fs", ",", "matches", ",", "partial", "=", "True", ",", "stderr_callback", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Look for errors in task syslog/stderr.\\n\\n    If *partial* is true (the default), stop when we find the first error.\\n\\n    If *stderr_callback* is set, every time we're about to parse a stderr\\n        file, call it with a single argument, the path of that file\\n\\n    Returns a dictionary possibly containing the key 'errors', which\\n    is a dict containing:\\n\\n    hadoop_error:\\n        message: string containing error message and Java exception\\n        num_lines: number of lines in syslog this takes up\\n        path: syslog we read this error from\\n        start_line: where in syslog exception starts (0-indexed)\\n    split: (optional)\\n        path: URI of input file task was processing\\n        num_lines: (optional) number of lines in split\\n        start_line: (optional) first line of split (0-indexed)\\n    task_error:\\n        message: command and error message from task, as a string\\n        num_lines: number of lines in stderr this takes up\\n        path: stderr we read this from\\n        start_line: where in stderr error message starts (0-indexed)\\n\\n    In addition, if *partial* is set to true (and we found an error),\\n    this dictionary will contain the key *partial*, set to True.\\n    \"", "#NEWLINE#", "result", "=", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "for", "match", "in", "matches", ":", "#NEWLINE#", "#INDENT#", "syslog_path", "=", "match", "[", "'path'", "]", "#NEWLINE#", "error", "=", "_parse_task_syslog", "(", "_cat_log", "(", "fs", ",", "syslog_path", ")", ")", "#NEWLINE#", "if", "(", "not", "error", ".", "get", "(", "'hadoop_error'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "error", "[", "'hadoop_error'", "]", "[", "'path'", "]", "=", "syslog_path", "#NEWLINE#", "for", "id_key", "in", "(", "'attempt_id'", ",", "'container_id'", ",", "'type_id'", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "id_key", "in", "match", ")", ":", "#NEWLINE#", "#INDENT#", "error", "[", "id_key", "]", "=", "match", "[", "id_key", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "_add_implied_task_id", "(", "error", ")", "#NEWLINE#", "stderr_path", "=", "_syslog_to_stderr_path", "(", "syslog_path", ")", "#NEWLINE#", "if", "fs", ".", "exists", "(", "stderr_path", ")", ":", "#NEWLINE#", "#INDENT#", "if", "stderr_callback", ":", "#NEWLINE#", "#INDENT#", "stderr_callback", "(", "stderr_path", ")", "#NEWLINE#", "#UNINDENT#", "task_error", "=", "_parse_task_stderr", "(", "_cat_log", "(", "fs", ",", "stderr_path", ")", ")", "#NEWLINE#", "if", "task_error", ":", "#NEWLINE#", "#INDENT#", "task_error", "[", "'path'", "]", "=", "stderr_path", "#NEWLINE#", "error", "[", "'task_error'", "]", "=", "task_error", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "result", ".", "setdefault", "(", "'errors'", ",", "[", "]", ")", "#NEWLINE#", "result", "[", "'errors'", "]", ".", "append", "(", "error", ")", "#NEWLINE#", "if", "partial", ":", "#NEWLINE#", "#INDENT#", "result", "[", "'partial'", "]", "=", "True", "#NEWLINE#", "break", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "result"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 31, 2, 48, 127, 153, 147, 160, 164, 176, 29, 37, 97, 107, 6, 201, 81, 95, 104, 109, 119, 131, 143, 155, 169, 10, 137, 141, 42, 57, 70, 102, 116, 171, 197, 35, 50, 78, 123, 19, 180, 190, 205, 217], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Yelp/mrjob/mrjob/logs/task.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2740, "results": {"model": "transformer", "prob": {"loc": [[0.8027764558792114, 1.3518877040041843e-06, 2.3190214051282965e-06, 3.665494219262655e-08, 2.9670720778085524e-06, 2.99366433864634e-08, 3.4005420275207143e-06, 1.0935048777582779e-07, 2.1635236180372885e-07, 3.523794234183697e-08, 1.3757420447291224e-06, 1.467091408358101e-07, 6.039967814785996e-08, 3.3291353673803314e-08, 8.337214296716411e-08, 1.6081224885056145e-07, 1.0522373372623406e-07, 3.7670858432647947e-07, 1.2005405380932643e-07, 9.684872566140257e-07, 8.685699981469952e-08, 7.24829646969738e-07, 1.5258626717695734e-07, 9.312248039350379e-08, 1.1444869585375272e-07, 8.097183012978348e-08, 1.1530277532756372e-07, 1.4449278751271777e-07, 1.700986160813045e-07, 5.583385700447252e-07, 3.673304860285498e-08, 0.0019400565652176738, 1.8282710811945435e-07, 1.1555199819213158e-07, 6.843031030712154e-08, 1.4782773405386251e-06, 3.1395916266774293e-07, 0.00042157230200245976, 1.2382346312733716e-06, 2.093978537232033e-06, 2.152303721913995e-07, 2.0416972290604463e-07, 8.650459676573519e-06, 1.6712007777641702e-07, 7.878609409317505e-08, 1.4264712433487148e-07, 3.199085085725528e-07, 1.7779907466319855e-06, 0.0006371054332703352, 3.5202691606173175e-07, 0.0011483788257464767, 4.5255845293468155e-07, 2.209463048075122e-07, 2.830715288837382e-07, 3.1233693675858376e-07, 2.905654582718853e-06, 2.8051222216163296e-06, 1.3674014553544112e-05, 1.4338253606638318e-07, 1.4754314747733588e-07, 4.452422786016541e-07, 1.4485267456620932e-06, 1.6085303400359408e-07, 7.90980791975926e-08, 6.505403007395216e-07, 2.2953013001369982e-07, 1.390047970062369e-07, 1.3012104318477213e-06, 1.7235826987871405e-07, 1.6515163281383138e-07, 4.552910922939191e-06, 3.318339395264047e-06, 1.6667894442434772e-06, 5.91427351537277e-07, 1.328771418229735e-06, 3.198208332833019e-06, 1.297992326954045e-07, 8.66471395966073e-07, 0.005058004055172205, 8.046825428209559e-07, 5.878733873032616e-07, 4.5836139861421543e-07, 1.119412971206657e-07, 4.631874162441818e-06, 2.6803445507539436e-06, 7.886378625698853e-07, 1.9507790511852363e-06, 4.950013021698396e-07, 1.6055456626418163e-06, 2.0557294533318782e-07, 5.483681775331206e-07, 5.275933858683857e-07, 2.908281260260992e-07, 7.257959850903717e-07, 4.435860034845973e-07, 0.0029973716009408236, 5.648059300256136e-07, 0.011155740357935429, 8.753504943115331e-08, 4.655089753669017e-07, 4.5645555246665026e-07, 2.857376841802761e-07, 0.0009606037638150156, 1.5767756167406333e-06, 0.0017055607168003917, 3.117715152711753e-07, 3.0591510835620284e-07, 0.0215815007686615, 6.801388963140198e-07, 0.0015830491902306676, 2.310833906449261e-07, 4.670724820243777e-07, 3.4025777040369576e-07, 2.820303564021742e-07, 4.924583762999646e-08, 5.278224080029759e-07, 0.004532294813543558, 6.80361381455441e-07, 7.035091584839392e-07, 2.59078478848096e-05, 1.583936892757265e-07, 3.8580532191190287e-07, 1.1412788580855704e-06, 0.0844409167766571, 8.805201900941029e-07, 1.0246858437312767e-06, 5.280358550407982e-07, 0.00035753630800172687, 1.3420741140635073e-07, 1.3255684905288945e-07, 3.1956818702383316e-07, 0.005489521659910679, 6.753678150062115e-08, 6.852895921838353e-07, 5.118631065670343e-07, 2.710625039981096e-07, 2.628706567975314e-07, 0.0006606298848055303, 3.4218484756820544e-07, 2.562470058364852e-07, 1.489558343337194e-07, 5.054321718489518e-06, 1.7797542284370138e-07, 0.0027348175644874573, 2.7246670697422815e-07, 3.5693341260412126e-07, 2.3038585084123042e-07, 1.0007256605604198e-06, 1.021681867996449e-07, 5.234382456364983e-07, 1.3776819685062947e-07, 4.360604464181961e-07, 9.176372941510635e-07, 0.0020545979496091604, 2.4575814450145117e-07, 0.014960129745304585, 6.049124294804642e-07, 3.245771722504287e-07, 3.190127699781442e-07, 2.263857226125765e-07, 0.005295050796121359, 5.86016710713011e-07, 5.37977143721946e-07, 2.285685667402504e-07, 9.06064742594026e-05, 7.951086189450507e-08, 2.3033633169688983e-06, 6.017418741066649e-08, 4.3413425032667874e-07, 0.008153817616403103, 3.090445090947469e-07, 0.00019324495224282146, 1.8036897131423757e-07, 4.526942120719468e-06, 9.068535433698344e-08, 6.058778012629773e-07, 0.005283154547214508, 3.1402862532559084e-07, 1.4510284529478668e-07, 9.70450528825495e-08, 1.3968677592401946e-07, 1.9072756174409733e-07, 1.1745656536277238e-07, 1.0748964314188925e-06, 5.950394097453682e-06, 8.73769579357031e-07, 2.215453605458606e-05, 1.8640311054696213e-06, 2.5194929094141116e-06, 3.3266999821535137e-07, 3.951066389618063e-07, 6.353926806923482e-08, 1.8318672800887725e-06, 2.886876302454766e-07, 2.4532960196665954e-07, 6.090045445716896e-08, 2.9988891014909314e-07, 0.006488349288702011, 7.632981464666955e-07, 7.698189961047319e-07, 2.2222225481982605e-07, 0.007031188812106848, 1.8942250790132675e-06, 6.697558774249046e-07, 3.7188613077887567e-07, 1.5561956843157532e-06, 7.222283215924108e-07, 1.2708987924270332e-05, 3.998700037755043e-07, 3.4942752336064586e-06, 2.474297616572585e-05, 2.562802023930999e-07, 7.001962785579963e-06, 2.7830736826217617e-07, 3.5707165579879074e-07, 3.985952901075507e-07, 3.1661232924307114e-07, 1.8920452930615284e-05]], "pointer": [[0.0, 0.0, 0.016965853050351143, 0.0, 0.03494054824113846, 0.0, 0.02284925803542137, 0.0, 0.0, 0.0, 0.03835935518145561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009823313914239407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03929866850376129, 0.0, 0.0001519788202131167, 0.0, 0.0, 0.0, 0.08386898040771484, 0.0, 4.3078791350126266e-05, 0.0, 0.0, 0.0, 0.0, 0.05604888126254082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024645389057695866, 0.0, 0.008339228108525276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007415554951876402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036192528903484344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024073270615190268, 0.0, 0.0, 0.11086513102054596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01383636798709631, 0.0, 0.05121194198727608, 0.0, 0.0, 0.0, 0.0, 0.14709782600402832, 0.0, 0.007274742238223553, 0.0, 0.0, 0.018734997138381004, 0.0, 0.005001496057957411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004765866789966822, 0.0, 0.0, 0.13227322697639465, 0.0, 0.0, 0.0, 0.025294190272688866, 0.0, 0.0, 0.0, 0.04397021606564522, 0.0, 0.0, 0.0, 0.0011050637112930417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0031654455233365297, 0.0, 0.0, 0.0, 0.000117788280476816, 0.0, 0.001768014277331531, 0.0, 0.0, 0.0, 0.028661265969276428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000978501164354384, 0.0, 0.0021991587709635496, 0.0, 0.0, 0.0, 0.0, 0.00026997129316441715, 0.0, 0.0, 0.0, 0.004948177374899387, 0.0, 0.0, 0.0, 0.0, 0.0003194748715031892, 0.0, 0.028839074075222015, 0.0, 0.0, 0.0, 0.0, 4.718131458503194e-05, 0.0, 0.0, 0.0, 0.004072303883731365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019471318228170276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00029396102763712406, 0.0, 0.0, 0.0, 9.60697652772069e-05, 0.0, 0.0, 0.0, 0.0015070128720253706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016924089868552983]], "target": [0.0]}, "loss": [0.21967867016792297, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def _interpret_task_logs(', 'fs', ',', 'matches', ',', 'partial', '=', 'True', ',', 'stderr_callback', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '"Look for errors in task syslog/stderr.\\n\\n    If *partial* is true (the default), stop when we find the first error.\\n\\n    If *stderr_callback* is set, every time we\'re about to parse a stderr\\n        file, call it with a single argument, the path of that file\\n\\n    Returns a dictionary possibly containing the key \'errors\', which\\n    is a dict containing:\\n\\n    hadoop_error:\\n        message: string containing error message and Java exception\\n        num_lines: number of lines in syslog this takes up\\n        path: syslog we read this error from\\n        start_line: where in syslog exception starts (0-indexed)\\n    split: (optional)\\n        path: URI of input file task was processing\\n        num_lines: (optional) number of lines in split\\n        start_line: (optional) first line of split (0-indexed)\\n    task_error:\\n        message: command and error message from task, as a string\\n        num_lines: number of lines in stderr this takes up\\n        path: stderr we read this from\\n        start_line: where in stderr error message starts (0-indexed)\\n\\n    In addition, if *partial* is set to true (and we found an error),\\n    this dictionary will contain the key *partial*, set to True.\\n    "', '#NEWLINE#', 'result', '=', '{', '#NEWLINE#', '#INDENT#', '#NEWLINE#', '#UNINDENT#', '}', '#NEWLINE#', 'for', 'match', 'in', 'matches', ':', '#NEWLINE#', '#INDENT#', 'syslog_path', '=', 'match', '[', "'path'", ']', '#NEWLINE#', 'error', '=', '_parse_task_syslog', '(', '_cat_log', '(', 'fs', ',', 'syslog_path', ')', ')', '#NEWLINE#', 'if', '(', 'not', 'error', '.', 'get', '(', "'hadoop_error'", ')', ')', ':', '#NEWLINE#', '#INDENT#', 'continue', '#NEWLINE#', '#UNINDENT#', 'error', '[', "'hadoop_error'", ']', '[', "'path'", ']', '=', 'syslog_path', '#NEWLINE#', 'for', 'id_key', 'in', '(', "'attempt_id'", ',', "'container_id'", ',', "'type_id'", ')', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'id_key', 'in', 'match', ')', ':', '#NEWLINE#', '#INDENT#', 'error', '[', 'id_key', ']', '=', 'match', '[', 'id_key', ']', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', '_add_implied_task_id', '(', 'error', ')', '#NEWLINE#', 'stderr_path', '=', '_syslog_to_stderr_path', '(', 'syslog_path', ')', '#NEWLINE#', 'if', 'fs', '.', 'exists', '(', 'stderr_path', ')', ':', '#NEWLINE#', '#INDENT#', 'if', 'stderr_callback', ':', '#NEWLINE#', '#INDENT#', 'stderr_callback', '(', 'stderr_path', ')', '#NEWLINE#', '#UNINDENT#', 'task_error', '=', '_parse_task_stderr', '(', '_cat_log', '(', 'fs', ',', 'stderr_path', ')', ')', '#NEWLINE#', 'if', 'task_error', ':', '#NEWLINE#', '#INDENT#', 'task_error', '[', "'path'", ']', '=', 'stderr_path', '#NEWLINE#', 'error', '[', "'task_error'", ']', '=', 'task_error', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'result', '.', 'setdefault', '(', "'errors'", ',', '[', ']', ')', '#NEWLINE#', 'result', '[', "'errors'", ']', '.', 'append', '(', 'error', ')', '#NEWLINE#', 'if', 'partial', ':', '#NEWLINE#', '#INDENT#', 'result', '[', "'partial'", ']', '=', 'True', '#NEWLINE#', 'break', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', 'result']


All attention probs:

[0.007163384463638067, 0.008286849595606327, 0.016798704862594604, 0.010104422457516193, 0.014505147002637386, 0.007034586742520332, 0.017714738845825195, 0.006081859581172466, 0.005982983857393265, 0.006900276057422161, 0.019799981266260147, 0.007711527403444052, 0.006656501442193985, 0.006314456462860107, 0.006418683100491762, 0.006788222584873438, 0.005966785829514265, 0.005421435926109552, 0.00581246055662632, 0.011594953946769238, 0.006255050655454397, 0.004738079849630594, 0.004491276107728481, 0.00425992114469409, 0.0042841373942792416, 0.0037543466314673424, 0.0034065910149365664, 0.003906699828803539, 0.0036799616646021605, 0.011724242009222507, 0.0035096316132694483, 0.011391960084438324, 0.0036395248025655746, 0.003602810902521014, 0.0035145997535437346, 0.008550334721803665, 0.002851407742127776, 0.0061947680078446865, 0.00338946795091033, 0.0045158956199884415, 0.0030463284347206354, 0.00404067849740386, 0.010808536782860756, 0.002891556126996875, 0.0026579939294606447, 0.0024954236578196287, 0.0032338155433535576, 0.0025013333652168512, 0.009824957698583603, 0.0029059643857181072, 0.009718955494463444, 0.0019533897284418344, 0.0017631701193749905, 0.0028502761851996183, 0.0028240785468369722, 0.0022572502493858337, 0.0022446142975240946, 0.005314674694091082, 0.0017046439461410046, 0.002288664923980832, 0.0021709518041461706, 0.0040063816122710705, 0.0018665812676772475, 0.0015319257508963346, 0.0020741589833050966, 0.002429674146696925, 0.002574903191998601, 0.003642974654212594, 0.0029493020847439766, 0.003009313717484474, 0.004726668354123831, 0.0026373511645942926, 0.002921914216130972, 0.0023377160541713238, 0.0020027533173561096, 0.0029393495060503483, 0.0018132722470909357, 0.0017312195850536227, 0.010154386050999165, 0.0028254541102796793, 0.0025677757803350687, 0.015514736995100975, 0.0026648954953998327, 0.0021887868642807007, 0.0031986995600163937, 0.002230494050309062, 0.0033183323685079813, 0.002769992919638753, 0.0046060094609856606, 0.002078076358884573, 0.002063543302938342, 0.00225256965495646, 0.0023018603678792715, 0.0029816613532602787, 0.0019013298442587256, 0.010011966340243816, 0.0021657797042280436, 0.01627284102141857, 0.0019973532762378454, 0.0019631320610642433, 0.002625812543556094, 0.002667900174856186, 0.00836025457829237, 0.0033818327356129885, 0.007795246317982674, 0.002300551626831293, 0.0024924855679273605, 0.013314344920217991, 0.0017312616109848022, 0.006625019945204258, 0.0018193399300798774, 0.0033312977757304907, 0.002643878571689129, 0.00258982484228909, 0.0034854658879339695, 0.002058661077171564, 0.00773193221539259, 0.001831352710723877, 0.003008939791470766, 0.010261558927595615, 0.003591416869312525, 0.003406709060072899, 0.0021981566678732634, 0.02004881016910076, 0.0019706892780959606, 0.003068838268518448, 0.004028354771435261, 0.008564835414290428, 0.0013827194925397635, 0.002071714261546731, 0.0020368495024740696, 0.00837777554988861, 0.001367371529340744, 0.0017816408071666956, 0.0023045779671519995, 0.0020792142022401094, 0.0027953500393778086, 0.012677040882408619, 0.001768794609233737, 0.0019511326681822538, 0.0020762328058481216, 0.005118280183523893, 0.0022373783867806196, 0.007767105009406805, 0.0014648180222138762, 0.0024394984357059, 0.002350339898839593, 0.011075085960328579, 0.003129221498966217, 0.0034055556170642376, 0.001991023076698184, 0.002709824126213789, 0.002710037399083376, 0.009056753478944302, 0.003093085251748562, 0.014182446524500847, 0.002283550100401044, 0.001958000473678112, 0.0035541816614568233, 0.003734143916517496, 0.00870622880756855, 0.0022587126586586237, 0.0023333909921348095, 0.0021853363141417503, 0.006570092868059874, 0.002392285270616412, 0.002609753515571356, 0.0016469977563247085, 0.0016726638423278928, 0.012610005214810371, 0.002643441315740347, 0.00698081636801362, 0.00286058965139091, 0.0033155938144773245, 0.002362785628065467, 0.0024085252080112696, 0.009686038829386234, 0.002380968537181616, 0.0022061336785554886, 0.00261792354285717, 0.00812679436057806, 0.0016872616251930594, 0.0022818122524768114, 0.0026332864072173834, 0.0035934988409280777, 0.0030092690140008926, 0.0038492584135383368, 0.005052404012531042, 0.004200125578790903, 0.005567692685872316, 0.006893109995871782, 0.004669656045734882, 0.003667958313599229, 0.00328735145740211, 0.002066187560558319, 0.002470731968060136, 0.0025190471205860376, 0.012448864988982677, 0.0014912332408130169, 0.0029028861317783594, 0.0028995585162192583, 0.010329860262572765, 0.002070368267595768, 0.002235105726867914, 0.0022369485814124346, 0.0045594642870128155, 0.0025547363329678774, 0.0035064832773059607, 0.001764836604706943, 0.0019669514149427414, 0.0027123328763991594, 0.0027140816673636436, 0.003579822601750493, 0.002681189449504018, 0.002455579349771142, 0.0025294716469943523, 0.003651611739769578, 0.011378309689462185]


Top-k source tokens:

['syslog_path', 'stderr_callback', 'partial', 'fs', 'match', 'id_key', 'matches', 'stderr_path', 'match', 'stderr_callback']


Top-k attention probs:

[0.02004881016910076, 0.019799981266260147, 0.017714738845825195, 0.016798704862594604, 0.01627284102141857, 0.015514736995100975, 0.014505147002637386, 0.014182446524500847, 0.013314344920217991, 0.012677040882408619]
