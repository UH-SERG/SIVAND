
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 16, 6, 24, 4, 22, 8, 26], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Alephbet/gimel/vendor/redis/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2874, "results": {"model": "transformer", "prob": {"loc": [[0.9998070597648621, 5.2443015192693565e-06, 1.2545535810204456e-07, 9.55243972811104e-09, 3.751883355107566e-07, 5.0080877223024345e-09, 2.6805676611729723e-07, 3.631241085599868e-09, 8.829265425447375e-07, 2.275829524833739e-09, 2.0066330819190625e-08, 1.6567366145636697e-08, 1.510540137417138e-08, 3.1831174140961593e-08, 2.763731821175952e-08, 1.0222678703541987e-08, 2.2103213481727835e-08, 6.781752404094732e-08, 2.314341829290356e-09, 3.525003222648593e-08, 5.668008640213884e-08, 2.0680937495853868e-07, 5.0238075345987454e-05, 2.935547982474418e-08, 0.00011217848805245012, 1.6342898589982724e-08, 2.3062961190589704e-05, 8.695261755065076e-08]], "pointer": [[0.0, 0.0, 0.366159051656723, 0.0, 0.10905905067920685, 0.0, 0.1645066887140274, 0.0, 0.29843834042549133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0365375392138958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0032961652614176273, 0.0, 0.0029291657265275717, 0.0, 0.019074002280831337, 0.0]], "target": [0.0]}, "loss": [0.00019298121333122253, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def setrange(', 'self', ',', 'name', ',', 'offset', ',', 'value', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what\'s being injected.\\n\\n        Returns the length of the new string.\\n        "', '#NEWLINE#', 'return', 'self', '.', 'execute_command', '(', "'SETRANGE'", ',', 'name', ',', 'offset', ',', 'value', ')']


All attention probs:

[0.039277829229831696, 0.021828148514032364, 0.08730203658342361, 0.031463123857975006, 0.05520667880773544, 0.02995428629219532, 0.06765660643577576, 0.02838585525751114, 0.06540387868881226, 0.03206286579370499, 0.029719874262809753, 0.030173631384968758, 0.02183244377374649, 0.021574093028903008, 0.02259017340838909, 0.033071648329496384, 0.035042036324739456, 0.010874457657337189, 0.015761734917759895, 0.013185438700020313, 0.022615529596805573, 0.01810082606971264, 0.05399132892489433, 0.020885044708848, 0.06162169948220253, 0.026219237595796585, 0.06192747876048088, 0.04227200523018837]


Top-k source tokens:

['self', 'offset', 'value', 'value', 'offset', 'name', 'name', ')', '#NEWLINE#', 'self']


Top-k attention probs:

[0.08730203658342361, 0.06765660643577576, 0.06540387868881226, 0.06192747876048088, 0.06162169948220253, 0.05520667880773544, 0.05399132892489433, 0.04227200523018837, 0.039277829229831696, 0.035042036324739456]
