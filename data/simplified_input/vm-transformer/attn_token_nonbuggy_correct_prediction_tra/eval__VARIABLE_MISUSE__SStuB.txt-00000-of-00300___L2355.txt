
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def get_test_subprocess(", "cmd", "=", "None", ",", "stdout", "=", "DEVNULL", ",", "stderr", "=", "DEVNULL", ",", "stdin", "=", "None", ",", "wait", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Return a subprocess.Popen object to use in tests.\\n    By default stdout and stderr are redirected to /dev/null and the\\n    python interpreter is used as test process.\\n    If 'wait' is True attemps to make sure the process is in a\\n    reasonably initialized state.\\n    \"", "#NEWLINE#", "if", "(", "cmd", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pyline", "=", "''", "#NEWLINE#", "if", "wait", ":", "#NEWLINE#", "#INDENT#", "pyline", "+=", "(", "\"open('%s', 'w'); \"", "%", "TESTFN", ")", "#NEWLINE#", "#UNINDENT#", "pyline", "+=", "'import time; time.sleep(3600);'", "#NEWLINE#", "cmd_", "=", "[", "PYTHON", ",", "'-c'", ",", "pyline", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "cmd_", "=", "cmd", "#NEWLINE#", "#UNINDENT#", "sproc", "=", "subprocess", ".", "Popen", "(", "cmd_", ",", "stdout", "=", "stdout", ",", "stderr", "=", "stderr", ",", "stdin", "=", "stdin", ")", "#NEWLINE#", "if", "wait", ":", "#NEWLINE#", "#INDENT#", "if", "(", "cmd", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "stop_at", "=", "(", "time", ".", "time", "(", ")", "+", "3", ")", "#NEWLINE#", "while", "(", "time", ".", "time", "(", ")", ">", "stop_at", ")", ":", "#NEWLINE#", "#INDENT#", "if", "os", ".", "path", ".", "exists", "(", "TESTFN", ")", ":", "#NEWLINE#", "#INDENT#", "break", "#NEWLINE#", "#UNINDENT#", "time", ".", "sleep", "(", "0.001", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warn", "(", "\"couldn't make sure test file was actually created\"", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "wait_for_pid", "(", "sproc", ".", "pid", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "_subprocesses_started", ".", "add", "(", "sproc", ".", "pid", ")", "#NEWLINE#", "return", "sproc"], "error_location": [0], "repair_targets": [], "repair_candidates": [58, 73, 84, 6, 86, 88, 113, 133, 78, 178, 189, 195, 18, 41, 100, 10, 90, 92, 14, 94, 96, 2, 29, 75, 106, 36, 45, 54, 65], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "packages/psutil/test/test_psutil.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2355, "results": {"model": "transformer", "prob": {"loc": [[0.510506808757782, 4.9866116569319274e-06, 1.1160663007103722e-06, 1.7662354423464421e-07, 4.114631124707557e-08, 3.970156470245456e-08, 1.9002842464033165e-06, 2.3552128425308183e-07, 2.1165335795103601e-07, 3.036434037539948e-08, 2.802819153657765e-06, 1.8396180223589909e-07, 2.061267139197298e-07, 3.6597054275944174e-08, 7.429285233229166e-06, 2.9131157930351037e-07, 1.1927821219614998e-07, 6.031233823478033e-08, 2.6948073355015367e-06, 2.282086768445879e-07, 5.242328597887536e-07, 4.5237896983962855e-08, 1.1525184362426444e-07, 1.5434584099693893e-07, 9.765899022795566e-08, 2.6669385988498107e-07, 1.45209810398228e-07, 1.1097729668563261e-07, 5.5978887303353986e-08, 0.005652816500514746, 1.7588629930287425e-07, 5.858184692897339e-08, 6.970287103058581e-08, 1.1459513160616552e-07, 1.41901921324461e-07, 7.287201242434094e-08, 1.5430678104166873e-06, 4.762331968777289e-07, 5.26395069755381e-07, 1.8169187399053044e-07, 2.582515037374833e-07, 0.02137548290193081, 7.227516789498623e-07, 9.32987745727587e-07, 4.497324823660165e-07, 8.919317224354018e-06, 4.073758574918429e-08, 2.814804815898242e-07, 1.1429307278376655e-06, 6.074518523746519e-07, 0.00020804503583349288, 5.318569265000406e-07, 2.4708702994757914e-07, 9.865997441238505e-08, 1.324567961091816e-06, 2.1812718387081986e-07, 2.4476203179801814e-06, 1.3032099843712786e-07, 6.071755933589884e-07, 2.081641952145219e-07, 3.887337697960902e-06, 1.4604799616790842e-05, 1.853668152307364e-07, 1.4392001048690872e-06, 1.9995812294837378e-07, 0.00029350403929129243, 1.6413147818639118e-07, 1.6908980171592702e-07, 1.3281800192999071e-07, 2.063032980004209e-07, 1.8522668199238979e-07, 1.9187797306585708e-07, 1.2849305619511142e-07, 6.225752144928265e-07, 1.3361366768549487e-07, 0.0012814265210181475, 2.1837320218764944e-07, 1.6013622428090457e-07, 8.483571946271695e-06, 6.935363217053236e-08, 9.479770568532331e-08, 1.0044893627991769e-07, 8.075055291101307e-08, 1.5712370782239304e-07, 0.0007759635918773711, 9.537888701061092e-08, 1.8270802115694096e-07, 1.8129446743841982e-07, 0.01037573255598545, 4.777354334351003e-08, 2.521707074265578e-07, 1.4615902443892992e-07, 0.0007773386314511299, 6.474057556715707e-08, 3.678325697364926e-07, 1.5333263547745446e-07, 0.003166589420288801, 1.023694153445831e-06, 5.2151949603285175e-06, 4.515202363108983e-07, 0.030503174290060997, 5.044531008024933e-06, 5.420870820671553e-06, 2.7359028536011465e-06, 7.123422278709768e-07, 1.6001835945189669e-07, 0.3240111470222473, 2.423510522930883e-06, 7.407300586237398e-07, 6.732079214089026e-07, 1.3704134289582726e-06, 1.4474395584329613e-06, 7.011512934695929e-07, 0.00024206233501899987, 2.616183110148995e-07, 3.154783598802169e-07, 9.818722901400179e-07, 3.1373670594803116e-07, 2.5686225058052514e-07, 2.790587814160972e-06, 4.5536717152572237e-07, 2.2982686687100795e-07, 0.00024101699818857014, 2.24853579311457e-06, 2.3334850993705913e-06, 3.3565976309546386e-07, 4.473272383620497e-07, 1.6763392522989307e-06, 2.686343520963419e-07, 3.0654993565804034e-07, 1.0585342806734843e-06, 3.63773295930514e-07, 1.9418735064391512e-07, 0.0771295577287674, 5.66725987027894e-07, 1.3066329529465293e-06, 1.7018855942296796e-06, 8.212970215026871e-07, 3.2786763881631487e-07, 4.893488039670046e-06, 1.7960353204671264e-07, 7.364456422465082e-08, 1.7527129614336445e-07, 3.027591688464781e-08, 6.100481186877005e-07, 0.0007924219826236367, 2.0407311751569068e-07, 1.5730774975963868e-06, 1.0661844953574473e-06, 3.1199508043755486e-07, 4.652613824873697e-06, 3.348205268594029e-07, 2.47596545932538e-07, 8.463143075232438e-08, 5.779987333198733e-08, 5.048614184488542e-07, 3.0979660436969425e-07, 3.1923307687975466e-05, 1.0158323675568681e-06, 2.2378992525773356e-06, 8.764308176978375e-07, 1.006134993986052e-06, 7.638579404556367e-07, 7.224485329970776e-07, 4.854477992921602e-07, 2.479850422787422e-07, 1.7905814786445262e-07, 5.917281669098884e-06, 9.978444950320409e-07, 1.479220372857526e-06, 9.892089565255446e-07, 6.421712441806449e-07, 1.0774341490105144e-06, 3.486553339371312e-07, 5.058918191025441e-07, 2.0095869501801644e-07, 4.5463340825335763e-07, 8.987557720274708e-08, 0.0003976029984187335, 7.255403602357546e-07, 1.8534938135417178e-06, 5.184872406971408e-07, 5.01716158396448e-07, 3.5499931527738227e-07, 1.9361115732863254e-07, 7.457167328084324e-08, 1.3947828847449273e-07, 2.923721353909059e-08, 3.73998346958615e-07, 0.0018766243010759354, 9.510681024949008e-07, 1.3589476566266967e-06, 3.053399666441692e-07, 8.673467846165295e-07, 3.4594950193422846e-06, 0.010185888968408108]], "pointer": [[0.0, 0.0, 0.011731297709047794, 0.0, 0.0, 0.0, 0.05421185865998268, 0.0, 0.0, 0.0, 0.05599251016974449, 0.0, 0.0, 0.0, 0.2433318793773651, 0.0, 0.0, 0.0, 0.013320321217179298, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003521954349707812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01782923750579357, 0.0, 0.0, 0.0, 0.0, 0.0001787838846212253, 0.0, 0.0, 0.0, 0.005851320922374725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006919789128005505, 0.0, 0.0, 0.0, 0.02033810131251812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00044781644828617573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02875223010778427, 0.0, 0.00046805141028016806, 0.0, 0.0, 0.4019477963447571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00042515690438449383, 0.0, 0.00027787889121100307, 0.0, 1.5851650232434622e-06, 0.0, 0.0006390796042978764, 0.0, 1.4322857168735936e-05, 0.0, 0.00069099833490327, 0.0, 7.685959644732065e-06, 0.0, 0.0, 0.0, 0.00020796165335923433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009052549139596522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13420121371746063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.507466630660929e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007386368815787137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.557366653694771e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012648456322494894]], "target": [0.0]}, "loss": [0.6723513007164001, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def get_test_subprocess(', 'cmd', '=', 'None', ',', 'stdout', '=', 'DEVNULL', ',', 'stderr', '=', 'DEVNULL', ',', 'stdin', '=', 'None', ',', 'wait', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', '"Return a subprocess.Popen object to use in tests.\\n    By default stdout and stderr are redirected to /dev/null and the\\n    python interpreter is used as test process.\\n    If \'wait\' is True attemps to make sure the process is in a\\n    reasonably initialized state.\\n    "', '#NEWLINE#', 'if', '(', 'cmd', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'pyline', '=', "''", '#NEWLINE#', 'if', 'wait', ':', '#NEWLINE#', '#INDENT#', 'pyline', '+=', '(', '"open(\'%s\', \'w\'); "', '%', 'TESTFN', ')', '#NEWLINE#', '#UNINDENT#', 'pyline', '+=', "'import time; time.sleep(3600);'", '#NEWLINE#', 'cmd_', '=', '[', 'PYTHON', ',', "'-c'", ',', 'pyline', ']', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'cmd_', '=', 'cmd', '#NEWLINE#', '#UNINDENT#', 'sproc', '=', 'subprocess', '.', 'Popen', '(', 'cmd_', ',', 'stdout', '=', 'stdout', ',', 'stderr', '=', 'stderr', ',', 'stdin', '=', 'stdin', ')', '#NEWLINE#', 'if', 'wait', ':', '#NEWLINE#', '#INDENT#', 'if', '(', 'cmd', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'stop_at', '=', '(', 'time', '.', 'time', '(', ')', '+', '3', ')', '#NEWLINE#', 'while', '(', 'time', '.', 'time', '(', ')', '>', 'stop_at', ')', ':', '#NEWLINE#', '#INDENT#', 'if', 'os', '.', 'path', '.', 'exists', '(', 'TESTFN', ')', ':', '#NEWLINE#', '#INDENT#', 'break', '#NEWLINE#', '#UNINDENT#', 'time', '.', 'sleep', '(', '0.001', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'warn', '(', '"couldn\'t make sure test file was actually created"', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'wait_for_pid', '(', 'sproc', '.', 'pid', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', '_subprocesses_started', '.', 'add', '(', 'sproc', '.', 'pid', ')', '#NEWLINE#', 'return', 'sproc']


All attention probs:

[0.009378909133374691, 0.008499370887875557, 0.02431299537420273, 0.011295326985418797, 0.008192639797925949, 0.0071365712210536, 0.01844608783721924, 0.005265401676297188, 0.00674646208062768, 0.0062058768235147, 0.014068391174077988, 0.006704758852720261, 0.008207762613892555, 0.006355139426887035, 0.018966691568493843, 0.006625302601605654, 0.0056203617714345455, 0.005407444667071104, 0.016779430210590363, 0.006451049353927374, 0.006802767980843782, 0.004151074215769768, 0.004524834454059601, 0.005006091669201851, 0.0045913634821772575, 0.004065930377691984, 0.004069103393703699, 0.004007692448794842, 0.0026706105563789606, 0.012565113604068756, 0.0034651998430490494, 0.003123973961919546, 0.003300061449408531, 0.003407788462936878, 0.003594879060983658, 0.003777166595682502, 0.007535559590905905, 0.0032125443685799837, 0.004074189346283674, 0.004027578979730606, 0.0037104953080415726, 0.01545973215252161, 0.0038378166500478983, 0.003481418127194047, 0.003021273296326399, 0.006586885079741478, 0.003434560727328062, 0.002665588166564703, 0.0026003269013017416, 0.0029604691080749035, 0.00723740691319108, 0.002134120324626565, 0.0029159681871533394, 0.003009363543242216, 0.005109791643917561, 0.0026457561179995537, 0.003029776271432638, 0.0030815398786216974, 0.007439139764755964, 0.002346156630665064, 0.002469828585162759, 0.004975785035640001, 0.0022264060098677874, 0.002614333527162671, 0.002072366653010249, 0.01382790133357048, 0.002436039038002491, 0.003788389265537262, 0.003948015160858631, 0.009026072919368744, 0.002876000478863716, 0.0031853478867560625, 0.003064154414460063, 0.00950686540454626, 0.0027576456777751446, 0.010333625599741936, 0.0029778690077364445, 0.003112058388069272, 0.01169357169419527, 0.003271325957030058, 0.003281549084931612, 0.001846181694418192, 0.0023777366150170565, 0.002112704562023282, 0.012405810877680779, 0.0022721271961927414, 0.005763438530266285, 0.003046952420845628, 0.013246769085526466, 0.0023706562351435423, 0.004543363582342863, 0.0022195433266460896, 0.014947090297937393, 0.0023220395669341087, 0.005296713672578335, 0.0023314934223890305, 0.015988582745194435, 0.0022629695013165474, 0.0037202388048171997, 0.003806585446000099, 0.012826024554669857, 0.002564085880294442, 0.0032959929667413235, 0.003919623326510191, 0.004190470557659864, 0.00225980207324028, 0.017612237483263016, 0.0021292183082550764, 0.0017811445286497474, 0.001868211547844112, 0.0025618935469537973, 0.003978230059146881, 0.0036461215931922197, 0.01693268120288849, 0.0024186482187360525, 0.0018588408129289746, 0.0035915779881179333, 0.0014575410168617964, 0.002215644111856818, 0.0029003771487623453, 0.001915422035381198, 0.002154433401301503, 0.0059683904983103275, 0.0022148508578538895, 0.004050637595355511, 0.006758701056241989, 0.002583031076937914, 0.004554176237434149, 0.0017143577570095658, 0.0024633619468659163, 0.0022856842260807753, 0.0016609755111858249, 0.002241468755528331, 0.017664654180407524, 0.0016175067285075784, 0.001944852527230978, 0.0027057237457484007, 0.002708298387005925, 0.0034586857073009014, 0.003425990231335163, 0.0013059349730610847, 0.002443707315251231, 0.001477311016060412, 0.0017911301692947745, 0.002312358235940337, 0.007556754630059004, 0.0014014665503054857, 0.0021803537383675575, 0.0026761358603835106, 0.0025899901520460844, 0.003999229054898024, 0.0033497207332402468, 0.004018645267933607, 0.005787154659628868, 0.004169031046330929, 0.003361691255122423, 0.003532646456733346, 0.004570038989186287, 0.002505364827811718, 0.004124857019633055, 0.0037648167926818132, 0.0072538950480520725, 0.002759574679657817, 0.003052561078220606, 0.0028764179442077875, 0.00510028749704361, 0.00253133662045002, 0.0041933851316571236, 0.0018192499410361052, 0.003145695198327303, 0.0028200740925967693, 0.00339452619664371, 0.006643146742135286, 0.0034467289224267006, 0.0037819398567080498, 0.003193184267729521, 0.005630164872854948, 0.0026120159309357405, 0.0162030216306448, 0.0019305632449686527, 0.0029630842618644238, 0.002291010692715645, 0.0033575131092220545, 0.0034201343078166246, 0.0037226639688014984, 0.007609753403812647, 0.0030436778906732798, 0.0042692748829722404, 0.005111592821776867, 0.019512062892317772, 0.0030549897346645594, 0.0027968608774244785, 0.003320829477161169, 0.004935575649142265, 0.006531958468258381, 0.0189801137894392]


Top-k source tokens:

['cmd', 'sproc', 'sproc', 'stdin', 'stdout', 'stop_at', 'cmd', 'stop_at', 'wait', 'sproc']


Top-k attention probs:

[0.02431299537420273, 0.019512062892317772, 0.0189801137894392, 0.018966691568493843, 0.01844608783721924, 0.017664654180407524, 0.017612237483263016, 0.01693268120288849, 0.016779430210590363, 0.0162030216306448]
