
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 20, 4, 22, 24, 8, 26, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "alimanfoo/petl/petl/transform/validation.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 381, "results": {"model": "transformer", "prob": {"loc": [[0.999936580657959, 3.7407376112241764e-06, 2.6421705712209587e-08, 2.4265489173558308e-08, 3.968549151522893e-07, 6.048565381888693e-08, 2.577447411056255e-08, 2.7566873228579425e-08, 3.552617613422626e-07, 1.9752413038531813e-07, 5.8914690015399174e-08, 4.012241916484527e-08, 5.0319506783580437e-08, 1.0005702222315449e-07, 7.109369448698999e-08, 2.359967936627072e-07, 8.032083087528008e-08, 6.15405539861058e-08, 2.3843947261070753e-08, 2.215508487779516e-08, 2.8833177566411905e-05, 7.586629635625286e-08, 4.457653091094471e-08, 8.25192216780124e-08, 1.957547829078976e-05, 9.837298975412523e-09, 8.959354147464182e-09, 6.089322113211892e-08, 8.88610247784527e-06, 3.787740467942058e-07]], "pointer": [[0.0, 0.0, 0.39812830090522766, 0.0, 0.36471521854400635, 0.0, 0.0, 0.0, 0.19039222598075867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007018272764980793, 0.0, 0.02287242002785206, 0.0, 0.004715851042419672, 0.0, 0.00724929990246892, 0.0, 0.00490836426615715, 0.0]], "target": [0.0]}, "loss": [6.353653589030728e-05, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def validate(', 'table', ',', 'constraints', '=', 'None', ',', 'header', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = (\'foo\', \'bar\', \'baz\')\\n        >>> constraints = [\\n        ...     dict(name=\'foo_int\', field=\'foo\', test=int),\\n        ...     dict(name=\'bar_date\', field=\'bar\', test=etl.dateparser(\'%Y-%m-%d\')),\\n        ...     dict(name=\'baz_enum\', field=\'baz\', assertion=lambda v: v in [\'Y\', \'N\']),\\n        ...     dict(name=\'not_none\', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = ((\'foo\', \'bar\', \'bazzz\'),\\n        ...          (1, \'2000-01-01\', \'Y\'),\\n        ...          (\'x\', \'2010-10-10\', \'N\'),\\n        ...          (2, \'2000/01/01\', \'Y\'),\\n        ...          (3, \'2015-12-12\', \'x\'),\\n        ...          (4, None, \'N\'),\\n        ...          (\'y\', \'1999-99-99\', \'z\'),\\n        ...          (6, \'2000-01-01\'),\\n        ...          (7, \'2001-02-02\', \'N\', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | \'__header__\' |   0 | None  | None         | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'foo_int\'    |   2 | \'foo\' | \'x\'          | \'ValueError\'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'bar_date\'   |   3 | \'bar\' | \'2000/01/01\' | \'ValueError\'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'baz_enum\'   |   4 | \'baz\' | \'x\'          | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'bar_date\'   |   5 | \'bar\' | None         | \'AttributeError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'not_none\'   |   5 | None  | None         | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'foo_int\'    |   6 | \'foo\' | \'y\'          | \'ValueError\'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'bar_date\'   |   6 | \'bar\' | \'1999-99-99\' | \'ValueError\'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'baz_enum\'   |   6 | \'baz\' | \'z\'          | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'__len__\'    |   7 | None  |            2 | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'baz_enum\'   |   7 | \'baz\' | None         | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | \'__len__\'    |   8 | None  |            4 | \'AssertionError\' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    "', '#NEWLINE#', 'return', 'ProblemsView', '(', 'table', ',', 'constraints', '=', 'constraints', ',', 'header', '=', 'header', ')']


All attention probs:

[0.0424906425178051, 0.02446546033024788, 0.06523508578538895, 0.034113407135009766, 0.07496002316474915, 0.033635251224040985, 0.025762496516108513, 0.025834528729319572, 0.0724024772644043, 0.02631053328514099, 0.030440306290984154, 0.027335595339536667, 0.019974004477262497, 0.02331598661839962, 0.019196385517716408, 0.02241780050098896, 0.021597806364297867, 0.031210511922836304, 0.01376426313072443, 0.013018320314586163, 0.05074169859290123, 0.015247195027768612, 0.030460475012660027, 0.017355434596538544, 0.06172892078757286, 0.02001972682774067, 0.03358536958694458, 0.022049451246857643, 0.06231110915541649, 0.03901971876621246]


Top-k source tokens:

['constraints', 'header', 'table', 'header', 'constraints', 'table', '#NEWLINE#', ')', ',', '=']


Top-k attention probs:

[0.07496002316474915, 0.0724024772644043, 0.06523508578538895, 0.06231110915541649, 0.06172892078757286, 0.05074169859290123, 0.0424906425178051, 0.03901971876621246, 0.034113407135009766, 0.033635251224040985]
