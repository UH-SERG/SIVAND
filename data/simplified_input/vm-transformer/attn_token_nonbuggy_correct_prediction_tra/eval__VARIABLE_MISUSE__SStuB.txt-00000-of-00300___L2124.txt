
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def apply(", "self", ",", "hunk", ",", "filters", ",", "type", ",", "kwargs", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Apply the given list of filters to the hunk, returning a new\\n        ``MemoryHunk`` object.\\n\\n        ``kwargs`` are options that should be passed along to the filters.\\n        If ``hunk`` is a file hunk, a ``source_path`` key will automatically\\n        be added to ``kwargs``.\\n        '", "#NEWLINE#", "assert", "(", "type", "in", "self", ".", "VALID_TRANSFORMS", ")", "#NEWLINE#", "log", ".", "debug", "(", "'Need to run method \"%s\" of filters (%s) on hunk %s with kwargs=%s'", ",", "type", ",", "filters", ",", "hunk", ",", "kwargs", ")", "#NEWLINE#", "filters", "=", "[", "f", "for", "f", "in", "filters", "if", "getattr", "(", "f", ",", "type", ",", "None", ")", "]", "#NEWLINE#", "if", "(", "not", "filters", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "debug", "(", "(", "'No filters have \"%s\" methods, returning hunk unchanged'", "%", "(", "type", ",", ")", ")", ")", "#NEWLINE#", "return", "hunk", "#NEWLINE#", "#UNINDENT#", "kwargs_final", "=", "self", ".", "kwargs", ".", "copy", "(", ")", "#NEWLINE#", "kwargs_final", ".", "update", "(", "(", "kwargs", "or", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", ")", ")", "#NEWLINE#", "def func(", ")", ":", "#NEWLINE#", "#INDENT#", "data", "=", "StringIO", "(", "hunk", ".", "data", "(", ")", ")", "#NEWLINE#", "for", "filter", "in", "filters", ":", "#NEWLINE#", "#INDENT#", "log", ".", "debug", "(", "'Running method \"%s\" of  %s with kwargs=%s'", ",", "type", ",", "filter", ",", "kwargs_final", ")", "#NEWLINE#", "out", "=", "StringIO", "(", "''", ")", "#NEWLINE#", "getattr", "(", "filter", ",", "type", ")", "(", "data", ",", "out", ",", "**", "kwargs_final", ")", "#NEWLINE#", "data", "=", "out", "#NEWLINE#", "data", ".", "seek", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "return", "data", "#NEWLINE#", "#UNINDENT#", "additional_cache_keys", "=", "[", "]", "#NEWLINE#", "if", "kwargs_final", ":", "#NEWLINE#", "#INDENT#", "for", "filter", "in", "filters", ":", "#NEWLINE#", "#INDENT#", "additional_cache_keys", "+=", "filter", ".", "get_additional_cache_keys", "(", "**", "kwargs_final", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "key", "=", "(", "'hunk'", ",", "hunk", ",", "tuple", "(", "filters", ")", ",", "type", ",", "additional_cache_keys", ")", "#NEWLINE#", "return", "self", ".", "_wrap_cache", "(", "key", ",", "func", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [131, 145, 159, 199, 207, 2, 23, 90, 235, 241, 8, 21, 34, 56, 78, 143, 161, 229, 6, 36, 43, 50, 65, 133, 201, 226, 188, 205, 231, 217, 239, 88, 98, 147, 169, 194, 212, 46, 48, 54, 4, 38, 85, 123, 222, 10, 40, 92, 103], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "miracle2k/webassets/src/webassets/merge.py", "license": "bsd-2-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2124, "results": {"model": "transformer", "prob": {"loc": [[0.6186304688453674, 2.3440543372998945e-06, 5.809881713503273e-07, 6.098557037148566e-08, 1.9143369627272477e-06, 6.949801445443882e-08, 2.709637556108646e-06, 5.8651259848829795e-08, 4.508392066782108e-06, 4.023632982352865e-08, 6.691990620311117e-06, 3.135502595341677e-07, 1.0542487416387303e-07, 6.486978065822768e-08, 1.0558847662878179e-07, 2.379071446512171e-07, 1.6371309641272092e-07, 4.570242140289338e-07, 2.1103492997553985e-07, 1.1186430981524609e-07, 1.560444502501923e-07, 0.005374026484787464, 3.5136864084961417e-07, 6.275914347497746e-05, 5.6460123687429586e-08, 8.244542470947636e-08, 1.5338144976340118e-07, 2.028076977467208e-07, 5.209186042520741e-07, 2.7245105727047303e-08, 5.64717517193003e-08, 2.076577345633268e-07, 1.4735808235855075e-06, 7.567771262984024e-07, 0.002894115401431918, 1.4498997416012571e-06, 0.014763490296900272, 1.1918170912394999e-06, 0.0024914464447647333, 2.251488808724389e-07, 0.00028427879442460835, 1.3629856709940213e-07, 2.1398363969638012e-07, 8.659311788505875e-06, 1.2076949928996328e-07, 1.790323221939616e-05, 7.21634496585466e-05, 1.3836134939992917e-06, 2.7460077944851946e-06, 7.694753634268636e-08, 0.008089502342045307, 3.059356822632253e-05, 4.5434026674229244e-07, 3.8956480352680956e-07, 0.0010794993722811341, 1.0307237516826717e-06, 0.0020113871432840824, 9.5604048055975e-07, 1.007452056001057e-06, 5.527767825697083e-07, 2.676158032954845e-07, 3.6474799003372027e-07, 2.321094143553637e-07, 1.8979853848577477e-06, 1.807774197004619e-06, 0.0030391684267669916, 2.0468858963340608e-07, 5.09187486841256e-07, 3.938870918318571e-07, 2.2951164169171534e-07, 2.782331591788534e-07, 4.116568774747975e-08, 6.203723046382947e-08, 6.671891839005184e-08, 2.713163098633231e-07, 4.526069403709698e-07, 2.8572500809787016e-07, 6.296921242210374e-07, 0.004497654270380735, 5.828183589073888e-07, 9.819086699280888e-07, 3.652858140412718e-07, 2.207490439332105e-07, 2.98852086189072e-07, 1.4293547678789764e-07, 0.06074460223317146, 1.6603986807695037e-07, 9.649921395293859e-08, 2.1194102828303585e-06, 1.342667559356414e-07, 4.121581696381327e-06, 6.320773593415652e-08, 2.3530613191269367e-07, 8.808955698214049e-08, 8.92281946107687e-08, 1.5960804375936277e-05, 6.955752951398608e-07, 3.0776845960645005e-07, 1.8146281490771798e-06, 3.721741848039528e-08, 4.422011841143103e-07, 2.1042579589902743e-07, 3.021411032477772e-07, 0.017547452822327614, 5.4116799219627865e-06, 3.146683638988179e-06, 4.449080108770431e-07, 2.134260199682103e-07, 2.649716179803363e-07, 2.2705827973368287e-07, 2.7924915002586204e-07, 2.419181157620187e-07, 1.3860415037925122e-07, 1.8137779989046976e-07, 1.2314795640122611e-05, 1.5789754570505465e-07, 2.5983942464335996e-07, 1.971712038084661e-07, 1.5382885010239988e-07, 3.4653385228011757e-06, 8.04493822670338e-08, 2.7503412525220483e-07, 1.6726633589314588e-07, 5.6106559895852115e-06, 1.4400995951291407e-07, 3.826201009360375e-06, 6.013646270730533e-06, 5.935578428761801e-07, 3.8165993032635015e-07, 2.688698259589728e-07, 2.531189977617032e-07, 1.3131114428688306e-05, 9.557299307516587e-08, 0.0020178696140646935, 4.7620582677154744e-07, 2.308064068756721e-07, 1.1403886901462101e-07, 1.4688028215914528e-07, 2.7762233401062986e-08, 8.697671916024774e-08, 2.1910553016368794e-07, 7.586364745293395e-07, 3.3047749070647114e-07, 0.015182341448962688, 2.0941538991792186e-07, 0.0038717850111424923, 1.3420184075130237e-07, 0.0018324545817449689, 1.8951175206893822e-07, 2.0601972039457905e-07, 3.3375486054865178e-06, 1.0797786842431378e-07, 1.745112626849732e-06, 2.1700968773075147e-06, 2.000991344175418e-06, 8.454690600956383e-07, 3.187079187227937e-07, 1.7970918975152017e-07, 1.6838797023410734e-07, 9.770625183591619e-05, 3.695683972182451e-07, 0.00012186021922389045, 8.16935141756403e-08, 2.4867816250662145e-07, 0.004517443012446165, 2.8888359793199925e-07, 0.00459738913923502, 4.805617663805606e-07, 4.2875672079389915e-07, 0.010597935877740383, 1.1020003967132652e-06, 4.082534132976434e-07, 1.1833595635835081e-05, 2.9765635645162547e-07, 0.0043111443519592285, 2.984317006848869e-07, 4.026976512250258e-06, 1.2470299282085762e-07, 3.565183348541723e-08, 7.255561058627791e-07, 7.662852294743061e-05, 5.346760644897586e-06, 2.2277649804891553e-06, 9.665859579399694e-07, 2.550855242589023e-07, 0.0025509942788630724, 6.489697739198164e-07, 8.629414764982357e-07, 1.4197986274666619e-05, 2.133439238605206e-06, 2.7574351406656206e-05, 2.6270145099260844e-06, 1.4174695479596267e-06, 3.754126112198719e-07, 0.037228990346193314, 4.759559033118421e-06, 1.7518024151286227e-06, 1.2625980616576271e-06, 2.970819195979857e-06, 4.201612318865955e-05, 2.0672905520768836e-07, 0.015284671448171139, 5.459724434331292e-06, 1.3994131222716533e-06, 3.848867322631122e-07, 3.7929708923911676e-05, 1.384048289310158e-07, 6.611762273678323e-06, 1.4672164638795948e-07, 6.966161549826211e-07, 1.9348938167240703e-06, 1.894995534712507e-06, 0.015014398843050003, 1.8110080191036104e-06, 6.238653327272914e-07, 6.138435537650366e-07, 4.448519916877558e-07, 2.7281741949991556e-06, 1.0942935659841169e-06, 4.937737685395405e-07, 1.3099971511110198e-05, 1.4726831523148576e-06, 0.00540503254160285, 3.9242399907379877e-07, 2.366320757118956e-07, 3.7044986811451963e-07, 0.05895714461803436, 5.489318368745444e-07, 5.208649440646695e-07, 0.017871031537652016, 1.0382372011008556e-06, 0.006184802856296301, 3.3609837828407763e-06, 1.6756644072302151e-06, 6.457236736423511e-07, 6.285521294557839e-07, 1.0417527107620117e-07, 2.3750825306478873e-08, 5.306960702000652e-07, 0.0031795522663742304, 2.332289568585111e-06, 0.04908566549420357, 4.226228611514671e-06]], "pointer": [[0.0, 0.0, 0.023466935381293297, 0.0, 0.051570504903793335, 0.0, 0.04901350662112236, 0.0, 0.050411392003297806, 0.0, 0.056087106466293335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010457158088684082, 0.0, 0.0010643922723829746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012451060116291046, 0.0, 0.020180150866508484, 0.0, 0.030110375955700874, 0.0, 0.003078127047047019, 0.0, 0.0, 0.25357377529144287, 0.0, 0.0, 8.198374416679144e-05, 0.0, 0.0016911528073251247, 0.0, 0.0003889751387760043, 0.0, 0.0, 0.0, 0.0004544517141766846, 0.0, 0.005219552665948868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.018542667850852013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00682629831135273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006403443403542042, 0.0, 0.0, 0.026853984221816063, 0.0, 0.0014723470667377114, 0.0, 0.006227899342775345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013438479043543339, 0.0, 0.0, 0.0, 0.0, 0.001406223513185978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008570341393351555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011185942217707634, 0.0, 0.000820034125354141, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002552035730332136, 0.0, 0.00036786479176953435, 0.0, 0.0043494803830981255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015318651683628559, 0.0, 0.03739212825894356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004578193183988333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04804929718375206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005063421558588743, 0.0, 0.0, 0.0, 0.0, 0.030136961489915848, 0.0, 0.0050584301352500916, 0.0, 0.0, 0.0, 0.05667237192392349, 0.0, 9.65325889410451e-05, 0.0, 0.0, 0.0, 0.0, 0.013106917031109333, 0.0, 0.0, 0.0, 0.0, 0.04604385048151016, 0.0, 0.0, 0.0, 0.0, 0.0220700204372406, 0.0, 0.0, 0.0, 0.01790989190340042, 0.0, 0.0, 0.012158636935055256, 0.0, 0.0008664244669489563, 0.0, 0.0, 0.0, 0.0002536279207561165, 0.0, 0.0, 0.0, 0.0013316652039065957, 0.0, 0.005575374234467745, 0.0]], "target": [0.0]}, "loss": [0.4802473187446594, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def apply(', 'self', ',', 'hunk', ',', 'filters', ',', 'type', ',', 'kwargs', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', "'Apply the given list of filters to the hunk, returning a new\\n        ``MemoryHunk`` object.\\n\\n        ``kwargs`` are options that should be passed along to the filters.\\n        If ``hunk`` is a file hunk, a ``source_path`` key will automatically\\n        be added to ``kwargs``.\\n        '", '#NEWLINE#', 'assert', '(', 'type', 'in', 'self', '.', 'VALID_TRANSFORMS', ')', '#NEWLINE#', 'log', '.', 'debug', '(', '\'Need to run method "%s" of filters (%s) on hunk %s with kwargs=%s\'', ',', 'type', ',', 'filters', ',', 'hunk', ',', 'kwargs', ')', '#NEWLINE#', 'filters', '=', '[', 'f', 'for', 'f', 'in', 'filters', 'if', 'getattr', '(', 'f', ',', 'type', ',', 'None', ')', ']', '#NEWLINE#', 'if', '(', 'not', 'filters', ')', ':', '#NEWLINE#', '#INDENT#', 'log', '.', 'debug', '(', '(', '\'No filters have "%s" methods, returning hunk unchanged\'', '%', '(', 'type', ',', ')', ')', ')', '#NEWLINE#', 'return', 'hunk', '#NEWLINE#', '#UNINDENT#', 'kwargs_final', '=', 'self', '.', 'kwargs', '.', 'copy', '(', ')', '#NEWLINE#', 'kwargs_final', '.', 'update', '(', '(', 'kwargs', 'or', '{', '#NEWLINE#', '#INDENT#', '#NEWLINE#', '#UNINDENT#', '}', ')', ')', '#NEWLINE#', 'def func(', ')', ':', '#NEWLINE#', '#INDENT#', 'data', '=', 'StringIO', '(', 'hunk', '.', 'data', '(', ')', ')', '#NEWLINE#', 'for', 'filter', 'in', 'filters', ':', '#NEWLINE#', '#INDENT#', 'log', '.', 'debug', '(', '\'Running method "%s" of  %s with kwargs=%s\'', ',', 'type', ',', 'filter', ',', 'kwargs_final', ')', '#NEWLINE#', 'out', '=', 'StringIO', '(', "''", ')', '#NEWLINE#', 'getattr', '(', 'filter', ',', 'type', ')', '(', 'data', ',', 'out', ',', '**', 'kwargs_final', ')', '#NEWLINE#', 'data', '=', 'out', '#NEWLINE#', 'data', '.', 'seek', '(', '0', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'data', '#NEWLINE#', '#UNINDENT#', 'additional_cache_keys', '=', '[', ']', '#NEWLINE#', 'if', 'kwargs_final', ':', '#NEWLINE#', '#INDENT#', 'for', 'filter', 'in', 'filters', ':', '#NEWLINE#', '#INDENT#', 'additional_cache_keys', '+=', 'filter', '.', 'get_additional_cache_keys', '(', '**', 'kwargs_final', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'key', '=', '(', "'hunk'", ',', 'hunk', ',', 'tuple', '(', 'filters', ')', ',', 'type', ',', 'additional_cache_keys', ')', '#NEWLINE#', 'return', 'self', '.', '_wrap_cache', '(', 'key', ',', 'func', ')']


All attention probs:

[0.007068750914186239, 0.00685673113912344, 0.028127949684858322, 0.010248899459838867, 0.011870228685438633, 0.006837125401943922, 0.010592297650873661, 0.005557919852435589, 0.014084436930716038, 0.007318152114748955, 0.01184955146163702, 0.007888964377343655, 0.006929014343768358, 0.00661007035523653, 0.006026867777109146, 0.006582803558558226, 0.005903155542910099, 0.006239587441086769, 0.005795979872345924, 0.005328424274921417, 0.0044745770283043385, 0.01108566764742136, 0.0036126994527876377, 0.00724799232557416, 0.0030859762337058783, 0.002831169171258807, 0.0024556885473430157, 0.003598009468987584, 0.0035793795250356197, 0.0023948862217366695, 0.0032306439243257046, 0.002705969149246812, 0.004976076539605856, 0.002994608599692583, 0.008217856287956238, 0.002845574403181672, 0.01049085147678852, 0.0032997301314026117, 0.01036441046744585, 0.0039253197610378265, 0.008541282266378403, 0.003566581988707185, 0.0048280381597578526, 0.01022253092378378, 0.0030563292093575, 0.002785017481073737, 0.005225681234151125, 0.0025323256850242615, 0.0075266920030117035, 0.002980458550155163, 0.007993299514055252, 0.0024798254016786814, 0.001698843901976943, 0.0017145901219919324, 0.007235212251543999, 0.002092541428282857, 0.007470048498362303, 0.0019323910819366574, 0.0019456172594800591, 0.0024531034287065268, 0.0020466474816203117, 0.0024107308126986027, 0.0025232122279703617, 0.0021021703723818064, 0.00201412383466959, 0.007740138564258814, 0.002203515497967601, 0.002427712781354785, 0.0028344285674393177, 0.0028497907333076, 0.004058706574141979, 0.001542559708468616, 0.0023947027511894703, 0.0019801869057118893, 0.0020316396839916706, 0.0019677325617522, 0.001739349914714694, 0.0016291801584884524, 0.008559869602322578, 0.001805535051971674, 0.0017179443966597319, 0.0017180446302518249, 0.0016513157170265913, 0.0027317970525473356, 0.0023272880353033543, 0.01588243804872036, 0.0025124801322817802, 0.002780816750600934, 0.006871914025396109, 0.002169173676520586, 0.005914425011724234, 0.0011703787604346871, 0.001234434894286096, 0.0011930372565984726, 0.0013617165386676788, 0.002568906405940652, 0.002079491503536701, 0.0027888764161616564, 0.0052674030885100365, 0.0013070101849734783, 0.0017350757261738181, 0.0018418198451399803, 0.0019135267939418554, 0.007485927548259497, 0.0032118589151650667, 0.0018612118437886238, 0.0024113794788718224, 0.0018771681934595108, 0.0020262638572603464, 0.002289708936586976, 0.0029119951650500298, 0.003290555439889431, 0.0022186399437487125, 0.0027712525334209204, 0.005937851034104824, 0.0036975012626498938, 0.001972211990505457, 0.0021506419871002436, 0.0021919209975749254, 0.005246356129646301, 0.0031017132569104433, 0.002140921540558338, 0.00171958701685071, 0.007908055558800697, 0.0014450900489464402, 0.0017452170141041279, 0.0023905581329017878, 0.0016727872425690293, 0.0015681296354159713, 0.002892385935410857, 0.0018295695772394538, 0.007046281360089779, 0.0022230998147279024, 0.006930968724191189, 0.0016615305794402957, 0.0020417666528373957, 0.0019222934497520328, 0.0028049235697835684, 0.0010323416208848357, 0.001902467804029584, 0.0018861358985304832, 0.0023290058597922325, 0.001626260345801711, 0.00929650105535984, 0.0016404270427301526, 0.008411204442381859, 0.00182962731923908, 0.007486587390303612, 0.0016267800237983465, 0.002473181579262018, 0.007333345245569944, 0.003221220802515745, 0.002991695189848542, 0.0024555244017392397, 0.002899081911891699, 0.0022620835807174444, 0.0031398895662277937, 0.001922513241879642, 0.0027950576040893793, 0.007826601155102253, 0.0024846200831234455, 0.0051964581944048405, 0.0021455015521496534, 0.002377646742388606, 0.010691159404814243, 0.0017002042150124907, 0.010661634616553783, 0.0014570547500625253, 0.001992184668779373, 0.0085251210257411, 0.0015503207687288523, 0.002504813252016902, 0.005814774893224239, 0.00277157174423337, 0.00682481937110424, 0.0026022258680313826, 0.004388654604554176, 0.001198019366711378, 0.0017443120013922453, 0.0020754365250468254, 0.003908567130565643, 0.0017715452704578638, 0.002607496688142419, 0.0028214622288942337, 0.003208162961527705, 0.008630619384348392, 0.003648207290098071, 0.00498316390439868, 0.005952201783657074, 0.005674561019986868, 0.003490977920591831, 0.0028694733045995235, 0.003381932619959116, 0.003401860361918807, 0.011945892125368118, 0.002553361002355814, 0.0025027808733284473, 0.002237927634268999, 0.00192790268920362, 0.006922634318470955, 0.0020861898083239794, 0.007840337231755257, 0.0019428342347964644, 0.00230042589828372, 0.002080635167658329, 0.004911819007247686, 0.00269114738330245, 0.003940648399293423, 0.001292429049499333, 0.0021532392129302025, 0.0018141508335247636, 0.002261589514091611, 0.008415215648710728, 0.002009955933317542, 0.0024692274164408445, 0.002173749729990959, 0.002148363273590803, 0.006669280119240284, 0.0016438921447843313, 0.00140944286249578, 0.003182155778631568, 0.0016603067051619291, 0.0064848363399505615, 0.002295759040862322, 0.0036982018500566483, 0.0026500059757381678, 0.013433237560093403, 0.002365648513659835, 0.0026077621150761843, 0.008847912773489952, 0.00205037253908813, 0.008366197347640991, 0.0015558218583464622, 0.002158393617719412, 0.0026932803448289633, 0.006117627024650574, 0.0010232621571049094, 0.0015555414138361812, 0.001615570392459631, 0.006531912833452225, 0.0017019198276102543, 0.014062664471566677, 0.0019392567919567227]


Top-k source tokens:

['self', 'hunk', 'type', 'func', 'filters', 'kwargs_final', 'hunk', 'kwargs', 'type', 'data']


Top-k attention probs:

[0.028127949684858322, 0.01588243804872036, 0.014084436930716038, 0.014062664471566677, 0.013433237560093403, 0.011945892125368118, 0.011870228685438633, 0.01184955146163702, 0.01108566764742136, 0.010691159404814243]
