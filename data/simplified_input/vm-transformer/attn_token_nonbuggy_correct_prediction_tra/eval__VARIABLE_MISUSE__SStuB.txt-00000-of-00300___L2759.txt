
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def maximum(", "self", ",", "event_collection", ",", "target_property", ",", "timeframe", "=", "None", ",", "timezone", "=", "None", ",", "interval", "=", "None", ",", "filters", "=", "None", ",", "group_by", "=", "None", ",", "max_age", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "' Performs a maximum query\\n\\n        Finds the maximum value of a target property for events that meet the given criteria.\\n\\n        :param event_collection: string, the name of the collection to query\\n        :param target_property: string, the name of the event property you would like use\\n        :param timeframe: string or dict, the timeframe in which the events\\n        happened example: \"previous_7_days\"\\n        :param timezone: int, the timezone you\\'d like to use for the timeframe\\n        and interval in seconds\\n        :param interval: string, the time interval used for measuring data over\\n        time example: \"daily\"\\n        :param filters: array of dict, contains the filters you\\'d like to apply to the data\\n        example: [{\"property_name\":\"device\", \"operator\":\"eq\", \"property_value\":\"iPhone\"}]\\n        :param group_by: string or array of strings, the name(s) of the properties you would\\n        like to group you results by.  example: \"customer.id\" or [\"browser\",\"operating_system\"]\\n        :param max_age: an integer, greater than 30 seconds, the maximum \\'staleness\\' you\\'re\\n        willing to trade for increased query performance, in seconds\\n\\n        '", "#NEWLINE#", "params", "=", "self", ".", "get_params", "(", "event_collection", "=", "event_collection", ",", "timeframe", "=", "timeframe", ",", "timezone", "=", "timezone", ",", "interval", "=", "interval", ",", "filters", "=", "filters", ",", "group_by", "=", "group_by", ",", "target_property", "=", "target_property", ",", "max_age", "=", "max_age", ")", "#NEWLINE#", "return", "self", ".", "api", ".", "query", "(", "'maximum'", ",", "params", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [12, 51, 53, 28, 71, 73, 2, 39, 77, 37, 85, 16, 55, 57, 20, 59, 61, 6, 67, 69, 24, 63, 65, 8, 47, 49, 4, 43, 45], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "keenlabs/KeenClient-Python/keen/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2759, "results": {"model": "transformer", "prob": {"loc": [[0.9987972974777222, 3.284688773419475e-06, 1.6158692517365125e-07, 1.8458109707353287e-08, 1.983500936830751e-07, 1.474601152295918e-08, 1.622527065592294e-06, 5.840038674875814e-09, 6.078004730625253e-07, 2.647610308770254e-08, 3.2768647795222705e-09, 2.3902462231717436e-09, 1.818284772525658e-06, 1.812033723069817e-08, 1.2745020150362052e-08, 3.5692357958083676e-09, 1.2137537623857497e-06, 1.606065147541358e-08, 2.1335912592235218e-08, 3.6191007968255917e-09, 7.682182285861927e-07, 5.382890932992268e-08, 1.247707093199324e-08, 3.4480520660906677e-09, 1.612137452866591e-06, 5.325579266468594e-08, 1.15436762371246e-08, 3.214747357205283e-09, 2.6592381345835747e-06, 5.816763248844836e-08, 1.05803108496616e-08, 3.082018862343716e-09, 6.31685566077067e-08, 9.997695826768904e-08, 4.3528832094352765e-08, 4.918622380500892e-07, 7.713429539535355e-08, 7.220948532449256e-07, 4.267680964176179e-08, 2.037807291799254e-07, 6.297727139781273e-08, 9.50101366470335e-07, 5.380447731795357e-08, 1.725786319184408e-06, 7.825728687294031e-08, 1.8964967239298858e-05, 2.960063305579297e-08, 4.000741569143429e-07, 6.207616110032177e-08, 2.608222894195933e-05, 1.4431646100376838e-08, 6.537452463817317e-07, 2.7440934857736465e-08, 8.023020200198516e-05, 9.32452604018863e-09, 7.921071443206529e-08, 6.122529327967641e-08, 1.8386754163657315e-05, 8.778950899568372e-09, 1.364639956591418e-07, 6.391292117768899e-08, 9.233712262357585e-06, 8.139979357224547e-09, 1.3625442534248577e-06, 4.119544882996706e-08, 0.0003680800145957619, 8.35926439179957e-09, 2.034668113992666e-06, 5.152128323970828e-08, 2.933659197879024e-05, 9.693384761533252e-09, 1.2737353927150252e-06, 1.9031650921874643e-08, 0.00016745235188864172, 3.7847459566364705e-07, 5.36108416326897e-07, 2.263662146617662e-08, 3.9303299104176403e-07, 7.772829491159428e-08, 4.939558984062842e-09, 1.4414473525903304e-07, 5.388684343188288e-08, 7.8263440173032e-07, 5.919717750657583e-06, 9.405410850149565e-08, 0.0004508131241891533, 4.207369386222126e-07]], "pointer": [[0.0, 0.0, 0.007914521731436253, 0.0, 0.11272478848695755, 0.0, 0.312957227230072, 0.0, 0.044835399836301804, 0.0, 0.0, 0.0, 0.028962668031454086, 0.0, 0.0, 0.0, 0.10103186219930649, 0.0, 0.0, 0.0, 0.06443079560995102, 0.0, 0.0, 0.0, 0.05377883091568947, 0.0, 0.0, 0.0, 0.06716638058423996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1646445244550705, 0.0, 0.014171314425766468, 0.0, 0.0, 0.0, 0.004151683300733566, 0.0, 0.0002452972694300115, 0.0, 0.0011760992929339409, 0.0, 0.00025857705622911453, 0.0, 0.003340275026857853, 0.0, 8.079085091594607e-05, 0.0, 0.0070133693516254425, 0.0, 0.00022302259458228946, 0.0, 0.002941461279988289, 0.0, 0.0003385534801054746, 0.0, 0.0004034448938909918, 0.0, 5.4011165047995746e-05, 0.0, 0.003761443542316556, 0.0, 0.0007134811021387577, 0.0, 0.0008660887251608074, 0.0, 0.00015953488764353096, 0.0, 0.0, 0.0, 0.0009040567674674094, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007505101384595037, 0.0]], "target": [0.0]}, "loss": [0.0012036467669531703, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


All source tokens:

['#NEWLINE#', 'def maximum(', 'self', ',', 'event_collection', ',', 'target_property', ',', 'timeframe', '=', 'None', ',', 'timezone', '=', 'None', ',', 'interval', '=', 'None', ',', 'filters', '=', 'None', ',', 'group_by', '=', 'None', ',', 'max_age', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '\' Performs a maximum query\\n\\n        Finds the maximum value of a target property for events that meet the given criteria.\\n\\n        :param event_collection: string, the name of the collection to query\\n        :param target_property: string, the name of the event property you would like use\\n        :param timeframe: string or dict, the timeframe in which the events\\n        happened example: "previous_7_days"\\n        :param timezone: int, the timezone you\\\'d like to use for the timeframe\\n        and interval in seconds\\n        :param interval: string, the time interval used for measuring data over\\n        time example: "daily"\\n        :param filters: array of dict, contains the filters you\\\'d like to apply to the data\\n        example: [{"property_name":"device", "operator":"eq", "property_value":"iPhone"}]\\n        :param group_by: string or array of strings, the name(s) of the properties you would\\n        like to group you results by.  example: "customer.id" or ["browser","operating_system"]\\n        :param max_age: an integer, greater than 30 seconds, the maximum \\\'staleness\\\' you\\\'re\\n        willing to trade for increased query performance, in seconds\\n\\n        \'', '#NEWLINE#', 'params', '=', 'self', '.', 'get_params', '(', 'event_collection', '=', 'event_collection', ',', 'timeframe', '=', 'timeframe', ',', 'timezone', '=', 'timezone', ',', 'interval', '=', 'interval', ',', 'filters', '=', 'filters', ',', 'group_by', '=', 'group_by', ',', 'target_property', '=', 'target_property', ',', 'max_age', '=', 'max_age', ')', '#NEWLINE#', 'return', 'self', '.', 'api', '.', 'query', '(', "'maximum'", ',', 'params', ')']


All attention probs:

[0.018572619184851646, 0.010942664928734303, 0.05482448637485504, 0.01598306931555271, 0.01831476017832756, 0.012797006405889988, 0.022385284304618835, 0.01229709479957819, 0.025932643562555313, 0.012011365033686161, 0.013249454088509083, 0.01352596189826727, 0.030724484473466873, 0.01049609761685133, 0.008777668699622154, 0.008870384655892849, 0.024644916877150536, 0.009213619865477085, 0.0073121641762554646, 0.007947586476802826, 0.02125636301934719, 0.007041208911687136, 0.006296714302152395, 0.006786905694752932, 0.019412096589803696, 0.00684303417801857, 0.005292655434459448, 0.005811143666505814, 0.017380379140377045, 0.006300149019807577, 0.006459426134824753, 0.0064025260508060455, 0.007183164358139038, 0.0077647375874221325, 0.007514639291912317, 0.006461525335907936, 0.008818632923066616, 0.0167238712310791, 0.007324426434934139, 0.01237897202372551, 0.003388861892744899, 0.007085113320499659, 0.008081805892288685, 0.011766823008656502, 0.005081494338810444, 0.019328756257891655, 0.006123033352196217, 0.008743121288716793, 0.0048336428590118885, 0.01882229745388031, 0.004995997063815594, 0.008030802011489868, 0.004362121690064669, 0.02161543443799019, 0.004952115472406149, 0.008949208073318005, 0.004540604073554277, 0.020893866196274757, 0.005322300363332033, 0.010932682082057, 0.005161481909453869, 0.021245310083031654, 0.006275113672018051, 0.010262837633490562, 0.008210297673940659, 0.02255365625023842, 0.010571321472525597, 0.01323655154556036, 0.00800945796072483, 0.0187806636095047, 0.008027675561606884, 0.01219901442527771, 0.00641583651304245, 0.025046277791261673, 0.004418579395860434, 0.007978353649377823, 0.00843735784292221, 0.011069467291235924, 0.002830642042681575, 0.004764431621879339, 0.003595542162656784, 0.005860920529812574, 0.006162920035421848, 0.011445890180766582, 0.007207455113530159, 0.024883950129151344, 0.009223002009093761]


Top-k source tokens:

['self', 'timezone', 'timeframe', 'max_age', 'params', 'interval', 'group_by', 'target_property', 'timezone', 'filters']


Top-k attention probs:

[0.05482448637485504, 0.030724484473466873, 0.025932643562555313, 0.025046277791261673, 0.024883950129151344, 0.024644916877150536, 0.02255365625023842, 0.022385284304618835, 0.02161543443799019, 0.02125636301934719]
