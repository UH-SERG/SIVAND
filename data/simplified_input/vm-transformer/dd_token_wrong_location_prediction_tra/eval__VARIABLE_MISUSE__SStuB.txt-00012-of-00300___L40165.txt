
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    .. versionadded:: 2014.7.0\\n\\n    Recurse through etcd and return all values.  Returns None on failure.\\n\\n    CLI Example:\\n\\n\\n    .. code-block:: bash\\n\\n        salt myminion etcd.tree\\n        salt myminion etcd.tree profile=my_etcd_config\\n        salt myminion etcd.tree /path/to/keys profile=my_etcd_config\\n    '", "#NEWLINE#", "client", "=", "__utils__", "[", "'etcd_util.get_conn'", "]", "(", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"], "error_location": [32], "repair_targets": [2], "repair_candidates": [6, 24, 32, 2, 15, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "saltstack/salt/salt/modules/etcd_mod.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00012-of-00300", "js_count": 40165, "results": {"model": "transformer", "prob": {"loc": [[0.0029310828540474176, 1.6593713780821417e-06, 1.174852855001518e-06, 6.895010784546685e-08, 8.665139716867998e-08, 1.9630492786859577e-08, 9.884407745630597e-07, 9.498759112602784e-08, 1.6092444710125164e-08, 7.895302189808717e-09, 2.1719364085015513e-08, 4.5029025841358816e-08, 1.908770030922824e-08, 5.85161359367703e-08, 2.7424761128713726e-08, 2.6371644707978703e-06, 4.646380702411079e-08, 0.0005963551811873913, 1.613540734979324e-05, 1.7511401892988943e-06, 1.8967811001857626e-06, 2.1345525169635948e-07, 7.181068212958053e-05, 2.9163256840547547e-06, 0.5182135701179504, 1.9582646473281784e-06, 6.514280812552897e-07, 1.7828034515332547e-07, 5.00451093898846e-08, 7.668374379932175e-09, 1.1605592042940316e-09, 4.1690181973308427e-08, 0.47815388441085815, 4.745318449295155e-07]], "pointer": [[0.0, 0.0, 0.9998706579208374, 0.0, 0.0, 0.0, 3.2792809179227334e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012147315283073112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1009825051644384e-08, 0.0, 0.0, 0.0, 4.35316269431496e-06, 0.0, 0.0, 0.0, 1.7004387586894154e-07, 0.0]], "target": [0.9998706579208374]}, "loss": [0.7378225326538086, 0.00012935044651385397], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [24]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 07:01:16.451861", "n_pass": [1, 1, 1], "n_token": 34, "loss": [0.6573677062988281, 0.00012935044651385397], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    .. versionadded:: 2014.7.0\\n\\n    Recurse through etcd and return all values.  Returns None on failure.\\n\\n    CLI Example:\\n\\n\\n    .. code-block:: bash\\n\\n        salt myminion etcd.tree\\n        salt myminion etcd.tree profile=my_etcd_config\\n        salt myminion etcd.tree /path/to/keys profile=my_etcd_config\\n    '", "#NEWLINE#", "client", "=", "__utils__", "[", "'etcd_util.get_conn'", "]", "(", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [6, 24, 32, 2, 15, 28]}}
{"prediction": {"error_location": 0.5182135701179504, "repair_targets": [0.9998706579208374], "repair_candidates": [0.9998706579208374, 3.2792809179227334e-06, 0.00012147315283073112, 1.1009825051644384e-08, 4.35316269431496e-06, 1.7004387586894154e-07], "target_probs": 0.9998706579208374}}


{"result": {"time": "2021-02-21 07:01:16.508333", "n_pass": [22, 2, 2], "n_token": 30, "loss": [0.5397862792015076, 7.915810419945046e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#INDENT#", "'\\n    .. versionadded:: 2014.7.0\\n\\n    Recurse through etcd and return all values.  Returns None on failure.\\n\\n    CLI Example:\\n\\n\\n    .. code-block:: bash\\n\\n        salt myminion etcd.tree\\n        salt myminion etcd.tree profile=my_etcd_config\\n        salt myminion etcd.tree /path/to/keys profile=my_etcd_config\\n    '", "#NEWLINE#", "client", "=", "__utils__", "[", "'etcd_util.get_conn'", "]", "(", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2], "repair_candidates": [6, 20, 28, 2, 11, 24]}}
{"prediction": {"error_location": 0.582872748374939, "repair_targets": [0.9999208450317383], "repair_candidates": [0.9999208450317383, 9.74610770754225e-07, 7.628310413565487e-05, 1.7524492967879723e-09, 1.9272540612291778e-06, 3.3093296991637544e-08], "target_probs": 0.9999208450317383}}


{"result": {"time": "2021-02-21 07:01:16.563882", "n_pass": [23, 3, 3], "n_token": 26, "loss": [0.2332315742969513, 0.00014639971777796745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#INDENT#", "'\\n    .. versionadded:: 2014.7.0\\n\\n    Recurse through etcd and return all values.  Returns None on failure.\\n\\n    CLI Example:\\n\\n\\n    .. code-block:: bash\\n\\n        salt myminion etcd.tree\\n        salt myminion etcd.tree profile=my_etcd_config\\n        salt myminion etcd.tree /path/to/keys profile=my_etcd_config\\n    '", "#NEWLINE#", "client", "]", "(", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [6, 16, 24, 2, 11, 20]}}
{"prediction": {"error_location": 0.7919700741767883, "repair_targets": [0.9998536109924316], "repair_candidates": [0.9998536109924316, 7.930802894406952e-06, 0.00013384419435169548, 2.4277408527950683e-08, 4.388514753372874e-06, 6.608554059539529e-08], "target_probs": 0.9998536109924316}}


{"result": {"time": "2021-02-21 07:01:16.675703", "n_pass": [42, 5, 4], "n_token": 24, "loss": [0.20735721290111542, 0.0001326887431787327], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#INDENT#", "'\\n    .. versionadded:: 2014.7.0\\n\\n    Recurse through etcd and return all values.  Returns None on failure.\\n\\n    CLI Example:\\n\\n\\n    .. code-block:: bash\\n\\n        salt myminion etcd.tree\\n        salt myminion etcd.tree profile=my_etcd_config\\n        salt myminion etcd.tree /path/to/keys profile=my_etcd_config\\n    '", "#NEWLINE#", "client", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [6, 14, 22, 2, 11, 18]}}
{"prediction": {"error_location": 0.8127292990684509, "repair_targets": [0.99986732006073], "repair_candidates": [0.99986732006073, 3.2654497772455215e-05, 7.696766260778531e-05, 3.609128782500193e-07, 2.2487498426926322e-05, 1.8371939347616717e-07], "target_probs": 0.99986732006073}}


{"result": {"time": "2021-02-21 07:01:16.901804", "n_pass": [51, 9, 5], "n_token": 22, "loss": [0.3230375051498413, 0.00014949962496757507], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", ",", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [6, 12, 20, 2, 9, 16]}}
{"prediction": {"error_location": 0.7239466905593872, "repair_targets": [0.9998505115509033], "repair_candidates": [0.9998505115509033, 2.6748950403998606e-05, 9.972610860131681e-05, 1.0596605193313735e-07, 2.2716807507094927e-05, 1.6155058801814448e-07], "target_probs": 0.9998505115509033}}


{"result": {"time": "2021-02-21 07:01:17.292990", "n_pass": [85, 16, 6], "n_token": 21, "loss": [0.13268055021762848, 0.00023850661818869412], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", ")", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [6, 11, 19, 2, 9, 15]}}
{"prediction": {"error_location": 0.8757448196411133, "repair_targets": [0.9997615218162537], "repair_candidates": [0.9997615218162537, 1.41224645631155e-05, 0.00018374770297668874, 8.709143912710715e-07, 3.954236308345571e-05, 2.414501238945377e-07], "target_probs": 0.9997615218162537}}


{"result": {"time": "2021-02-21 07:01:17.348714", "n_pass": [87, 17, 7], "n_token": 20, "loss": [0.2290002405643463, 0.0002556770050432533], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "#NEWLINE#", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [6, 11, 18, 2, 9, 14]}}
{"prediction": {"error_location": 0.7953283190727234, "repair_targets": [0.9997443556785583], "repair_candidates": [0.9997443556785583, 3.466535417828709e-05, 0.00015699201321695, 6.996446586526872e-07, 6.28544730716385e-05, 3.9120087080846133e-07], "target_probs": 0.9997443556785583}}


{"result": {"time": "2021-02-21 07:01:17.403994", "n_pass": [88, 18, 8], "n_token": 19, "loss": [0.27367860078811646, 8.523827273165807e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", ".", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [6, 11, 17, 2, 9, 13]}}
{"prediction": {"error_location": 0.7605764865875244, "repair_targets": [0.9999147653579712], "repair_candidates": [0.9999147653579712, 1.4158413250697777e-05, 2.5155008188448846e-05, 1.5529597874319734e-07, 4.576890933094546e-05, 4.36016414084861e-08], "target_probs": 0.9999147653579712}}


{"result": {"time": "2021-02-21 07:01:17.517535", "n_pass": [91, 20, 9], "n_token": 18, "loss": [0.0953509509563446, 0.0004408735258039087], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "=", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [6, 11, 16, 2, 9, 13]}}
{"prediction": {"error_location": 0.9090537428855896, "repair_targets": [0.999559223651886], "repair_candidates": [0.999559223651886, 5.400499503593892e-06, 8.731864363653585e-05, 1.2735141297071095e-07, 0.00034796117688529193, 4.575880652168962e-08], "target_probs": 0.999559223651886}}


{"result": {"time": "2021-02-21 07:01:17.738532", "n_pass": [97, 24, 10], "n_token": 17, "loss": [0.07003815472126007, 0.00020881686941720545], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", "'/'", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [5, 10, 15, 2, 8, 12]}}
{"prediction": {"error_location": 0.9323583245277405, "repair_targets": [0.9997912049293518], "repair_candidates": [0.9997912049293518, 4.538462690106826e-06, 0.00012754881754517555, 1.4055002850454912e-07, 7.651736086700112e-05, 5.9408687747009026e-08], "target_probs": 0.9997912049293518}}


{"result": {"time": "2021-02-21 07:01:17.793664", "n_pass": [98, 25, 11], "n_token": 16, "loss": [0.13314948976039886, 6.151388515718281e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", "tree", "(", "profile", ")"]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [4, 9, 14, 2, 7, 11]}}
{"prediction": {"error_location": 0.8753343224525452, "repair_targets": [0.9999384880065918], "repair_candidates": [0.9999384880065918, 4.783431450050557e-06, 4.807388540939428e-05, 1.76042336264004e-09, 8.659255399834365e-06, 1.5481262494176917e-08], "target_probs": 0.9999384880065918}}


{"result": {"time": "2021-02-21 07:01:18.349524", "n_pass": [118, 35, 12], "n_token": 15, "loss": [0.08946271985769272, 5.006802894058637e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", "tree", "profile", ")"]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [4, 9, 13, 2, 7, 11]}}
{"prediction": {"error_location": 0.914422333240509, "repair_targets": [0.9999949932098389], "repair_candidates": [0.9999949932098389, 4.563983111438574e-06, 3.8126648860270507e-07, 1.9183856281301814e-08, 1.0495943314481337e-07, 4.056111002626039e-09], "target_probs": 0.9999949932098389}}


{"result": {"time": "2021-02-21 07:01:18.404462", "n_pass": [120, 36, 13], "n_token": 14, "loss": [0.6989761590957642, 4.744642137666233e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def tree(", "path", ",", "profile", "=", "#NEWLINE#", "client", "__opts__", "profile", "return", "client", "tree", "profile"]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [4, 9, 13, 2, 7, 11]}}
{"prediction": {"error_location": 0.49709397554397583, "repair_targets": [0.9999525547027588], "repair_candidates": [0.9999525547027588, 3.336685949761886e-06, 4.104520849068649e-05, 2.2222890549983276e-07, 2.8441447739169234e-06, 2.4600900871973863e-08], "target_probs": 0.9999525547027588}}




Minimal simplified tokens:

['#NEWLINE#', 'def tree(', 'path', ',', 'profile', '=', '#NEWLINE#', 'client', '__opts__', 'profile', 'return', 'client', 'tree', 'profile']
