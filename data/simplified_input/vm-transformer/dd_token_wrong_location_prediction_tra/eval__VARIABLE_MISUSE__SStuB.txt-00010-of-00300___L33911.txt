
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "'Invalid vList parameter: '", "+", "str", "(", "vertices", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "W", "=", "sppy", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"], "error_location": [31], "repair_targets": [4, 42, 52, 65, 81], "repair_candidates": [2, 38, 59, 88, 97, 105, 117, 10, 114, 6, 25, 31, 119, 121, 4, 42, 52, 65, 81], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "charanpald/APGL/apgl/graph/CsArrayGraph.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 33911, "results": {"model": "transformer", "prob": {"loc": [[0.05022823065519333, 6.011703135300195e-08, 3.21014539395037e-08, 9.212460128082967e-09, 3.420527491471148e-06, 6.967870724849945e-09, 1.509627622908738e-07, 2.2185869141821968e-08, 1.805822158473802e-08, 5.454996454545835e-09, 4.162146183261939e-07, 1.5884401349808286e-08, 2.411090349596634e-07, 5.485246035163982e-08, 4.198134107014084e-08, 1.347677791585511e-08, 1.658968962203744e-08, 2.4555642852419624e-08, 1.2412430194785884e-08, 6.04051848540621e-08, 1.2572453300663256e-08, 4.325384495018625e-09, 1.2982757979784765e-08, 8.493631908912391e-10, 3.8092274223799905e-08, 0.6109051704406738, 3.23526904821847e-07, 1.0131556393844221e-07, 3.493417466415849e-08, 1.4460934494309186e-07, 6.465899105023709e-08, 0.3365529477596283, 1.0005854278460902e-07, 4.556720512027823e-07, 2.1660444105009447e-08, 5.357679455642028e-08, 2.927412090514281e-08, 1.3171897350616746e-08, 7.43224646271301e-08, 1.889423195677864e-08, 7.613050634347474e-09, 5.210103282138334e-08, 0.0011982839787378907, 7.012698688413366e-08, 1.8215308372759864e-08, 9.836247372163598e-09, 1.5388703644703128e-08, 4.720629220855699e-08, 2.0068164019448886e-08, 1.637056890047006e-08, 3.188176833646139e-09, 1.8929943834677943e-08, 0.00014004616241436452, 3.1603224925902396e-08, 7.000043922289478e-08, 6.792984397208102e-09, 4.3219234413527374e-08, 2.1117193327313544e-08, 1.6180772277607502e-08, 1.1357685281154772e-07, 5.54718404544019e-08, 2.9982045735010843e-09, 1.0581595155656487e-08, 1.241510538818602e-08, 4.694178556974293e-08, 9.125431097345427e-05, 1.788253598533629e-07, 4.6999211633647064e-08, 2.7752045994589025e-08, 2.7133223667874518e-08, 6.059141810510482e-08, 4.7129557145808576e-08, 2.8575486865634048e-08, 7.784530708931925e-08, 2.125288212084797e-08, 1.6344230413523064e-09, 7.74619568488788e-09, 5.9274249508689536e-08, 1.1312127234930358e-08, 2.236724139237367e-09, 1.4405538095729753e-08, 0.0005841737729497254, 5.9021544984716456e-08, 3.7070172709263716e-08, 3.2538512328983416e-08, 3.281417804146258e-08, 1.0525274873884882e-08, 1.0846548548215651e-08, 1.017344608555959e-08, 2.9579846128058307e-08, 2.3053716713405947e-09, 1.180333963901603e-08, 6.002796926196652e-09, 5.677778958101953e-08, 1.492286072490856e-09, 1.4074571730304797e-08, 2.0992581895029616e-08, 9.333356274510152e-07, 5.473383879461835e-08, 2.125347897674601e-09, 4.4864496118179886e-08, 3.2564962282322085e-08, 5.150329798198072e-07, 1.8204760010576138e-07, 1.6102816857710422e-08, 4.4289342326919723e-07, 2.2983000391718633e-08, 1.943206928700647e-09, 2.938583953948637e-08, 5.638062905433117e-09, 2.1460006394136144e-07, 3.409982411994861e-07, 8.037258858450969e-09, 5.073542475031445e-09, 6.514744745800272e-05, 5.55369474852796e-08, 2.4401149545383305e-08, 3.161413886232367e-08, 2.2272065081097026e-08, 1.579458341893769e-08, 2.3270731119851007e-08, 0.00022401860042009503]], "pointer": [[0.0, 0.0, 0.001061933464370668, 0.0, 0.888237476348877, 0.0, 0.000677562493365258, 0.0, 0.0, 0.0, 0.003919556271284819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00014694654964841902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010903236689046025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00013192344340495765, 0.0, 0.0, 0.0, 0.06386673450469971, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017865318804979324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.258349225798156e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01600210927426815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006652394309639931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.30557018565014e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.36395304556936e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.910447609698167e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00021241119247861207, 0.0, 0.0, 1.7929074601852335e-05, 0.0, 7.360881136264652e-05, 0.0, 8.20090644992888e-06]], "target": [0.992624044418335]}, "loss": [1.0889995098114014, 0.00740329222753644], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [25]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:50:22.316641", "n_pass": [1, 1, 1], "n_token": 122, "loss": [0.4928132891654968, 0.00740329222753644], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "'Invalid vList parameter: '", "+", "str", "(", "vertices", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "W", "=", "sppy", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 81], "repair_candidates": [2, 38, 59, 88, 97, 105, 117, 10, 114, 6, 25, 31, 119, 121, 4, 42, 52, 65, 81]}}
{"prediction": {"error_location": 0.6109051704406738, "repair_targets": [0.888237476348877, 0.06386673450469971, 0.017865318804979324, 0.01600210927426815, 0.006652394309639931], "repair_candidates": [0.001061933464370668, 0.888237476348877, 0.000677562493365258, 0.003919556271284819, 0.00014694654964841902, 0.0010903236689046025, 0.00013192344340495765, 0.06386673450469971, 0.017865318804979324, 8.258349225798156e-06, 0.01600210927426815, 0.006652394309639931, 1.30557018565014e-05, 7.36395304556936e-06, 6.910447609698167e-06, 0.00021241119247861207, 1.7929074601852335e-05, 7.360881136264652e-05, 8.20090644992888e-06], "target_probs": 0.992624044418335}}


{"result": {"time": "2021-02-21 06:50:22.442175", "n_pass": [53, 3, 2], "n_token": 114, "loss": [0.6088327765464783, 0.009740610606968403], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "ValueError", "(", "(", "'Invalid vList parameter: '", "+", "str", "(", "vertices", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "W", "=", "sppy", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 73], "repair_candidates": [2, 38, 59, 80, 89, 97, 109, 10, 106, 6, 25, 31, 111, 113, 4, 42, 52, 65, 73]}}
{"prediction": {"error_location": 0.5439853668212891, "repair_targets": [0.8450154066085815, 0.06853275746107101, 0.0661185085773468, 0.005360339768230915, 0.005279600620269775], "repair_candidates": [0.001208900474011898, 0.8450154066085815, 0.0013204782735556364, 0.004406098276376724, 0.0002307174145244062, 0.002182259690016508, 0.00011026942956959829, 0.06853275746107101, 0.0661185085773468, 2.9649970656464575e-06, 0.005360339768230915, 0.005279600620269775, 7.721902875346132e-06, 5.703893293684814e-06, 2.462966222083196e-06, 0.00018785137217491865, 4.654232725442853e-06, 1.7525519069749862e-05, 5.820177193527343e-06], "target_probs": 0.9903066754341125}}


{"result": {"time": "2021-02-21 06:50:22.625557", "n_pass": [99, 6, 3], "n_token": 110, "loss": [0.7530384659767151, 0.06137491390109062], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "W", "=", "sppy", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 69], "repair_candidates": [2, 38, 59, 76, 85, 93, 105, 10, 102, 6, 25, 31, 107, 109, 4, 42, 52, 65, 69]}}
{"prediction": {"error_location": 0.4709334671497345, "repair_targets": [0.789122462272644, 0.060170918703079224, 0.0797199085354805, 0.010139037854969501, 0.0013183082919567823], "repair_candidates": [0.003118320135399699, 0.789122462272644, 0.004668273497372866, 0.04399353265762329, 0.0006494955159723759, 0.005059429444372654, 0.0001857516763266176, 0.060170918703079224, 0.0797199085354805, 4.507457106228685e-06, 0.010139037854969501, 0.0013183082919567823, 1.3199813110986724e-05, 1.2383426110318396e-05, 4.101226295460947e-06, 0.001737863407470286, 9.81084940576693e-06, 5.3763298637932166e-05, 1.8928445570054464e-05], "target_probs": 0.9404705762863159}}


{"result": {"time": "2021-02-21 06:50:22.685556", "n_pass": [100, 7, 4], "n_token": 106, "loss": [0.8444264531135559, 0.08239684998989105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "W", "=", "sppy", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 69], "repair_candidates": [2, 38, 59, 72, 81, 89, 101, 10, 98, 6, 25, 31, 103, 105, 4, 42, 52, 65, 69]}}
{"prediction": {"error_location": 0.4298037886619568, "repair_targets": [0.6820457577705383, 0.08908701688051224, 0.13176535069942474, 0.017078202217817307, 0.0009300839737989008], "repair_candidates": [0.0037984191440045834, 0.6820457577705383, 0.003261812962591648, 0.05691540241241455, 0.0005734016885980964, 0.0043800873681902885, 0.00035849487176164985, 0.08908701688051224, 0.13176535069942474, 5.705654257326387e-05, 0.017078202217817307, 0.0009300839737989008, 2.5751440261956304e-05, 7.159299275372177e-05, 2.0652532839449123e-05, 0.009490597993135452, 1.3699721421289723e-05, 9.930977103067562e-05, 2.7301721274852753e-05], "target_probs": 0.9209064245223999}}


{"result": {"time": "2021-02-21 06:50:22.745646", "n_pass": [102, 8, 5], "n_token": 102, "loss": [0.7624619603157043, 0.14639194309711456], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", ".", "vList", ".", "getNumVertices", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 69], "repair_candidates": [2, 38, 59, 72, 77, 85, 97, 10, 94, 6, 25, 31, 99, 101, 4, 42, 52, 65, 69]}}
{"prediction": {"error_location": 0.4665165841579437, "repair_targets": [0.6489261984825134, 0.07001394778490067, 0.13177622854709625, 0.01248427014797926, 0.0006184380035847425], "repair_candidates": [0.005881291348487139, 0.6489261984825134, 0.003912172745913267, 0.0987929254770279, 0.0006028101197443902, 0.0070655457675457, 0.0007069245912134647, 0.07001394778490067, 0.13177622854709625, 8.701207116246223e-05, 0.01248427014797926, 0.0006184380035847425, 1.9510660422383808e-05, 0.00011452845501480624, 3.266115527367219e-05, 0.01885693334043026, 1.927813354996033e-05, 7.255743548739702e-05, 1.6781044905656017e-05], "target_probs": 0.8638190627098083}}


{"result": {"time": "2021-02-21 06:50:22.805464", "n_pass": [104, 9, 6], "n_token": 98, "loss": [0.8623975515365601, 0.2818997800350189], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", ".", "vList", ".", "getNumVertices", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 69], "repair_candidates": [2, 38, 59, 72, 77, 81, 93, 10, 90, 6, 25, 31, 95, 97, 4, 42, 52, 65, 69]}}
{"prediction": {"error_location": 0.4221487045288086, "repair_targets": [0.5779381990432739, 0.051204632967710495, 0.0894731730222702, 0.03365137055516243, 0.002081935992464423], "repair_candidates": [0.01243132259696722, 0.5779381990432739, 0.021116293966770172, 0.15066586434841156, 0.00288372952491045, 0.02296479418873787, 0.001947245211340487, 0.051204632967710495, 0.0894731730222702, 0.0003101708716712892, 0.03365137055516243, 0.002081935992464423, 3.0008439352968708e-05, 0.0035288294311612844, 0.00010963124077534303, 0.026339838281273842, 1.6022673662519082e-05, 0.00121099513489753, 0.002095856936648488], "target_probs": 0.7543492913246155}}


{"result": {"time": "2021-02-21 06:50:22.865053", "n_pass": [106, 10, 7], "n_token": 94, "loss": [0.9747799634933472, 0.32569587230682373], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "numpy", ".", "float", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 25, "repair_targets": [4, 42, 52, 65, 69], "repair_candidates": [2, 38, 59, 72, 77, 81, 89, 10, 86, 6, 25, 31, 91, 93, 4, 42, 52, 65, 69]}}
{"prediction": {"error_location": 0.3772753179073334, "repair_targets": [0.5561511516571045, 0.06511791050434113, 0.07722938805818558, 0.02173449844121933, 0.0017917464720085263], "repair_candidates": [0.014272582717239857, 0.5561511516571045, 0.02098327875137329, 0.154144287109375, 0.002614268334582448, 0.02208755724132061, 0.00274575874209404, 0.06511791050434113, 0.07722938805818558, 0.0012500524753704667, 0.02173449844121933, 0.0017917464720085263, 6.015159306116402e-05, 0.0026060224045068026, 0.022634349763393402, 0.028911374509334564, 2.2466078007710166e-05, 0.003425341099500656, 0.0022178671788424253], "target_probs": 0.7220247387886047}}


{"result": {"time": "2021-02-21 06:50:22.987004", "n_pass": [114, 12, 8], "n_token": 91, "loss": [0.617623507976532, 0.18680302798748016], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 22, "repair_targets": [4, 39, 49, 62, 66], "repair_candidates": [2, 35, 56, 69, 74, 78, 86, 10, 83, 6, 22, 28, 88, 90, 4, 39, 49, 62, 66]}}
{"prediction": {"error_location": 0.5392243266105652, "repair_targets": [0.6861680746078491, 0.0522434338927269, 0.07230021059513092, 0.016209086403250694, 0.0026863168459385633], "repair_candidates": [0.0075876908376812935, 0.6861680746078491, 0.012333333492279053, 0.12806478142738342, 0.000652528484351933, 0.01246598269790411, 0.0008786313701421022, 0.0522434338927269, 0.07230021059513092, 0.0003456779522821307, 0.016209086403250694, 0.0026863168459385633, 3.90068453270942e-05, 0.0003306326980236918, 0.0017111654160544276, 0.0045553529635071754, 1.4380407264980022e-05, 0.0008314245496876538, 0.0005823727115057409], "target_probs": 0.8296071290969849}}


{"result": {"time": "2021-02-21 06:50:23.046357", "n_pass": [115, 13, 9], "n_token": 88, "loss": [0.630742073059082, 0.15006430447101593], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 36, 46, 59, 63], "repair_candidates": [2, 32, 53, 66, 71, 75, 83, 10, 80, 6, 19, 25, 85, 87, 4, 36, 46, 59, 63]}}
{"prediction": {"error_location": 0.5321966409683228, "repair_targets": [0.681364119052887, 0.06264900416135788, 0.0821736603975296, 0.02895520254969597, 0.005510628689080477], "repair_candidates": [0.006602089386433363, 0.681364119052887, 0.01584300585091114, 0.09887285530567169, 0.0010711640352383256, 0.010543731972575188, 0.00046118765021674335, 0.06264900416135788, 0.0821736603975296, 0.0002604305336717516, 0.02895520254969597, 0.005510628689080477, 3.6430981708690524e-05, 0.000751427432987839, 0.00025731505593284965, 0.0026315096765756607, 2.4895500246202573e-05, 0.0010015340521931648, 0.0009897704003378749], "target_probs": 0.8606526255607605}}


{"result": {"time": "2021-02-21 06:50:23.225479", "n_pass": [120, 16, 10], "n_token": 84, "loss": [0.6930543184280396, 0.1770731657743454], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 42, 55, 59], "repair_candidates": [2, 28, 49, 62, 67, 71, 79, 10, 76, 6, 19, 25, 81, 83, 4, 32, 42, 55, 59]}}
{"prediction": {"error_location": 0.5000463724136353, "repair_targets": [0.6648834943771362, 0.06348259747028351, 0.07527318596839905, 0.028149018064141273, 0.005930216051638126], "repair_candidates": [0.01440785638988018, 0.6648834943771362, 0.03765770420432091, 0.07433116436004639, 0.0022437814623117447, 0.0224322360008955, 0.0003020502917934209, 0.06348259747028351, 0.07527318596839905, 0.0006973741692490876, 0.028149018064141273, 0.005930216051638126, 8.59147185110487e-05, 0.0006546524818986654, 0.001504967687651515, 0.0019265570444986224, 7.872729474911466e-05, 0.004067910369485617, 0.0018905980978161097], "target_probs": 0.8377184867858887}}


{"result": {"time": "2021-02-21 06:50:23.285357", "n_pass": [123, 17, 11], "n_token": 80, "loss": [1.057732343673706, 0.5723550915718079], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "isinstance", "(", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 38, 51, 55], "repair_candidates": [2, 28, 45, 58, 63, 67, 75, 10, 72, 6, 19, 25, 77, 79, 4, 32, 38, 51, 55]}}
{"prediction": {"error_location": 0.3472423553466797, "repair_targets": [0.4476252794265747, 0.04637964442372322, 0.04142483323812485, 0.02356661856174469, 0.00519878976047039], "repair_candidates": [0.01971643790602684, 0.4476252794265747, 0.10014020651578903, 0.23129117488861084, 0.006040017120540142, 0.036472808569669724, 0.00039403908886015415, 0.04637964442372322, 0.04142483323812485, 0.0019171679159626365, 0.02356661856174469, 0.00519878976047039, 6.996979936957359e-05, 0.0009384819422848523, 0.011628295294940472, 0.007100588642060757, 6.290010787779465e-05, 0.01229783147573471, 0.0077349161729216576], "target_probs": 0.5641951560974121}}


{"result": {"time": "2021-02-21 06:50:23.583223", "n_pass": [187, 22, 12], "n_token": 78, "loss": [0.6161275506019592, 0.2512311041355133], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 49, 53], "repair_candidates": [2, 28, 43, 56, 61, 65, 73, 10, 70, 6, 19, 25, 75, 77, 4, 32, 36, 49, 53]}}
{"prediction": {"error_location": 0.5400316715240479, "repair_targets": [0.7202216982841492, 0.015460098162293434, 0.03326535224914551, 0.006902980152517557, 0.0019924442749470472], "repair_candidates": [0.007901443168520927, 0.7202216982841492, 0.05531592294573784, 0.11729798465967178, 0.001810254412703216, 0.019089708104729652, 0.0002550812787376344, 0.015460098162293434, 0.03326535224914551, 0.0013188093435019255, 0.006902980152517557, 0.0019924442749470472, 5.252266055322252e-05, 0.0006223949021659791, 0.004170112311840057, 0.0027860624250024557, 4.898060069535859e-05, 0.0075398655608296394, 0.0039483713917434216], "target_probs": 0.7778425812721252}}


{"result": {"time": "2021-02-21 06:50:23.642596", "n_pass": [188, 23, 13], "n_token": 76, "loss": [0.7449416518211365, 0.2375543713569641], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", ".", "vList", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 47, 51], "repair_candidates": [2, 28, 41, 54, 59, 63, 71, 10, 68, 6, 19, 25, 73, 75, 4, 32, 36, 47, 51]}}
{"prediction": {"error_location": 0.4747620224952698, "repair_targets": [0.6737558841705322, 0.03324895724654198, 0.05277494713664055, 0.02602684497833252, 0.00274739065207541], "repair_candidates": [0.008849481120705605, 0.6737558841705322, 0.060723256319761276, 0.09454429894685745, 0.002325663808733225, 0.026617491617798805, 0.00017044565174728632, 0.03324895724654198, 0.05277494713664055, 0.001558290095999837, 0.02602684497833252, 0.00274739065207541, 6.149493856355548e-05, 0.0005750085110776126, 0.002057418692857027, 0.0013083668891340494, 7.776388520142063e-05, 0.008932286873459816, 0.0036447811871767044], "target_probs": 0.7885540127754211}}


{"result": {"time": "2021-02-21 06:50:23.762365", "n_pass": [191, 25, 14], "n_token": 74, "loss": [0.9034222960472107, 0.22308757901191711], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "=", "GeneralVertexList", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 45, 49], "repair_candidates": [2, 28, 41, 52, 57, 61, 69, 10, 66, 6, 19, 25, 71, 73, 4, 32, 36, 45, 49]}}
{"prediction": {"error_location": 0.4051806330680847, "repair_targets": [0.6698431372642517, 0.02499597892165184, 0.0514865517616272, 0.047979339957237244, 0.005739737302064896], "repair_candidates": [0.04696158692240715, 0.6698431372642517, 0.030943868681788445, 0.07056596130132675, 0.0010465469677001238, 0.022346947342157364, 0.002608790760859847, 0.02499597892165184, 0.0514865517616272, 0.009129173122346401, 0.047979339957237244, 0.005739737302064896, 0.008153751492500305, 0.00045212102122604847, 0.0006694815820083022, 0.0006951115792617202, 0.0010001398622989655, 0.004643377847969532, 0.0007382738986052573], "target_probs": 0.8000447750091553}}


{"result": {"time": "2021-02-21 06:50:23.820949", "n_pass": [192, 26, 15], "n_token": 72, "loss": [0.9121640920639038, 0.27485716342926025], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "+", "str", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 47], "repair_candidates": [2, 28, 41, 50, 55, 59, 67, 10, 64, 6, 19, 25, 69, 71, 4, 32, 36, 43, 47]}}
{"prediction": {"error_location": 0.40165406465530396, "repair_targets": [0.6098912954330444, 0.0372295156121254, 0.052378278225660324, 0.048150330781936646, 0.01203121803700924], "repair_candidates": [0.020385349169373512, 0.6098912954330444, 0.04577258601784706, 0.12334172427654266, 0.002286128234118223, 0.03173355758190155, 0.0013377435971051455, 0.0372295156121254, 0.052378278225660324, 0.0009852827060967684, 0.048150330781936646, 0.01203121803700924, 0.00036211387487128377, 0.0028888387605547905, 0.004946766886860132, 0.0010128498543053865, 0.0002630745293572545, 0.002077582059428096, 0.002925754291936755], "target_probs": 0.7596806287765503}}


{"result": {"time": "2021-02-21 06:50:23.880059", "n_pass": [194, 27, 16], "n_token": 70, "loss": [0.5453198552131653, 0.17537914216518402], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "#UNINDENT#", "#UNINDENT#", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 48, 53, 57, 65, 10, 62, 6, 19, 25, 67, 69, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.5796562433242798, "repair_targets": [0.7666934728622437, 0.034879691898822784, 0.022610746324062347, 0.0021820866968482733, 0.012772790156304836], "repair_candidates": [0.025561634451150894, 0.7666934728622437, 0.01725311577320099, 0.08209212124347687, 0.000984642538242042, 0.022372333332896233, 0.0018450553761795163, 0.034879691898822784, 0.022610746324062347, 0.0024926771875470877, 0.0021820866968482733, 0.012772790156304836, 0.0006700937519781291, 0.00024310154549311846, 0.005152449011802673, 0.0005721588968299329, 0.00040197442285716534, 0.0010553577449172735, 0.00016451724513899535], "target_probs": 0.8391388058662415}}


{"result": {"time": "2021-02-21 06:50:23.939622", "n_pass": [196, 28, 17], "n_token": 68, "loss": [0.7001766562461853, 0.3103100061416626], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "csarray", "(", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 46, 51, 55, 63, 10, 60, 6, 19, 25, 65, 67, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.4964975416660309, "repair_targets": [0.6491607427597046, 0.03546881303191185, 0.008430064655840397, 0.0016910482663661242, 0.038468942046165466], "repair_candidates": [0.04207996651530266, 0.6491607427597046, 0.030079226940870285, 0.12547627091407776, 0.0019772092346102, 0.04719597473740578, 0.002182753523811698, 0.03546881303191185, 0.008430064655840397, 0.003758551785722375, 0.0016910482663661242, 0.038468942046165466, 0.0069467066787183285, 0.0013743420131504536, 0.0033984549809247255, 0.0010191943729296327, 0.0006360734696500003, 0.0005590094951912761, 9.663614036981016e-05], "target_probs": 0.7332196235656738}}


{"result": {"time": "2021-02-21 06:50:23.998468", "n_pass": [198, 29, 18], "n_token": 66, "loss": [0.6109985113143921, 0.31393900513648987], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", "(", ")", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 46, 49, 53, 61, 10, 58, 6, 19, 25, 63, 65, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.5428087115287781, "repair_targets": [0.6660587787628174, 0.028971761465072632, 0.007762861903756857, 0.0016355699626728892, 0.02613462135195732], "repair_candidates": [0.042827505618333817, 0.6660587787628174, 0.027678843587636948, 0.11901109665632248, 0.0020187676418572664, 0.0435216948390007, 0.0031097247265279293, 0.028971761465072632, 0.007762861903756857, 0.003645795863121748, 0.0016355699626728892, 0.02613462135195732, 0.017450569197535515, 0.006587953772395849, 0.000430932326707989, 0.0019637614022940397, 0.0007411427213810384, 0.0003887871280312538, 5.978967237751931e-05], "target_probs": 0.7305635809898376}}


{"result": {"time": "2021-02-21 06:50:24.060172", "n_pass": [200, 30, 19], "n_token": 64, "loss": [0.7363181114196777, 0.3628028333187103], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "(", ")", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 46, 49, 51, 59, 10, 56, 6, 19, 25, 61, 63, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.4788738787174225, "repair_targets": [0.6048579812049866, 0.03804052993655205, 0.006899450905621052, 0.0018607930978760123, 0.04406482353806496], "repair_candidates": [0.0540178045630455, 0.6048579812049866, 0.03379232436418533, 0.12949232757091522, 0.002648968482390046, 0.046353381127119064, 0.0031645819544792175, 0.03804052993655205, 0.006899450905621052, 0.0038477920461446047, 0.0018607930978760123, 0.04406482353806496, 0.020124569535255432, 0.0036088896449655294, 0.004529977682977915, 0.0018507899949327111, 0.0004609889874700457, 0.0003098800079897046, 7.417923916364089e-05], "target_probs": 0.6957235932350159}}


{"result": {"time": "2021-02-21 06:50:24.119009", "n_pass": [202, 31, 20], "n_token": 62, "loss": [1.094399094581604, 0.15059050917625427], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", ")", ",", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 46, 49, 51, 57, 10, 54, 6, 19, 25, 59, 61, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.33474069833755493, "repair_targets": [0.7010594010353088, 0.11427465826272964, 0.01733800396323204, 0.0014455399941653013, 0.026082251220941544], "repair_candidates": [0.014578121714293957, 0.7010594010353088, 0.035440754145383835, 0.05802425742149353, 0.003388089593499899, 0.02139822579920292, 0.0007037280010990798, 0.11427465826272964, 0.01733800396323204, 0.0008854198385961354, 0.0014455399941653013, 0.026082251220941544, 0.002518607769161463, 0.0007731700898148119, 0.000459131202660501, 0.0012728627771139145, 0.00014245878264773637, 0.00017722741176839918, 3.820411075139418e-05], "target_probs": 0.8601998686790466}}


{"result": {"time": "2021-02-21 06:50:24.177862", "n_pass": [203, 32, 21], "n_token": 60, "loss": [1.1594762802124023, 0.35854291915893555], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", ",", "AbstractVertexList", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 32, 36, 43, 45], "repair_candidates": [2, 28, 41, 46, 49, 51, 55, 10, 52, 6, 19, 25, 57, 59, 4, 32, 36, 43, 45]}}
{"prediction": {"error_location": 0.31365036964416504, "repair_targets": [0.5215056538581848, 0.12926612794399261, 0.016137851402163506, 0.0022954291198402643, 0.029488569125533104], "repair_candidates": [0.01604592613875866, 0.5215056538581848, 0.03987707570195198, 0.20740681886672974, 0.0040033129043877125, 0.022584080696105957, 0.0007978510693646967, 0.12926612794399261, 0.016137851402163506, 0.0019338668789714575, 0.0022954291198402643, 0.029488569125533104, 0.0023635951802134514, 0.000738106551580131, 0.00025752466171979904, 0.004687366541475058, 0.00015358952805399895, 0.0003923966723959893, 6.490638043032959e-05], "target_probs": 0.6986936330795288}}


{"result": {"time": "2021-02-21 06:50:24.763867", "n_pass": [223, 42, 22], "n_token": 58, "loss": [1.0287586450576782, 0.3338271379470825], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", "self", ".", "vList", "=", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 30, 34, 41, 43], "repair_candidates": [2, 26, 39, 44, 47, 49, 53, 10, 50, 6, 19, 25, 55, 57, 4, 30, 34, 41, 43]}}
{"prediction": {"error_location": 0.3574504256248474, "repair_targets": [0.5597772002220154, 0.10246455669403076, 0.014974103309214115, 0.002558100502938032, 0.03640363737940788], "repair_candidates": [0.038349699229002, 0.5597772002220154, 0.03778519108891487, 0.1394023299217224, 0.0034765524324029684, 0.014008235186338425, 0.011803685687482357, 0.10246455669403076, 0.014974103309214115, 0.009173726662993431, 0.002558100502938032, 0.03640363737940788, 0.019808633252978325, 0.00443537812680006, 0.0004987178836017847, 0.003622021758928895, 0.0006424168241210282, 0.0006434936076402664, 0.00017234374536201358], "target_probs": 0.7161775827407837}}


{"result": {"time": "2021-02-21 06:50:24.822529", "n_pass": [225, 43, 23], "n_token": 56, "loss": [0.9078053832054138, 0.11855734884738922], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#INDENT#", "'\\n        Create a sparse graph using sppy csarray with a given AbstractVertexList, and specify whether directed.\\n\\n        :param vertices: the initial set of vertices as a AbstractVertexList object, or an int to specify the number of vertices in which case vertices are stored in a GeneralVertexList.  \\n        \\n        :param undirected: a boolean variable to indicate if the graph is undirected.\\n        :type undirected: :class:`boolean`\\n\\n        :param dtype: the data type for the weight matrix, e.g numpy.int8.\\n        '", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", "self", ".", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 19, "repair_targets": [4, 28, 32, 39, 41], "repair_candidates": [2, 26, 37, 42, 45, 47, 51, 10, 48, 6, 19, 25, 53, 55, 4, 28, 32, 39, 41]}}
{"prediction": {"error_location": 0.40340861678123474, "repair_targets": [0.7462086081504822, 0.011084686033427715, 0.10776956379413605, 0.00043033206020481884, 0.022707708179950714], "repair_candidates": [0.03208800405263901, 0.7462086081504822, 0.006046182941645384, 0.020242074504494667, 0.001984241185709834, 0.0026648787315934896, 0.02833319641649723, 0.011084686033427715, 0.10776956379413605, 0.004085490480065346, 0.00043033206020481884, 0.022707708179950714, 0.013084165751934052, 0.0023096762597560883, 0.0001641024136915803, 0.0002409392618574202, 0.0004277119296602905, 0.00010772963287308812, 2.061095437966287e-05], "target_probs": 0.8882008790969849}}


{"result": {"time": "2021-02-21 06:50:25.235914", "n_pass": [248, 50, 24], "n_token": 54, "loss": [1.195113182067871, 0.07410729676485062], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "isinstance", "(", "undirected", "self", ".", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 17, "repair_targets": [4, 26, 30, 37, 39], "repair_candidates": [2, 24, 35, 40, 43, 45, 49, 10, 46, 6, 17, 23, 51, 53, 4, 26, 30, 37, 39]}}
{"prediction": {"error_location": 0.3026697337627411, "repair_targets": [0.8114412426948547, 0.010634878650307655, 0.09195666015148163, 0.0003341104893479496, 0.014205176383256912], "repair_candidates": [0.020524386316537857, 0.8114412426948547, 0.00719049945473671, 0.01670980639755726, 0.0023344201035797596, 0.0021896420512348413, 0.013742384500801563, 0.010634878650307655, 0.09195666015148163, 0.0018363018753007054, 0.0003341104893479496, 0.014205176383256912, 0.005623055621981621, 0.0005144106107763946, 7.0965412305668e-05, 0.0002659349702298641, 0.00032157887471839786, 7.470363925676793e-05, 2.982612386404071e-05], "target_probs": 0.9285720586776733}}


{"result": {"time": "2021-02-21 06:50:26.231177", "n_pass": [335, 67, 25], "n_token": 53, "loss": [1.3416576385498047, 0.0787077322602272], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#NEWLINE#", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 17, "repair_targets": [4, 25, 29, 36, 38], "repair_candidates": [2, 23, 34, 39, 42, 44, 48, 10, 45, 6, 17, 22, 50, 52, 4, 25, 29, 36, 38]}}
{"prediction": {"error_location": 0.26141199469566345, "repair_targets": [0.8218837976455688, 0.013643071986734867, 0.06761997193098068, 0.0005108791519887745, 0.020652305334806442], "repair_candidates": [0.020089169964194298, 0.8218837976455688, 0.01077954564243555, 0.02305825799703598, 0.0027946257032454014, 0.0029241573065519333, 0.00794626958668232, 0.013643071986734867, 0.06761997193098068, 0.002288554795086384, 0.0005108791519887745, 0.020652305334806442, 0.004429880063980818, 0.0004735688853543252, 6.28558118478395e-05, 0.00033524236641824245, 0.00035069393925368786, 0.00011756144522223622, 3.958588422392495e-05], "target_probs": 0.924310028553009}}


{"result": {"time": "2021-02-21 06:50:26.408016", "n_pass": [341, 70, 26], "n_token": 52, "loss": [1.4703410863876343, 0.07526812702417374], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", ")", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 17, "repair_targets": [4, 25, 28, 35, 37], "repair_candidates": [2, 23, 33, 38, 41, 43, 47, 10, 44, 6, 17, 22, 49, 51, 4, 25, 28, 35, 37]}}
{"prediction": {"error_location": 0.22984707355499268, "repair_targets": [0.7294713258743286, 0.016410397365689278, 0.1576080024242401, 0.0007769119110889733, 0.023228120058774948], "repair_candidates": [0.02133769541978836, 0.7294713258743286, 0.010643387213349342, 0.020458947867155075, 0.0019671169575303793, 0.0020201278384774923, 0.007736810948699713, 0.016410397365689278, 0.1576080024242401, 0.0020356515888124704, 0.0007769119110889733, 0.023228120058774948, 0.004354833625257015, 0.001036755507811904, 7.111758895916864e-05, 0.00023732009867671877, 0.00043999418267048895, 0.00011938872921746224, 4.6133882278809324e-05], "target_probs": 0.9274947643280029}}


{"result": {"time": "2021-02-21 06:50:27.109315", "n_pass": [361, 82, 27], "n_token": 51, "loss": [1.2702529430389404, 0.13427560031414032], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "=", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 17, "repair_targets": [4, 25, 28, 35, 37], "repair_candidates": [2, 23, 33, 38, 41, 43, 46, 10, 44, 6, 17, 22, 48, 50, 4, 25, 28, 35, 37]}}
{"prediction": {"error_location": 0.28076061606407166, "repair_targets": [0.6823612451553345, 0.021904144436120987, 0.13907499611377716, 0.0011777742765843868, 0.02983090654015541], "repair_candidates": [0.038803111761808395, 0.6823612451553345, 0.012835164554417133, 0.04347441345453262, 0.002177000744268298, 0.002929400885477662, 0.012072634883224964, 0.021904144436120987, 0.13907499611377716, 0.003728336188942194, 0.0011777742765843868, 0.02983090654015541, 0.0062496112659573555, 0.0018674073508009315, 0.00012808520114049315, 0.0004615375946741551, 0.0006437000120058656, 0.00019527941185515374, 8.525733574060723e-05], "target_probs": 0.874349057674408}}


{"result": {"time": "2021-02-21 06:50:27.754429", "n_pass": [379, 93, 28], "n_token": 50, "loss": [1.4863313436508179, 0.11839677393436432], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", ".", "(", "self", ",", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 16, "repair_targets": [4, 24, 27, 34, 36], "repair_candidates": [2, 22, 32, 37, 40, 42, 45, 10, 43, 6, 16, 21, 47, 49, 4, 24, 27, 34, 36]}}
{"prediction": {"error_location": 0.22620099782943726, "repair_targets": [0.6609653234481812, 0.029108818620443344, 0.162664532661438, 0.0020159627310931683, 0.033588897436857224], "repair_candidates": [0.031214168295264244, 0.6609653234481812, 0.018516412004828453, 0.024267878383398056, 0.0034514558501541615, 0.003477558959275484, 0.010548317804932594, 0.029108818620443344, 0.162664532661438, 0.004732459783554077, 0.0020159627310931683, 0.033588897436857224, 0.005772608797997236, 0.002279949374496937, 0.0004358684236649424, 0.005711913108825684, 0.000715563481207937, 0.0003446480550337583, 0.00018775460193865], "target_probs": 0.8883435130119324}}


{"result": {"time": "2021-02-21 06:50:28.865822", "n_pass": [407, 112, 29], "n_token": 49, "loss": [1.5132116079330444, 0.16505706310272217], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", ",", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 16, "repair_targets": [4, 24, 27, 34, 36], "repair_candidates": [2, 22, 32, 37, 39, 41, 44, 10, 42, 6, 16, 21, 46, 48, 4, 24, 27, 34, 36]}}
{"prediction": {"error_location": 0.22020164132118225, "repair_targets": [0.6450657844543457, 0.03573025390505791, 0.15884318947792053, 0.0034535257145762444, 0.0047525689005851746], "repair_candidates": [0.03579758480191231, 0.6450657844543457, 0.025434065610170364, 0.042853470891714096, 0.006016258616000414, 0.006777078378945589, 0.00785814505070448, 0.03573025390505791, 0.15884318947792053, 0.005400190595537424, 0.0034535257145762444, 0.0047525689005851746, 0.004653881769627333, 0.003012129571288824, 0.0005298863397911191, 0.011831066571176052, 0.001007230137474835, 0.0006153715658001602, 0.0003683103423099965], "target_probs": 0.8478453159332275}}


{"result": {"time": "2021-02-21 06:50:28.982916", "n_pass": [410, 114, 30], "n_token": 48, "loss": [1.0803157091140747, 0.20627550780773163], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 16, "repair_targets": [4, 24, 27, 34, 36], "repair_candidates": [2, 22, 32, 37, 39, 40, 43, 10, 41, 6, 16, 21, 45, 47, 4, 24, 27, 34, 36]}}
{"prediction": {"error_location": 0.33948835730552673, "repair_targets": [0.7094092965126038, 0.02117311954498291, 0.06470727920532227, 0.007853938266634941, 0.010465243831276894], "repair_candidates": [0.04162853956222534, 0.7094092965126038, 0.02327106148004532, 0.051756639033555984, 0.004123808350414038, 0.005748226307332516, 0.012229656800627708, 0.02117311954498291, 0.06470727920532227, 0.007316261064261198, 0.007853938266634941, 0.010465243831276894, 0.0053597199730575085, 0.009364889934659004, 0.00714146951213479, 0.01612051948904991, 0.0011320493649691343, 0.0008924478315748274, 0.00030583571060560644], "target_probs": 0.8136088848114014}}


{"result": {"time": "2021-02-21 06:50:29.218530", "n_pass": [419, 118, 31], "n_token": 47, "loss": [1.123917579650879, 0.31462597846984863], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def __init__(", "self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 15, "repair_targets": [3, 23, 26, 33, 35], "repair_candidates": [1, 21, 31, 36, 38, 39, 42, 9, 40, 5, 15, 20, 44, 46, 3, 23, 26, 33, 35]}}
{"prediction": {"error_location": 0.32500404119491577, "repair_targets": [0.5827335715293884, 0.03899496793746948, 0.09188055247068405, 0.007373864762485027, 0.009078935720026493], "repair_candidates": [0.04368691146373749, 0.5827335715293884, 0.02642466127872467, 0.08833140134811401, 0.012860779650509357, 0.020735327154397964, 0.004635390359908342, 0.03899496793746948, 0.09188055247068405, 0.0031390117947012186, 0.007373864762485027, 0.009078935720026493, 0.002217400586232543, 0.004229308571666479, 0.0046843565069139, 0.055587392300367355, 0.000928828027099371, 0.0019070833222940564, 0.0005701535264961421], "target_probs": 0.7300618886947632}}


{"result": {"time": "2021-02-21 06:50:29.277344", "n_pass": [420, 119, 32], "n_token": 46, "loss": [0.9681456685066223, 0.20711901783943176], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", ",", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 14, "repair_targets": [2, 22, 25, 32, 34], "repair_candidates": [0, 20, 30, 35, 37, 38, 41, 8, 39, 4, 14, 19, 43, 45, 2, 22, 25, 32, 34]}}
{"prediction": {"error_location": 0.3797866404056549, "repair_targets": [0.6569698452949524, 0.017806276679039, 0.12013799697160721, 0.008010711520910263, 0.009998084977269173], "repair_candidates": [0.022983742877840996, 0.6569698452949524, 0.024275900796055794, 0.07297158986330032, 0.007472450379282236, 0.010173329152166843, 0.002764879260212183, 0.017806276679039, 0.12013799697160721, 0.0034673719201236963, 0.008010711520910263, 0.009998084977269173, 0.0017788105178624392, 0.004176025744527578, 0.0033962165471166372, 0.0305568128824234, 0.0009568735840730369, 0.0015147255035117269, 0.0005883551784791052], "target_probs": 0.8129228949546814}}


{"result": {"time": "2021-02-21 06:50:29.571129", "n_pass": [428, 124, 33], "n_token": 45, "loss": [1.4270600080490112, 0.27160853147506714], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", "#NEWLINE#", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 13, "repair_targets": [2, 21, 24, 31, 33], "repair_candidates": [0, 19, 29, 34, 36, 37, 40, 7, 38, 4, 13, 18, 42, 44, 2, 21, 24, 31, 33]}}
{"prediction": {"error_location": 0.24001355469226837, "repair_targets": [0.6070438623428345, 0.013460199348628521, 0.11349961161613464, 0.010354415513575077, 0.017794499173760414], "repair_candidates": [0.018130701035261154, 0.6070438623428345, 0.0515873096883297, 0.0446976013481617, 0.018511392176151276, 0.028266824781894684, 0.0038043444510549307, 0.013460199348628521, 0.11349961161613464, 0.0028412824030965567, 0.010354415513575077, 0.017794499173760414, 0.0017004446126520634, 0.012831918895244598, 0.004329926799982786, 0.045958660542964935, 0.0007615316426381469, 0.00247554830275476, 0.0019499449990689754], "target_probs": 0.7621525526046753}}


{"result": {"time": "2021-02-21 06:50:29.629964", "n_pass": [430, 125, 34], "n_token": 44, "loss": [1.0232763290405273, 0.24952124059200287], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", "Parameter", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 12, "repair_targets": [2, 20, 23, 30, 32], "repair_candidates": [0, 18, 28, 33, 35, 36, 39, 7, 37, 4, 12, 17, 41, 43, 2, 20, 23, 30, 32]}}
{"prediction": {"error_location": 0.3594154417514801, "repair_targets": [0.7040786147117615, 0.00739232636988163, 0.052623093128204346, 0.0052475640550255775, 0.009832138195633888], "repair_candidates": [0.01167539693415165, 0.7040786147117615, 0.03789334371685982, 0.1058093011379242, 0.002353763673454523, 0.01246441900730133, 0.00315539026632905, 0.00739232636988163, 0.052623093128204346, 0.0009759815293364227, 0.0052475640550255775, 0.009832138195633888, 0.0005680382018908858, 0.006745991297066212, 0.0020153727382421494, 0.03384394943714142, 0.0002510327030904591, 0.0014324100920930505, 0.0016418778104707599], "target_probs": 0.779173731803894}}


{"result": {"time": "2021-02-21 06:50:29.690220", "n_pass": [431, 126, 35], "n_token": 43, "loss": [0.8661999702453613, 0.1332898736000061], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "checkBoolean", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 11, "repair_targets": [2, 19, 22, 29, 31], "repair_candidates": [0, 17, 27, 32, 34, 35, 38, 7, 36, 4, 11, 16, 40, 42, 2, 19, 22, 29, 31]}}
{"prediction": {"error_location": 0.42054662108421326, "repair_targets": [0.8121864795684814, 0.0058521186001598835, 0.04684410244226456, 0.003142448840662837, 0.007186187896877527], "repair_candidates": [0.009030444547533989, 0.8121864795684814, 0.025348449125885963, 0.049553126096725464, 0.0009323357953689992, 0.0061745913699269295, 0.0030806604772806168, 0.0058521186001598835, 0.04684410244226456, 0.00045949601917527616, 0.003142448840662837, 0.007186187896877527, 0.0004342913453001529, 0.002338773338124156, 0.0010234577348455787, 0.02474813722074032, 0.00013784892507828772, 0.0007119025685824454, 0.0008150717476382852], "target_probs": 0.8752113580703735}}


{"result": {"time": "2021-02-21 06:50:29.807270", "n_pass": [433, 128, 36], "n_token": 42, "loss": [0.8940802812576294, 0.08101756125688553], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", ".", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 18, 21, 28, 30], "repair_candidates": [0, 16, 26, 31, 33, 34, 37, 7, 35, 4, 10, 15, 39, 41, 2, 18, 21, 28, 30]}}
{"prediction": {"error_location": 0.4089835584163666, "repair_targets": [0.8535900115966797, 0.005174792371690273, 0.05742446333169937, 0.001297317910939455, 0.004690929781645536], "repair_candidates": [0.007271525450050831, 0.8535900115966797, 0.015920404344797134, 0.02395249344408512, 0.0002861182438209653, 0.0021617088932543993, 0.0031001868192106485, 0.005174792371690273, 0.05742446333169937, 0.0002902458654716611, 0.001297317910939455, 0.004690929781645536, 0.0004725520557258278, 0.0015208537224680185, 0.0006723250262439251, 0.021286170929670334, 0.00013612050679512322, 0.0002881054242607206, 0.00046356109669432044], "target_probs": 0.9221774935722351}}


{"result": {"time": "2021-02-21 06:50:30.158968", "n_pass": [442, 134, 37], "n_token": 41, "loss": [1.0362014770507812, 0.0836147889494896], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#NEWLINE#", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 17, 20, 27, 29], "repair_candidates": [0, 16, 25, 30, 32, 33, 36, 7, 34, 4, 10, 15, 38, 40, 2, 17, 20, 27, 29]}}
{"prediction": {"error_location": 0.3547998368740082, "repair_targets": [0.8207877278327942, 0.059669941663742065, 0.036737505346536636, 0.0005816357443109155, 0.0020087093580514193], "repair_candidates": [0.0072469147853553295, 0.8207877278327942, 0.015269484370946884, 0.03369544818997383, 0.00019042905478272587, 0.0007850754191167653, 0.000436306931078434, 0.059669941663742065, 0.036737505346536636, 8.326301031047478e-05, 0.0005816357443109155, 0.0020087093580514193, 0.00010248131002299488, 0.0003522218903526664, 0.00019626528955996037, 0.021337591111660004, 7.827961962902918e-05, 0.00013354919792618603, 0.00030722012161277235], "target_probs": 0.9197854995727539}}


{"result": {"time": "2021-02-21 06:50:30.452866", "n_pass": [449, 139, 38], "n_token": 40, "loss": [1.1823949813842773, 0.07392764091491699], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "(", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 17, 20, 26, 28], "repair_candidates": [0, 16, 24, 29, 31, 32, 35, 7, 33, 4, 10, 15, 37, 39, 2, 17, 20, 26, 28]}}
{"prediction": {"error_location": 0.3065436780452728, "repair_targets": [0.8294289708137512, 0.06440385431051254, 0.03280236944556236, 0.0004373330739326775, 0.001666351337917149], "repair_candidates": [0.0058911642991006374, 0.8294289708137512, 0.013162815943360329, 0.029359998181462288, 0.0002369185967836529, 0.0007928717532195151, 0.00036295654717832804, 0.06440385431051254, 0.03280236944556236, 2.746557402133476e-05, 0.0004373330739326775, 0.001666351337917149, 6.095317075960338e-05, 0.0003409378696233034, 0.0001753889227984473, 0.020278843119740486, 5.94769480812829e-05, 0.00012032654194626957, 0.00039099325658753514], "target_probs": 0.9287388920783997}}


{"result": {"time": "2021-02-21 06:50:30.569064", "n_pass": [452, 141, 39], "n_token": 39, "loss": [1.1212687492370605, 0.07039639353752136], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "vertices", "(", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 17, 20, 25, 27], "repair_candidates": [0, 16, 24, 28, 30, 31, 34, 7, 32, 4, 10, 15, 36, 38, 2, 17, 20, 25, 27]}}
{"prediction": {"error_location": 0.32586604356765747, "repair_targets": [0.7750492095947266, 0.12190324068069458, 0.033708635717630386, 0.0002883482084143907, 0.0010748649947345257], "repair_candidates": [0.0048933979123830795, 0.7750492095947266, 0.012509183958172798, 0.0218815878033638, 0.0002811134036164731, 0.0011093667708337307, 0.0005393603350967169, 0.12190324068069458, 0.033708635717630386, 8.924108442442957e-06, 0.0002883482084143907, 0.0010748649947345257, 2.1497227862710133e-05, 0.00038559469976462424, 0.00010972430027322844, 0.025136252865195274, 7.307666965061799e-05, 0.00014141242718324065, 0.0008851392776705325], "target_probs": 0.9320243000984192}}


{"result": {"time": "2021-02-21 06:50:30.627994", "n_pass": [454, 142, 40], "n_token": 38, "loss": [1.030164361000061, 0.12427542358636856], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "vertices", "vertices", "self", "(", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 17, 20, 25, 26], "repair_candidates": [0, 16, 24, 27, 29, 30, 33, 7, 31, 4, 10, 15, 35, 37, 2, 17, 20, 25, 26]}}
{"prediction": {"error_location": 0.3569483160972595, "repair_targets": [0.6990215182304382, 0.14738039672374725, 0.03563584014773369, 0.0004915090976282954, 0.0006073142867535353], "repair_candidates": [0.007850949652493, 0.6990215182304382, 0.014900445938110352, 0.04043878987431526, 0.000236778287217021, 0.0011694299755617976, 0.0008617898565717041, 0.14738039672374725, 0.03563584014773369, 0.00020731279801111668, 0.0004915090976282954, 0.0006073142867535353, 1.996566425077617e-05, 0.00048761162906885147, 0.00027812537155114114, 0.04780811816453934, 0.00025255230139009655, 0.00031170735019259155, 0.002039902377873659], "target_probs": 0.8831365704536438}}


{"result": {"time": "2021-02-21 06:50:30.689118", "n_pass": [457, 143, 41], "n_token": 37, "loss": [0.9731605052947998, 0.2787078619003296], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "if", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 17, 20, 25, 26], "repair_candidates": [0, 16, 24, 27, 28, 29, 32, 7, 30, 4, 10, 15, 34, 36, 2, 17, 20, 25, 26]}}
{"prediction": {"error_location": 0.37788689136505127, "repair_targets": [0.6914562582969666, 0.01631341129541397, 0.004632607102394104, 0.03280658274888992, 0.01155206561088562], "repair_candidates": [0.01994505152106285, 0.6914562582969666, 0.024598378688097, 0.11931106448173523, 0.00013902850332669914, 0.00046221018419601023, 0.000552323937881738, 0.01631341129541397, 0.004632607102394104, 0.0022354063112288713, 0.03280658274888992, 0.01155206561088562, 0.0007810922106727958, 0.0013652052730321884, 0.0022822082974016666, 0.0706164613366127, 0.0003126376250293106, 6.702762766508386e-05, 0.0005709074903279543], "target_probs": 0.7567609548568726}}


{"result": {"time": "2021-02-21 06:50:31.390043", "n_pass": [480, 155, 42], "n_token": 36, "loss": [0.46680259704589844, 0.25385794043540955], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "(", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 16, 19, 24, 25], "repair_candidates": [0, 15, 23, 26, 27, 28, 31, 7, 29, 4, 10, 14, 33, 35, 2, 16, 19, 24, 25]}}
{"prediction": {"error_location": 0.6270039677619934, "repair_targets": [0.4288179576396942, 0.12269450724124908, 0.09413014352321625, 0.11916009336709976, 0.010999325662851334], "repair_candidates": [0.018690267577767372, 0.4288179576396942, 0.006199781782925129, 0.07399629801511765, 6.775072688469663e-05, 0.0011920040706172585, 0.00283229467459023, 0.12269450724124908, 0.09413014352321625, 0.0021929023787379265, 0.11916009336709976, 0.010999325662851334, 0.0004655309021472931, 0.0012750050518661737, 0.003051095176488161, 0.11279411613941193, 0.00036844058195129037, 0.00025851165992207825, 0.0008139695855788887], "target_probs": 0.7758020162582397}}


{"result": {"time": "2021-02-21 06:50:31.448494", "n_pass": [481, 156, 43], "n_token": 35, "loss": [0.318671852350235, 0.23458924889564514], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "undirected", "self", "vertices", "#UNINDENT#", "else", "vertices", ",", ":", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 15, 18, 23, 24], "repair_candidates": [0, 14, 22, 25, 26, 27, 30, 7, 28, 4, 10, 13, 32, 34, 2, 15, 18, 23, 24]}}
{"prediction": {"error_location": 0.727114200592041, "repair_targets": [0.4013095498085022, 0.17062786221504211, 0.2099914848804474, 0.004101199097931385, 0.004865491762757301], "repair_candidates": [0.009686688892543316, 0.4013095498085022, 0.0044006891548633575, 0.08745533227920532, 4.266388714313507e-05, 0.009762811474502087, 0.0051806895062327385, 0.17062786221504211, 0.2099914848804474, 0.0007748334319330752, 0.004101199097931385, 0.004865491762757301, 0.00034437168505974114, 0.0001639955589780584, 0.00032840974745340645, 0.09068083018064499, 7.277199620148167e-05, 6.711042806273326e-05, 0.00014325542724691331], "target_probs": 0.7908956408500671}}


{"result": {"time": "2021-02-21 06:50:31.564724", "n_pass": [486, 158, 44], "n_token": 34, "loss": [0.3417351543903351, 0.3054767847061157], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "undirected", "self", "vertices", "#UNINDENT#", "vertices", ",", ":", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 15, 17, 22, 23], "repair_candidates": [0, 14, 21, 24, 25, 26, 29, 7, 27, 4, 10, 13, 31, 33, 2, 15, 17, 22, 23]}}
{"prediction": {"error_location": 0.7105363607406616, "repair_targets": [0.4659304916858673, 0.11972492188215256, 0.14107006788253784, 0.005125594325363636, 0.004920960403978825], "repair_candidates": [0.010813051834702492, 0.4659304916858673, 0.008383853361010551, 0.1521698534488678, 5.601999509963207e-05, 0.008426216430962086, 0.0056488486006855965, 0.11972492188215256, 0.14107006788253784, 0.0007828801753930748, 0.005125594325363636, 0.004920960403978825, 0.0004407423548400402, 0.0001051306098815985, 0.00018040018039755523, 0.0759686529636383, 5.225648419582285e-05, 6.162059435155243e-05, 0.00013847110676579177], "target_probs": 0.7367720007896423}}


{"result": {"time": "2021-02-21 06:50:31.623694", "n_pass": [488, 159, 45], "n_token": 33, "loss": [0.5881516933441162, 0.4220072329044342], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "undirected", "self", "vertices", "#UNINDENT#", "vertices", ":", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 15, 17, 21, 22], "repair_candidates": [0, 14, 20, 23, 24, 25, 28, 7, 26, 4, 10, 13, 30, 32, 2, 15, 17, 21, 22]}}
{"prediction": {"error_location": 0.5553527474403381, "repair_targets": [0.39750245213508606, 0.1279134899377823, 0.07726113498210907, 0.04813343286514282, 0.004918738733977079], "repair_candidates": [0.01896253228187561, 0.39750245213508606, 0.010392596945166588, 0.19817572832107544, 9.01576568139717e-05, 0.009399519301950932, 0.0121383061632514, 0.1279134899377823, 0.07726113498210907, 0.00150590343400836, 0.04813343286514282, 0.004918738733977079, 0.0009251282317563891, 0.00010238156392006204, 0.0004522413364611566, 0.0917011946439743, 0.00010189501335844398, 0.00012410814815666527, 0.00019906848319806159], "target_probs": 0.6557292938232422}}


{"result": {"time": "2021-02-21 06:50:31.682028", "n_pass": [489, 160, 46], "n_token": 32, "loss": [0.8288365006446838, 0.6364540457725525], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "undirected", "self", "vertices", "#UNINDENT#", "vertices", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 15, 17, 20, 21], "repair_candidates": [0, 14, 19, 22, 23, 24, 27, 7, 25, 4, 10, 13, 29, 31, 2, 15, 17, 20, 21]}}
{"prediction": {"error_location": 0.43655693531036377, "repair_targets": [0.26916801929473877, 0.09268514811992645, 0.09047052264213562, 0.06883368641138077, 0.00800815038383007], "repair_candidates": [0.01761666126549244, 0.26916801929473877, 0.01120644062757492, 0.2688993215560913, 0.00013139723159838468, 0.020327093079686165, 0.014572976157069206, 0.09268514811992645, 0.09047052264213562, 0.0017225502524524927, 0.06883368641138077, 0.00800815038383007, 0.00029793710564263165, 6.077594662201591e-05, 0.0002685893850866705, 0.13537362217903137, 8.994480594992638e-05, 8.137398981489241e-05, 0.00018577939772512764], "target_probs": 0.529165506362915}}


{"result": {"time": "2021-02-21 06:50:32.441941", "n_pass": [520, 173, 47], "n_token": 31, "loss": [0.9675678014755249, 0.5342236161231995], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", ")", "#NEWLINE#", "undirected", "self", "vertices", "vertices", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 15, 16, 19, 20], "repair_candidates": [0, 14, 18, 21, 22, 23, 26, 7, 24, 4, 10, 13, 28, 30, 2, 15, 16, 19, 20]}}
{"prediction": {"error_location": 0.38000619411468506, "repair_targets": [0.26549065113067627, 0.09036719053983688, 0.12026526033878326, 0.0939822867512703, 0.01601877063512802], "repair_candidates": [0.01745120994746685, 0.26549065113067627, 0.014044874347746372, 0.2153276950120926, 0.00015942894970066845, 0.029747260734438896, 0.007767613045871258, 0.09036719053983688, 0.12026526033878326, 0.0028287526220083237, 0.0939822867512703, 0.01601877063512802, 0.00028913418645970523, 6.39167265035212e-05, 0.00012258214701432735, 0.1254817396402359, 5.751290518674068e-05, 0.00011497690138639882, 0.0004191743500996381], "target_probs": 0.5861241817474365}}


{"result": {"time": "2021-02-21 06:50:33.083599", "n_pass": [547, 184, 48], "n_token": 30, "loss": [1.1402556896209717, 0.19068467617034912], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", ".", "(", "undirected", "#NEWLINE#", "undirected", "self", "vertices", "vertices", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 10, "repair_targets": [2, 14, 15, 18, 19], "repair_candidates": [0, 13, 17, 20, 21, 22, 25, 7, 23, 4, 10, 12, 27, 29, 2, 14, 15, 18, 19]}}
{"prediction": {"error_location": 0.3197372555732727, "repair_targets": [0.29748302698135376, 0.14665280282497406, 0.20264635980129242, 0.1405467838048935, 0.0390641875565052], "repair_candidates": [0.015246432274580002, 0.29748302698135376, 0.02346082404255867, 0.04905472695827484, 3.7507343222387135e-05, 0.030611876398324966, 0.010494230315089226, 0.14665280282497406, 0.20264635980129242, 0.003917234484106302, 0.1405467838048935, 0.0390641875565052, 0.0003374801599420607, 0.00013378025323618203, 0.00020623720774892718, 0.03917929530143738, 6.028561983839609e-05, 0.00024755531921982765, 0.0006193326553329825], "target_probs": 0.8263931274414062}}


{"result": {"time": "2021-02-21 06:50:33.662622", "n_pass": [575, 194, 49], "n_token": 29, "loss": [0.8853784799575806, 0.09179313480854034], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "True", "dtype", "(", "undirected", "#NEWLINE#", "undirected", "self", "vertices", "vertices", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 9, "repair_targets": [2, 13, 14, 17, 18], "repair_candidates": [0, 12, 16, 19, 20, 21, 24, 7, 22, 4, 9, 11, 26, 28, 2, 13, 14, 17, 18]}}
{"prediction": {"error_location": 0.41255804896354675, "repair_targets": [0.3327087163925171, 0.10807333141565323, 0.19648432731628418, 0.19069156050682068, 0.08433587849140167], "repair_candidates": [0.01266939751803875, 0.3327087163925171, 0.017782993614673615, 0.00827979389578104, 2.6564935978967696e-05, 0.016099032014608383, 0.007382383104413748, 0.10807333141565323, 0.19648432731628418, 0.0033793484326452017, 0.19069156050682068, 0.08433587849140167, 0.00036545118200592697, 0.0004792112740688026, 0.0002443300327286124, 0.020485173910856247, 6.072781980037689e-05, 0.0002001391985686496, 0.0002515896048862487], "target_probs": 0.9122938513755798}}


{"result": {"time": "2021-02-21 06:50:34.243956", "n_pass": [603, 204, 50], "n_token": 28, "loss": [0.7958285808563232, 0.09173282980918884], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "vertices", ",", "undirected", "=", "dtype", "(", "undirected", "#NEWLINE#", "undirected", "self", "vertices", "vertices", "#INDENT#", "self", "vertices", "vertices", "self", "self", "self", "dtype", "#NEWLINE#", "self", ".", "undirected", "=", "undirected"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 13, 16, 17], "repair_candidates": [0, 11, 15, 18, 19, 20, 23, 6, 21, 4, 8, 10, 25, 27, 2, 12, 13, 16, 17]}}
{"prediction": {"error_location": 0.4512072205543518, "repair_targets": [0.4854053854942322, 0.07439783215522766, 0.13860097527503967, 0.15546129643917084, 0.05848337337374687], "repair_candidates": [0.013844930566847324, 0.4854053854942322, 0.014622490853071213, 0.01167760044336319, 2.872532422770746e-05, 0.012793097645044327, 0.00913393683731556, 0.07439783215522766, 0.13860097527503967, 0.0042780982330441475, 0.15546129643917084, 0.05848337337374687, 4.741772136185318e-05, 0.00046724535059183836, 0.00025063479552045465, 0.020102130249142647, 0.00014284772623796016, 0.00020689218945335597, 5.512887946679257e-05], "target_probs": 0.9123488664627075}}




Minimal simplified tokens:

['self', ',', 'vertices', ',', 'undirected', '=', 'dtype', '(', 'undirected', '#NEWLINE#', 'undirected', 'self', 'vertices', 'vertices', '#INDENT#', 'self', 'vertices', 'vertices', 'self', 'self', 'self', 'dtype', '#NEWLINE#', 'self', '.', 'undirected', '=', 'undirected']
