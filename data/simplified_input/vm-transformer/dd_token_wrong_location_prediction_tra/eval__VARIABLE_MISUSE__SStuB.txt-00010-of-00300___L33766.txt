
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "if", "isinstance", "(", "param", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"], "error_location": [42], "repair_targets": [4, 31, 77, 102], "repair_candidates": [2, 25, 23, 33, 40, 42, 10, 68, 75, 6, 90, 4, 31, 77, 102, 14, 96, 38, 48, 55, 57, 80, 84], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "falconry/falcon/falcon/request.py", "license": "apache-2.0", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 33766, "results": {"model": "transformer", "prob": {"loc": [[0.21719050407409668, 7.092293685673212e-07, 2.8169714028081216e-07, 1.9174192900095477e-08, 4.608163180819247e-06, 1.6797299551285505e-08, 1.0843466498045018e-06, 6.563620758015531e-08, 8.572943244189446e-08, 1.2293620343939438e-08, 5.145827230990108e-07, 6.420385290084596e-08, 1.9149446472965792e-08, 7.043156724506616e-09, 1.6828228126541944e-06, 6.916517492072671e-08, 2.757751893511795e-08, 8.917507621220011e-09, 1.8375038379758735e-08, 4.410608767102531e-08, 2.5552560956043635e-08, 4.2422559687338435e-08, 2.994379499909883e-08, 2.4520622332602215e-07, 2.2928169585156866e-07, 0.00012871238868683577, 1.7290025411398346e-08, 2.2396047683059805e-08, 5.0490967851146706e-08, 4.9061917195558635e-08, 8.692448716374201e-08, 0.00104632752481848, 2.1245575965167518e-07, 0.027124246582388878, 1.2112147729226308e-08, 3.5900697525903524e-08, 3.658929870198335e-08, 2.825353284663379e-08, 8.57540101151244e-07, 1.1714271863638714e-07, 0.43224039673805237, 1.408060654739529e-07, 0.25240612030029297, 4.0228581354995185e-08, 7.656938549871484e-08, 8.516196459140701e-08, 4.0118170119285423e-08, 2.7973561600447283e-07, 0.0007266419706866145, 2.2438813118696999e-07, 3.697110287248506e-06, 5.9190696788391506e-08, 1.2749966060709994e-07, 1.0109703652005919e-07, 7.529506262926589e-08, 9.113441592489835e-06, 9.603567718841077e-08, 0.006454849615693092, 7.907473076329552e-08, 1.0621962246659677e-05, 5.003055889574171e-07, 1.2710733017229359e-06, 3.9133053064688283e-07, 2.5978221174227656e-07, 5.627694577015063e-07, 8.705777077011589e-07, 3.633519725099177e-07, 2.566222292443854e-07, 0.0011247090296819806, 9.088474826057791e-07, 2.7122007395519176e-07, 1.732938699205988e-07, 4.567984888126375e-07, 6.374021950250608e-07, 3.08902343704176e-07, 6.341420521494001e-05, 7.329541773515302e-08, 0.0008628664072602987, 6.625340631671861e-08, 8.938632163335569e-07, 0.006026309449225664, 8.028103479773563e-07, 3.3532631960042636e-07, 1.0951814743975774e-07, 0.004996457137167454, 3.1781709708411654e-07, 3.2291990237354185e-07, 3.7570561062238994e-07, 9.554065400152467e-06, 1.977222609639284e-06, 0.008043050765991211, 7.823555279173888e-07, 1.2141582601543632e-06, 3.142714604109642e-07, 8.019016917160116e-08, 7.075529140365688e-08, 0.009604682214558125, 8.882440738489095e-08, 6.055669388160823e-08, 5.8105187328294505e-09, 7.957780923106839e-08, 7.879458507886739e-07, 0.03189805895090103, 8.32176340281876e-07]], "pointer": [[0.0, 0.0, 0.08439070731401443, 0.0, 0.40855735540390015, 0.0, 0.00202075089327991, 0.0, 0.0, 0.0, 0.0053327069617807865, 0.0, 0.0, 0.0, 0.029200389981269836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007559857331216335, 0.0, 0.0320839025080204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25809746980667114, 0.0, 0.005976291373372078, 0.0, 0.0, 0.0, 0.0, 0.043006427586078644, 0.0, 2.8598298740689643e-05, 0.0, 3.4912412957055494e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020298998802900314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019057728350162506, 0.0, 0.0005602353485301137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03195976838469505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.038608621805906296, 0.0, 0.005741237662732601, 0.0, 0.0, 0.00023425105609931052, 0.0, 0.0, 0.0, 0.0005974404630251229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002603498287498951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002049523638561368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0043424884788692, 0.0]], "target": [0.6767385601997375]}, "loss": [1.376715898513794, 0.3904702663421631], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [40]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:49:50.373853", "n_pass": [1, 1, 1], "n_token": 104, "loss": [0.8387734889984131, 0.3904702663421631], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "if", "isinstance", "(", "param", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 40, "repair_targets": [4, 31, 77, 102], "repair_candidates": [2, 25, 23, 33, 40, 42, 10, 68, 75, 6, 90, 4, 31, 77, 102, 14, 96, 38, 48, 55, 57, 80, 84]}}
{"prediction": {"error_location": 0.43224039673805237, "repair_targets": [0.40855735540390015, 0.25809746980667114, 0.005741237662732601, 0.0043424884788692], "repair_candidates": [0.08439070731401443, 0.40855735540390015, 0.00202075089327991, 0.0053327069617807865, 0.029200389981269836, 0.007559857331216335, 0.0320839025080204, 0.25809746980667114, 0.005976291373372078, 0.043006427586078644, 2.8598298740689643e-05, 3.4912412957055494e-05, 0.020298998802900314, 0.019057728350162506, 0.0005602353485301137, 0.03195976838469505, 0.038608621805906296, 0.005741237662732601, 0.00023425105609931052, 0.0005974404630251229, 0.0002603498287498951, 0.002049523638561368, 0.0043424884788692], "target_probs": 0.6767385601997375}}


{"result": {"time": "2021-02-21 06:49:50.443211", "n_pass": [97, 2, 2], "n_token": 101, "loss": [0.631666362285614, 0.2642040550708771], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", ":", "#NEWLINE#", "#INDENT#", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "if", "isinstance", "(", "param", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 37, "repair_targets": [4, 28, 74, 99], "repair_candidates": [2, 22, 20, 30, 37, 39, 10, 65, 72, 6, 87, 4, 28, 74, 99, 14, 93, 35, 45, 52, 54, 77, 81]}}
{"prediction": {"error_location": 0.5317050814628601, "repair_targets": [0.4177009165287018, 0.3370087146759033, 0.010008256882429123, 0.003098969114944339], "repair_candidates": [0.04425577074289322, 0.4177009165287018, 0.0009460774017497897, 0.0033396603539586067, 0.014241361990571022, 0.007617932744324207, 0.034962091594934464, 0.3370087146759033, 0.013977490365505219, 0.015471672639250755, 5.698112545360345e-06, 7.182247645687312e-05, 0.0176735557615757, 0.009771126322448254, 0.0002034130593528971, 0.03217042237520218, 0.03626210242509842, 0.010008256882429123, 3.7334706576075405e-05, 0.0001758279395289719, 0.0002003394765779376, 0.0007994344341568649, 0.003098969114944339], "target_probs": 0.7678168416023254}}


{"result": {"time": "2021-02-21 06:49:50.503051", "n_pass": [98, 3, 3], "n_token": 98, "loss": [0.4150479733943939, 0.17254696786403656], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "if", "isinstance", "(", "param", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 71, 96], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 62, 69, 6, 84, 4, 25, 71, 96, 14, 90, 32, 42, 49, 51, 74, 78]}}
{"prediction": {"error_location": 0.6603084802627563, "repair_targets": [0.6444529891014099, 0.19043086469173431, 0.004189701750874519, 0.002445157617330551], "repair_candidates": [0.053125277161598206, 0.6444529891014099, 0.0008771937573328614, 0.0020564005244523287, 0.0019667958840727806, 0.008901642635464668, 0.04008324444293976, 0.19043086469173431, 0.0032608620822429657, 0.0044034929014742374, 1.6348260487575317e-06, 4.805440767086111e-05, 0.0017923907143995166, 0.0031662133987993, 7.012810237938538e-05, 0.015788638964295387, 0.022494632750749588, 0.004189701750874519, 7.157944764912827e-06, 4.807090954273008e-05, 8.736127347219735e-05, 0.00030205707298591733, 0.002445157617330551], "target_probs": 0.841518759727478}}


{"result": {"time": "2021-02-21 06:49:50.624793", "n_pass": [107, 5, 4], "n_token": 95, "loss": [0.42757147550582886, 0.2357122004032135], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 68, 93], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 59, 66, 6, 81, 4, 25, 68, 93, 14, 87, 32, 39, 46, 48, 71, 75]}}
{"prediction": {"error_location": 0.6520907878875732, "repair_targets": [0.6425274014472961, 0.14313560724258423, 0.0015835652593523264, 0.0027614617720246315], "repair_candidates": [0.06635896116495132, 0.6425274014472961, 0.0008902179542928934, 0.0019808749202638865, 0.0029309194069355726, 0.009693448431789875, 0.06168361380696297, 0.14313560724258423, 0.003168056719005108, 0.0018084290204569697, 4.116845957469195e-06, 3.898337308783084e-05, 0.0022843042388558388, 0.004829214885830879, 0.00010964156535919756, 0.016356362029910088, 0.03703232854604721, 0.0015835652593523264, 1.9545377654139884e-05, 0.00010030523117166013, 8.183965837815776e-05, 0.0006207004771567881, 0.0027614617720246315], "target_probs": 0.790008008480072}}


{"result": {"time": "2021-02-21 06:49:50.684122", "n_pass": [109, 6, 5], "n_token": 92, "loss": [0.40800294280052185, 0.32453644275665283], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 65, 90], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 56, 63, 6, 78, 4, 25, 65, 90, 14, 84, 32, 39, 43, 45, 68, 72]}}
{"prediction": {"error_location": 0.6649768948554993, "repair_targets": [0.5598955154418945, 0.15626604855060577, 0.0017910648602992296, 0.004909762647002935], "repair_candidates": [0.08121789991855621, 0.5598955154418945, 0.001484547508880496, 0.0028301153797656298, 0.003734174184501171, 0.00891961995512247, 0.07273957878351212, 0.15626604855060577, 0.0026203258894383907, 0.003361175302416086, 4.918035301670898e-06, 3.7152625736780465e-05, 0.002025352558121085, 0.008281665854156017, 9.24574924283661e-05, 0.021762320771813393, 0.06682737916707993, 0.0017910648602992296, 6.148825923446566e-05, 0.00022695332881994545, 0.00019282149150967598, 0.0007177063962444663, 0.004909762647002935], "target_probs": 0.7228623628616333}}


{"result": {"time": "2021-02-21 06:49:50.744087", "n_pass": [112, 7, 6], "n_token": 89, "loss": [0.34523966908454895, 0.47310081124305725], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 62, 87], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 53, 60, 6, 75, 4, 25, 62, 87, 14, 81, 32, 39, 43, 45, 65, 69]}}
{"prediction": {"error_location": 0.7080507874488831, "repair_targets": [0.4868899881839752, 0.12360230833292007, 0.00394446263089776, 0.008630502969026566], "repair_candidates": [0.11274789273738861, 0.4868899881839752, 0.0025405194610357285, 0.004241949412971735, 0.00584384985268116, 0.007947506383061409, 0.09271655976772308, 0.12360230833292007, 0.0019135195761919022, 0.00453377328813076, 6.171878339955583e-06, 3.9087906770873815e-05, 0.0019420800963416696, 0.012995734810829163, 0.00035931618185713887, 0.04219728335738182, 0.08599033206701279, 0.00394446263089776, 3.2389569241786376e-05, 0.00010611271864036098, 0.00012344498827587813, 0.0006552916020154953, 0.008630502969026566], "target_probs": 0.6230672597885132}}


{"result": {"time": "2021-02-21 06:49:50.805641", "n_pass": [113, 8, 7], "n_token": 86, "loss": [0.4000239372253418, 0.5312705039978027], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 59, 84], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 50, 57, 6, 72, 4, 25, 59, 84, 14, 78, 32, 39, 43, 45, 62, 66]}}
{"prediction": {"error_location": 0.6703039407730103, "repair_targets": [0.42943981289863586, 0.13491690158843994, 0.010032528080046177, 0.013468407094478607], "repair_candidates": [0.11049149930477142, 0.42943981289863586, 0.004277341533452272, 0.03672777861356735, 0.006271403282880783, 0.010425359942018986, 0.09256742894649506, 0.13491690158843994, 0.004760006908327341, 0.008158358745276928, 3.150201155222021e-05, 8.585081377532333e-05, 0.0032877030316740274, 0.003125295741483569, 0.00030857714591547847, 0.03497179225087166, 0.09563904255628586, 0.010032528080046177, 2.6189438358414918e-05, 0.00015869502385612577, 0.00025746304891072214, 0.0005710618570446968, 0.013468407094478607], "target_probs": 0.5878576040267944}}


{"result": {"time": "2021-02-21 06:49:50.865308", "n_pass": [115, 9, 8], "n_token": 83, "loss": [0.43043985962867737, 0.4712412357330322], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 56, 81], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 50, 54, 6, 69, 4, 25, 56, 81, 14, 75, 32, 39, 43, 45, 59, 63]}}
{"prediction": {"error_location": 0.6502229571342468, "repair_targets": [0.42810413241386414, 0.16816696524620056, 0.010233270935714245, 0.017722614109516144], "repair_candidates": [0.11903126537799835, 0.42810413241386414, 0.005665370728820562, 0.041743651032447815, 0.006398363038897514, 0.011337029747664928, 0.09643172472715378, 0.16816696524620056, 0.0029677837155759335, 0.009347590617835522, 4.726800398202613e-05, 0.0001306076446780935, 0.004609576426446438, 0.0048706429079174995, 0.00046814256347715855, 0.008520734496414661, 0.06254269182682037, 0.010233270935714245, 2.5590434233890846e-05, 0.00023718789452686906, 0.0003366621967870742, 0.0010612207697704434, 0.017722614109516144], "target_probs": 0.624226987361908}}


{"result": {"time": "2021-02-21 06:49:50.925672", "n_pass": [121, 10, 9], "n_token": 79, "loss": [0.4842299520969391, 0.5271620154380798], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 56, 77], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 50, 54, 6, 69, 4, 25, 56, 77, 14, 71, 32, 39, 43, 45, 59, 63]}}
{"prediction": {"error_location": 0.6161714196205139, "repair_targets": [0.3726930320262909, 0.1942524015903473, 0.01086572278290987, 0.012466627173125744], "repair_candidates": [0.09929988533258438, 0.3726930320262909, 0.008787992410361767, 0.03385084122419357, 0.009393706917762756, 0.017574520781636238, 0.07319962233304977, 0.1942524015903473, 0.005395262967795134, 0.011092722415924072, 4.935040487907827e-05, 0.00017581053543835878, 0.005379699636250734, 0.006276018917560577, 0.0005525596789084375, 0.01057783979922533, 0.1254502236843109, 0.01086572278290987, 5.813728421344422e-05, 0.0008076390367932618, 0.0005726780509576201, 0.001227741246111691, 0.012466627173125744], "target_probs": 0.5902777910232544}}


{"result": {"time": "2021-02-21 06:49:51.049851", "n_pass": [195, 12, 10], "n_token": 77, "loss": [0.4746454358100891, 0.5095089077949524], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "HTTPMissingParam", "(", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 56, 75], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 50, 54, 6, 69, 4, 25, 56, 75, 14, 71, 32, 39, 43, 45, 59, 63]}}
{"prediction": {"error_location": 0.6221056580543518, "repair_targets": [0.38615089654922485, 0.1899814009666443, 0.01134317833930254, 0.013315063901245594], "repair_candidates": [0.0944816991686821, 0.38615089654922485, 0.008512825705111027, 0.03221501410007477, 0.008420382626354694, 0.016823897138237953, 0.07099173218011856, 0.1899814009666443, 0.005608635488897562, 0.010811807587742805, 5.003344267606735e-05, 0.00017368454427924007, 0.0052378540858626366, 0.00608362490311265, 0.0005136365653015673, 0.010073159821331501, 0.12627699971199036, 0.01134317833930254, 4.661730054067448e-05, 0.0006244155811145902, 0.0004574373015202582, 0.0018059717258438468, 0.013315063901245594], "target_probs": 0.6007905602455139}}


{"result": {"time": "2021-02-21 06:49:51.108482", "n_pass": [196, 13, 11], "n_token": 75, "loss": [0.5135449171066284, 0.36364826560020447], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4, 25, 56, 73], "repair_candidates": [2, 19, 17, 27, 34, 36, 10, 50, 54, 6, 69, 4, 25, 56, 73, 14, 71, 32, 39, 43, 45, 59, 63]}}
{"prediction": {"error_location": 0.5983706712722778, "repair_targets": [0.4358544945716858, 0.23751072585582733, 0.007165666203945875, 0.014604737982153893], "repair_candidates": [0.07383714616298676, 0.4358544945716858, 0.010091760195791721, 0.025610055774450302, 0.007506520487368107, 0.013006583787500858, 0.050205498933792114, 0.23751072585582733, 0.003572976915165782, 0.010946361348032951, 4.814563726540655e-05, 0.0002118764678016305, 0.004812787752598524, 0.005933188367635012, 0.0005561337457038462, 0.009134525433182716, 0.08503242582082748, 0.007165666203945875, 3.411241414141841e-05, 0.0006181026110425591, 0.0005847575375810266, 0.003121399786323309, 0.014604737982153893], "target_probs": 0.6951356530189514}}


{"result": {"time": "2021-02-21 06:49:51.167700", "n_pass": [198, 14, 12], "n_token": 74, "loss": [0.5706735253334045, 0.21119393408298492], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_param(", "self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 33, "repair_targets": [3, 24, 55, 72], "repair_candidates": [1, 18, 16, 26, 33, 35, 9, 49, 53, 5, 68, 3, 24, 55, 72, 13, 70, 31, 38, 42, 44, 58, 62]}}
{"prediction": {"error_location": 0.5651447176933289, "repair_targets": [0.608650803565979, 0.18538197875022888, 0.0021973494440317154, 0.013386921025812626], "repair_candidates": [0.023227637633681297, 0.608650803565979, 0.008907632902264595, 0.02882847748696804, 0.005914609879255295, 0.011356998234987259, 0.03228151425719261, 0.18538197875022888, 0.0019026033114641905, 0.007769731339067221, 3.3052183425752446e-05, 0.0001715111720841378, 0.0043119522742927074, 0.0047559053637087345, 0.00048666592920199037, 0.012784748338162899, 0.04507472738623619, 0.0021973494440317154, 2.413037327642087e-05, 0.00034528615651652217, 0.0003449303621891886, 0.0018607632955536246, 0.013386921025812626], "target_probs": 0.8096170425415039}}


{"result": {"time": "2021-02-21 06:49:51.226512", "n_pass": [199, 15, 13], "n_token": 73, "loss": [0.5059430599212646, 0.23529574275016785], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "=", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 32, "repair_targets": [2, 23, 54, 71], "repair_candidates": [0, 17, 15, 25, 32, 34, 8, 48, 52, 4, 67, 2, 23, 54, 71, 12, 69, 30, 37, 41, 43, 57, 61]}}
{"prediction": {"error_location": 0.6029366254806519, "repair_targets": [0.48064061999320984, 0.29472866654396057, 0.002030884148553014, 0.012936876155436039], "repair_candidates": [0.0060580517165362835, 0.48064061999320984, 0.013276170939207077, 0.03047272190451622, 0.0079642403870821, 0.015812953934073448, 0.03652636334300041, 0.29472866654396057, 0.0017043673433363438, 0.0071188220754265785, 3.5393532016314566e-05, 0.0002222235780209303, 0.004472880158573389, 0.005026637576520443, 0.0004442530625965446, 0.019211620092391968, 0.058228038251399994, 0.002030884148553014, 1.6816969946376048e-05, 0.00029284373158589005, 0.0006735926144756377, 0.0021049410570412874, 0.012936876155436039], "target_probs": 0.790337085723877}}


{"result": {"time": "2021-02-21 06:49:51.405881", "n_pass": [205, 18, 14], "n_token": 72, "loss": [0.4650798439979553, 0.4606437683105469], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", ",", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 31, "repair_targets": [2, 22, 53, 70], "repair_candidates": [0, 16, 14, 24, 31, 33, 7, 47, 51, 4, 66, 2, 22, 53, 70, 11, 68, 29, 36, 40, 42, 56, 60]}}
{"prediction": {"error_location": 0.6280848979949951, "repair_targets": [0.3695485591888428, 0.24662800133228302, 0.0026440632063895464, 0.012056749314069748], "repair_candidates": [0.00716207642108202, 0.3695485591888428, 0.15849706530570984, 0.04978833720088005, 0.007852713577449322, 0.019349869340658188, 0.03435078263282776, 0.24662800133228302, 0.0013316998956725001, 0.00535382516682148, 4.308782081352547e-05, 0.0003030845255125314, 0.0035622878931462765, 0.004258502274751663, 0.0004244366136845201, 0.03188058361411095, 0.040500059723854065, 0.0026440632063895464, 1.0334175385651179e-05, 0.00015264854300767183, 0.00287652132101357, 0.0014247295912355185, 0.012056749314069748], "target_probs": 0.6308773756027222}}


{"result": {"time": "2021-02-21 06:49:51.523537", "n_pass": [207, 20, 15], "n_token": 71, "loss": [0.37263843417167664, 0.48818540573120117], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "None", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 30, "repair_targets": [2, 21, 52, 69], "repair_candidates": [0, 15, 13, 23, 30, 32, 6, 46, 50, 4, 65, 2, 21, 52, 69, 10, 67, 28, 35, 39, 41, 55, 59]}}
{"prediction": {"error_location": 0.6889142990112305, "repair_targets": [0.3735029101371765, 0.22637218236923218, 0.0026919483207166195, 0.011172051541507244], "repair_candidates": [0.00579057214781642, 0.3735029101371765, 0.22629430890083313, 0.044947970658540726, 0.005988479591906071, 0.017732447013258934, 0.027067923918366432, 0.22637218236923218, 0.0008099551196210086, 0.004453097004443407, 2.4184409994632006e-05, 0.000286758819129318, 0.002844256581738591, 0.0038668164052069187, 0.0003763479762710631, 0.021834367886185646, 0.018994217738509178, 0.0026919483207166195, 9.537970072415192e-06, 0.00012502138270065188, 0.0032171134371310472, 0.0015975410351529717, 0.011172051541507244], "target_probs": 0.6137390732765198}}


{"result": {"time": "2021-02-21 06:49:51.643373", "n_pass": [210, 22, 16], "n_token": 70, "loss": [0.4256366491317749, 0.5116524696350098], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", ",", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 29, "repair_targets": [2, 20, 51, 68], "repair_candidates": [0, 14, 12, 22, 29, 31, 6, 45, 49, 4, 64, 2, 20, 51, 68, 9, 66, 27, 34, 38, 40, 54, 58]}}
{"prediction": {"error_location": 0.6533536911010742, "repair_targets": [0.37524932622909546, 0.21376153826713562, 0.0024674804881215096, 0.008025800809264183], "repair_candidates": [0.005518396385014057, 0.37524932622909546, 0.26098400354385376, 0.02120286412537098, 0.008600173518061638, 0.023829849436879158, 0.024246325716376305, 0.21376153826713562, 0.0008817707421258092, 0.004641383420675993, 3.134084545308724e-05, 0.0003646629920694977, 0.002658769953995943, 0.004019685555249453, 0.00032304422347806394, 0.027473757043480873, 0.010712143033742905, 0.0024674804881215096, 9.726447387947701e-06, 0.0001505073014413938, 0.0028345081955194473, 0.0020129780750721693, 0.008025800809264183], "target_probs": 0.5995041131973267}}


{"result": {"time": "2021-02-21 06:49:51.702050", "n_pass": [211, 23, 17], "n_token": 69, "loss": [0.4144773781299591, 0.5884993672370911], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "\"Return the raw value of a query string parameter as a string.\\n\\n        Note:\\n            If an HTML form is POSTed to the API using the\\n            *application/x-www-form-urlencoded* media type, the\\n            parameters from the request body will be merged into\\n            the query string parameters.\\n\\n            If a key appears more than once in the form data, one of the\\n            values will be returned as a string, but it is undefined which\\n            one. Use `req.get_param_as_list()` to retrieve all the values.\\n\\n        Note:\\n            Similar to the way multiple keys in form data is handled,\\n            if a query parameter is assigned a comma-separated list of\\n            values (e.g., 'foo=a,b,c'), only one of those values will be\\n            returned, and it is undefined which one. Use\\n            `req.get_param_as_list()` to retrieve all the values.\\n\\n        Args:\\n            name (str): Parameter name, case-sensitive (e.g., 'sort').\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning ``None`` when the\\n                parameter is not found (default ``False``).\\n            store (dict, optional): A ``dict``-like object in which to place\\n                the value of the param, but only if the param is present.\\n            default (any, optional): If the param is not found returns the\\n                given value instead of None\\n\\n        Returns:\\n            str: The value of the param as a string, or ``None`` if param is\\n                not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: A required param is missing from the request.\\n\\n        \"", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 28, "repair_targets": [2, 19, 50, 67], "repair_candidates": [0, 13, 11, 21, 28, 30, 6, 44, 48, 4, 63, 2, 19, 50, 67, 8, 65, 26, 33, 37, 39, 53, 57]}}
{"prediction": {"error_location": 0.6606855392456055, "repair_targets": [0.3786036968231201, 0.16891703009605408, 0.0022542267106473446, 0.005384749732911587], "repair_candidates": [0.00406497111544013, 0.3786036968231201, 0.3593263626098633, 0.011395025998353958, 0.0010196804068982601, 0.020412899553775787, 0.01692446880042553, 0.16891703009605408, 0.0015072241658344865, 0.003375283209607005, 5.999409768264741e-05, 0.0003819832345470786, 0.0016684486763551831, 0.0025726652238518, 0.0002406160201644525, 0.009068968705832958, 0.009497863240540028, 0.0022542267106473446, 7.88146280683577e-06, 0.00013452947314362973, 0.002010494936257601, 0.00117085175588727, 0.005384749732911587], "target_probs": 0.5551597476005554}}


{"result": {"time": "2021-02-21 06:49:51.760508", "n_pass": [213, 24, 18], "n_token": 68, "loss": [0.5226070880889893, 0.5558179020881653], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "#NEWLINE#", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 27, "repair_targets": [2, 18, 49, 66], "repair_candidates": [0, 12, 10, 20, 27, 29, 6, 43, 47, 4, 62, 2, 18, 49, 66, 8, 64, 25, 32, 36, 38, 52, 56]}}
{"prediction": {"error_location": 0.5929726362228394, "repair_targets": [0.39414671063423157, 0.17363198101520538, 0.002035146811977029, 0.0037890581879764795], "repair_candidates": [0.0034616803750395775, 0.39414671063423157, 0.3465217053890228, 0.01880383864045143, 0.0004333701799623668, 0.018382400274276733, 0.012015614658594131, 0.17363198101520538, 0.0023654024116694927, 0.003187441034242511, 7.014185393927619e-05, 0.00034762214636430144, 0.0013570879818871617, 0.0020384190138429403, 0.0001954160979948938, 0.008040615357458591, 0.005544800311326981, 0.002035146811977029, 6.191221928020241e-06, 0.00010068468691315502, 0.002538795582950115, 0.0009858983103185892, 0.0037890581879764795], "target_probs": 0.5736029148101807}}


{"result": {"time": "2021-02-21 06:49:51.818440", "n_pass": [214, 25, 19], "n_token": 67, "loss": [0.6822817921638489, 0.3303583860397339], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "_params", "#NEWLINE#", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2, 17, 48, 65], "repair_candidates": [0, 11, 9, 19, 26, 28, 6, 42, 46, 4, 61, 2, 17, 48, 65, 8, 63, 24, 31, 35, 37, 51, 55]}}
{"prediction": {"error_location": 0.5054624080657959, "repair_targets": [0.2499104142189026, 0.4579225480556488, 0.006669919937849045, 0.00416326941922307], "repair_candidates": [0.003773790318518877, 0.2499104142189026, 0.1801818311214447, 0.05662909895181656, 0.006008520722389221, 0.002719312673434615, 0.0009835276287049055, 0.4579225480556488, 0.0016656260704621673, 0.0038301325403153896, 5.965939999441616e-05, 0.0005473620840348303, 0.0012317008804529905, 0.0017678476870059967, 0.00015308793808799237, 0.012484511360526085, 0.006406803615391254, 0.006669919937849045, 4.716587227449054e-06, 4.3982570787193254e-05, 0.0023487010039389133, 0.0004936387995257974, 0.00416326941922307], "target_probs": 0.718666136264801}}


{"result": {"time": "2021-02-21 06:49:51.878844", "n_pass": [217, 26, 20], "n_token": 65, "loss": [0.39314836263656616, 0.5098056793212891], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "if", "(", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 24, "repair_targets": [2, 15, 46, 63], "repair_candidates": [0, 11, 9, 17, 24, 26, 6, 40, 44, 4, 59, 2, 15, 46, 63, 8, 61, 22, 29, 33, 35, 49, 53]}}
{"prediction": {"error_location": 0.6749286651611328, "repair_targets": [0.22765474021434784, 0.36655402183532715, 0.0025638032238930464, 0.0038396730087697506], "repair_candidates": [0.0036766331177204847, 0.22765474021434784, 0.22412759065628052, 0.06733105331659317, 0.06559660285711288, 0.003090193262323737, 0.013999543152749538, 0.36655402183532715, 5.334209345164709e-05, 0.004476455040276051, 1.7342348655802198e-05, 0.00023333153512794524, 0.0014391683507710695, 0.001925742020830512, 0.0001551433961139992, 0.006224913988262415, 0.004707059822976589, 0.0025638032238930464, 5.304559635987971e-06, 3.816595926764421e-05, 0.0017253344412893057, 0.0005647875950671732, 0.0038396730087697506], "target_probs": 0.6006122827529907}}


{"result": {"time": "2021-02-21 06:49:51.936238", "n_pass": [218, 27, 21], "n_token": 63, "loss": [0.8321943283081055, 0.11034516245126724], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "if", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 44, 61], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 38, 42, 4, 57, 2, 13, 44, 61, 8, 59, 20, 27, 31, 33, 47, 51]}}
{"prediction": {"error_location": 0.435093492269516, "repair_targets": [0.1400989443063736, 0.75334233045578, 0.0008454459020867944, 0.0012382472632452846], "repair_candidates": [0.0009818368125706911, 0.1400989443063736, 0.06967009603977203, 0.010689828544855118, 0.0177138801664114, 0.0005048970342613757, 0.000401519238948822, 0.75334233045578, 1.930551661644131e-05, 0.0011964477598667145, 6.938025308045326e-06, 5.978229455649853e-05, 0.00036356179043650627, 0.0005359745118767023, 4.116220952710137e-05, 0.0006953228148631752, 0.0007023700745776296, 0.0008454459020867944, 9.061564583134896e-07, 8.691907169122715e-06, 0.0007263431325554848, 0.00015605281805619597, 0.0012382472632452846], "target_probs": 0.8955249786376953}}


{"result": {"time": "2021-02-21 06:49:52.169878", "n_pass": [230, 31, 22], "n_token": 61, "loss": [0.9557822942733765, 0.1894569844007492], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", ":", "#NEWLINE#", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 42, 59], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 36, 40, 4, 55, 2, 13, 42, 59, 8, 57, 20, 27, 31, 33, 45, 49]}}
{"prediction": {"error_location": 0.3845113217830658, "repair_targets": [0.14159727096557617, 0.6824706792831421, 0.0019915755838155746, 0.001348800491541624], "repair_candidates": [0.0011808819836005569, 0.14159727096557617, 0.1037023663520813, 0.018730496987700462, 0.039276283234357834, 0.0015506923664361238, 0.0008188573410734534, 0.6824706792831421, 0.00013632167247124016, 0.0014700021129101515, 6.759452662663534e-05, 0.0004673813527915627, 0.000864319212269038, 0.0009734512423165143, 9.769103598955553e-06, 8.378815255127847e-05, 0.0012629482662305236, 0.0019915755838155746, 6.823227636232332e-07, 2.1936675693723373e-05, 0.001784789958037436, 0.00018907665798906237, 0.001348800491541624], "target_probs": 0.8274083137512207}}


{"result": {"time": "2021-02-21 06:49:52.227889", "n_pass": [232, 32, 23], "n_token": 59, "loss": [0.9741788506507874, 0.30152466893196106], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "]", "=", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 40, 57], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 36, 38, 4, 53, 2, 13, 40, 57, 8, 55, 20, 27, 31, 33, 43, 47]}}
{"prediction": {"error_location": 0.3775022029876709, "repair_targets": [0.1537097692489624, 0.5769015550613403, 0.006978056393563747, 0.002100220648571849], "repair_candidates": [0.0019368032226338983, 0.1537097692489624, 0.16958031058311462, 0.01381608098745346, 0.0538671649992466, 0.002413039095699787, 0.0011962242424488068, 0.5769015550613403, 0.0002836853382177651, 0.0027332480531185865, 0.00013210948964115232, 0.0011505215661600232, 0.002173167886212468, 0.0016958561027422547, 5.841896927449852e-05, 6.680021033389494e-05, 0.0008174388203769922, 0.006978056393563747, 1.080271772480046e-06, 4.784441625815816e-05, 0.008134906180202961, 0.00020567378669511527, 0.002100220648571849], "target_probs": 0.7396895885467529}}


{"result": {"time": "2021-02-21 06:49:52.285464", "n_pass": [235, 33, 24], "n_token": 57, "loss": [0.6993443369865417, 0.6016546487808228], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "#UNINDENT#", "return", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 40, 55], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 36, 38, 4, 51, 2, 13, 40, 55, 8, 53, 20, 27, 31, 33, 41, 45]}}
{"prediction": {"error_location": 0.49691104888916016, "repair_targets": [0.20334698259830475, 0.339057594537735, 0.0025671804323792458, 0.002932514064013958], "repair_candidates": [0.0025880972389131784, 0.20334698259830475, 0.32615792751312256, 0.020406849682331085, 0.06482362747192383, 0.0023938636295497417, 0.0025195274502038956, 0.339057594537735, 0.0002832871105056256, 0.0035402635112404823, 0.0001497600896982476, 0.00019325966422911733, 0.0026580418925732374, 0.0030719914939254522, 8.212024113163352e-05, 0.00010613544873194769, 0.0020152681972831488, 0.0025671804323792458, 3.9462056520278566e-06, 0.0001151142714661546, 0.020680546760559082, 0.00030604301718994975, 0.002932514064013958], "target_probs": 0.5479043126106262}}


{"result": {"time": "2021-02-21 06:49:52.343609", "n_pass": [237, 34, 25], "n_token": 55, "loss": [0.6942163705825806, 0.6707965135574341], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 40, 53], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 36, 38, 4, 49, 2, 13, 40, 53, 8, 51, 20, 27, 31, 33, 41, 43]}}
{"prediction": {"error_location": 0.499465674161911, "repair_targets": [0.1982111632823944, 0.3069731593132019, 0.0033255226444453, 0.0027913402300328016], "repair_candidates": [0.002784476615488529, 0.1982111632823944, 0.3382173180580139, 0.022855794057250023, 0.07548975944519043, 0.0026752231642603874, 0.0028959678020328283, 0.3069731593132019, 0.00031167769338935614, 0.004064125008881092, 0.00015511977835558355, 0.00024688392295502126, 0.003266324754804373, 0.006829613819718361, 0.0001471284922445193, 0.00016046989185269922, 0.003347099758684635, 0.0033255226444453, 9.731224054121412e-06, 0.0003842476580757648, 0.0244827251881361, 0.0003751136246137321, 0.0027913402300328016], "target_probs": 0.5113011598587036}}


{"result": {"time": "2021-02-21 06:49:52.460921", "n_pass": [240, 36, 26], "n_token": 53, "loss": [0.7149970531463623, 0.6487484574317932], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "False", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "#UNINDENT#", "if", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2, 13, 40, 51], "repair_candidates": [0, 11, 9, 15, 22, 24, 6, 36, 38, 4, 47, 2, 13, 40, 51, 8, 49, 20, 27, 31, 33, 41, 43]}}
{"prediction": {"error_location": 0.4891936182975769, "repair_targets": [0.18585330247879028, 0.33121758699417114, 0.003239370184019208, 0.002389262430369854], "repair_candidates": [0.0024828517343848944, 0.18585330247879028, 0.31508615612983704, 0.01908690109848976, 0.08224019408226013, 0.0024223520886152983, 0.0029993182979524136, 0.33121758699417114, 0.0003177628677804023, 0.004169853404164314, 0.00013118110655341297, 0.00020766645320691168, 0.003425753675401211, 0.011480373330414295, 0.00022719883418176323, 0.00017367705004289746, 0.003566581290215254, 0.003239370184019208, 2.0078325178474188e-05, 0.0006887299241498113, 0.027966506779193878, 0.0006073491531424224, 0.002389262430369854], "target_probs": 0.5226995348930359}}


{"result": {"time": "2021-02-21 06:49:52.633091", "n_pass": [249, 39, 27], "n_token": 52, "loss": [0.5891137719154358, 0.595376193523407], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "#UNINDENT#", "if", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 21, "repair_targets": [2, 12, 39, 50], "repair_candidates": [0, 10, 8, 14, 21, 23, 5, 35, 37, 4, 46, 2, 12, 39, 50, 7, 48, 19, 26, 30, 32, 40, 42]}}
{"prediction": {"error_location": 0.5548187494277954, "repair_targets": [0.16368266940116882, 0.3842463493347168, 0.0017510054167360067, 0.001675079925917089], "repair_candidates": [0.0014392865123227239, 0.16368266940116882, 0.3158029019832611, 0.019122473895549774, 0.08417133241891861, 0.001986695686355233, 0.0018892966909334064, 0.3842463493347168, 6.367877358570695e-05, 0.002381551079452038, 6.212611333467066e-05, 0.00010067172115668654, 0.001685584313236177, 0.005042580422013998, 0.00014538968389388174, 0.0002960052224807441, 0.00212046317756176, 0.0017510054167360067, 1.0326749361411203e-05, 0.0002611282980069518, 0.011598791927099228, 0.00046459297300316393, 0.001675079925917089], "target_probs": 0.5513551235198975}}


{"result": {"time": "2021-02-21 06:49:52.926512", "n_pass": [271, 44, 28], "n_token": 50, "loss": [0.6913243532180786, 0.4067920446395874], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "=", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 21, "repair_targets": [2, 12, 39, 48], "repair_candidates": [0, 10, 8, 14, 21, 23, 5, 35, 37, 4, 44, 2, 12, 39, 48, 7, 46, 19, 26, 30, 32, 40, 42]}}
{"prediction": {"error_location": 0.5009122490882874, "repair_targets": [0.1630977988243103, 0.4965194761753082, 0.003687797812744975, 0.002477547386661172], "repair_candidates": [0.0015581210609525442, 0.1630977988243103, 0.23351611196994781, 0.016776688396930695, 0.06009799614548683, 0.001962420530617237, 0.0020129086915403605, 0.4965194761753082, 5.123675873619504e-05, 0.002235647290945053, 6.746986036887392e-05, 9.319386299466714e-05, 0.0016638980014249682, 0.002933249808847904, 0.00014742533676326275, 0.0002525946474634111, 0.0013379610609263182, 0.003687797812744975, 9.441292604606133e-06, 0.00012034617247991264, 0.009055602364242077, 0.00032508361618965864, 0.002477547386661172], "target_probs": 0.665782630443573}}


{"result": {"time": "2021-02-21 06:49:53.098655", "n_pass": [281, 47, 29], "n_token": 49, "loss": [0.4315355122089386, 0.6778190732002258], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "list", "#INDENT#", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 38, 47], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 34, 36, 4, 43, 2, 11, 38, 47, 6, 45, 18, 25, 29, 31, 39, 41]}}
{"prediction": {"error_location": 0.6495109796524048, "repair_targets": [0.16769061982631683, 0.33265453577041626, 0.004530787002295256, 0.0028471362311393023], "repair_candidates": [0.0015978466253727674, 0.16769061982631683, 0.3145422339439392, 0.019786225631833076, 0.1321004033088684, 0.0019354451214894652, 0.001706308452412486, 0.33265453577041626, 4.101855301996693e-05, 0.0016996528720483184, 1.5494424587814137e-05, 3.324743374832906e-05, 0.000995923182927072, 0.0018580317264422774, 8.332236029673368e-05, 0.0007323125610128045, 0.0013991708401590586, 0.004530787002295256, 4.8136139412235934e-06, 3.88976295653265e-05, 0.013552045449614525, 0.00015454292588401586, 0.0028471362311393023], "target_probs": 0.5077230930328369}}


{"result": {"time": "2021-02-21 06:49:53.273180", "n_pass": [293, 50, 30], "n_token": 47, "loss": [0.5251954793930054, 0.6585191488265991], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "[", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 36, 45], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 41, 2, 11, 36, 45, 6, 43, 18, 25, 27, 29, 37, 39]}}
{"prediction": {"error_location": 0.5914398431777954, "repair_targets": [0.1574665755033493, 0.3477410674095154, 0.008310778997838497, 0.0040988679975271225], "repair_candidates": [0.0018876660615205765, 0.1574665755033493, 0.29704198241233826, 0.01652468927204609, 0.13406197726726532, 0.00329964654520154, 0.0023969749454408884, 0.3477410674095154, 4.933387754135765e-05, 0.001422880799509585, 2.0594505258486606e-05, 3.408528573345393e-05, 0.0005610222578980029, 0.0012807607417926192, 2.0268433218006976e-05, 0.0005176241393201053, 0.0015142082702368498, 0.008310778997838497, 4.900065505353268e-06, 0.00010079806088469923, 0.021488027647137642, 0.00015524683112744242, 0.0040988679975271225], "target_probs": 0.5176172852516174}}


{"result": {"time": "2021-02-21 06:49:53.737175", "n_pass": [367, 58, 31], "n_token": 46, "loss": [0.5456690788269043, 0.2687690854072571], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "#NEWLINE#", "param", "#NEWLINE#", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 35, 44], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 40, 2, 11, 35, 44, 6, 42, 18, 25, 27, 29, 36, 38]}}
{"prediction": {"error_location": 0.5794539451599121, "repair_targets": [0.09432611614465714, 0.6522395610809326, 0.013209915719926357, 0.0045440951362252235], "repair_candidates": [0.0010534168686717749, 0.09432611614465714, 0.1316518485546112, 0.0061535038985311985, 0.08108468353748322, 0.0018104290356859565, 0.0015002717263996601, 0.6522395610809326, 1.9955376046709716e-05, 0.0009282316314056516, 6.7270984800416045e-06, 2.1075511540402658e-05, 0.00022789744252804667, 0.0008419345831498504, 4.605933554557851e-06, 0.00021394614304881543, 0.0006518294103443623, 0.013209915719926357, 9.83216887107119e-06, 4.448170875548385e-05, 0.009299634955823421, 0.0001560525270178914, 0.0045440951362252235], "target_probs": 0.7643197178840637}}


{"result": {"time": "2021-02-21 06:49:53.794564", "n_pass": [369, 59, 32], "n_token": 45, "loss": [0.5442678928375244, 0.2634774148464203], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "#NEWLINE#", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 35, 43], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 39, 2, 11, 35, 43, 6, 41, 18, 25, 27, 29, 36, 37]}}
{"prediction": {"error_location": 0.580266535282135, "repair_targets": [0.0903729498386383, 0.6577535271644592, 0.015348309651017189, 0.004900136962532997], "repair_candidates": [0.0011643952457234263, 0.0903729498386383, 0.11568920314311981, 0.007021987810730934, 0.09476079046726227, 0.0019861608743667603, 0.0014465823769569397, 0.6577535271644592, 2.7296717235003598e-05, 0.0007714063976891339, 8.810568942863028e-06, 3.1203129765344784e-05, 0.0002251597325084731, 0.0006186807877384126, 4.504313437792007e-06, 0.000329778267769143, 0.0009038492571562529, 0.015348309651017189, 8.571929356548935e-06, 8.482807970722206e-06, 0.006436818744987249, 0.0001813904964365065, 0.004900136962532997], "target_probs": 0.7683749794960022}}


{"result": {"time": "2021-02-21 06:49:53.852242", "n_pass": [371, 60, 33], "n_token": 44, "loss": [0.48385101556777954, 0.21152712404727936], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", ")", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 35, 42], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 38, 2, 11, 35, 42, 6, 40, 18, 25, 27, 29, 36, 37]}}
{"prediction": {"error_location": 0.6164049506187439, "repair_targets": [0.157386913895607, 0.5959914922714233, 0.051240529865026474, 0.004728404339402914], "repair_candidates": [0.0027060566935688257, 0.157386913895607, 0.0813695564866066, 0.026805490255355835, 0.06159326806664467, 0.005032388959079981, 0.002764337230473757, 0.5959914922714233, 0.0001730918447719887, 0.0010414229473099113, 7.567377178929746e-05, 0.000257415376836434, 0.0002646354550961405, 0.0005784317036159337, 2.1365847715060227e-05, 0.00138096755836159, 0.004759744741022587, 0.051240529865026474, 5.468005383590935e-06, 6.8895342337782495e-06, 0.0017816100735217333, 3.476678466540761e-05, 0.004728404339402914], "target_probs": 0.8093473315238953}}


{"result": {"time": "2021-02-21 06:49:53.909938", "n_pass": [373, 61, 34], "n_token": 43, "loss": [0.5922898650169373, 0.1473439335823059], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 35, 41], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 38, 2, 11, 35, 41, 6, 39, 18, 25, 27, 29, 36, 37]}}
{"prediction": {"error_location": 0.5530593395233154, "repair_targets": [0.07459452003240585, 0.7642566561698914, 0.02101842127740383, 0.0031275360379368067], "repair_candidates": [0.0008889901801012456, 0.07459452003240585, 0.04200439155101776, 0.006214287132024765, 0.0817413479089737, 0.0013527200790122151, 0.0007449612603522837, 0.7642566561698914, 2.0202385712764226e-05, 0.0007136131753213704, 1.1110056220786646e-05, 3.480722807580605e-05, 0.0002232393599115312, 0.0007721125730313361, 6.5138974605361e-06, 0.0004073821473866701, 0.0012552599655464292, 0.02101842127740383, 1.0536730599142174e-07, 2.656128526723478e-05, 0.0005724328220821917, 1.2848020560340956e-05, 0.0031275360379368067], "target_probs": 0.8629971146583557}}


{"result": {"time": "2021-02-21 06:49:54.024815", "n_pass": [377, 63, 35], "n_token": 42, "loss": [0.5561448335647583, 0.1264442652463913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "=", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 20, "repair_targets": [2, 11, 35, 41], "repair_candidates": [0, 9, 7, 13, 20, 22, 5, 32, 34, 4, 38, 2, 11, 35, 41, 6, 39, 18, 25, 27, 29, 36, 37]}}
{"prediction": {"error_location": 0.5734154582023621, "repair_targets": [0.07687348127365112, 0.7706455588340759, 0.029795760288834572, 0.003908449783921242], "repair_candidates": [0.0007935701869428158, 0.07687348127365112, 0.041192855685949326, 0.004615174140781164, 0.06713014096021652, 0.0011492717312648892, 0.0007717240951023996, 0.7706455588340759, 1.5597935998812318e-05, 0.00042746259714476764, 9.544090062263422e-06, 3.055658089579083e-05, 0.00022381010057870299, 0.0005165519542060792, 4.68954021926038e-06, 0.00029393547447398305, 0.0010635434882715344, 0.029795760288834572, 1.7127453588727803e-07, 1.8011372958426364e-05, 0.0005031934124417603, 1.6917892935452983e-05, 0.003908449783921242], "target_probs": 0.8812232613563538}}


{"result": {"time": "2021-02-21 06:49:54.198547", "n_pass": [386, 66, 36], "n_token": 41, "loss": [1.1465648412704468, 0.15826909244060516], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 19, "repair_targets": [2, 10, 34, 40], "repair_candidates": [0, 8, 7, 12, 19, 21, 5, 31, 33, 4, 37, 2, 10, 34, 40, 6, 38, 17, 24, 26, 28, 35, 36]}}
{"prediction": {"error_location": 0.3177263140678406, "repair_targets": [0.06502872705459595, 0.7587087750434875, 0.021742792800068855, 0.008139776065945625], "repair_candidates": [0.0016366583295166492, 0.06502872705459595, 0.058960843831300735, 0.025143232196569443, 0.04168858751654625, 0.004482032731175423, 0.00697973370552063, 0.7587087750434875, 6.421047146432102e-05, 0.00043501731124706566, 1.53922053414135e-06, 6.895032129250467e-06, 0.0006566599477082491, 0.0006617187173105776, 2.1229395770205883e-06, 0.0012484041508287191, 0.0018067769706249237, 0.021742792800068855, 5.9919425439147744e-06, 3.679464498418383e-05, 0.0024876755196601152, 7.503508095396683e-05, 0.008139776065945625], "target_probs": 0.8536200523376465}}


{"result": {"time": "2021-02-21 06:49:54.486090", "n_pass": [394, 71, 37], "n_token": 40, "loss": [1.1043871641159058, 0.10622624307870865], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", ",", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 18, "repair_targets": [2, 10, 33, 39], "repair_candidates": [0, 8, 7, 12, 18, 20, 5, 30, 32, 4, 36, 2, 10, 33, 39, 6, 37, 16, 23, 25, 27, 34, 35]}}
{"prediction": {"error_location": 0.33141395449638367, "repair_targets": [0.05825693905353546, 0.8270267844200134, 0.009379398077726364, 0.0045580812729895115], "repair_candidates": [0.000981163582764566, 0.05825693905353546, 0.05423784255981445, 0.01888272352516651, 0.015359476208686829, 0.002040419727563858, 0.005622154101729393, 0.8270267844200134, 2.6934387278743088e-05, 0.0005015407223254442, 7.285118499567034e-07, 4.585057013173355e-06, 0.0004989076405763626, 0.000528736796695739, 2.1311414002411766e-06, 0.0003948340890929103, 0.0005988739430904388, 0.009379398077726364, 1.5541445463895798e-05, 2.573722304077819e-05, 0.0010221765842288733, 3.426304101594724e-05, 0.0045580812729895115], "target_probs": 0.8992211818695068}}


{"result": {"time": "2021-02-21 06:49:54.830811", "n_pass": [404, 77, 38], "n_token": 39, "loss": [1.1283559799194336, 0.12899892032146454], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "=", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 18, "repair_targets": [2, 10, 32, 38], "repair_candidates": [0, 8, 7, 12, 18, 20, 5, 29, 31, 4, 35, 2, 10, 32, 38, 6, 36, 16, 23, 24, 26, 33, 34]}}
{"prediction": {"error_location": 0.323564738035202, "repair_targets": [0.06933701783418655, 0.8013124465942383, 0.00516930129379034, 0.0031561721116304398], "repair_candidates": [0.0011435237247496843, 0.06933701783418655, 0.06410295516252518, 0.01592790149152279, 0.024709856137633324, 0.0021384526044130325, 0.00522183533757925, 0.8013124465942383, 2.8486401788541116e-05, 0.0024852422066032887, 9.593150025466457e-07, 8.281796908704564e-06, 0.0021961810998618603, 0.0021571821998804808, 1.7498388842795976e-05, 0.00018063621246255934, 0.00021594369900412858, 0.00516930129379034, 1.0878397915803362e-06, 2.6158073524129577e-05, 0.0004314796533435583, 3.14661483571399e-05, 0.0031561721116304398], "target_probs": 0.8789749145507812}}


{"result": {"time": "2021-02-21 06:49:54.888517", "n_pass": [406, 78, 39], "n_token": 38, "loss": [1.0144561529159546, 0.11448533087968826], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "[", "(", "store", "#INDENT#", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 18, "repair_targets": [2, 10, 31, 37], "repair_candidates": [0, 8, 7, 12, 18, 20, 5, 28, 30, 4, 34, 2, 10, 31, 37, 6, 35, 16, 23, 24, 25, 32, 33]}}
{"prediction": {"error_location": 0.36259958148002625, "repair_targets": [0.07968883961439133, 0.7926924824714661, 0.01293861586600542, 0.006505072116851807], "repair_candidates": [0.0008491077460348606, 0.07968883961439133, 0.07567739486694336, 0.017901016399264336, 0.00480692321434617, 0.001549179432913661, 0.0039112018421292305, 0.7926924824714661, 8.776174581726082e-06, 0.0003723271074704826, 4.5796468839398585e-07, 4.229408204992069e-06, 0.0003196205070707947, 0.0003292126930318773, 5.864724516868591e-05, 0.0003562263154890388, 0.0005671149701811373, 0.01293861586600542, 7.99146448571264e-07, 5.033222623751499e-05, 0.0011635577538982034, 0.00024886586470529437, 0.006505072116851807], "target_probs": 0.8918250203132629}}


{"result": {"time": "2021-02-21 06:49:55.059705", "n_pass": [411, 81, 40], "n_token": 37, "loss": [0.8974126577377319, 0.06707673519849777], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ",", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "[", "(", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 18, "repair_targets": [2, 10, 30, 36], "repair_candidates": [0, 8, 7, 12, 18, 20, 5, 28, 29, 4, 33, 2, 10, 30, 36, 6, 34, 16, 23, 24, 25, 31, 32]}}
{"prediction": {"error_location": 0.40762296319007874, "repair_targets": [0.05306646600365639, 0.8771039247512817, 1.6455351214972325e-05, 0.00493655214086175], "repair_candidates": [0.0003614599700085819, 0.05306646600365639, 0.028065549209713936, 0.02934534102678299, 0.001179963699541986, 0.00031076744198799133, 0.0016534983878955245, 0.8771039247512817, 3.722655037563527e-06, 0.0002165612968383357, 5.8621884591048e-07, 4.596760390995769e-06, 0.00027856920496560633, 0.0003441534354351461, 9.701582894194871e-05, 0.00018420748529024422, 0.00021072514937259257, 1.6455351214972325e-05, 4.6979398575786036e-06, 5.281542598822853e-06, 0.002567537361755967, 4.226860255585052e-05, 0.00493655214086175], "target_probs": 0.9351234436035156}}


{"result": {"time": "2021-02-21 06:49:55.233445", "n_pass": [423, 84, 41], "n_token": 36, "loss": [0.3141058385372162, 0.414670467376709], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", ".", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "[", "(", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 17, "repair_targets": [2, 9, 29, 35], "repair_candidates": [0, 7, 6, 11, 17, 19, 4, 27, 28, 3, 32, 2, 9, 29, 35, 5, 33, 15, 22, 23, 24, 30, 31]}}
{"prediction": {"error_location": 0.7304418087005615, "repair_targets": [0.12323378026485443, 0.5280442833900452, 6.65267143631354e-05, 0.00921331811696291], "repair_candidates": [0.0009451371734030545, 0.12323378026485443, 0.2722797393798828, 0.03191500902175903, 0.007638528011739254, 0.0006806285819038749, 0.011198773048818111, 0.5280442833900452, 0.00042426656000316143, 0.0009833754738792777, 0.00017787347314879298, 4.4079712097300217e-05, 0.001610931707546115, 0.001176680438220501, 0.00021224426745902747, 0.003826148808002472, 0.0046513876877725124, 6.65267143631354e-05, 1.1419332622608636e-05, 4.4925960537511855e-05, 0.001589117688126862, 3.181222200510092e-05, 0.00921331811696291], "target_probs": 0.6605579257011414}}


{"result": {"time": "2021-02-21 06:49:55.291482", "n_pass": [429, 85, 42], "n_token": 35, "loss": [0.6587420105934143, 0.34422507882118225], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", "name", "in", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "[", "(", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 16, "repair_targets": [2, 8, 28, 34], "repair_candidates": [0, 7, 6, 10, 16, 18, 4, 26, 27, 3, 31, 2, 8, 28, 34, 5, 32, 14, 21, 22, 23, 29, 30]}}
{"prediction": {"error_location": 0.517501950263977, "repair_targets": [0.31204086542129517, 0.39155253767967224, 1.9525870811776258e-05, 0.0051564727909862995], "repair_candidates": [0.0006992967682890594, 0.31204086542129517, 0.1304187774658203, 0.04668880254030228, 9.567678353050724e-05, 0.002821446629241109, 0.09912504255771637, 0.39155253767967224, 0.0019333529053255916, 0.0012065561022609472, 9.207966650137678e-05, 1.4889275917084888e-05, 0.0024173930287361145, 0.0019414592534303665, 0.00038913264870643616, 0.001336929271928966, 0.001717817154712975, 1.9525870811776258e-05, 8.789315870671999e-06, 4.1417082684347406e-05, 0.00026042317040264606, 2.137253432010766e-05, 0.0051564727909862995], "target_probs": 0.7087693810462952}}


{"result": {"time": "2021-02-21 06:49:55.348791", "n_pass": [431, 86, 43], "n_token": 34, "loss": [0.5736868381500244, 0.40831083059310913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", "name", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "[", "(", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 15, "repair_targets": [2, 8, 27, 33], "repair_candidates": [0, 7, 6, 9, 15, 17, 4, 25, 26, 3, 30, 2, 8, 27, 33, 5, 31, 13, 20, 21, 22, 28, 29]}}
{"prediction": {"error_location": 0.5634442567825317, "repair_targets": [0.394944429397583, 0.253920316696167, 3.992677011410706e-05, 0.015867557376623154], "repair_candidates": [0.0006307390867732465, 0.394944429397583, 0.2379351258277893, 0.024454234167933464, 0.00010855561413336545, 0.0007187617011368275, 0.02892104536294937, 0.253920316696167, 0.0008439416415058076, 0.0014761267229914665, 2.8052289053448476e-05, 5.703376245946856e-06, 0.0026483607944101095, 0.0020578468684107065, 0.0005732998833991587, 0.014529415406286716, 0.01685800775885582, 3.992677011410706e-05, 7.4555578066792805e-06, 1.9955303287133574e-05, 0.003358684480190277, 5.239083475316875e-05, 0.015867557376623154], "target_probs": 0.6647722125053406}}


{"result": {"time": "2021-02-21 06:49:55.810431", "n_pass": [446, 94, 44], "n_token": 33, "loss": [0.804761528968811, 0.37762126326560974], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", "name", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "(", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 15, "repair_targets": [2, 8, 26, 32], "repair_candidates": [0, 7, 6, 9, 15, 17, 4, 24, 25, 3, 29, 2, 8, 26, 32, 5, 30, 13, 20, 21, 22, 27, 28]}}
{"prediction": {"error_location": 0.4471946060657501, "repair_targets": [0.2559797167778015, 0.380674809217453, 5.1050748879788443e-05, 0.048784539103507996], "repair_candidates": [0.0011400699149817228, 0.2559797167778015, 0.21531257033348083, 0.013647916726768017, 0.0015470226062461734, 0.0013213689671829343, 0.04047515243291855, 0.380674809217453, 0.002278774743899703, 0.002826941665261984, 1.0616935469442979e-05, 1.6643141862004995e-05, 0.00907790008932352, 0.00017346603272017092, 6.26786204520613e-05, 0.014887609519064426, 0.007667785510420799, 5.1050748879788443e-05, 2.046257213805802e-05, 3.526832369971089e-05, 0.003905404359102249, 0.0001023019285639748, 0.048784539103507996], "target_probs": 0.685490071773529}}


{"result": {"time": "2021-02-21 06:49:55.867589", "n_pass": [447, 95, 45], "n_token": 32, "loss": [0.5744444727897644, 0.18100544810295105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", "name", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "store", "store", "name", "param", "param", "required", "default", "#NEWLINE#", "name"]}}
{"position": {"error_location": 15, "repair_targets": [2, 8, 25, 31], "repair_candidates": [0, 7, 6, 9, 15, 17, 4, 23, 24, 3, 28, 2, 8, 25, 31, 5, 29, 13, 20, 21, 22, 26, 27]}}
{"prediction": {"error_location": 0.5630175471305847, "repair_targets": [0.5353835821151733, 0.15851421654224396, 0.00012183348735561594, 0.1404111683368683], "repair_candidates": [0.0006554356659762561, 0.5353835821151733, 0.11334553360939026, 0.017600422725081444, 0.0006365504814311862, 4.1059614886762574e-05, 0.015039350837469101, 0.15851421654224396, 0.0005059537361375988, 0.0008617733255960047, 8.959143826814397e-08, 1.957118058726337e-07, 9.304816921940073e-05, 0.00011637790885288268, 7.058481514832238e-07, 0.000690448738168925, 0.0012986218789592385, 0.00012183348735561594, 8.263560630439315e-06, 8.223827535402961e-06, 0.014663711190223694, 3.3997453101619612e-06, 0.1404111683368683], "target_probs": 0.8344308137893677}}


{"result": {"time": "2021-02-21 06:49:55.925006", "n_pass": [455, 96, 46], "n_token": 31, "loss": [0.35146084427833557, 0.3978501260280609], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", "required", "store", "default", "params", "self", "name", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "store", "store", "name", "param", "param", "required", "default", "name"]}}
{"position": {"error_location": 15, "repair_targets": [2, 8, 25, 30], "repair_candidates": [0, 7, 6, 9, 15, 17, 4, 23, 24, 3, 28, 2, 8, 25, 30, 5, 29, 13, 20, 21, 22, 26, 27]}}
{"prediction": {"error_location": 0.7036594152450562, "repair_targets": [0.31961730122566223, 0.3520863950252533, 3.45598891726695e-05, 2.444927486067172e-05], "repair_candidates": [9.245944966096431e-05, 0.31961730122566223, 0.315608948469162, 0.002908228663727641, 0.0003609583363868296, 4.657083991332911e-05, 0.007861868478357792, 0.3520863950252533, 7.78773392084986e-06, 0.0007620922406204045, 6.214457837216969e-09, 2.1880806055918356e-09, 0.00016733145457692444, 0.0002879231469705701, 1.3582022972968844e-07, 3.636565452325158e-05, 5.708780372515321e-05, 3.45598891726695e-05, 4.748666469822638e-06, 5.1207816795795225e-06, 2.4183958885259926e-05, 5.434942067950033e-06, 2.444927486067172e-05], "target_probs": 0.6717627048492432}}


{"result": {"time": "2021-02-21 06:49:55.982632", "n_pass": [458, 97, 47], "n_token": 30, "loss": [0.382656455039978, 0.06214632838964462], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "required", "store", "default", "params", "self", "name", "params", ")", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "store", "store", "name", "param", "param", "required", "default", "name"]}}
{"position": {"error_location": 14, "repair_targets": [1, 7, 24, 29], "repair_candidates": [0, 6, 5, 8, 14, 16, 3, 22, 23, 2, 27, 1, 7, 24, 29, 4, 28, 12, 19, 20, 21, 25, 26]}}
{"prediction": {"error_location": 0.6820471882820129, "repair_targets": [0.0020386415999382734, 0.9375391602516174, 9.270034934161231e-05, 7.482965156668797e-05], "repair_candidates": [0.00020698856678791344, 0.0020386415999382734, 0.010174250230193138, 0.001665706280618906, 0.0022145016118884087, 0.0003639932256191969, 0.03320331126451492, 0.9375391602516174, 1.0850535545614548e-05, 0.0062270388007164, 2.6387024121277136e-08, 9.53206136244944e-09, 0.002444302663207054, 0.003515079151839018, 4.6981159584902343e-07, 1.0650159310898744e-05, 7.32667904230766e-05, 9.270034934161231e-05, 2.018668055825401e-05, 2.394513285253197e-05, 8.253947453340515e-05, 1.7526888768770732e-05, 7.482965156668797e-05], "target_probs": 0.9397453665733337}}


{"result": {"time": "2021-02-21 06:49:56.040746", "n_pass": [467, 98, 48], "n_token": 29, "loss": [0.5939720273017883, 0.01587533950805664], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "required", "store", "default", "params", "self", "name", "params", ":", "#INDENT#", "param", "=", "params", "[", "params", "]", "#NEWLINE#", "param", "param", "param", "store", "store", "name", "param", "param", "required", "default", "name"]}}
{"position": {"error_location": 13, "repair_targets": [1, 7, 23, 28], "repair_candidates": [0, 6, 5, 8, 13, 15, 3, 21, 22, 2, 26, 1, 7, 23, 28, 4, 27, 11, 18, 19, 20, 24, 25]}}
{"prediction": {"error_location": 0.5521297454833984, "repair_targets": [0.00018894235836341977, 0.9840331673622131, 1.5242504559864756e-05, 1.267785864911275e-05], "repair_candidates": [2.547444819356315e-05, 0.00018894235836341977, 0.001738012651912868, 0.0003523667110130191, 0.00028008283698000014, 7.845716754673049e-05, 0.006907629314810038, 0.9840331673622131, 2.127259222106659e-06, 0.004279994405806065, 8.221228142701875e-09, 6.4861835902263465e-09, 0.0009483564062975347, 0.0010908121475949883, 9.845702919619725e-08, 1.1813779110525502e-06, 1.2979682651348412e-05, 1.5242504559864756e-05, 5.999429049552418e-06, 6.35567585050012e-06, 1.537084608571604e-05, 4.6676436795678455e-06, 1.267785864911275e-05], "target_probs": 0.984250009059906}}




Minimal simplified tokens:

['self', 'name', 'required', 'store', 'default', 'params', 'self', 'name', 'params', ':', '#INDENT#', 'param', '=', 'params', '[', 'params', ']', '#NEWLINE#', 'param', 'param', 'param', 'store', 'store', 'name', 'param', 'param', 'required', 'default', 'name']
