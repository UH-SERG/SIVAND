
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", ":", "#NEWLINE#", "#INDENT#", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", ".", "number_of_edges", "(", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "0.0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"], "error_location": [31], "repair_targets": [4], "repair_candidates": [18, 44, 72, 96, 51, 69, 93, 111, 4, 27, 39, 80, 101, 34, 82, 103, 2, 15, 24, 61, 11, 31, 37], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "networkx/networkx/networkx/algorithms/bipartite/basic.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00015-of-00300", "js_count": 51256, "results": {"model": "transformer", "prob": {"loc": [[0.1454031765460968, 4.965212610841263e-06, 4.838491349801188e-06, 1.616644595969774e-07, 4.591770994011313e-05, 2.178433220478837e-07, 2.886439460780821e-07, 3.917606079539837e-07, 2.7171813599125016e-07, 1.1847737368952949e-06, 3.071790217745729e-07, 5.34167929799878e-06, 2.885927585793979e-07, 2.6402304342809657e-08, 9.363693607156165e-07, 0.3395387828350067, 9.838887308433186e-06, 1.8864398043660913e-06, 2.2787987745687133e-06, 1.0799907812497622e-07, 4.3159253948488185e-08, 5.596605845425984e-08, 4.936415720635523e-08, 2.515585038054269e-06, 0.34399768710136414, 1.3800007764075417e-05, 1.301859924751625e-06, 1.336614786850987e-06, 3.002944026775367e-08, 1.714076880432458e-08, 6.176764486554021e-07, 0.05318586528301239, 5.09293522554799e-06, 4.2349614659542567e-07, 3.959258265240351e-06, 7.806646351582458e-08, 1.0240155035035059e-07, 0.07915602624416351, 6.725204002577811e-07, 0.02552945166826248, 7.084531716827769e-07, 3.7259337659634184e-07, 5.431475074146874e-07, 9.209492191075697e-08, 0.002198686357587576, 6.526038760057418e-06, 1.4754369885849883e-06, 8.305057690449758e-07, 7.686579124310811e-07, 7.178994678724848e-07, 1.249706116368543e-07, 9.994389074563514e-06, 1.6230464439104253e-07, 3.408767724977224e-06, 2.301070765042823e-07, 2.1219896950697148e-07, 2.9041964921816543e-07, 2.6722864276962355e-07, 2.367889493370967e-07, 1.3840970325418311e-07, 1.9135214301968517e-07, 2.916734229074791e-05, 8.788589411778958e-08, 4.5641975532362267e-08, 9.99705434878706e-07, 8.354332976523438e-07, 9.82451751951885e-07, 2.7682850145538396e-07, 9.558500835282757e-08, 9.19790818443289e-06, 4.736406822303252e-08, 9.87267654295465e-08, 0.0015657535986974835, 1.9977542820015515e-07, 1.2055971865265747e-07, 9.904632634061272e-07, 3.354797684096411e-07, 1.3663151499088144e-08, 1.4501338796435448e-07, 3.78888501018082e-07, 0.0018019744893535972, 1.8220229947019106e-07, 0.0011556119425222278, 6.202448048497899e-07, 3.058936499655829e-07, 2.5079279453166237e-07, 1.329841126107567e-07, 1.822426156650181e-07, 1.2811955230063177e-07, 6.895871820233879e-07, 2.3587524822232808e-07, 1.8277627589213807e-07, 1.0095173763602361e-07, 1.2504996220741305e-06, 4.268251174721627e-08, 1.315521842570888e-07, 0.0013067553518339992, 2.860562346995721e-07, 1.9115999450036725e-08, 1.2498719570430694e-07, 3.163519579629792e-07, 0.0025491381529718637, 2.03072247018099e-07, 0.002380290301516652, 6.203962357176351e-07, 5.555370421461703e-07, 3.124874865534366e-07, 7.281741432052513e-07, 1.1016230700988672e-06, 1.1648547797449282e-06, 1.976308340090327e-06, 3.828724584309384e-05]], "pointer": [[0.0, 0.0, 0.0015256872866302729, 0.0, 0.9881096482276917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002253250451758504, 0.0, 0.0, 0.0, 3.393062434042804e-05, 0.0, 0.0, 0.0013123766984790564, 0.0, 0.0, 0.0, 0.0, 0.0, 6.980347097851336e-05, 0.0, 0.0, 0.0023097300436347723, 0.0, 0.0, 0.0, 0.00021579250460490584, 0.0, 0.0, 0.002268597949296236, 0.0, 0.0, 0.0003257061471231282, 0.0, 0.0001376553700538352, 0.0, 0.0, 0.0, 0.0, 4.324765905039385e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005078380927443504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016241623961832374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00029110198374837637, 0.0, 0.0, 6.178091280162334e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011721596820279956, 0.0, 0.00010480421769898385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9084227460552938e-05, 0.0, 0.0, 3.22288615279831e-05, 0.0, 0.0, 0.0, 0.0, 6.24058156972751e-05, 0.0, 3.44397485605441e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3455279486151994e-06]], "target": [0.9881096482276917]}, "loss": [2.933962345123291, 0.01196160726249218], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [24]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 07:21:23.009561", "n_pass": [1, 1, 1], "n_token": 112, "loss": [1.0671201944351196, 0.01196160726249218], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", ":", "#NEWLINE#", "#INDENT#", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", ".", "number_of_edges", "(", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "0.0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 24, "repair_targets": [4], "repair_candidates": [18, 44, 72, 96, 51, 69, 93, 111, 4, 27, 39, 80, 101, 34, 82, 103, 2, 15, 24, 61, 11, 31, 37]}}
{"prediction": {"error_location": 0.34399768710136414, "repair_targets": [0.9881096482276917], "repair_candidates": [0.0015256872866302729, 0.9881096482276917, 0.002253250451758504, 3.393062434042804e-05, 0.0013123766984790564, 6.980347097851336e-05, 0.0023097300436347723, 0.00021579250460490584, 0.002268597949296236, 0.0003257061471231282, 0.0001376553700538352, 4.324765905039385e-05, 0.0005078380927443504, 0.00016241623961832374, 0.00029110198374837637, 6.178091280162334e-05, 0.00011721596820279956, 0.00010480421769898385, 1.9084227460552938e-05, 3.22288615279831e-05, 6.24058156972751e-05, 3.44397485605441e-05, 1.3455279486151994e-06], "target_probs": 0.9881096482276917}}


{"result": {"time": "2021-02-21 07:21:23.136232", "n_pass": [94, 3, 2], "n_token": 109, "loss": [1.129014492034912, 0.053157344460487366], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", ".", "number_of_edges", "(", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "0.0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 21, "repair_targets": [4], "repair_candidates": [15, 41, 69, 93, 48, 66, 90, 108, 4, 24, 36, 77, 98, 31, 79, 100, 2, 12, 21, 58, 8, 28, 34]}}
{"prediction": {"error_location": 0.32335174083709717, "repair_targets": [0.9482308030128479], "repair_candidates": [0.003817155258730054, 0.9482308030128479, 0.01031733863055706, 0.0001381157780997455, 0.00931298267096281, 0.0002201315510319546, 0.007268964312970638, 0.0010440499754622579, 0.010978525504469872, 0.0016802445752546191, 0.0003113452112302184, 0.00027946115005761385, 0.0015151642728596926, 0.000771160121075809, 0.0016657105879858136, 0.00034691652399487793, 0.0007199047831818461, 0.00023987363965716213, 0.0001288081839447841, 0.00022595998598262668, 0.0007106787525117397, 7.43834170862101e-05, 2.506903911125846e-06], "target_probs": 0.9482308030128479}}


{"result": {"time": "2021-02-21 07:21:23.255921", "n_pass": [99, 5, 3], "n_token": 106, "loss": [0.9574323296546936, 0.02601102739572525], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "0.0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 66, 90, 45, 63, 87, 105, 4, 21, 33, 74, 95, 28, 76, 97, 2, 12, 18, 55, 8, 25, 31]}}
{"prediction": {"error_location": 0.38387730717658997, "repair_targets": [0.9743243455886841], "repair_candidates": [0.0013106220867484808, 0.9743243455886841, 0.005098350346088409, 3.989883771282621e-05, 0.005985710769891739, 4.410813198774122e-05, 0.003244442865252495, 0.0002981727593578398, 0.0051685599610209465, 0.0011106764432042837, 0.00034432412940077484, 0.00014191727677825838, 0.0005110914935357869, 0.00037163341767154634, 0.000422501441789791, 0.00013830451644025743, 0.0005372717860154808, 5.5690627050353214e-05, 6.242695963010192e-05, 0.0002254687569802627, 0.0005338217597454786, 2.951980786747299e-05, 1.1665960073514725e-06], "target_probs": 0.9743243455886841}}


{"result": {"time": "2021-02-21 07:21:23.318016", "n_pass": [107, 6, 4], "n_token": 103, "loss": [0.9881099462509155, 0.039006903767585754], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "=", "0.0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 63, 87, 42, 60, 84, 102, 4, 21, 33, 71, 92, 28, 73, 94, 2, 12, 18, 52, 8, 25, 31]}}
{"prediction": {"error_location": 0.37227964401245117, "repair_targets": [0.9617440700531006], "repair_candidates": [0.0017091092886403203, 0.9617440700531006, 0.008463953621685505, 6.241117807803676e-05, 0.004635466728359461, 7.158179505495355e-05, 0.0051811616867780685, 0.0003797848185058683, 0.012450207024812698, 0.0011722989147529006, 0.00022963499941397458, 3.628713238867931e-05, 0.000712963636033237, 0.0005570669309236109, 0.0003968062228523195, 0.0002823379181791097, 0.0006140787154436111, 6.28646303084679e-05, 5.572552254307084e-05, 0.0002600430743768811, 0.0008721449412405491, 4.890125273959711e-05, 1.180654749077803e-06], "target_probs": 0.9617440700531006}}


{"result": {"time": "2021-02-21 07:21:23.377274", "n_pass": [109, 7, 5], "n_token": 99, "loss": [1.109546422958374, 0.07532314211130142], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "else", ":", "#NEWLINE#", "#INDENT#", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 59, 83, 42, 56, 80, 98, 4, 21, 33, 67, 88, 28, 69, 90, 2, 12, 18, 48, 8, 25, 31]}}
{"prediction": {"error_location": 0.3297084867954254, "repair_targets": [0.9274437427520752], "repair_candidates": [0.00229786429554224, 0.9274437427520752, 0.013344633392989635, 0.00012175493611721322, 0.006812214385718107, 0.00016743810556363314, 0.009740552864968777, 0.0009370225598104298, 0.028777344152331352, 0.0019910589326173067, 0.0005199469160288572, 9.888340719044209e-05, 0.0005451324977912009, 0.0012147652450948954, 0.0006388062029145658, 0.0009366848389618099, 0.001492731855250895, 0.0001938004861585796, 7.693236693739891e-05, 0.0010988150024786592, 0.001189801492728293, 0.0003588068357203156, 1.2465402505767997e-06], "target_probs": 0.9274437427520752}}


{"result": {"time": "2021-02-21 07:21:23.436619", "n_pass": [110, 8, 6], "n_token": 95, "loss": [1.100759744644165, 0.05633953586220741], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "(", ")", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 55, 79, 42, 52, 76, 94, 4, 21, 33, 63, 84, 28, 65, 86, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.3326182961463928, "repair_targets": [0.9452181458473206], "repair_candidates": [0.0014439276419579983, 0.9452181458473206, 0.009124829433858395, 7.258290861500427e-05, 0.0032304637134075165, 9.050550579559058e-05, 0.006143481936305761, 0.0005213020485825837, 0.018670596182346344, 0.0010536134941503406, 0.00015265982074197382, 3.276467032264918e-05, 0.010586168617010117, 0.000497629342135042, 0.0008017178042791784, 0.00044236695975996554, 0.0007462408393621445, 0.0002719375188462436, 8.03481598268263e-05, 0.00042350139119662344, 0.0003210516879335046, 7.23654666217044e-05, 1.6448727819806663e-06], "target_probs": 0.9452181458473206}}


{"result": {"time": "2021-02-21 07:21:23.496098", "n_pass": [112, 9, 7], "n_token": 91, "loss": [1.3129215240478516, 0.19239899516105652], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "*", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 75, 42, 48, 72, 90, 4, 21, 33, 59, 80, 28, 61, 82, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.26903292536735535, "repair_targets": [0.8249776363372803], "repair_candidates": [0.0011894034687429667, 0.8249776363372803, 0.007602945901453495, 0.0001256319519598037, 0.0034645863343030214, 0.00015122260083444417, 0.026398850604891777, 0.0009381994022987783, 0.10141684114933014, 0.0011646175989881158, 0.0007493597222492099, 6.832549843238667e-05, 0.028173940256237984, 0.000673470611218363, 0.001180495135486126, 0.0002503629948478192, 0.0004912441363558173, 0.0002970722271129489, 3.693439066410065e-05, 0.0003165717935189605, 0.00026059368974529207, 6.924517947481945e-05, 2.350870772716007e-06], "target_probs": 0.8249776363372803}}


{"result": {"time": "2021-02-21 07:21:23.557526", "n_pass": [115, 10, 8], "n_token": 87, "loss": [1.257737159729004, 0.1678965538740158], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 71, 42, 48, 68, 86, 4, 21, 33, 55, 76, 28, 57, 78, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.2842966318130493, "repair_targets": [0.8454412817955017], "repair_candidates": [0.0013459796318784356, 0.8454412817955017, 0.008658411912620068, 0.00012093338591512293, 0.00534824188798666, 0.00016006379155442119, 0.024623079225420952, 0.001245459308847785, 0.06176089122891426, 0.0019188616424798965, 0.000745962664950639, 0.00021988929074723274, 0.04056832194328308, 0.0006676079938188195, 0.002022553002461791, 0.0010493551380932331, 0.0010909236734732985, 0.00031779345590621233, 9.668942948337644e-05, 0.0013988360296934843, 0.001112060621380806, 8.593423262936994e-05, 8.511380542586267e-07], "target_probs": 0.8454412817955017}}


{"result": {"time": "2021-02-21 07:21:23.616510", "n_pass": [117, 11, 9], "n_token": 83, "loss": [1.3477391004562378, 0.19100937247276306], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "=", "(", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 67, 42, 48, 64, 82, 4, 21, 33, 55, 72, 28, 57, 74, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.25982701778411865, "repair_targets": [0.8261248469352722], "repair_candidates": [0.001765047782100737, 0.8261248469352722, 0.011594236828386784, 0.00015634570445399731, 0.0060178739950060844, 0.00023168623738456517, 0.021589942276477814, 0.0016196061624214053, 0.08041474968194962, 0.0021948928479105234, 0.0009511018870398402, 0.00017265701899304986, 0.04093784838914871, 0.0007104302057996392, 0.001709474017843604, 0.0006770124309696257, 0.0012609853874891996, 0.0003865103062707931, 0.0001558030053274706, 0.0004662982828449458, 0.0006918845465406775, 0.00016972525918390602, 1.0605193665469415e-06], "target_probs": 0.8261248469352722}}


{"result": {"time": "2021-02-21 07:21:23.974076", "n_pass": [193, 17, 10], "n_token": 81, "loss": [1.297967791557312, 0.17423421144485474], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "float", "(", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 65, 42, 48, 64, 80, 4, 21, 33, 55, 70, 28, 57, 72, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.27308622002601624, "repair_targets": [0.840100109577179], "repair_candidates": [0.0023810958955436945, 0.840100109577179, 0.01436777226626873, 0.00027588699595071375, 0.010791718028485775, 0.00032469970756210387, 0.022478217259049416, 0.002088863169774413, 0.08653242141008377, 0.005779404658824205, 0.0010433230781927705, 0.0005077063688077033, 0.007893424481153488, 0.0008772788569331169, 0.0008663738844916224, 0.0012780996039509773, 0.0006425226456485689, 0.0001977445208467543, 8.787445403868333e-05, 0.000859256717376411, 0.00047891729627735913, 0.00012078730651410297, 2.647980727488175e-05], "target_probs": 0.840100109577179}}


{"result": {"time": "2021-02-21 07:21:24.033358", "n_pass": [195, 18, 11], "n_token": 79, "loss": [1.3414217233657837, 0.17866095900535583], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 65, 42, 48, 64, 78, 4, 21, 33, 55, 68, 28, 57, 70, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.2614736557006836, "repair_targets": [0.836389422416687], "repair_candidates": [0.0022046349477022886, 0.836389422416687, 0.013866818509995937, 0.00023343753127846867, 0.01113547571003437, 0.0002924256550613791, 0.021766064688563347, 0.0017266455106437206, 0.09351512789726257, 0.0043427119962871075, 0.0009729523444548249, 0.0003959478053729981, 0.00809402670711279, 0.0009912969544529915, 0.0008767597610130906, 0.0009666774421930313, 0.00036927976179867983, 0.00023806891113054007, 0.00012916613195557147, 0.0009317290387116373, 0.00039092719089239836, 0.00014244485646486282, 2.7960868465015665e-05], "target_probs": 0.836389422416687}}


{"result": {"time": "2021-02-21 07:21:24.092942", "n_pass": [198, 19, 12], "n_token": 77, "loss": [1.3682907819747925, 0.18472909927368164], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 65, 42, 48, 64, 76, 4, 21, 33, 55, 68, 28, 57, 70, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.25454166531562805, "repair_targets": [0.8313294649124146], "repair_candidates": [0.002175792818889022, 0.8313294649124146, 0.01347712054848671, 0.00024227568064816296, 0.010768908075988293, 0.00029345991788432, 0.021971456706523895, 0.0017089025350287557, 0.09952887892723083, 0.004735006485134363, 0.0010026025120168924, 0.00039317578193731606, 0.0068931072019040585, 0.0010617077350616455, 0.0007606535218656063, 0.0009173810831271112, 0.0003612363070715219, 0.000272738398052752, 0.00011531621566973627, 0.001403795788064599, 0.00042473006760701537, 0.00013265665620565414, 2.9607070246129297e-05], "target_probs": 0.8313294649124146}}


{"result": {"time": "2021-02-21 07:21:24.214289", "n_pass": [200, 21, 13], "n_token": 75, "loss": [1.395774245262146, 0.1800684928894043], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", ")", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [15, 38, 51, 65, 42, 48, 64, 74, 4, 21, 33, 55, 68, 28, 57, 70, 2, 12, 18, 44, 8, 25, 31]}}
{"prediction": {"error_location": 0.24764126539230347, "repair_targets": [0.8352130055427551], "repair_candidates": [0.0024232480209320784, 0.8352130055427551, 0.015501195564866066, 0.00026186657487414777, 0.012306622229516506, 0.0003308206796646118, 0.021736247465014458, 0.0017841571243479848, 0.0899258702993393, 0.00507538765668869, 0.0010337396524846554, 0.00042415570351295173, 0.008059300482273102, 0.0012128211092203856, 0.0008953915094025433, 0.0011785686947405338, 0.00039254859439097345, 0.0003466575872153044, 0.00013707976904697716, 0.0011553367367014289, 0.000424310244852677, 0.00014763818762730807, 3.40558253810741e-05], "target_probs": 0.8352130055427551}}


{"result": {"time": "2021-02-21 07:21:24.451298", "n_pass": [207, 25, 14], "n_token": 74, "loss": [1.273787021636963, 0.13642294704914093], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "len", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 17, "repair_targets": [4], "repair_candidates": [14, 37, 50, 64, 41, 47, 63, 73, 4, 20, 32, 54, 67, 27, 56, 69, 2, 11, 17, 43, 7, 24, 30]}}
{"prediction": {"error_location": 0.279770165681839, "repair_targets": [0.8724735379219055], "repair_candidates": [0.0021550157107412815, 0.8724735379219055, 0.0157395638525486, 0.0002847792347893119, 0.014321046881377697, 0.00025798691785894334, 0.01987563446164131, 0.001301764976233244, 0.05377105250954628, 0.004876491613686085, 0.001157630467787385, 0.0010972445597872138, 0.006456892006099224, 0.00180725974496454, 0.0007132077007554471, 0.0012395813828334212, 0.00031752398354001343, 0.0002596047124825418, 0.0001116535349865444, 0.0012315745698288083, 0.00042412200127728283, 9.73962596617639e-05, 2.95271474897163e-05], "target_probs": 0.8724735379219055}}


{"result": {"time": "2021-02-21 07:21:24.686183", "n_pass": [212, 29, 15], "n_token": 73, "loss": [1.1900041103363037, 0.12541534006595612], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "(", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 16, "repair_targets": [4], "repair_candidates": [13, 36, 49, 63, 40, 46, 62, 72, 4, 19, 31, 53, 66, 26, 55, 68, 2, 10, 16, 42, 7, 23, 29]}}
{"prediction": {"error_location": 0.3042199909687042, "repair_targets": [0.8821304440498352], "repair_candidates": [0.0020410853903740644, 0.8821304440498352, 0.013637254014611244, 0.00027567692450247705, 0.015201490372419357, 0.00022575969342142344, 0.017954664304852486, 0.0014837152557447553, 0.04533030092716217, 0.005813202820718288, 0.0014764065854251385, 0.0014434709446504712, 0.006851234007626772, 0.0018938262946903706, 0.0006202571094036102, 0.0014088600873947144, 0.00027484449674375355, 0.00020481918181758374, 7.996905333129689e-05, 0.001168536371551454, 0.0003783713618759066, 8.197460556402802e-05, 2.3706013962510042e-05], "target_probs": 0.8821304440498352}}


{"result": {"time": "2021-02-21 07:21:24.748297", "n_pass": [213, 30, 16], "n_token": 72, "loss": [1.3499712944030762, 0.14557164907455444], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "len", "(", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 35, 48, 62, 39, 45, 61, 71, 4, 18, 30, 52, 65, 25, 54, 67, 2, 9, 15, 41, 7, 22, 28]}}
{"prediction": {"error_location": 0.25924766063690186, "repair_targets": [0.8645279407501221], "repair_candidates": [0.0027358781080693007, 0.8645279407501221, 0.011209395714104176, 0.00047903688391670585, 0.019733799621462822, 0.00027353432960808277, 0.022422565147280693, 0.0017007149290293455, 0.04972038045525551, 0.007207643240690231, 0.0025162866804748774, 0.0019606647547334433, 0.007870970293879509, 0.002152090659365058, 0.0007220773259177804, 0.0019358375575393438, 0.00026869148132391274, 0.00022173277102410793, 0.00010163783736061305, 0.0017083616694435477, 0.00039033955545164645, 0.0001101805828511715, 3.0197770684026182e-05], "target_probs": 0.8645279407501221}}


{"result": {"time": "2021-02-21 07:21:24.924846", "n_pass": [220, 33, 17], "n_token": 70, "loss": [1.354770302772522, 0.11770793050527573], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "=", "(", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 33, 46, 60, 37, 43, 59, 69, 4, 18, 28, 50, 63, 23, 52, 65, 2, 9, 15, 39, 7, 20, 26]}}
{"prediction": {"error_location": 0.2580065429210663, "repair_targets": [0.8889556527137756], "repair_candidates": [0.003228854387998581, 0.8889556527137756, 0.010716840624809265, 0.0008110018679872155, 0.01520678773522377, 0.000455899367807433, 0.010236418806016445, 0.0006169382832013071, 0.04274674877524376, 0.008164333179593086, 0.0023931299801915884, 0.0017402241937816143, 0.007623022422194481, 0.002619493519887328, 0.0008126730681397021, 0.0008147652260959148, 0.00030262803193181753, 0.00022680153779219836, 0.00010683776781661436, 0.0016461315099149942, 0.00037854869151487947, 0.00016808099462650716, 2.8148901037639007e-05], "target_probs": 0.8889556527137756}}


{"result": {"time": "2021-02-21 07:21:24.985805", "n_pass": [223, 34, 18], "n_token": 68, "loss": [1.3647767305374146, 0.07537821680307388], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "#NEWLINE#", "if", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 31, 44, 58, 35, 41, 57, 67, 4, 18, 26, 48, 61, 23, 50, 63, 2, 9, 15, 37, 7, 20, 24]}}
{"prediction": {"error_location": 0.2554377019405365, "repair_targets": [0.9273926615715027], "repair_candidates": [0.004617271013557911, 0.9273926615715027, 0.0065818228758871555, 0.0013155030319467187, 0.007620551157742739, 0.0009681270457804203, 0.009956480003893375, 0.0004123150138184428, 0.005572260357439518, 0.010609407909214497, 0.0011438971851021051, 0.0017491555772721767, 0.01369292289018631, 0.004033351317048073, 0.0009369003237225115, 0.00029775412986055017, 0.0007814185228198767, 0.00016584654804319143, 8.54442041600123e-05, 0.0010128386784344912, 0.0005881274119019508, 0.00044010579586029053, 2.5828047000686638e-05], "target_probs": 0.9273926615715027}}


{"result": {"time": "2021-02-21 07:21:25.044796", "n_pass": [226, 35, 19], "n_token": 66, "loss": [1.1414862871170044, 0.07298903167247772], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", ":", "#NEWLINE#", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 42, 56, 33, 39, 55, 65, 4, 18, 26, 46, 59, 23, 48, 61, 2, 9, 15, 35, 7, 20, 24]}}
{"prediction": {"error_location": 0.3193439841270447, "repair_targets": [0.9296110272407532], "repair_candidates": [0.002496412955224514, 0.9296110272407532, 0.00632358156144619, 0.0009321921388618648, 0.005450654774904251, 0.0005324484664015472, 0.007325427606701851, 0.0002445396676193923, 0.004205321427434683, 0.018434926867485046, 0.004934986587613821, 0.0018681082874536514, 0.011339018121361732, 0.002687169937416911, 0.0007919624913483858, 0.00022919090406503528, 0.001271578366868198, 7.139465742511675e-05, 7.753919635433704e-05, 0.0005221444880589843, 0.0005157867562957108, 0.0001104664770537056, 2.4157119696610607e-05], "target_probs": 0.9296110272407532}}


{"result": {"time": "2021-02-21 07:21:25.104167", "n_pass": [228, 36, 20], "n_token": 64, "loss": [1.2651804685592651, 0.0883084312081337], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "(", "2.0", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 40, 54, 31, 37, 53, 63, 4, 18, 26, 44, 57, 23, 46, 59, 2, 9, 15, 33, 7, 20, 24]}}
{"prediction": {"error_location": 0.282188355922699, "repair_targets": [0.9154784679412842], "repair_candidates": [0.0033297615591436625, 0.9154784679412842, 0.0072578005492687225, 0.0012658842606469989, 0.007872740738093853, 0.001009544124826789, 0.0072002531960606575, 0.0003732514742296189, 0.004047082737088203, 0.01981242746114731, 0.0034056261647492647, 0.002553062979131937, 0.019689060747623444, 0.0035951000172644854, 0.000739426352083683, 0.00013895689335186034, 0.0008258174057118595, 0.00011158250708831474, 8.455300121568143e-05, 0.00036347852437756956, 0.0006483827601186931, 0.00016740680439397693, 3.0397017326322384e-05], "target_probs": 0.9154784679412842}}


{"result": {"time": "2021-02-21 07:21:25.281597", "n_pass": [235, 39, 21], "n_token": 62, "loss": [1.2734252214431763, 0.1104784905910492], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 40, 52, 31, 37, 51, 61, 4, 18, 26, 42, 55, 23, 44, 57, 2, 9, 15, 33, 7, 20, 24]}}
{"prediction": {"error_location": 0.2798713445663452, "repair_targets": [0.8954055905342102], "repair_candidates": [0.003900303039699793, 0.8954055905342102, 0.008909178897738457, 0.0016721095889806747, 0.008012592792510986, 0.0014307174133136868, 0.008265060372650623, 0.0005780199426226318, 0.004818050190806389, 0.02815202623605728, 0.003971132915467024, 0.0033062146976590157, 0.024115601554512978, 0.004235235042870045, 0.0009939877782016993, 0.00010637431842042133, 0.0003205154789611697, 9.80874101514928e-05, 0.00011713346611941233, 0.0008083723369054496, 0.00034428585786372423, 0.00039399080560542643, 4.5437129301717505e-05], "target_probs": 0.8954055905342102}}


{"result": {"time": "2021-02-21 07:21:25.340173", "n_pass": [238, 40, 22], "n_token": 60, "loss": [1.4154632091522217, 0.12743370234966278], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", ":", "#NEWLINE#", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 40, 50, 31, 37, 49, 59, 4, 18, 26, 42, 53, 23, 44, 55, 2, 9, 15, 33, 7, 20, 24]}}
{"prediction": {"error_location": 0.2428130954504013, "repair_targets": [0.8803517818450928], "repair_candidates": [0.003918886184692383, 0.8803517818450928, 0.008817625232040882, 0.0020613595843315125, 0.007939567789435387, 0.0016385888447985053, 0.00685198325663805, 0.0006992009002715349, 0.003951676189899445, 0.02643667161464691, 0.0035411936696618795, 0.0034535026643425226, 0.04002734646201134, 0.003991751465946436, 0.003355677705258131, 0.00019658583914861083, 0.0005722848582081497, 0.00021187448874115944, 0.0001428364630555734, 0.0010781490709632635, 0.00041769706876948476, 0.0002902539272326976, 5.348210470401682e-05], "target_probs": 0.8803517818450928}}


{"result": {"time": "2021-02-21 07:21:25.399301", "n_pass": [239, 41, 23], "n_token": 58, "loss": [1.4115121364593506, 0.1132688820362091], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", ")", "#NEWLINE#", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 40, 48, 31, 37, 47, 57, 4, 18, 26, 42, 51, 23, 44, 53, 2, 9, 15, 33, 7, 20, 24]}}
{"prediction": {"error_location": 0.2437743842601776, "repair_targets": [0.8929105401039124], "repair_candidates": [0.003838300472125411, 0.8929105401039124, 0.008945337496697903, 0.0020840009674429893, 0.008216370828449726, 0.001665404997766018, 0.006547136232256889, 0.0006678982172161341, 0.004236232955008745, 0.015359176322817802, 0.002931661903858185, 0.0036642022896558046, 0.037642598152160645, 0.003923818469047546, 0.004571352154016495, 0.00019521807553246617, 0.0005601736484095454, 0.00023099321697372943, 0.0001457949838368222, 0.000918341800570488, 0.0004408332461025566, 0.00024957917048595846, 5.500977567862719e-05], "target_probs": 0.8929105401039124}}


{"result": {"time": "2021-02-21 07:21:25.458234", "n_pass": [244, 42, 24], "n_token": 56, "loss": [1.6721374988555908, 0.17769849300384521], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", ",", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [12, 29, 40, 48, 31, 37, 47, 55, 4, 18, 26, 42, 51, 23, 44, 53, 2, 9, 15, 33, 7, 20, 24]}}
{"prediction": {"error_location": 0.1878451108932495, "repair_targets": [0.8371948003768921], "repair_candidates": [0.004664587788283825, 0.8371948003768921, 0.011552795767784119, 0.0022899408359080553, 0.010896670632064342, 0.0015396523522213101, 0.008703961968421936, 0.000664417864754796, 0.0058244080282747746, 0.03382962942123413, 0.004789514932781458, 0.0038480209186673164, 0.056351590901613235, 0.005478682927787304, 0.006385444197803736, 0.00088573555694893, 0.0013687280006706715, 0.0006992645212449133, 9.13498442969285e-05, 0.00035934793413616717, 0.0012226179242134094, 0.0010671931086108088, 0.0002915724762715399], "target_probs": 0.8371948003768921}}


{"result": {"time": "2021-02-21 07:21:25.636204", "n_pass": [249, 45, 25], "n_token": 55, "loss": [1.2880496978759766, 0.14353950321674347], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", ".", "is_directed", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 39, 47, 30, 36, 46, 54, 3, 17, 25, 41, 50, 22, 43, 52, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.2758081555366516, "repair_targets": [0.86628657579422], "repair_candidates": [0.00471744267269969, 0.86628657579422, 0.010013258084654808, 0.004039773251861334, 0.009558377787470818, 0.0008490466861985624, 0.007576717529445887, 0.0005779615021310747, 0.005449316464364529, 0.024307020008563995, 0.004426166415214539, 0.003417822765186429, 0.04747705161571503, 0.0017047051806002855, 0.004696983844041824, 0.000824068090878427, 0.0011441493406891823, 0.0006979266181588173, 5.242050247034058e-05, 0.00024325955018866807, 0.000852778262924403, 0.0009312470792792737, 0.00015599819016642869], "target_probs": 0.86628657579422}}


{"result": {"time": "2021-02-21 07:21:25.990020", "n_pass": [268, 51, 26], "n_token": 53, "loss": [0.9046858549118042, 0.135623961687088], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "=", "(", "m", "/", "nb", "*", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 37, 45, 30, 34, 44, 52, 3, 17, 25, 39, 48, 22, 41, 50, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.4046689569950104, "repair_targets": [0.8731709122657776], "repair_candidates": [0.0033640372566878796, 0.8731709122657776, 0.01022745668888092, 0.00238875113427639, 0.007609618827700615, 0.00047530210576951504, 0.012494147755205631, 0.0009741486283019185, 0.008499078452587128, 0.01687195710837841, 0.009445875883102417, 0.003343157470226288, 0.026883497834205627, 0.004039319232106209, 0.0035917211789637804, 0.000642381317447871, 0.0012921442976221442, 0.0028030623216181993, 1.3888953617424704e-05, 0.00010607578587951139, 0.0027338280342519283, 0.0054526436142623425, 0.003577056573703885], "target_probs": 0.8731709122657776}}


{"result": {"time": "2021-02-21 07:21:26.048527", "n_pass": [270, 52, 27], "n_token": 51, "loss": [0.9806863069534302, 0.14883095026016235], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "*", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 43, 30, 34, 42, 50, 3, 17, 25, 37, 46, 22, 39, 48, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.37505361437797546, "repair_targets": [0.861714780330658], "repair_candidates": [0.004384094849228859, 0.861714780330658, 0.011948090977966785, 0.004047341179102659, 0.009171221405267715, 0.0006885251495987177, 0.014672224409878254, 0.0009334232890978456, 0.008914779871702194, 0.013667641207575798, 0.009100024588406086, 0.003311950247734785, 0.007022031582891941, 0.01000311691313982, 0.0015586987137794495, 0.002054300159215927, 0.0029973771888762712, 0.003508704947307706, 1.997714934987016e-05, 0.00016176221834030002, 0.0038109554443508387, 0.010179270058870316, 0.016129720956087112], "target_probs": 0.861714780330658}}


{"result": {"time": "2021-02-21 07:21:26.521481", "n_pass": [344, 60, 28], "n_token": 50, "loss": [0.95018470287323, 0.14028270542621613], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", ")", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 42, 30, 34, 41, 49, 3, 17, 25, 37, 45, 22, 38, 47, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.3866695761680603, "repair_targets": [0.869112491607666], "repair_candidates": [0.004010761622339487, 0.869112491607666, 0.011230440810322762, 0.0035284205805510283, 0.010106288827955723, 0.000633169780485332, 0.01794637367129326, 0.0008548636687919497, 0.007286464795470238, 0.011927497573196888, 0.009316259995102882, 0.003473903052508831, 0.005286990199238062, 0.009484418667852879, 0.00199300074018538, 0.0028572124429047108, 0.006580986548215151, 0.0025402894243597984, 3.517759250826202e-05, 0.00016620323003735393, 0.006465156562626362, 0.005012441426515579, 0.010151158086955547], "target_probs": 0.869112491607666}}


{"result": {"time": "2021-02-21 07:21:26.579680", "n_pass": [346, 61, 29], "n_token": 49, "loss": [0.9622699022293091, 0.14072103798389435], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "#INDENT#", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 41, 30, 34, 40, 48, 3, 17, 25, 37, 44, 22, 38, 46, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.38202476501464844, "repair_targets": [0.8687316179275513], "repair_candidates": [0.00398277398198843, 0.8687316179275513, 0.01075455266982317, 0.0029412838630378246, 0.011580419726669788, 0.0005280408659018576, 0.017012281343340874, 0.0009412789950147271, 0.006981492508202791, 0.011964874342083931, 0.01247665286064148, 0.0037741754204034805, 0.006597002502530813, 0.006653370801359415, 0.0027934429235756397, 0.003109878394752741, 0.004425629507750273, 0.0025907757226377726, 8.168513886630535e-05, 0.00036407969309948385, 0.005688705015927553, 0.005180707201361656, 0.010845301672816277], "target_probs": 0.8687316179275513}}


{"result": {"time": "2021-02-21 07:21:26.638167", "n_pass": [347, 62, 30], "n_token": 48, "loss": [1.043134093284607, 0.21054060757160187], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "/", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 40, 30, 34, 39, 47, 3, 17, 25, 37, 43, 22, 38, 45, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.3523486256599426, "repair_targets": [0.810146152973175], "repair_candidates": [0.0045221345499157906, 0.810146152973175, 0.00996312778443098, 0.0032889957074075937, 0.010029631666839123, 0.000830278149805963, 0.0167021993547678, 0.0014972953358665109, 0.011307165026664734, 0.037911929190158844, 0.014723698608577251, 0.008099607191979885, 0.0037082985509186983, 0.013018457219004631, 0.0019682194106280804, 0.0043886746279895306, 0.012303483672440052, 0.0038221864961087704, 0.00906340777873993, 0.006535181775689125, 0.006084077525883913, 0.004022502806037664, 0.006063398439437151], "target_probs": 0.810146152973175}}


{"result": {"time": "2021-02-21 07:21:26.697459", "n_pass": [350, 63, 31], "n_token": 47, "loss": [0.9890801906585693, 0.0923319011926651], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "(", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 40, 30, 34, 39, 46, 3, 17, 25, 37, 42, 22, 38, 44, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.37191861867904663, "repair_targets": [0.9118024706840515], "repair_candidates": [0.002493439707905054, 0.9118024706840515, 0.005694967228919268, 0.0019942601211369038, 0.00580648984760046, 0.00039507405017502606, 0.008539612405002117, 0.0007712568622082472, 0.0034572503063827753, 0.01892797090113163, 0.010191359557211399, 0.0033999669831246138, 0.002953162183985114, 0.004823890049010515, 0.0009438747074455023, 0.002447601407766342, 0.0037582952063530684, 4.438653195393272e-05, 0.0004029115370940417, 0.00042922160355374217, 0.0005346442339941859, 0.0034562910441309214, 0.006731690838932991], "target_probs": 0.9118024706840515}}


{"result": {"time": "2021-02-21 07:21:26.758303", "n_pass": [351, 64, 32], "n_token": 46, "loss": [1.283014178276062, 0.2743614912033081], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "*", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 40, 30, 34, 39, 45, 3, 17, 25, 37, 41, 22, 38, 43, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.27720052003860474, "repair_targets": [0.760057270526886], "repair_candidates": [0.005664014257490635, 0.760057270526886, 0.011328675784170628, 0.004970360081642866, 0.0088790999725461, 0.0013025585794821382, 0.016461538150906563, 0.0020727606024593115, 0.011444956995546818, 0.07200083136558533, 0.021967468783259392, 0.009921569377183914, 0.0028213264886289835, 0.023586349561810493, 0.003407272743061185, 0.008926291950047016, 0.009897512383759022, 0.002576639410108328, 0.005371586419641972, 0.002398233860731125, 0.0082774069160223, 0.0014383920934051275, 0.005227955523878336], "target_probs": 0.760057270526886}}


{"result": {"time": "2021-02-21 07:21:26.817124", "n_pass": [353, 65, 33], "n_token": 45, "loss": [1.023643970489502, 0.22156742215156555], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "nt", "return", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 40, 30, 34, 39, 44, 3, 17, 25, 37, 41, 22, 38, 42, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.3592833876609802, "repair_targets": [0.8012619018554688], "repair_candidates": [0.004371198359876871, 0.8012619018554688, 0.01086974423378706, 0.003395312000066042, 0.008302140049636364, 0.0006607422837987542, 0.01789618283510208, 0.0010636685183271766, 0.010015616193413734, 0.04631897807121277, 0.017781253904104233, 0.0082049909979105, 0.00407952768728137, 0.010695173405110836, 0.00207283697091043, 0.005356845911592245, 0.011930662207305431, 0.0035888031125068665, 0.011730089783668518, 0.0028901309706270695, 0.005354493856430054, 0.002256256528198719, 0.009903594851493835], "target_probs": 0.8012619018554688}}


{"result": {"time": "2021-02-21 07:21:26.875927", "n_pass": [355, 66, 34], "n_token": 44, "loss": [0.8854119777679443, 0.11673389375209808], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", ")", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "nt", "d"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [11, 28, 35, 40, 30, 34, 39, 43, 3, 17, 25, 37, 41, 22, 38, 42, 2, 8, 14, 32, 6, 19, 23]}}
{"prediction": {"error_location": 0.41254422068595886, "repair_targets": [0.8898219466209412], "repair_candidates": [0.00245651020668447, 0.8898219466209412, 0.006637000944465399, 0.002380241407081485, 0.006188742816448212, 0.0003422195732127875, 0.011512872762978077, 0.0005042818957008421, 0.003185857553035021, 0.015858449041843414, 0.01790640316903591, 0.004598592408001423, 0.007005742751061916, 0.0036069746129214764, 0.0020064986310899258, 0.0017909163143485785, 0.008262969553470612, 0.0021368314046412706, 0.008144516497850418, 0.0028139168862253428, 0.0010429361136630177, 0.000356357719283551, 0.0014391242293640971], "target_probs": 0.8898219466209412}}


{"result": {"time": "2021-02-21 07:21:27.228913", "n_pass": [366, 72, 35], "n_token": 43, "loss": [1.1841514110565186, 0.166830375790596], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", "#NEWLINE#", "m", "=", "nx", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "nt", "d"]}}
{"position": {"error_location": 13, "repair_targets": [3], "repair_candidates": [10, 27, 34, 39, 29, 33, 38, 42, 3, 16, 24, 36, 40, 21, 37, 41, 2, 8, 13, 31, 6, 18, 22]}}
{"prediction": {"error_location": 0.30600571632385254, "repair_targets": [0.8463431596755981], "repair_candidates": [0.0027301860973238945, 0.8463431596755981, 0.008967231027781963, 0.0020863236859440804, 0.007150536868721247, 0.0005649696104228497, 0.01529957726597786, 0.0003894057881552726, 0.004534450825303793, 0.011686933226883411, 0.026478052139282227, 0.006958300713449717, 0.011268679983913898, 0.004926791414618492, 0.002626875415444374, 0.003885642858222127, 0.018571922555565834, 0.0034891783725470304, 0.00941888615489006, 0.009607134386897087, 0.0004335808043833822, 0.0004903782391920686, 0.0020918725058436394], "target_probs": 0.8463431596755981}}


{"result": {"time": "2021-02-21 07:21:27.403949", "n_pass": [370, 75, 36], "n_token": 42, "loss": [1.103279709815979, 0.14938008785247803], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", "#NEWLINE#", "m", "=", "B", ")", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "nt", "d"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [10, 26, 33, 38, 28, 32, 37, 41, 3, 15, 23, 35, 39, 20, 36, 40, 2, 8, 12, 30, 6, 17, 21]}}
{"prediction": {"error_location": 0.33178117871284485, "repair_targets": [0.8612416982650757], "repair_candidates": [0.004174096509814262, 0.8612416982650757, 0.011770453304052353, 0.0028131387662142515, 0.005151642486453056, 0.0006897640996612608, 0.012632990255951881, 0.0002777527552098036, 0.007223439868539572, 0.014866935089230537, 0.016026871278882027, 0.002742613200098276, 0.009197026491165161, 0.004962424281984568, 0.004525989759713411, 0.0027172218542546034, 0.0063974279910326, 0.006666482426226139, 0.011126862838864326, 0.00156954035628587, 0.010810608975589275, 0.0007472973084077239, 0.0016676118830218911], "target_probs": 0.8612416982650757}}


{"result": {"time": "2021-02-21 07:21:27.465529", "n_pass": [372, 76, 37], "n_token": 41, "loss": [1.2680938243865967, 0.14911402761936188], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def density(", "B", "nodes", "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", "#NEWLINE#", "n", "=", "B", "#NEWLINE#", "m", "=", "B", "#NEWLINE#", "nb", "=", "n", ")", "#NEWLINE#", "nt", "n", "-", "nb", ")", "(", "m", "#INDENT#", "d", "if", "B", "#INDENT#", "d", "m", "/", "nb", "nt", "d", "m", "nb", "nt", "d"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [10, 25, 32, 37, 27, 31, 36, 40, 3, 14, 22, 34, 38, 19, 35, 39, 2, 8, 12, 29, 6, 16, 20]}}
{"prediction": {"error_location": 0.2813674211502075, "repair_targets": [0.8614708781242371], "repair_candidates": [0.0074076903983950615, 0.8614708781242371, 0.016988953575491905, 0.004713371861726046, 0.0065463935025036335, 0.0009413313819095492, 0.01334439404308796, 0.00030871026683598757, 0.007149047218263149, 0.019884880632162094, 0.011753352358937263, 0.0017292058328166604, 0.0028158763889223337, 0.007408951409161091, 0.001935767475515604, 0.0021158182062208652, 0.002796742133796215, 0.0039050919003784657, 0.014145869761705399, 0.002522361697629094, 0.007721618749201298, 0.0009643760276958346, 0.0014293465064838529], "target_probs": 0.8614708781242371}}




Minimal simplified tokens:

['#NEWLINE#', 'def density(', 'B', 'nodes', "'Return density of bipartite graph B.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nodes: list or container\\n      Nodes in one set of the bipartite graph.\\n\\n    Returns\\n    -------\\n    d : float\\n       The bipartite density\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import bipartite\\n    >>> G = nx.complete_bipartite_graph(3,2)\\n    >>> X=set([0,1,2])\\n    >>> bipartite.density(G,X)\\n    1.0\\n    >>> Y=set([3,4])\\n    >>> bipartite.density(G,Y)\\n    1.0\\n\\n    See Also\\n    --------\\n    color\\n    '", '#NEWLINE#', 'n', '=', 'B', '#NEWLINE#', 'm', '=', 'B', '#NEWLINE#', 'nb', '=', 'n', ')', '#NEWLINE#', 'nt', 'n', '-', 'nb', ')', '(', 'm', '#INDENT#', 'd', 'if', 'B', '#INDENT#', 'd', 'm', '/', 'nb', 'nt', 'd', 'm', 'nb', 'nt', 'd']
