
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "lambda", "utilization", ",", "state", "=", "None", ":", "(", "loess", "(", "params", "[", "'threshold'", "]", ",", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", ")", ",", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"], "error_location": [24], "repair_targets": [5], "repair_candidates": [5, 9, 24, 39, 44, 49, 16, 54, 7, 21], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "beloglazov/openstack-neat/neat/locals/overload/statistics.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00007-of-00300", "js_count": 23294, "results": {"model": "transformer", "prob": {"loc": [[0.35778725147247314, 3.460260131760151e-06, 2.094444084832503e-07, 1.582725275284247e-07, 9.413351449438778e-07, 8.835721018840559e-06, 7.557088110843324e-08, 3.7815418636455433e-06, 7.527589929168244e-08, 3.7571446682704845e-06, 4.180886037374876e-08, 9.559123981262019e-08, 1.3488178751686064e-07, 1.1810001865342201e-07, 3.791448932588537e-07, 1.8179395055994974e-07, 7.393075975414831e-06, 2.644174479371486e-08, 6.313948830438676e-08, 1.8958852479045163e-06, 5.975832095828082e-07, 0.017890263348817825, 3.594352904201514e-08, 1.1209905892428651e-07, 0.04310552030801773, 1.5646409678993223e-07, 1.692706632638874e-07, 2.5591534225100077e-08, 1.143105592404936e-07, 3.6818633816437796e-05, 0.041722703725099564, 2.2897975782143476e-07, 0.00019376660929992795, 9.013114095068886e-07, 1.9269526774223777e-07, 6.04441652285459e-07, 9.028621406059756e-08, 1.5432855207109242e-06, 1.2646360119106248e-06, 0.3880983591079712, 3.1177748951449757e-06, 1.3983635653858073e-06, 7.698620265728096e-07, 6.543399422298535e-07, 0.013552248477935791, 1.7664888218860142e-06, 2.6660443381842924e-06, 4.5876973331360205e-07, 3.51335216919324e-07, 0.011329523287713528, 7.458899062839919e-07, 9.59710632741917e-06, 2.3883629296506115e-07, 2.02294685891502e-07, 0.005047834478318691, 1.4562432681941573e-07, 0.12117137014865875, 8.995531430855408e-08, 8.359407388525142e-08, 7.920966140773089e-07, 4.789409331351635e-07, 2.459906625063013e-07, 3.258436436226475e-07, 1.9676568285831308e-07, 3.6250230550649576e-07, 1.1669154673654702e-06, 8.181370958482148e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.7326174974441528, 0.0, 0.06505455821752548, 0.0, 0.018699564039707184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12571772933006287, 0.0, 0.0, 0.0, 0.0, 0.03398502990603447, 0.0, 0.0, 0.005948249716311693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0027028219774365425, 0.0, 0.0, 0.0, 0.0, 0.011941918171942234, 0.0, 0.0, 0.0, 0.0, 0.002346605760976672, 0.0, 0.0, 0.0, 0.0, 0.000985950231552124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.7326174974441528]}, "loss": [3.14410400390625, 0.3111315369606018], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [39]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:22:06.894173", "n_pass": [1, 1, 1], "n_token": 67, "loss": [0.9464962482452393, 0.3111315369606018], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "lambda", "utilization", ",", "state", "=", "None", ":", "(", "loess", "(", "params", "[", "'threshold'", "]", ",", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", ")", ",", "{", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"]}}
{"position": {"error_location": 39, "repair_targets": [5], "repair_candidates": [5, 9, 24, 39, 44, 49, 16, 54, 7, 21]}}
{"prediction": {"error_location": 0.3880983591079712, "repair_targets": [0.7326174974441528], "repair_candidates": [0.7326174974441528, 0.06505455821752548, 0.018699564039707184, 0.12571772933006287, 0.03398502990603447, 0.005948249716311693, 0.0027028219774365425, 0.011941918171942234, 0.002346605760976672, 0.000985950231552124], "target_probs": 0.7326174974441528}}


{"result": {"time": "2021-02-21 06:22:07.294991", "n_pass": [58, 8, 2], "n_token": 62, "loss": [0.9099744558334351, 0.31079259514808655], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "lambda", "utilization", ",", "state", "=", "None", ":", "(", "loess", "(", "params", "[", "'threshold'", "]", ",", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"]}}
{"position": {"error_location": 39, "repair_targets": [5], "repair_candidates": [5, 9, 24, 39, 44, 49, 16, 54, 7, 21]}}
{"prediction": {"error_location": 0.40253448486328125, "repair_targets": [0.7328658699989319], "repair_candidates": [0.7328658699989319, 0.060981228947639465, 0.012731649912893772, 0.15559226274490356, 0.024234358221292496, 0.002880936022847891, 0.0009808918694034219, 0.00576856080442667, 0.0015168847749009728, 0.0024474028032273054], "target_probs": 0.7328658699989319}}


{"result": {"time": "2021-02-21 06:22:07.523977", "n_pass": [67, 12, 3], "n_token": 58, "loss": [0.8451436161994934, 0.12681126594543457], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "state", "=", "None", ":", "(", "loess", "(", "params", "[", "'threshold'", "]", ",", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"]}}
{"position": {"error_location": 35, "repair_targets": [5], "repair_candidates": [5, 9, 24, 35, 40, 45, 16, 50, 7, 21]}}
{"prediction": {"error_location": 0.429495632648468, "repair_targets": [0.8808999061584473], "repair_candidates": [0.8808999061584473, 0.0409858264029026, 0.005700715351849794, 0.04475095495581627, 0.023201758041977882, 0.0006769275642000139, 0.00038964656414464116, 0.001700664171949029, 0.0012999147875234485, 0.00039367409772239625], "target_probs": 0.8808999061584473}}


{"result": {"time": "2021-02-21 06:22:07.580728", "n_pass": [68, 13, 4], "n_token": 54, "loss": [0.5612781643867493, 0.26738911867141724], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "[", "'threshold'", "]", ",", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"]}}
{"position": {"error_location": 31, "repair_targets": [5], "repair_candidates": [5, 9, 24, 31, 36, 41, 16, 46, 7, 21]}}
{"prediction": {"error_location": 0.5704794526100159, "repair_targets": [0.7653751969337463], "repair_candidates": [0.7653751969337463, 0.04291988164186478, 0.0037941571790724993, 0.14124007523059845, 0.04286441206932068, 0.0002635026175994426, 0.0002164152974728495, 0.0021677459590137005, 0.0008483107667416334, 0.00031028006924316287], "target_probs": 0.7653751969337463}}


{"result": {"time": "2021-02-21 06:22:07.637482", "n_pass": [70, 14, 5], "n_token": 50, "loss": [0.3440561890602112, 0.10544392466545105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization", "#NEWLINE#", "#UNINDENT#", "}", ")", ")"]}}
{"position": {"error_location": 31, "repair_targets": [5], "repair_candidates": [5, 9, 24, 31, 32, 37, 16, 42, 7, 21]}}
{"prediction": {"error_location": 0.7088890075683594, "repair_targets": [0.8999249339103699], "repair_candidates": [0.8999249339103699, 0.030769679695367813, 0.0016063693910837173, 0.011960582807660103, 0.055066339671611786, 0.00010748791828518733, 6.689893052680418e-05, 8.886213618097827e-05, 0.00023643882013857365, 0.00017240573652088642], "target_probs": 0.8999249339103699}}


{"result": {"time": "2021-02-21 06:22:07.693803", "n_pass": [74, 15, 6], "n_token": 45, "loss": [0.29335299134254456, 0.05863506346940994], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 31, "repair_targets": [5], "repair_candidates": [5, 9, 24, 31, 32, 37, 16, 42, 7, 21]}}
{"prediction": {"error_location": 0.7457588315010071, "repair_targets": [0.9430508613586426], "repair_candidates": [0.9430508613586426, 0.017103083431720734, 0.0010000810725614429, 0.008626945316791534, 0.029319986701011658, 5.2179584599798545e-05, 6.719963130308315e-05, 7.235490920720622e-05, 0.0001926717086462304, 0.0005145463510416448], "target_probs": 0.9430508613586426}}


{"result": {"time": "2021-02-21 06:22:07.865597", "n_pass": [108, 18, 7], "n_token": 43, "loss": [0.8287873864173889, 0.06525002419948578], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", "'param'", "]", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [3, 7, 22, 29, 30, 35, 14, 40, 5, 19]}}
{"prediction": {"error_location": 0.4365783631801605, "repair_targets": [0.9368332028388977], "repair_candidates": [0.9368332028388977, 0.024683713912963867, 0.004211357329040766, 0.023113060742616653, 0.007054532878100872, 0.0007437912281602621, 0.0002787451376207173, 0.0010508501436561346, 0.0014852950116619468, 0.0005454159108921885], "target_probs": 0.9368332028388977}}


{"result": {"time": "2021-02-21 06:22:08.317238", "n_pass": [124, 26, 8], "n_token": 41, "loss": [0.34450361132621765, 0.08233024924993515], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "[", "'length'", "]", ",", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [3, 7, 22, 29, 30, 33, 14, 38, 5, 19]}}
{"prediction": {"error_location": 0.7085720896720886, "repair_targets": [0.9209677577018738], "repair_candidates": [0.9209677577018738, 0.02858910895884037, 0.0015866229077801108, 0.03174035623669624, 0.014620677568018436, 0.00029088667361065745, 0.0002124196180375293, 0.0010099872015416622, 0.00029270967934280634, 0.0006894733523949981], "target_probs": 0.9209677577018738}}


{"result": {"time": "2021-02-21 06:22:08.373567", "n_pass": [126, 27, 9], "n_token": 39, "loss": [0.7293846607208252, 0.06352464109659195], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "]", ",", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [3, 7, 22, 29, 30, 33, 14, 36, 5, 19]}}
{"prediction": {"error_location": 0.48220565915107727, "repair_targets": [0.9384509921073914], "repair_candidates": [0.9384509921073914, 0.025281181558966637, 0.0003523168561514467, 0.008046912029385567, 0.027438564226031303, 6.435182149289176e-05, 7.935400208225474e-05, 0.00014572138024959713, 8.51792428875342e-05, 5.545183375943452e-05], "target_probs": 0.9384509921073914}}


{"result": {"time": "2021-02-21 06:22:08.432724", "n_pass": [127, 28, 10], "n_token": 37, "loss": [0.6944047808647156, 0.06642673164606094], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [3, 7, 22, 29, 30, 33, 14, 34, 5, 19]}}
{"prediction": {"error_location": 0.4993716776371002, "repair_targets": [0.9357314705848694], "repair_candidates": [0.9357314705848694, 0.02978178672492504, 0.00026652385713532567, 0.005502617917954922, 0.02840401791036129, 4.511039878707379e-05, 7.102691597538069e-05, 0.00013749783101957291, 2.850539021892473e-05, 3.133846985292621e-05], "target_probs": 0.9357314705848694}}


{"result": {"time": "2021-02-21 06:22:08.544693", "n_pass": [133, 30, 11], "n_token": 35, "loss": [0.7332309484481812, 0.05141741782426834], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "#NEWLINE#", "#INDENT#", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 27, "repair_targets": [3], "repair_candidates": [3, 7, 20, 27, 28, 31, 12, 32, 5, 17]}}
{"prediction": {"error_location": 0.48035454750061035, "repair_targets": [0.9498820900917053], "repair_candidates": [0.9498820900917053, 0.022609373554587364, 0.00013903695798944682, 0.006262247450649738, 0.02079307660460472, 4.965152038494125e-05, 6.186732207424939e-05, 0.00010696281242417172, 4.1835020965663716e-05, 5.392840466811322e-05], "target_probs": 0.9498820900917053}}


{"result": {"time": "2021-02-21 06:22:08.600853", "n_pass": [134, 31, 12], "n_token": 33, "loss": [0.7126861214637756, 0.02217371016740799], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "float", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 25, "repair_targets": [3], "repair_candidates": [3, 7, 18, 25, 26, 29, 10, 30, 5, 15]}}
{"prediction": {"error_location": 0.49032536149024963, "repair_targets": [0.9780703186988831], "repair_candidates": [0.9780703186988831, 0.008185416460037231, 3.8370439142454416e-05, 0.0020621896255761385, 0.011575598269701004, 1.7316699086222798e-05, 8.39772019389784e-06, 1.3459928595693782e-05, 1.5434197848662734e-05, 1.345226883131545e-05], "target_probs": 0.9780703186988831}}


{"result": {"time": "2021-02-21 06:22:08.712484", "n_pass": [137, 33, 13], "n_token": 31, "loss": [0.7633529305458069, 0.018421487882733345], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "\" Creates the Loess based overload detection algorithm.\\n\\n    :param time_step: The length of the simulation time step in seconds.\\n     :type time_step: int,>=0\\n\\n    :param migration_time: The VM migration time in time seconds.\\n     :type migration_time: float,>=0\\n\\n    :param params: A dictionary containing the algorithm's parameters.\\n     :type params: dict(str: *)\\n\\n    :return: A function implementing the OTF algorithm.\\n     :rtype: function\\n    \"", "#NEWLINE#", "migration_time_normalized", "=", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 23, "repair_targets": [3], "repair_candidates": [3, 7, 16, 23, 24, 27, 10, 28, 5, 13]}}
{"prediction": {"error_location": 0.4661009907722473, "repair_targets": [0.9817471504211426], "repair_candidates": [0.9817471504211426, 0.006347560789436102, 2.9812605134793557e-05, 0.001246099011041224, 0.010588323697447777, 1.2428596164681949e-05, 4.0841455302143e-06, 5.80227242608089e-06, 1.3414597560768016e-05, 5.315586349752266e-06], "target_probs": 0.9817471504211426}}


{"result": {"time": "2021-02-21 06:22:08.996720", "n_pass": [151, 38, 14], "n_token": 29, "loss": [0.8949751257896423, 0.0048239766620099545], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "=", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 21, "repair_targets": [3], "repair_candidates": [3, 7, 14, 21, 22, 25, 8, 26, 5, 11]}}
{"prediction": {"error_location": 0.4086177349090576, "repair_targets": [0.9951876401901245], "repair_candidates": [0.9951876401901245, 0.003332278458401561, 0.0001203140418510884, 0.00031189771834760904, 0.001032003783620894, 6.509923423436703e-06, 3.2369068776461063e-06, 3.5480222777550807e-06, 1.833887722568761e-06, 7.037982641122653e-07], "target_probs": 0.9951876401901245}}


{"result": {"time": "2021-02-21 06:22:09.279764", "n_pass": [195, 43, 15], "n_token": 28, "loss": [0.975526750087738, 0.024979224428534508], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", ")", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 20, "repair_targets": [3], "repair_candidates": [3, 7, 13, 20, 21, 24, 8, 25, 5, 10]}}
{"prediction": {"error_location": 0.37699371576309204, "repair_targets": [0.9753301739692688], "repair_candidates": [0.9753301739692688, 0.01176957506686449, 0.00014844333054497838, 0.00020695582497864962, 0.01247287169098854, 2.789393693092279e-05, 5.122361471876502e-06, 7.2670113695494365e-06, 6.251956165215233e-06, 2.5487739549134858e-05], "target_probs": 0.9753301739692688}}


{"result": {"time": "2021-02-21 06:22:09.391665", "n_pass": [198, 45, 16], "n_token": 27, "loss": [0.9997776746749878, 0.04588662460446358], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", ")", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 19, "repair_targets": [3], "repair_candidates": [3, 7, 12, 19, 20, 23, 8, 24, 5, 10]}}
{"prediction": {"error_location": 0.36796122789382935, "repair_targets": [0.9551502466201782], "repair_candidates": [0.9551502466201782, 0.013684464618563652, 0.00030400004470720887, 0.00027226621750742197, 0.030423790216445923, 9.258541103918105e-05, 1.268637424800545e-05, 1.8405233277007937e-05, 1.1347810868755914e-05, 3.0206738301785663e-05], "target_probs": 0.9551502466201782}}


{"result": {"time": "2021-02-21 06:22:09.506967", "n_pass": [201, 47, 17], "n_token": 26, "loss": [1.0500314235687256, 0.04852227121591568], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "return", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 18, "repair_targets": [3], "repair_candidates": [3, 7, 12, 18, 19, 22, 8, 23, 5, 10]}}
{"prediction": {"error_location": 0.34992673993110657, "repair_targets": [0.9526361227035522], "repair_candidates": [0.9526361227035522, 0.01851470209658146, 0.0006361444829963148, 0.00039920947165228426, 0.02759445086121559, 0.00013993711036164314, 1.2470663023123052e-05, 1.449769661121536e-05, 1.1766832358262036e-05, 4.079682912561111e-05], "target_probs": 0.9526361227035522}}


{"result": {"time": "2021-02-21 06:22:09.619110", "n_pass": [203, 49, 18], "n_token": 25, "loss": [1.0934031009674072, 0.05145525559782982], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", "[", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [3, 7, 12, 17, 18, 21, 8, 22, 5, 10]}}
{"prediction": {"error_location": 0.3350743055343628, "repair_targets": [0.9498461484909058], "repair_candidates": [0.9498461484909058, 0.0184631310403347, 0.0004965612897649407, 0.00023700644669588655, 0.030749838799238205, 0.00011655217531369999, 1.8825945517164655e-05, 1.5509787772316486e-05, 1.758626058290247e-05, 3.890509469783865e-05], "target_probs": 0.9498461484909058}}


{"result": {"time": "2021-02-21 06:22:09.844058", "n_pass": [209, 53, 19], "n_token": 24, "loss": [0.7724515199661255, 0.04619788005948067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized", ",", "utilization"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [3, 7, 12, 17, 18, 20, 8, 21, 5, 10]}}
{"prediction": {"error_location": 0.4618793725967407, "repair_targets": [0.9548529982566833], "repair_candidates": [0.9548529982566833, 0.019701750949025154, 0.0002363628154853359, 5.3904190281173214e-05, 0.02506205253303051, 6.26413311692886e-05, 4.583669124258449e-06, 5.45096145287971e-06, 1.0160782949242275e-05, 1.0033619219029788e-05], "target_probs": 0.9548529982566833}}


{"result": {"time": "2021-02-21 06:22:09.955522", "n_pass": [213, 55, 20], "n_token": 22, "loss": [0.7338074445724487, 0.33741602301597595], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contract", "#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [3, 7, 12, 17, 18, 20, 8, 21, 5, 10]}}
{"prediction": {"error_location": 0.4800775945186615, "repair_targets": [0.713611900806427], "repair_candidates": [0.713611900806427, 0.0981563925743103, 0.00013877754099667072, 0.00019053292635362595, 0.18771667778491974, 0.00010148390720132738, 2.1559868400800042e-05, 2.2845086277811788e-05, 2.052524359896779e-05, 1.9261280613136478e-05], "target_probs": 0.713611900806427}}


{"result": {"time": "2021-02-21 06:22:10.011801", "n_pass": [214, 56, 21], "n_token": 21, "loss": [0.8182840347290039, 0.22603899240493774], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def loess_factory(", "time_step", ",", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 6, 11, 16, 17, 19, 7, 20, 4, 9]}}
{"prediction": {"error_location": 0.4411880671977997, "repair_targets": [0.7976869940757751], "repair_candidates": [0.7976869940757751, 0.06060515344142914, 0.00020892254542559385, 8.831694140098989e-05, 0.14128167927265167, 8.234289998654276e-05, 1.5310213711927645e-05, 1.559322299726773e-05, 7.64889318816131e-06, 8.010147212189622e-06], "target_probs": 0.7976869940757751}}


{"result": {"time": "2021-02-21 06:22:10.181496", "n_pass": [218, 59, 22], "n_token": 20, "loss": [0.6728442311286926, 0.04586590826511383], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def loess_factory(", "time_step", "migration_time", ",", "params", "migration_time_normalized", "(", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [2, 5, 10, 15, 16, 18, 6, 19, 3, 8]}}
{"prediction": {"error_location": 0.5102552175521851, "repair_targets": [0.9551700353622437], "repair_candidates": [0.9551700353622437, 0.019000401720404625, 0.0001343221083516255, 2.7210451662540436e-05, 0.025617945939302444, 3.0540799343725666e-05, 4.941550287185237e-06, 6.656885943812085e-06, 2.7762971512856893e-06, 5.016941940994002e-06], "target_probs": 0.9551700353622437}}


{"result": {"time": "2021-02-21 06:22:10.292672", "n_pass": [223, 61, 23], "n_token": 19, "loss": [0.7101407051086426, 0.384219229221344], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def loess_factory(", "time_step", "migration_time", ",", "params", "migration_time_normalized", "migration_time", "/", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [2, 5, 9, 14, 15, 17, 6, 18, 3, 7]}}
{"prediction": {"error_location": 0.4915750324726105, "repair_targets": [0.6809821128845215], "repair_candidates": [0.6809821128845215, 0.16637000441551208, 0.0002660413447301835, 0.00013309947098605335, 0.15209205448627472, 0.0001514439791208133, 2.1314635887392797e-06, 2.2937335870665265e-06, 6.734983344358625e-07, 1.70407759014779e-07], "target_probs": 0.6809821128845215}}


{"result": {"time": "2021-02-21 06:22:10.348606", "n_pass": [225, 62, 24], "n_token": 18, "loss": [0.7734670639038086, 0.13746102154254913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def loess_factory(", "time_step", "migration_time", ",", "params", "migration_time_normalized", "migration_time", "params", "#NEWLINE#", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [2, 5, 8, 13, 14, 16, 6, 17, 3, 7]}}
{"prediction": {"error_location": 0.4614105522632599, "repair_targets": [0.8715683221817017], "repair_candidates": [0.8715683221817017, 0.09501568228006363, 0.00012818066170439124, 1.680324885455775e-06, 0.03299969807267189, 0.0002483044227119535, 1.2125102330173831e-05, 1.122168487199815e-05, 1.8507491859054426e-06, 1.2872291335952468e-05], "target_probs": 0.8715683221817017}}


{"result": {"time": "2021-02-21 06:22:10.404630", "n_pass": [227, 63, 25], "n_token": 17, "loss": [0.8715550303459167, 0.378498375415802], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def loess_factory(", "time_step", "migration_time", ",", "params", "migration_time_normalized", "migration_time", "params", "(", "loess", "(", "params", "params", ",", "params", "migration_time_normalized"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [2, 5, 8, 12, 13, 15, 6, 16, 3, 7]}}
{"prediction": {"error_location": 0.4183005392551422, "repair_targets": [0.6848890781402588], "repair_candidates": [0.6848890781402588, 0.312930703163147, 0.0001823853817768395, 1.4567218613592559e-06, 0.0018691335571929812, 2.886086076614447e-05, 5.331385636964114e-06, 3.6048372749064583e-06, 2.0787133507838007e-06, 8.737678581383079e-05], "target_probs": 0.6848890781402588}}




Minimal simplified tokens:

['#NEWLINE#', 'def loess_factory(', 'time_step', 'migration_time', ',', 'params', 'migration_time_normalized', 'migration_time', 'params', '(', 'loess', '(', 'params', 'params', ',', 'params', 'migration_time_normalized']
