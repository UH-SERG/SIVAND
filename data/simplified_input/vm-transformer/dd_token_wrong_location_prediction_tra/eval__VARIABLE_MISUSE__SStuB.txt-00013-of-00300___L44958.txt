
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", ",", "dest", "=", "'recursive'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", "help", "=", "'Files that frosted should skip over.'", ",", "dest", "=", "'skip'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "=", "'Run frosted against doctests'", ",", "dest", "=", "'run_doctests'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "'Specify error codes that should be ignored.'", ",", "dest", "=", "'ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"], "error_location": [334], "repair_targets": [322], "repair_candidates": [6, 271, 286, 301, 346, 217, 231, 275, 293, 311, 322, 10, 21, 36, 57, 78, 99, 120, 141, 162, 205, 184, 219, 253, 262, 278, 315, 190, 196, 192, 198, 213, 291, 305, 334], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "timothycrosley/frosted/frosted/main.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00013-of-00300", "js_count": 44958, "results": {"model": "transformer", "prob": {"loc": [[0.06681009382009506, 2.680232569218788e-07, 1.4442583129437025e-08, 2.0638582398646577e-08, 1.5435752231951483e-08, 1.2145925154527504e-08, 2.522118336401036e-07, 2.3770317270077612e-08, 1.3987110492053034e-07, 1.3999086334592903e-08, 1.659567914202853e-07, 3.7872293745522256e-08, 3.303519591213444e-08, 6.1919225302631276e-09, 1.606482413762933e-08, 3.594955799712807e-08, 4.680693734826491e-07, 6.457143086890937e-08, 1.5839739830880717e-07, 4.377696427582123e-08, 6.34020196343954e-08, 2.978582713808464e-09, 5.087928744984538e-09, 5.1903974451761314e-09, 1.2726810894037044e-07, 6.214433483364701e-07, 1.2973091045864749e-08, 2.1891644053084747e-08, 3.730349007469158e-08, 2.8729095902235713e-07, 1.4273912718465454e-08, 9.944026047037369e-09, 2.941368215658713e-08, 3.36019070346083e-07, 2.9244016985785493e-08, 2.049418590388541e-08, 4.551864662971639e-09, 6.560876286698658e-09, 3.887531629942487e-09, 3.676713689060307e-08, 4.104138042748673e-07, 4.811417753103342e-08, 7.352112874059458e-08, 1.49404275617826e-08, 2.32071926120625e-08, 2.271170984613491e-08, 1.2000442950466095e-07, 8.3674667195055e-09, 3.902233647323783e-09, 2.0311867743316725e-08, 1.6644116840325296e-07, 9.193668937257371e-09, 7.409503677280327e-09, 9.476249118733904e-09, 1.7037909572081844e-07, 1.4569578432599428e-08, 1.1642519837096188e-08, 6.875673808082183e-09, 5.8030433791600444e-09, 2.913665309023372e-09, 2.9676169077674786e-08, 2.8842225674452493e-07, 3.3059524895406867e-08, 2.4182208235856706e-08, 1.3808414855986939e-08, 5.24830534587295e-09, 4.213669058117375e-08, 4.662594221827021e-08, 9.377787435482787e-09, 1.1781420283796251e-08, 4.557226773727052e-08, 3.2711785280525874e-08, 7.25832327574949e-09, 1.5709173961653278e-09, 1.572057328758092e-08, 2.3359307022019493e-07, 1.788984427264495e-08, 1.2550925632126564e-08, 8.00887978158471e-09, 4.897457106523007e-09, 2.783125507832551e-09, 1.38501166091487e-08, 2.3929911208142585e-07, 3.241342128035285e-08, 4.5198657261380504e-08, 1.1838727331792143e-08, 5.515199408279159e-09, 2.1548874684640396e-08, 3.5428072919785336e-08, 6.4737379901202985e-09, 9.704710812741268e-09, 2.4085633043569032e-08, 2.2532816501552588e-08, 4.914225470997735e-09, 1.0339001876857878e-09, 1.7509858452058324e-08, 2.2666627330636402e-07, 1.8889675601485578e-08, 1.6479356546028612e-08, 7.611243191263384e-09, 5.773114430951409e-09, 2.313536473508293e-09, 7.456121409177285e-08, 2.2512553243814182e-07, 2.2351411388399356e-08, 5.208180908766735e-08, 1.5744879178214433e-08, 1.8894755982046263e-08, 3.9433718512782434e-08, 3.9790027273056694e-08, 9.574756987262845e-09, 2.984236502356907e-08, 2.648318364606439e-08, 2.8655856354475873e-08, 5.821878534817415e-09, 1.0115519533115958e-09, 2.8884628022751713e-08, 1.350673954902959e-07, 2.0077756346381648e-08, 2.6354589621746527e-08, 6.755237258460056e-09, 6.3327902921628265e-09, 2.4866630976561055e-09, 4.0157139835628186e-08, 1.4714669305249117e-07, 2.4529219544433545e-08, 5.257375335077086e-08, 2.277174182552244e-08, 7.787563482963833e-09, 3.810706417084475e-08, 5.578457518140567e-08, 1.764318646735319e-08, 2.7303741489959066e-08, 4.321119817518593e-08, 3.386120184245556e-08, 1.1804297095352467e-08, 1.4402604664454088e-09, 4.556931543220344e-08, 1.979391583972756e-07, 2.0482854523606875e-08, 2.4715285817933363e-08, 3.2497158297672968e-09, 7.1338499552098256e-09, 2.0505046549601502e-09, 1.9696037156791135e-07, 3.27160478263977e-07, 1.836071206184897e-08, 2.0529330413410207e-07, 1.2203164700963498e-08, 1.0025573260463716e-08, 4.23057251452974e-08, 3.264254289092605e-08, 1.1649938791435943e-08, 1.7483595016187792e-08, 3.917000412911875e-08, 1.5012932408353663e-07, 1.1124445364885105e-08, 2.1625119472901133e-09, 1.1813487077461104e-08, 3.5011871091228386e-07, 2.383992381282951e-08, 2.35262991310492e-08, 6.32057828298116e-09, 6.606560631894354e-09, 4.429812516804077e-09, 4.123855035231827e-08, 1.140735435001261e-06, 2.983445668292006e-08, 5.732608769903891e-07, 1.5634961769706024e-08, 5.873475039663845e-09, 9.873272688309953e-08, 1.0872621913904368e-07, 1.2001947879980435e-08, 2.987921732255927e-08, 1.582104047770372e-08, 1.26480852458144e-08, 2.1261254090632065e-08, 3.0062068390179775e-09, 9.252465105191732e-08, 1.4810834727541078e-06, 8.980411791981169e-08, 1.1499075469600939e-07, 9.206624440594169e-08, 1.2970994589522888e-07, 1.6094757526730064e-08, 7.406309787683085e-09, 3.125675718251841e-08, 1.1406520883383564e-07, 1.4456976771271002e-07, 2.5043582354555838e-05, 3.0021574559668807e-08, 0.0023194400127977133, 1.866559102836618e-07, 1.9158046882239432e-07, 2.5220304067374855e-08, 5.088144661158367e-08, 2.4233042239529823e-08, 2.2281658118572523e-07, 1.3189106695676855e-08, 2.4054369163195588e-08, 1.4253836333466552e-08, 4.894182126236046e-08, 2.78596985481272e-07, 1.3211293037329597e-07, 8.092983421192912e-07, 2.4410624632764666e-08, 4.746099513397439e-09, 7.926353191578528e-07, 1.7936422125330864e-07, 5.3303470082255444e-08, 4.7981174589040165e-09, 2.7198488794510922e-08, 0.0030279571656137705, 4.772065835823014e-07, 7.48434700881262e-08, 2.565174206381471e-08, 5.537477250072698e-07, 6.603754343359469e-08, 4.992925823898986e-06, 1.7071130287149572e-08, 3.930088965375944e-08, 2.843758579729183e-07, 6.729963388352189e-06, 7.771438248482809e-08, 5.067537358627305e-07, 5.95139013626067e-08, 1.1396127064244865e-07, 4.765777816828631e-08, 2.9373149246225694e-08, 4.2871246108688865e-08, 0.0007942331722006202, 2.736381361501117e-07, 1.7377134042817488e-07, 5.473391979649023e-07, 1.0069580014260282e-07, 5.947384451587823e-08, 5.353260945639704e-08, 2.7977684169400163e-08, 2.6489649584959807e-08, 5.5216542449443295e-08, 4.43622418799805e-08, 1.833584093446916e-07, 4.6506482220820544e-08, 6.626768822570739e-08, 4.6637591566423e-08, 3.460758080109372e-08, 3.76528873857751e-07, 1.2879219184469548e-06, 1.7959922615773394e-07, 1.9682809124788037e-06, 1.1563926705093763e-07, 7.027608717180556e-08, 0.0005707766977138817, 7.664976209298402e-08, 5.4061249699088876e-08, 5.970343863737071e-08, 1.0491216784203061e-07, 2.1879090184029337e-07, 1.0396458094419359e-07, 9.578342741178858e-08, 6.51450520194885e-08, 1.2853967064074823e-06, 1.850454012242153e-08, 1.8045568594970973e-08, 2.1819997186867113e-07, 1.689089731371496e-05, 2.7413216585614464e-08, 8.557604758152593e-08, 1.1097939989213046e-07, 9.135361267453845e-08, 2.3974832856765715e-06, 3.782947999297903e-08, 3.725322272885023e-08, 1.420520590045271e-07, 0.008508247323334217, 6.404436447837725e-08, 8.207508273017083e-08, 0.0023111971095204353, 1.1480054240564641e-07, 9.666677414088554e-08, 1.3921393815508054e-07, 5.5060787929051e-08, 3.006356052992487e-07, 2.0217993323967676e-07, 1.0443960007933129e-07, 3.279770623976219e-07, 7.527223999659327e-08, 2.8994129024795257e-05, 8.069162618085102e-07, 1.7696688701107632e-06, 1.9930573671445018e-06, 3.7355608384359584e-08, 0.00866144523024559, 4.3858972276211716e-07, 3.7807214425811253e-07, 2.066585125248821e-07, 3.3866709259200434e-07, 5.833622935824678e-07, 3.215297397218819e-07, 2.3726346398689202e-07, 0.00036778906360268593, 1.9176252408215078e-07, 2.1441346120809612e-07, 7.399102628369292e-07, 0.044890161603689194, 1.209717055417059e-07, 8.747051793989158e-08, 8.877411517005385e-08, 6.556876996910432e-08, 5.304174237608095e-07, 0.21596631407737732, 1.1731445681562036e-07, 1.5341865378104558e-07, 1.8657260625332128e-07, 0.005521247163414955, 2.985985929626622e-07, 3.134384485292685e-07, 3.239007355659851e-07, 1.9519217175911763e-07, 1.1143500699972719e-07, 9.84604753284657e-07, 5.356208475859603e-06, 3.110808677320165e-07, 6.029913492966443e-07, 5.544314944927464e-07, 2.103824812138555e-07, 3.671456170195597e-07, 1.4795588185734232e-06, 9.826399605117331e-08, 2.3891601586001343e-07, 9.25103961435525e-07, 0.5624643564224243, 3.2838579500094056e-07, 0.051311835646629333, 9.391401363245677e-07, 7.763590588183433e-07, 5.741800350733683e-07, 6.680772344225261e-07, 6.575027100552688e-07, 7.01066312558396e-07, 8.260461754616699e-07, 7.216059572101585e-08, 1.6836794713981362e-07, 5.033522825215186e-07, 1.8203467107014148e-06, 0.026285627856850624, 2.272181660600836e-07, 4.316451304475777e-05, 7.321023076656274e-07, 5.956038080512371e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012363379821181297, 0.0, 0.0, 0.0, 0.0006411529611796141, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.8814359868410975e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.566502032801509e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.266279741685139e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.033103555731941e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.1744155168998986e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.06121214129962e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001408364187227562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016228148888330907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004534724168479443, 0.0, 0.0, 0.0, 0.0, 0.0, 1.448982220608741e-05, 0.0, 0.00012360673281364143, 0.0, 0.0, 0.0, 0.0002602757595013827, 0.0, 0.00048618725850246847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.342319804592989e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011282193736406043, 0.0, 0.0, 0.0, 0.0043570962734520435, 0.0, 0.0004185545549262315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010862438939511776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003780382394324988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003493838885333389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007491810247302055, 0.0, 0.0, 0.0, 0.010401413775980473, 0.0, 0.0, 0.00017209081852342933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00820368155837059, 0.0, 0.0, 0.0, 0.0, 0.009531673975288868, 0.0, 0.0038922601379454136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019571215379983187, 0.0, 0.0, 0.0, 0.005105113610625267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009678692440502346, 0.0, 0.0, 0.0, 0.00019924389198422432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9225003123283386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011548415059223771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028063240461051464, 0.0, 0.0, 0.0, 0.0]], "target": [0.9225003123283386]}, "loss": [2.9698338508605957, 0.08066756278276443], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [332]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 07:08:33.189753", "n_pass": [1, 1, 1], "n_token": 351, "loss": [0.5754275321960449, 0.08066756278276443], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", ",", "dest", "=", "'recursive'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", "help", "=", "'Files that frosted should skip over.'", ",", "dest", "=", "'skip'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "=", "'Run frosted against doctests'", ",", "dest", "=", "'run_doctests'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "'Specify error codes that should be ignored.'", ",", "dest", "=", "'ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 332, "repair_targets": [322], "repair_candidates": [6, 271, 286, 301, 346, 217, 231, 275, 293, 311, 322, 10, 21, 36, 57, 78, 99, 120, 141, 162, 205, 184, 219, 253, 262, 278, 315, 190, 196, 192, 198, 213, 291, 305, 334]}}
{"prediction": {"error_location": 0.5624643564224243, "repair_targets": [0.9225003123283386], "repair_candidates": [0.012363379821181297, 0.0006411529611796141, 3.8814359868410975e-05, 1.566502032801509e-05, 1.266279741685139e-05, 2.033103555731941e-05, 4.1744155168998986e-05, 5.06121214129962e-05, 0.0001408364187227562, 0.00016228148888330907, 0.004534724168479443, 1.448982220608741e-05, 0.00012360673281364143, 0.0002602757595013827, 0.00048618725850246847, 7.342319804592989e-06, 0.00011282193736406043, 0.0043570962734520435, 0.0004185545549262315, 0.0010862438939511776, 0.0003780382394324988, 0.0003493838885333389, 0.007491810247302055, 0.010401413775980473, 0.00017209081852342933, 0.00820368155837059, 0.009531673975288868, 0.0038922601379454136, 0.0019571215379983187, 0.005105113610625267, 0.0009678692440502346, 0.00019924389198422432, 0.9225003123283386, 0.0011548415059223771, 0.0028063240461051464], "target_probs": 0.9225003123283386}}


{"result": {"time": "2021-02-21 07:08:33.313933", "n_pass": [96, 2, 2], "n_token": 340, "loss": [0.5095011591911316, 0.11990281194448471], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", "help", "=", "'Files that frosted should skip over.'", ",", "dest", "=", "'skip'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "=", "'Run frosted against doctests'", ",", "dest", "=", "'run_doctests'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "'Specify error codes that should be ignored.'", ",", "dest", "=", "'ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 321, "repair_targets": [311], "repair_candidates": [6, 260, 275, 290, 335, 206, 220, 264, 282, 300, 311, 10, 21, 36, 46, 67, 88, 109, 130, 151, 194, 173, 208, 242, 251, 267, 304, 179, 185, 181, 187, 202, 280, 294, 323]}}
{"prediction": {"error_location": 0.6007952094078064, "repair_targets": [0.8870066404342651], "repair_candidates": [0.0063201142475008965, 0.00020152788783889264, 1.1867823559441604e-05, 8.271804290416185e-06, 7.03751675246167e-06, 4.543233899312327e-06, 5.565053015743615e-06, 9.103107913688291e-06, 2.4453214791719802e-05, 1.9303322915220633e-05, 0.0019947593100368977, 9.180005235975841e-07, 1.2426025023160037e-05, 4.148954394622706e-05, 6.983779894653708e-05, 9.154057920568448e-07, 3.760786057682708e-05, 0.004009698051959276, 0.00014986225869506598, 8.186978084268048e-05, 0.0001948707504197955, 4.319063009461388e-05, 0.008737158961594105, 0.02104606293141842, 0.00048186196363531053, 0.012582582421600819, 0.014874140731990337, 0.0038736092392355204, 0.011862878687679768, 0.006245559547096491, 0.011163752526044846, 0.0004572304605972022, 0.8870066404342651, 0.002032878575846553, 0.006386282853782177], "target_probs": 0.8870066404342651}}


{"result": {"time": "2021-02-21 07:08:33.415409", "n_pass": [97, 3, 3], "n_token": 329, "loss": [0.9701972007751465, 0.35043200850486755], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "=", "'Run frosted against doctests'", ",", "dest", "=", "'run_doctests'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "'Specify error codes that should be ignored.'", ",", "dest", "=", "'ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 310, "repair_targets": [300], "repair_candidates": [6, 249, 264, 279, 324, 195, 209, 253, 271, 289, 300, 10, 21, 36, 46, 56, 77, 98, 119, 140, 183, 162, 197, 231, 240, 256, 293, 168, 174, 170, 176, 191, 269, 283, 312]}}
{"prediction": {"error_location": 0.37900832295417786, "repair_targets": [0.7043837308883667], "repair_candidates": [0.048018619418144226, 0.002105320105329156, 0.00016612329636700451, 0.00010903289512498304, 0.00011095659283455461, 7.657754031242803e-05, 8.72885575518012e-05, 0.00012454749958124012, 0.0002904118737205863, 0.0010109796421602368, 0.01692808046936989, 0.00016129945288412273, 0.00020623333693947643, 0.0030570155940949917, 0.0031439363956451416, 2.478159876773134e-05, 0.0001057915433193557, 0.016786621883511543, 0.002239647787064314, 0.0005667802761308849, 0.007743293885141611, 0.000992617104202509, 0.012698601000010967, 0.05815448611974716, 0.007924562320113182, 0.021703217178583145, 0.03625912964344025, 0.0013299866113811731, 0.013468870893120766, 0.01462548691779375, 0.007409851066768169, 0.01170180831104517, 0.7043837308883667, 0.0007304352475330234, 0.005553859751671553], "target_probs": 0.7043837308883667}}


{"result": {"time": "2021-02-21 07:08:33.517235", "n_pass": [99, 4, 4], "n_token": 318, "loss": [0.41415125131607056, 0.33426398038864136], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "'Specify error codes that should be ignored.'", ",", "dest", "=", "'ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 299, "repair_targets": [289], "repair_candidates": [6, 238, 253, 268, 313, 184, 198, 242, 260, 278, 289, 10, 21, 36, 46, 56, 66, 87, 108, 129, 172, 151, 186, 220, 229, 245, 282, 157, 163, 159, 165, 180, 258, 272, 301]}}
{"prediction": {"error_location": 0.6609009504318237, "repair_targets": [0.7158647775650024], "repair_candidates": [0.01607421413064003, 0.0004296826955396682, 3.307203951408155e-05, 2.454030982335098e-05, 1.660664020164404e-05, 1.0906241186603438e-05, 1.2418823644111399e-05, 2.1072773961350322e-05, 5.8505342167336494e-05, 0.00023947440786287189, 0.004489850252866745, 5.2775740186916664e-05, 2.0999008484068327e-05, 0.00025358679704368114, 0.0003491137467790395, 1.2600876289070584e-05, 9.778277672012337e-06, 0.020054159685969353, 0.0003186471585649997, 0.002655426040291786, 0.00014131645730230957, 0.00014125258894637227, 0.017349988222122192, 0.05525531247258186, 0.0005977159598842263, 0.014380107633769512, 0.03604614734649658, 0.031128844246268272, 0.010250953957438469, 0.012365777045488358, 0.025066643953323364, 0.0010223061544820666, 0.7158647775650024, 0.006464474368840456, 0.028786977753043175], "target_probs": 0.7158647775650024}}


{"result": {"time": "2021-02-21 07:08:33.617643", "n_pass": [101, 5, 5], "n_token": 307, "loss": [0.39321771264076233, 0.670373797416687], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-vb'", ",", "'--verbose'", ",", "help", "=", "'Explicitly separate each section of data when displaying errors.'", ",", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 288, "repair_targets": [278], "repair_candidates": [6, 227, 242, 257, 302, 173, 187, 231, 249, 267, 278, 10, 21, 36, 46, 56, 66, 76, 97, 118, 161, 140, 175, 209, 218, 234, 271, 146, 152, 148, 154, 169, 247, 261, 290]}}
{"prediction": {"error_location": 0.6748816967010498, "repair_targets": [0.511517345905304], "repair_candidates": [0.020697515457868576, 0.00045281174243427813, 3.776071753236465e-05, 2.3656004486838356e-05, 2.7169146051164716e-05, 1.2869105376012158e-05, 1.1192245437996462e-05, 1.002999852062203e-06, 2.6026422347058542e-05, 6.845692405477166e-05, 0.008831224404275417, 1.5631103451596573e-05, 3.589865445974283e-05, 0.00024369657330680639, 0.0003948502126149833, 3.9706583265797235e-06, 5.67168572160881e-05, 0.041202619671821594, 0.0008143470622599125, 0.0023375970777124166, 0.0006575441802851856, 0.00014406221453100443, 0.015497527085244656, 0.06033845245838165, 0.0018598276656121016, 0.029151611030101776, 0.06689292192459106, 0.01413242518901825, 0.02060505375266075, 0.09664339572191238, 0.0647585466504097, 0.002744767814874649, 0.511517345905304, 0.004224023781716824, 0.035537444055080414], "target_probs": 0.511517345905304}}


{"result": {"time": "2021-02-21 07:08:33.718779", "n_pass": [104, 6, 6], "n_token": 296, "loss": [0.8610045313835144, 0.21941959857940674], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 277, "repair_targets": [267], "repair_candidates": [6, 216, 231, 246, 291, 162, 176, 220, 238, 256, 267, 10, 21, 36, 46, 56, 66, 76, 97, 107, 150, 129, 164, 198, 207, 223, 260, 135, 141, 137, 143, 158, 236, 250, 279]}}
{"prediction": {"error_location": 0.4227372705936432, "repair_targets": [0.8029847145080566], "repair_candidates": [0.04206956550478935, 0.0015664916718378663, 0.00010876676969928667, 8.139630517689511e-05, 7.039555930532515e-05, 3.8115929783089086e-05, 5.736981620430015e-05, 3.3643141250649933e-06, 0.003937945701181889, 0.0014942906564101577, 0.005571902263909578, 0.0001508992863819003, 2.1895508325542323e-05, 0.00046089873649179935, 0.0013667132006958127, 5.623563993140124e-06, 3.00084357149899e-05, 0.017149168998003006, 0.0015394603833556175, 0.00037616491317749023, 0.0008963594445958734, 0.0006569567485712469, 0.01646781526505947, 0.015431048348546028, 0.002153037814423442, 0.00823547225445509, 0.031222781166434288, 0.0005360416253097355, 0.005652208812534809, 0.02400115691125393, 0.004006586968898773, 0.004163756500929594, 0.8029847145080566, 0.002856716513633728, 0.004634784068912268], "target_probs": 0.8029847145080566}}


{"result": {"time": "2021-02-21 07:08:33.818413", "n_pass": [106, 7, 7], "n_token": 285, "loss": [0.9358373284339905, 0.2167535126209259], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "(", "sys", ".", "stdin", ".", "read", "(", ")", ",", "'<stdin>'", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 266, "repair_targets": [256], "repair_candidates": [6, 205, 220, 235, 280, 151, 165, 209, 227, 245, 256, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 187, 196, 212, 249, 124, 130, 126, 132, 147, 225, 239, 268]}}
{"prediction": {"error_location": 0.39225733280181885, "repair_targets": [0.8051283955574036], "repair_candidates": [0.05120321363210678, 0.0005927266902290285, 3.35567892761901e-05, 3.5223736631451175e-05, 2.1269703211146407e-05, 9.368040082335938e-06, 2.6535226425039582e-05, 5.278367893879476e-07, 0.001987927360460162, 0.00690781744197011, 0.002471192041411996, 2.627307185321115e-05, 7.640045623702463e-06, 0.00020477174257393926, 0.0003466479538474232, 8.735534606785222e-07, 1.9142213204759173e-05, 0.016737869009375572, 0.0008968610200099647, 0.00144345429725945, 0.0002395951742073521, 0.0004094222094863653, 0.010868373326957226, 0.010187502019107342, 0.001656611100770533, 0.019411923363804817, 0.021332329139113426, 0.005675332620739937, 0.010401984676718712, 0.007040166761726141, 0.013240515254437923, 0.0036832259502261877, 0.8051283955574036, 0.0010093934834003448, 0.006742433179169893], "target_probs": 0.8051283955574036}}


{"result": {"time": "2021-02-21 07:08:33.919821", "n_pass": [113, 8, 8], "n_token": 274, "loss": [0.5416566729545593, 0.35513657331466675], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "==", "[", "'-'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 255, "repair_targets": [245], "repair_candidates": [6, 194, 209, 224, 269, 151, 165, 198, 216, 234, 245, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 176, 185, 201, 238, 124, 130, 126, 132, 147, 214, 228, 257]}}
{"prediction": {"error_location": 0.5817835927009583, "repair_targets": [0.7010776996612549], "repair_candidates": [0.0366554893553257, 0.0011636853450909257, 0.0001438098115613684, 8.502193668391556e-05, 7.673185609746724e-05, 3.965204450651072e-05, 8.99931910680607e-05, 1.8413492171021062e-06, 0.008312888443470001, 0.008162997663021088, 0.003627115162089467, 6.415161624317989e-05, 3.6023360735271126e-05, 0.0005405527190305293, 0.0008162025478668511, 6.1139885474403854e-06, 5.759844498243183e-05, 0.01653343439102173, 0.0026823878288269043, 0.004780332092195749, 0.0011849695583805442, 0.0007573635084554553, 0.015570973977446556, 0.020111292600631714, 0.005017519928514957, 0.014513279311358929, 0.037811025977134705, 0.00048214351409114897, 0.006951712537556887, 0.05185079202055931, 0.0432915985584259, 0.003181680105626583, 0.7010776996612549, 0.0067004309967160225, 0.007621452212333679], "target_probs": 0.7010776996612549}}


{"result": {"time": "2021-02-21 07:08:34.026510", "n_pass": [189, 9, 9], "n_token": 268, "loss": [1.0558414459228516, 0.3979390263557434], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 249, "repair_targets": [239], "repair_candidates": [6, 188, 203, 218, 263, 151, 165, 192, 210, 228, 239, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 170, 179, 195, 232, 124, 130, 126, 132, 147, 208, 222, 251]}}
{"prediction": {"error_location": 0.34789958596229553, "repair_targets": [0.6717029809951782], "repair_candidates": [0.03954591602087021, 0.0026466944254934788, 0.00018659055058378726, 0.0001505185355199501, 0.0002355481992708519, 0.00010515275789657608, 0.00020033217151649296, 4.8718311518314295e-06, 0.02402311936020851, 0.02132992632687092, 0.011974354274570942, 0.0002079754340229556, 8.726769738132134e-05, 0.001067803124897182, 0.0017764185322448611, 2.908435999415815e-05, 0.000181102441274561, 0.01995738595724106, 0.005401778034865856, 0.0008225282654166222, 0.0031344068702310324, 0.0028777928091585636, 0.04552878811955452, 0.048791445791721344, 0.004915253724902868, 0.017042003571987152, 0.030766384676098824, 0.0038850612472742796, 0.009902461431920528, 0.009125212207436562, 0.008282117545604706, 0.008152347058057785, 0.6717029809951782, 0.0037950528785586357, 0.0021643179934471846], "target_probs": 0.6717029809951782}}


{"result": {"time": "2021-02-21 07:08:34.123200", "n_pass": [191, 10, 10], "n_token": 262, "loss": [0.8382671475410461, 0.3134264349937439], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 243, "repair_targets": [233], "repair_candidates": [6, 182, 197, 212, 257, 151, 165, 186, 204, 222, 233, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 170, 173, 189, 226, 124, 130, 126, 132, 147, 202, 216, 245]}}
{"prediction": {"error_location": 0.4324592649936676, "repair_targets": [0.7309381365776062], "repair_candidates": [0.05103173851966858, 0.0014791591092944145, 9.604747174307704e-05, 7.719037239439785e-05, 4.1954070184146985e-05, 2.656313154147938e-05, 7.089550490491092e-05, 2.207809984611231e-06, 0.007149325683712959, 0.015810072422027588, 0.00640841294080019, 0.00014994828961789608, 3.855190516333096e-05, 0.001143780304118991, 0.0013509748969227076, 7.4896388468914665e-06, 3.912559986929409e-05, 0.011129484511911869, 0.0024224903900176287, 0.0021358898375183344, 0.021965133026242256, 0.0005220633465796709, 0.032059334218502045, 0.04310368001461029, 0.0006129084504209459, 0.021001482382416725, 0.026469042524695396, 0.0017402510857209563, 0.007805217523127794, 0.0043396963737905025, 0.0045473771169781685, 0.0019855014979839325, 0.7309381365776062, 0.0010617675725370646, 0.0012371253687888384], "target_probs": 0.7309381365776062}}


{"result": {"time": "2021-02-21 07:08:34.219107", "n_pass": [195, 11, 11], "n_token": 256, "loss": [0.7419447898864746, 0.4093417525291443], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "raise", "SystemExit", "(", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 237, "repair_targets": [227], "repair_candidates": [6, 182, 191, 206, 251, 151, 165, 186, 198, 216, 227, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 170, 173, 189, 220, 124, 130, 126, 132, 147, 196, 210, 239]}}
{"prediction": {"error_location": 0.47618693113327026, "repair_targets": [0.6640872359275818], "repair_candidates": [0.04046913981437683, 0.0015069936634972692, 0.00010299963469151407, 0.00010160343663301319, 6.461492739617825e-05, 2.1049880160717294e-05, 6.247428245842457e-05, 1.6278896737276227e-06, 0.0056471507996320724, 0.02359454333782196, 0.005806532222777605, 6.496384594356641e-05, 1.8855895177694038e-05, 0.0005901733529753983, 0.0009683863609097898, 4.24465497417259e-06, 2.3208503989735618e-05, 0.00936620682477951, 0.002333305077627301, 0.0018287651473656297, 0.021503260359168053, 0.0005782482912763953, 0.035526931285858154, 0.02717450261116028, 0.0006383702275343239, 0.04670337587594986, 0.03558197617530823, 0.003492112737149, 0.02249637059867382, 0.027622705325484276, 0.006258701905608177, 0.0009600456687621772, 0.6640872359275818, 0.006367210764437914, 0.008432001806795597], "target_probs": 0.6640872359275818}}


{"result": {"time": "2021-02-21 07:08:34.318028", "n_pass": [205, 12, 12], "n_token": 250, "loss": [0.8110615015029907, 0.3365994691848755], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", "'frosted {0}'", ".", "format", "(", "__version__", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 237, "repair_targets": [227], "repair_candidates": [6, 182, 191, 206, 245, 151, 165, 186, 198, 216, 227, 10, 21, 36, 46, 56, 66, 76, 97, 107, 139, 118, 153, 170, 173, 189, 220, 124, 130, 126, 132, 147, 196, 210, 239]}}
{"prediction": {"error_location": 0.4443860948085785, "repair_targets": [0.7141948342323303], "repair_candidates": [0.03390652686357498, 0.0014872177271172404, 0.00010212450433755293, 0.00011925954459002241, 5.462177432491444e-05, 2.128557753167115e-05, 6.139429024187848e-05, 1.5646631936760969e-06, 0.005263197235763073, 0.022602472454309464, 0.00534066604450345, 6.085101995267905e-05, 1.8186754459748045e-05, 0.0005704832728952169, 0.0009507896029390395, 4.562403319141595e-06, 2.3261944079422392e-05, 0.008113996125757694, 0.0021836794912815094, 0.001401136047206819, 0.019816355779767036, 0.0005719791515730321, 0.028497621417045593, 0.023669736459851265, 0.0006282165995799005, 0.04338112846016884, 0.029164234176278114, 0.0028213108889758587, 0.01664537377655506, 0.02361391857266426, 0.005524108652025461, 0.000981134595349431, 0.7141948342323303, 0.005310745909810066, 0.002892008749768138], "target_probs": 0.7141948342323303}}


{"result": {"time": "2021-02-21 07:08:35.529549", "n_pass": [229, 25, 13], "n_token": 245, "loss": [0.9363964796066284, 0.6479389667510986], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "itemsview", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 232, "repair_targets": [222], "repair_candidates": [6, 177, 186, 201, 240, 146, 160, 181, 193, 211, 222, 10, 21, 36, 46, 56, 66, 76, 97, 107, 134, 113, 148, 165, 168, 184, 215, 119, 125, 121, 127, 142, 191, 205, 234]}}
{"prediction": {"error_location": 0.3920380771160126, "repair_targets": [0.5231228470802307], "repair_candidates": [0.08857875317335129, 0.0027105966582894325, 0.00017558659601490945, 8.272234117612243e-05, 0.00011145817552460358, 3.8554084312636405e-05, 0.00010655951336957514, 4.011379132862203e-06, 0.00871999841183424, 0.03762708604335785, 0.01249453891068697, 5.570249413722195e-05, 4.061941217514686e-05, 0.0007768870564177632, 0.0014598765410482883, 5.284153758111643e-06, 6.408554327208549e-05, 0.018873531371355057, 0.003957973327487707, 0.0015447798650711775, 0.030766058713197708, 0.0012413886142894626, 0.042199090123176575, 0.02425650879740715, 0.0013361346209421754, 0.05738958343863487, 0.050231434404850006, 0.00193388934712857, 0.03958909958600998, 0.012192707508802414, 0.013004583306610584, 0.001748151844367385, 0.5231228470802307, 0.017978543415665627, 0.005581355653703213], "target_probs": 0.5231228470802307}}


{"result": {"time": "2021-02-21 07:08:37.120394", "n_pass": [372, 42, 14], "n_token": 242, "loss": [0.6109344959259033, 0.6141189336776733], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "(", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 229, "repair_targets": [219], "repair_candidates": [6, 174, 183, 198, 237, 143, 157, 178, 190, 208, 219, 10, 21, 36, 46, 56, 66, 76, 97, 107, 131, 113, 145, 162, 165, 181, 212, 119, 125, 121, 127, 139, 188, 202, 231]}}
{"prediction": {"error_location": 0.5428433418273926, "repair_targets": [0.5411174297332764], "repair_candidates": [0.04322194308042526, 0.0014054838102310896, 7.998385990504175e-05, 5.940812479821034e-05, 5.95415331190452e-05, 2.2399864974431694e-05, 8.26524556032382e-05, 2.693088390515186e-06, 0.005115065257996321, 0.02096644416451454, 0.007431195583194494, 0.00024100320297293365, 8.77934944583103e-05, 0.0004041969950776547, 0.0005196207785047591, 4.861526576860342e-06, 3.7965910451021045e-05, 0.011558528058230877, 0.001745903049595654, 0.0009543185587972403, 0.020397061482071877, 0.0016813467955216765, 0.051175445318222046, 0.06091364845633507, 0.002154017798602581, 0.056166812777519226, 0.04346977546811104, 0.0015383342979475856, 0.08076860010623932, 0.01475619152188301, 0.01873774453997612, 0.0015699294162914157, 0.5411174297332764, 0.009950888343155384, 0.001601819065399468], "target_probs": 0.5411174297332764}}


{"result": {"time": "2021-02-21 07:08:37.216099", "n_pass": [373, 43, 15], "n_token": 239, "loss": [0.548918604850769, 0.6373644471168518], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", "(", ")", ")", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 226, "repair_targets": [216], "repair_candidates": [6, 171, 180, 195, 234, 140, 154, 175, 187, 205, 216, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 142, 159, 162, 178, 209, 119, 125, 121, 127, 136, 185, 199, 228]}}
{"prediction": {"error_location": 0.5775740742683411, "repair_targets": [0.5286839604377747], "repair_candidates": [0.04059475660324097, 0.0016639881068840623, 0.00010962496162392199, 9.174834121949971e-05, 8.603166497778147e-05, 2.905569999711588e-05, 8.56610422488302e-05, 5.333125955075957e-06, 0.011265872977674007, 0.0356874093413353, 0.006999497301876545, 0.00040833817911334336, 0.00012692014570347965, 0.0005015608621761203, 4.7494122554780915e-05, 7.323428872041404e-05, 2.7051994038629346e-05, 0.010090391151607037, 0.001340538146905601, 0.0019808108918368816, 0.007862169295549393, 0.0007479906198568642, 0.055099982768297195, 0.08112207800149918, 0.0017188498750329018, 0.07172343134880066, 0.04085914045572281, 0.0008893703343346715, 0.06587826460599899, 0.013020709156990051, 0.013426306657493114, 0.0009085208876058459, 0.5286839604377747, 0.005680162459611893, 0.0011636739363893867], "target_probs": 0.5286839604377747}}


{"result": {"time": "2021-02-21 07:08:37.312109", "n_pass": [375, 44, 16], "n_token": 236, "loss": [0.9225093126296997, 0.6744709014892578], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", ",", "directly_being_checked", "=", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 223, "repair_targets": [213], "repair_candidates": [6, 168, 177, 192, 231, 137, 151, 172, 184, 202, 213, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 206, 119, 125, 121, 127, 133, 182, 196, 225]}}
{"prediction": {"error_location": 0.3975202739238739, "repair_targets": [0.5094258785247803], "repair_candidates": [0.04857124760746956, 0.00525024626404047, 0.0005633796099573374, 0.0004625500296242535, 0.0009513960685580969, 0.0011254538549110293, 0.0010441646445542574, 8.313353464473039e-05, 0.06920157372951508, 0.05157880485057831, 0.010410488583147526, 0.000408952560974285, 0.0002491319610271603, 0.000836618710309267, 0.0016508554108440876, 0.015499649569392204, 8.1251586379949e-05, 0.008710134774446487, 0.0023294449783861637, 0.002702847821637988, 0.008245803415775299, 0.0005354191525839269, 0.08879629522562027, 0.054779186844825745, 0.0011823001550510526, 0.04313012957572937, 0.030944036319851875, 0.0007265966269187629, 0.01966262422502041, 0.008314582519233227, 0.00898252334445715, 0.0011683598859235644, 0.5094258785247803, 0.0019523613154888153, 0.0004426187661010772], "target_probs": 0.5094258785247803}}


{"result": {"time": "2021-02-21 07:08:38.336781", "n_pass": [398, 55, 17], "n_token": 233, "loss": [0.9407706260681152, 0.6848447322845459], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", ")", ",", "**", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 220, "repair_targets": [210], "repair_candidates": [6, 168, 177, 192, 228, 137, 151, 172, 184, 199, 210, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 203, 119, 125, 121, 127, 133, 182, 196, 222]}}
{"prediction": {"error_location": 0.39032691717147827, "repair_targets": [0.5041685104370117], "repair_candidates": [0.054423391819000244, 0.006973732728511095, 0.0007721121655777097, 0.0007486615795642138, 0.0014862073585391045, 0.0018524305196478963, 0.0015509581426158547, 0.00011874626943608746, 0.07617396116256714, 0.06163308024406433, 0.007617988623678684, 0.0004127410938963294, 0.00016622673138044775, 0.0011669981759041548, 0.0017613593954592943, 0.019181791692972183, 5.43537680641748e-05, 0.00726568466052413, 0.0027962957974523306, 0.0023549876641482115, 0.006150615867227316, 0.0005713660502806306, 0.0993458703160286, 0.032299768179655075, 0.0004758447175845504, 0.04096575453877449, 0.010814201086759567, 0.0008572567021474242, 0.03411329910159111, 5.018902083975263e-05, 0.019055863842368126, 0.0007927505066618323, 0.5041685104370117, 0.00038524935371242464, 0.001441729487851262], "target_probs": 0.5041685104370117}}


{"result": {"time": "2021-02-21 07:08:38.432669", "n_pass": [400, 56, 18], "n_token": 230, "loss": [0.7171595096588135, 0.3806217908859253], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 217, "repair_targets": [207], "repair_candidates": [6, 168, 177, 192, 225, 137, 151, 172, 184, 199, 207, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 200, 119, 125, 121, 127, 133, 182, 196, 219]}}
{"prediction": {"error_location": 0.48813682794570923, "repair_targets": [0.6834363341331482], "repair_candidates": [0.04043116420507431, 0.004005724098533392, 0.000483016949146986, 0.0004330255906097591, 0.0008792357402853668, 0.001032838597893715, 0.000862815068103373, 7.344083132920787e-05, 0.04020598903298378, 0.03958189859986305, 0.0048047699965536594, 0.0003093233972322196, 0.00012098973820684478, 0.0007988556171767414, 0.001479166792705655, 0.013726732693612576, 4.436347444425337e-05, 0.0058502210304141045, 0.0019504112424328923, 0.002366888104006648, 0.008399453945457935, 0.0006707286229357123, 0.05986703932285309, 0.019506461918354034, 0.0007800927269272506, 0.020091025158762932, 0.00997849926352501, 0.0009207978146150708, 0.024103868752717972, 0.00010950762953143567, 0.006373346783220768, 0.003856303170323372, 0.6834363341331482, 0.0004263926821295172, 0.0020393298473209143], "target_probs": 0.6834363341331482}}


{"result": {"time": "2021-02-21 07:08:38.529535", "n_pass": [402, 57, 19], "n_token": 227, "loss": [0.735299289226532, 0.5320351123809814], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'WARNING: Unable to parse file {0} due to {1}'", ".", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 214, "repair_targets": [204], "repair_candidates": [6, 168, 177, 192, 222, 137, 151, 172, 184, 199, 204, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 200, 119, 125, 121, 127, 133, 182, 196, 216]}}
{"prediction": {"error_location": 0.47936195135116577, "repair_targets": [0.5874083042144775], "repair_candidates": [0.05184895917773247, 0.005179711151868105, 0.0006174898589961231, 0.0005648319493047893, 0.0009944859193637967, 0.0010731054935604334, 0.0010263151489198208, 9.410105849383399e-05, 0.0476779043674469, 0.05819840729236603, 0.005280129611492157, 0.00016215845244005322, 0.00011748181714210659, 0.0008177494164556265, 0.0017642040038481355, 0.015464764088392258, 6.788751488784328e-05, 0.0070580849424004555, 0.002146461745724082, 0.003083806252107024, 0.010182633064687252, 0.0006365614826790988, 0.07208569347858429, 0.026265688240528107, 0.0006571358535438776, 0.023309268057346344, 0.010166657157242298, 0.0015265604015439749, 0.04337470233440399, 0.00023060159583110362, 0.008886813186109066, 0.004690088331699371, 0.5874083042144775, 0.0009010719368234277, 0.006440100725740194], "target_probs": 0.5874083042144775}}


{"result": {"time": "2021-02-21 07:08:38.715268", "n_pass": [405, 59, 20], "n_token": 224, "loss": [0.5885358452796936, 0.524406909942627], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 211, "repair_targets": [204], "repair_candidates": [6, 168, 177, 192, 219, 137, 151, 172, 184, 199, 204, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 200, 119, 125, 121, 127, 133, 182, 196, 213]}}
{"prediction": {"error_location": 0.5551395416259766, "repair_targets": [0.5919063091278076], "repair_candidates": [0.0483236126601696, 0.00467538321390748, 0.000542607915122062, 0.0005159353604540229, 0.0007765849586576223, 0.0007538901991210878, 0.0008304328075610101, 5.901464828639291e-05, 0.03263548016548157, 0.04007810726761818, 0.004234259948134422, 7.404128700727597e-05, 9.140803740592673e-05, 0.0007307874038815498, 0.0018182049971073866, 0.007982170209288597, 6.075723285903223e-05, 0.007320905104279518, 0.0015023719752207398, 0.0026354677975177765, 0.008304201066493988, 0.000427776831202209, 0.09735162556171417, 0.049818288534879684, 0.000412106019211933, 0.018825635313987732, 0.006607727147638798, 0.001001410884782672, 0.05008028820157051, 0.00014051598554942757, 0.012057884596288204, 0.0037000386510044336, 0.5919063091278076, 0.000243801943724975, 0.0034810046199709177], "target_probs": 0.5919063091278076}}


{"result": {"time": "2021-02-21 07:08:38.811713", "n_pass": [408, 60, 21], "n_token": 221, "loss": [0.6355160474777222, 0.3269558250904083], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">", "0", ")", ")"]}}
{"position": {"error_location": 211, "repair_targets": [204], "repair_candidates": [6, 168, 177, 192, 216, 137, 151, 172, 184, 199, 204, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 200, 119, 125, 121, 127, 133, 182, 196, 213]}}
{"prediction": {"error_location": 0.5296620726585388, "repair_targets": [0.7211155891418457], "repair_candidates": [0.03521979600191116, 0.0035149056930094957, 0.0004025544039905071, 0.0003881727170664817, 0.0005901566473767161, 0.0005826418055221438, 0.0006500309682451189, 4.6956160076661035e-05, 0.02665293961763382, 0.03033372573554516, 0.0033441318664699793, 6.770720210624859e-05, 6.346747977659106e-05, 0.0005484799039550126, 0.001636415719985962, 0.006747714709490538, 3.9056460082065314e-05, 0.00469867093488574, 0.001127369119785726, 0.0014602374285459518, 0.006073282100260258, 0.0003945161297451705, 0.05222165957093239, 0.03286493197083473, 0.0003506450157146901, 0.010091755539178848, 0.006094366777688265, 0.0009419558336958289, 0.035750217735767365, 0.00011751657439162955, 0.009925215505063534, 0.0040215663611888885, 0.7211155891418457, 0.0016144737601280212, 0.00030714456806890666], "target_probs": 0.7211155891418457}}


{"result": {"time": "2021-02-21 07:08:38.906061", "n_pass": [410, 61, 22], "n_token": 218, "loss": [0.6531866788864136, 0.23190636932849884], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 211, "repair_targets": [204], "repair_candidates": [6, 168, 177, 192, 216, 137, 151, 172, 184, 199, 204, 10, 21, 36, 46, 56, 66, 76, 97, 107, 128, 113, 139, 156, 159, 175, 200, 119, 125, 121, 127, 133, 182, 196, 213]}}
{"prediction": {"error_location": 0.5203849077224731, "repair_targets": [0.7930203676223755], "repair_candidates": [0.025638677179813385, 0.002720781834796071, 0.0003319132956676185, 0.0003153718716930598, 0.00048096379032358527, 0.0004904214292764664, 0.0005489265313372016, 3.718760854098946e-05, 0.021021097898483276, 0.02412998117506504, 0.002514752559363842, 4.545024785329588e-05, 4.926792826154269e-05, 0.0004316243575885892, 0.001222497783601284, 0.004952889867126942, 3.034278779523447e-05, 0.0036524010356515646, 0.0009151196572929621, 0.0011786475079134107, 0.004819629713892937, 0.000295038364129141, 0.03958485648036003, 0.025935154408216476, 0.00029974570497870445, 0.0078628184273839, 0.004968641325831413, 0.0008889849414117634, 0.01721891388297081, 0.00012247143604326993, 0.008445321582257748, 0.0032649508211761713, 0.7930203676223755, 0.0015072111273184419, 0.0010576385539025068], "target_probs": 0.7930203676223755}}


{"result": {"time": "2021-02-21 07:08:39.000949", "n_pass": [411, 62, 23], "n_token": 216, "loss": [0.6022838354110718, 0.17211316525936127], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 209, "repair_targets": [202], "repair_candidates": [4, 166, 175, 190, 214, 135, 149, 170, 182, 197, 202, 8, 19, 34, 44, 54, 64, 74, 95, 105, 126, 111, 137, 154, 157, 173, 198, 117, 123, 119, 125, 131, 180, 194, 211]}}
{"prediction": {"error_location": 0.5475596785545349, "repair_targets": [0.8418838977813721], "repair_candidates": [0.015158001333475113, 0.002540278248488903, 0.00038035790203139186, 0.00039204192580655217, 0.0007096972549334168, 0.0009182553621940315, 0.0012519489973783493, 5.958116889814846e-05, 0.026130622252821922, 0.017952507361769676, 0.0013473365688696504, 2.9070708478684537e-05, 4.6191998990252614e-05, 0.00033977458951994777, 0.0001089890138246119, 0.01712099090218544, 2.983065314765554e-05, 0.0022922977805137634, 0.0003313066263217479, 0.000893651507794857, 0.0021033601369708776, 0.00015277147758752108, 0.025531115010380745, 0.022487524896860123, 0.00014638114953413606, 0.005738012958317995, 0.0020332944113761187, 0.00033926687319763005, 0.006832529325038195, 2.650757960509509e-05, 0.003341855015605688, 0.0009431426879018545, 0.8418838977813721, 0.0001544971310067922, 0.00025318286498077214], "target_probs": 0.8418838977813721}}


{"result": {"time": "2021-02-21 07:08:39.281844", "n_pass": [415, 65, 24], "n_token": 214, "loss": [0.7903982996940613, 0.4065399765968323], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 207, "repair_targets": [200], "repair_candidates": [4, 164, 173, 188, 212, 133, 147, 168, 180, 195, 200, 6, 17, 32, 42, 52, 62, 72, 93, 103, 124, 109, 135, 152, 155, 171, 196, 115, 121, 117, 123, 129, 178, 192, 209]}}
{"prediction": {"error_location": 0.4536641240119934, "repair_targets": [0.6659504771232605], "repair_candidates": [0.07470745593309402, 0.003296401584520936, 0.0010123015381395817, 0.0006890720687806606, 0.0012701532104983926, 0.00109755783341825, 0.0011678824666887522, 0.000133332607219927, 0.06596099585294724, 0.05642907693982124, 0.003434478770941496, 4.7002755309222266e-05, 9.928992221830413e-05, 0.0009608383406884968, 0.00030840400722809136, 0.028485402464866638, 0.0002221645409008488, 0.004936262499541044, 0.0012374857906252146, 0.003490330884233117, 0.006596397142857313, 0.0005522057763300836, 0.029233762994408607, 0.018785934895277023, 0.00047967550926841795, 0.011606957763433456, 0.003970900550484657, 0.00037174488534219563, 0.009367089718580246, 5.287827298161574e-05, 0.0026510024908930063, 0.0012466467451304197, 0.6659504771232605, 5.447107832878828e-05, 9.395321103511378e-05], "target_probs": 0.6659504771232605}}


{"result": {"time": "2021-02-21 07:08:40.845661", "n_pass": [436, 82, 25], "n_token": 211, "loss": [0.6992793083190918, 0.35851117968559265], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", ",", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 204, "repair_targets": [197], "repair_candidates": [4, 161, 170, 185, 209, 130, 144, 165, 177, 192, 197, 6, 17, 32, 42, 49, 59, 69, 90, 100, 121, 106, 132, 149, 152, 168, 193, 112, 118, 114, 120, 126, 175, 189, 206]}}
{"prediction": {"error_location": 0.49694332480430603, "repair_targets": [0.6987158060073853], "repair_candidates": [0.07225579768419266, 0.0029935003258287907, 0.0008429804584011436, 0.0005558995762839913, 0.0009216576581820846, 0.000615995901171118, 0.0006311885663308203, 7.659348921151832e-05, 0.05024857074022293, 0.06418215483427048, 0.0035005772951990366, 2.5986730179283768e-05, 0.00012784922728314996, 0.0009193940786644816, 0.00015847351460251957, 0.010652151890099049, 0.0001354853593511507, 0.0034276654478162527, 0.001245187479071319, 0.0030954801477491856, 0.008192704059183598, 0.00046542167547158897, 0.022222530096769333, 0.012929333373904228, 0.00039587775245308876, 0.019345561042428017, 0.007463252637535334, 0.0005064908182248473, 0.00884877797216177, 8.210035593947396e-05, 0.0022385241463780403, 0.001790967071428895, 0.6987158060073853, 0.00010225645382888615, 8.776002505328506e-05], "target_probs": 0.6987158060073853}}


{"result": {"time": "2021-02-21 07:08:40.940214", "n_pass": [437, 83, 26], "n_token": 208, "loss": [0.6224496364593506, 0.2741914987564087], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "(", "'-d'", ",", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 201, "repair_targets": [194], "repair_candidates": [4, 158, 167, 182, 206, 127, 141, 162, 174, 189, 194, 6, 17, 32, 42, 46, 56, 66, 87, 97, 118, 103, 129, 146, 149, 165, 190, 109, 115, 111, 117, 123, 172, 186, 203]}}
{"prediction": {"error_location": 0.536628246307373, "repair_targets": [0.760186493396759], "repair_candidates": [0.0655389055609703, 0.00285241543315351, 0.0007819301099516451, 0.00047506895498372614, 0.001249185879714787, 9.757059160619974e-05, 0.000645304040517658, 9.181797213386744e-05, 0.041789568960666656, 0.027339767664670944, 0.004937152378261089, 4.468172483029775e-05, 0.0013071226421743631, 0.0008704329375177622, 0.00014336436288431287, 0.014379466883838177, 5.826150663779117e-05, 0.003763725282624364, 0.0021197127643972635, 0.0017785354284569621, 0.009525422006845474, 0.0007508726557716727, 0.008925996720790863, 0.0072435843758285046, 0.0005906219594180584, 0.029247518628835678, 0.008153378032147884, 0.0002596108242869377, 0.0030291264411062002, 2.1000501874368638e-05, 0.0005034775822423398, 0.001082019880414009, 0.760186493396759, 0.0001489611022407189, 6.784218567190692e-05], "target_probs": 0.760186493396759}}


{"result": {"time": "2021-02-21 07:08:41.035839", "n_pass": [439, 84, 27], "n_token": 205, "loss": [0.9894026517868042, 0.5250176191329956], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ".", "add_argument", "(", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 198, "repair_targets": [191], "repair_candidates": [4, 155, 164, 179, 203, 124, 138, 159, 171, 186, 191, 6, 17, 32, 42, 46, 53, 63, 84, 94, 115, 100, 126, 143, 146, 162, 187, 106, 112, 108, 114, 120, 169, 183, 200]}}
{"prediction": {"error_location": 0.37179866433143616, "repair_targets": [0.5915449261665344], "repair_candidates": [0.08439639210700989, 0.006186104845255613, 0.0017401971854269505, 0.0031609456054866314, 0.004678559023886919, 0.02043336071074009, 0.005378069821745157, 0.0004057538462802768, 0.0664646103978157, 0.022837989032268524, 0.007644799537956715, 3.131282574031502e-05, 0.0003745062567759305, 0.0013539957581087947, 0.0003191161958966404, 0.12538306415081024, 0.00015215481107588857, 0.004388534463942051, 0.0019025872461497784, 0.001423187437467277, 0.005895556882023811, 0.0007787885260768235, 0.006682691629976034, 0.003648467594757676, 0.000800585316028446, 0.012540209107100964, 0.013626529835164547, 0.00039714231388643384, 0.002381257014349103, 2.6458070351509377e-05, 0.0009065730846486986, 0.001547986175864935, 0.5915449261665344, 0.00037099586916156113, 0.00019664395949803293], "target_probs": 0.5915449261665344}}


{"result": {"time": "2021-02-21 07:08:41.404930", "n_pass": [445, 88, 28], "n_token": 202, "loss": [1.2303987741470337, 0.5180126428604126], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", "'-di'", ",", "'--dont-ignore'", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 195, "repair_targets": [188], "repair_candidates": [4, 152, 161, 176, 200, 121, 135, 156, 168, 183, 188, 6, 17, 32, 42, 46, 53, 63, 81, 91, 112, 97, 123, 140, 143, 159, 184, 103, 109, 105, 111, 117, 166, 180, 197]}}
{"prediction": {"error_location": 0.2921760678291321, "repair_targets": [0.5957032442092896], "repair_candidates": [0.11342005431652069, 0.0036632511764764786, 0.0009275501943193376, 0.0022540499921888113, 0.0030088399071246386, 0.007516080979257822, 0.0035348176024854183, 0.0008208838989958167, 0.06373442709445953, 0.009632333181798458, 0.012909273616969585, 4.709093627752736e-05, 0.00047193962382152677, 0.0021262462250888348, 0.0005170995136722922, 0.09858126193284988, 0.000172147381817922, 0.007869411259889603, 0.0022070256527513266, 0.0017763808136805892, 0.008313899859786034, 0.0010486521059647202, 0.008990013971924782, 0.002732585882768035, 0.0006003659800626338, 0.012176410295069218, 0.026011183857917786, 0.0005613638204522431, 0.0033910241909325123, 8.060647815000266e-05, 0.0015933309914544225, 0.0026958261150866747, 0.5957032442092896, 0.0005800512153655291, 0.00033127525239251554], "target_probs": 0.5957032442092896}}


{"result": {"time": "2021-02-21 07:08:41.498347", "n_pass": [446, 89, 29], "n_token": 199, "loss": [0.6874477863311768, 0.4065861701965332], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", ",", "action", "=", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 192, "repair_targets": [185], "repair_candidates": [4, 149, 158, 173, 197, 118, 132, 153, 165, 180, 185, 6, 17, 32, 42, 46, 53, 63, 78, 88, 109, 94, 120, 137, 140, 156, 181, 100, 106, 102, 108, 114, 163, 177, 194]}}
{"prediction": {"error_location": 0.5028578042984009, "repair_targets": [0.6659197211265564], "repair_candidates": [0.04097538813948631, 0.0023945800494402647, 0.0007279082201421261, 0.0018438862171024084, 0.002105192979797721, 0.016018621623516083, 0.003050212748348713, 0.0001883623335743323, 0.0390189029276371, 0.0066683064214885235, 0.013266842812299728, 5.361060902941972e-05, 0.00036152222310192883, 0.001342153176665306, 0.0004427420790307224, 0.16081005334854126, 0.00016498056356795132, 0.004703887272626162, 0.0012251449516043067, 0.0005424542468972504, 0.004524470306932926, 0.000996468123048544, 0.0059430706314742565, 0.0020862012170255184, 0.0004330984374973923, 0.007788516115397215, 0.010446909815073013, 0.0002629135560709983, 0.0017972055356949568, 2.7674070224747993e-05, 0.0007590133463963866, 0.0025617799255996943, 0.6659197211265564, 0.0003337511152494699, 0.00021451034990604967], "target_probs": 0.6659197211265564}}


{"result": {"time": "2021-02-21 07:08:42.052113", "n_pass": [453, 95, 30], "n_token": 196, "loss": [1.3408277034759521, 0.4215908348560333], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", "action", "=", "'append'", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 189, "repair_targets": [182], "repair_candidates": [4, 146, 155, 170, 194, 115, 129, 150, 162, 177, 182, 6, 17, 32, 42, 46, 53, 63, 78, 85, 106, 91, 117, 134, 137, 153, 178, 97, 103, 99, 105, 111, 160, 174, 191]}}
{"prediction": {"error_location": 0.26162901520729065, "repair_targets": [0.656002402305603], "repair_candidates": [0.04326886683702469, 0.0020623141899704933, 0.0005506696761585772, 0.0012726272689178586, 0.0014501179102808237, 0.01544317789375782, 0.0018540631281211972, 0.00014131849457044154, 0.06913014501333237, 0.006272591650485992, 0.00728848110884428, 0.00017763080541044474, 0.0002730886044446379, 0.001571637112647295, 0.0004716600233223289, 0.13570861518383026, 0.00016381464956793934, 0.005057681351900101, 0.000763023504987359, 0.0002682572521734983, 0.00409329729154706, 0.0004600608954206109, 0.005855655297636986, 0.001083250273950398, 0.0002656262367963791, 0.007876857183873653, 0.02451443113386631, 0.0002735201269388199, 0.0020340096671134233, 2.328565278730821e-05, 0.0005990283098071814, 0.0015662513906136155, 0.656002402305603, 0.0019813268445432186, 0.0001812517730286345], "target_probs": 0.656002402305603}}


{"result": {"time": "2021-02-21 07:08:45.733970", "n_pass": [524, 135, 31], "n_token": 193, "loss": [1.1457127332687378, 0.16191406548023224], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "#NEWLINE#", "#INDENT#", "check", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 186, "repair_targets": [179], "repair_candidates": [4, 143, 152, 167, 191, 112, 126, 147, 159, 174, 179, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 131, 134, 150, 175, 94, 100, 96, 102, 108, 157, 171, 188]}}
{"prediction": {"error_location": 0.3179972469806671, "repair_targets": [0.85051429271698], "repair_candidates": [0.03765050321817398, 0.0016998705687001348, 0.0003187714610248804, 0.00044781650649383664, 0.000705801066942513, 0.005702749360352755, 0.0004155930655542761, 2.6632538720150478e-05, 0.029929595068097115, 0.002681685844436288, 0.0037199256476014853, 8.04290539235808e-05, 0.00020477100042626262, 0.001074545318260789, 0.0016099362401291728, 0.028485778719186783, 5.605794649454765e-05, 0.0029810904525220394, 0.0007378498557955027, 0.00010833661508513615, 0.0028459522873163223, 0.00022834687842987478, 0.0037648307625204325, 0.0011874412884935737, 0.00013682864664588124, 0.005353490822017193, 0.012134370394051075, 0.00010763756290543824, 0.0029331662226468325, 5.627654536510818e-05, 0.00036463947617448866, 0.0007155565544962883, 0.85051429271698, 0.0009546569781377912, 6.472264794865623e-05], "target_probs": 0.85051429271698}}


{"result": {"time": "2021-02-21 07:08:46.652908", "n_pass": [543, 145, 32], "n_token": 190, "loss": [1.2033686637878418, 0.12199503928422928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "get", "(", "'recursive'", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 183, "repair_targets": [176], "repair_candidates": [4, 140, 149, 164, 188, 112, 126, 144, 156, 171, 176, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 128, 131, 147, 172, 94, 100, 96, 102, 108, 154, 168, 185]}}
{"prediction": {"error_location": 0.3001812696456909, "repair_targets": [0.8851527571678162], "repair_candidates": [0.0209589172154665, 0.0017652191454544663, 0.00029969727620482445, 0.0003520375466905534, 0.00052942632464692, 0.0021752421744167805, 0.0003051146341022104, 1.685667666606605e-05, 0.018930435180664062, 0.0022555403411388397, 0.0022449102252721786, 4.0872266254154965e-05, 0.0001113805192289874, 0.000839164131321013, 0.0017286533256992698, 0.012687609530985355, 4.9289428716292605e-05, 0.0033393194898962975, 0.0006497204303741455, 0.0023470635060220957, 0.00020834254974033684, 0.00018318623187951744, 0.005877532996237278, 0.002811023499816656, 0.00021623988868668675, 0.006987495813518763, 0.00844483356922865, 0.0002489207254257053, 0.015793442726135254, 5.1301063649589196e-05, 0.0014047700678929687, 0.0006368904141709208, 0.8851527571678162, 0.000307268783217296, 4.9446392949903384e-05], "target_probs": 0.8851527571678162}}


{"result": {"time": "2021-02-21 07:08:46.746802", "n_pass": [546, 146, 33], "n_token": 187, "loss": [1.0229181051254272, 0.20002050697803497], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 180, "repair_targets": [173], "repair_candidates": [4, 137, 146, 161, 185, 112, 126, 141, 153, 168, 173, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 128, 131, 144, 169, 94, 100, 96, 102, 108, 151, 165, 182]}}
{"prediction": {"error_location": 0.3595442473888397, "repair_targets": [0.8187139630317688], "repair_candidates": [0.050560034811496735, 0.0037484061904251575, 0.00045388666330836713, 0.0004956366028636694, 0.0006663276581093669, 0.002699762349948287, 0.0004346015630289912, 5.450311073218472e-05, 0.025935452431440353, 0.00423327786847949, 0.0050517539493739605, 7.080169598339126e-05, 0.000545976625289768, 0.0013003438943997025, 0.0050178831443190575, 0.02055390551686287, 0.0002741405332926661, 0.0043473499827086926, 0.002506608609110117, 0.0027851115446537733, 0.000397823634557426, 0.0025417767465114594, 0.007963395677506924, 0.0032676756381988525, 0.0003002531884703785, 0.008472169749438763, 0.00595269026234746, 0.00020681947353295982, 0.018220720812678337, 5.4438125516753644e-05, 0.001136454869993031, 0.0006965671200305223, 0.8187139630317688, 0.00025168570573441684, 8.772927685640752e-05], "target_probs": 0.8187139630317688}}


{"result": {"time": "2021-02-21 07:08:46.839872", "n_pass": [547, 147, 34], "n_token": 184, "loss": [1.0857696533203125, 0.18150337040424347], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 177, "repair_targets": [170], "repair_candidates": [4, 134, 143, 158, 182, 112, 126, 138, 150, 165, 170, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 128, 131, 141, 166, 94, 100, 96, 102, 108, 148, 162, 179]}}
{"prediction": {"error_location": 0.33764180541038513, "repair_targets": [0.834015429019928], "repair_candidates": [0.06506557017564774, 0.0030274700839072466, 0.0003805150045081973, 0.0004204248543828726, 0.0005619848961941898, 0.0018603862263262272, 0.00038217302062548697, 6.249983562156558e-05, 0.02049495279788971, 0.003965127281844616, 0.00490908045321703, 7.152130274334922e-05, 0.0006558017921634018, 0.0010610700119286776, 0.005214313976466656, 0.015315658412873745, 0.0002838746877387166, 0.004241121932864189, 0.002603386528789997, 0.0031210652086883783, 0.000512818165589124, 0.002377711934968829, 0.009504592046141624, 0.002705844584852457, 0.00026461409288458526, 0.00436145905405283, 0.004390021786093712, 0.0003433515375945717, 0.006009525153785944, 5.54023717995733e-05, 0.0008391801966354251, 0.000532024831045419, 0.834015429019928, 0.0002807351411320269, 0.00010934919555438682], "target_probs": 0.834015429019928}}


{"result": {"time": "2021-02-21 07:08:47.025737", "n_pass": [554, 149, 35], "n_token": 181, "loss": [1.4618626832962036, 0.2804259657859802], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "try", ":", "#NEWLINE#", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 174, "repair_targets": [167], "repair_candidates": [4, 134, 143, 155, 179, 112, 126, 138, 150, 162, 167, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 128, 131, 141, 163, 94, 100, 96, 102, 108, 148, 159, 176]}}
{"prediction": {"error_location": 0.23180405795574188, "repair_targets": [0.7554618716239929], "repair_candidates": [0.11178772896528244, 0.003854413516819477, 0.00044544096454046667, 0.0005070291226729751, 0.0005949816550128162, 0.0021904483437538147, 0.00041943491669371724, 8.067951421253383e-05, 0.026094166561961174, 0.004994804970920086, 0.0058560846373438835, 9.052936366060749e-05, 0.000798900262452662, 0.0013559055514633656, 0.007803900167346001, 0.02047457918524742, 0.00035443459637463093, 0.006701384671032429, 0.0030300356447696686, 0.005326262675225735, 0.0006433193921111524, 0.002822682959958911, 0.014311394654214382, 0.0019074052106589079, 0.00040942849591374397, 0.00757024297490716, 0.005704257171601057, 0.0010714849922806025, 0.005193463526666164, 8.337752660736442e-05, 0.001019646879285574, 0.0007415359141305089, 0.7554618716239929, 0.00018180716142524034, 0.00011686389916576445], "target_probs": 0.7554618716239929}}


{"result": {"time": "2021-02-21 07:08:47.119877", "n_pass": [555, 150, 36], "n_token": 178, "loss": [1.2348488569259644, 0.3399851322174072], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "'--with-doctests'", ",", "help", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 171, "repair_targets": [164], "repair_candidates": [4, 134, 143, 152, 176, 112, 126, 138, 150, 159, 164, 6, 17, 32, 42, 46, 53, 63, 75, 82, 103, 88, 114, 128, 131, 141, 160, 94, 100, 96, 102, 108, 148, 156, 173]}}
{"prediction": {"error_location": 0.2908787429332733, "repair_targets": [0.7117809057235718], "repair_candidates": [0.1748003512620926, 0.0030070168431848288, 0.0003537221346050501, 0.00037356477696448565, 0.000470494560431689, 0.0016655151266604662, 0.0003426777839194983, 7.052664295770228e-05, 0.017781497910618782, 0.00408903555944562, 0.004817463923245668, 9.272736497223377e-05, 0.0007457906031049788, 0.000990436994470656, 0.005116959102451801, 0.015140648931264877, 0.0003753958153538406, 0.005641480442136526, 0.0022611666936427355, 0.004415638279169798, 0.0007007821695879102, 0.00209356308914721, 0.017567075788974762, 0.0020180109422653913, 0.0006194048910401762, 0.010729802772402763, 0.00441227899864316, 0.0005593626410700381, 0.005636296700686216, 5.413130566012114e-05, 0.00048232648987323046, 0.0006283759721554816, 0.7117809057235718, 6.566857337020338e-05, 9.987883095163852e-05], "target_probs": 0.7117809057235718}}


{"result": {"time": "2021-02-21 07:08:48.950166", "n_pass": [589, 170, 37], "n_token": 175, "loss": [1.0781056880950928, 0.3416205644607544], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-i'", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 168, "repair_targets": [161], "repair_candidates": [4, 131, 140, 149, 173, 109, 123, 135, 147, 156, 161, 6, 17, 32, 42, 46, 50, 60, 72, 79, 100, 85, 111, 125, 128, 138, 157, 91, 97, 93, 99, 105, 145, 153, 170]}}
{"prediction": {"error_location": 0.3402394652366638, "repair_targets": [0.7106177806854248], "repair_candidates": [0.14441046118736267, 0.0032293505501002073, 0.0003256765194237232, 0.00038566903094761074, 0.0005157653358764946, 0.0022376396227627993, 0.0003521654289215803, 0.000107832885987591, 0.019845712929964066, 0.0033208930399268866, 0.006119627505540848, 5.456024155137129e-05, 0.0004663814906962216, 0.001300761359743774, 0.012962685897946358, 0.025608422234654427, 0.000626163266133517, 0.0075992620550096035, 0.0024141427129507065, 0.0064846850000321865, 0.0008388660498894751, 0.002599930390715599, 0.014644664712250233, 0.0017778781475499272, 0.0012115460122004151, 0.014134855940937996, 0.008178478106856346, 0.0011800515931099653, 0.004906698130071163, 5.1169234211556613e-05, 0.00046722000115551054, 0.0008297890890389681, 0.7106177806854248, 8.95806952030398e-05, 0.00010354090773034841], "target_probs": 0.7106177806854248}}


{"result": {"time": "2021-02-21 07:08:49.042827", "n_pass": [591, 171, 38], "n_token": 172, "loss": [1.2548408508300781, 0.4227428734302521], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "#NEWLINE#", "parser", ".", ",", "'--ignore'", ",", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 165, "repair_targets": [158], "repair_candidates": [4, 128, 137, 146, 170, 106, 120, 132, 144, 153, 158, 6, 17, 32, 42, 46, 50, 57, 69, 76, 97, 82, 108, 122, 125, 135, 154, 88, 94, 90, 96, 102, 142, 150, 167]}}
{"prediction": {"error_location": 0.28512123227119446, "repair_targets": [0.6552470922470093], "repair_candidates": [0.19126813113689423, 0.0022509365808218718, 0.0002352733281441033, 0.00038136111106723547, 0.00047717016423121095, 0.003879310330376029, 0.0031012380495667458, 7.666065357625484e-05, 0.020854253321886063, 0.0035024480894207954, 0.004881029017269611, 3.131694029434584e-05, 0.00036116791306994855, 0.0008995296666398644, 0.011097908951342106, 0.02537555806338787, 0.0005363279487937689, 0.00900193490087986, 0.001823893398977816, 0.009689965285360813, 0.0007010817062109709, 0.0031055682338774204, 0.017212333157658577, 0.0017743956996127963, 0.0012404171284288168, 0.01347099058330059, 0.01120099425315857, 0.0003569852269720286, 0.0037081281188875437, 2.6473966499906965e-05, 0.000792629667557776, 0.0009811553172767162, 0.6552470922470093, 0.00029256095876917243, 0.00016371390665881336], "target_probs": 0.6552470922470093}}


{"result": {"time": "2021-02-21 07:08:49.135885", "n_pass": [592, 172, 39], "n_token": 169, "loss": [1.3267334699630737, 0.4896533489227295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "#NEWLINE#", "parser", ".", "help", "=", "parser", ",", "help", "=", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 162, "repair_targets": [155], "repair_candidates": [4, 125, 134, 143, 167, 103, 117, 129, 141, 150, 155, 6, 17, 32, 42, 46, 50, 54, 66, 73, 94, 79, 105, 119, 122, 132, 151, 85, 91, 87, 93, 99, 139, 147, 164]}}
{"prediction": {"error_location": 0.2653425633907318, "repair_targets": [0.6128388047218323], "repair_candidates": [0.1763196438550949, 0.0040834336541593075, 0.000623949570581317, 0.0013197617372497916, 0.0010065992828458548, 0.0028517618775367737, 0.0011164817260578275, 0.00011171724327141419, 0.03361926227807999, 0.0038926752749830484, 0.00645340234041214, 8.026044088182971e-05, 0.0005033190827816725, 0.0014312568819150329, 0.02297455631196499, 0.03869210183620453, 0.001093392726033926, 0.010098835453391075, 0.0026239363942295313, 0.014561244286596775, 0.00038797943852841854, 0.0029991453047841787, 0.01867743395268917, 0.0020641523879021406, 0.0009809525217860937, 0.014037052169442177, 0.014782462269067764, 0.0006635453901253641, 0.0056894696317613125, 8.107404573820531e-05, 0.001193706993944943, 0.0015716501511633396, 0.6128388047218323, 0.00034177539055235684, 0.00023323242203332484], "target_probs": 0.6128388047218323}}


{"result": {"time": "2021-02-21 07:08:49.229730", "n_pass": [594, 173, 40], "n_token": 166, "loss": [1.3159998655319214, 0.3484863042831421], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "#NEWLINE#", "parser", ".", "help", "=", "parser", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 159, "repair_targets": [152], "repair_candidates": [4, 122, 131, 140, 164, 100, 114, 126, 138, 147, 152, 6, 17, 32, 42, 46, 50, 54, 63, 70, 91, 76, 102, 116, 119, 129, 148, 82, 88, 84, 90, 96, 136, 144, 161]}}
{"prediction": {"error_location": 0.26820603013038635, "repair_targets": [0.7057555913925171], "repair_candidates": [0.1403873860836029, 0.0032367450185120106, 0.0004799704474862665, 0.001154721830971539, 0.0009170723496936262, 0.001596446381881833, 0.00096227036556229, 0.00014108764298725873, 0.023095879703760147, 0.00398055836558342, 0.006488849874585867, 6.234777538338676e-05, 0.000507623772136867, 0.001401811372488737, 0.007819253951311111, 0.03846030682325363, 0.0012590610422194004, 0.007235173601657152, 0.0024005745071917772, 0.005811956245452166, 0.00031580604263581336, 0.0014365914976224303, 0.01223780494183302, 0.0025354721583426, 0.0006819515256211162, 0.010086999274790287, 0.012060928158462048, 0.0005413963808678091, 0.0030116138514131308, 2.090756424877327e-05, 0.0018250150606036186, 0.0014803219819441438, 0.7057555913925171, 0.0003600391501095146, 0.00025048659881576896], "target_probs": 0.7057555913925171}}


{"result": {"time": "2021-02-21 07:08:49.777405", "n_pass": [603, 179, 41], "n_token": 163, "loss": [1.5184378623962402, 0.6031559109687805], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", ":", "#NEWLINE#", "#INDENT#", "warnings", "=", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Quickly check the correctness of your Python scripts.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'One file or a list of Python source files to check the syntax of.'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'-r'", ",", "'--recursive'", "'Recursively look for Python files to check'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "parser", ".", "add_argument", "#NEWLINE#", "parser", ".", "help", "=", "parser", "'Specify error codes that should not be ignored in any case.'", ",", "dest", "=", "'not_ignore_frosted_errors'", ",", ")", "#NEWLINE#", "parser", "dest", "=", "'verbose'", "'store_true'", ")", "#NEWLINE#", "parser", ".", "=", ")", ")", "#NEWLINE#", "arguments", "=", "dict", "key", ",", "value", ")", "for", "(", "key", ",", "value", "parser", ".", "parse_args", ")", "if", "value", ")", ")", "#NEWLINE#", "file_names", "=", "arguments", ".", "pop", "(", "'files'", ",", "[", "]", ")", "#NEWLINE#", "if", "(", "file_names", "**", "arguments", ")", "if", "arguments", ".", "#INDENT#", "warnings", "=", "check_recursive", "(", "file_names", ",", "**", "arguments", "#INDENT#", "warnings", "=", "0", "#NEWLINE#", "for", "file_path", "in", "file_names", "#INDENT#", "warnings", "+=", "check_path", "(", "file_path", "len", "(", "file_names", "arguments", ")", "#NEWLINE#", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "format", "(", "file_name", ",", "file_path", ")", "(", "warnings", ">"]}}
{"position": {"error_location": 156, "repair_targets": [149], "repair_candidates": [4, 119, 128, 137, 161, 97, 111, 123, 135, 144, 149, 6, 17, 32, 42, 46, 50, 54, 63, 70, 88, 76, 99, 113, 116, 126, 145, 79, 85, 81, 87, 93, 133, 141, 158]}}
{"prediction": {"error_location": 0.21905378997325897, "repair_targets": [0.5470823645591736], "repair_candidates": [0.2903733551502228, 0.003819866105914116, 0.0005042798002250493, 0.001718107028864324, 0.0010305001633241773, 0.0011017597280442715, 0.0006375058437697589, 8.371888543479145e-05, 0.030272236093878746, 0.006118962075561285, 0.008898462168872356, 6.151040724944323e-05, 0.0034604130778461695, 0.001516867894679308, 0.0039129918441176414, 0.03310534358024597, 0.00030718246125616133, 0.00890442542731762, 0.003998173866420984, 0.0036848431918770075, 0.0002299790648976341, 0.0026128131430596113, 0.01573980040848255, 0.0035922410897910595, 0.0004908672417514026, 0.010912587866187096, 0.009513214230537415, 0.0003500423626974225, 0.002546832198277116, 2.8501384804258123e-05, 0.0013109486317262053, 0.0011175406398251653, 0.5470823645591736, 0.0007117855711840093, 0.00024995391140691936], "target_probs": 0.5470823645591736}}




Minimal simplified tokens:

[')', ':', '#NEWLINE#', '#INDENT#', 'warnings', '=', 'parser', '=', 'argparse', '.', 'ArgumentParser', '(', 'description', '=', "'Quickly check the correctness of your Python scripts.'", ')', '#NEWLINE#', 'parser', '.', 'add_argument', '(', "'files'", ',', 'nargs', '=', "'+'", ',', 'help', '=', "'One file or a list of Python source files to check the syntax of.'", ')', '#NEWLINE#', 'parser', '.', 'add_argument', '(', "'-r'", ',', "'--recursive'", "'Recursively look for Python files to check'", ')', '#NEWLINE#', 'parser', '.', 'add_argument', '(', 'parser', '.', 'add_argument', '#NEWLINE#', 'parser', '.', 'help', '=', 'parser', "'Specify error codes that should not be ignored in any case.'", ',', 'dest', '=', "'not_ignore_frosted_errors'", ',', ')', '#NEWLINE#', 'parser', 'dest', '=', "'verbose'", "'store_true'", ')', '#NEWLINE#', 'parser', '.', '=', ')', ')', '#NEWLINE#', 'arguments', '=', 'dict', 'key', ',', 'value', ')', 'for', '(', 'key', ',', 'value', 'parser', '.', 'parse_args', ')', 'if', 'value', ')', ')', '#NEWLINE#', 'file_names', '=', 'arguments', '.', 'pop', '(', "'files'", ',', '[', ']', ')', '#NEWLINE#', 'if', '(', 'file_names', '**', 'arguments', ')', 'if', 'arguments', '.', '#INDENT#', 'warnings', '=', 'check_recursive', '(', 'file_names', ',', '**', 'arguments', '#INDENT#', 'warnings', '=', '0', '#NEWLINE#', 'for', 'file_path', 'in', 'file_names', '#INDENT#', 'warnings', '+=', 'check_path', '(', 'file_path', 'len', '(', 'file_names', 'arguments', ')', '#NEWLINE#', 'as', 'e', ':', '#NEWLINE#', '#INDENT#', 'print', 'format', '(', 'file_name', ',', 'file_path', ')', '(', 'warnings', '>']
