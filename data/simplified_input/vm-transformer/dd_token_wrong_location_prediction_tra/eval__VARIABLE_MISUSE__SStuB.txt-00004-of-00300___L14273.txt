
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'120'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'300'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"], "error_location": [328], "repair_targets": [119], "repair_candidates": [119, 9, 328, 330, 260, 339, 2, 322, 333, 320, 337], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "tylertreat/BigQuery-Python/bigquery/tests/test_client.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00004-of-00300", "js_count": 14273, "results": {"model": "transformer", "prob": {"loc": [[0.00036116925184614956, 3.624638589272422e-09, 1.767943791364246e-09, 6.36751415483694e-11, 1.046674552585003e-10, 1.173130342868589e-10, 7.781399830042446e-11, 4.343868320599853e-10, 5.7272693532173236e-11, 4.750557169863612e-10, 2.7707269811827473e-10, 8.314682831134235e-10, 1.887083961316094e-10, 5.1138267231909396e-11, 3.672982057389973e-11, 2.336361382138108e-10, 5.828255933426618e-11, 1.5040331202698098e-09, 6.491678028464065e-11, 7.486625902553001e-11, 2.997973813645416e-10, 5.927415502871014e-11, 2.4821635857819047e-09, 5.745968284509573e-11, 5.978908340642519e-11, 4.54826211415682e-11, 6.504841110199777e-11, 4.3074151884203715e-11, 1.5314749468586797e-10, 7.11174522050051e-11, 5.5515144564699526e-11, 2.7727889428952324e-10, 8.185131045168603e-11, 2.496169271282156e-09, 5.43086339788168e-11, 6.022515125492234e-11, 2.2945306765720375e-10, 1.1448886283460524e-10, 1.0223606405901364e-09, 6.344952341308385e-11, 9.794862143586158e-11, 5.378793591082065e-11, 5.6755496136151606e-11, 9.980545556675935e-11, 2.2969214030776897e-10, 7.665305890025564e-11, 5.824221660510887e-11, 3.8995040529954395e-10, 1.1055487081357285e-10, 4.924240570858274e-09, 1.1842858638200227e-10, 1.057752774258347e-10, 4.3814796235608355e-10, 1.0086045887369721e-10, 3.402447212863535e-10, 1.0553808521551744e-10, 8.415305258191452e-11, 4.923071672546797e-11, 4.105620357575113e-11, 5.808501596371585e-11, 3.288870009665601e-10, 6.353514242496416e-11, 4.948584250707988e-11, 2.651658892460773e-10, 1.0442915976405232e-10, 4.840918776949366e-10, 6.99682811688973e-11, 5.7486758409108774e-11, 1.8228286935428883e-10, 7.680863584047515e-11, 1.4656991176309475e-09, 5.6511802182246385e-11, 6.941292679529809e-11, 2.5788257640435575e-10, 1.6835530192160775e-10, 1.8674062296497596e-09, 1.295741153262142e-10, 1.3877377025295345e-10, 5.470496278192627e-10, 1.1096915747410563e-10, 8.923703442853537e-10, 4.832128031040384e-10, 1.7703082055842145e-10, 1.24609017548849e-10, 6.314001543827885e-10, 1.6141821213011553e-10, 5.665799385212722e-09, 1.143587793905887e-10, 1.2078371636192742e-10, 3.583625063363627e-10, 1.350272255118412e-10, 4.210625181855221e-09, 1.39942238353008e-10, 1.7662575568788697e-10, 1.4114531765585525e-10, 9.135929512904539e-11, 1.0937070693550766e-10, 5.450801476847289e-10, 2.137171689620132e-10, 1.8858029027235546e-10, 7.030355742010386e-10, 2.729274861668074e-10, 5.977998651651717e-10, 2.126843007266288e-10, 3.3746300198700396e-10, 9.45520106654385e-10, 3.12724957041155e-10, 8.79271433440465e-10, 3.5950648014093645e-10, 6.473098168591207e-10, 4.97098806562235e-10, 4.0464445683063843e-10, 4.3002756910937023e-10, 5.707587735770403e-10, 6.189587176130829e-10, 4.6210876791796807e-10, 5.030293959151777e-10, 6.22439322306434e-10, 7.508910715436912e-10, 8.934796902337894e-09, 1.3519688701890686e-09, 1.006954519766623e-08, 2.4143822496824896e-09, 2.1051107523817336e-09, 5.227569488397421e-09, 1.9883401591869188e-09, 1.4324024633083354e-08, 4.550757548571482e-09, 3.179996044266886e-09, 1.8397244838652682e-09, 4.761535610242618e-09, 1.1258308729722444e-09, 4.490147276214884e-08, 1.4291406946753682e-09, 3.521170244269456e-09, 2.54840393232314e-09, 1.0124214799844822e-09, 9.598786210318622e-10, 3.4850364816207957e-09, 1.782292424756804e-09, 1.0463817590178337e-09, 4.924381791227006e-09, 1.1215957052002068e-09, 8.123317130070973e-09, 9.339466977564825e-10, 1.948384120709079e-09, 1.5700771793802915e-09, 5.250440082704699e-10, 5.434379057867034e-10, 3.0595608269123886e-09, 1.4983437823801182e-09, 1.2009805372414917e-09, 5.924278845270692e-09, 1.1124597909528688e-09, 1.8508783394821648e-09, 9.50439948965709e-10, 1.5735217573364935e-09, 9.41584143987484e-10, 3.578782270530212e-10, 3.3339914162766604e-10, 1.2633188939403794e-09, 7.092079701287446e-10, 5.203671937792365e-10, 3.861499564550286e-09, 4.920623908333255e-10, 7.338105678655893e-09, 3.108696411402434e-09, 1.9882455681852207e-09, 6.345124980988714e-10, 3.592982800171285e-09, 5.459541707608651e-10, 2.2852373326998077e-09, 6.46728504083427e-10, 3.264539749636697e-10, 2.2265340682281476e-09, 4.2696116087093117e-10, 2.8523954309633837e-09, 1.970749341495548e-09, 4.3695455587133836e-10, 1.9919832450199237e-10, 2.4525108610617963e-09, 2.2177086556052217e-10, 3.148985783241187e-08, 3.793062530732527e-10, 3.808656445780656e-10, 2.794605102884873e-10, 1.3800408038555645e-10, 2.1590053356224104e-10, 7.529232792791163e-10, 1.8175620730698228e-10, 1.3051044966960745e-10, 1.2990328812634289e-09, 1.293146284497837e-10, 1.3426181055820052e-08, 4.388965579860127e-10, 4.356322524934342e-10, 2.4059229608575095e-10, 1.1109325959157701e-10, 2.9522773115076006e-10, 5.504775524300953e-10, 3.136299275841026e-10, 2.3082964706322429e-10, 1.6952046710816404e-10, 1.1317467102367473e-10, 1.0308699727179516e-10, 7.707764287934182e-11, 4.6409331239116725e-11, 7.362477294492464e-11, 6.389185291943988e-10, 9.687471658192948e-11, 6.752864933901037e-11, 7.373091026607881e-10, 2.076124827610215e-10, 5.955647086608451e-10, 5.969405525441118e-11, 5.4545635369551704e-11, 5.535139568912939e-10, 2.9686525460093094e-10, 1.3941054977095746e-09, 9.27665444461212e-10, 5.675008379890656e-11, 5.091024476988615e-11, 5.109091483213035e-10, 2.8558999609629154e-10, 3.8306238181462504e-09, 1.2366736801272538e-10, 7.525323419965702e-11, 7.500075560606945e-11, 2.961395018097335e-11, 1.3024535616690258e-10, 6.615880621119175e-10, 1.3458319181314238e-10, 8.32108826287481e-11, 7.635833632058109e-10, 3.086309263711229e-10, 1.4330575615062457e-09, 1.646107000707886e-10, 8.657382449817064e-11, 8.007839530366212e-11, 5.831680277568196e-11, 5.307762562800633e-10, 4.0254291566732547e-10, 2.1548131334814258e-10, 1.7163358234650872e-10, 1.7423004705641176e-10, 3.7595199176010397e-10, 1.8088365527635375e-10, 1.5944850995097681e-10, 7.643815441715773e-11, 7.492257925179047e-10, 5.71029945550805e-10, 1.6560899873674373e-10, 1.5085227511590915e-10, 2.725018648230826e-11, 3.890329169919937e-10, 3.9008057894918124e-10, 1.9323689870454075e-10, 1.5730648728062846e-10, 1.0995134663849271e-10, 2.036306817609912e-10, 2.9187909866834616e-09, 1.1866561067108705e-09, 5.014663351232684e-09, 4.043296808475816e-10, 2.482636041190034e-10, 6.934865459662376e-10, 7.44725114909528e-10, 1.7497686854994754e-08, 5.888216025873305e-10, 3.9570385856890766e-10, 2.4688202593381448e-09, 6.185114087564614e-10, 1.7116356110236097e-09, 6.401834062863543e-10, 5.648833623084215e-10, 1.1599589067046168e-09, 1.1475608241440227e-09, 6.239226912896356e-10, 4.767285455287151e-10, 3.621036526180177e-10, 2.1478374634398278e-10, 1.6192956975302764e-09, 4.699030053956221e-09, 3.4914435786959075e-09, 4.866377301127045e-10, 3.0510566295660624e-10, 6.873892011149962e-10, 3.5033889678182106e-10, 9.208949336425576e-08, 1.3547050148332573e-09, 8.984402111167356e-10, 4.475809653459173e-11, 1.938271348977949e-10, 3.658717062648975e-08, 7.498920373549822e-10, 6.553986797719347e-10, 3.821208349741312e-10, 1.1134653615796353e-10, 3.3553629319449385e-10, 3.1961526758550463e-09, 4.922641738680511e-10, 3.8748224073792414e-10, 3.4635458945331266e-09, 7.073828744985633e-10, 9.19741722782419e-08, 8.440788623609308e-10, 1.1832771429354239e-09, 5.916639400638246e-11, 1.6070099695397744e-09, 1.4672410841853889e-08, 1.2517268332956633e-09, 1.3728924663780617e-09, 1.3955289146494465e-09, 2.16810458475436e-10, 9.775101839082367e-10, 1.3161617351542532e-09, 1.8597994255742378e-09, 1.5758013782729563e-09, 4.2994641180627013e-10, 2.7858042539463668e-09, 9.73462110920309e-09, 1.0438281350388934e-09, 2.9436492354761867e-08, 2.7284680070849276e-10, 9.147524404617968e-11, 2.679295119101255e-10, 9.522617139268164e-10, 1.7972077159811306e-08, 0.05404331907629967, 3.36902372666259e-09, 0.9454792737960815, 5.459200647095486e-09, 2.8772628724027527e-09, 1.190964216135626e-09, 8.02928612486653e-10, 1.3603832504927027e-09, 3.269135362415909e-08, 3.2612339850857097e-07, 7.947379643269414e-09, 0.00011530685878824443, 7.963250503451036e-09]], "pointer": [[0.0, 0.0, 2.1182027865052078e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003766873851418495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9981861710548401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0013086398830637336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.062966384779429e-05, 0.0, 1.271743826691818e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 4.845852430435116e-08, 0.0, 8.447070598549544e-08, 0.0, 0.0, 2.3770348889229354e-07, 0.0, 0.0, 0.0, 2.292153340022196e-06, 0.0, 0.00011371346045052633, 0.0]], "target": [0.9981861710548401]}, "loss": [2.9179694652557373, 0.0018154758727177978], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [330]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 05:59:41.445641", "n_pass": [1, 1, 1], "n_token": 341, "loss": [0.05606341361999512, 0.0018154758727177978], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'120'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'300'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 330, "repair_targets": [119], "repair_candidates": [119, 9, 328, 330, 260, 339, 2, 322, 333, 320, 337]}}
{"prediction": {"error_location": 0.9454792737960815, "repair_targets": [0.9981861710548401], "repair_candidates": [2.1182027865052078e-07, 0.0003766873851418495, 0.9981861710548401, 0.0013086398830637336, 1.062966384779429e-05, 1.271743826691818e-06, 4.845852430435116e-08, 8.447070598549544e-08, 2.3770348889229354e-07, 2.292153340022196e-06, 0.00011371346045052633], "target_probs": 0.9981861710548401}}


{"result": {"time": "2021-02-21 05:59:41.531516", "n_pass": [10, 2, 2], "n_token": 256, "loss": [0.0075585562735795975, 5.0426799134584144e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 245, "repair_targets": [119], "repair_candidates": [119, 9, 243, 245, 175, 254, 2, 237, 248, 235, 252]}}
{"prediction": {"error_location": 0.9924699664115906, "repair_targets": [0.99994957447052], "repair_candidates": [1.717510542675882e-07, 5.204251920076786e-06, 0.99994957447052, 2.3738155505270697e-05, 1.8159305170684092e-07, 1.6899415641091764e-05, 1.330561438805944e-09, 5.830205207502104e-09, 3.645543600327983e-08, 3.7375214034796045e-09, 4.14012811233988e-06], "target_probs": 0.99994957447052}}


{"result": {"time": "2021-02-21 05:59:41.616586", "n_pass": [22, 3, 3], "n_token": 214, "loss": [0.007260129787027836, 0.00011552047362783924], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 203, "repair_targets": [77], "repair_candidates": [77, 9, 201, 203, 133, 212, 2, 195, 206, 193, 210]}}
{"prediction": {"error_location": 0.9927659034729004, "repair_targets": [0.9998844861984253], "repair_candidates": [1.1906173824627331e-07, 4.04223919758806e-06, 0.9998844861984253, 5.532190334633924e-05, 6.379556083402349e-08, 8.391423762077466e-06, 1.8964472214832995e-09, 4.574556289327347e-09, 1.0428795604866536e-07, 1.5634780137219195e-09, 4.744703255710192e-05], "target_probs": 0.9998844861984253}}


{"result": {"time": "2021-02-21 05:59:41.696588", "n_pass": [24, 4, 4], "n_token": 171, "loss": [0.017427409067749977, 2.145769485650817e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 160, "repair_targets": [77], "repair_candidates": [77, 9, 158, 160, 90, 169, 2, 152, 163, 150, 167]}}
{"prediction": {"error_location": 0.9827234745025635, "repair_targets": [0.9999978542327881], "repair_candidates": [2.3655000180866637e-09, 1.0727779198305143e-07, 0.9999978542327881, 1.7755081671566586e-06, 2.3759818557067547e-09, 2.203069549011616e-08, 3.189044167628552e-11, 9.610711532159755e-11, 2.0486295992938608e-10, 2.6639629391311814e-10, 2.428296284051612e-07], "target_probs": 0.9999978542327881}}


{"result": {"time": "2021-02-21 05:59:41.771925", "n_pass": [38, 5, 5], "n_token": 149, "loss": [0.027266521006822586, 5.483642325998517e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 138, "repair_targets": [77], "repair_candidates": [77, 9, 136, 138, 90, 147, 2, 130, 141, 128, 145]}}
{"prediction": {"error_location": 0.9731019735336304, "repair_targets": [0.9999945163726807], "repair_candidates": [1.0200207789523574e-08, 4.542665692497394e-07, 0.9999945163726807, 4.522933977568755e-06, 1.4282162119627628e-08, 3.366724001807597e-07, 3.353804456374121e-10, 5.030778571502026e-10, 1.638966184991375e-09, 3.839461248933418e-10, 1.6076783992957644e-07], "target_probs": 0.9999945163726807}}


{"result": {"time": "2021-02-21 05:59:41.846652", "n_pass": [39, 6, 6], "n_token": 127, "loss": [0.024253569543361664, 1.7881409348774469e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 116, "repair_targets": [77], "repair_candidates": [77, 9, 114, 116, 90, 125, 2, 108, 119, 106, 123]}}
{"prediction": {"error_location": 0.97603839635849, "repair_targets": [0.9999982118606567], "repair_candidates": [9.263969147355056e-09, 2.765002591331722e-07, 0.9999982118606567, 1.2468424301914638e-06, 7.710685423489849e-10, 2.0509401110757608e-07, 1.7713329414359436e-10, 4.0998657246937853e-10, 6.516210904194963e-10, 6.290346715731587e-11, 7.841966187527305e-09], "target_probs": 0.9999982118606567}}


{"result": {"time": "2021-02-21 05:59:41.919501", "n_pass": [42, 7, 7], "n_token": 106, "loss": [0.00524098752066493, 2.145769485650817e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 95, "repair_targets": [56], "repair_candidates": [56, 9, 93, 95, 69, 104, 2, 87, 98, 85, 102]}}
{"prediction": {"error_location": 0.9947726130485535, "repair_targets": [0.9999978542327881], "repair_candidates": [5.104351608054003e-09, 7.709867588800989e-08, 0.9999978542327881, 2.087047960230848e-06, 4.185833624159585e-10, 2.8121153405891164e-08, 2.0796994334992824e-11, 6.895808923879088e-11, 1.216563516592828e-10, 5.09184222563519e-11, 5.5012532307330275e-09], "target_probs": 0.9999978542327881}}


{"result": {"time": "2021-02-21 05:59:41.992006", "n_pass": [43, 8, 8], "n_token": 85, "loss": [0.026640722528100014, 3.695494797284482e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 74, "repair_targets": [35], "repair_candidates": [35, 9, 72, 74, 48, 83, 2, 66, 77, 64, 81]}}
{"prediction": {"error_location": 0.9737108945846558, "repair_targets": [0.9999963045120239], "repair_candidates": [1.246344272232136e-08, 2.5186261964904588e-08, 0.9999963045120239, 3.604725179684465e-06, 7.221929165801555e-10, 7.207280816601269e-08, 9.902240138970342e-11, 7.884672081903688e-11, 3.137324566804267e-10, 1.4835056794115786e-10, 2.7698108251428266e-09], "target_probs": 0.9999963045120239}}


{"result": {"time": "2021-02-21 05:59:42.064406", "n_pass": [56, 9, 9], "n_token": 75, "loss": [0.01600748300552368, 2.1934749383945018e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 64, "repair_targets": [25], "repair_candidates": [25, 9, 62, 64, 38, 73, 2, 56, 67, 54, 71]}}
{"prediction": {"error_location": 0.9841199517250061, "repair_targets": [0.9999780654907227], "repair_candidates": [1.652002445950984e-08, 8.215702962388605e-08, 0.9999780654907227, 2.1790188839077018e-05, 6.028377796951645e-10, 5.668124103408445e-08, 1.6901964550175563e-10, 3.777343993149884e-10, 2.50105214316676e-10, 1.594651632963462e-10, 7.515506439403907e-08], "target_probs": 0.9999780654907227}}


{"result": {"time": "2021-02-21 05:59:42.138112", "n_pass": [59, 10, 10], "n_token": 64, "loss": [0.013874982483685017, 6.318112355074845e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 53, "repair_targets": [25], "repair_candidates": [25, 9, 51, 53, 38, 62, 2, 45, 56, 43, 60]}}
{"prediction": {"error_location": 0.9862208366394043, "repair_targets": [0.9999936819076538], "repair_candidates": [2.781749230962305e-08, 5.912508171945774e-08, 0.9999936819076538, 6.130571364337811e-06, 5.282976833775876e-10, 1.5463295710560487e-07, 4.153225818814832e-10, 6.282431797011157e-10, 4.904338601896541e-10, 8.405663665111973e-11, 4.0918886057284e-09], "target_probs": 0.9999936819076538}}


{"result": {"time": "2021-02-21 05:59:42.209967", "n_pass": [63, 11, 11], "n_token": 54, "loss": [0.04276876151561737, 0.00012350844917818904], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 43, "repair_targets": [15], "repair_candidates": [15, 9, 41, 43, 28, 52, 2, 35, 46, 33, 50]}}
{"prediction": {"error_location": 0.9581329226493835, "repair_targets": [0.9998764991760254], "repair_candidates": [2.5267695491493214e-07, 1.7482771852428414e-07, 0.9998764991760254, 0.00012252377928234637, 9.459864003247276e-10, 4.3609145450318465e-07, 6.01061367344613e-10, 3.158454331408933e-10, 3.9069456003737457e-10, 3.2975608355023667e-10, 1.7570823729329277e-07], "target_probs": 0.9998764991760254}}


{"result": {"time": "2021-02-21 05:59:42.282207", "n_pass": [79, 12, 12], "n_token": 49, "loss": [0.36090001463890076, 7.033595466054976e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 38, "repair_targets": [10], "repair_candidates": [10, 9, 36, 38, 23, 47, 2, 30, 41, 28, 45]}}
{"prediction": {"error_location": 0.6970486640930176, "repair_targets": [0.999929666519165], "repair_candidates": [2.5724358465595287e-07, 4.071194226185071e-08, 0.999929666519165, 6.936574936844409e-05, 6.506536975869892e-10, 3.9629583170608385e-07, 3.258937286698682e-10, 2.3853630182202323e-10, 3.0762092873004576e-10, 4.2254458265666983e-10, 3.1443389048035897e-07], "target_probs": 0.999929666519165}}


{"result": {"time": "2021-02-21 05:59:42.426985", "n_pass": [109, 14, 13], "n_token": 46, "loss": [0.6431764364242554, 0.00024148757802322507], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 35, "repair_targets": [10], "repair_candidates": [10, 9, 33, 35, 20, 44, 2, 27, 38, 25, 42]}}
{"prediction": {"error_location": 0.52562016248703, "repair_targets": [0.9997585415840149], "repair_candidates": [2.7837950256071053e-07, 1.0587670118411552e-07, 0.9997585415840149, 0.00023903290275484324, 9.803309275469019e-10, 4.34618897315886e-07, 7.391969814030119e-10, 2.3229272672065093e-10, 4.321454305511452e-10, 1.0377253500948314e-09, 1.6221072201005882e-06], "target_probs": 0.9997585415840149}}


{"result": {"time": "2021-02-21 05:59:42.640212", "n_pass": [113, 17, 14], "n_token": 43, "loss": [0.41191551089286804, 1.3113030945532955e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 32, "repair_targets": [10], "repair_candidates": [10, 9, 30, 32, 20, 41, 2, 24, 35, 22, 39]}}
{"prediction": {"error_location": 0.6623802185058594, "repair_targets": [0.9999986886978149], "repair_candidates": [7.293205044334172e-07, 1.321806308851592e-07, 0.9999986886978149, 2.0618125873284043e-08, 1.2940916782611112e-08, 4.482958217977284e-07, 1.7834168586361443e-09, 3.4676930771304626e-10, 1.2598169174538043e-09, 1.4452752772342592e-08, 2.827224498958003e-08], "target_probs": 0.9999986886978149}}


{"result": {"time": "2021-02-21 05:59:42.712455", "n_pass": [115, 18, 15], "n_token": 40, "loss": [0.4003344774246216, 1.4305124977909145e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 29, "repair_targets": [10], "repair_candidates": [10, 9, 27, 29, 20, 38, 2, 24, 32, 22, 36]}}
{"prediction": {"error_location": 0.6700959205627441, "repair_targets": [0.9999985694885254], "repair_candidates": [1.3138526355760405e-06, 2.809018795346674e-08, 0.9999985694885254, 2.781559871323225e-09, 3.838717343995768e-09, 7.100080523514407e-08, 5.595630625521153e-10, 3.0188576638501274e-10, 4.662520591836028e-09, 5.6536930692629994e-09, 2.055004344470035e-08], "target_probs": 0.9999985694885254}}


{"result": {"time": "2021-02-21 05:59:42.783773", "n_pass": [121, 19, 16], "n_token": 38, "loss": [0.25294873118400574, 3.814704541582614e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 27, "repair_targets": [8], "repair_candidates": [8, 7, 25, 27, 18, 36, 0, 22, 30, 20, 34]}}
{"prediction": {"error_location": 0.7765076160430908, "repair_targets": [0.9999961853027344], "repair_candidates": [1.5619425539625809e-06, 3.2694009632905363e-07, 0.9999961853027344, 3.018773142571263e-08, 5.036166150773624e-09, 1.6328230003637145e-06, 6.541389652170437e-10, 3.5278124865811833e-10, 1.2220698231146798e-08, 4.502963335539789e-08, 2.602405970719701e-07], "target_probs": 0.9999961853027344}}


{"result": {"time": "2021-02-21 05:59:42.855264", "n_pass": [123, 20, 17], "n_token": 36, "loss": [0.11870608478784561, 5.006802894058637e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 25, "repair_targets": [6], "repair_candidates": [6, 5, 23, 25, 16, 34, 0, 20, 28, 18, 32]}}
{"prediction": {"error_location": 0.8880687952041626, "repair_targets": [0.9999949932098389], "repair_candidates": [1.3908110076954472e-06, 1.2785652643287904e-06, 0.9999949932098389, 4.451311497177812e-08, 4.610680726102601e-09, 1.5748172472740407e-06, 1.2934858739654942e-10, 5.753378329309555e-11, 5.035199368563781e-09, 2.4804075238193946e-08, 5.946714622950822e-07], "target_probs": 0.9999949932098389}}


{"result": {"time": "2021-02-21 05:59:42.926409", "n_pass": [124, 21, 18], "n_token": 34, "loss": [0.020152460783720016, 8.571515354560688e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "{", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 23, "repair_targets": [4], "repair_candidates": [4, 3, 21, 23, 14, 32, 0, 18, 26, 16, 30]}}
{"prediction": {"error_location": 0.9800493717193604, "repair_targets": [0.999914288520813], "repair_candidates": [4.539800556813134e-06, 7.806225039530545e-05, 0.999914288520813, 1.8061739126551402e-07, 5.590979679226393e-09, 1.8361565707891714e-06, 1.0150977280964923e-10, 3.936648229618811e-10, 1.1073001182637654e-08, 1.1922573150968674e-07, 8.844068588587106e-07], "target_probs": 0.999914288520813}}


{"result": {"time": "2021-02-21 05:59:42.999102", "n_pass": [127, 22, 19], "n_token": 31, "loss": [0.10131793469190598, 9.024550672620535e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 20, "repair_targets": [4], "repair_candidates": [4, 3, 18, 20, 11, 29, 0, 15, 23, 13, 27]}}
{"prediction": {"error_location": 0.9036458134651184, "repair_targets": [0.9999097585678101], "repair_candidates": [1.90961600310402e-06, 8.684043859830126e-05, 0.9999097585678101, 1.369271984685838e-07, 2.3263185155997235e-08, 1.7112701300447952e-07, 9.519761368093071e-11, 5.79420789126317e-10, 1.526984094724071e-09, 2.3480414057530652e-08, 1.0737146567407763e-06], "target_probs": 0.9999097585678101}}


{"result": {"time": "2021-02-21 05:59:43.140968", "n_pass": [161, 24, 20], "n_token": 30, "loss": [0.07846551388502121, 0.00023612187942489982], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 19, "repair_targets": [4], "repair_candidates": [4, 3, 17, 19, 10, 28, 0, 14, 22, 12, 26]}}
{"prediction": {"error_location": 0.9245339632034302, "repair_targets": [0.9997639060020447], "repair_candidates": [4.449824700714089e-06, 0.00022193761833477765, 0.9997639060020447, 6.875752092128096e-07, 9.421339797199835e-08, 3.0005156759216334e-07, 2.3743421118105346e-10, 2.2093564755465422e-09, 3.2252749360139887e-09, 6.103002192503482e-08, 8.493299901601858e-06], "target_probs": 0.9997639060020447}}


{"result": {"time": "2021-02-21 05:59:43.212729", "n_pass": [162, 25, 21], "n_token": 29, "loss": [0.4551859200000763, 0.1362086683511734], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [4, 3, 16, 18, 9, 27, 0, 13, 21, 11, 25]}}
{"prediction": {"error_location": 0.6343300342559814, "repair_targets": [0.8726605176925659], "repair_candidates": [4.1748771764105186e-05, 0.12715984880924225, 0.8726605176925659, 1.1261633517278824e-05, 8.426938507000159e-07, 2.1546891275647795e-06, 2.9110613919414163e-09, 6.886586589871513e-08, 2.9339560114749474e-08, 7.792224892000377e-07, 0.00012277517816983163], "target_probs": 0.8726605176925659}}


{"result": {"time": "2021-02-21 05:59:43.639845", "n_pass": [174, 31, 22], "n_token": 27, "loss": [0.1112913265824318, 0.18617607653141022], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [4, 3, 16, 18, 9, 25, 0, 13, 21, 11, 23]}}
{"prediction": {"error_location": 0.8946780562400818, "repair_targets": [0.8301274180412292], "repair_candidates": [3.186568937962875e-05, 0.027577588334679604, 0.8301274180412292, 6.936710178706562e-06, 0.13871927559375763, 1.1545820598257706e-05, 3.838460216343265e-09, 1.6148504755619797e-08, 6.995737322768036e-08, 0.003501682775095105, 2.3636930563952774e-05], "target_probs": 0.8301274180412292}}


{"result": {"time": "2021-02-21 05:59:43.711501", "n_pass": [178, 32, 23], "n_token": 26, "loss": [0.04950058087706566, 0.10045652836561203], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "=", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [3, 2, 15, 17, 8, 24, 0, 12, 20, 10, 22]}}
{"prediction": {"error_location": 0.9517046213150024, "repair_targets": [0.9044244289398193], "repair_candidates": [1.0278092304361053e-05, 3.0249728411035903e-07, 0.9044244289398193, 4.808934681932442e-05, 0.09523912519216537, 2.930983100668527e-06, 5.219590537564045e-09, 3.3599829585284624e-09, 1.9104417603443835e-08, 0.00024952221428975463, 2.522681825212203e-05], "target_probs": 0.9044244289398193}}


{"result": {"time": "2021-02-21 05:59:43.855112", "n_pass": [182, 34, 24], "n_token": 25, "loss": [0.34796732664108276, 0.09904073923826218], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 16, "repair_targets": [3], "repair_candidates": [3, 2, 14, 16, 7, 23, 0, 11, 19, 9, 21]}}
{"prediction": {"error_location": 0.7061218619346619, "repair_targets": [0.9057058095932007], "repair_candidates": [1.1776953215303365e-05, 4.62783731336458e-07, 0.9057058095932007, 0.0004942712257616222, 0.09254369884729385, 2.8784279493265785e-06, 4.595285818531636e-10, 1.2435228402551957e-09, 1.917462633116429e-08, 0.001013337168842554, 0.00022782752057537436], "target_probs": 0.9057058095932007}}


{"result": {"time": "2021-02-21 05:59:43.926452", "n_pass": [183, 35, 25], "n_token": 24, "loss": [0.08014177531003952, 0.049120787531137466], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "}", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 15, "repair_targets": [3], "repair_candidates": [3, 2, 13, 15, 6, 22, 0, 10, 18, 8, 20]}}
{"prediction": {"error_location": 0.9229855537414551, "repair_targets": [0.9520661234855652], "repair_candidates": [2.3556442556582624e-06, 8.724064315401847e-08, 0.9520661234855652, 5.075361332274042e-05, 0.04732139781117439, 1.2413397598720621e-06, 5.045687201388205e-10, 1.3385362818141289e-09, 2.1952997641960792e-08, 0.00047730637015774846, 8.067697490332648e-05], "target_probs": 0.9520661234855652}}


{"result": {"time": "2021-02-21 05:59:44.068575", "n_pass": [185, 37, 26], "n_token": 23, "loss": [0.40539494156837463, 0.18340793251991272], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "}", "expected", "=", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [3, 2, 12, 14, 5, 21, 0, 9, 17, 7, 19]}}
{"prediction": {"error_location": 0.6667134761810303, "repair_targets": [0.832428514957428], "repair_candidates": [2.07304947252851e-06, 8.524602179704743e-08, 0.832428514957428, 0.00014130081399343908, 0.16546902060508728, 2.7502957777869597e-07, 6.403174102054265e-10, 1.5648204954032963e-09, 1.8857425843066267e-08, 0.0016271051717922091, 0.0003315176581963897], "target_probs": 0.832428514957428}}


{"result": {"time": "2021-02-21 05:59:44.141011", "n_pass": [187, 38, 27], "n_token": 22, "loss": [0.414669930934906, 0.11104127019643784], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "}", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 13, "repair_targets": [3], "repair_candidates": [3, 2, 11, 13, 5, 20, 0, 8, 16, 6, 18]}}
{"prediction": {"error_location": 0.6605582237243652, "repair_targets": [0.8949018120765686], "repair_candidates": [2.0784100343007594e-06, 1.0800025762591758e-07, 0.8949018120765686, 0.00019704601436387748, 0.10320939123630524, 1.205866766440522e-07, 1.1621993367683103e-09, 2.164959544970202e-09, 5.009421766288824e-09, 0.0010431022383272648, 0.0006464002653956413], "target_probs": 0.8949018120765686}}


{"result": {"time": "2021-02-21 05:59:44.283441", "n_pass": [197, 40, 28], "n_token": 21, "loss": [0.217554971575737, 0.03891902416944504], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "}", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [2, 1, 10, 12, 4, 19, 0, 7, 15, 5, 17]}}
{"prediction": {"error_location": 0.8044832348823547, "repair_targets": [0.9618285894393921], "repair_candidates": [9.466931260249112e-06, 0.00014467864821199328, 0.9618285894393921, 0.00019773701205849648, 0.03444886952638626, 1.360328269583988e-06, 2.3128966120111727e-07, 2.8173957389299176e-07, 8.736129331055054e-08, 0.0015406758757308125, 0.0018280630465596914], "target_probs": 0.9618285894393921}}


{"result": {"time": "2021-02-21 05:59:44.354759", "n_pass": [200, 41, 29], "n_token": 20, "loss": [0.1231454461812973, 0.27136778831481934], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 1, 9, 11, 3, 18, 0, 6, 14, 4, 16]}}
{"prediction": {"error_location": 0.8841351270675659, "repair_targets": [0.7623360753059387], "repair_candidates": [0.00032687425846233964, 0.0041170683689415455, 0.7623360753059387, 0.0198803897947073, 0.1734616756439209, 0.00015176773013081402, 0.00010019245382864028, 3.864059908664785e-05, 7.5201837717031594e-06, 0.0061151375994086266, 0.033464718610048294], "target_probs": 0.7623360753059387}}


{"result": {"time": "2021-02-21 05:59:44.784738", "n_pass": [236, 47, 30], "n_token": 19, "loss": [0.13741634786128998, 0.36165323853492737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 1, 9, 11, 3, 17, 0, 6, 13, 4, 15]}}
{"prediction": {"error_location": 0.8716073632240295, "repair_targets": [0.6965238451957703], "repair_candidates": [0.00046835921239107847, 0.005570694338530302, 0.6965238451957703, 0.012873762287199497, 0.24892112612724304, 0.0004025647940579802, 0.00011323328362777829, 1.0965901310555637e-05, 2.5714940420584753e-05, 0.02009783685207367, 0.014991838485002518], "target_probs": 0.6965238451957703}}


{"result": {"time": "2021-02-21 05:59:44.855561", "n_pass": [238, 48, 31], "n_token": 18, "loss": [0.35205698013305664, 0.16501988470554352], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", "#NEWLINE#", "self", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 1, 9, 11, 3, 16, 0, 6, 13, 4, 14]}}
{"prediction": {"error_location": 0.7032400369644165, "repair_targets": [0.8478768467903137], "repair_candidates": [0.0006574454018846154, 0.011542951688170433, 0.8478768467903137, 0.047099485993385315, 0.049565065652132034, 0.0005832923343405128, 0.00033607202931307256, 7.443419599439949e-05, 0.001450860290788114, 0.0214704517275095, 0.019343137741088867], "target_probs": 0.8478768467903137}}


{"result": {"time": "2021-02-21 05:59:44.926676", "n_pass": [240, 49, 32], "n_token": 17, "loss": [0.14302851259708405, 0.10793068259954453], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", "#NEWLINE#", "self", "actual", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 1, 9, 11, 3, 15, 0, 6, 13, 4, 14]}}
{"prediction": {"error_location": 0.8667293787002563, "repair_targets": [0.8976898193359375], "repair_candidates": [0.00029283700860105455, 0.005205006338655949, 0.8976898193359375, 0.041112542152404785, 0.017451321706175804, 0.00027500599389895797, 4.5095082896295935e-05, 4.665672349801753e-06, 0.00046882417518645525, 0.010474088601768017, 0.02698073349893093], "target_probs": 0.8976898193359375}}


{"result": {"time": "2021-02-21 05:59:44.998928", "n_pass": [242, 50, 33], "n_token": 16, "loss": [0.34341269731521606, 0.2866116762161255], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "schema", "row", "expected", "actual", "=", "self", "_transform_row", "(", "schema", ",", "schema", "#NEWLINE#", "self", "actual", "expected"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 1, 9, 11, 3, 15, 0, 6, 13, 4, 14]}}
{"prediction": {"error_location": 0.7093454003334045, "repair_targets": [0.7508032321929932], "repair_candidates": [0.0005986678297631443, 0.007111590821295977, 0.7508032321929932, 0.0614338144659996, 0.13330280780792236, 0.0014679160667583346, 0.00011995145177934319, 3.849761196761392e-05, 0.0007277731201611459, 0.04436313733458519, 3.2620071579003707e-05], "target_probs": 0.7508032321929932}}




Minimal simplified tokens:

['self', 'schema', 'row', 'expected', 'actual', '=', 'self', '_transform_row', '(', 'schema', ',', 'schema', '#NEWLINE#', 'self', 'actual', 'expected']
