
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'120'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'300'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"], "error_location": [330], "repair_targets": [9], "repair_candidates": [119, 328, 330, 9, 260, 339, 2, 322, 333, 320, 337], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "tylertreat/BigQuery-Python/bigquery/tests/test_client.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00006-of-00300", "js_count": 20709, "results": {"model": "transformer", "prob": {"loc": [[0.0017543452559038997, 3.152875294176738e-08, 3.3330419313415405e-08, 2.046349978357398e-09, 2.257546150019607e-09, 1.8994570361030583e-09, 1.278852246322515e-09, 2.302643187235276e-09, 7.056581430298081e-10, 2.3450331809726777e-07, 6.905120475408921e-09, 6.743224645333612e-08, 3.973422924019587e-09, 5.029250349508629e-10, 4.1578243625828293e-10, 4.612584980634438e-09, 6.667848495567341e-10, 9.218389607212885e-08, 1.4537386849866607e-09, 1.1939713662201257e-09, 1.0854911636215547e-08, 8.357710079565095e-10, 1.9762892122798803e-07, 1.7622981962617246e-09, 1.144186412282977e-09, 1.0213007106685268e-09, 8.741314894145091e-10, 5.674168912506161e-10, 4.795222441345004e-09, 1.6410830472324278e-09, 1.4164787121018207e-09, 7.696609571894442e-09, 1.4451243535162916e-09, 1.9657890959479118e-07, 1.4526133629289006e-09, 8.213115187949427e-10, 5.194067398406332e-09, 1.754969169986964e-09, 4.413576348838433e-08, 1.2676736327321692e-09, 1.015953876581932e-09, 5.740703468148922e-10, 4.3458583953714935e-10, 1.1775833641536337e-09, 4.2964338753392894e-09, 9.422347346799143e-10, 8.051770361561239e-10, 8.487467617612765e-09, 1.0267284800136167e-09, 3.825218470865366e-07, 3.501287704210654e-09, 1.8695591741391127e-09, 1.1620968187742164e-08, 1.16816090134364e-09, 7.879369157137717e-09, 3.108430401965734e-09, 1.3524049657931414e-09, 7.849545458071816e-10, 3.948301685596789e-10, 7.059866025116435e-10, 8.579279509035587e-09, 1.0110651205152976e-09, 8.23284496132004e-10, 4.349608673237526e-09, 9.418287261198088e-10, 1.4814566462462153e-08, 1.3045604596584326e-09, 5.785795176294073e-10, 3.0826405872375062e-09, 6.116008255396821e-10, 5.5837226398125495e-08, 7.267345059069896e-10, 4.942645182026695e-10, 3.719076380193087e-09, 1.3825630640340592e-09, 6.945146679981917e-08, 1.8515601274415872e-09, 1.1849149439413509e-09, 8.3540809825422e-09, 6.682413511427399e-10, 8.796277484179882e-09, 1.0748438583618736e-08, 2.8487590064685264e-09, 2.158253575856861e-09, 1.1722103288036578e-08, 1.5490737581558278e-09, 3.172321498823294e-07, 2.760832673587288e-09, 2.1711064057683416e-09, 5.889523535529406e-09, 1.371911251268898e-09, 1.7728186207932595e-07, 3.5715224111498856e-09, 2.618869343606889e-09, 2.002793042521489e-09, 8.295518161283155e-10, 1.3358639749938561e-09, 1.3538872245533184e-08, 2.373223395579771e-09, 2.118754949265167e-09, 9.544044665688034e-09, 2.5060067354587545e-09, 7.987149608368327e-09, 3.261150904876331e-09, 2.5775788170534497e-09, 1.2043421371288332e-08, 1.8504021648269031e-09, 5.038777395327543e-09, 4.84839857151087e-09, 4.716541823768239e-09, 3.200948617276822e-09, 2.1470527578060228e-09, 2.321234093827229e-09, 5.658802759711534e-09, 3.3080616024250276e-09, 2.33054597842397e-09, 2.106211871577557e-09, 5.1470152584442985e-09, 2.7848490180559793e-09, 9.703147618722596e-09, 6.40827746423156e-09, 2.0547763313061296e-07, 9.07813291206594e-09, 9.094112130014764e-09, 1.8171760984841967e-08, 4.2386512077996485e-09, 7.101957777422285e-08, 4.6286711352649945e-08, 6.7081105115107675e-09, 4.4652077590967565e-09, 2.4548951316205603e-08, 3.965640260616965e-09, 5.818067734253418e-07, 7.350742681211386e-09, 9.247212773288993e-09, 5.499679822662529e-09, 1.863258214385155e-09, 1.6095104138358352e-09, 2.368363460902856e-08, 4.551469867664082e-09, 2.9474742646584673e-09, 1.3426518563619538e-08, 2.61550470170846e-09, 1.608682609344214e-08, 3.3963030166006547e-09, 4.662410457711985e-09, 3.124098313378454e-09, 9.699848702027225e-10, 8.647339511114183e-10, 1.4162901074143974e-08, 3.850748164779816e-09, 2.9896791708949877e-09, 1.1070799388335217e-08, 1.8817010172256232e-09, 2.7852631312441645e-09, 2.9121243194651925e-09, 2.7634194932346645e-09, 1.7692328713181382e-09, 1.2581251596088805e-09, 6.989071543728187e-10, 3.4605687204702917e-09, 1.2760210665874183e-09, 1.0060040578352414e-09, 8.155331521209064e-09, 7.044693162150395e-10, 1.3045013957935225e-08, 1.0225994273582728e-08, 5.570051087033789e-09, 1.770711466342334e-09, 8.304940735115451e-09, 1.1959543355644087e-09, 8.084598768220985e-09, 1.985240860591375e-09, 8.760710490385293e-10, 5.759713594954974e-09, 7.79868669642525e-10, 8.238190574161308e-09, 1.2037151719823669e-08, 3.0031555020570977e-09, 1.0705099029451048e-09, 1.1163611368658621e-08, 1.0279238571442306e-09, 1.4630001032855944e-07, 3.1692310997755158e-09, 2.5417832283380903e-09, 1.7436647681279283e-09, 8.460632749951458e-10, 1.1916643227749546e-09, 5.1416781943203205e-09, 1.087762102613965e-09, 8.441065069142439e-10, 1.147789330246951e-08, 6.888463688348168e-10, 6.91675055009e-08, 2.534782606034014e-09, 1.9127486261538706e-09, 1.0435438069222869e-09, 6.34021501966231e-10, 1.6411300096663695e-09, 4.163421163383418e-09, 2.1439017228175317e-09, 1.6411864089960204e-09, 9.815797064050003e-10, 6.952587394692955e-10, 6.205262415015511e-10, 4.630661964988292e-10, 1.9332581369102542e-10, 3.3933358900561927e-10, 4.3226635604298735e-09, 6.030106414200986e-10, 3.288971595072354e-10, 7.033257976019058e-09, 1.0127191307773842e-09, 3.3444262914628098e-09, 2.6945423670099444e-10, 2.5183488627789075e-10, 4.715624335460689e-09, 1.3076045801696523e-09, 7.761696174668486e-09, 4.249628648977932e-09, 2.5538338110919767e-10, 2.340483085117029e-10, 4.758404781313175e-09, 1.4196079867190292e-09, 3.800968784162251e-08, 6.531302165768693e-10, 3.711032592335073e-10, 3.652592672764854e-10, 1.6898688004474138e-10, 5.935372748844259e-10, 3.355378419556132e-09, 5.842250017096262e-10, 3.3906896734769987e-10, 7.226862219766872e-09, 1.2551149008999118e-09, 8.151396890809792e-09, 8.470013579398028e-10, 4.0338540840956227e-10, 3.735746434418985e-10, 2.6852561840762235e-10, 2.3138080340601164e-09, 1.9965988862225004e-09, 9.25636622906012e-10, 7.187804240693652e-10, 7.549179059651578e-10, 1.766157886606834e-09, 7.410285163267361e-10, 6.563020682470722e-10, 3.9456898859313583e-10, 4.646997897594929e-09, 3.19380122348889e-09, 7.126456091910427e-10, 6.808937857982755e-10, 1.9964149777784712e-10, 2.618699479484121e-09, 2.085855044242635e-09, 8.210295776578391e-10, 6.50668297019763e-10, 5.564653737799574e-10, 7.755831532563207e-10, 3.3458576353950775e-08, 4.622819016475432e-09, 2.6219392879056613e-08, 1.907138447165835e-09, 9.913788678872493e-10, 4.065400904806893e-09, 2.7192175178214484e-09, 1.3231117179657303e-07, 2.6830919708231704e-09, 1.6367722732724133e-09, 2.300875046046258e-08, 2.3240784852163188e-09, 6.46043529783924e-09, 2.430295076294442e-09, 1.615723554948545e-09, 1.015644457424969e-08, 4.460475100387384e-09, 2.249650021823868e-09, 1.8205472684940105e-09, 1.3310976765268379e-09, 1.0009663098387023e-09, 6.8262875352331776e-09, 2.1738175703944762e-08, 1.3498440587511595e-08, 1.7682342257074879e-09, 1.175267771991173e-09, 5.553862703067125e-09, 1.5821776111479835e-09, 3.242933530600567e-07, 5.725779850251911e-09, 2.665849985206137e-09, 2.812133581553411e-10, 8.579046362200415e-10, 1.341758917305924e-07, 2.826061384908485e-09, 1.938613269913958e-09, 1.2201240018328008e-09, 4.3297912477591183e-10, 1.0945803152750955e-09, 1.2124320214468298e-08, 1.6949117664921687e-09, 1.3640836238337783e-09, 2.988397795888886e-08, 2.7503366251124817e-09, 5.433740852822666e-07, 3.0438807030463977e-09, 3.1282960666345616e-09, 3.5610861481849554e-10, 6.254757600743233e-09, 4.0848970428442044e-08, 3.2158742335752777e-09, 2.3874473509266636e-09, 2.808870247505979e-09, 7.430666637553429e-10, 2.6852624568363126e-09, 3.1940021738563473e-09, 2.316448588501885e-09, 2.1227515301092126e-09, 1.1113001630036479e-09, 2.9206459473130053e-09, 8.252285965681949e-08, 2.8623972081476268e-09, 2.6962689503307047e-07, 1.6547400116806443e-09, 2.2473374550191494e-10, 1.5675191145092526e-09, 8.593885603147555e-10, 5.611695996776689e-08, 0.8835256695747375, 9.954796986733072e-09, 0.1136845052242279, 7.757921416384761e-09, 3.5027902800521815e-09, 4.204061987422847e-09, 3.871537757049737e-09, 7.28444637942971e-09, 9.182100058069409e-08, 4.4846605305792764e-05, 1.5426291355424837e-08, 0.0009847035398706794, 6.781864847482666e-09]], "pointer": [[0.0, 0.0, 1.2228139212311362e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9975308775901794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.451911369571462e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002368944406043738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.918149978853762e-05, 0.0, 4.289574917493155e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0938091438438278e-07, 0.0, 3.692328220950003e-07, 0.0, 0.0, 3.2924606330198003e-07, 0.0, 0.0, 0.0, 0.0020448823925107718, 0.0, 1.8331751562072895e-05, 0.0]], "target": [0.9975308775901794]}, "loss": [2.174328327178955, 0.0024721757508814335], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [328]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:15:24.434576", "n_pass": [1, 1, 1], "n_token": 341, "loss": [0.12383493036031723, 0.0024721757508814335], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'120'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'300'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 328, "repair_targets": [9], "repair_candidates": [119, 328, 330, 9, 260, 339, 2, 322, 333, 320, 337]}}
{"prediction": {"error_location": 0.8835256695747375, "repair_targets": [0.9975308775901794], "repair_candidates": [1.2228139212311362e-07, 0.9975308775901794, 7.451911369571462e-05, 0.0002368944406043738, 8.918149978853762e-05, 4.289574917493155e-06, 2.0938091438438278e-07, 3.692328220950003e-07, 3.2924606330198003e-07, 0.0020448823925107718, 1.8331751562072895e-05], "target_probs": 0.9975308775901794}}


{"result": {"time": "2021-02-21 06:15:24.521644", "n_pass": [10, 2, 2], "n_token": 256, "loss": [0.19110332429409027, 4.255862222635187e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'baz'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'qux'", ",", "#NEWLINE#", "'type'", ":", "'RECORD'", ",", "#NEWLINE#", "'mode'", ":", "'REPEATED'", ",", "#NEWLINE#", "'fields'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 243, "repair_targets": [9], "repair_candidates": [119, 243, 245, 9, 175, 254, 2, 237, 248, 235, 252]}}
{"prediction": {"error_location": 0.8260471820831299, "repair_targets": [0.9999574422836304], "repair_candidates": [6.981228750646551e-08, 0.9999574422836304, 1.7636084521654993e-06, 3.5728062357520685e-05, 4.85525902149675e-07, 2.631412598930183e-06, 1.5538346165300254e-09, 1.0828419050312732e-08, 4.2514376019653355e-08, 9.499388653466667e-08, 1.6058619394243578e-06], "target_probs": 0.9999574422836304}}


{"result": {"time": "2021-02-21 06:15:24.606107", "n_pass": [22, 3, 3], "n_token": 214, "loss": [0.19675931334495544, 6.652099546045065e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'42'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'36.98'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "'batman'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'v'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'v'", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 201, "repair_targets": [9], "repair_candidates": [77, 201, 203, 9, 133, 212, 2, 195, 206, 193, 210]}}
{"prediction": {"error_location": 0.821388304233551, "repair_targets": [0.9999334812164307], "repair_candidates": [1.995451270886406e-08, 0.9999334812164307, 8.05455601948779e-06, 4.514288229984231e-05, 1.9243442750394024e-07, 8.459278433292639e-07, 5.0385207117642494e-09, 5.660749202718307e-09, 2.4571638945758423e-08, 7.357157105758461e-09, 1.2197654541523661e-05], "target_probs": 0.9999334812164307}}


{"result": {"time": "2021-02-21 06:15:24.686371", "n_pass": [24, 4, 4], "n_token": 171, "loss": [0.06889503449201584, 2.229238634754438e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "'baz'", ":", "'batman'", ",", "#NEWLINE#", "'qux'", ":", "[", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "120", ",", "#NEWLINE#", "'bazqux'", ":", "'robin'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 158, "repair_targets": [9], "repair_candidates": [77, 158, 160, 9, 90, 169, 2, 152, 163, 150, 167]}}
{"prediction": {"error_location": 0.9334246516227722, "repair_targets": [0.999977707862854], "repair_candidates": [5.806664926666372e-09, 0.999977707862854, 2.0976353880541865e-06, 1.169790903077228e-05, 2.67978037982175e-07, 3.041697027583723e-08, 1.7875817492907231e-09, 1.9294479347564675e-09, 4.787779062098707e-09, 2.8363405135678477e-07, 7.923463272163644e-06], "target_probs": 0.999977707862854}}


{"result": {"time": "2021-02-21 06:15:24.761919", "n_pass": [38, 5, 5], "n_token": 149, "loss": [0.07775361835956573, 2.47958396357717e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'foobar'", ":", "300", ",", "#NEWLINE#", "'bazqux'", ":", "'joker'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 136, "repair_targets": [9], "repair_candidates": [77, 136, 138, 9, 90, 147, 2, 130, 141, 128, 145]}}
{"prediction": {"error_location": 0.9251923561096191, "repair_targets": [0.9999752044677734], "repair_candidates": [1.4126162461991498e-08, 0.9999752044677734, 3.1665299502492417e-06, 1.9678249373100698e-05, 7.594324529236474e-07, 1.1049060333334637e-07, 1.2104059976536519e-08, 7.05241554044278e-09, 9.084597074604517e-09, 9.910625209386126e-08, 9.644467127145617e-07], "target_probs": 0.9999752044677734}}


{"result": {"time": "2021-02-21 06:15:24.836846", "n_pass": [39, 6, 6], "n_token": 127, "loss": [0.01692834310233593, 5.364432581700385e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bar'", ",", "#NEWLINE#", "'type'", ":", "'FLOAT'", ",", "#NEWLINE#", "#UNINDENT#", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 114, "repair_targets": [9], "repair_candidates": [77, 114, 116, 9, 90, 125, 2, 108, 119, 106, 123]}}
{"prediction": {"error_location": 0.9832140207290649, "repair_targets": [0.9999946355819702], "repair_candidates": [1.6623118881398113e-08, 0.9999946355819702, 1.2304095662329928e-06, 3.6493258903647074e-06, 5.937964431268483e-08, 1.4758796851310763e-07, 5.1457238470220545e-09, 4.4101944318697406e-09, 5.840095074205465e-09, 1.717763886688317e-08, 2.3325243603267154e-07], "target_probs": 0.9999946355819702}}


{"result": {"time": "2021-02-21 06:15:24.910846", "n_pass": [42, 7, 7], "n_token": 106, "loss": [0.018683167174458504, 1.1563368389033712e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", "'name'", ":", "'foobar'", ",", "#NEWLINE#", "'type'", ":", "'INTEGER'", ",", "#NEWLINE#", "#UNINDENT#", "}", ",", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'bazqux'", ",", "#NEWLINE#", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 93, "repair_targets": [9], "repair_candidates": [56, 93, 95, 9, 69, 104, 2, 87, 98, 85, 102]}}
{"prediction": {"error_location": 0.9814902544021606, "repair_targets": [0.9999884366989136], "repair_candidates": [8.951022145708976e-09, 0.9999884366989136, 1.5345154906754033e-06, 9.482585483056027e-06, 4.237126560724391e-08, 9.466871375707342e-08, 2.328893522474118e-09, 2.7771209776261685e-09, 3.1176523584974802e-09, 2.247147179446074e-08, 3.9120050132623874e-07], "target_probs": 0.9999884366989136}}


{"result": {"time": "2021-02-21 06:15:24.983366", "n_pass": [43, 8, 8], "n_token": 85, "loss": [0.17017249763011932, 1.2517053619376384e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "'type'", "'type'", ":", "'STRING'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 72, "repair_targets": [9], "repair_candidates": [35, 72, 74, 9, 48, 83, 2, 66, 77, 64, 81]}}
{"prediction": {"error_location": 0.8435193300247192, "repair_targets": [0.9999874830245972], "repair_candidates": [1.535860860713001e-08, 0.9999874830245972, 2.827118805726059e-07, 1.1894405361090321e-05, 5.728771768076513e-08, 6.318390433079912e-08, 3.543996207611144e-09, 1.294486295932984e-09, 3.305939522135759e-09, 3.012948468494869e-08, 9.285651714208143e-08], "target_probs": 0.9999874830245972}}


{"result": {"time": "2021-02-21 06:15:25.056356", "n_pass": [56, 9, 9], "n_token": 75, "loss": [0.0559765100479126, 1.978893851628527e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#INDENT#", "'foo'", ":", "42", ",", "#NEWLINE#", "'bar'", ":", "36.98", ",", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 62, "repair_targets": [9], "repair_candidates": [25, 62, 64, 9, 38, 73, 2, 56, 67, 54, 71]}}
{"prediction": {"error_location": 0.9455613493919373, "repair_targets": [0.9999802112579346], "repair_candidates": [8.970414633324708e-09, 0.9999802112579346, 1.0763462796603562e-06, 1.8378412278252654e-05, 1.622032108627991e-08, 8.30231314807861e-08, 6.175674638342343e-09, 5.296528993170568e-09, 2.26027707661558e-09, 1.3167775314570918e-08, 2.681842374840926e-07], "target_probs": 0.9999802112579346}}


{"result": {"time": "2021-02-21 06:15:25.130901", "n_pass": [59, 10, 10], "n_token": 64, "loss": [0.09087260812520981, 3.933914285880746e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'foo'", ",", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 51, "repair_targets": [9], "repair_candidates": [25, 51, 53, 9, 38, 62, 2, 45, 56, 43, 60]}}
{"prediction": {"error_location": 0.9131340980529785, "repair_targets": [0.9999960660934448], "repair_candidates": [1.5195389835298556e-08, 0.9999960660934448, 8.454061628526688e-08, 3.770189323404338e-06, 6.394543117238527e-09, 5.426753091342107e-08, 2.176845592671839e-09, 1.4945027437818226e-09, 1.4980586771073945e-09, 1.681465522374026e-09, 2.4008610211012638e-08], "target_probs": 0.9999960660934448}}


{"result": {"time": "2021-02-21 06:15:25.204003", "n_pass": [63, 11, 11], "n_token": 54, "loss": [0.44010263681411743, 0.05165081098675728], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 41, "repair_targets": [9], "repair_candidates": [15, 41, 43, 9, 28, 52, 2, 35, 46, 33, 50]}}
{"prediction": {"error_location": 0.6439703106880188, "repair_targets": [0.9496604204177856], "repair_candidates": [0.00015317717043217272, 0.9496604204177856, 0.0001582352997502312, 0.049702465534210205, 4.667217581300065e-05, 9.193799633067101e-05, 2.232996303064283e-05, 2.3808540845493553e-06, 4.990924480807735e-06, 1.4781094250793103e-05, 0.00014266629295889288], "target_probs": 0.9496604204177856}}


{"result": {"time": "2021-02-21 06:15:25.276551", "n_pass": [79, 12, 12], "n_token": 49, "loss": [0.21683910489082336, 8.070794865489006e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#INDENT#", "'f'", ":", "[", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 36, "repair_targets": [9], "repair_candidates": [10, 36, 38, 9, 23, 47, 2, 30, 41, 28, 45]}}
{"prediction": {"error_location": 0.805059552192688, "repair_targets": [0.9999192953109741], "repair_candidates": [7.221889575248497e-08, 0.9999192953109741, 6.863560884085018e-07, 7.947621634230018e-05, 5.35653166267025e-09, 1.0690559548720557e-07, 1.1711506431311136e-08, 4.152079124963848e-09, 1.3122414266319993e-09, 6.302947497260902e-09, 2.445406721562904e-07], "target_probs": 0.9999192953109741}}


{"result": {"time": "2021-02-21 06:15:25.349076", "n_pass": [81, 13, 13], "n_token": 44, "loss": [0.05052996799349785, 0.0001946280972333625], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#INDENT#", "#UNINDENT#", "}", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 31, "repair_targets": [9], "repair_candidates": [10, 31, 33, 9, 18, 42, 2, 25, 36, 23, 40]}}
{"prediction": {"error_location": 0.9507254362106323, "repair_targets": [0.9998053908348083], "repair_candidates": [7.646791289062094e-08, 0.9998053908348083, 5.99294423864194e-07, 0.00019316610996611416, 3.063878040165946e-09, 1.2373934055176505e-07, 1.706115781985318e-08, 5.506334943561342e-09, 1.0282319440335641e-09, 3.0791449390221715e-09, 5.432141279015923e-07], "target_probs": 0.9998053908348083}}


{"result": {"time": "2021-02-21 06:15:25.423824", "n_pass": [106, 14, 14], "n_token": 41, "loss": [0.16203410923480988, 0.0026582612190395594], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "{", "#NEWLINE#", "#NEWLINE#", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 28, "repair_targets": [9], "repair_candidates": [10, 28, 30, 9, 15, 39, 2, 22, 33, 20, 37]}}
{"prediction": {"error_location": 0.8504123091697693, "repair_targets": [0.9973452687263489], "repair_candidates": [7.215340929178637e-07, 0.9973452687263489, 9.552850315230899e-07, 0.0026453654281795025, 7.441952831754861e-09, 1.0939776302620885e-06, 2.515492170118705e-08, 1.665873305967125e-08, 1.0908968839373756e-08, 6.896123228017359e-09, 6.535788088513073e-06], "target_probs": 0.9973452687263489}}


{"result": {"time": "2021-02-21 06:15:25.495499", "n_pass": [108, 15, 15], "n_token": 38, "loss": [0.3784635663032532, 3.099446303167497e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "actual", "=", "self", ".", "client", ".", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 25, "repair_targets": [9], "repair_candidates": [10, 25, 27, 9, 15, 36, 2, 19, 30, 17, 34]}}
{"prediction": {"error_location": 0.684912919998169, "repair_targets": [0.9999969005584717], "repair_candidates": [3.5947186916018836e-07, 0.9999969005584717, 2.217627070422168e-06, 3.6307270079305454e-08, 9.314168103458087e-09, 2.982212947699736e-07, 1.2507268110084624e-08, 5.2575241937802275e-09, 3.93491106365218e-09, 4.848988410799393e-08, 2.171072566170551e-08], "target_probs": 0.9999969005584717}}


{"result": {"time": "2021-02-21 06:15:25.567163", "n_pass": [110, 16, 16], "n_token": 35, "loss": [0.20085246860980988, 1.6689314179529902e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_transform_row_with_nested_repeated(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 22, "repair_targets": [9], "repair_candidates": [10, 22, 24, 9, 15, 33, 2, 19, 27, 17, 31]}}
{"prediction": {"error_location": 0.8180330991744995, "repair_targets": [0.9999983310699463], "repair_candidates": [4.424631185884209e-07, 0.9999983310699463, 1.0590325700832182e-06, 1.1221791496041078e-08, 2.9276585600257476e-09, 6.612209091372279e-08, 3.318003205521336e-09, 2.0987021009943874e-09, 2.0750903217958694e-09, 5.0955442532085726e-08, 8.423911346255863e-09], "target_probs": 0.9999983310699463}}


{"result": {"time": "2021-02-21 06:15:25.638550", "n_pass": [116, 17, 17], "n_token": 33, "loss": [0.13344496488571167, 2.622607780722319e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 20, "repair_targets": [7], "repair_candidates": [8, 20, 22, 7, 13, 31, 0, 17, 25, 15, 29]}}
{"prediction": {"error_location": 0.8750755190849304, "repair_targets": [0.9999973773956299], "repair_candidates": [1.0608330285322154e-06, 0.9999973773956299, 4.723079598534241e-07, 2.3419177708206007e-08, 2.27501804062058e-08, 9.021057962854684e-07, 1.842154095932358e-09, 9.917473509091224e-10, 1.6851535722395283e-09, 1.0293311447640008e-07, 6.4515921494034956e-09], "target_probs": 0.9999973773956299}}


{"result": {"time": "2021-02-21 06:15:25.711690", "n_pass": [118, 18, 18], "n_token": 31, "loss": [0.28324949741363525, 2.3126869564293884e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#INDENT#", "'Ensure that the row dict with nested repeated records is correctly\\n        transformed to a log dict.\\n        '", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 18, "repair_targets": [5], "repair_candidates": [6, 18, 20, 5, 11, 29, 0, 15, 23, 13, 27]}}
{"prediction": {"error_location": 0.7533318400382996, "repair_targets": [0.9999768733978271], "repair_candidates": [1.30344642457203e-05, 0.9999768733978271, 4.618877937900834e-06, 1.4313468454929534e-07, 7.71483541939233e-07, 3.36014181812061e-06, 2.2276445577062987e-08, 7.899037868241976e-09, 6.3675225092652e-09, 1.0492276487639174e-06, 8.634064840862266e-08], "target_probs": 0.9999768733978271}}


{"result": {"time": "2021-02-21 06:15:25.783397", "n_pass": [119, 19, 19], "n_token": 29, "loss": [0.008507202379405499, 3.576279254957626e-07], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "=", "{", "#NEWLINE#", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 16, "repair_targets": [3], "repair_candidates": [4, 16, 18, 3, 9, 27, 0, 13, 21, 11, 25]}}
{"prediction": {"error_location": 0.9915287494659424, "repair_targets": [0.9999996423721313], "repair_candidates": [2.3608235721894744e-07, 0.9999996423721313, 9.403720468981192e-08, 4.494361327544993e-09, 6.535803898088943e-09, 1.956944117864623e-08, 4.3817230399589846e-10, 1.9597211353694632e-10, 1.0295517910430263e-10, 1.6789504897474217e-08, 3.509598389683788e-09], "target_probs": 0.9999996423721313}}


{"result": {"time": "2021-02-21 06:15:25.854970", "n_pass": [121, 20, 20], "n_token": 26, "loss": [0.10698466002941132, 0.004957905970513821], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "=", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 13, "repair_targets": [3], "repair_candidates": [4, 13, 15, 3, 6, 24, 0, 10, 18, 8, 22]}}
{"prediction": {"error_location": 0.8985394835472107, "repair_targets": [0.9950543642044067], "repair_candidates": [2.872843288059812e-05, 0.9950543642044067, 0.004671252798289061, 5.409958976088092e-05, 7.519183213844371e-07, 2.4211371965066064e-06, 6.336446745081048e-08, 1.3854071312380256e-07, 1.0538771633150645e-08, 5.384912219597027e-05, 0.00013440709153655916], "target_probs": 0.9950543642044067}}


{"result": {"time": "2021-02-21 06:15:25.999052", "n_pass": [152, 22, 21], "n_token": 25, "loss": [0.6056746244430542, 0.027862928807735443], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "=", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [4, 12, 14, 3, 6, 23, 0, 9, 17, 7, 21]}}
{"prediction": {"error_location": 0.5457061529159546, "repair_targets": [0.9725216627120972], "repair_candidates": [3.352227940922603e-05, 0.9725216627120972, 0.02739250287413597, 2.64041664195247e-05, 2.3299403437704314e-06, 6.349533578031696e-06, 5.237595814833185e-07, 7.441910270244989e-07, 1.163860297026531e-08, 3.43133081059932e-07, 1.5695941328885965e-05], "target_probs": 0.9725216627120972}}


{"result": {"time": "2021-02-21 06:15:26.071170", "n_pass": [154, 23, 22], "n_token": 24, "loss": [0.09502124041318893, 0.008838437497615814], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "assertEquals", "(", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [3], "repair_candidates": [4, 11, 13, 3, 6, 22, 0, 8, 16, 7, 20]}}
{"prediction": {"error_location": 0.9093537330627441, "repair_targets": [0.9912005066871643], "repair_candidates": [4.416688170749694e-05, 0.9912005066871643, 0.008036422543227673, 0.00035733202821575105, 7.246353106893366e-06, 6.189415216795169e-06, 2.600559355414589e-06, 2.5452961835981114e-06, 3.768973577678025e-09, 0.0002315514866495505, 0.00011143684241687879], "target_probs": 0.9912005066871643}}


{"result": {"time": "2021-02-21 06:15:26.212869", "n_pass": [160, 25, 23], "n_token": 22, "loss": [0.3536750078201294, 0.34574729204177856], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 11, "repair_targets": [3], "repair_candidates": [4, 11, 13, 3, 6, 20, 0, 8, 16, 7, 18]}}
{"prediction": {"error_location": 0.7021029591560364, "repair_targets": [0.7076913118362427], "repair_candidates": [0.0007328601204790175, 0.7076913118362427, 0.035877373069524765, 0.004192020278424025, 0.18013860285282135, 0.0001424776273779571, 0.00040297562372870743, 0.00029334943974390626, 6.282062258833321e-06, 0.06431446969509125, 0.006208280101418495], "target_probs": 0.7076913118362427}}


{"result": {"time": "2021-02-21 06:15:26.285369", "n_pass": [164, 26, 24], "n_token": 21, "loss": [0.29649993777275085, 0.6303536891937256], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", ".", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [3, 10, 12, 2, 5, 19, 0, 7, 15, 6, 17]}}
{"prediction": {"error_location": 0.7434157133102417, "repair_targets": [0.5324034690856934], "repair_candidates": [0.0016924272058531642, 0.5324034690856934, 0.20011655986309052, 0.012464444153010845, 0.1626136749982834, 0.00043559446930885315, 0.0008225223864428699, 0.0008165643666870892, 3.389484481886029e-05, 0.07441205531358719, 0.014188788831233978], "target_probs": 0.5324034690856934}}


{"result": {"time": "2021-02-21 06:15:26.927963", "n_pass": [202, 35, 25], "n_token": 20, "loss": [0.4394068717956543, 0.4056110084056854], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", "actual", ",", "expected", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [3, 10, 12, 2, 5, 18, 0, 7, 15, 6, 16]}}
{"prediction": {"error_location": 0.6444185972213745, "repair_targets": [0.6665694117546082], "repair_candidates": [0.0027690136339515448, 0.6665694117546082, 0.22354158759117126, 0.018313512206077576, 0.002050436567515135, 0.0008306351373903453, 0.0009692983003333211, 0.001132381847128272, 0.00040137750329449773, 0.06356973201036453, 0.019852640107274055], "target_probs": 0.6665694117546082}}


{"result": {"time": "2021-02-21 06:15:26.998729", "n_pass": [204, 36, 26], "n_token": 19, "loss": [0.3922264575958252, 0.5678566694259644], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", "actual", "expected", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [3, 10, 12, 2, 5, 17, 0, 7, 15, 6, 16]}}
{"prediction": {"error_location": 0.6755511164665222, "repair_targets": [0.5667388439178467], "repair_candidates": [0.0029350921977311373, 0.5667388439178467, 0.17338362336158752, 0.024891499429941177, 0.001589666586369276, 0.0014223502948880196, 0.0003514461568556726, 0.00026693622930906713, 0.000541799992788583, 0.16778860986232758, 0.060090161859989166], "target_probs": 0.5667388439178467}}


{"result": {"time": "2021-02-21 06:15:27.069726", "n_pass": [206, 37, 27], "n_token": 18, "loss": [0.2613717317581177, 0.5970964431762695], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "#NEWLINE#", "schema", "row", "#NEWLINE#", "expected", "actual", "self", "_transform_row", "(", "row", ",", "row", ")", "#NEWLINE#", "self", "actual", "expected"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [3, 10, 12, 2, 5, 17, 0, 7, 15, 6, 16]}}
{"prediction": {"error_location": 0.7699945569038391, "repair_targets": [0.5504074692726135], "repair_candidates": [0.0035072832833975554, 0.5504074692726135, 0.1848956197500229, 0.1422581970691681, 0.025940783321857452, 0.0027072890661656857, 0.0011852540774270892, 0.0013913135044276714, 0.0012132272822782397, 0.08619296550750732, 0.00030054248054511845], "target_probs": 0.5504074692726135}}




Minimal simplified tokens:

['self', '#NEWLINE#', 'schema', 'row', '#NEWLINE#', 'expected', 'actual', 'self', '_transform_row', '(', 'row', ',', 'row', ')', '#NEWLINE#', 'self', 'actual', 'expected']
