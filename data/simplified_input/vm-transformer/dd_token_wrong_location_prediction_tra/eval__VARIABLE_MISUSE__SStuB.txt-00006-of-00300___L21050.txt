
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "=", "Array", "(", ")", "#NEWLINE#", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "backend", ".", "get", "(", ")", ".", "af_hamming_matcher", "(", "ct", ".", "pointer", "(", "idx", ".", "arr", ")", ",", "ct", ".", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"], "error_location": [69], "repair_targets": [6], "repair_candidates": [2, 59, 4, 63, 69, 10, 74, 6, 19, 81, 25, 54, 83], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "arrayfire/arrayfire-python/arrayfire/vision.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00006-of-00300", "js_count": 21050, "results": {"model": "transformer", "prob": {"loc": [[0.22220483422279358, 5.23385369888274e-06, 3.174518860760145e-05, 4.238744111262349e-07, 2.592551027191803e-05, 3.5106657492178783e-07, 1.5143878044909798e-05, 1.4494188462776947e-06, 1.6076319298008457e-06, 3.698946500207967e-07, 5.977031833026558e-06, 1.7693702147880686e-06, 5.222913841862464e-06, 1.8513746624648775e-07, 7.986684522620635e-07, 1.3000686749364831e-06, 6.620726935580024e-07, 3.2887774068512954e-06, 6.313555331871612e-07, 2.4461942302878015e-06, 5.263764251139946e-07, 8.45666022541991e-07, 2.8415983251761645e-05, 4.903156877844594e-06, 2.2282031295617344e-06, 1.3088316563880653e-06, 3.4947322546940995e-07, 1.505674504187482e-06, 8.678352969582193e-06, 3.947541699744761e-06, 2.0792601844732417e-06, 5.1340953177714255e-06, 3.762467315482354e-07, 2.272860228913487e-07, 2.2151968437356118e-07, 3.034353994735284e-07, 3.554558361429372e-06, 7.25253926248115e-07, 3.932532024464308e-07, 8.59353193050083e-08, 1.940639549502521e-06, 3.828709395747865e-06, 1.6433593827969162e-06, 1.420216563019494e-06, 1.9997610252175946e-06, 0.05956997349858284, 4.3318977986928076e-06, 2.7233684249949874e-06, 1.067595576387248e-06, 2.9685568279091967e-06, 3.3427604648750275e-06, 3.5571420085034333e-06, 7.595161832796293e-07, 1.2613298849828425e-06, 0.07848150283098221, 2.7943128770857584e-06, 1.7483496321801795e-06, 1.1931101653317455e-06, 1.334566422883654e-05, 0.06264396011829376, 3.2766117783467053e-06, 2.367231900279876e-06, 2.1294029011187376e-06, 0.061256635934114456, 2.803559254971333e-06, 3.559076276360429e-06, 1.5268060451489873e-06, 4.1127873373625334e-06, 1.7849637515610084e-05, 0.18975524604320526, 1.331089379164041e-06, 1.3591536571766483e-06, 9.35595664941502e-07, 1.9444482859398704e-06, 0.022023459896445274, 4.434562015376287e-06, 4.879111202171771e-06, 2.546013092796784e-06, 3.5692123674380127e-06, 5.032673584537406e-07, 1.2405459983710898e-06, 0.058364175260066986, 4.741881639347412e-06, 0.2454051524400711, 9.727074029797222e-06]], "pointer": [[0.0, 0.0, 0.028505509719252586, 0.0, 0.03572370857000351, 0.0, 0.6871873140335083, 0.0, 0.0, 0.0, 0.007122980430722237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02188916690647602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04825557768344879, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04918268695473671, 0.0, 0.0, 0.0, 0.0, 0.1069798618555069, 0.0, 0.0, 0.0, 0.013052391819655895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017205848125740886, 0.0, 0.0, 0.0, 0.0, 0.00010987327550537884, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017175577522721142, 0.0, 9.854359814198688e-05, 0.0]], "target": [0.6871873140335083]}, "loss": [1.662020206451416, 0.37514835596084595], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [83]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:17:17.070811", "n_pass": [1, 1, 1], "n_token": 85, "loss": [1.4048447608947754, 0.37514835596084595], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "=", "Array", "(", ")", "#NEWLINE#", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "backend", ".", "get", "(", ")", ".", "af_hamming_matcher", "(", "ct", ".", "pointer", "(", "idx", ".", "arr", ")", ",", "ct", ".", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 83, "repair_targets": [6], "repair_candidates": [2, 59, 4, 63, 69, 10, 74, 6, 19, 81, 25, 54, 83]}}
{"prediction": {"error_location": 0.2454051524400711, "repair_targets": [0.6871873140335083], "repair_candidates": [0.028505509719252586, 0.03572370857000351, 0.6871873140335083, 0.007122980430722237, 0.02188916690647602, 0.04825557768344879, 0.04918268695473671, 0.1069798618555069, 0.013052391819655895, 0.0017205848125740886, 0.00010987327550537884, 0.00017175577522721142, 9.854359814198688e-05], "target_probs": 0.6871873140335083}}


{"result": {"time": "2021-02-21 06:17:17.188034", "n_pass": [24, 3, 2], "n_token": 74, "loss": [0.8875129222869873, 0.1967175155878067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "=", "Array", "(", ")", "#NEWLINE#", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "backend", ".", "get", "(", ")", ".", "af_hamming_matcher", "(", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 72, "repair_targets": [6], "repair_candidates": [2, 48, 4, 52, 58, 10, 63, 6, 19, 70, 25, 43, 72]}}
{"prediction": {"error_location": 0.41167834401130676, "repair_targets": [0.8214226365089417], "repair_candidates": [0.01979892887175083, 0.01747359149158001, 0.8214226365089417, 0.005829573608934879, 0.009286463260650635, 0.016930220648646355, 0.023773999884724617, 0.07068222016096115, 0.014081855304539204, 0.000492657592985779, 5.389960278989747e-05, 0.00011002692190231755, 6.38866113149561e-05], "target_probs": 0.8214226365089417}}


{"result": {"time": "2021-02-21 06:17:17.303340", "n_pass": [56, 5, 3], "n_token": 69, "loss": [0.7382632493972778, 0.15327291190624237], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "backend", ".", "get", "(", ")", ".", "af_hamming_matcher", "(", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 67, "repair_targets": [6], "repair_candidates": [2, 43, 4, 47, 53, 10, 58, 6, 19, 65, 20, 38, 67]}}
{"prediction": {"error_location": 0.4779432713985443, "repair_targets": [0.85789555311203], "repair_candidates": [0.013978458940982819, 0.01285944040864706, 0.85789555311203, 0.005813597235828638, 0.009200872853398323, 0.020404651761054993, 0.03398212417960167, 0.03845455124974251, 0.006840548012405634, 0.0003798171819653362, 5.99055529164616e-05, 6.849072087788954e-05, 6.212698644958436e-05], "target_probs": 0.85789555311203}}


{"result": {"time": "2021-02-21 06:17:17.416563", "n_pass": [58, 7, 4], "n_token": 64, "loss": [0.9383275508880615, 0.19185583293437958], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "backend", ".", "(", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 62, "repair_targets": [6], "repair_candidates": [2, 38, 4, 42, 48, 10, 53, 6, 19, 60, 20, 33, 62]}}
{"prediction": {"error_location": 0.3912816643714905, "repair_targets": [0.8254258632659912], "repair_candidates": [0.01595795340836048, 0.015723273158073425, 0.8254258632659912, 0.004539417568594217, 0.007298110518604517, 0.02474694885313511, 0.03723097965121269, 0.06109541282057762, 0.0072710104286670685, 0.000515640014782548, 9.747275908011943e-05, 5.890467218705453e-05, 3.8921585655771196e-05], "target_probs": 0.8254258632659912}}


{"result": {"time": "2021-02-21 06:17:17.533209", "n_pass": [95, 9, 5], "n_token": 61, "loss": [1.0099767446517944, 0.18026961386203766], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ".", "arr", ")", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 59, "repair_targets": [6], "repair_candidates": [2, 35, 4, 39, 45, 10, 50, 6, 19, 57, 20, 30, 59]}}
{"prediction": {"error_location": 0.36422744393348694, "repair_targets": [0.8350450396537781], "repair_candidates": [0.01451305951923132, 0.01347229816019535, 0.8350450396537781, 0.003537088166922331, 0.007110361475497484, 0.018601275980472565, 0.02929862029850483, 0.07439166307449341, 0.0036429567262530327, 0.00022401456953957677, 7.191058102762327e-05, 5.7198263675672933e-05, 3.440096043050289e-05], "target_probs": 0.8350450396537781}}


{"result": {"time": "2021-02-21 06:17:17.590405", "n_pass": [97, 10, 6], "n_token": 58, "loss": [0.3614110052585602, 0.05689871311187744], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", ".", "arr", ",", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 56, "repair_targets": [6], "repair_candidates": [2, 32, 4, 36, 42, 10, 47, 6, 19, 54, 20, 30, 56]}}
{"prediction": {"error_location": 0.6966925859451294, "repair_targets": [0.9446897506713867], "repair_candidates": [0.005670684855431318, 0.004530583508312702, 0.9446897506713867, 0.001770643750205636, 0.004479483235627413, 0.0009690453880466521, 1.5288174836314283e-05, 0.037499528378248215, 0.00023206975311040878, 4.363963671494275e-05, 2.1700712750316598e-05, 6.236578337848186e-05, 1.5149769751587883e-05], "target_probs": 0.9446897506713867}}


{"result": {"time": "2021-02-21 06:17:17.647487", "n_pass": [100, 11, 7], "n_token": 55, "loss": [0.25122642517089844, 0.009652980603277683], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", ")", ",", "c_dim_t", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 53, "repair_targets": [6], "repair_candidates": [2, 32, 4, 36, 39, 10, 44, 6, 19, 51, 20, 30, 53]}}
{"prediction": {"error_location": 0.7778462767601013, "repair_targets": [0.9903934597969055], "repair_candidates": [0.0014991969801485538, 0.00083723827265203, 0.9903934597969055, 0.001540987053886056, 0.005101799964904785, 0.0004549674631562084, 4.540189820545493e-06, 4.3009054934373125e-05, 2.0502187908277847e-05, 1.2333938684605528e-05, 6.0791380747104995e-06, 7.526858826167881e-05, 1.0683270375011489e-05], "target_probs": 0.9903934597969055}}


{"result": {"time": "2021-02-21 06:17:17.705130", "n_pass": [102, 12, 8], "n_token": 52, "loss": [0.47234731912612915, 0.03333810716867447], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", ")", ")", "#NEWLINE#", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 50, "repair_targets": [6], "repair_candidates": [2, 32, 4, 36, 39, 10, 41, 6, 19, 48, 20, 30, 50]}}
{"prediction": {"error_location": 0.6235369443893433, "repair_targets": [0.9672114849090576], "repair_candidates": [0.003293659770861268, 0.005253852345049381, 0.9672114849090576, 0.002651084214448929, 0.01988028548657894, 0.0008528738981112838, 1.1243868357269093e-05, 0.00014114346413407475, 5.5665193940512836e-05, 0.000277788465609774, 1.622727904759813e-05, 0.0003343462012708187, 2.0390776626300067e-05], "target_probs": 0.9672114849090576}}


{"result": {"time": "2021-02-21 06:17:17.765160", "n_pass": [104, 13, 9], "n_token": 49, "loss": [0.15175442397594452, 0.006476227659732103], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hamming_matcher(", "query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 47, "repair_targets": [6], "repair_candidates": [2, 32, 4, 36, 39, 10, 41, 6, 19, 45, 20, 30, 47]}}
{"prediction": {"error_location": 0.8591992259025574, "repair_targets": [0.9935446977615356], "repair_candidates": [0.0007807793444953859, 0.001479105674661696, 0.9935446977615356, 0.0007526641129516065, 0.0032206843607127666, 0.0001057721528923139, 1.0001630244005355e-06, 3.48980538547039e-05, 1.629596226848662e-05, 4.855545557802543e-05, 1.0815402902153437e-06, 1.2363357200229075e-05, 2.08311189453525e-06], "target_probs": 0.9935446977615356}}


{"result": {"time": "2021-02-21 06:17:17.822470", "n_pass": [107, 14, 10], "n_token": 47, "loss": [0.10224898159503937, 0.03573073074221611], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "0", ",", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 45, "repair_targets": [4], "repair_candidates": [0, 30, 2, 34, 37, 8, 39, 4, 17, 43, 18, 28, 45]}}
{"prediction": {"error_location": 0.9028046727180481, "repair_targets": [0.9649000763893127], "repair_candidates": [7.534238829975948e-05, 0.03137407451868057, 0.9649000763893127, 0.0008190839434973896, 0.001812450704164803, 3.455418118392117e-05, 3.7392808849290304e-07, 0.0009013567469082773, 2.1322632164810784e-05, 4.910553980153054e-05, 6.578709417226491e-07, 1.0543175449129194e-05, 9.872271675703814e-07], "target_probs": 0.9649000763893127}}


{"result": {"time": "2021-02-21 06:17:17.880102", "n_pass": [111, 15, 11], "n_token": 45, "loss": [0.09076342731714249, 0.127298504114151], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "num_nearest", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 43, "repair_targets": [4], "repair_candidates": [0, 28, 2, 32, 35, 6, 37, 4, 15, 41, 16, 26, 43]}}
{"prediction": {"error_location": 0.9132339358329773, "repair_targets": [0.8804708123207092], "repair_candidates": [4.778935181093402e-05, 0.11723173409700394, 0.8804708123207092, 0.00032062502577900887, 0.0011353412410244346, 2.657185359566938e-05, 4.658913042021595e-07, 0.0006059520528651774, 6.663455133093521e-05, 8.101117418846115e-05, 6.855221954538138e-07, 1.1274559255980421e-05, 1.0550634215178434e-06], "target_probs": 0.8804708123207092}}


{"result": {"time": "2021-02-21 06:17:17.936921", "n_pass": [113, 16, 12], "n_token": 43, "loss": [0.07030842453241348, 0.17331811785697937], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "num_nearest", "=", ":", "#NEWLINE#", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 41, "repair_targets": [4], "repair_candidates": [0, 26, 2, 30, 33, 6, 35, 4, 13, 39, 14, 24, 41]}}
{"prediction": {"error_location": 0.9321063160896301, "repair_targets": [0.8408700823783875], "repair_candidates": [5.4347783589037135e-05, 0.15625262260437012, 0.8408700823783875, 0.00022823364997748286, 0.0017548130126670003, 4.154521593591198e-05, 8.790073593445413e-07, 0.0005820818478241563, 9.697728819446638e-05, 0.00010676041711121798, 5.934516593697481e-07, 9.872870577964932e-06, 1.2828008948417846e-06], "target_probs": 0.8408700823783875}}


{"result": {"time": "2021-02-21 06:17:17.993651", "n_pass": [114, 17, 13], "n_token": 41, "loss": [0.06942900270223618, 0.11319832503795624], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "num_nearest", "=", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "Array", "(", ")", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 39, "repair_targets": [4], "repair_candidates": [0, 24, 2, 28, 31, 6, 33, 4, 11, 37, 12, 22, 39]}}
{"prediction": {"error_location": 0.93292635679245, "repair_targets": [0.8929735422134399], "repair_candidates": [3.46939341397956e-05, 0.10397473722696304, 0.8929735422134399, 0.00021600161562673748, 0.0016437474405393004, 3.524354178807698e-05, 4.266096027549793e-07, 0.0008860922534950078, 0.00011230066593270749, 0.00011550360795808956, 4.4131670051683614e-07, 6.345081146719167e-06, 9.144818591266812e-07], "target_probs": 0.8929735422134399}}


{"result": {"time": "2021-02-21 06:17:18.109927", "n_pass": [117, 19, 14], "n_token": 38, "loss": [0.17988866567611694, 0.6326061487197876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "num_nearest", "=", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ".", "arr", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 36, "repair_targets": [4], "repair_candidates": [0, 21, 2, 25, 28, 6, 30, 4, 11, 34, 12, 19, 36]}}
{"prediction": {"error_location": 0.8353632092475891, "repair_targets": [0.5312055945396423], "repair_candidates": [6.071951793273911e-05, 0.4640987515449524, 0.5312055945396423, 0.0002016014332184568, 0.001514732837677002, 2.269277501909528e-05, 2.538534431550943e-07, 0.0017953553469851613, 0.0005403357790783048, 0.000558121653739363, 4.744741772810812e-07, 1.0127262157766381e-06, 3.4505993085076625e-07], "target_probs": 0.5312055945396423}}


{"result": {"time": "2021-02-21 06:17:18.564819", "n_pass": [168, 27, 15], "n_token": 36, "loss": [0.19143079221248627, 0.6012317538261414], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "=", "num_nearest", "=", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [0, 21, 2, 23, 26, 6, 28, 4, 11, 32, 12, 19, 34]}}
{"prediction": {"error_location": 0.8257767558097839, "repair_targets": [0.5481360554695129], "repair_candidates": [5.3469339036382735e-05, 0.4462236166000366, 0.5481360554695129, 0.00021238667250145227, 0.001006216392852366, 1.1995332897640765e-05, 6.26923153390635e-08, 0.0005523194558918476, 0.001357409288175404, 0.0024453613441437483, 2.756902119926963e-07, 4.6855541313561844e-07, 3.5021432154280774e-07], "target_probs": 0.5481360554695129}}


{"result": {"time": "2021-02-21 06:17:18.852547", "n_pass": [181, 32, 16], "n_token": 35, "loss": [0.14144301414489746, 0.2942352890968323], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#INDENT#", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 33, "repair_targets": [4], "repair_candidates": [0, 20, 2, 22, 25, 5, 27, 4, 10, 31, 11, 18, 33]}}
{"prediction": {"error_location": 0.8681046366691589, "repair_targets": [0.7451011538505554], "repair_candidates": [4.7768757212907076e-05, 0.24833530187606812, 0.7451011538505554, 0.0006692687165923417, 0.001045167213305831, 5.952324045210844e-06, 4.776230611014398e-08, 0.001032698550261557, 0.0008663282496854663, 0.0028951838612556458, 2.423193166123383e-07, 5.58324757093942e-07, 2.98420218314277e-07], "target_probs": 0.7451011538505554}}


{"result": {"time": "2021-02-21 06:17:18.965991", "n_pass": [184, 34, 17], "n_token": 34, "loss": [0.1794251948595047, 0.43292081356048584], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "pointer", "(", "dist", ",", "query", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 32, "repair_targets": [4], "repair_candidates": [0, 19, 2, 21, 24, 5, 26, 4, 9, 30, 10, 17, 32]}}
{"prediction": {"error_location": 0.8357504606246948, "repair_targets": [0.648611843585968], "repair_candidates": [7.22775948815979e-05, 0.3371471166610718, 0.648611843585968, 0.0011356117902323604, 0.0023295609280467033, 9.641525139159057e-06, 5.172349659687825e-08, 0.002121579833328724, 0.001639859052374959, 0.00693102041259408, 2.604232349767699e-07, 8.218596576625714e-07, 3.184977686032653e-07], "target_probs": 0.648611843585968}}


{"result": {"time": "2021-02-21 06:17:19.364732", "n_pass": [193, 41, 18], "n_token": 33, "loss": [0.2697289288043976, 0.5155360102653503], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", ",", "query", ",", "database", "c_dim_t", "(", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 31, "repair_targets": [4], "repair_candidates": [0, 18, 2, 20, 23, 5, 25, 4, 9, 29, 10, 16, 31]}}
{"prediction": {"error_location": 0.7635865211486816, "repair_targets": [0.5971804261207581], "repair_candidates": [6.906067574163899e-05, 0.38744187355041504, 0.5971804261207581, 0.0009228908456861973, 0.0016920496709644794, 8.203046490962151e-06, 6.765942117681334e-08, 0.003994372673332691, 0.0012177728349342942, 0.007472262252122164, 2.4336250703527185e-07, 5.504090836438991e-07, 2.002248464805234e-07], "target_probs": 0.5971804261207581}}


{"result": {"time": "2021-02-21 06:17:19.424899", "n_pass": [197, 42, 19], "n_token": 31, "loss": [0.24127817153930664, 0.1563754677772522], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", ",", "query", ",", "database", "database", "(", "num_nearest", ")", "return", "(", "index", ",", "dist", ")"]}}
{"position": {"error_location": 29, "repair_targets": [4], "repair_candidates": [0, 18, 2, 20, 21, 5, 23, 4, 9, 27, 10, 16, 29]}}
{"prediction": {"error_location": 0.7856230735778809, "repair_targets": [0.8552380204200745], "repair_candidates": [3.857367119053379e-05, 0.1399882435798645, 0.8552380204200745, 0.00046633745660074055, 0.0006955767166800797, 4.669175723392982e-06, 3.270367088248349e-08, 0.002272227080538869, 0.0005508980830200016, 0.0007446393719874322, 2.8311512778600445e-07, 4.3331507981747563e-07, 9.156833868928516e-08], "target_probs": 0.8552380204200745}}


{"result": {"time": "2021-02-21 06:17:19.481955", "n_pass": [200, 43, 20], "n_token": 29, "loss": [0.2600366771221161, 0.12183552980422974], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "'\\n    Hamming distance matcher.\\n\\n    Parameters\\n    -----------\\n\\n    query    : af.Array\\n             A query feature descriptor\\n\\n    database : af.Array\\n             A multi dimensional array containing the feature descriptor database.\\n\\n    dim      : scalar. optional. default: 0.\\n             Specifies the dimension along which feature descriptor lies.\\n\\n    num_nearest: scalar. optional. default: 1.\\n             Specifies the number of nearest neighbors to find.\\n\\n    Returns\\n    ---------\\n\\n    (location, distance): tuple of af.Array\\n                          location and distances of closest matches.\\n\\n    '", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", ",", "query", ",", "database", "database", "(", "num_nearest", ")", "index", ",", "dist", ")"]}}
{"position": {"error_location": 27, "repair_targets": [4], "repair_candidates": [0, 18, 2, 20, 21, 5, 23, 4, 9, 25, 10, 16, 27]}}
{"prediction": {"error_location": 0.7710232734680176, "repair_targets": [0.8852939605712891], "repair_candidates": [1.1431532584538218e-05, 0.11340966820716858, 0.8852939605712891, 0.00019200099632143974, 1.732956661726348e-05, 2.189278802688932e-06, 1.911474001303759e-08, 0.0007457026513293386, 0.00014691913384012878, 0.00018052673840429634, 2.3831971418530884e-07, 3.9091773373911565e-08, 1.543401140224887e-08], "target_probs": 0.8852939605712891}}


{"result": {"time": "2021-02-21 06:17:19.707545", "n_pass": [210, 47, 21], "n_token": 28, "loss": [0.3794783353805542, 0.6219239234924316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", ",", "query", ",", "database", "database", "(", "num_nearest", ")", "index", ",", "dist", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [0, 17, 2, 19, 20, 5, 22, 4, 8, 24, 9, 15, 26]}}
{"prediction": {"error_location": 0.6842182874679565, "repair_targets": [0.5369104743003845], "repair_candidates": [2.161281372536905e-05, 0.4619016647338867, 0.5369104743003845, 0.00013856581063009799, 3.8686554034939036e-05, 1.4623857396145468e-06, 2.7596914975447362e-08, 0.0006962464540265501, 0.00012749500456266105, 0.0001633835054235533, 2.1929895410721656e-07, 7.474091034964658e-08, 1.831365459281642e-08], "target_probs": 0.5369104743003845}}


{"result": {"time": "2021-02-21 06:17:20.277893", "n_pass": [248, 57, 22], "n_token": 27, "loss": [0.1628446877002716, 0.24802401661872864], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", ",", "database", "database", "(", "num_nearest", ")", "index", ",", "dist", ")"]}}
{"position": {"error_location": 25, "repair_targets": [4], "repair_candidates": [0, 16, 2, 18, 19, 5, 21, 4, 8, 23, 9, 15, 25]}}
{"prediction": {"error_location": 0.8497231602668762, "repair_targets": [0.7803412079811096], "repair_candidates": [2.68277676696016e-06, 0.2189430147409439, 0.7803412079811096, 3.293623376521282e-05, 9.70215660345275e-06, 5.433270757748687e-07, 4.099546924152264e-09, 0.0005852821050211787, 4.161045217188075e-05, 4.30193031206727e-05, 3.197729370185698e-08, 1.7646407002303022e-08, 2.9303282023107613e-09], "target_probs": 0.7803412079811096}}


{"result": {"time": "2021-02-21 06:17:20.334688", "n_pass": [249, 58, 23], "n_token": 26, "loss": [0.6206044554710388, 0.38160115480422974], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", "database", "database", "(", "num_nearest", ")", "index", ",", "dist", ")"]}}
{"position": {"error_location": 24, "repair_targets": [4], "repair_candidates": [0, 16, 2, 17, 18, 5, 20, 4, 8, 22, 9, 15, 24]}}
{"prediction": {"error_location": 0.537619411945343, "repair_targets": [0.6827673316001892], "repair_candidates": [7.004944563959725e-06, 0.31547170877456665, 0.6827673316001892, 6.25427855993621e-05, 1.301397514907876e-05, 0.0002375033072894439, 1.2385827119487658e-07, 0.0010771920206025243, 0.00018062579329125583, 0.0001827988598961383, 4.694629041068765e-08, 1.0274550277244998e-07, 1.9598216383087674e-08], "target_probs": 0.6827673316001892}}


{"result": {"time": "2021-02-21 06:17:20.391004", "n_pass": [252, 59, 24], "n_token": 25, "loss": [0.5160106420516968, 0.0014016313944011927], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", ",", "dist", ")"]}}
{"position": {"error_location": 23, "repair_targets": [4], "repair_candidates": [0, 16, 2, 17, 18, 5, 19, 4, 8, 21, 9, 15, 23]}}
{"prediction": {"error_location": 0.5968970060348511, "repair_targets": [0.9985993504524231], "repair_candidates": [2.856566061382182e-05, 2.6151972633670084e-05, 0.9985993504524231, 0.000768010679166764, 8.025103306863457e-05, 0.0004685089807026088, 3.4040132845802873e-07, 2.750044768617954e-05, 1.547139305557721e-07, 8.73277983259868e-08, 5.053598215454258e-07, 3.8213266861930606e-07, 3.421684979798556e-08], "target_probs": 0.9985993504524231}}


{"result": {"time": "2021-02-21 06:17:20.506315", "n_pass": [256, 61, 25], "n_token": 24, "loss": [0.7730796337127686, 0.002062001498416066], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist", ")"]}}
{"position": {"error_location": 22, "repair_targets": [4], "repair_candidates": [0, 16, 2, 17, 18, 5, 19, 4, 8, 21, 9, 15, 22]}}
{"prediction": {"error_location": 0.46158939599990845, "repair_targets": [0.9979401230812073], "repair_candidates": [6.615604797843844e-05, 6.40273283352144e-05, 0.9979401230812073, 0.0009148272220045328, 0.0001458728511352092, 0.0008381875231862068, 4.773527848556114e-07, 2.7826994482893497e-05, 4.456585429579718e-07, 2.9609336138491926e-07, 1.0683088476071134e-06, 6.506060685751436e-07, 7.316799610634916e-08], "target_probs": 0.9979401230812073}}


{"result": {"time": "2021-02-21 06:17:20.563180", "n_pass": [258, 62, 26], "n_token": 23, "loss": [0.7834267020225525, 0.0018392419442534447], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "=", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 22, "repair_targets": [4], "repair_candidates": [0, 16, 2, 17, 18, 5, 19, 4, 8, 21, 9, 15, 22]}}
{"prediction": {"error_location": 0.456837922334671, "repair_targets": [0.9981624484062195], "repair_candidates": [8.520425762981176e-05, 7.345569611061364e-05, 0.9981624484062195, 0.0010937033221125603, 0.00013406159996520728, 0.0004144490521866828, 4.365545294149342e-07, 3.2700107112759724e-05, 8.425914757026476e-07, 5.290316380524018e-07, 1.2995106999369455e-06, 7.673704658373026e-07, 1.5979036049884598e-07], "target_probs": 0.9981624484062195}}


{"result": {"time": "2021-02-21 06:17:20.847827", "n_pass": [269, 67, 27], "n_token": 22, "loss": [0.780249297618866, 0.017565257847309113], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "#NEWLINE#", "safe_call", "(", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 21, "repair_targets": [4], "repair_candidates": [0, 15, 2, 16, 17, 5, 18, 4, 8, 20, 9, 14, 21]}}
{"prediction": {"error_location": 0.45829179883003235, "repair_targets": [0.9825881123542786], "repair_candidates": [0.0027721456717699766, 0.0026420888025313616, 0.9825881123542786, 0.010525206103920937, 0.00011670823732856661, 0.0007527971174567938, 6.390481576090679e-05, 0.00022359215654432774, 8.031213656067848e-05, 1.7353388102492318e-05, 3.40365368174389e-05, 0.00015197198081295937, 3.180345811415464e-05], "target_probs": 0.9825881123542786}}


{"result": {"time": "2021-02-21 06:17:20.904237", "n_pass": [270, 68, 28], "n_token": 21, "loss": [0.753402829170227, 0.020844008773565292], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "safe_call", "(", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 20, "repair_targets": [4], "repair_candidates": [0, 14, 2, 15, 16, 5, 17, 4, 8, 19, 9, 13, 20]}}
{"prediction": {"error_location": 0.47076189517974854, "repair_targets": [0.9793717265129089], "repair_candidates": [0.0011128379264846444, 0.002416559960693121, 0.9793717265129089, 0.016190169379115105, 0.0001556558854645118, 3.0465758754871786e-05, 0.00027027056785300374, 0.0003809645713772625, 2.8204691261635162e-05, 9.76860974333249e-06, 1.5554956917185336e-05, 1.0087661394209135e-05, 7.717759217484854e-06], "target_probs": 0.9793717265129089}}


{"result": {"time": "2021-02-21 06:17:21.016824", "n_pass": [272, 70, 29], "n_token": 20, "loss": [0.754446804523468, 0.056632865220308304], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", ",", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "safe_call", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 19, "repair_targets": [4], "repair_candidates": [0, 13, 2, 14, 15, 5, 16, 4, 8, 18, 9, 12, 19]}}
{"prediction": {"error_location": 0.47027069330215454, "repair_targets": [0.9449409246444702], "repair_candidates": [0.0028211381286382675, 0.004794055130332708, 0.9449409246444702, 0.021472949534654617, 0.00048524883459322155, 3.5063956602243707e-05, 0.00014813810412306339, 0.024965763092041016, 0.0001392985723214224, 3.504128835629672e-05, 3.454111720202491e-05, 6.437137199100107e-05, 6.34429234196432e-05], "target_probs": 0.9449409246444702}}


{"result": {"time": "2021-02-21 06:17:21.244173", "n_pass": [285, 74, 30], "n_token": 19, "loss": [0.8520123958587646, 0.5055976510047913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "safe_call", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 18, "repair_targets": [3], "repair_candidates": [0, 12, 2, 13, 14, 4, 15, 3, 7, 17, 8, 11, 18]}}
{"prediction": {"error_location": 0.42655566334724426, "repair_targets": [0.6031450033187866], "repair_candidates": [0.09353194385766983, 0.023787401616573334, 0.6031450033187866, 0.22267134487628937, 0.02598852664232254, 0.0010894335573539138, 0.004904225934296846, 0.007026312407106161, 0.0046716188080608845, 0.0008909607422538102, 0.002447385573759675, 0.008278537541627884, 0.0015672931913286448], "target_probs": 0.6031450033187866}}


{"result": {"time": "2021-02-21 06:17:21.412460", "n_pass": [292, 77, 31], "n_token": 18, "loss": [0.2840838134288788, 0.6358787417411804], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", ",", "database", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [0, 11, 2, 12, 13, 4, 14, 3, 7, 16, 8, 10, 17]}}
{"prediction": {"error_location": 0.7527035474777222, "repair_targets": [0.5294700264930725], "repair_candidates": [0.0889776423573494, 0.10818735510110855, 0.5294700264930725, 0.1540609449148178, 0.019092634320259094, 0.0021634248550981283, 0.0034677423536777496, 0.02407723478972912, 0.011139205656945705, 0.0030561042949557304, 0.003652104176580906, 0.04771420359611511, 0.0049413819797337055], "target_probs": 0.5294700264930725}}


{"result": {"time": "2021-02-21 06:17:21.584036", "n_pass": [303, 80, 32], "n_token": 17, "loss": [0.29145491123199463, 0.16241168975830078], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", "database", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "(", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [0, 10, 1, 11, 12, 3, 13, 2, 6, 15, 7, 9, 16]}}
{"prediction": {"error_location": 0.7471756935119629, "repair_targets": [0.8500911593437195], "repair_candidates": [0.0014344180235639215, 0.009525241330265999, 0.8500911593437195, 0.00033527970663271844, 0.00019761307339649647, 1.5592897398164496e-05, 1.5654926755814813e-05, 0.09276144951581955, 0.012369188480079174, 0.031815484166145325, 5.378941568778828e-05, 0.0013507925905287266, 3.427688716328703e-05], "target_probs": 0.8500911593437195}}


{"result": {"time": "2021-02-21 06:17:21.752132", "n_pass": [311, 83, 33], "n_token": 16, "loss": [0.2813519537448883, 0.12812256813049316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", "database", "dim", "num_nearest", "=", "#NEWLINE#", "index", "dist", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [0, 9, 1, 10, 11, 3, 12, 2, 6, 14, 7, 8, 15]}}
{"prediction": {"error_location": 0.7547626495361328, "repair_targets": [0.8797455430030823], "repair_candidates": [0.004657980520278215, 0.021740077063441277, 0.8797455430030823, 0.0011729402467608452, 0.002693390939384699, 0.00032961758552119136, 6.68179418426007e-05, 0.0006196547765284777, 0.0032419615890830755, 0.07263492047786713, 0.00013619268429465592, 0.01290532760322094, 5.562668229686096e-05], "target_probs": 0.8797455430030823}}


{"result": {"time": "2021-02-21 06:17:21.923212", "n_pass": [325, 86, 34], "n_token": 15, "loss": [0.15810319781303406, 0.6686142683029175], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["query", "database", "dim", "num_nearest", "=", "index", "dist", "dist", "query", "database", "database", "num_nearest", ")", "index", "dist"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [0, 8, 1, 9, 10, 3, 11, 2, 5, 13, 6, 7, 14]}}
{"prediction": {"error_location": 0.8537616729736328, "repair_targets": [0.5124181509017944], "repair_candidates": [0.001672630663961172, 0.008411666378378868, 0.5124181509017944, 0.002759076189249754, 0.012911899946630001, 0.001037287525832653, 5.515884367923718e-06, 0.0011865976266562939, 0.217336043715477, 0.21921581029891968, 0.000654151663184166, 0.022319773212075233, 7.138727960409597e-05], "target_probs": 0.5124181509017944}}




Minimal simplified tokens:

['query', 'database', 'dim', 'num_nearest', '=', 'index', 'dist', 'dist', 'query', 'database', 'database', 'num_nearest', ')', 'index', 'dist']
