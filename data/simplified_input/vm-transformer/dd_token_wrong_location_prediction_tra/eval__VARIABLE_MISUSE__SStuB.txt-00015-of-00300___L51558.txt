
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "=", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", "user32", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "(", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ")", ",", "rgb", ")"], "error_location": [100], "repair_targets": [85], "repair_candidates": [6, 72, 100, 85, 2, 87, 105, 67, 108, 4, 90, 69, 75, 96], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "chriskiehl/pyrobot/pyrobot.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00015-of-00300", "js_count": 51558, "results": {"model": "transformer", "prob": {"loc": [[0.0993318110704422, 8.791525942797307e-07, 4.050677091527177e-07, 3.500716161397577e-08, 9.186749707623676e-07, 3.9715708055609866e-08, 5.361423518479569e-06, 2.8375632510346804e-08, 5.988925266819933e-08, 6.942413932620184e-08, 4.639305828391116e-08, 2.110413248601617e-07, 6.871118785056751e-08, 8.409378438045678e-08, 7.943925993458834e-06, 7.781165578535365e-08, 0.00021271237346809357, 1.2332749577126378e-07, 9.121215407503769e-05, 8.01726329768826e-08, 6.020909637527438e-08, 7.042304872584282e-08, 3.960208871944815e-08, 2.108360149577493e-06, 9.707802206548877e-08, 1.562950586730949e-07, 0.002059951424598694, 3.1134220535022905e-07, 2.838359023371595e-06, 1.8106129573425278e-07, 9.514844379054921e-08, 3.8038676848373143e-06, 6.190701640207408e-08, 1.5997707691894902e-07, 0.000872825039550662, 4.7438035721825145e-07, 3.269112767156912e-06, 1.9991853150713723e-07, 1.587557392213057e-07, 2.339256980121718e-06, 1.6462063001654315e-07, 1.0764245672589823e-07, 0.0009076246060431004, 6.654729531874182e-07, 6.019962256686995e-06, 3.662533458737016e-07, 2.9576887072835234e-07, 1.3423143485624678e-08, 1.2915239544497581e-08, 8.803520046285485e-08, 3.355344233568758e-07, 0.00110396568197757, 4.888053126705927e-07, 3.125659759461996e-06, 1.0434098385303514e-07, 5.6010254212424115e-08, 2.109732832877853e-07, 0.00045166368363425136, 2.0567337344346015e-07, 2.9548059501394164e-06, 7.058226714207194e-08, 1.623246603799089e-08, 5.497833299727972e-08, 0.002608640817925334, 3.208646148777916e-07, 1.0328128041692253e-07, 1.0422184715253024e-07, 7.330479547817959e-07, 1.920767900287501e-08, 7.718042382975909e-08, 1.1289404255876434e-06, 1.979551313979755e-07, 0.06628884375095367, 4.279735037471255e-07, 1.800707991606032e-07, 1.4865833009025664e-06, 1.6492116117206024e-08, 1.9801298378752108e-08, 7.345563801663957e-08, 7.801177481780996e-09, 6.966910746086796e-07, 1.9762230749620358e-06, 7.452247814399016e-07, 4.464226606160082e-07, 1.8557727798906853e-08, 1.671494283073116e-05, 9.254048904949741e-08, 0.00017807945550885051, 1.3964092104856718e-08, 1.7074166862585116e-06, 0.002072837669402361, 1.361388797249674e-07, 6.307893762880212e-09, 3.023013661618279e-08, 1.3690430478163762e-07, 1.1736207028434364e-07, 0.021824641153216362, 1.126345949842289e-07, 9.356361907464361e-09, 1.534775577738401e-07, 0.3411196768283844, 6.268312802149012e-08, 4.6690974642160654e-08, 2.6792319474111537e-09, 4.878555515119842e-08, 0.4236657917499542, 7.277530755800399e-08, 5.345943066004111e-08, 0.03713293373584747, 3.1310881354329467e-07]], "pointer": [[0.0, 0.0, 0.00021460808056872338, 0.0, 0.03850766271352768, 0.0, 0.0013142783427610993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00208374485373497, 0.0, 0.0008103214204311371, 0.0, 0.0, 0.00018600450130179524, 0.0, 0.0, 0.0009499654988758266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9524602293968201, 0.0, 0.002909745555371046, 0.0, 0.0, 0.00033352221362292767, 0.0, 0.0, 0.0, 0.0, 0.0, 4.56862871942576e-05, 0.0, 0.0, 0.0, 6.0925482102902606e-05, 0.0, 0.0, 0.0, 0.0, 3.081093746004626e-05, 0.0, 0.0, 9.251698793377727e-05, 0.0]], "target": [0.9524602293968201]}, "loss": [1.0755219459533691, 0.04870692640542984], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [105]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 07:21:47.464254", "n_pass": [1, 1, 1], "n_token": 110, "loss": [0.8588103652000427, 0.04870692640542984], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "=", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", "user32", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "(", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ")", ",", "rgb", ")"]}}
{"position": {"error_location": 105, "repair_targets": [85], "repair_candidates": [6, 72, 100, 85, 2, 87, 105, 67, 108, 4, 90, 69, 75, 96]}}
{"prediction": {"error_location": 0.4236657917499542, "repair_targets": [0.9524602293968201], "repair_candidates": [0.00021460808056872338, 0.03850766271352768, 0.0013142783427610993, 0.00208374485373497, 0.0008103214204311371, 0.00018600450130179524, 0.0009499654988758266, 0.9524602293968201, 0.002909745555371046, 0.00033352221362292767, 4.56862871942576e-05, 6.0925482102902606e-05, 3.081093746004626e-05, 9.251698793377727e-05], "target_probs": 0.9524602293968201}}


{"result": {"time": "2021-02-21 07:21:55.195536", "n_pass": [394, 131, 2], "n_token": 109, "loss": [0.7366316318511963, 0.02780807577073574], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", "user32", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "(", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ")", ",", "rgb", ")"]}}
{"position": {"error_location": 104, "repair_targets": [84], "repair_candidates": [6, 71, 99, 84, 2, 86, 104, 67, 107, 4, 89, 68, 74, 95]}}
{"prediction": {"error_location": 0.47872379422187805, "repair_targets": [0.9725750088691711], "repair_candidates": [8.824589167488739e-05, 0.01936209760606289, 0.0006432082736864686, 0.0002479171962477267, 0.005273023154586554, 0.0001123106267186813, 0.00035189592745155096, 0.9725750088691711, 0.001013844390399754, 0.00021210477279964834, 2.0535804651444778e-05, 3.382818977115676e-05, 1.4340253983391449e-05, 5.155989492777735e-05], "target_probs": 0.9725750088691711}}


{"result": {"time": "2021-02-21 07:21:55.553436", "n_pass": [402, 137, 3], "n_token": 108, "loss": [0.9177470207214355, 0.04079389199614525], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "(", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ")", ",", "rgb", ")"]}}
{"position": {"error_location": 103, "repair_targets": [83], "repair_candidates": [6, 71, 98, 83, 2, 85, 103, 67, 106, 4, 88, 68, 74, 94]}}
{"prediction": {"error_location": 0.3994179666042328, "repair_targets": [0.9600269794464111], "repair_candidates": [0.0001176446967292577, 0.029036307707428932, 0.0008019879460334778, 0.0003172534634359181, 0.007623997982591391, 0.0001214415387948975, 0.00036437102244235575, 0.9600269794464111, 0.0011997092515230179, 0.00026016891933977604, 2.3304857677430846e-05, 4.075859033036977e-05, 1.2211937246320304e-05, 5.382951712817885e-05], "target_probs": 0.9600269794464111}}


{"result": {"time": "2021-02-21 07:21:56.438262", "n_pass": [420, 152, 4], "n_token": 107, "loss": [1.3830004930496216, 0.131621852517128], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ")", ",", "rgb", ")"]}}
{"position": {"error_location": 102, "repair_targets": [83], "repair_candidates": [6, 71, 97, 83, 2, 85, 102, 67, 105, 4, 88, 68, 74, 93]}}
{"prediction": {"error_location": 0.25082483887672424, "repair_targets": [0.8766724467277527], "repair_candidates": [0.000477717665489763, 0.07390399277210236, 0.00282228272408247, 0.0009119967580772936, 0.010515113361179829, 0.00033076750696636736, 0.02812822349369526, 0.8766724467277527, 0.0031534344889223576, 0.0008617299608886242, 0.0019173088949173689, 0.00017347189714200795, 1.5997136870282702e-05, 0.0001155248173745349], "target_probs": 0.8766724467277527}}


{"result": {"time": "2021-02-21 07:21:56.914636", "n_pass": [431, 160, 5], "n_token": 106, "loss": [1.1076184511184692, 0.08682878315448761], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb", ")"]}}
{"position": {"error_location": 102, "repair_targets": [83], "repair_candidates": [6, 71, 97, 83, 2, 85, 102, 67, 104, 4, 88, 68, 74, 93]}}
{"prediction": {"error_location": 0.3303447663784027, "repair_targets": [0.9168340563774109], "repair_candidates": [0.0002891798212658614, 0.05128897354006767, 0.0016900453483685851, 0.0005408417782746255, 0.007268503308296204, 0.00019080797210335732, 0.01794058457016945, 0.9168340563774109, 0.001914078020490706, 0.00043064288911409676, 0.0014428809517994523, 8.579049608670175e-05, 6.027973086020211e-06, 7.751642260700464e-05], "target_probs": 0.9168340563774109}}


{"result": {"time": "2021-02-21 07:21:57.033940", "n_pass": [434, 162, 6], "n_token": 105, "loss": [1.3659074306488037, 0.07863486558198929], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 102, "repair_targets": [83], "repair_candidates": [6, 71, 97, 83, 2, 85, 102, 67, 104, 4, 88, 68, 74, 93]}}
{"prediction": {"error_location": 0.2551490366458893, "repair_targets": [0.9243773818016052], "repair_candidates": [0.00023445533588528633, 0.04277097061276436, 0.001061902497895062, 0.00032830683630891144, 0.007540911436080933, 0.00010477293835720047, 0.020558325573801994, 0.9243773818016052, 0.0011459410889074206, 0.00038571885670535266, 0.0014149906346574426, 5.431221870821901e-05, 4.41949714513612e-06, 1.7633603420108557e-05], "target_probs": 0.9243773818016052}}


{"result": {"time": "2021-02-21 07:21:57.095588", "n_pass": [435, 163, 7], "n_token": 104, "loss": [1.088566541671753, 0.06695365905761719], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def draw_pixel(", "self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 101, "repair_targets": [82], "repair_candidates": [5, 70, 96, 82, 1, 84, 101, 66, 103, 3, 87, 67, 73, 92]}}
{"prediction": {"error_location": 0.33669883012771606, "repair_targets": [0.9352385401725769], "repair_candidates": [0.0005766875110566616, 0.04753590747714043, 0.0005458556697703898, 0.00014165908214636147, 0.0005262926570139825, 9.139587200479582e-05, 0.014062090776860714, 0.9352385401725769, 0.000552797457203269, 9.50314206420444e-05, 0.0005863127880729735, 3.7372396036516875e-05, 2.23470556193206e-06, 7.794763405399863e-06], "target_probs": 0.9352385401725769}}


{"result": {"time": "2021-02-21 07:21:57.155294", "n_pass": [436, 164, 8], "n_token": 103, "loss": [1.0998955965042114, 0.032836418598890305], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 100, "repair_targets": [81], "repair_candidates": [4, 69, 95, 81, 0, 83, 100, 65, 102, 2, 86, 66, 72, 91]}}
{"prediction": {"error_location": 0.3329058289527893, "repair_targets": [0.9676968455314636], "repair_candidates": [0.0006020854925736785, 0.014323299750685692, 0.0006501987227238715, 0.00019099134078714997, 0.000879921019077301, 8.91533272806555e-05, 0.014236435294151306, 0.9676968455314636, 0.0005423542461358011, 0.00012948164658155292, 0.0006139221950434148, 3.721216125995852e-05, 1.6903361483855406e-06, 6.546111762872897e-06], "target_probs": 0.9676968455314636}}


{"result": {"time": "2021-02-21 07:21:57.217702", "n_pass": [438, 165, 9], "n_token": 102, "loss": [0.6206815242767334, 0.028991829603910446], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", ",", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 99, "repair_targets": [80], "repair_candidates": [3, 68, 94, 80, 0, 82, 99, 64, 101, 1, 85, 65, 71, 90]}}
{"prediction": {"error_location": 0.5375779271125793, "repair_targets": [0.971424400806427], "repair_candidates": [0.000860192347317934, 0.0017791299615055323, 0.0016315473476424813, 0.000344603497069329, 0.001182571635581553, 0.0005263480707071722, 0.01897500455379486, 0.971424400806427, 0.0008439570665359497, 0.000647377164568752, 0.0015788973541930318, 0.0001716246915748343, 9.471242265135515e-06, 2.492876046744641e-05], "target_probs": 0.971424400806427}}


{"result": {"time": "2021-02-21 07:21:57.277762", "n_pass": [440, 166, 10], "n_token": 101, "loss": [0.6211885213851929, 0.02773956209421158], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 98, "repair_targets": [79], "repair_candidates": [2, 67, 93, 79, 0, 81, 98, 63, 100, 1, 84, 64, 70, 89]}}
{"prediction": {"error_location": 0.5373054146766663, "repair_targets": [0.97264164686203], "repair_candidates": [0.0011342791840434074, 0.0018002134747803211, 0.001434404170140624, 0.00038761962787248194, 0.0013865964720025659, 0.00045022807898931205, 0.017447052523493767, 0.97264164686203, 0.0011616224655881524, 0.0004944929387420416, 0.0013631933834403753, 0.0002528876648284495, 1.22060873763985e-05, 3.365660450072028e-05], "target_probs": 0.97264164686203}}


{"result": {"time": "2021-02-21 07:21:57.337994", "n_pass": [442, 167, 11], "n_token": 100, "loss": [0.979904294013977, 0.027477189898490906], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", ":", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 97, "repair_targets": [78], "repair_candidates": [2, 66, 92, 78, 0, 80, 97, 62, 99, 1, 83, 63, 69, 88]}}
{"prediction": {"error_location": 0.3753470182418823, "repair_targets": [0.9728968739509583], "repair_candidates": [0.001159118372015655, 0.002451344160363078, 0.0011093280045315623, 0.000543509959243238, 0.0022112028673291206, 0.0003470854717306793, 0.015312575735151768, 0.9728968739509583, 0.0012012978550046682, 0.00040920503670349717, 0.002197714289650321, 0.0001103839895222336, 9.481502274866216e-06, 4.089168942300603e-05], "target_probs": 0.9728968739509583}}


{"result": {"time": "2021-02-21 07:21:57.398409", "n_pass": [443, 168, 12], "n_token": 99, "loss": [0.8906913995742798, 0.02617548033595085], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 96, "repair_targets": [77], "repair_candidates": [2, 65, 91, 77, 0, 79, 96, 61, 98, 1, 82, 62, 68, 87]}}
{"prediction": {"error_location": 0.4103718400001526, "repair_targets": [0.9741641283035278], "repair_candidates": [0.0016128993593156338, 0.001450651208870113, 0.0008358918712474406, 0.0004999064840376377, 0.002214729320257902, 0.0007211976917460561, 0.011861767619848251, 0.9741641283035278, 0.0011586635373532772, 0.0006328517338261008, 0.004471041727811098, 0.0003269901790190488, 7.952725354698487e-06, 4.1407653043279424e-05], "target_probs": 0.9741641283035278}}


{"result": {"time": "2021-02-21 07:21:57.460633", "n_pass": [444, 169, 13], "n_token": 98, "loss": [0.8825294971466064, 0.017841242253780365], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#INDENT#", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 95, "repair_targets": [76], "repair_candidates": [2, 64, 90, 76, 0, 78, 95, 60, 97, 1, 81, 61, 67, 86]}}
{"prediction": {"error_location": 0.4137350022792816, "repair_targets": [0.9823169708251953], "repair_candidates": [0.0009758382802829146, 0.0008186477934941649, 0.0005204699118621647, 0.00027118760044686496, 0.001530013862065971, 0.00018959878070745617, 0.008552531711757183, 0.9823169708251953, 0.0007694857195019722, 0.00030283528030849993, 0.0036189635284245014, 0.00011268517846474424, 4.198689566692337e-06, 1.663138573348988e-05], "target_probs": 0.9823169708251953}}


{"result": {"time": "2021-02-21 07:21:57.520143", "n_pass": [445, 170, 14], "n_token": 97, "loss": [0.7616407871246338, 0.01653352379798889], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "'\\n    Draw pixels on the screen.\\n\\n    Eventual plan is to use this to draw bounding boxes for template matching.\\n    Idea is to have it seek out anything that looks vaguely like a text-box\\n    (or something). Who knows.\\n\\n    '", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 94, "repair_targets": [75], "repair_candidates": [2, 63, 89, 75, 0, 77, 94, 59, 96, 1, 80, 60, 66, 85]}}
{"prediction": {"error_location": 0.46689972281455994, "repair_targets": [0.9836024045944214], "repair_candidates": [0.0009057304123416543, 0.0010484035592526197, 0.0006947665824554861, 0.0002607419155538082, 0.0017035106429830194, 0.00010233211651211604, 0.008455240167677402, 0.9836024045944214, 0.0009512463002465665, 0.0002673919952940196, 0.0018924169708043337, 9.650120045989752e-05, 3.6516585169010796e-06, 1.5608644389430992e-05], "target_probs": 0.9836024045944214}}


{"result": {"time": "2021-02-21 07:21:57.580387", "n_pass": [446, 171, 15], "n_token": 96, "loss": [0.6443748474121094, 0.026053423061966896], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 93, "repair_targets": [74], "repair_candidates": [2, 62, 88, 74, 0, 76, 93, 58, 95, 1, 79, 59, 65, 84]}}
{"prediction": {"error_location": 0.5249906182289124, "repair_targets": [0.9742830395698547], "repair_candidates": [0.0009331585606560111, 0.0006712641334161162, 0.0004207888268865645, 0.00030450159101746976, 0.0033104647882282734, 0.0004220371483825147, 0.013570070266723633, 0.9742830395698547, 0.0009984966600313783, 0.0003726806025952101, 0.004480983596295118, 0.0002045510773314163, 5.283746304485248e-06, 2.2687443561153486e-05], "target_probs": 0.9742830395698547}}


{"result": {"time": "2021-02-21 07:21:57.640492", "n_pass": [447, 172, 16], "n_token": 95, "loss": [0.5968194007873535, 0.03418414667248726], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "def _convert_rgb(", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 92, "repair_targets": [73], "repair_candidates": [2, 61, 87, 73, 0, 75, 92, 57, 94, 1, 78, 58, 64, 83]}}
{"prediction": {"error_location": 0.5505598783493042, "repair_targets": [0.9663935303688049], "repair_candidates": [0.0009893415262922645, 0.000711003434844315, 0.0003102238988503814, 0.0002606616180855781, 0.004850591998547316, 0.0004346587520558387, 0.019439086318016052, 0.9663935303688049, 0.0009384958539158106, 0.0005623528850264847, 0.0048817782662808895, 0.0001971299498109147, 8.595669896749314e-06, 2.2607322534895502e-05], "target_probs": 0.9663935303688049}}


{"result": {"time": "2021-02-21 07:21:57.702164", "n_pass": [448, 173, 17], "n_token": 94, "loss": [0.7181994318962097, 0.053849343210458755], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", ",", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 91, "repair_targets": [72], "repair_candidates": [2, 60, 86, 72, 0, 74, 91, 56, 93, 1, 77, 57, 63, 82]}}
{"prediction": {"error_location": 0.4876294732093811, "repair_targets": [0.9475748538970947], "repair_candidates": [0.000533238344360143, 0.000854038109537214, 0.00043001025915145874, 0.000119497359264642, 0.0016157095087692142, 8.770614658715203e-05, 0.04167575761675835, 0.9475748538970947, 0.0006829425110481679, 9.1090529167559e-05, 0.006163966841995716, 0.00016034141299314797, 2.9135235308785923e-06, 7.949569408083335e-06], "target_probs": 0.9475748538970947}}


{"result": {"time": "2021-02-21 07:21:57.820665", "n_pass": [450, 175, 18], "n_token": 93, "loss": [0.9515782594680786, 0.14428246021270752], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 90, "repair_targets": [71], "repair_candidates": [2, 59, 85, 71, 0, 73, 90, 55, 92, 1, 76, 56, 62, 81]}}
{"prediction": {"error_location": 0.3861311674118042, "repair_targets": [0.8656432032585144], "repair_candidates": [0.00044878190965391695, 0.0010311199584975839, 0.0005593743990175426, 7.778615690767765e-05, 0.0009752110345289111, 6.724066770402715e-05, 0.12475290149450302, 0.8656432032585144, 0.00043962287600152194, 5.186262933420949e-05, 0.00586081063374877, 8.683783380547538e-05, 1.2179231134723523e-06, 4.02399200538639e-06], "target_probs": 0.8656432032585144}}


{"result": {"time": "2021-02-21 07:21:57.940148", "n_pass": [452, 177, 19], "n_token": 92, "loss": [1.1434714794158936, 0.34590184688568115], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "b", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 89, "repair_targets": [70], "repair_candidates": [2, 58, 84, 70, 0, 72, 89, 54, 91, 1, 75, 55, 61, 80]}}
{"prediction": {"error_location": 0.31871068477630615, "repair_targets": [0.7075819373130798], "repair_candidates": [0.00025154996546916664, 0.0008732521091587842, 0.00029290548991411924, 4.5932007196825e-05, 0.0005565641913563013, 1.2216471077408642e-05, 0.2865524888038635, 0.7075819373130798, 0.0002708710671868175, 3.312607805128209e-05, 0.003514436772093177, 1.2422849067661446e-05, 4.4145591004962625e-07, 1.8772694829749526e-06], "target_probs": 0.7075819373130798}}


{"result": {"time": "2021-02-21 07:21:57.999888", "n_pass": [453, 178, 20], "n_token": 91, "loss": [1.0694479942321777, 0.32357966899871826], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 88, "repair_targets": [69], "repair_candidates": [2, 57, 83, 69, 0, 71, 88, 53, 90, 1, 74, 54, 60, 79]}}
{"prediction": {"error_location": 0.34319785237312317, "repair_targets": [0.7235543131828308], "repair_candidates": [0.00033855289802886546, 0.007178368978202343, 0.0017022710526362062, 4.060033097630367e-05, 0.0007153090555220842, 8.853933832142502e-05, 0.26373833417892456, 0.7235543131828308, 0.0002264727372676134, 0.00012264400720596313, 0.002210760023444891, 7.867428212193772e-05, 1.225946675731393e-06, 3.868984549626475e-06], "target_probs": 0.7235543131828308}}


{"result": {"time": "2021-02-21 07:21:58.059705", "n_pass": [454, 179, 21], "n_token": 90, "loss": [1.1189796924591064, 0.26456984877586365], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 87, "repair_targets": [68], "repair_candidates": [2, 56, 82, 68, 0, 70, 87, 52, 89, 1, 73, 53, 59, 78]}}
{"prediction": {"error_location": 0.3266128897666931, "repair_targets": [0.7675360441207886], "repair_candidates": [0.00027728397981263697, 0.004839688073843718, 0.002024248708039522, 3.253899558330886e-05, 0.0006070464150980115, 8.861226524459198e-05, 0.22203344106674194, 0.7675360441207886, 0.00022662292758468539, 9.337433584732935e-05, 0.0021375108044594526, 9.849324851529673e-05, 1.4235685057428782e-06, 3.6579672268999275e-06], "target_probs": 0.7675360441207886}}


{"result": {"time": "2021-02-21 07:21:58.119891", "n_pass": [455, 180, 22], "n_token": 89, "loss": [0.9384463429450989, 0.2789114713668823], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "r", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 86, "repair_targets": [67], "repair_candidates": [2, 55, 81, 67, 0, 69, 86, 51, 88, 1, 72, 52, 58, 77]}}
{"prediction": {"error_location": 0.39123520255088806, "repair_targets": [0.7566068768501282], "repair_candidates": [0.0006939086015336215, 0.00428498350083828, 0.005524310749024153, 6.340826075756922e-05, 0.0009026448824442923, 0.00023215488181449473, 0.22776328027248383, 0.7566068768501282, 0.00040600119973532856, 0.00031772570218890905, 0.003000440774485469, 0.00019106105901300907, 3.1716135708848014e-06, 9.991263141273521e-06], "target_probs": 0.7566068768501282}}


{"result": {"time": "2021-02-21 07:21:58.297246", "n_pass": [458, 183, 23], "n_token": 88, "loss": [1.1931527853012085, 0.3005753755569458], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "#NEWLINE#", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 85, "repair_targets": [66], "repair_candidates": [2, 54, 80, 66, 0, 68, 85, 50, 87, 1, 71, 51, 57, 76]}}
{"prediction": {"error_location": 0.30326366424560547, "repair_targets": [0.7403920888900757], "repair_candidates": [0.0011655462440103292, 0.006196569185703993, 0.022224871441721916, 6.872366066090763e-05, 0.0010949502466246486, 0.000431571010267362, 0.2240646779537201, 0.7403920888900757, 0.0004310366930440068, 0.0004723621532320976, 0.0030911823268979788, 0.0003449829528108239, 4.285139311832609e-06, 1.722613160382025e-05], "target_probs": 0.7403920888900757}}


{"result": {"time": "2021-02-21 07:22:01.466273", "n_pass": [516, 237, 24], "n_token": 87, "loss": [0.8346843719482422, 0.29892921447753906], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "SetPixel", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 84, "repair_targets": [65], "repair_candidates": [2, 54, 79, 65, 0, 67, 84, 50, 86, 1, 70, 51, 57, 75]}}
{"prediction": {"error_location": 0.43401145935058594, "repair_targets": [0.741611897945404], "repair_candidates": [0.0026431549340486526, 0.012899152934551239, 0.043987713754177094, 0.00012432625226210803, 0.0023801103234291077, 0.0009181947098113596, 0.18843308091163635, 0.741611897945404, 0.000748064077924937, 0.0013148091966286302, 0.0037059434689581394, 0.0011558078695088625, 1.6326775948982686e-05, 6.135601870482787e-05], "target_probs": 0.741611897945404}}


{"result": {"time": "2021-02-21 07:22:01.931064", "n_pass": [527, 245, 25], "n_token": 86, "loss": [0.9198712706565857, 0.1648070365190506], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", ",", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 83, "repair_targets": [65], "repair_candidates": [2, 54, 78, 65, 0, 67, 83, 50, 85, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.39857035875320435, "repair_targets": [0.8480573296546936], "repair_candidates": [0.0023773114662617445, 0.011744961142539978, 0.0405576191842556, 0.00010875237785512581, 0.002265653107315302, 0.0008324002264998853, 0.0889655202627182, 0.8480573296546936, 0.0006485605263151228, 0.001172899384982884, 0.0024082495365291834, 0.0007902945508249104, 1.2660857464652508e-05, 5.780854189652018e-05], "target_probs": 0.8480573296546936}}


{"result": {"time": "2021-02-21 07:22:01.989570", "n_pass": [529, 246, 26], "n_token": 85, "loss": [0.8512098789215088, 0.32386770844459534], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "c_int", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 82, "repair_targets": [65], "repair_candidates": [2, 54, 77, 65, 0, 67, 82, 50, 84, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.42689812183380127, "repair_targets": [0.723345935344696], "repair_candidates": [0.0024834503419697285, 0.00962980929762125, 0.031217513605952263, 0.00011152274237247184, 0.002290313132107258, 0.0008179977303370833, 0.19523681700229645, 0.723345935344696, 0.0005738632753491402, 0.0009837206453084946, 0.032788168638944626, 0.0004599723033607006, 1.0884372386499308e-05, 5.010206950828433e-05], "target_probs": 0.723345935344696}}


{"result": {"time": "2021-02-21 07:22:02.048647", "n_pass": [530, 247, 27], "n_token": 84, "loss": [0.8211706876754761, 0.20059756934642792], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "(", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 81, "repair_targets": [65], "repair_candidates": [2, 54, 76, 65, 0, 67, 81, 50, 83, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.43991634249687195, "repair_targets": [0.8182416558265686], "repair_candidates": [0.0026064689736813307, 0.010600205510854721, 0.036710359156131744, 0.00013403600314632058, 0.0025264634750783443, 0.000991548877209425, 0.08152557164430618, 0.8182416558265686, 0.0005948796751908958, 0.0010258747497573495, 0.044391416013240814, 0.0005910146282985806, 1.3102181583235506e-05, 4.7315017582150176e-05], "target_probs": 0.8182416558265686}}


{"result": {"time": "2021-02-21 07:22:02.107896", "n_pass": [531, 248, 28], "n_token": 83, "loss": [0.651927649974823, 0.1787349283695221], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", ")", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 80, "repair_targets": [65], "repair_candidates": [2, 54, 75, 65, 0, 67, 80, 50, 82, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.5210403800010681, "repair_targets": [0.8363275527954102], "repair_candidates": [0.0017884258413687348, 0.00829870905727148, 0.04953000321984291, 7.033199653960764e-05, 0.001884011086076498, 0.0009912651730701327, 0.09648045152425766, 0.8363275527954102, 0.00035202407161705196, 0.0005705009098164737, 0.0013485250528901815, 0.002321421168744564, 8.150173925969284e-06, 2.8715441658277996e-05], "target_probs": 0.8363275527954102}}


{"result": {"time": "2021-02-21 07:22:02.166898", "n_pass": [533, 249, 29], "n_token": 82, "loss": [0.607333242893219, 0.19654011726379395], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", ",", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 79, "repair_targets": [65], "repair_candidates": [2, 54, 75, 65, 0, 67, 79, 50, 81, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.5448018312454224, "repair_targets": [0.8215683698654175], "repair_candidates": [0.001847579493187368, 0.008548525162041187, 0.050839122384786606, 6.818194378865883e-05, 0.00197400851175189, 0.001078585279174149, 0.10834462940692902, 0.8215683698654175, 0.0003536796139087528, 0.0006171170971356332, 0.002177516231313348, 0.002541682217270136, 9.180263077723794e-06, 3.177369580953382e-05], "target_probs": 0.8215683698654175}}


{"result": {"time": "2021-02-21 07:22:02.228311", "n_pass": [534, 250, 30], "n_token": 81, "loss": [0.4159466624259949, 0.1934342235326767], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "c_int", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 78, "repair_targets": [65], "repair_candidates": [2, 54, 75, 65, 0, 67, 78, 50, 80, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.659715473651886, "repair_targets": [0.8241240382194519], "repair_candidates": [0.0008124745218083262, 0.003085071686655283, 0.017841195687651634, 3.4740136470645666e-05, 0.0009618611074984074, 0.0007346660713665187, 0.1363528072834015, 0.8241240382194519, 0.00018223340157419443, 0.0003216182522010058, 0.014817534014582634, 0.0007077313493937254, 7.537928013334749e-06, 1.6414336641901173e-05], "target_probs": 0.8241240382194519}}


{"result": {"time": "2021-02-21 07:22:02.287161", "n_pass": [535, 251, 31], "n_token": 80, "loss": [0.6540378928184509, 0.18460720777511597], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 77, "repair_targets": [65], "repair_candidates": [2, 54, 75, 65, 0, 67, 77, 50, 79, 1, 70, 51, 57, 74]}}
{"prediction": {"error_location": 0.519942045211792, "repair_targets": [0.8314307928085327], "repair_candidates": [0.0014641144080087543, 0.005852272734045982, 0.032911915332078934, 6.588759424630553e-05, 0.0017507621087133884, 0.0012030854122713208, 0.09982191771268845, 0.8314307928085327, 0.0003375679661985487, 0.0003918595612049103, 0.023485679179430008, 0.0012329414021223783, 1.3086398212180939e-05, 3.802532592089847e-05], "target_probs": 0.8314307928085327}}


{"result": {"time": "2021-02-21 07:22:02.461399", "n_pass": [543, 254, 32], "n_token": 79, "loss": [0.7079172730445862, 0.09699560701847076], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "g", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 76, "repair_targets": [64], "repair_candidates": [2, 53, 74, 64, 0, 66, 76, 49, 78, 1, 69, 50, 56, 73]}}
{"prediction": {"error_location": 0.4926692843437195, "repair_targets": [0.9075599908828735], "repair_candidates": [0.0014492844929918647, 0.007191388867795467, 0.03935556858778, 4.4156418880447745e-05, 0.0018084184266626835, 0.0011594840325415134, 0.021988237276673317, 0.9075599908828735, 0.00024088560894597322, 0.0004529308353085071, 0.017117729410529137, 0.0015923622995615005, 1.1247679140069522e-05, 2.8346430553938262e-05], "target_probs": 0.9075599908828735}}


{"result": {"time": "2021-02-21 07:22:02.521943", "n_pass": [544, 255, 33], "n_token": 78, "loss": [0.5555627346038818, 0.06783328950405121], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 75, "repair_targets": [63], "repair_candidates": [2, 52, 73, 63, 0, 65, 75, 48, 77, 1, 68, 49, 55, 72]}}
{"prediction": {"error_location": 0.573749303817749, "repair_targets": [0.9344162344932556], "repair_candidates": [0.0009714079205878079, 0.004421225283294916, 0.029864666983485222, 2.471134575898759e-05, 0.001073532272130251, 0.000888161885086447, 0.010357060469686985, 0.9344162344932556, 0.0001381263427902013, 0.0003846885228995234, 0.015646526589989662, 0.0017926243599504232, 6.518005648104008e-06, 1.4465158528764732e-05], "target_probs": 0.9344162344932556}}


{"result": {"time": "2021-02-21 07:22:02.580597", "n_pass": [545, 256, 34], "n_token": 77, "loss": [0.6715956330299377, 0.09065434336662292], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#INDENT#", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 74, "repair_targets": [62], "repair_candidates": [2, 51, 72, 62, 0, 64, 74, 47, 76, 1, 67, 48, 54, 71]}}
{"prediction": {"error_location": 0.5108926892280579, "repair_targets": [0.9133333563804626], "repair_candidates": [0.0009694971377030015, 0.010125121101737022, 0.03757767006754875, 3.0115892514004372e-05, 0.0010431926930323243, 0.0007937251357361674, 0.006997375283390284, 0.9133333563804626, 0.0001524477411294356, 0.0005058484384790063, 0.02621508203446865, 0.00223144399933517, 5.983319624647265e-06, 1.9082364815403707e-05], "target_probs": 0.9133333563804626}}


{"result": {"time": "2021-02-21 07:22:02.639203", "n_pass": [546, 257, 35], "n_token": 76, "loss": [0.5372521281242371, 0.04616985097527504], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "=", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 73, "repair_targets": [61], "repair_candidates": [2, 50, 71, 61, 0, 63, 73, 46, 75, 1, 66, 47, 53, 70]}}
{"prediction": {"error_location": 0.5843518376350403, "repair_targets": [0.9548797607421875], "repair_candidates": [0.00043948431266471744, 0.007484668865799904, 0.009857669472694397, 1.5079572222020943e-05, 0.0007908326224423945, 0.00024527913774363697, 0.001478032791055739, 0.9548797607421875, 7.579863449791446e-05, 0.00022944215743336827, 0.022792208939790726, 0.001701525878161192, 3.1973586374078877e-06, 7.110474598448491e-06], "target_probs": 0.9548797607421875}}


{"result": {"time": "2021-02-21 07:22:02.697762", "n_pass": [547, 258, 36], "n_token": 75, "loss": [0.4333818554878235, 0.038750603795051575], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "(", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 72, "repair_targets": [60], "repair_candidates": [2, 49, 70, 60, 0, 62, 72, 45, 74, 1, 65, 46, 52, 69]}}
{"prediction": {"error_location": 0.6483128666877747, "repair_targets": [0.9619905948638916], "repair_candidates": [0.00042856187792494893, 0.004124120809137821, 0.0059937117621302605, 2.0173300072201528e-05, 0.0009338703821413219, 0.00034547821269370615, 0.001005864585749805, 0.9619905948638916, 9.063440666068345e-05, 0.00026546468143351376, 0.023309824988245964, 0.0014781866921111941, 4.2393148760311306e-06, 9.24722189665772e-06], "target_probs": 0.9619905948638916}}


{"result": {"time": "2021-02-21 07:22:02.757543", "n_pass": [548, 259, 37], "n_token": 74, "loss": [0.5288022756576538, 0.034741126000881195], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "r", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 71, "repair_targets": [59], "repair_candidates": [2, 48, 69, 59, 0, 61, 71, 44, 73, 1, 64, 45, 51, 68]}}
{"prediction": {"error_location": 0.589310348033905, "repair_targets": [0.9658554196357727], "repair_candidates": [0.00032640359131619334, 0.005135674029588699, 0.008679010905325413, 1.4590078535547946e-05, 0.0005898294039070606, 0.0002743296208791435, 0.0007835333817638457, 0.9658554196357727, 7.317853305721655e-05, 0.00020650275109801441, 0.01642814837396145, 0.001621575327590108, 3.7507604702113895e-06, 8.008989425434265e-06], "target_probs": 0.9658554196357727}}


{"result": {"time": "2021-02-21 07:22:02.815581", "n_pass": [549, 260, 38], "n_token": 73, "loss": [0.3706308603286743, 0.03489677608013153], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "&", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 70, "repair_targets": [58], "repair_candidates": [2, 47, 68, 58, 0, 60, 70, 43, 72, 1, 63, 44, 50, 67]}}
{"prediction": {"error_location": 0.6902986764907837, "repair_targets": [0.9657050967216492], "repair_candidates": [0.0004664504958782345, 0.0020197590347379446, 0.009669671766459942, 2.9638360501849093e-05, 0.0007367945509031415, 0.0003901720920111984, 0.001695858547464013, 0.9657050967216492, 0.00016175491327885538, 0.0004283477901481092, 0.014694072306156158, 0.003980529494583607, 7.570639354526065e-06, 1.4273589840740897e-05], "target_probs": 0.9657050967216492}}


{"result": {"time": "2021-02-21 07:22:02.874138", "n_pass": [550, 261, 39], "n_token": 72, "loss": [0.29260745644569397, 0.02517523244023323], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "255", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 69, "repair_targets": [57], "repair_candidates": [2, 46, 67, 57, 0, 59, 69, 42, 71, 1, 62, 43, 49, 66]}}
{"prediction": {"error_location": 0.7463150024414062, "repair_targets": [0.9751390218734741], "repair_candidates": [0.0004157038638368249, 0.0013484787195920944, 0.004489772953093052, 3.509733505779877e-05, 0.0009130134712904692, 0.0001724732865113765, 0.0031148293055593967, 0.9751390218734741, 0.00016359340224880725, 0.0004990404704585671, 0.00926882028579712, 0.0044175321236252785, 7.078934686433058e-06, 1.5584124412271194e-05], "target_probs": 0.9751390218734741}}


{"result": {"time": "2021-02-21 07:22:02.933107", "n_pass": [551, 262, 40], "n_token": 71, "loss": [0.3589746057987213, 0.043707314878702164], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", ")", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 68, "repair_targets": [56], "repair_candidates": [2, 45, 66, 56, 0, 58, 68, 41, 70, 1, 61, 42, 48, 65]}}
{"prediction": {"error_location": 0.6983920335769653, "repair_targets": [0.9572340846061707], "repair_candidates": [0.000632372684776783, 0.0011106787715107203, 0.007915269583463669, 5.4509564506588504e-05, 0.0007286097388714552, 0.0004941934021189809, 0.004158639814704657, 0.9572340846061707, 0.0002477806992828846, 0.0007092167506925762, 0.011757107451558113, 0.014921171590685844, 1.4272805856307968e-05, 2.206828139605932e-05], "target_probs": 0.9572340846061707}}


{"result": {"time": "2021-02-21 07:22:02.992250", "n_pass": [552, 263, 41], "n_token": 70, "loss": [0.6144298911094666, 0.08950699865818024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "g", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 67, "repair_targets": [55], "repair_candidates": [2, 44, 65, 55, 0, 57, 67, 40, 69, 1, 60, 41, 47, 64]}}
{"prediction": {"error_location": 0.5409492254257202, "repair_targets": [0.9143818616867065], "repair_candidates": [0.0011539433617144823, 0.001971644116565585, 0.03518932685256004, 9.195543680107221e-05, 0.0008848147699609399, 0.0009958520531654358, 0.004114834126085043, 0.9143818616867065, 0.0004218724207021296, 0.0014116275124251842, 0.02546297200024128, 0.013842066749930382, 4.202705531497486e-05, 3.5113043850287795e-05], "target_probs": 0.9143818616867065}}


{"result": {"time": "2021-02-21 07:22:03.108271", "n_pass": [554, 265, 42], "n_token": 69, "loss": [0.6856165528297424, 0.19780190289020538], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "=", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 66, "repair_targets": [54], "repair_candidates": [2, 43, 64, 54, 0, 56, 66, 39, 68, 1, 59, 40, 46, 63]}}
{"prediction": {"error_location": 0.5037795305252075, "repair_targets": [0.8205323815345764], "repair_candidates": [0.0014754721196368337, 0.0053053563460707664, 0.0897710993885994, 0.0001011310814647004, 0.0009670460713095963, 0.0015411993954330683, 0.003087783232331276, 0.8205323815345764, 0.0003675957559607923, 0.0018980539171025157, 0.06341029703617096, 0.01144264917820692, 6.621499051107094e-05, 3.3646712836343795e-05], "target_probs": 0.8205323815345764}}


{"result": {"time": "2021-02-21 07:22:03.166258", "n_pass": [555, 266, 43], "n_token": 68, "loss": [0.5732264518737793, 0.1905590444803238], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "(", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 65, "repair_targets": [53], "repair_candidates": [2, 42, 63, 53, 0, 55, 65, 38, 67, 1, 58, 39, 45, 62]}}
{"prediction": {"error_location": 0.563703715801239, "repair_targets": [0.826496958732605], "repair_candidates": [0.001507985987700522, 0.0027988404035568237, 0.04669324681162834, 0.00012916723790112883, 0.0015252451412379742, 0.0008502823184244335, 0.0022555789910256863, 0.826496958732605, 0.0003356637025717646, 0.0016015375731512904, 0.10535891354084015, 0.01037189457565546, 5.3375784773379564e-05, 2.1258749256958254e-05], "target_probs": 0.826496958732605}}


{"result": {"time": "2021-02-21 07:22:03.224146", "n_pass": [556, 267, 44], "n_token": 67, "loss": [0.3608824908733368, 0.1459740251302719], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "g", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 64, "repair_targets": [52], "repair_candidates": [2, 41, 62, 52, 0, 54, 64, 37, 66, 1, 57, 38, 44, 61]}}
{"prediction": {"error_location": 0.697060763835907, "repair_targets": [0.8641801476478577], "repair_candidates": [0.0010743115562945604, 0.0009169618715532124, 0.011698703281581402, 8.19238557596691e-05, 0.0013947871048003435, 0.0007001087069511414, 0.0015907950000837445, 0.8641801476478577, 0.00020169506024103612, 0.0008203655597753823, 0.11194410175085068, 0.0053644245490431786, 2.234907151432708e-05, 9.231934200215619e-06], "target_probs": 0.8641801476478577}}


{"result": {"time": "2021-02-21 07:22:03.282740", "n_pass": [557, 268, 45], "n_token": 66, "loss": [0.2635698914527893, 0.23571151494979858], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "&", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 63, "repair_targets": [51], "repair_candidates": [2, 40, 61, 51, 0, 53, 63, 36, 65, 1, 56, 37, 43, 60]}}
{"prediction": {"error_location": 0.7683039307594299, "repair_targets": [0.790008544921875], "repair_candidates": [0.0009620803757570684, 0.0005532339564524591, 0.006380467675626278, 5.34089413122274e-05, 0.0009351359331049025, 0.0009963123593479395, 0.0029217940755188465, 0.790008544921875, 0.0001293458917643875, 0.00048457153025083244, 0.19339324533939362, 0.0031629041768610477, 1.3432953892333899e-05, 5.571094789047493e-06], "target_probs": 0.790008544921875}}


{"result": {"time": "2021-02-21 07:22:03.343067", "n_pass": [558, 269, 46], "n_token": 65, "loss": [0.2695994973182678, 0.18284399807453156], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "255", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 62, "repair_targets": [50], "repair_candidates": [2, 39, 60, 50, 0, 52, 62, 35, 64, 1, 55, 36, 42, 59]}}
{"prediction": {"error_location": 0.7636852860450745, "repair_targets": [0.8328980803489685], "repair_candidates": [0.0008210278465412557, 0.000271318742306903, 0.0032293021213263273, 5.2379742555785924e-05, 0.0012389065232127905, 0.000942832266446203, 0.0034243110567331314, 0.8328980803489685, 0.00015523792535532266, 0.0004010267439298332, 0.15379594266414642, 0.0027565450873225927, 8.934706784202717e-06, 4.281930159777403e-06], "target_probs": 0.8328980803489685}}


{"result": {"time": "2021-02-21 07:22:03.400999", "n_pass": [559, 270, 47], "n_token": 64, "loss": [0.2975214123725891, 0.22053967416286469], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", ")", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 61, "repair_targets": [49], "repair_candidates": [2, 38, 59, 49, 0, 51, 61, 34, 63, 1, 54, 35, 41, 58]}}
{"prediction": {"error_location": 0.7426567673683167, "repair_targets": [0.802085816860199], "repair_candidates": [0.0008991779177449644, 0.00024681532522663474, 0.0012326746946200728, 4.2861658585025e-05, 0.0013784606708213687, 0.0012297584908083081, 0.0035173315554857254, 0.802085816860199, 0.00013801608292851597, 0.0003218234924133867, 0.18611550331115723, 0.0027823559939861298, 6.440462584578199e-06, 2.951905798909138e-06], "target_probs": 0.802085816860199}}


{"result": {"time": "2021-02-21 07:22:03.459554", "n_pass": [560, 271, 48], "n_token": 63, "loss": [0.3338007628917694, 0.2758621871471405], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 60, "repair_targets": [48], "repair_candidates": [2, 37, 58, 48, 0, 50, 60, 33, 62, 1, 53, 34, 40, 57]}}
{"prediction": {"error_location": 0.7161964774131775, "repair_targets": [0.758917510509491], "repair_candidates": [0.0010331651428714395, 0.0003351768827997148, 0.001351302256807685, 4.8070814955281094e-05, 0.0011158401612192392, 0.001444957684725523, 0.0036328588612377644, 0.758917510509491, 0.00016228744061663747, 0.0003824549203272909, 0.22854654490947723, 0.0030166124925017357, 9.354024768981617e-06, 3.824753093795152e-06], "target_probs": 0.758917510509491}}


{"result": {"time": "2021-02-21 07:22:03.517958", "n_pass": [561, 272, 49], "n_token": 62, "loss": [0.33664974570274353, 0.278767466545105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 59, "repair_targets": [47], "repair_candidates": [2, 36, 57, 47, 0, 49, 59, 32, 61, 1, 52, 33, 39, 56]}}
{"prediction": {"error_location": 0.7141589522361755, "repair_targets": [0.7567158341407776], "repair_candidates": [0.0014181379228830338, 0.00048442112165503204, 0.0023878735955804586, 6.174902955535799e-05, 0.0013630869798362255, 0.002793982857838273, 0.004938118159770966, 0.7567158341407776, 0.00017466607096139342, 0.0006118729943409562, 0.22437240183353424, 0.004660676699131727, 1.201660961669404e-05, 5.205567049415549e-06], "target_probs": 0.7567158341407776}}


{"result": {"time": "2021-02-21 07:22:03.576013", "n_pass": [562, 273, 50], "n_token": 61, "loss": [0.25221624970436096, 0.32898637652397156], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "=", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 58, "repair_targets": [46], "repair_candidates": [2, 35, 56, 46, 0, 48, 58, 31, 60, 1, 51, 32, 38, 55]}}
{"prediction": {"error_location": 0.7770766615867615, "repair_targets": [0.7196528315544128], "repair_candidates": [0.0014919645618647337, 0.0005286255618557334, 0.0016949340933933854, 4.5618922740686685e-05, 0.0015521538443863392, 0.0027117575518786907, 0.007462287787348032, 0.7196528315544128, 8.237666770583019e-05, 0.0007921508513391018, 0.2587314546108246, 0.005239676218479872, 9.77565832727123e-06, 4.3683185140253045e-06], "target_probs": 0.7196528315544128}}


{"result": {"time": "2021-02-21 07:22:03.634320", "n_pass": [563, 274, 51], "n_token": 60, "loss": [0.29840224981307983, 0.35819169878959656], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "(", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 57, "repair_targets": [45], "repair_candidates": [2, 34, 55, 45, 0, 47, 57, 30, 59, 1, 50, 31, 37, 54]}}
{"prediction": {"error_location": 0.7420028448104858, "repair_targets": [0.6989390850067139], "repair_candidates": [0.0013435134897008538, 0.0004319489817135036, 0.0015194268198683858, 5.3357271099230275e-05, 0.0016354293329641223, 0.0018251014407724142, 0.02482384815812111, 0.6989390850067139, 9.1528010671027e-05, 0.000576444377657026, 0.26383736729621887, 0.004908766131848097, 9.1277870524209e-06, 5.081507424620213e-06], "target_probs": 0.6989390850067139}}


{"result": {"time": "2021-02-21 07:22:03.694628", "n_pass": [564, 275, 52], "n_token": 59, "loss": [0.3263692855834961, 0.5642326474189758], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "#NEWLINE#", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 56, "repair_targets": [44], "repair_candidates": [2, 33, 54, 44, 0, 46, 56, 29, 58, 1, 49, 30, 36, 53]}}
{"prediction": {"error_location": 0.7215386629104614, "repair_targets": [0.5687964558601379], "repair_candidates": [0.0009703001123853028, 0.00026078266091644764, 0.0008549796184524894, 3.269299122621305e-05, 0.0009562961640767753, 0.001505840104073286, 0.045117706060409546, 0.5687964558601379, 5.944199801888317e-05, 0.0005540571874007583, 0.37806224822998047, 0.002818245207890868, 6.540031790791545e-06, 4.387714398035314e-06], "target_probs": 0.5687964558601379}}


{"result": {"time": "2021-02-21 07:22:05.366964", "n_pass": [596, 304, 53], "n_token": 58, "loss": [0.40624791383743286, 0.16022954881191254], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "=", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 55, "repair_targets": [43], "repair_candidates": [2, 33, 53, 43, 0, 45, 55, 29, 57, 1, 48, 30, 35, 52]}}
{"prediction": {"error_location": 0.6661450266838074, "repair_targets": [0.8519482016563416], "repair_candidates": [0.002154820365831256, 0.0004766799393109977, 0.0012115536956116557, 0.00017378198390360922, 0.0029375788290053606, 0.02125418931245804, 0.037019263952970505, 0.8519482016563416, 0.0002056062367046252, 0.0010527316480875015, 0.07773538678884506, 0.003806379856541753, 9.719272384245414e-06, 1.4192703929438721e-05], "target_probs": 0.8519482016563416}}


{"result": {"time": "2021-02-21 07:22:05.425443", "n_pass": [598, 305, 54], "n_token": 57, "loss": [0.4177396297454834, 0.05474352091550827], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", ".", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 54, "repair_targets": [42], "repair_candidates": [2, 33, 52, 42, 0, 44, 54, 29, 56, 1, 47, 30, 35, 51]}}
{"prediction": {"error_location": 0.6585336923599243, "repair_targets": [0.9467279314994812], "repair_candidates": [0.002480938099324703, 0.0004587435978464782, 0.0015535191632807255, 0.00011027784057660028, 0.0022180979140102863, 0.010832521133124828, 0.0024087214842438698, 0.9467279314994812, 0.000161823452799581, 0.0008434320334345102, 0.02866220287978649, 0.0035219716373831034, 6.284834853431676e-06, 1.3579555343312677e-05], "target_probs": 0.9467279314994812}}


{"result": {"time": "2021-02-21 07:22:05.483697", "n_pass": [599, 306, 55], "n_token": 56, "loss": [0.555446982383728, 0.08217403292655945], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "GetDC", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 53, "repair_targets": [41], "repair_candidates": [2, 33, 51, 41, 0, 43, 53, 29, 55, 1, 46, 30, 35, 50]}}
{"prediction": {"error_location": 0.5738157629966736, "repair_targets": [0.9211116433143616], "repair_candidates": [0.0029988850001245737, 0.00041736470302566886, 0.0016112234443426132, 0.00010321923036826774, 0.002277963561937213, 0.012885252013802528, 0.018336493521928787, 0.9211116433143616, 0.0001718043931759894, 0.0005849937442690134, 0.03716403245925903, 0.0023160751443356276, 4.9050549932871945e-06, 1.612635242054239e-05], "target_probs": 0.9211116433143616}}


{"result": {"time": "2021-02-21 07:22:05.541970", "n_pass": [600, 307, 56], "n_token": 55, "loss": [0.5087973475456238, 0.09288560599088669], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 52, "repair_targets": [40], "repair_candidates": [2, 33, 50, 40, 0, 42, 52, 29, 54, 1, 45, 30, 35, 49]}}
{"prediction": {"error_location": 0.6012182235717773, "repair_targets": [0.9112977385520935], "repair_candidates": [0.004581322893500328, 0.0006990624242462218, 0.002549936296418309, 0.00012986052024643868, 0.0037495882716029882, 0.02394879423081875, 0.015815772116184235, 0.9112977385520935, 0.0003105089708697051, 0.0007020153570920229, 0.03275321424007416, 0.003434257348999381, 6.33777244729572e-06, 2.1611327611026354e-05], "target_probs": 0.9112977385520935}}


{"result": {"time": "2021-02-21 07:22:05.600114", "n_pass": [601, 308, 57], "n_token": 54, "loss": [0.49397584795951843, 0.06951642036437988], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "None", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 51, "repair_targets": [39], "repair_candidates": [2, 33, 49, 39, 0, 41, 51, 29, 53, 1, 44, 30, 35, 48]}}
{"prediction": {"error_location": 0.610195517539978, "repair_targets": [0.9328448176383972], "repair_candidates": [0.0037535359151661396, 0.0006190342828631401, 0.003017544047906995, 7.598720549140126e-05, 0.002350660739466548, 0.042456842958927155, 0.007476881146430969, 0.9328448176383972, 0.0003584645746741444, 0.0004366894136182964, 0.0038272079546004534, 0.0027587097138166428, 7.2586403803143185e-06, 1.6388174117309973e-05], "target_probs": 0.9328448176383972}}


{"result": {"time": "2021-02-21 07:22:05.657681", "n_pass": [602, 309, 58], "n_token": 53, "loss": [0.4586731493473053, 0.14539869129657745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", ")", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 50, "repair_targets": [38], "repair_candidates": [2, 33, 48, 38, 0, 40, 50, 29, 52, 1, 43, 30, 35, 47]}}
{"prediction": {"error_location": 0.6321218013763428, "repair_targets": [0.8646774888038635], "repair_candidates": [0.004409390036016703, 0.000668435066472739, 0.00271455361507833, 8.339123451150954e-05, 0.003288372652605176, 0.08485154807567596, 0.02203868329524994, 0.8646774888038635, 0.0006055318517610431, 0.0004996269126422703, 0.012296554632484913, 0.0038367921952158213, 1.0415611541247927e-05, 1.9252167476224713e-05], "target_probs": 0.8646774888038635}}


{"result": {"time": "2021-02-21 07:22:05.717810", "n_pass": [603, 310, 59], "n_token": 52, "loss": [0.4589965343475342, 0.030900411307811737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", ",", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 49, "repair_targets": [37], "repair_candidates": [2, 33, 47, 37, 0, 39, 49, 29, 51, 1, 42, 30, 35, 46]}}
{"prediction": {"error_location": 0.631917417049408, "repair_targets": [0.969572126865387], "repair_candidates": [0.0012797685340046883, 0.0001907585101434961, 0.0005941353738307953, 1.9904640794266015e-05, 0.0008562552975490689, 0.004461226519197226, 0.014874308370053768, 0.969572126865387, 0.00017255550483241677, 0.00011812114826170728, 0.0073697445914149284, 0.000484721502289176, 1.4049093124413048e-06, 4.919653747492703e-06], "target_probs": 0.969572126865387}}


{"result": {"time": "2021-02-21 07:22:05.832167", "n_pass": [606, 312, 60], "n_token": 51, "loss": [0.9149276614189148, 0.48266297578811646], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "#NEWLINE#", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 48, "repair_targets": [37], "repair_candidates": [2, 33, 46, 37, 0, 38, 48, 29, 50, 1, 41, 30, 35, 45]}}
{"prediction": {"error_location": 0.400545597076416, "repair_targets": [0.6171377897262573], "repair_candidates": [0.016274718567728996, 0.0025720943231135607, 0.004596181213855743, 0.00014336187450680882, 0.009347972460091114, 0.0533112958073616, 0.20325911045074463, 0.6171377897262573, 0.0011843598913401365, 0.0014134043594822288, 0.08698492497205734, 0.0037513296119868755, 2.618192866066238e-06, 2.0728437448269688e-05], "target_probs": 0.6171377897262573}}


{"result": {"time": "2021-02-21 07:22:06.004589", "n_pass": [611, 315, 61], "n_token": 50, "loss": [0.9967074394226074, 0.4134010374546051], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", ".", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 47, "repair_targets": [37], "repair_candidates": [2, 33, 45, 37, 0, 38, 47, 29, 49, 1, 41, 30, 35, 44]}}
{"prediction": {"error_location": 0.3690926432609558, "repair_targets": [0.6613969802856445], "repair_candidates": [0.011049995198845863, 0.0023007644340395927, 0.0035050762817263603, 8.609951328253374e-05, 0.002802483970299363, 0.0242902934551239, 0.26893219351768494, 0.6613969802856445, 0.0008896736544556916, 0.0004867188981734216, 0.022963177412748337, 0.001243524020537734, 8.969730515673291e-06, 4.402308331918903e-05], "target_probs": 0.6613969802856445}}


{"result": {"time": "2021-02-21 07:22:06.122339", "n_pass": [613, 317, 62], "n_token": 49, "loss": [1.0585366487503052, 0.08945941925048828], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "&", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 46, "repair_targets": [37], "repair_candidates": [2, 33, 44, 37, 0, 38, 46, 29, 48, 1, 41, 30, 35, 43]}}
{"prediction": {"error_location": 0.34696316719055176, "repair_targets": [0.9144253730773926], "repair_candidates": [0.012009082362055779, 0.0025668286252766848, 0.0036888173781335354, 8.917853847378865e-05, 0.003061127383261919, 0.019095737487077713, 0.017912330105900764, 0.9144253730773926, 0.0012573119020089507, 0.006316153798252344, 0.018975218757987022, 0.0005456862272694707, 8.462903679173905e-06, 4.8802703531691805e-05], "target_probs": 0.9144253730773926}}


{"result": {"time": "2021-02-21 07:22:06.411402", "n_pass": [625, 322, 63], "n_token": 48, "loss": [1.1095404624938965, 0.0711669847369194], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "255", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 45, "repair_targets": [36], "repair_candidates": [2, 32, 43, 36, 0, 37, 45, 28, 47, 1, 40, 29, 34, 42]}}
{"prediction": {"error_location": 0.329710453748703, "repair_targets": [0.9313063621520996], "repair_candidates": [0.012020357884466648, 0.0022778459824621677, 0.0027786558493971825, 5.910784602747299e-05, 0.0033610870596021414, 0.013811024837195873, 0.01162453182041645, 0.9313063621520996, 0.0012394593795761466, 0.01346686203032732, 0.007351314648985863, 0.0006334174540825188, 9.826947461988311e-06, 6.022640809533186e-05], "target_probs": 0.9313063621520996}}


{"result": {"time": "2021-02-21 07:22:06.468524", "n_pass": [626, 323, 64], "n_token": 47, "loss": [0.6136785745620728, 0.06979318708181381], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", ")", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 44, "repair_targets": [35], "repair_candidates": [2, 31, 42, 35, 0, 36, 44, 27, 46, 1, 39, 28, 33, 41]}}
{"prediction": {"error_location": 0.5413557887077332, "repair_targets": [0.932586669921875], "repair_candidates": [0.01000288501381874, 0.00194213492795825, 0.002311955438926816, 4.207459278404713e-05, 0.0018352788174524903, 0.02207295037806034, 0.014483246952295303, 0.932586669921875, 0.0006241568480618298, 0.007754157762974501, 0.0057519469410181046, 0.0005139543209224939, 1.0584963092696853e-05, 6.788504833821207e-05], "target_probs": 0.932586669921875}}


{"result": {"time": "2021-02-21 07:22:06.526467", "n_pass": [627, 324, 65], "n_token": 46, "loss": [0.6234447360038757, 0.08273541182279587], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "#NEWLINE#", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 43, "repair_targets": [34], "repair_candidates": [2, 30, 41, 34, 0, 35, 43, 26, 45, 1, 38, 27, 32, 40]}}
{"prediction": {"error_location": 0.5360945463180542, "repair_targets": [0.9205946922302246], "repair_candidates": [0.010653735138475895, 0.0026093588676303625, 0.002964908955618739, 5.430311648524366e-05, 0.0013645195867866278, 0.031277723610401154, 0.014823147095739841, 0.9205946922302246, 0.0004493726009968668, 0.009525592438876629, 0.004987173248082399, 0.0006034818943589926, 1.1715582331817131e-05, 8.020361565286294e-05], "target_probs": 0.9205946922302246}}


{"result": {"time": "2021-02-21 07:22:06.583867", "n_pass": [628, 325, 66], "n_token": 45, "loss": [0.6605985760688782, 0.17755477130413055], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "return", "(", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 42, "repair_targets": [33], "repair_candidates": [2, 29, 40, 33, 0, 34, 42, 25, 44, 1, 37, 26, 31, 39]}}
{"prediction": {"error_location": 0.5165420770645142, "repair_targets": [0.8373151421546936], "repair_candidates": [0.023372983559966087, 0.004839883651584387, 0.005580013617873192, 0.00012160018377471715, 0.005336534231901169, 0.06608780473470688, 0.024104183539748192, 0.8373151421546936, 0.0006156975287012756, 0.021120809018611908, 0.010263415984809399, 0.0011474454076960683, 1.2907456039101817e-05, 8.168872591340914e-05], "target_probs": 0.8373151421546936}}


{"result": {"time": "2021-02-21 07:22:06.698597", "n_pass": [630, 327, 67], "n_token": 44, "loss": [0.672566831111908, 0.4030049443244934], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "return", "(", "(", "b", "<<", "16", ")", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 41, "repair_targets": [32], "repair_candidates": [2, 28, 39, 32, 0, 33, 41, 24, 43, 1, 36, 25, 30, 38]}}
{"prediction": {"error_location": 0.5103967785835266, "repair_targets": [0.6683087944984436], "repair_candidates": [0.050451137125492096, 0.010251222178339958, 0.009843346662819386, 0.00025654048658907413, 0.010357954539358616, 0.11359609663486481, 0.0384618304669857, 0.6683087944984436, 0.0013992884196341038, 0.06519989669322968, 0.028894584625959396, 0.002527359640225768, 0.0001079331777873449, 0.0003440081491135061], "target_probs": 0.6683087944984436}}


{"result": {"time": "2021-02-21 07:22:07.043554", "n_pass": [636, 333, 68], "n_token": 43, "loss": [1.1570956707000732, 0.5498517155647278], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "coordinate", "rgb_value", "#NEWLINE#", "b", "return", "(", "(", "b", "<<", "16", "|", "(", "g", "<<", "8", ")", ")", "|", "r", ")", "#NEWLINE#", "#UNINDENT#", "rgb", "_convert_rgb", "(", "*", "rgb_value", ")", "hdc", "(", "x", "y", ")", "=", "coordinate", "gdi", "hdc", "rgb_value", "(", "y", ",", "rgb"]}}
{"position": {"error_location": 40, "repair_targets": [31], "repair_candidates": [2, 27, 38, 31, 0, 32, 40, 23, 42, 1, 35, 24, 29, 37]}}
{"prediction": {"error_location": 0.314397931098938, "repair_targets": [0.5770353674888611], "repair_candidates": [0.06890200078487396, 0.013900508172810078, 0.012164709158241749, 0.00032115564681589603, 0.011723609641194344, 0.09619962424039841, 0.04505791515111923, 0.5770353674888611, 0.0014303228817880154, 0.11582153290510178, 0.05390095338225365, 0.002911337884142995, 0.00016855042485985905, 0.0004623655404429883], "target_probs": 0.5770353674888611}}




Minimal simplified tokens:

['self', 'coordinate', 'rgb_value', '#NEWLINE#', 'b', 'return', '(', '(', 'b', '<<', '16', '|', '(', 'g', '<<', '8', ')', ')', '|', 'r', ')', '#NEWLINE#', '#UNINDENT#', 'rgb', '_convert_rgb', '(', '*', 'rgb_value', ')', 'hdc', '(', 'x', 'y', ')', '=', 'coordinate', 'gdi', 'hdc', 'rgb_value', '(', 'y', ',', 'rgb']
