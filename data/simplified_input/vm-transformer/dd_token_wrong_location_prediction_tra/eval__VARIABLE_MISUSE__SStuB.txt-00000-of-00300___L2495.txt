
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"], "error_location": [27], "repair_targets": [7], "repair_candidates": [7, 16, 23, 31, 9, 20, 27, 5, 18], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "ContinuumIO/ashiba/enaml/enaml/core/enaml_compiler.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2495, "results": {"model": "transformer", "prob": {"loc": [[0.02118450216948986, 4.218438220959797e-07, 5.196269636797979e-09, 1.7279305097872566e-08, 9.604036677046679e-09, 9.49190280152834e-07, 1.1620885587149132e-08, 7.576717848678527e-07, 8.949880836439661e-09, 1.6634527355563478e-07, 1.4119693192427007e-09, 5.749650977548981e-09, 4.670271724904751e-09, 3.451401386911357e-09, 3.183914643045682e-08, 5.186546303548312e-09, 1.3970948486985435e-07, 5.66764146725518e-09, 1.970181813248928e-07, 8.830815545479709e-08, 0.8516371250152588, 4.7617172072023095e-07, 5.353454213263831e-08, 2.121882003436326e-09, 1.8068190499320735e-08, 2.5658180025089905e-09, 1.9211345403391533e-08, 0.12711860239505768, 3.5557044952838623e-07, 2.672793755209568e-07, 7.369515664379378e-09, 5.50298354937695e-05, 2.8721400369136063e-08, 1.595473619886434e-08, 4.298635758459568e-08, 9.67452695732618e-09, 2.964808629712934e-07, 2.9597518391710764e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.000208021403523162, 0.0, 0.9992177486419678, 0.0, 0.0001643183786654845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002383549144724384, 0.0, 7.939319766592234e-05, 0.0, 6.484956429630984e-06, 0.0, 0.0, 7.726201874902472e-05, 0.0, 0.0, 0.0, 4.450826509128092e-06, 0.0, 0.0, 0.0, 4.028225703223143e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9992177486419678]}, "loss": [2.0626349449157715, 0.0007825574721209705], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [20]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 05:35:29.869080", "n_pass": [1, 1, 1], "n_token": 38, "loss": [0.16059483587741852, 0.0007825574721209705], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"]}}
{"position": {"error_location": 20, "repair_targets": [7], "repair_candidates": [7, 16, 23, 31, 9, 20, 27, 5, 18]}}
{"prediction": {"error_location": 0.8516371250152588, "repair_targets": [0.9992177486419678], "repair_candidates": [0.000208021403523162, 0.9992177486419678, 0.0001643183786654845, 0.0002383549144724384, 7.939319766592234e-05, 6.484956429630984e-06, 7.726201874902472e-05, 4.450826509128092e-06, 4.028225703223143e-06], "target_probs": 0.9992177486419678}}


{"result": {"time": "2021-02-21 05:35:29.925327", "n_pass": [20, 2, 2], "n_token": 34, "loss": [0.2769392132759094, 0.0027108544018119574], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"]}}
{"position": {"error_location": 16, "repair_targets": [3], "repair_candidates": [3, 12, 19, 27, 5, 16, 23, 1, 14]}}
{"prediction": {"error_location": 0.7581005692481995, "repair_targets": [0.9972928166389465], "repair_candidates": [0.0007368625956587493, 0.9972928166389465, 4.734481990453787e-05, 9.990776015911251e-05, 0.0018067286582663655, 8.043006346269976e-06, 3.27677071254584e-06, 1.998213065235177e-06, 3.049434553759056e-06], "target_probs": 0.9972928166389465}}


{"result": {"time": "2021-02-21 05:35:29.980933", "n_pass": [27, 3, 3], "n_token": 29, "loss": [0.27322107553482056, 0.004714318551123142], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "."]}}
{"position": {"error_location": 16, "repair_targets": [3], "repair_candidates": [3, 12, 19, 27, 5, 16, 23, 1, 14]}}
{"prediction": {"error_location": 0.7609246373176575, "repair_targets": [0.9952967762947083], "repair_candidates": [0.0014707278460264206, 0.9952967762947083, 7.465547241736203e-05, 0.0002805271651595831, 0.0027893774677067995, 2.6020556106232107e-05, 4.43947319581639e-05, 1.543429243611172e-05, 2.1101939182699425e-06], "target_probs": 0.9952967762947083}}


{"result": {"time": "2021-02-21 05:35:30.036873", "n_pass": [49, 4, 4], "n_token": 27, "loss": [0.24417340755462646, 0.0038502931129187346], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "."]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [3, 10, 17, 25, 5, 14, 21, 1, 12]}}
{"prediction": {"error_location": 0.7833517789840698, "repair_targets": [0.9961571097373962], "repair_candidates": [0.0017972872592508793, 0.9961571097373962, 3.2769981771707535e-05, 0.0001177228259621188, 0.001841148012317717, 1.8970475139212795e-05, 1.3529147508961614e-05, 2.073730320262257e-05, 7.930883612061734e-07], "target_probs": 0.9961571097373962}}


{"result": {"time": "2021-02-21 05:35:30.095057", "n_pass": [50, 5, 5], "n_token": 25, "loss": [0.3209110200405121, 0.002301060128957033], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "."]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [3, 8, 15, 23, 5, 12, 19, 1, 10]}}
{"prediction": {"error_location": 0.7254878282546997, "repair_targets": [0.9977015852928162], "repair_candidates": [0.0014053216436877847, 0.9977015852928162, 7.268393528647721e-05, 0.00013986405974719673, 0.0006105327047407627, 1.20956920000026e-05, 3.5800876503344625e-05, 2.138575291610323e-05, 7.068180138958269e-07], "target_probs": 0.9977015852928162}}


{"result": {"time": "2021-02-21 05:35:30.150218", "n_pass": [51, 6, 6], "n_token": 23, "loss": [0.19127218425273895, 0.0011731708655133843], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 6, 13, 21, 5, 10, 17, 1, 8]}}
{"prediction": {"error_location": 0.8259077668190002, "repair_targets": [0.9988275170326233], "repair_candidates": [0.0008349208510480821, 0.9988275170326233, 6.576710438821465e-05, 0.00013800941815134138, 0.00011259566235821694, 1.0411638413643232e-06, 1.8727183487499133e-05, 1.1322093769194908e-06, 3.046010306206881e-07], "target_probs": 0.9988275170326233}}


{"result": {"time": "2021-02-21 05:35:30.205283", "n_pass": [55, 7, 7], "n_token": 20, "loss": [0.19111691415309906, 0.008522423915565014], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", "filename", ")", "#NEWLINE#", "return", "compiler", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 6, 13, 18, 5, 10, 14, 1, 8]}}
{"prediction": {"error_location": 0.8260360360145569, "repair_targets": [0.9915137887001038], "repair_candidates": [0.0029652086086571217, 0.9915137887001038, 0.0005610341904684901, 0.0012338050873950124, 0.0011095921508967876, 1.0666345588106196e-05, 0.0012279030634090304, 0.0013315954711288214, 4.6491386456182227e-05], "target_probs": 0.9915137887001038}}


{"result": {"time": "2021-02-21 05:35:30.260827", "n_pass": [82, 8, 8], "n_token": 18, "loss": [0.18551675975322723, 0.002992812544107437], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", "filename", ")", "compiler", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 6, 13, 16, 5, 10, 14, 1, 8]}}
{"prediction": {"error_location": 0.8306748270988464, "repair_targets": [0.997011661529541], "repair_candidates": [0.0015936385607346892, 0.997011661529541, 9.403055446455255e-05, 0.0004383689083624631, 0.000651693728286773, 2.995094973812229e-06, 0.00013176313950680196, 7.323372847167775e-05, 2.730999995037564e-06], "target_probs": 0.997011661529541}}


{"result": {"time": "2021-02-21 05:35:30.484522", "n_pass": [91, 12, 9], "n_token": 17, "loss": [0.6986965537071228, 0.016611335799098015], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", "filename", ")", "compiler", "."]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [3, 6, 12, 15, 5, 9, 13, 1, 7]}}
{"prediction": {"error_location": 0.49723300337791443, "repair_targets": [0.9835258722305298], "repair_candidates": [0.0047720326110720634, 0.9835258722305298, 0.0006253336323425174, 0.0011869672453030944, 0.009269810281693935, 4.656553937820718e-05, 0.0002629853261169046, 0.00030660483753308654, 3.827161890512798e-06], "target_probs": 0.9835258722305298}}


{"result": {"time": "2021-02-21 05:35:30.815454", "n_pass": [112, 18, 10], "n_token": 16, "loss": [0.2527628242969513, 0.011891335248947144], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "cls", "(", "filename", ")", "compiler", "filename", ")", "compiler", "."]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [3, 6, 11, 14, 5, 9, 12, 1, 7]}}
{"prediction": {"error_location": 0.7766519784927368, "repair_targets": [0.988179087638855], "repair_candidates": [0.005495357792824507, 0.988179087638855, 0.00023583529400639236, 0.0004194263310637325, 0.005353652872145176, 1.3155943634046707e-05, 0.00027427959139458835, 1.4860199371469207e-05, 1.4365234164870344e-05], "target_probs": 0.988179087638855}}




Minimal simplified tokens:

['def compile(', 'cls', ',', 'node', ',', 'filename', 'compiler', 'cls', '(', 'filename', ')', 'compiler', 'filename', ')', 'compiler', '.']
