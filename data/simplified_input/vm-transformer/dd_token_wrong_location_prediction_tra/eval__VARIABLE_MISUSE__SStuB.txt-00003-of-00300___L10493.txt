
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", ":", "#NEWLINE#", "#INDENT#", "front", "=", "'/'", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", ".", "format", "(", "hashlib", ".", "sha1", "(", "front", ")", ".", "hexdigest", "(", ")", ",", "end", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", ":", "]", ".", "split", "(", "'/'", ")", "#NEWLINE#", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"], "error_location": [105], "repair_targets": [83], "repair_candidates": [108, 2, 11, 85, 9, 19, 30, 42, 105, 110, 83], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "dimagi/commcare-hq/corehq/apps/userreports/sql/util.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00003-of-00300", "js_count": 10493, "results": {"model": "transformer", "prob": {"loc": [[0.0011383917881175876, 1.8666236556441618e-08, 1.053405007667152e-08, 1.0004508332883688e-09, 1.359921508736761e-09, 1.2694104656318927e-09, 9.99302751658604e-10, 4.147868715165259e-09, 1.1092203822116176e-09, 5.326365126734345e-09, 2.566506118739653e-09, 1.7201523760945747e-08, 6.722194467734255e-10, 3.87961440750928e-10, 1.6846941619519384e-09, 1.0238878189738898e-07, 6.1240168491849545e-09, 2.2131461108187978e-09, 9.995123617656532e-10, 2.4695634692761814e-06, 4.109917739469893e-09, 9.82772863089565e-10, 1.2833846207982447e-09, 8.338824075693196e-10, 1.8873594243018488e-08, 9.4120344851234e-10, 1.0687776219597822e-09, 8.533805884169965e-10, 4.668653241779452e-10, 1.627662671310759e-09, 6.337394006550312e-05, 1.2255728876198191e-08, 3.0393434435893596e-09, 6.460988188905503e-09, 6.845191080628865e-09, 3.557273942078609e-08, 3.2492537549444478e-09, 2.5513999801773934e-09, 8.041030064021015e-09, 1.531178073221895e-09, 4.9057945261665736e-08, 2.9878883811562673e-09, 0.00022896629525348544, 1.8007925151053428e-09, 1.4450282748157406e-08, 1.163291862837923e-08, 5.835594762970686e-08, 7.910236909935975e-09, 4.216837989901023e-09, 3.943749771195826e-09, 2.122483522271068e-09, 7.252333178442427e-10, 1.040736830049127e-09, 6.166632759985191e-10, 9.687641799871471e-10, 2.7475794084352856e-08, 1.848652009250884e-09, 1.5375395401306946e-10, 1.7843674315898284e-09, 1.3044432201070322e-09, 1.965711371454404e-09, 7.234965959668216e-10, 3.82239129237405e-09, 1.5434257250035444e-07, 2.299930024207697e-09, 1.6566595872902212e-09, 8.338887913517112e-10, 2.011756095043893e-08, 1.610966471332631e-08, 5.94433569034436e-09, 1.861765849753283e-05, 4.714840073916093e-09, 3.445761675990866e-09, 2.0842121362107946e-09, 5.756271570511728e-10, 1.0809785067067423e-08, 7.383344069467057e-08, 7.770567300724451e-09, 1.623068968115149e-08, 2.255712274745747e-07, 1.3679556154500006e-08, 1.6119839685302395e-08, 2.2252910625297773e-08, 1.7730344836763834e-07, 1.1999737203893801e-08, 0.15004891157150269, 5.270057723549826e-09, 2.3005551952337555e-07, 4.7806487657453545e-08, 2.8404329555087315e-07, 6.343680070131086e-08, 2.3629977974337635e-08, 1.700793106351739e-08, 8.141077145751296e-09, 1.0229301850017691e-09, 5.1154152913568396e-08, 1.0243527867714874e-05, 2.3495948653362575e-07, 2.0152539548234927e-07, 1.8208289986887394e-08, 2.673825250099071e-08, 2.583220037877254e-08, 2.8459827827731488e-09, 5.722535778573956e-09, 3.428580797049108e-08, 0.1850033402442932, 3.580110075063203e-08, 7.761948950246733e-08, 3.5088143501837976e-09, 1.6388094437047585e-08, 0.6634816527366638, 8.580059329688083e-08, 5.33472501729193e-08, 9.245491696674435e-07, 3.173122422595043e-07]], "pointer": [[0.0, 0.0, 0.0003873136593028903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00026394668384455144, 0.0, 0.0001273347734240815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00040391081711277366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0014094902435317636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009091279469430447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9874789714813232, 0.0, 0.00028439919697120786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4670031254790956e-06, 0.0, 0.0, 0.000545003276783973, 0.0, 4.8545880417805165e-06, 0.0, 0.0, 0.0, 0.0]], "target": [0.9874789714813232]}, "loss": [1.687381386756897, 0.01260007731616497], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [110]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 05:50:33.141613", "n_pass": [1, 1, 1], "n_token": 115, "loss": [0.4102540910243988, 0.01260007731616497], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", ":", "#NEWLINE#", "#INDENT#", "front", "=", "'/'", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", ".", "format", "(", "hashlib", ".", "sha1", "(", "front", ")", ".", "hexdigest", "(", ")", ",", "end", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", ":", "]", ".", "split", "(", "'/'", ")", "#NEWLINE#", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 110, "repair_targets": [83], "repair_candidates": [108, 2, 11, 85, 9, 19, 30, 42, 105, 110, 83]}}
{"prediction": {"error_location": 0.6634816527366638, "repair_targets": [0.9874789714813232], "repair_candidates": [0.0003873136593028903, 0.00026394668384455144, 0.0001273347734240815, 0.00040391081711277366, 0.0014094902435317636, 0.009091279469430447, 0.9874789714813232, 0.00028439919697120786, 3.4670031254790956e-06, 0.000545003276783973, 4.8545880417805165e-06], "target_probs": 0.9874789714813232}}


{"result": {"time": "2021-02-21 05:50:33.203508", "n_pass": [24, 2, 2], "n_token": 101, "loss": [0.6477305889129639, 0.01908232271671295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", ":", "#NEWLINE#", "#INDENT#", "front", "=", "'/'", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", "end", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", ":", "]", ".", "split", "(", "'/'", ")", "#NEWLINE#", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 96, "repair_targets": [69], "repair_candidates": [94, 2, 11, 71, 9, 19, 30, 42, 91, 96, 69]}}
{"prediction": {"error_location": 0.5232318639755249, "repair_targets": [0.9810985922813416], "repair_candidates": [0.00031535045127384365, 0.00014641038433182985, 0.00011471789184724912, 0.0007012250134721398, 0.003001491306349635, 0.013443807139992714, 0.9810985922813416, 3.493826443445869e-05, 8.593619895691518e-07, 0.0011401816736906767, 2.3674583644606173e-06], "target_probs": 0.9810985922813416}}


{"result": {"time": "2021-02-21 05:50:33.267670", "n_pass": [46, 3, 3], "n_token": 94, "loss": [0.4826729893684387, 0.010744449682533741], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", ":", "#NEWLINE#", "#INDENT#", "front", "=", "'/'", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", ":", "]", ".", "split", "(", "'/'", ")", "#NEWLINE#", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 89, "repair_targets": [62], "repair_candidates": [87, 2, 11, 64, 9, 19, 30, 42, 84, 89, 62]}}
{"prediction": {"error_location": 0.6171315908432007, "repair_targets": [0.9893130660057068], "repair_candidates": [0.0004966735141351819, 0.00027507764752954245, 0.0001065920150722377, 0.0010666768066585064, 0.0011900229146704078, 0.00563410809263587, 0.9893130660057068, 0.0011005210690200329, 1.973101689145551e-06, 0.0008117074030451477, 3.7078382320032688e-06], "target_probs": 0.9893130660057068}}


{"result": {"time": "2021-02-21 05:50:33.327948", "n_pass": [49, 4, 4], "n_token": 86, "loss": [0.4867165684700012, 0.013819134794175625], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", ":", "#NEWLINE#", "#INDENT#", "front", "=", "'/'", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 81, "repair_targets": [62], "repair_candidates": [79, 2, 11, 64, 9, 19, 30, 42, 76, 81, 62]}}
{"prediction": {"error_location": 0.6146412491798401, "repair_targets": [0.9862759113311768], "repair_candidates": [0.0008014516206458211, 0.00035853186273016036, 0.00019587947463151067, 0.0008825422846712172, 0.0017004611436277628, 0.006151486653834581, 0.9862759113311768, 0.0025420140009373426, 9.235046491085086e-06, 0.0010758725693449378, 6.668382866337197e-06], "target_probs": 0.9862759113311768}}


{"result": {"time": "2021-02-21 05:50:33.388544", "n_pass": [55, 5, 5], "n_token": 79, "loss": [0.2180824875831604, 0.015569808892905712], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "end", "=", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 74, "repair_targets": [55], "repair_candidates": [72, 2, 11, 57, 9, 19, 23, 35, 69, 74, 55]}}
{"prediction": {"error_location": 0.8040590286254883, "repair_targets": [0.9845507740974426], "repair_candidates": [0.0014915072824805975, 0.0004129055596422404, 0.0003694655606523156, 0.0007308177300728858, 0.0017949126195162535, 0.002392979571595788, 0.9845507740974426, 0.0038854414597153664, 1.7450976883992553e-05, 0.004344801418483257, 8.863870789355133e-06], "target_probs": 0.9845507740974426}}


{"result": {"time": "2021-02-21 05:50:33.448973", "n_pass": [57, 6, 6], "n_token": 72, "loss": [0.12705498933792114, 0.02573852799832821], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "return", "hashlib", ".", "sha1", "(", "'{}_{}'", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 67, "repair_targets": [48], "repair_candidates": [65, 2, 11, 50, 9, 19, 23, 28, 62, 67, 48]}}
{"prediction": {"error_location": 0.8806853294372559, "repair_targets": [0.9745898842811584], "repair_candidates": [0.0024507283233106136, 0.0007100430666469038, 0.0007644814904779196, 0.000870203715749085, 0.00286296708509326, 0.002012376906350255, 0.9745898842811584, 0.003978465683758259, 4.0573977457825094e-05, 0.011696790345013142, 2.3639839128009044e-05], "target_probs": 0.9745898842811584}}


{"result": {"time": "2021-02-21 05:50:33.511889", "n_pass": [59, 7, 7], "n_token": 65, "loss": [0.22056809067726135, 0.04120834171772003], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", ")", "]", "[", ":", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 60, "repair_targets": [41], "repair_candidates": [58, 2, 11, 43, 9, 19, 23, 28, 55, 60, 41]}}
{"prediction": {"error_location": 0.8020631670951843, "repair_targets": [0.9596291780471802], "repair_candidates": [0.004781080409884453, 0.0008002328686416149, 0.00225963001139462, 0.0012315454659983516, 0.00923964474350214, 0.012738135643303394, 0.9596291780471802, 0.0031048781238496304, 4.29093670391012e-05, 0.006087291054427624, 8.545925084035844e-05], "target_probs": 0.9596291780471802}}


{"result": {"time": "2021-02-21 05:50:33.572932", "n_pass": [87, 8, 8], "n_token": 61, "loss": [0.39191538095474243, 0.05550365895032883], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "(", "-", "54", ")", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 56, "repair_targets": [37], "repair_candidates": [54, 2, 11, 39, 9, 19, 23, 28, 51, 56, 37]}}
{"prediction": {"error_location": 0.6757612824440002, "repair_targets": [0.946008563041687], "repair_candidates": [0.010178821161389351, 0.0011495110811665654, 0.005355877801775932, 0.0019110888242721558, 0.011230181902647018, 0.015329365618526936, 0.946008563041687, 0.0038185748271644115, 8.158875425579026e-05, 0.004782634787261486, 0.00015370527398772538], "target_probs": 0.946008563041687}}


{"result": {"time": "2021-02-21 05:50:33.691627", "n_pass": [90, 10, 9], "n_token": 57, "loss": [0.6047379374504089, 0.08055850118398666], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts", ")", "]", ")", ")"]}}
{"position": {"error_location": 52, "repair_targets": [37], "repair_candidates": [50, 2, 11, 39, 9, 19, 23, 28, 47, 52, 37]}}
{"prediction": {"error_location": 0.5462175607681274, "repair_targets": [0.9226009249687195], "repair_candidates": [0.020479543134570122, 0.0010820254683494568, 0.008748535998165607, 0.0014182992745190859, 0.010177463293075562, 0.013156619854271412, 0.9226009249687195, 0.009592351503670216, 0.00012033613893436268, 0.012405063025653362, 0.00021876930259168148], "target_probs": 0.9226009249687195}}


{"result": {"time": "2021-02-21 05:50:33.813506", "n_pass": [94, 12, 10], "n_token": 53, "loss": [0.6248299479484558, 0.04810553044080734], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 52, "repair_targets": [37], "repair_candidates": [50, 2, 11, 39, 9, 19, 23, 28, 47, 52, 37]}}
{"prediction": {"error_location": 0.5353524684906006, "repair_targets": [0.9530332088470459], "repair_candidates": [0.00975963193923235, 0.0008508049650117755, 0.0040997653268277645, 0.001244757673703134, 0.009005685336887836, 0.013905297964811325, 0.9530332088470459, 0.003592261578887701, 0.00010981024388456717, 0.004376001190394163, 2.2709475160809234e-05], "target_probs": 0.9530332088470459}}


{"result": {"time": "2021-02-21 05:50:33.873024", "n_pass": [96, 13, 11], "n_token": 50, "loss": [0.3534567654132843, 0.01706899330019951], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "#INDENT#", "\"\\n    :param path: xpath from form or case\\n    :return: column name for postgres\\n\\n    Postgres only allows columns up to 63 characters\\n    Anyone viewing the table directly will want to know the last parts of the path, not the first parts e.g.\\n    this: 'my_long_choice_list_option_1_ABCDEFGH', 'my_long_choice_list_option_2_ABCD1234'\\n    not: 'question_group_1_my_long_choice_ABCDEFGH', 'question_group_1_my_long_choice_ABCD1234'\\n    \"", "#NEWLINE#", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 49, "repair_targets": [34], "repair_candidates": [47, 2, 8, 36, 6, 16, 20, 25, 44, 49, 34]}}
{"prediction": {"error_location": 0.7022563815116882, "repair_targets": [0.9830758571624756], "repair_candidates": [0.0028493250720202923, 0.0005846811691299081, 0.0022731039207428694, 0.0003242459788452834, 0.0020962294656783342, 0.0047881118953228, 0.9830758571624756, 0.00248655304312706, 0.00013870849215891212, 0.0013514533638954163, 3.17872800223995e-05], "target_probs": 0.9830758571624756}}


{"result": {"time": "2021-02-21 05:50:33.930880", "n_pass": [97, 14, 12], "n_token": 47, "loss": [0.3875512182712555, 0.030952665954828262], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", ".", "split", "(", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 46, "repair_targets": [31], "repair_candidates": [44, 2, 5, 33, 3, 13, 17, 22, 41, 46, 31]}}
{"prediction": {"error_location": 0.6787168979644775, "repair_targets": [0.9695214629173279], "repair_candidates": [0.008529962040483952, 0.009611370041966438, 0.0080715361982584, 8.963904110714793e-05, 0.0002877430815715343, 0.0004115428891964257, 0.9695214629173279, 0.0028560145292431116, 2.4231354473158717e-05, 0.000584014633204788, 1.2542943295557052e-05], "target_probs": 0.9695214629173279}}


{"result": {"time": "2021-02-21 05:50:33.989231", "n_pass": [99, 15, 13], "n_token": 44, "loss": [0.1362595409154892, 0.07474573701620102], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", "'/'", ")", "#NEWLINE#", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 43, "repair_targets": [28], "repair_candidates": [41, 2, 5, 30, 3, 10, 14, 19, 38, 43, 28]}}
{"prediction": {"error_location": 0.8726161122322083, "repair_targets": [0.9279794096946716], "repair_candidates": [0.016454285010695457, 0.003936499822884798, 0.04655700922012329, 4.817402077605948e-05, 8.969263581093401e-05, 9.424534073332325e-05, 0.9279794096946716, 0.0003920822055079043, 4.477127276913961e-06, 0.004440878052264452, 3.245625975978328e-06], "target_probs": 0.9279794096946716}}


{"result": {"time": "2021-02-21 05:50:34.047824", "n_pass": [100, 16, 14], "n_token": 41, "loss": [0.08646684885025024, 0.039745740592479706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "[", "(", "-", "1", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 40, "repair_targets": [25], "repair_candidates": [38, 2, 5, 27, 3, 7, 11, 16, 35, 40, 25]}}
{"prediction": {"error_location": 0.9171658754348755, "repair_targets": [0.9610337615013123], "repair_candidates": [0.004834967199712992, 0.01705734245479107, 0.008450481109321117, 0.0002101139398291707, 0.0005660608294419944, 0.00022426937357522547, 0.9610337615013123, 0.0003330131876282394, 3.5606005894806003e-06, 0.007271336391568184, 1.5016746147011872e-05], "target_probs": 0.9610337615013123}}


{"result": {"time": "2021-02-21 05:50:34.109881", "n_pass": [104, 17, 15], "n_token": 37, "loss": [0.1777636855840683, 0.03541073575615883], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "8", "]", "#NEWLINE#", "#UNINDENT#", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 36, "repair_targets": [21], "repair_candidates": [34, 2, 5, 23, 3, 7, 11, 16, 31, 36, 21]}}
{"prediction": {"error_location": 0.8371403217315674, "repair_targets": [0.965208888053894], "repair_candidates": [0.00420114491134882, 0.014144682325422764, 0.007307757157832384, 8.574467210564762e-05, 0.0002554417587816715, 8.433273251284845e-06, 0.965208888053894, 0.0002724422374740243, 5.371741735871183e-06, 0.00850147195160389, 8.677471669216175e-06], "target_probs": 0.965208888053894}}


{"result": {"time": "2021-02-21 05:50:34.167395", "n_pass": [105, 18, 16], "n_token": 33, "loss": [0.6537945866584778, 0.0959058552980423], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "new_parts", "=", "path", "[", "return", "'_'", ".", "join", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 32, "repair_targets": [17], "repair_candidates": [30, 2, 5, 19, 3, 7, 11, 16, 27, 32, 17]}}
{"prediction": {"error_location": 0.5200685262680054, "repair_targets": [0.9085495471954346], "repair_candidates": [0.006914711091667414, 0.05175000801682472, 0.006217987276613712, 0.0004646800516638905, 0.000493312778417021, 0.0006894049001857638, 0.9085495471954346, 0.0010181984398514032, 3.6208646179147763e-06, 0.023886295035481453, 1.226774384122109e-05], "target_probs": 0.9085495471954346}}


{"result": {"time": "2021-02-21 05:50:34.225357", "n_pass": [107, 19, 17], "n_token": 29, "loss": [0.5335348844528198, 0.28274115920066833], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_column_name(", "path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "new_parts", "=", "path", "[", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 28, "repair_targets": [17], "repair_candidates": [26, 2, 5, 19, 3, 7, 11, 16, 23, 28, 17]}}
{"prediction": {"error_location": 0.586527943611145, "repair_targets": [0.7537148594856262], "repair_candidates": [0.01961720734834671, 0.19776341319084167, 0.018589304760098457, 0.0010253520449623466, 0.0008189657819457352, 0.0011728290701285005, 0.7537148594856262, 0.001170575269497931, 1.0556503184488975e-05, 0.006097845733165741, 1.92320003407076e-05], "target_probs": 0.7537148594856262}}


{"result": {"time": "2021-02-21 05:50:34.342340", "n_pass": [136, 21, 18], "n_token": 28, "loss": [0.1279594451189041, 0.07168444246053696], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_column_name(", "path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "new_parts", "=", "path", "[", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 27, "repair_targets": [16], "repair_candidates": [25, 1, 4, 18, 2, 6, 10, 15, 22, 27, 16]}}
{"prediction": {"error_location": 0.8798890709877014, "repair_targets": [0.9308245778083801], "repair_candidates": [0.008792738430202007, 0.0038082017563283443, 0.0048515270464122295, 0.0024128304794430733, 0.0011514830403029919, 0.0015341747784987092, 0.9308245778083801, 0.0007712726364843547, 8.238789632741828e-06, 0.04582681506872177, 1.811971378629096e-05], "target_probs": 0.9308245778083801}}


{"result": {"time": "2021-02-21 05:50:34.403627", "n_pass": [137, 22, 19], "n_token": 27, "loss": [0.20384274423122406, 0.03971559554338455], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "=", "path", "def _hash(", "parts", ")", "join", "(", "parts", "[", ":", "(", "-", "parts", "new_parts", "=", "path", "[", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 26, "repair_targets": [15], "repair_candidates": [24, 0, 3, 17, 1, 5, 9, 14, 21, 26, 15]}}
{"prediction": {"error_location": 0.8155906200408936, "repair_targets": [0.9610627293586731], "repair_candidates": [0.0008005980052985251, 0.0016519918572157621, 0.015599861741065979, 0.0005659197922796011, 0.0021123355254530907, 0.0010238359682261944, 0.9610627293586731, 0.0002931700146291405, 4.352003543317551e-06, 0.016876311972737312, 8.882930160325486e-06], "target_probs": 0.9610627293586731}}


{"result": {"time": "2021-02-21 05:50:34.461618", "n_pass": [141, 23, 20], "n_token": 25, "loss": [0.6518367528915405, 0.24226729571819305], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "=", "path", "def _hash(", "parts", ")", "parts", "[", ":", "(", "-", "parts", "new_parts", "=", "path", "[", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 24, "repair_targets": [13], "repair_candidates": [22, 0, 3, 15, 1, 5, 7, 12, 19, 24, 13]}}
{"prediction": {"error_location": 0.5210878252983093, "repair_targets": [0.7848463654518127], "repair_candidates": [0.007489662617444992, 0.009188935160636902, 0.037271540611982346, 0.034680068492889404, 0.05194113403558731, 0.03392166644334793, 0.7848463654518127, 2.0832660084124655e-05, 1.4985810594225768e-05, 0.04061437025666237, 1.0484074664418586e-05], "target_probs": 0.7848463654518127}}


{"result": {"time": "2021-02-21 05:50:34.519037", "n_pass": [143, 24, 21], "n_token": 23, "loss": [0.9617859125137329, 0.27596336603164673], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "=", "path", "def _hash(", "parts", ")", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "(", "(", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 22, "repair_targets": [11], "repair_candidates": [20, 0, 3, 13, 1, 5, 7, 10, 17, 22, 11]}}
{"prediction": {"error_location": 0.3822096884250641, "repair_targets": [0.7588407397270203], "repair_candidates": [0.004744093399494886, 0.007237663492560387, 0.04043640196323395, 0.025909606367349625, 0.03673376142978668, 0.099453866481781, 0.7588407397270203, 8.38996402308112e-06, 7.2561329034215305e-06, 0.026623161509633064, 5.0731100600387435e-06], "target_probs": 0.7588407397270203}}


{"result": {"time": "2021-02-21 05:50:34.576353", "n_pass": [147, 25, 22], "n_token": 21, "loss": [0.3287992477416992, 0.15575022995471954], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "=", "path", "def _hash(", "parts", ")", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "[", "_hash", "(", "parts"]}}
{"position": {"error_location": 20, "repair_targets": [11], "repair_candidates": [18, 0, 3, 13, 1, 5, 7, 10, 15, 20, 11]}}
{"prediction": {"error_location": 0.7197874784469604, "repair_targets": [0.8557729125022888], "repair_candidates": [0.0025329547934234142, 0.0039017393719404936, 0.020233027637004852, 0.009070003405213356, 0.008647151291370392, 0.05531979724764824, 0.8557729125022888, 7.636914460817934e-07, 2.2851813810120802e-06, 0.04451865702867508, 7.202838219200203e-07], "target_probs": 0.8557729125022888}}


{"result": {"time": "2021-02-21 05:50:34.695071", "n_pass": [181, 27, 23], "n_token": 20, "loss": [0.46440500020980835, 0.13985739648342133], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "=", "path", "def _hash(", "parts", ")", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "_hash", "(", "parts"]}}
{"position": {"error_location": 19, "repair_targets": [11], "repair_candidates": [17, 0, 3, 13, 1, 5, 7, 10, 15, 19, 11]}}
{"prediction": {"error_location": 0.628508985042572, "repair_targets": [0.8694822192192078], "repair_candidates": [0.0025154610630124807, 0.006412263493984938, 0.020062947645783424, 0.00998461339622736, 0.008295390754938126, 0.07000910490751266, 0.8694822192192078, 1.145299961535784e-06, 1.611515926924767e-06, 0.013234561309218407, 6.392976388269744e-07], "target_probs": 0.8694822192192078}}


{"result": {"time": "2021-02-21 05:50:34.809966", "n_pass": [186, 29, 24], "n_token": 19, "loss": [0.44993096590042114, 0.16702209413051605], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "path", "def _hash(", "parts", ")", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "_hash", "(", "parts"]}}
{"position": {"error_location": 18, "repair_targets": [10], "repair_candidates": [16, 0, 2, 12, 1, 4, 6, 9, 14, 18, 10]}}
{"prediction": {"error_location": 0.6376721858978271, "repair_targets": [0.8461809158325195], "repair_candidates": [0.000470647937618196, 0.0011803540401160717, 0.0006452075322158635, 0.13257412612438202, 0.003312712302431464, 0.00884380005300045, 0.8461809158325195, 2.895294755944633e-06, 7.709031706326641e-07, 0.006788285914808512, 2.761125017514132e-07], "target_probs": 0.8461809158325195}}


{"result": {"time": "2021-02-21 05:50:34.867242", "n_pass": [188, 30, 25], "n_token": 18, "loss": [0.981095552444458, 0.3300609290599823], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "path", "parts", ")", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "_hash", "(", "parts"]}}
{"position": {"error_location": 17, "repair_targets": [9], "repair_candidates": [15, 0, 2, 11, 1, 3, 5, 8, 13, 17, 9]}}
{"prediction": {"error_location": 0.37490013241767883, "repair_targets": [0.7188799381256104], "repair_candidates": [0.000690206594299525, 0.0017893294570967555, 0.0021814850624650717, 0.26000168919563293, 0.0052527207881212234, 0.006663094740360975, 0.7188799381256104, 3.439714873820776e-06, 9.935671414496028e-07, 0.004536470863968134, 5.777893079539353e-07], "target_probs": 0.7188799381256104}}


{"result": {"time": "2021-02-21 05:50:34.925042", "n_pass": [190, 31, 26], "n_token": 17, "loss": [0.7470703125, 0.1852869838476181], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "path", "parts", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "_hash", "(", "parts"]}}
{"position": {"error_location": 16, "repair_targets": [8], "repair_candidates": [14, 0, 2, 10, 1, 3, 4, 7, 12, 16, 8]}}
{"prediction": {"error_location": 0.4737524092197418, "repair_targets": [0.8308658003807068], "repair_candidates": [0.0005078096291981637, 0.001541449106298387, 0.0009580764453858137, 0.12897969782352448, 0.032332658767700195, 0.002468791790306568, 0.8308658003807068, 2.329084964003414e-06, 5.448757747217314e-07, 0.002342459512874484, 2.9529493872360035e-07], "target_probs": 0.8308658003807068}}


{"result": {"time": "2021-02-21 05:50:35.271550", "n_pass": [202, 37, 27], "n_token": 16, "loss": [0.7043445110321045, 0.4427342116832733], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "path", "parts", "parts", "[", "-", "parts", "new_parts", "=", "path", "[", "parts", "+", "_hash", "parts"]}}
{"position": {"error_location": 15, "repair_targets": [8], "repair_candidates": [14, 0, 2, 10, 1, 3, 4, 7, 12, 15, 8]}}
{"prediction": {"error_location": 0.49443262815475464, "repair_targets": [0.6422778964042664], "repair_candidates": [0.00023217270791064948, 0.0011197507847100496, 0.0001557338546263054, 0.3085213303565979, 0.04734992980957031, 0.00031583194504491985, 0.6422778964042664, 2.1372245100792497e-05, 2.9786141908516583e-07, 5.47004447071231e-06, 2.3097912560388068e-07], "target_probs": 0.6422778964042664}}


{"result": {"time": "2021-02-21 05:50:35.446363", "n_pass": [213, 40, 28], "n_token": 15, "loss": [0.8612220287322998, 0.2797073721885681], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["path", "parts", "path", "parts", "parts", "[", "-", "parts", "new_parts", "path", "[", "parts", "+", "_hash", "parts"]}}
{"position": {"error_location": 14, "repair_targets": [8], "repair_candidates": [13, 0, 2, 9, 1, 3, 4, 7, 11, 14, 8]}}
{"prediction": {"error_location": 0.42264530062675476, "repair_targets": [0.7560049295425415], "repair_candidates": [0.0006560123874805868, 0.002305373316630721, 0.007674131076782942, 0.13588140904903412, 0.07282846421003342, 0.0007868246175348759, 0.7560049295425415, 0.023837905377149582, 1.3172043509257492e-05, 1.022879769152496e-05, 1.5449006696144352e-06], "target_probs": 0.7560049295425415}}




Minimal simplified tokens:

['path', 'parts', 'path', 'parts', 'parts', '[', '-', 'parts', 'new_parts', 'path', '[', 'parts', '+', '_hash', 'parts']
