
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", ")", "is", "None", ")", "and", "(", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"], "error_location": [67], "repair_targets": [9, 36, 46, 93], "repair_candidates": [11, 23, 53, 67, 74, 86, 100, 9, 36, 46, 93], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "RoseOu/flasky/venv/lib/python2.7/site-packages/sqlalchemy/ext/orderinglist.py", "license": "mit", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 35348, "results": {"model": "transformer", "prob": {"loc": [[0.1545483022928238, 4.428844476933591e-06, 1.059113060364325e-06, 1.6238105615684617e-07, 2.731155177571054e-07, 1.9016869146071258e-07, 1.7622028281039093e-07, 1.2996229088457767e-06, 2.306401825080684e-07, 6.259962788135454e-07, 1.5671929531890783e-06, 6.235519322217442e-06, 4.869864369538845e-07, 4.474779586871591e-07, 7.492458848901151e-07, 0.00011505425936775282, 1.050018454407109e-06, 1.5404451687572873e-06, 3.169419073856261e-07, 5.419685749075143e-07, 3.471941170118953e-07, 1.8006423374572478e-07, 1.9663264083646936e-06, 4.0045997593551874e-05, 4.931749231218419e-07, 5.652689694102264e-08, 8.079329063548357e-07, 3.7840196455363184e-05, 1.1821661018984742e-06, 2.0148024759691907e-06, 1.3853702967026038e-06, 7.388246672235255e-07, 2.1703783659177134e-07, 1.8083380837197183e-07, 1.3981107258587144e-06, 0.00017955245857592672, 0.007545828819274902, 5.4932520470174495e-06, 2.3924178549350472e-06, 1.5546529539278708e-06, 1.6201833830109535e-07, 1.0314430483049364e-06, 5.976483521408227e-07, 1.0430719612486428e-06, 2.4023381683946354e-06, 6.20319997324259e-06, 0.49810072779655457, 7.954701140988618e-05, 0.004842774011194706, 2.715306663958472e-06, 2.5447709504078375e-06, 2.0273751033528242e-06, 5.666759079758776e-07, 5.380353741202271e-06, 7.187381015683059e-06, 3.459860818111338e-05, 2.6765752636492834e-07, 3.0841517855151324e-06, 8.879900997271761e-05, 6.654817639173416e-07, 4.774188369083276e-07, 1.309818458139489e-06, 1.4371033785209875e-06, 8.156289368344005e-07, 7.460103006451391e-07, 1.5701940583312535e-06, 0.00014302466297522187, 0.30328813195228577, 9.110151950153522e-06, 2.1116147763677873e-05, 1.3800605813685252e-07, 2.79512414635974e-06, 1.0232971590085072e-06, 7.047225381029421e-07, 4.318863375374349e-06, 1.0245594239677303e-05, 2.774693894025404e-05, 9.160170861832739e-07, 1.166484707937343e-05, 9.87490129773505e-05, 1.8878679384215502e-06, 9.73729925135558e-07, 1.9465455807221588e-06, 1.3622346841657418e-06, 9.377970400237245e-07, 6.747224006176111e-07, 9.770485121407546e-06, 2.1013993318774737e-05, 2.7827711164718494e-05, 1.750626807961453e-07, 6.792644171582651e-07, 5.193122660784866e-07, 0.00020165865134913474, 0.021736379712820053, 1.1935270549656707e-06, 9.233379500983574e-07, 7.552404213129194e-07, 8.109210511975107e-07, 9.939062692865264e-07, 1.5137131867959397e-06, 0.008671245537698269]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1288292407989502, 0.0, 0.00931693334132433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09130768477916718, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.058845605701208115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33917877078056335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016597921028733253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3504047095775604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002964176470413804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012108032824471593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001251076813787222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.304304694524035e-05]], "target": [0.5281047224998474]}, "loss": [1.193071961402893, 0.6384606957435608], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [46]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:52:33.912958", "n_pass": [1, 1, 1], "n_token": 101, "loss": [0.6969529390335083, 0.6384606957435608], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", ")", "is", "None", ")", "and", "(", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_0", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 46, "repair_targets": [9, 36, 46, 93], "repair_candidates": [11, 23, 53, 67, 74, 86, 100, 9, 36, 46, 93]}}
{"prediction": {"error_location": 0.49810072779655457, "repair_targets": [0.1288292407989502, 0.058845605701208115, 0.33917877078056335, 0.001251076813787222], "repair_candidates": [0.1288292407989502, 0.00931693334132433, 0.09130768477916718, 0.058845605701208115, 0.33917877078056335, 0.016597921028733253, 0.3504047095775604, 0.002964176470413804, 0.0012108032824471593, 0.001251076813787222, 9.304304694524035e-05], "target_probs": 0.5281047224998474}}


{"result": {"time": "2021-02-21 06:52:34.321305", "n_pass": [54, 8, 2], "n_token": 95, "loss": [0.8305016160011292, 0.502693772315979], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", ")", "is", "None", ")", "and", "(", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_0", "#NEWLINE#", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 46, "repair_targets": [9, 36, 46, 87], "repair_candidates": [11, 23, 53, 61, 68, 80, 94, 9, 36, 46, 87]}}
{"prediction": {"error_location": 0.43583062291145325, "repair_targets": [0.36447590589523315, 0.11478608101606369, 0.11938556283712387, 0.0062514422461390495], "repair_candidates": [0.36447590589523315, 0.018666084855794907, 0.1395665407180786, 0.11478608101606369, 0.11938556283712387, 0.035276319831609726, 0.1569283902645111, 0.03646662458777428, 0.00699775293469429, 0.0062514422461390495, 0.00119930156506598], "target_probs": 0.604898989200592}}


{"result": {"time": "2021-02-21 06:52:34.611336", "n_pass": [69, 13, 3], "n_token": 89, "loss": [0.9291319251060486, 0.5823583006858826], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", ")", "is", "None", ")", "and", "(", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 46, "repair_targets": [9, 36, 46, 81], "repair_candidates": [11, 23, 53, 55, 62, 74, 88, 9, 36, 46, 81]}}
{"prediction": {"error_location": 0.39489632844924927, "repair_targets": [0.3456481695175171, 0.1154925748705864, 0.09243728965520859, 0.005001467186957598], "repair_candidates": [0.3456481695175171, 0.01727844588458538, 0.10473982244729996, 0.1154925748705864, 0.09243728965520859, 0.0005982134025543928, 0.2770994007587433, 0.027721280232071877, 0.012558999471366405, 0.005001467186957598, 0.0014243933837860823], "target_probs": 0.5585795044898987}}


{"result": {"time": "2021-02-21 06:52:34.843069", "n_pass": [80, 17, 4], "n_token": 83, "loss": [0.8478862047195435, 0.5634692311286926], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 40, "repair_targets": [9, 30, 40, 75], "repair_candidates": [11, 23, 47, 49, 56, 68, 82, 9, 30, 40, 75]}}
{"prediction": {"error_location": 0.4283193051815033, "repair_targets": [0.2465670257806778, 0.24982042610645294, 0.07038232684135437, 0.0024610485415905714], "repair_candidates": [0.2465670257806778, 0.011919992044568062, 0.09625460207462311, 0.24982042610645294, 0.07038232684135437, 0.0007329749059863389, 0.2536768317222595, 0.02780240960419178, 0.0389542356133461, 0.0024610485415905714, 0.0014281588373705745], "target_probs": 0.569230854511261}}


{"result": {"time": "2021-02-21 06:52:36.861093", "n_pass": [219, 52, 5], "n_token": 81, "loss": [0.966570258140564, 0.6710095405578613], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 40, "repair_targets": [9, 30, 40, 73], "repair_candidates": [11, 23, 47, 49, 56, 66, 80, 9, 30, 40, 73]}}
{"prediction": {"error_location": 0.38038548827171326, "repair_targets": [0.24857103824615479, 0.17846998572349548, 0.0817519873380661, 0.0023992930073291063], "repair_candidates": [0.24857103824615479, 0.010794154368340969, 0.11092129349708557, 0.17846998572349548, 0.0817519873380661, 0.0010634956415742636, 0.26967617869377136, 0.039136290550231934, 0.0552736297249794, 0.0023992930073291063, 0.0019426693907007575], "target_probs": 0.511192262172699}}


{"result": {"time": "2021-02-21 06:52:37.207928", "n_pass": [227, 58, 6], "n_token": 79, "loss": [0.9748836159706116, 0.6638952493667603], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ".", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 40, "repair_targets": [9, 30, 40, 73], "repair_candidates": [11, 23, 47, 49, 56, 66, 78, 9, 30, 40, 73]}}
{"prediction": {"error_location": 0.3772362470626831, "repair_targets": [0.22510185837745667, 0.2109043300151825, 0.07696438580751419, 0.0018714029574766755], "repair_candidates": [0.22510185837745667, 0.01122230477631092, 0.10067354887723923, 0.2109043300151825, 0.07696438580751419, 0.0011045453138649464, 0.2973792254924774, 0.03277958929538727, 0.03871717303991318, 0.0018714029574766755, 0.0032816072925925255], "target_probs": 0.5148419737815857}}


{"result": {"time": "2021-02-21 06:52:37.899604", "n_pass": [242, 70, 7], "n_token": 78, "loss": [1.0583324432373047, 0.6425103545188904], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "(", "count_from", ")", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 72], "repair_candidates": [11, 22, 46, 48, 55, 65, 77, 9, 29, 39, 72]}}
{"prediction": {"error_location": 0.3470340371131897, "repair_targets": [0.21569666266441345, 0.2385740429162979, 0.06911950558423996, 0.002580160740762949], "repair_candidates": [0.21569666266441345, 0.0005289026303216815, 0.09783975780010223, 0.2385740429162979, 0.06911950558423996, 0.0013158845249563456, 0.31273528933525085, 0.029650548473000526, 0.029048286378383636, 0.002580160740762949, 0.0029109737370163202], "target_probs": 0.5259703993797302}}


{"result": {"time": "2021-02-21 06:52:42.655892", "n_pass": [401, 153, 8], "n_token": 77, "loss": [1.0396825075149536, 0.6586769223213196], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "count_from", ")", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 71], "repair_candidates": [11, 22, 46, 48, 55, 65, 76, 9, 29, 39, 71]}}
{"prediction": {"error_location": 0.3535669445991516, "repair_targets": [0.23740436136722565, 0.19448454678058624, 0.08391468226909637, 0.0017320651095360518], "repair_candidates": [0.23740436136722565, 0.0006188095430843532, 0.10988085716962814, 0.19448454678058624, 0.08391468226909637, 0.0015354922506958246, 0.31975165009498596, 0.02796679176390171, 0.02102419175207615, 0.0017320651095360518, 0.0016864726785570383], "target_probs": 0.5175356268882751}}


{"result": {"time": "2021-02-21 06:52:42.713965", "n_pass": [403, 154, 9], "n_token": 76, "loss": [1.0356833934783936, 0.549957275390625], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "count_from", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 71], "repair_candidates": [11, 22, 46, 48, 55, 65, 75, 9, 29, 39, 71]}}
{"prediction": {"error_location": 0.35498371720314026, "repair_targets": [0.19502073526382446, 0.31209081411361694, 0.06858653575181961, 0.0012763564009219408], "repair_candidates": [0.19502073526382446, 0.0005507831228896976, 0.09423847496509552, 0.31209081411361694, 0.06858653575181961, 0.0015280225779861212, 0.27777108550071716, 0.020578771829605103, 0.026701325550675392, 0.0012763564009219408, 0.0016570931766182184], "target_probs": 0.5769744515419006}}


{"result": {"time": "2021-02-21 06:52:45.123579", "n_pass": [451, 196, 10], "n_token": 75, "loss": [0.8585206270217896, 0.6495970487594604], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from_n_factory", "count_from", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 70], "repair_candidates": [11, 22, 45, 47, 54, 64, 74, 9, 29, 39, 70]}}
{"prediction": {"error_location": 0.42378854751586914, "repair_targets": [0.23025807738304138, 0.24185211956501007, 0.04886016622185707, 0.0012857932597398758], "repair_candidates": [0.23025807738304138, 0.0007905444363132119, 0.16358314454555511, 0.24185211956501007, 0.04886016622185707, 0.0014044932322576642, 0.2697046399116516, 0.019650079309940338, 0.02150646038353443, 0.0012857932597398758, 0.0011044745333492756], "target_probs": 0.5222561955451965}}


{"result": {"time": "2021-02-21 06:52:46.445766", "n_pass": [478, 219, 11], "n_token": 74, "loss": [0.9423580169677734, 0.6557928323745728], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "return", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 69], "repair_candidates": [11, 22, 45, 47, 54, 64, 73, 9, 29, 39, 69]}}
{"prediction": {"error_location": 0.3897078037261963, "repair_targets": [0.2635965347290039, 0.19723588228225708, 0.052655018866062164, 0.005542908329516649], "repair_candidates": [0.2635965347290039, 0.0008493989007547498, 0.1935444474220276, 0.19723588228225708, 0.052655018866062164, 0.0007815273711457849, 0.24078120291233063, 0.016430819407105446, 0.027992406859993935, 0.005542908329516649, 0.0005898209637962282], "target_probs": 0.5190303921699524}}


{"result": {"time": "2021-02-21 06:52:46.617695", "n_pass": [482, 222, 12], "n_token": 73, "loss": [1.1274012327194214, 0.6015101671218872], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "#INDENT#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 69], "repair_candidates": [11, 22, 45, 47, 54, 64, 72, 9, 29, 39, 69]}}
{"prediction": {"error_location": 0.3238738179206848, "repair_targets": [0.25679439306259155, 0.19577078521251678, 0.0918089970946312, 0.003609292907640338], "repair_candidates": [0.25679439306259155, 0.0008328270632773638, 0.2534184455871582, 0.19577078521251678, 0.0918089970946312, 0.0004058310005348176, 0.13678640127182007, 0.02783089317381382, 0.02448584884405136, 0.003609292907640338, 0.008256226778030396], "target_probs": 0.5479834675788879}}


{"result": {"time": "2021-02-21 06:52:48.916101", "n_pass": [528, 262, 13], "n_token": 72, "loss": [1.2011277675628662, 0.6142358183860779], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 68], "repair_candidates": [11, 22, 44, 46, 53, 63, 71, 9, 29, 39, 68]}}
{"prediction": {"error_location": 0.30085471272468567, "repair_targets": [0.2784452438354492, 0.15293437242507935, 0.10633424669504166, 0.0033402880653738976], "repair_candidates": [0.2784452438354492, 0.0010267281904816628, 0.28678640723228455, 0.15293437242507935, 0.10633424669504166, 0.0004777289286721498, 0.10226908326148987, 0.03249393776059151, 0.02509223110973835, 0.0033402880653738976, 0.010799745097756386], "target_probs": 0.5410541892051697}}


{"result": {"time": "2021-02-21 06:52:49.258240", "n_pass": [536, 268, 14], "n_token": 71, "loss": [1.189233660697937, 0.6250486373901367], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 67], "repair_candidates": [11, 22, 44, 46, 52, 62, 70, 9, 29, 39, 67]}}
{"prediction": {"error_location": 0.3044544458389282, "repair_targets": [0.2915436327457428, 0.1303980052471161, 0.11013213545084, 0.0031615959014743567], "repair_candidates": [0.2915436327457428, 0.001185414264909923, 0.2875038981437683, 0.1303980052471161, 0.11013213545084, 0.0005766249960288405, 0.10021382570266724, 0.0351671501994133, 0.02994573302567005, 0.0031615959014743567, 0.010171934962272644], "target_probs": 0.5352354049682617}}


{"result": {"time": "2021-02-21 06:52:49.544001", "n_pass": [542, 273, 15], "n_token": 70, "loss": [1.1301684379577637, 0.668586254119873], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "[", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 66], "repair_candidates": [11, 22, 44, 46, 52, 61, 69, 9, 29, 39, 66]}}
{"prediction": {"error_location": 0.3229788541793823, "repair_targets": [0.29435381293296814, 0.10824567824602127, 0.10703136771917343, 0.002801683498546481], "repair_candidates": [0.29435381293296814, 0.0015180513728410006, 0.30382969975471497, 0.10824567824602127, 0.10703136771917343, 0.0005945829325355589, 0.11265460401773453, 0.02986052632331848, 0.0326685756444931, 0.002801683498546481, 0.006441394332796335], "target_probs": 0.5124325156211853}}


{"result": {"time": "2021-02-21 06:52:49.888671", "n_pass": [549, 279, 16], "n_token": 69, "loss": [1.219631314277649, 0.5804247260093689], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "'ordering_func'", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 65], "repair_candidates": [11, 22, 44, 46, 52, 61, 68, 9, 29, 39, 65]}}
{"prediction": {"error_location": 0.29533904790878296, "repair_targets": [0.3300666809082031, 0.0790136307477951, 0.1449478417634964, 0.005632479675114155], "repair_candidates": [0.3300666809082031, 0.0019081891514360905, 0.21965880692005157, 0.0790136307477951, 0.1449478417634964, 0.00037723276182077825, 0.08532657474279404, 0.0563834048807621, 0.0716882050037384, 0.005632479675114155, 0.004996962379664183], "target_probs": 0.5596606135368347}}


{"result": {"time": "2021-02-21 06:52:49.946362", "n_pass": [550, 280, 17], "n_token": 68, "loss": [1.1269922256469727, 0.6132214069366455], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "=", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 64], "repair_candidates": [11, 22, 44, 46, 52, 61, 67, 9, 29, 39, 64]}}
{"prediction": {"error_location": 0.3240063786506653, "repair_targets": [0.3384772539138794, 0.054424647241830826, 0.14396625757217407, 0.004735172260552645], "repair_candidates": [0.3384772539138794, 0.0018561957404017448, 0.2163088172674179, 0.054424647241830826, 0.14396625757217407, 0.000445085228420794, 0.10033178329467773, 0.04113225266337395, 0.09501579403877258, 0.004735172260552645, 0.003306708065792918], "target_probs": 0.5416033267974854}}


{"result": {"time": "2021-02-21 06:52:50.060510", "n_pass": [552, 282, 18], "n_token": 67, "loss": [1.0119786262512207, 0.6029596924781799], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "#UNINDENT#", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 63], "repair_candidates": [11, 22, 44, 46, 52, 61, 66, 9, 29, 39, 63]}}
{"prediction": {"error_location": 0.36349907517433167, "repair_targets": [0.30412423610687256, 0.08344800770282745, 0.15512417256832123, 0.004493275657296181], "repair_candidates": [0.30412423610687256, 0.002347744069993496, 0.169655442237854, 0.08344800770282745, 0.15512417256832123, 0.0004060851933900267, 0.10980428755283356, 0.05203131586313248, 0.11278292536735535, 0.004493275657296181, 0.005782511550933123], "target_probs": 0.5471897125244141}}


{"result": {"time": "2021-02-21 06:52:50.118969", "n_pass": [554, 283, 19], "n_token": 66, "loss": [0.9647897481918335, 0.5943340063095093], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "#UNINDENT#", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 63], "repair_candidates": [11, 22, 44, 46, 52, 61, 65, 9, 29, 39, 63]}}
{"prediction": {"error_location": 0.3810632824897766, "repair_targets": [0.3000446557998657, 0.07643845677375793, 0.17320600152015686, 0.002240876667201519], "repair_candidates": [0.3000446557998657, 0.002653137082234025, 0.18137578666210175, 0.07643845677375793, 0.17320600152015686, 0.00040494283894076943, 0.1301099807024002, 0.05869525298476219, 0.06863479316234589, 0.002240876667201519, 0.006196090951561928], "target_probs": 0.5519300103187561}}


{"result": {"time": "2021-02-21 06:52:50.179290", "n_pass": [555, 284, 20], "n_token": 65, "loss": [1.0154739618301392, 0.31583207845687866], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", ":", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 39, "repair_targets": [9, 29, 39, 63], "repair_candidates": [11, 22, 44, 46, 52, 61, 64, 9, 29, 39, 63]}}
{"prediction": {"error_location": 0.36223071813583374, "repair_targets": [0.4105728566646576, 0.013739440590143204, 0.30311909317970276, 0.001750518218614161], "repair_candidates": [0.4105728566646576, 0.0030927977059036493, 0.09429829567670822, 0.013739440590143204, 0.30311909317970276, 0.0003908020444214344, 0.12110649794340134, 0.050074122846126556, 0.0012212651781737804, 0.001750518218614161, 0.0006343185668811202], "target_probs": 0.7291818857192993}}


{"result": {"time": "2021-02-21 06:52:50.464618", "n_pass": [561, 289, 21], "n_token": 64, "loss": [1.2377324104309082, 0.2571995258331299], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "get", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 38, "repair_targets": [8, 28, 38, 62], "repair_candidates": [10, 21, 43, 45, 51, 60, 63, 8, 28, 38, 62]}}
{"prediction": {"error_location": 0.2900411784648895, "repair_targets": [0.42793723940849304, 0.02507093921303749, 0.31857240200042725, 0.0016333457315340638], "repair_candidates": [0.42793723940849304, 0.0064265369437634945, 0.08124270290136337, 0.02507093921303749, 0.31857240200042725, 0.00040416038245894015, 0.08232198655605316, 0.05454283580183983, 0.001032386440783739, 0.0016333457315340638, 0.0008154933457262814], "target_probs": 0.7732139229774475}}


{"result": {"time": "2021-02-21 06:52:51.437549", "n_pass": [581, 306, 22], "n_token": 63, "loss": [1.0817925930023193, 0.43624672293663025], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", ",", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 37, "repair_targets": [8, 27, 37, 61], "repair_candidates": [10, 21, 42, 44, 50, 59, 62, 8, 27, 37, 61]}}
{"prediction": {"error_location": 0.3389873504638672, "repair_targets": [0.35352200269699097, 0.019992109388113022, 0.27183768153190613, 0.0011064063291996717], "repair_candidates": [0.35352200269699097, 0.005782999098300934, 0.19851692020893097, 0.019992109388113022, 0.27183768153190613, 0.00034748713369481266, 0.0952354297041893, 0.051687970757484436, 0.001122873043641448, 0.0011064063291996717, 0.0008482011035084724], "target_probs": 0.6464582085609436}}


{"result": {"time": "2021-02-21 06:52:51.611968", "n_pass": [584, 309, 23], "n_token": 62, "loss": [1.0607911348342896, 0.4485456943511963], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "None", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 36, "repair_targets": [8, 26, 36, 60], "repair_candidates": [10, 21, 41, 43, 49, 58, 61, 8, 26, 36, 60]}}
{"prediction": {"error_location": 0.34618180990219116, "repair_targets": [0.3495708703994751, 0.018836017698049545, 0.2692289650440216, 0.0009202725486829877], "repair_candidates": [0.3495708703994751, 0.005478331353515387, 0.21416935324668884, 0.018836017698049545, 0.2692289650440216, 0.0003800297563429922, 0.09234743565320969, 0.04665904492139816, 0.00161970523186028, 0.0009202725486829877, 0.0007899589254520833], "target_probs": 0.6385561227798462}}


{"result": {"time": "2021-02-21 06:52:51.669689", "n_pass": [585, 310, 24], "n_token": 61, "loss": [1.0816497802734375, 0.5323178768157959], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "count_from", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 35, "repair_targets": [8, 25, 35, 59], "repair_candidates": [10, 21, 40, 42, 48, 57, 60, 8, 25, 35, 59]}}
{"prediction": {"error_location": 0.3390357494354248, "repair_targets": [0.3737611174583435, 0.01350776944309473, 0.1988222301006317, 0.0011511383345350623], "repair_candidates": [0.3737611174583435, 0.006572348531335592, 0.23083078861236572, 0.01350776944309473, 0.1988222301006317, 0.00044173942296765745, 0.11863041669130325, 0.0526776947081089, 0.0026552609633654356, 0.0011511383345350623, 0.0009495438425801694], "target_probs": 0.5872422456741333}}


{"result": {"time": "2021-02-21 06:52:51.727315", "n_pass": [587, 311, 25], "n_token": 60, "loss": [0.8921135663986206, 0.6234216094017029], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", "1", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 34, "repair_targets": [8, 25, 34, 58], "repair_candidates": [10, 21, 39, 41, 47, 56, 59, 8, 25, 34, 58]}}
{"prediction": {"error_location": 0.4097886383533478, "repair_targets": [0.35933321714401245, 0.005545233376324177, 0.17005205154418945, 0.0011764324735850096], "repair_candidates": [0.35933321714401245, 0.007672193925827742, 0.22798703610897064, 0.005545233376324177, 0.17005205154418945, 0.0004880235646851361, 0.16774725914001465, 0.05517687648534775, 0.00378080690279603, 0.0011764324735850096, 0.0010409412207081914], "target_probs": 0.5361069440841675}}


{"result": {"time": "2021-02-21 06:52:52.588770", "n_pass": [605, 326, 26], "n_token": 59, "loss": [1.0843569040298462, 0.6475738286972046], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "]", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 34, "repair_targets": [8, 25, 34, 57], "repair_candidates": [10, 21, 39, 41, 46, 55, 58, 8, 25, 34, 57]}}
{"prediction": {"error_location": 0.3381192088127136, "repair_targets": [0.43142932653427124, 0.010386207140982151, 0.07994915544986725, 0.001549232518300414], "repair_candidates": [0.43142932653427124, 0.011615240015089512, 0.24240069091320038, 0.010386207140982151, 0.07994915544986725, 0.0008947636815719306, 0.16188812255859375, 0.05440608412027359, 0.0042516207322478294, 0.001549232518300414, 0.0012295328779146075], "target_probs": 0.5233138799667358}}


{"result": {"time": "2021-02-21 06:52:52.934029", "n_pass": [612, 332, 27], "n_token": 58, "loss": [1.1364128589630127, 0.5861923098564148], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 34, "repair_targets": [8, 25, 34, 56], "repair_candidates": [10, 21, 39, 41, 46, 54, 57, 8, 25, 34, 56]}}
{"prediction": {"error_location": 0.320968359708786, "repair_targets": [0.45645323395729065, 0.012233925051987171, 0.08589635789394379, 0.001858500181697309], "repair_candidates": [0.45645323395729065, 0.011205814778804779, 0.23271355032920837, 0.012233925051987171, 0.08589635789394379, 0.0009266009437851608, 0.13851873576641083, 0.05432109162211418, 0.004588882438838482, 0.001858500181697309, 0.001283328514546156], "target_probs": 0.5564420223236084}}


{"result": {"time": "2021-02-21 06:52:54.020567", "n_pass": [636, 351, 28], "n_token": 57, "loss": [1.0997365713119507, 0.6608693599700928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "(", "kw", ".", "(", "'ordering_func'", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 33, "repair_targets": [8, 24, 33, 55], "repair_candidates": [10, 20, 38, 40, 45, 53, 56, 8, 24, 33, 55]}}
{"prediction": {"error_location": 0.33295875787734985, "repair_targets": [0.43587735295295715, 0.007172605488449335, 0.07154329121112823, 0.001808913773857057], "repair_candidates": [0.43587735295295715, 0.014386487193405628, 0.27385324239730835, 0.007172605488449335, 0.07154329121112823, 0.0008912344346754253, 0.13167700171470642, 0.055669885128736496, 0.005673576146364212, 0.001808913773857057, 0.001446329290047288], "target_probs": 0.5164021849632263}}


{"result": {"time": "2021-02-21 06:52:54.308356", "n_pass": [641, 356, 29], "n_token": 56, "loss": [1.0857683420181274, 0.6588744521141052], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "'ordering_func'", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 32, "repair_targets": [8, 23, 32, 54], "repair_candidates": [10, 19, 37, 39, 44, 52, 55, 8, 23, 32, 54]}}
{"prediction": {"error_location": 0.33764225244522095, "repair_targets": [0.4371456503868103, 0.004746378865092993, 0.0740947350859642, 0.0014466432621702552], "repair_candidates": [0.4371456503868103, 0.017104709520936012, 0.28406041860580444, 0.004746378865092993, 0.0740947350859642, 0.000829530821647495, 0.11237127333879471, 0.059989456087350845, 0.007006122265011072, 0.0014466432621702552, 0.0012051084777340293], "target_probs": 0.5174334049224854}}


{"result": {"time": "2021-02-21 06:52:54.535732", "n_pass": [646, 360, 30], "n_token": 55, "loss": [0.7776058316230774, 0.6864974498748779], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 31, "repair_targets": [8, 22, 31, 53], "repair_candidates": [10, 19, 36, 38, 43, 51, 54, 8, 22, 31, 53]}}
{"prediction": {"error_location": 0.4595048725605011, "repair_targets": [0.43451493978500366, 0.005140767432749271, 0.06258857250213623, 0.0010916574392467737], "repair_candidates": [0.43451493978500366, 0.024311738088726997, 0.25567686557769775, 0.005140767432749271, 0.06258857250213623, 0.0007841795450076461, 0.13306824862957, 0.07238920778036118, 0.009559421800076962, 0.0010916574392467737, 0.0008744093356654048], "target_probs": 0.5033359527587891}}


{"result": {"time": "2021-02-21 06:52:54.765110", "n_pass": [651, 364, 31], "n_token": 54, "loss": [0.7543457746505737, 0.6902307868003845], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#NEWLINE#", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 30, "repair_targets": [8, 22, 30, 52], "repair_candidates": [10, 19, 35, 37, 42, 50, 53, 8, 22, 30, 52]}}
{"prediction": {"error_location": 0.4703182876110077, "repair_targets": [0.4360251724720001, 0.0027831641491502523, 0.06150735914707184, 0.0011446509743109345], "repair_candidates": [0.4360251724720001, 0.02446638233959675, 0.25003430247306824, 0.0027831641491502523, 0.06150735914707184, 0.00070143211632967, 0.13780106604099274, 0.07508789747953415, 0.009758131578564644, 0.0011446509743109345, 0.0006904040346853435], "target_probs": 0.5014603137969971}}


{"result": {"time": "2021-02-21 06:52:54.822466", "n_pass": [652, 365, 32], "n_token": 53, "loss": [0.8685555458068848, 0.6609019637107849], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "#INDENT#", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 51], "repair_candidates": [10, 19, 34, 36, 41, 49, 52, 8, 22, 29, 51]}}
{"prediction": {"error_location": 0.4195571541786194, "repair_targets": [0.4549199938774109, 0.0029930558521300554, 0.05709085613489151, 0.00138147606048733], "repair_candidates": [0.4549199938774109, 0.023785609751939774, 0.23334772884845734, 0.0029930558521300554, 0.05709085613489151, 0.00068259536055848, 0.13352978229522705, 0.08499747514724731, 0.0067567178048193455, 0.00138147606048733, 0.0005146744078956544], "target_probs": 0.5163853764533997}}


{"result": {"time": "2021-02-21 06:52:55.512123", "n_pass": [667, 377, 33], "n_token": 52, "loss": [0.9239964485168457, 0.5332937240600586], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "'ordering_func'", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 50], "repair_candidates": [10, 19, 34, 36, 40, 48, 51, 8, 22, 29, 50]}}
{"prediction": {"error_location": 0.3969295620918274, "repair_targets": [0.4585188627243042, 0.007654116488993168, 0.1176171824336052, 0.0028792673256248236], "repair_candidates": [0.4585188627243042, 0.020602762699127197, 0.2247457057237625, 0.007654116488993168, 0.1176171824336052, 0.0004620326217263937, 0.05292362719774246, 0.10844921320676804, 0.005335679277777672, 0.0028792673256248236, 0.0008116104290820658], "target_probs": 0.5866694450378418}}


{"result": {"time": "2021-02-21 06:52:55.628554", "n_pass": [670, 379, 34], "n_token": 51, "loss": [0.9097400903701782, 0.5860841274261475], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 49], "repair_candidates": [10, 19, 34, 36, 40, 47, 50, 8, 22, 29, 49]}}
{"prediction": {"error_location": 0.4026288092136383, "repair_targets": [0.4500384032726288, 0.01082612480968237, 0.09201876074075699, 0.003618963062763214], "repair_candidates": [0.4500384032726288, 0.015867961570620537, 0.17548230290412903, 0.01082612480968237, 0.09201876074075699, 0.0004985928535461426, 0.0318513847887516, 0.20952697098255157, 0.009011796675622463, 0.003618963062763214, 0.0012587211094796658], "target_probs": 0.5565022230148315}}


{"result": {"time": "2021-02-21 06:52:55.688485", "n_pass": [671, 380, 35], "n_token": 50, "loss": [1.1876251697540283, 0.36793458461761475], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "else", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 48], "repair_candidates": [10, 19, 34, 36, 40, 46, 49, 8, 22, 29, 48]}}
{"prediction": {"error_location": 0.30494457483291626, "repair_targets": [0.5239496231079102, 0.012072257697582245, 0.15038354694843292, 0.0057570538483560085], "repair_candidates": [0.5239496231079102, 0.014337316155433655, 0.11769568175077438, 0.012072257697582245, 0.15038354694843292, 0.0006592118879780173, 0.030698327347636223, 0.13505035638809204, 0.008844617754220963, 0.0057570538483560085, 0.0005520757986232638], "target_probs": 0.6921624541282654}}


{"result": {"time": "2021-02-21 06:52:55.745862", "n_pass": [672, 381, 36], "n_token": 49, "loss": [1.2408846616744995, 0.2290334701538086], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", ":", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 47], "repair_candidates": [10, 19, 34, 36, 40, 45, 48, 8, 22, 29, 47]}}
{"prediction": {"error_location": 0.2891283631324768, "repair_targets": [0.5960797071456909, 0.01681891642510891, 0.17536099255084991, 0.007042314857244492], "repair_candidates": [0.5960797071456909, 0.012243218719959259, 0.10160030424594879, 0.01681891642510891, 0.17536099255084991, 0.0005776674370281398, 0.012098618783056736, 0.06438091397285461, 0.013279221020638943, 0.007042314857244492, 0.0005181882879696786], "target_probs": 0.7953019142150879}}


{"result": {"time": "2021-02-21 06:52:55.803016", "n_pass": [673, 382, 37], "n_token": 48, "loss": [1.1786646842956543, 0.3414999544620514], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#NEWLINE#", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 46], "repair_candidates": [10, 19, 34, 36, 40, 44, 47, 8, 22, 29, 46]}}
{"prediction": {"error_location": 0.3076893091201782, "repair_targets": [0.5641849637031555, 0.01287134550511837, 0.12755392491817474, 0.006093258503824472], "repair_candidates": [0.5641849637031555, 0.012511562556028366, 0.107770174741745, 0.01287134550511837, 0.12755392491817474, 0.0006547059747390449, 0.021034318953752518, 0.1264408677816391, 0.020406924188137054, 0.006093258503824472, 0.00047799607273191214], "target_probs": 0.7107034921646118}}


{"result": {"time": "2021-02-21 06:52:55.860751", "n_pass": [674, 383, 38], "n_token": 47, "loss": [1.1467095613479614, 0.32575464248657227], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "]", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 45], "repair_candidates": [10, 19, 34, 36, 40, 43, 46, 8, 22, 29, 45]}}
{"prediction": {"error_location": 0.31768038868904114, "repair_targets": [0.5461986660957336, 0.015152505598962307, 0.1508699357509613, 0.009761241264641285], "repair_candidates": [0.5461986660957336, 0.010027904994785786, 0.080136738717556, 0.015152505598962307, 0.1508699357509613, 0.0006141975172795355, 0.01591680385172367, 0.1356266587972641, 0.034072693437337875, 0.009761241264641285, 0.0016226671868935227], "target_probs": 0.7219823002815247}}


{"result": {"time": "2021-02-21 06:52:55.975427", "n_pass": [677, 385, 39], "n_token": 46, "loss": [1.0226305723190308, 0.42342379689216614], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "pop", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 29, "repair_targets": [8, 22, 29, 44], "repair_candidates": [10, 19, 34, 36, 40, 43, 45, 8, 22, 29, 44]}}
{"prediction": {"error_location": 0.35964760184288025, "repair_targets": [0.5171152353286743, 0.009637088514864445, 0.1242247000336647, 0.003824049374088645], "repair_candidates": [0.5171152353286743, 0.014889603480696678, 0.1418970376253128, 0.009637088514864445, 0.1242247000336647, 0.0007806616486050189, 0.06531233340501785, 0.11706581711769104, 0.003795818192884326, 0.003824049374088645, 0.0014576184330508113], "target_probs": 0.654801070690155}}


{"result": {"time": "2021-02-21 06:52:56.546142", "n_pass": [691, 395, 40], "n_token": 45, "loss": [1.0162585973739624, 0.4709068834781647], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "(", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 28, "repair_targets": [8, 21, 28, 43], "repair_candidates": [10, 18, 33, 35, 39, 42, 44, 8, 21, 28, 43]}}
{"prediction": {"error_location": 0.36194655299186707, "repair_targets": [0.4720652997493744, 0.0007758751162327826, 0.14646391570568085, 0.0051306551322340965], "repair_candidates": [0.4720652997493744, 0.011087281629443169, 0.06998952478170395, 0.0007758751162327826, 0.14646391570568085, 0.0006005627219565213, 0.1421213448047638, 0.14787687361240387, 0.0025937047321349382, 0.0051306551322340965, 0.0012949991505593061], "target_probs": 0.6244357228279114}}


{"result": {"time": "2021-02-21 06:52:56.603825", "n_pass": [692, 396, 41], "n_token": 44, "loss": [1.0313230752944946, 0.31816551089286804], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "'count_from'", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 27, "repair_targets": [8, 20, 27, 42], "repair_candidates": [10, 17, 32, 34, 38, 41, 43, 8, 20, 27, 42]}}
{"prediction": {"error_location": 0.3565348982810974, "repair_targets": [0.44242843985557556, 0.0005442779511213303, 0.27476969361305237, 0.009739951230585575], "repair_candidates": [0.44242843985557556, 0.038717932999134064, 0.041804444044828415, 0.0005442779511213303, 0.27476969361305237, 0.00019009879906661808, 0.04936348646879196, 0.13874593377113342, 0.002029862254858017, 0.009739951230585575, 0.0016658003441989422], "target_probs": 0.7274823784828186}}


{"result": {"time": "2021-02-21 06:52:56.661224", "n_pass": [693, 397, 42], "n_token": 43, "loss": [1.115423560142517, 0.31027716398239136], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", "None", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 26, "repair_targets": [8, 19, 26, 41], "repair_candidates": [10, 16, 31, 33, 37, 40, 42, 8, 19, 26, 41]}}
{"prediction": {"error_location": 0.32777640223503113, "repair_targets": [0.44395124912261963, 0.0011510441545397043, 0.27616453170776367, 0.011976867914199829], "repair_candidates": [0.44395124912261963, 0.02632097899913788, 0.04803398996591568, 0.0011510441545397043, 0.27616453170776367, 0.0001544620026834309, 0.05170420929789543, 0.13620136678218842, 0.0021981026511639357, 0.011976867914199829, 0.002143138088285923], "target_probs": 0.7332437038421631}}


{"result": {"time": "2021-02-21 06:52:56.720946", "n_pass": [694, 398, 43], "n_token": 42, "loss": [1.1013997793197632, 0.2576111853122711], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "if", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 25, "repair_targets": [8, 18, 25, 40], "repair_candidates": [10, 15, 30, 32, 36, 39, 41, 8, 18, 25, 40]}}
{"prediction": {"error_location": 0.3324054777622223, "repair_targets": [0.5039532780647278, 0.0013352183159440756, 0.25199735164642334, 0.015609889291226864], "repair_candidates": [0.5039532780647278, 0.019084623083472252, 0.04517130181193352, 0.0013352183159440756, 0.25199735164642334, 0.00016776043048594147, 0.040606413036584854, 0.11782246828079224, 0.0021069874055683613, 0.015609889291226864, 0.002144712721928954], "target_probs": 0.7728956937789917}}


{"result": {"time": "2021-02-21 06:52:57.343989", "n_pass": [707, 409, 44], "n_token": 41, "loss": [0.7667179703712463, 0.3291793465614319], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", ")", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 24, "repair_targets": [8, 18, 24, 39], "repair_candidates": [10, 15, 29, 31, 35, 38, 40, 8, 18, 24, 39]}}
{"prediction": {"error_location": 0.4645351767539978, "repair_targets": [0.40714821219444275, 0.0011567326728254557, 0.29801976680755615, 0.013189257122576237], "repair_candidates": [0.40714821219444275, 0.033035703003406525, 0.07015455514192581, 0.0011567326728254557, 0.29801976680755615, 0.00020768051035702229, 0.05678550899028778, 0.11357012391090393, 0.0036676952149719, 0.013189257122576237, 0.003064854070544243], "target_probs": 0.7195139527320862}}


{"result": {"time": "2021-02-21 06:52:57.572766", "n_pass": [712, 413, 45], "n_token": 40, "loss": [0.89764004945755, 0.2772500813007355], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", ":", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 24, "repair_targets": [8, 18, 24, 38], "repair_candidates": [10, 15, 28, 30, 34, 37, 39, 8, 18, 24, 38]}}
{"prediction": {"error_location": 0.407530277967453, "repair_targets": [0.4393998980522156, 0.001086096279323101, 0.3000586926937103, 0.017320290207862854], "repair_candidates": [0.4393998980522156, 0.03535052761435509, 0.07079002261161804, 0.001086096279323101, 0.3000586926937103, 0.00019656639778986573, 0.04622364044189453, 0.08320100605487823, 0.0035914964973926544, 0.017320290207862854, 0.002781689865514636], "target_probs": 0.7578649520874023}}


{"result": {"time": "2021-02-21 06:52:57.859890", "n_pass": [719, 418, 46], "n_token": 39, "loss": [1.3143675327301025, 0.07839206606149673], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 24, "repair_targets": [8, 18, 24, 37], "repair_candidates": [10, 15, 28, 30, 33, 36, 38, 8, 18, 24, 37]}}
{"prediction": {"error_location": 0.26864418387413025, "repair_targets": [0.5481010675430298, 0.0017621241277083755, 0.3454408049583435, 0.029297878965735435], "repair_candidates": [0.5481010675430298, 0.01956866681575775, 0.03264850750565529, 0.0017621241277083755, 0.3454408049583435, 0.00020266813226044178, 0.0048278747126460075, 0.014422914944589138, 0.002050720853731036, 0.029297878965735435, 0.0016767244087532163], "target_probs": 0.9246018528938293}}


{"result": {"time": "2021-02-21 06:52:58.031103", "n_pass": [726, 421, 47], "n_token": 38, "loss": [1.161321759223938, 0.1430770456790924], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _unsugar_count_from(", "**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 23, "repair_targets": [7, 17, 23, 36], "repair_candidates": [9, 14, 27, 29, 32, 35, 37, 7, 17, 23, 36]}}
{"prediction": {"error_location": 0.3130721151828766, "repair_targets": [0.3988950550556183, 0.0069957310333848, 0.43453603982925415, 0.02626052498817444], "repair_candidates": [0.3988950550556183, 0.05580505356192589, 0.03874516114592552, 0.0069957310333848, 0.43453603982925415, 0.00025741796707734466, 0.004280765075236559, 0.03082541562616825, 0.0011179225984960794, 0.02626052498817444, 0.0022809416987001896], "target_probs": 0.8666872978210449}}


{"result": {"time": "2021-02-21 06:52:58.089938", "n_pass": [727, 422, 48], "n_token": 37, "loss": [1.3304681777954102, 0.09689808636903763], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "(", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 22, "repair_targets": [6, 16, 22, 35], "repair_candidates": [8, 13, 26, 28, 31, 34, 36, 6, 16, 22, 35]}}
{"prediction": {"error_location": 0.2643534541130066, "repair_targets": [0.5033525824546814, 0.011550006456673145, 0.36988064646720886, 0.02286521904170513], "repair_candidates": [0.5033525824546814, 0.040030594915151596, 0.026182984933257103, 0.011550006456673145, 0.36988064646720886, 0.00025573736638762057, 0.002297960454598069, 0.0208091139793396, 0.0011638684663921595, 0.02286521904170513, 0.0016113694291561842], "target_probs": 0.907648503780365}}


{"result": {"time": "2021-02-21 06:52:58.828653", "n_pass": [743, 435, 49], "n_token": 36, "loss": [1.317238450050354, 0.053057655692100525], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "count_from", "None", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 21, "repair_targets": [6, 15, 21, 34], "repair_candidates": [8, 13, 25, 27, 30, 33, 35, 6, 15, 21, 34]}}
{"prediction": {"error_location": 0.2678740322589874, "repair_targets": [0.523319661617279, 0.01519196480512619, 0.3934655487537384, 0.016348164528608322], "repair_candidates": [0.523319661617279, 0.0191566813737154, 0.010934251360595226, 0.01519196480512619, 0.3934655487537384, 0.00020072046027053148, 0.0012235029134899378, 0.01885966770350933, 0.0006217529298737645, 0.016348164528608322, 0.000678117445204407], "target_probs": 0.9483253359794617}}


{"result": {"time": "2021-02-21 06:52:58.885091", "n_pass": [745, 436, 50], "n_token": 35, "loss": [1.2865676879882812, 0.06346265226602554], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "count_from", ")", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 20, "repair_targets": [6, 15, 20, 33], "repair_candidates": [8, 13, 24, 26, 29, 32, 34, 6, 15, 20, 33]}}
{"prediction": {"error_location": 0.2762172222137451, "repair_targets": [0.5085967779159546, 0.011426911689341068, 0.4047841727733612, 0.013701273128390312], "repair_candidates": [0.5085967779159546, 0.01943262293934822, 0.013622383587062359, 0.011426911689341068, 0.4047841727733612, 0.0001817434240365401, 0.0018299296498298645, 0.025046641007065773, 0.0006778615061193705, 0.013701273128390312, 0.000699722149875015], "target_probs": 0.9385091662406921}}


{"result": {"time": "2021-02-21 06:52:58.942693", "n_pass": [746, 437, 51], "n_token": 34, "loss": [1.410031795501709, 0.07291824370622635], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "if", "(", "kw", ".", "count_from", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 19, "repair_targets": [6, 15, 19, 32], "repair_candidates": [8, 13, 23, 25, 28, 31, 33, 6, 15, 19, 32]}}
{"prediction": {"error_location": 0.2441355586051941, "repair_targets": [0.4977750778198242, 0.012797722592949867, 0.4073266088962555, 0.01177743636071682], "repair_candidates": [0.4977750778198242, 0.019465044140815735, 0.014662262052297592, 0.012797722592949867, 0.4073266088962555, 0.0002994528622366488, 0.0032384491059929132, 0.031101373955607414, 0.0007551102316938341, 0.01177743636071682, 0.000801438232883811], "target_probs": 0.9296768307685852}}


{"result": {"time": "2021-02-21 06:53:00.141982", "n_pass": [776, 458, 52], "n_token": 33, "loss": [1.4099817276000977, 0.06071334704756737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["**kw", ")", "#NEWLINE#", "#INDENT#", "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", "#NEWLINE#", "count_from", "=", "kw", ")", "#NEWLINE#", "(", "kw", ".", "count_from", ")", "#INDENT#", "(", "count_from", "==", "0", "#NEWLINE#", "kw", "(", "kw", "==", ")", "kw", "[", "#INDENT#", "kw", "count_from", "kw"]}}
{"position": {"error_location": 18, "repair_targets": [6, 14, 18, 31], "repair_candidates": [8, 12, 22, 24, 27, 30, 32, 6, 14, 18, 31]}}
{"prediction": {"error_location": 0.24414774775505066, "repair_targets": [0.5047452449798584, 0.018556715920567513, 0.40932199358940125, 0.00846902560442686], "repair_candidates": [0.5047452449798584, 0.010789989493787289, 0.022501129657030106, 0.018556715920567513, 0.40932199358940125, 0.0005499937105923891, 0.0025070339906960726, 0.02109086699783802, 0.0007823035703040659, 0.00846902560442686, 0.0006856395048089325], "target_probs": 0.9410929679870605}}




Minimal simplified tokens:

['**kw', ')', '#NEWLINE#', '#INDENT#', "'Builds counting functions from keyword arguments.\\n\\n    Keyword argument filter, prepares a simple ``ordering_func`` from a\\n    ``count_from`` argument, otherwise passes ``ordering_func`` on unchanged.\\n    '", '#NEWLINE#', 'count_from', '=', 'kw', ')', '#NEWLINE#', '(', 'kw', '.', 'count_from', ')', '#INDENT#', '(', 'count_from', '==', '0', '#NEWLINE#', 'kw', '(', 'kw', '==', ')', 'kw', '[', '#INDENT#', 'kw', 'count_from', 'kw']
