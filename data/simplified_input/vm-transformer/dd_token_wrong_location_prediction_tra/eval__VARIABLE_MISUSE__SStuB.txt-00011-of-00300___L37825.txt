
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", "(", "-", "1", ")", ",", "searchwindowsize", "=", "(", "-", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "\"This is the common loop used inside expect. The 'searcher' should be\\n        an instance of searcher_re or searcher_string, which describes how and\\n        what to search for in the input.\\n\\n        See expect() for other arguments, return value and exceptions. \"", "#NEWLINE#", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"], "error_location": [29], "repair_targets": [2], "repair_candidates": [4, 29, 31, 2, 13, 33, 25, 37, 6, 41], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Calysto/metakernel/metakernel/pexpect.py", "license": "bsd-3-clause", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00011-of-00300", "js_count": 37825, "results": {"model": "transformer", "prob": {"loc": [[0.07687889039516449, 1.016388182506489e-06, 1.9747790247492958e-07, 1.4608294129914157e-08, 1.5975862766026694e-07, 1.3343361970896694e-08, 4.135692961426685e-06, 3.6804909342436076e-08, 7.469406426707792e-08, 9.259474964551373e-09, 2.1664746441274474e-07, 4.894127325627551e-09, 5.2460471522408625e-09, 1.1524493856995832e-06, 2.960992517841987e-08, 1.7730495471823815e-07, 2.7063130403348623e-08, 5.7328829683456206e-08, 4.1394980776487955e-09, 3.925407554561389e-09, 1.3251902686306494e-08, 2.2951629929934825e-08, 1.0687839946399436e-08, 1.3638261187054468e-08, 1.5501143479923485e-08, 9.132396883160254e-08, 4.065911163309011e-09, 4.815145615566507e-09, 5.677874526099913e-08, 0.1253383755683899, 2.386313155966491e-07, 0.794131875038147, 1.6406865199769527e-07, 2.4438772015855648e-05, 2.0224785401978806e-08, 3.791366154359821e-08, 2.9004156854028906e-09, 1.1050295967152124e-07, 2.1110022174752885e-08, 3.6204785835991515e-09, 5.443761708079364e-08, 0.0036181253381073475, 3.324196740095431e-08]], "pointer": [[0.0, 0.0, 0.7598106265068054, 0.0, 0.0020611928775906563, 0.0, 0.2201698124408722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016674555838108063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006000741850584745, 0.0, 0.0, 0.0, 7.210702733573271e-06, 0.0, 1.3288928357724217e-06, 0.0, 8.222463657148182e-05, 0.0, 0.0, 0.0, 9.983636118704453e-05, 0.0, 0.0, 0.0, 0.0004931104485876858, 0.0]], "target": [0.7598106265068054]}, "loss": [2.076738119125366, 0.2746860384941101], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [31]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 06:58:00.496566", "n_pass": [1, 1, 1], "n_token": 43, "loss": [0.23050564527511597, 0.2746860384941101], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", "(", "-", "1", ")", ",", "searchwindowsize", "=", "(", "-", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "\"This is the common loop used inside expect. The 'searcher' should be\\n        an instance of searcher_re or searcher_string, which describes how and\\n        what to search for in the input.\\n\\n        See expect() for other arguments, return value and exceptions. \"", "#NEWLINE#", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 31, "repair_targets": [2], "repair_candidates": [4, 29, 31, 2, 13, 33, 25, 37, 6, 41]}}
{"prediction": {"error_location": 0.794131875038147, "repair_targets": [0.7598106265068054], "repair_candidates": [0.7598106265068054, 0.0020611928775906563, 0.2201698124408722, 0.016674555838108063, 0.0006000741850584745, 7.210702733573271e-06, 1.3288928357724217e-06, 8.222463657148182e-05, 9.983636118704453e-05, 0.0004931104485876858], "target_probs": 0.7598106265068054}}


{"result": {"time": "2021-02-21 06:58:00.553421", "n_pass": [23, 2, 2], "n_token": 38, "loss": [0.4439224600791931, 0.11944476515054703], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", "(", "-", "1", ")", ",", "searchwindowsize", "=", ":", "#NEWLINE#", "#INDENT#", "\"This is the common loop used inside expect. The 'searcher' should be\\n        an instance of searcher_re or searcher_string, which describes how and\\n        what to search for in the input.\\n\\n        See expect() for other arguments, return value and exceptions. \"", "#NEWLINE#", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [4, 24, 26, 2, 13, 28, 20, 32, 6, 36]}}
{"prediction": {"error_location": 0.6415151953697205, "repair_targets": [0.8874130249023438], "repair_candidates": [0.8874130249023438, 0.0020880664233118296, 0.10898751765489578, 0.0005506156012415886, 0.0004928676062263548, 3.7081720165588195e-06, 4.645174271900032e-07, 7.893634756328538e-05, 0.00014045122952666134, 0.00024426315212622285], "target_probs": 0.8874130249023438}}


{"result": {"time": "2021-02-21 06:58:00.609422", "n_pass": [24, 3, 3], "n_token": 33, "loss": [0.710581362247467, 0.5507997870445251], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", "(", "-", "1", ")", ",", "searchwindowsize", "=", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 21, "repair_targets": [2], "repair_candidates": [4, 19, 21, 2, 13, 23, 15, 27, 6, 31]}}
{"prediction": {"error_location": 0.4913583993911743, "repair_targets": [0.5764885544776917], "repair_candidates": [0.5764885544776917, 0.0017034622142091393, 0.4068802297115326, 0.000539183325599879, 0.013441800139844418, 5.26431495018187e-06, 2.141162894986337e-06, 2.767069236142561e-05, 0.000760780181735754, 0.00015095394337549806], "target_probs": 0.5764885544776917}}


{"result": {"time": "2021-02-21 06:58:00.779695", "n_pass": [53, 6, 4], "n_token": 30, "loss": [0.7982434630393982, 0.23680543899536133], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", "(", ",", "searchwindowsize", "=", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 18, "repair_targets": [2], "repair_candidates": [4, 16, 18, 2, 10, 20, 12, 24, 6, 28]}}
{"prediction": {"error_location": 0.45011892914772034, "repair_targets": [0.7891448140144348], "repair_candidates": [0.7891448140144348, 0.003326788078993559, 0.15908022224903107, 0.002142885932698846, 0.04205035790801048, 1.705683462205343e-05, 4.207849997328594e-06, 0.00011938114766962826, 0.00397085165604949, 0.00014347243995871395], "target_probs": 0.7891448140144348}}


{"result": {"time": "2021-02-21 06:58:00.947421", "n_pass": [87, 9, 5], "n_token": 29, "loss": [0.7433290481567383, 0.2999330759048462], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", ",", "searchwindowsize", "=", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [4, 15, 17, 2, 9, 19, 11, 23, 6, 27]}}
{"prediction": {"error_location": 0.4755282700061798, "repair_targets": [0.7408677935600281], "repair_candidates": [0.7408677935600281, 0.007920118980109692, 0.18983407318592072, 0.007786390837281942, 0.04748890921473503, 3.587672472349368e-05, 1.1480107787065208e-05, 0.00016062908980529755, 0.005715915001928806, 0.00017881637904793024], "target_probs": 0.7408677935600281}}


{"result": {"time": "2021-02-21 06:58:01.061468", "n_pass": [90, 11, 6], "n_token": 28, "loss": [0.7621753215789795, 0.18257825076580048], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", ",", "searchwindowsize", "exp", "=", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [4, 14, 16, 2, 9, 18, 10, 22, 6, 26]}}
{"prediction": {"error_location": 0.4666502773761749, "repair_targets": [0.8331194519996643], "repair_candidates": [0.8331194519996643, 0.016652055084705353, 0.11953607946634293, 0.015064185485243797, 0.01443306915462017, 2.5387509595020674e-05, 1.15236052806722e-05, 0.0006974185816943645, 0.0003609732957556844, 9.984007192542776e-05], "target_probs": 0.8331194519996643}}


{"result": {"time": "2021-02-21 06:58:01.117015", "n_pass": [92, 12, 7], "n_token": 27, "loss": [0.7560141086578369, 0.3699255585670471], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "=", ",", "searchwindowsize", "exp", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [4, 13, 15, 2, 9, 17, 10, 21, 6, 25]}}
{"prediction": {"error_location": 0.4695342183113098, "repair_targets": [0.6907857656478882], "repair_candidates": [0.6907857656478882, 0.017594709992408752, 0.18381258845329285, 0.012219710275530815, 0.06563718616962433, 8.501599950250238e-05, 1.819916178646963e-05, 0.0032667815685272217, 0.02591642551124096, 0.0006637112819589674], "target_probs": 0.6907857656478882}}


{"result": {"time": "2021-02-21 06:58:01.564970", "n_pass": [108, 20, 8], "n_token": 26, "loss": [0.9041392803192139, 0.5606647729873657], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", ",", "searchwindowsize", "exp", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [4, 12, 14, 2, 8, 16, 9, 20, 6, 24]}}
{"prediction": {"error_location": 0.4048902690410614, "repair_targets": [0.570829451084137], "repair_candidates": [0.570829451084137, 0.051804810762405396, 0.23576460778713226, 0.027181172743439674, 0.07845946401357651, 0.00015222886577248573, 1.854693255154416e-05, 0.005733606871217489, 0.028599055483937263, 0.0014570711646229029], "target_probs": 0.570829451084137}}


{"result": {"time": "2021-02-21 06:58:01.620723", "n_pass": [109, 21, 9], "n_token": 25, "loss": [1.012855052947998, 0.41267144680023193], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def expect_loop(", "self", ",", "searcher", ",", "timeout", "searchwindowsize", "exp", "Expecter", "(", "searcher", ",", "searcher", ",", "searchwindowsize", ")", "#NEWLINE#", "return", "exp", ".", "expect_gloop", "(", "timeout", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [4, 11, 13, 2, 7, 15, 8, 19, 6, 23]}}
{"prediction": {"error_location": 0.36318060755729675, "repair_targets": [0.6618797183036804], "repair_candidates": [0.6618797183036804, 0.027309870347380638, 0.15187716484069824, 0.0381864570081234, 0.08883088827133179, 0.00019074745068792254, 2.0995579689042643e-05, 0.01065483782440424, 0.019936440512537956, 0.0011128959013149142], "target_probs": 0.6618797183036804}}




Minimal simplified tokens:

['#NEWLINE#', 'def expect_loop(', 'self', ',', 'searcher', ',', 'timeout', 'searchwindowsize', 'exp', 'Expecter', '(', 'searcher', ',', 'searcher', ',', 'searchwindowsize', ')', '#NEWLINE#', 'return', 'exp', '.', 'expect_gloop', '(', 'timeout', ')']
