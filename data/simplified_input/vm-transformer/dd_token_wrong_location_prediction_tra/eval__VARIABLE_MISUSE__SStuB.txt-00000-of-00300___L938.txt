
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def count(", "self", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", "#NEWLINE#", "return", "int", "(", "(", "value", "in", "value", ")", ")"], "error_location": [17], "repair_targets": [2], "repair_candidates": [2, 4, 15, 17], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newrange.py", "license": "gpl-3.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 938, "results": {"model": "transformer", "prob": {"loc": [[0.045603714883327484, 3.716887931659585e-06, 7.450950647580612e-07, 1.7265213259065604e-08, 8.113239005069772e-07, 1.1393948895488393e-08, 3.1713881298855995e-08, 3.748094101752031e-08, 2.995534131855493e-08, 3.981174856448888e-08, 1.2006535143882502e-07, 1.0645313963664194e-08, 7.025422021911254e-09, 1.502513136131256e-08, 3.939884152259765e-08, 0.7935696840286255, 3.7175642120246266e-08, 0.16082090139389038, 3.9054153688766746e-08, 4.208537163208348e-08]], "pointer": [[0.0, 0.0, 0.9999822378158569, 0.0, 1.5633760995115153e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.540366363580688e-07, 0.0, 1.240168558069854e-06, 0.0, 0.0]], "target": [0.9999822378158569]}, "loss": [1.8274641036987305, 1.7762342395144515e-05], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [15]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 05:34:11.609008", "n_pass": [1, 1, 1], "n_token": 20, "loss": [0.2312139868736267, 1.7762342395144515e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def count(", "self", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", "#NEWLINE#", "return", "int", "(", "(", "value", "in", "value", ")", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [2, 4, 15, 17]}}
{"prediction": {"error_location": 0.7935696840286255, "repair_targets": [0.9999822378158569], "repair_candidates": [0.9999822378158569, 1.5633760995115153e-05, 9.540366363580688e-07, 1.240168558069854e-06], "target_probs": 0.9999822378158569}}


{"result": {"time": "2021-02-21 05:34:11.771486", "n_pass": [20, 4, 2], "n_token": 18, "loss": [0.45728611946105957, 0.03588610142469406], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", "#NEWLINE#", "return", "int", "(", "(", "value", "in", "value", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [0], "repair_candidates": [0, 2, 13, 15]}}
{"prediction": {"error_location": 0.6329991817474365, "repair_targets": [0.9647501707077026], "repair_candidates": [0.9647501707077026, 0.03523530066013336, 8.564700692659244e-06, 5.968312962068012e-06], "target_probs": 0.9647501707077026}}


{"result": {"time": "2021-02-21 05:34:11.825983", "n_pass": [23, 5, 3], "n_token": 16, "loss": [0.38892751932144165, 0.013160137459635735], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "value", ")", "#INDENT#", "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", "#NEWLINE#", "return", "int", "(", "(", "value", "in", "value", ")", ")"]}}
{"position": {"error_location": 11, "repair_targets": [0], "repair_candidates": [0, 2, 11, 13]}}
{"prediction": {"error_location": 0.6777834892272949, "repair_targets": [0.9869260787963867], "repair_candidates": [0.9869260787963867, 0.012994429096579552, 6.154165021143854e-05, 1.797318873286713e-05], "target_probs": 0.9869260787963867}}


{"result": {"time": "2021-02-21 05:34:11.934353", "n_pass": [25, 7, 4], "n_token": 13, "loss": [0.429675817489624, 0.2756653130054474], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "value", ")", "#INDENT#", "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", "#NEWLINE#", "(", "value", "in", "value", ")", ")"]}}
{"position": {"error_location": 8, "repair_targets": [0], "repair_candidates": [0, 2, 8, 10]}}
{"prediction": {"error_location": 0.6507200002670288, "repair_targets": [0.7590669393539429], "repair_candidates": [0.7590669393539429, 0.2406257539987564, 0.000274632649961859, 3.267518331995234e-05], "target_probs": 0.7590669393539429}}




Minimal simplified tokens:

['self', ',', 'value', ')', '#INDENT#', "'Return the number of ocurrences of integer `value`\\n        in the sequence this range represents.'", '#NEWLINE#', '(', 'value', 'in', 'value', ')', ')']
