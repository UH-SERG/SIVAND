
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_callbackThread(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{ThreadPool.callInThreadWithCallback} calls the function it is\\n        given and the C{onResult} callback in the same thread.\\n        '", "#NEWLINE#", "threadIds", "=", "[", "]", "#NEWLINE#", "import", "thread", "#NEWLINE#", "event", "=", "threading", ".", "Event", "(", ")", "#NEWLINE#", "def onResult(", "success", ",", "result", ")", ":", "#NEWLINE#", "#INDENT#", "threadIds", ".", "append", "(", "thread", ".", "get_ident", "(", ")", ")", "#NEWLINE#", "event", ".", "set", "(", ")", "#NEWLINE#", "#UNINDENT#", "def func(", ")", ":", "#NEWLINE#", "#INDENT#", "threadIds", ".", "append", "(", "thread", ".", "get_ident", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "tp", "=", "threadpool", ".", "ThreadPool", "(", "0", ",", "1", ")", "#NEWLINE#", "tp", ".", "callInThreadWithCallback", "(", "onResult", ",", "func", ")", "#NEWLINE#", "tp", ".", "start", "(", ")", "#NEWLINE#", "self", ".", "addCleanup", "(", "tp", ".", "stop", ")", "#NEWLINE#", "event", ".", "wait", "(", "self", ".", "getTimeout", "(", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "threadIds", ")", ",", "2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "threadIds", "[", "0", "]", ",", "self", "[", "1", "]", ")"], "error_location": [135], "repair_targets": [9, 33, 56, 120, 130], "repair_candidates": [2, 94, 107, 114, 126, 135, 68, 79, 88, 98, 9, 33, 56, 120, 130, 17, 44, 103, 85, 83], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "kuri65536/python-for-android/python-modules/twisted/twisted/test/test_threadpool.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1079, "results": {"model": "transformer", "prob": {"loc": [[7.93246945249848e-05, 1.438719920976439e-09, 2.1537354122358465e-09, 7.05118671784355e-11, 6.935052532242025e-11, 8.110651039672234e-11, 6.651006134728021e-11, 9.223093816457251e-11, 5.8037779443465e-11, 4.438071576906566e-10, 7.459095147099859e-11, 4.0603950757223117e-10, 6.365589305667996e-11, 8.033378823268933e-11, 1.7940369190228012e-09, 1.5228232008723808e-09, 6.815161629480926e-11, 6.890517045832212e-10, 2.0530929387141406e-11, 1.2279405270376742e-10, 3.788298841289617e-11, 2.2606128774471657e-11, 1.7934748131054334e-10, 1.4284570748479553e-10, 8.47699688222292e-11, 3.001951465186892e-11, 1.1484665662919724e-08, 5.587488458025369e-11, 1.1606510419426286e-08, 6.01387689647126e-11, 5.4455138315256946e-11, 8.514038085660758e-11, 6.861424622917056e-11, 1.2380346747775661e-09, 3.106461268775895e-11, 2.7485368148116862e-11, 7.819942610121089e-11, 6.475918690185267e-10, 1.507761832053589e-10, 6.014209269489257e-11, 9.028041092484784e-10, 8.549012053826743e-10, 2.9870458884140305e-10, 2.494770778849187e-10, 3.2534594462951816e-10, 8.304653492663405e-11, 5.293196436717551e-11, 1.0460986243909787e-10, 5.37051791926757e-10, 4.165605915762427e-10, 2.790048747591811e-10, 4.157099109391993e-09, 5.826537863296011e-11, 9.419150182043978e-11, 1.427286067112732e-10, 9.10167288759034e-11, 1.2645807734301684e-09, 4.94722943167325e-11, 2.3551265104782004e-11, 1.2209948330177411e-10, 2.4216069149929353e-09, 1.5853102164342658e-10, 5.877501957352038e-11, 1.1728633619867423e-09, 6.524606410707179e-10, 3.125260328307178e-10, 1.822433731701878e-10, 1.3457304715025487e-10, 2.785566222129887e-10, 2.0449286361468033e-11, 2.732480353095923e-10, 1.560145762580234e-10, 6.1384584915114e-11, 9.575022996699545e-10, 2.3556321337991903e-09, 7.770272758556018e-10, 2.111765162737811e-08, 5.140423087190982e-10, 2.214468330929975e-10, 4.259496366731952e-10, 4.9227188297917834e-11, 3.155778069419135e-11, 8.99875937654393e-11, 7.23122681733912e-08, 3.7380151751698065e-10, 7.813833690306637e-06, 3.671446202613282e-10, 2.7885163622620723e-10, 2.093088341537097e-10, 1.3535277065823692e-10, 5.98453855915615e-11, 8.562246467391788e-10, 3.8557457227028635e-10, 2.8197510992811203e-10, 1.1985119841018133e-10, 6.575149452681117e-11, 1.465497688479811e-11, 1.423800244371165e-10, 1.9273720681667328e-06, 6.127314211568091e-10, 6.48406384140543e-10, 3.3220418083068637e-10, 2.6716528989112476e-10, 5.06090225282918e-10, 9.960680197318439e-11, 7.063099410897777e-11, 1.8107815247248027e-10, 1.1511114728079974e-08, 2.1784320181073014e-10, 1.5847659295964434e-10, 6.943848163132316e-09, 3.1781433040833917e-09, 8.096374126687067e-10, 1.2858825115813488e-09, 1.6413116699087738e-10, 1.148084405322436e-10, 1.0395581964695033e-11, 2.255626657676757e-10, 1.2628495471567192e-10, 1.4861546437927586e-09, 4.498590897128452e-06, 1.5635813754855121e-09, 1.8468561124862504e-09, 1.6423037152435427e-07, 1.29335764320615e-09, 4.314764656676573e-10, 9.166290643181085e-11, 1.0278630724336324e-10, 1.6664043409053697e-11, 2.92249779931808e-09, 2.9589180030598072e-06, 2.598571136047667e-08, 9.554121938037952e-09, 2.1840289576857685e-09, 1.3663133957564355e-09, 0.9999029636383057, 9.337110640217361e-09, 1.7450441092137225e-08, 2.1068637945376167e-09, 2.7028530524830785e-09]], "pointer": [[0.0, 0.0, 5.079172638033924e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17891676723957062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002473224885761738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03584383428096771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000993709429167211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05048669874668121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00028510778793133795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.343353960692184e-05, 0.0, 0.0, 0.0, 0.00010024118819274008, 0.0, 0.001495863776654005, 0.0, 0.0, 3.554280920070596e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6879928327616653e-07, 0.0, 0.0, 0.0, 7.5207644840702415e-06, 0.0, 0.0, 0.0, 0.0, 0.013367393054068089, 0.0, 0.0, 0.0, 4.771975000039674e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00207880069501698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5513043403625488, 0.0, 0.0, 0.0, 0.0, 0.0, 8.322203939314932e-06, 0.0, 0.0, 0.0, 0.16258113086223602, 0.0, 0.0, 0.0, 0.0, 2.502479674149072e-06, 0.0, 0.0, 0.0, 0.0]], "target": [0.9791327714920044]}, "loss": [9.691245941212401e-05, 0.021088026463985443], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def test_callbackThread(', 'self', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        L{ThreadPool.callInThreadWithCallback} calls the function it is\\n        given and the C{onResult} callback in the same thread.\\n        '", '#NEWLINE#', 'threadIds', '=', '[', ']', '#NEWLINE#', 'import', 'thread', '#NEWLINE#', 'event', '=', 'threading', '.', 'Event', '(', ')', '#NEWLINE#', 'def onResult(', 'success', ',', 'result', ')', ':', '#NEWLINE#', '#INDENT#', 'threadIds', '.', 'append', '(', 'thread', '.', 'get_ident', '(', ')', ')', '#NEWLINE#', 'event', '.', 'set', '(', ')', '#NEWLINE#', '#UNINDENT#', 'def func(', ')', ':', '#NEWLINE#', '#INDENT#', 'threadIds', '.', 'append', '(', 'thread', '.', 'get_ident', '(', ')', ')', '#NEWLINE#', '#UNINDENT#', 'tp', '=', 'threadpool', '.', 'ThreadPool', '(', '0', ',', '1', ')', '#NEWLINE#', 'tp', '.', 'callInThreadWithCallback', '(', 'onResult', ',', 'func', ')', '#NEWLINE#', 'tp', '.', 'start', '(', ')', '#NEWLINE#', 'self', '.', 'addCleanup', '(', 'tp', '.', 'stop', ')', '#NEWLINE#', 'event', '.', 'wait', '(', 'self', '.', 'getTimeout', '(', ')', ')', '#NEWLINE#', 'self', '.', 'assertEqual', '(', 'len', '(', 'threadIds', ')', ',', '2', ')', '#NEWLINE#', 'self', '.', 'assertEqual', '(', 'threadIds', '[', '0', ']', ',', 'self', '[', '1', ']', ')']


All attention probs:

[0.012626172974705696, 0.008657868951559067, 0.04728091135621071, 0.01297285407781601, 0.009095216169953346, 0.009557817131280899, 0.008236978203058243, 0.009403053671121597, 0.008481217548251152, 0.025437844917178154, 0.00900956615805626, 0.009186132811009884, 0.007489372510462999, 0.008302317000925541, 0.009536013007164001, 0.0116989491507411, 0.008533872663974762, 0.016011210158467293, 0.008476750925183296, 0.008568749763071537, 0.005624465644359589, 0.005985668860375881, 0.00622067553922534, 0.004920633044093847, 0.006264952477067709, 0.005895104259252548, 0.017304962500929832, 0.005036466289311647, 0.01645052246749401, 0.00552499620243907, 0.005020493641495705, 0.00496893422678113, 0.005250291433185339, 0.01278782356530428, 0.003088694531470537, 0.0033970437943935394, 0.0035894769243896008, 0.00667345616966486, 0.003156656865030527, 0.0036237018648535013, 0.0036022148560732603, 0.003453889861702919, 0.004109144676476717, 0.005784815642982721, 0.009111406281590462, 0.0035131871700286865, 0.0035522643011063337, 0.004104645922780037, 0.003301795804873109, 0.004246095195412636, 0.0042463745921850204, 0.011813318356871605, 0.006935181096196175, 0.00343025429174304, 0.0036944409366697073, 0.003820190206170082, 0.009708689525723457, 0.0024476726539433002, 0.002620010171085596, 0.0031189622823148966, 0.006262988783419132, 0.0025432188995182514, 0.0031952562276273966, 0.0035814426373690367, 0.0033146801870316267, 0.00295349583029747, 0.004884715657681227, 0.005530264228582382, 0.014266658574342728, 0.006335904356092215, 0.005331702530384064, 0.002573923906311393, 0.003269035369157791, 0.0033276453614234924, 0.00526674697175622, 0.003098443616181612, 0.005522235296666622, 0.0022095844615250826, 0.00497839180752635, 0.008610187098383904, 0.0025281726848334074, 0.0032240194268524647, 0.003568316577002406, 0.013203425332903862, 0.0032730353996157646, 0.025715922936797142, 0.0033800818491727114, 0.005708844400942326, 0.008849537931382656, 0.0027387982700020075, 0.0036565004847943783, 0.0047501251101493835, 0.0037049485836178064, 0.004328977316617966, 0.011463180184364319, 0.002798638539388776, 0.0038638790138065815, 0.004120063968002796, 0.019845444709062576, 0.003148686373606324, 0.0038255685940384865, 0.003391908248886466, 0.005870094522833824, 0.012371410615742207, 0.003333666129037738, 0.00359682971611619, 0.0032201786525547504, 0.013005970045924187, 0.001989522250369191, 0.003635548520833254, 0.00543227419257164, 0.004054046235978603, 0.002917816862463951, 0.005253201350569725, 0.0076632569544017315, 0.0019747698679566383, 0.003320396412163973, 0.003046842524781823, 0.00281708175316453, 0.004161408171057701, 0.02046775072813034, 0.0031352376099675894, 0.003871250431984663, 0.009043175727128983, 0.004826237913221121, 0.006937052123248577, 0.014764050021767616, 0.004727406892925501, 0.005445158574730158, 0.005638947244733572, 0.01731044054031372, 0.005520085338503122, 0.006202497985213995, 0.003515800694003701, 0.0031261572148650885, 0.06631673127412796, 0.0033599892631173134, 0.006644280161708593, 0.003631476080045104, 0.0037449223455041647]


Top-k source tokens:

['self', 'self', 'func', 'threadIds', 'threadIds', 'tp', 'threadIds', 'success', 'result', 'event']


Top-k attention probs:

[0.06631673127412796, 0.04728091135621071, 0.025715922936797142, 0.025437844917178154, 0.02046775072813034, 0.019845444709062576, 0.01731044054031372, 0.017304962500929832, 0.01645052246749401, 0.016011210158467293]
