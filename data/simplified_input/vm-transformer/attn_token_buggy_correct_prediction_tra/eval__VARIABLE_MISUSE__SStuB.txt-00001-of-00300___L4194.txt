
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def run(", "self", ",", "deploy_attempted", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Execute the routine, the routine can be either:\\n        1. Execute a raw shell command\\n        2. Execute a wrapper func\\n        3. Execute a remote Salt command\\n\\n        If a (re)deploy is needed, then retry the operation after a deploy\\n        attempt\\n\\n        Returns tuple of (stdout, stderr, retcode)\\n        '", "#NEWLINE#", "stdout", "=", "stderr", "=", "retcode", "=", "None", "#NEWLINE#", "if", "self", ".", "opts", ".", "get", "(", "'raw_shell'", ",", "False", ")", ":", "#NEWLINE#", "#INDENT#", "cmd_str", "=", "' '", ".", "join", "(", "[", "self", ".", "_escape_arg", "(", "arg", ")", "for", "arg", "in", "self", ".", "argv", "]", ")", "#NEWLINE#", "(", "stdout", ",", "stderr", ",", "retcode", ")", "=", "self", ".", "shell", ".", "exec_cmd", "(", "retcode", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "self", ".", "fun", "in", "self", ".", "wfuncs", ")", "or", "self", ".", "mine", ")", ":", "#NEWLINE#", "#INDENT#", "(", "stdout", ",", "retcode", ")", "=", "self", ".", "run_wfunc", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "(", "stdout", ",", "stderr", ",", "retcode", ")", "=", "self", ".", "cmd_block", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "(", "stdout", ",", "stderr", ",", "retcode", ")"], "error_location": [71], "repair_targets": [35], "repair_candidates": [13, 58, 99, 116, 133, 2, 22, 42, 51, 65, 82, 86, 91, 104, 123, 17, 62, 71, 101, 120, 137, 46, 49, 4, 15, 60, 118, 135, 35], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "saltstack/salt/salt/client/ssh/__init__.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4194, "results": {"model": "transformer", "prob": {"loc": [[0.035339780151844025, 4.42424294533339e-07, 3.0862388200603164e-08, 8.945001184201828e-09, 1.6831967286634608e-06, 3.126295311517424e-08, 6.395145391024926e-08, 6.744382829992901e-09, 9.0811518305145e-09, 3.444990781531487e-08, 3.421848049356413e-08, 2.3948055627442955e-07, 4.5945629523203024e-08, 2.902148298744578e-05, 9.058666705641372e-08, 0.015203452669084072, 2.387222593824845e-06, 0.00011058556992793456, 5.686214990419103e-06, 6.119503836998774e-07, 6.993136736355154e-08, 5.8636153710267536e-08, 1.801909093046561e-07, 3.4939042770076867e-09, 2.4453010727398805e-09, 7.197826334959245e-09, 2.0507906484112937e-08, 5.654700885315833e-07, 3.130994855382596e-06, 3.889374227128428e-07, 1.6677528037689626e-05, 2.2891634898769553e-07, 3.74355067833676e-07, 3.6098928291039556e-08, 2.6478277348473966e-08, 6.907756414875621e-06, 4.162986613209796e-07, 1.7216276546605513e-06, 4.909727291391164e-09, 1.0956174634202398e-08, 6.452170282500447e-07, 8.185119440895505e-06, 4.6629843097889534e-08, 9.346893037331938e-09, 1.4487350208369776e-09, 7.374244148650178e-08, 0.0003104961651843041, 3.8112216316221748e-06, 7.113298465810658e-07, 9.515046173191877e-08, 1.6630758992164374e-08, 6.389273039530963e-05, 2.5142441018033423e-08, 3.185931518601137e-08, 4.4137240706731973e-07, 8.844609692459926e-05, 7.540298696540049e-08, 1.496515089627337e-08, 1.5689858628320508e-05, 8.9570754369106e-08, 7.103329608071363e-06, 5.244824663463987e-08, 5.0463909246900585e-06, 2.020105505096126e-08, 2.803971597131749e-07, 7.932529797471943e-07, 6.187635737120445e-09, 3.7089487037178515e-09, 5.988221030150953e-09, 2.427114065284286e-09, 3.6688408044938114e-07, 0.9463966488838196, 2.4443443180643953e-06, 3.4089904943357396e-07, 1.5217474924611452e-07, 9.121891707764007e-06, 2.7269891234027455e-07, 2.801090488446789e-07, 2.900302717989689e-07, 2.062572121985795e-07, 2.5653056567875865e-08, 2.069301217488828e-06, 0.00010398980521131307, 2.9137940060763867e-08, 1.670957261445949e-09, 2.7055984119783716e-08, 3.954705607611686e-05, 2.0287318491796213e-08, 3.945009208194961e-09, 1.0526994032034054e-07, 1.208615003633895e-06, 5.72573444515001e-05, 2.9620517594253215e-08, 5.171097328116048e-09, 5.734102614951553e-08, 1.8553713516666903e-06, 1.987543924997226e-07, 7.063271567631091e-08, 2.7199519081477774e-08, 4.968390840076609e-06, 7.140727120713564e-08, 2.0196105197101133e-06, 7.90737697542454e-09, 1.419362405385982e-07, 5.632394817212116e-08, 1.1631309249082733e-08, 6.266810181898563e-09, 3.2978184663079446e-06, 1.6968123190963524e-06, 6.455076118072611e-07, 2.6010940246123937e-07, 3.4358583889115835e-07, 5.069950503866494e-08, 4.8214388925771345e-08, 1.613268096889442e-08, 4.5730006448252425e-09, 2.7207912353333086e-05, 5.007807502011019e-08, 6.774887879146263e-05, 5.650655054978415e-08, 1.2847046491515357e-05, 7.572635851715859e-09, 2.571942729900911e-07, 1.0768338825073442e-06, 1.430552565295784e-08, 3.684875737874904e-09, 4.3081145122414455e-05, 1.7357743899992784e-06, 1.7231526783234585e-07, 7.82384859121521e-08, 8.196711576147209e-08, 1.0977322162375458e-08, 1.9610509127687692e-07, 0.00035711657255887985, 2.1832386210007826e-06, 0.0010096003534272313, 1.4394837535292027e-06, 0.0006111429538577795, 2.4448595468129497e-06]], "pointer": [[0.0, 0.0, 0.00015037853154353797, 0.0, 0.018994862213730812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0245651975274086, 0.0, 0.0008810868603177369, 0.0, 0.0004299077554605901, 0.0, 0.0, 0.0, 0.0, 8.219449227908626e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9530906081199646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2495955843405682e-06, 0.0, 0.0, 0.0, 2.126266053892323e-06, 0.0, 0.0, 3.646132245194167e-05, 0.0, 5.8410096244188026e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010100010549649596, 0.0, 0.0001736199192237109, 0.0, 0.00030733970925211906, 0.0, 0.0, 3.4343975130468607e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6608431653585285e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8550221031764522e-06, 0.0, 0.0, 0.0, 5.124460585648194e-06, 0.0, 0.0, 0.0, 0.0, 4.83348549096263e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.4250136852497235e-05, 0.0, 7.278900011442602e-05, 0.0, 0.0, 1.3998062513564946e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001320838346146047, 0.0, 3.7922491173958406e-05, 0.0, 3.1836785638006404e-05, 0.0, 0.0, 2.5361337065987755e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.786647878063377e-07, 0.0, 3.494799898362544e-07, 0.0, 5.500389193002775e-07, 0.0]], "target": [0.9530906081199646]}, "loss": [0.05509352684020996, 0.04804530367255211], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def run(', 'self', ',', 'deploy_attempted', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Execute the routine, the routine can be either:\\n        1. Execute a raw shell command\\n        2. Execute a wrapper func\\n        3. Execute a remote Salt command\\n\\n        If a (re)deploy is needed, then retry the operation after a deploy\\n        attempt\\n\\n        Returns tuple of (stdout, stderr, retcode)\\n        '", '#NEWLINE#', 'stdout', '=', 'stderr', '=', 'retcode', '=', 'None', '#NEWLINE#', 'if', 'self', '.', 'opts', '.', 'get', '(', "'raw_shell'", ',', 'False', ')', ':', '#NEWLINE#', '#INDENT#', 'cmd_str', '=', "' '", '.', 'join', '(', '[', 'self', '.', '_escape_arg', '(', 'arg', ')', 'for', 'arg', 'in', 'self', '.', 'argv', ']', ')', '#NEWLINE#', '(', 'stdout', ',', 'stderr', ',', 'retcode', ')', '=', 'self', '.', 'shell', '.', 'exec_cmd', '(', 'retcode', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'if', '(', '(', 'self', '.', 'fun', 'in', 'self', '.', 'wfuncs', ')', 'or', 'self', '.', 'mine', ')', ':', '#NEWLINE#', '#INDENT#', '(', 'stdout', ',', 'retcode', ')', '=', 'self', '.', 'run_wfunc', '(', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', '(', 'stdout', ',', 'stderr', ',', 'retcode', ')', '=', 'self', '.', 'cmd_block', '(', ')', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'return', '(', 'stdout', ',', 'stderr', ',', 'retcode', ')']


All attention probs:

[0.011382359080016613, 0.008236406370997429, 0.03877537325024605, 0.012892150320112705, 0.03170489892363548, 0.013717902824282646, 0.011130120605230331, 0.007367858663201332, 0.006626422517001629, 0.008537350222468376, 0.00917043723165989, 0.010525766760110855, 0.009219356812536716, 0.019457226619124413, 0.010457614436745644, 0.012685117311775684, 0.0064866989850997925, 0.013291149400174618, 0.00685567082837224, 0.006524825468659401, 0.007327706553041935, 0.006584409158676863, 0.012779559008777142, 0.004093489143997431, 0.00481092045083642, 0.0035870790015906096, 0.004014536272734404, 0.003921793773770332, 0.006745496764779091, 0.004343086387962103, 0.005223950836807489, 0.0036414950154721737, 0.004661426413804293, 0.005078813061118126, 0.00503094308078289, 0.023788288235664368, 0.004177524242550135, 0.0051794699393212795, 0.0030437710229307413, 0.005054543726146221, 0.0031833124812692404, 0.003351265797391534, 0.010622733272612095, 0.002711198292672634, 0.0036620148457586765, 0.003615243826061487, 0.01433595735579729, 0.003379072295501828, 0.0044733150862157345, 0.014003242366015911, 0.0033001387491822243, 0.012171734124422073, 0.0023073023185133934, 0.0034530279226601124, 0.002629704074934125, 0.00360656576231122, 0.004832543432712555, 0.0033594295382499695, 0.010455822572112083, 0.00413940055295825, 0.010362183675169945, 0.0037102343048900366, 0.011385221965610981, 0.00416564242914319, 0.0031640552915632725, 0.008418054319918156, 0.0022951767314225435, 0.0042039742693305016, 0.0025391499511897564, 0.004484045784920454, 0.0035945666022598743, 0.038864340633153915, 0.002908342983573675, 0.004702536389231682, 0.004511624574661255, 0.013939505442976952, 0.003011051332578063, 0.0035650969948619604, 0.0035804971121251583, 0.004664679989218712, 0.0025247824378311634, 0.002895844867452979, 0.01057572104036808, 0.0022120862267911434, 0.003444149624556303, 0.003011933993548155, 0.011888137087225914, 0.0034393088426440954, 0.00371798244304955, 0.0031219632364809513, 0.0048261540941894054, 0.012047209776937962, 0.0024671738501638174, 0.0034665099810808897, 0.0028711440972983837, 0.0040036519058048725, 0.004758692346513271, 0.004859199281781912, 0.005280772689729929, 0.011040502227842808, 0.0052156392484903336, 0.011024554260075092, 0.004470790270715952, 0.004675873089581728, 0.008081316947937012, 0.0022443875204771757, 0.003539277473464608, 0.0037887822836637497, 0.002463842509314418, 0.004021873231977224, 0.0043626818805933, 0.009973389096558094, 0.004317001905292273, 0.003954135347157717, 0.003828719025477767, 0.0036756498739123344, 0.014544994570314884, 0.00383943784981966, 0.01326667983084917, 0.003469327697530389, 0.012864934280514717, 0.00400045420974493, 0.0037092335987836123, 0.00906834751367569, 0.003986827563494444, 0.0036143374163657427, 0.007458824198693037, 0.005997729953378439, 0.007066063582897186, 0.006124759558588266, 0.005623440258204937, 0.007389279548078775, 0.004643816966563463, 0.021645227447152138, 0.003770016599446535, 0.02315223217010498, 0.0035794959403574467, 0.01509926002472639, 0.004198433831334114]


Top-k source tokens:

['retcode', 'self', 'deploy_attempted', 'cmd_str', 'stderr', 'stdout', 'stdout', 'retcode', 'stdout', 'arg']


Top-k attention probs:

[0.038864340633153915, 0.03877537325024605, 0.03170489892363548, 0.023788288235664368, 0.02315223217010498, 0.021645227447152138, 0.019457226619124413, 0.01509926002472639, 0.014544994570314884, 0.01433595735579729]
