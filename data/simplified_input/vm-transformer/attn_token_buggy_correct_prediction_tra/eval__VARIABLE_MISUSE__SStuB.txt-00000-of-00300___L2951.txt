
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def _getLang(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Determines language of a code block from shebang line and whether said\\n        line should be removed or left in place. If the sheband line contains a\\n        path (even a single /) then it is assumed to be a real shebang line and\\n        left alone. However, if no path is given (e.i.: #!python or :::python)\\n        then it is assumed to be a mock shebang for language identifitation of a\\n        code fragment and removed from the code block prior to processing for\\n        code highlighting. When a mock shebang (e.i: #!python) is found, line\\n        numbering is turned on. When colons are found in place of a shebang\\n        (e.i.: :::python), line numbering is left in the current state - off\\n        by default.\\n\\n        '", "#NEWLINE#", "import", "re", "#NEWLINE#", "lines", "=", "self", ".", "src", ".", "split", "(", "'\\n'", ")", "#NEWLINE#", "fl", "=", "lines", ".", "pop", "(", "0", ")", "#NEWLINE#", "c", "=", "re", ".", "compile", "(", "'\\n            (?:(?:^::+)|(?P<shebang>^[#]!))\\t# Shebang or 2 or more colons.\\n            (?P<path>(?:/\\\\w+)*[/ ])?        # Zero or 1 path\\n            (?P<lang>[\\\\w+-]*)               # The language\\n            '", ",", "re", ".", "VERBOSE", ")", "#NEWLINE#", "m", "=", "c", ".", "search", "(", "fl", ")", "#NEWLINE#", "if", "m", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lang", "=", "m", ".", "group", "(", "'lang'", ")", ".", "lower", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "IndexError", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lang", "=", "None", "#NEWLINE#", "#UNINDENT#", "if", "m", ".", "group", "(", "'path'", ")", ":", "#NEWLINE#", "#INDENT#", "lines", ".", "insert", "(", "0", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "self", ".", "linenums", "is", "None", ")", "and", "m", ".", "group", "(", "'shebang'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "linenums", "=", "True", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "lines", ".", "insert", "(", "0", ",", "fl", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "src", "=", "'\\n'", ".", "join", "(", "lines", ")", ".", "strip", "(", "'\\n'", ")"], "error_location": [107], "repair_targets": [23, 51, 149], "repair_candidates": [45, 55, 67, 92, 121, 2, 14, 63, 84, 107, 114, 131, 153, 32, 47, 23, 51, 149, 12, 25, 101, 143, 161], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "RoseOu/flasky/venv/lib/python2.7/site-packages/markdown/extensions/codehilite.py", "license": "mit", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2951, "results": {"model": "transformer", "prob": {"loc": [[0.03293238580226898, 6.943336643416842e-07, 5.542958092519257e-07, 1.1372163655209988e-08, 1.423882700635204e-08, 1.435578766972867e-08, 1.1177334613421408e-08, 1.4743925191851304e-08, 9.721432547848963e-09, 1.5293785793346615e-08, 1.4329197384199688e-08, 6.147788944588228e-09, 2.642964034293982e-07, 1.5322399349315674e-08, 2.117425310643739e-06, 4.622723093206105e-09, 3.4944431792638397e-09, 1.0647600134916502e-08, 4.67720573382735e-09, 2.0796592892224908e-08, 5.477330660141888e-07, 7.646470834288266e-08, 1.839592833619008e-08, 6.416045721380215e-07, 2.67742432669138e-08, 1.8524383449403103e-07, 9.638130293865288e-09, 3.6389102842093735e-09, 5.084590881665463e-08, 1.8285074929735856e-06, 1.9508860304995324e-07, 4.756774885095183e-08, 7.248627866829338e-07, 3.699644324228757e-08, 2.258641806918149e-08, 1.2260807480402036e-08, 1.1859060400354338e-08, 1.1175826841736125e-07, 5.426564939625678e-07, 1.0506390424325218e-07, 2.6338768748246366e-06, 4.6859497615514556e-08, 2.9514932720076104e-08, 7.312195293707191e-08, 4.59699833754712e-08, 3.0544811124855187e-07, 1.4341283716134967e-08, 8.665742967650658e-08, 1.6352224463389575e-08, 9.616663021461136e-09, 4.363155881037528e-08, 0.00036811691825278103, 2.6592994117891067e-07, 1.4203490650288586e-07, 3.0181279697671926e-08, 0.00019597930076997727, 1.0387532967115476e-07, 8.269335438626513e-08, 6.411155339947072e-08, 5.107754219579874e-08, 7.866025697467194e-08, 6.888511450142687e-08, 5.5962839695666844e-08, 1.5836309330552467e-06, 1.2112441716283229e-08, 4.152265731249827e-08, 1.4354986888065469e-07, 9.347406830784166e-07, 2.6579874301546624e-08, 3.6868710306947605e-09, 1.2012711181341729e-07, 2.2118537401638605e-07, 1.0510769499205708e-07, 3.134390169634571e-08, 1.4159662775625748e-08, 6.285440576903056e-07, 8.669029512020643e-07, 4.01270057182046e-07, 2.039111279827921e-07, 2.0146997314895998e-07, 6.715590927797166e-08, 1.2225470413795847e-07, 1.2458859544040024e-07, 6.816807740506192e-08, 1.1757136917367461e-06, 2.37086315024726e-08, 7.438772797740967e-08, 9.458349268243182e-07, 6.250519959394296e-07, 2.252716200246141e-07, 1.153696445044261e-07, 5.4851323483262604e-08, 1.7961008779820986e-05, 2.7551271486458973e-08, 2.749550587211047e-09, 1.1501349916898107e-07, 3.969852855334466e-07, 2.6309271206059748e-08, 5.065427899353381e-07, 2.640510388118855e-07, 1.0921791471218967e-07, 8.69869651864974e-08, 1.557328310752837e-08, 5.817624604276261e-09, 2.118030124620418e-07, 5.68349321383721e-07, 1.3990540992381284e-07, 0.9339175224304199, 6.288858571679157e-07, 3.3134901400444505e-07, 3.463204620857141e-07, 7.375057720082623e-08, 2.500078899458913e-08, 1.1284466694405637e-07, 0.000304916815366596, 6.577653266504058e-08, 3.3835860335784673e-07, 2.6290922505722847e-07, 1.474939068657477e-07, 1.517027641284585e-07, 2.5356223432027036e-07, 7.772561730234884e-06, 3.362581679766663e-08, 3.2200300204010546e-09, 2.9830582093381963e-07, 1.4502613794320496e-06, 1.116866670258787e-07, 4.139550213722032e-08, 6.564653176610591e-07, 1.6196750607377908e-07, 9.286351598802867e-08, 5.01913007155963e-07, 1.4069478027067817e-08, 8.933356809848192e-08, 1.5246953353198478e-06, 3.007689429068705e-06, 7.612429158143641e-07, 1.9391869443552423e-07, 1.2178841757304326e-07, 1.2080182898444036e-07, 1.1035516678248314e-07, 9.823169477840565e-08, 4.843586154379409e-08, 2.7555948634017113e-08, 2.2613143357830268e-08, 4.363786221261989e-09, 1.21130725005969e-07, 9.357493695461017e-07, 1.757887559961091e-07, 0.03210784122347832, 5.275812782201683e-07, 1.4588890451250336e-07, 4.3143472794326954e-08, 6.666486456197163e-07, 1.6576313655036756e-08, 7.111552680072464e-09, 1.3290494393913832e-07, 5.637662070512306e-07, 3.889295996373221e-08, 3.801054138108384e-09, 9.378501886203594e-08, 0.00010047736577689648, 3.864227835492784e-07, 6.621458226163668e-08, 1.1497549579075894e-08, 4.815786951439804e-07, 4.3055188143625855e-06, 1.1738449074982782e-06]], "pointer": [[0.0, 0.0, 0.004523527808487415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06295651197433472, 0.0, 0.0005802353261969984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27805569767951965, 0.0, 0.02049941197037697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01200529932975769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04566207528114319, 0.0, 0.0011419933289289474, 0.0, 0.0, 0.0, 0.06698990613222122, 0.0, 0.0, 0.0, 0.001493363524787128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002365886000916362, 0.0, 0.0, 0.0, 0.07488789409399033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006362797576002777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08256673812866211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04055354744195938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011030207388103008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007487957482226193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029461020603775978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006216951180249453, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013405203819274902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23005066812038422, 0.0, 0.0, 0.0, 0.004332645796239376, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009836077690124512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.5750962495803833]}, "loss": [0.06836701929569244, 0.553217887878418], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def _getLang(', 'self', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Determines language of a code block from shebang line and whether said\\n        line should be removed or left in place. If the sheband line contains a\\n        path (even a single /) then it is assumed to be a real shebang line and\\n        left alone. However, if no path is given (e.i.: #!python or :::python)\\n        then it is assumed to be a mock shebang for language identifitation of a\\n        code fragment and removed from the code block prior to processing for\\n        code highlighting. When a mock shebang (e.i: #!python) is found, line\\n        numbering is turned on. When colons are found in place of a shebang\\n        (e.i.: :::python), line numbering is left in the current state - off\\n        by default.\\n\\n        '", '#NEWLINE#', 'import', 're', '#NEWLINE#', 'lines', '=', 'self', '.', 'src', '.', 'split', '(', "'\\n'", ')', '#NEWLINE#', 'fl', '=', 'lines', '.', 'pop', '(', '0', ')', '#NEWLINE#', 'c', '=', 're', '.', 'compile', '(', "'\\n            (?:(?:^::+)|(?P<shebang>^[#]!))\\t# Shebang or 2 or more colons.\\n            (?P<path>(?:/\\\\w+)*[/ ])?        # Zero or 1 path\\n            (?P<lang>[\\\\w+-]*)               # The language\\n            '", ',', 're', '.', 'VERBOSE', ')', '#NEWLINE#', 'm', '=', 'c', '.', 'search', '(', 'fl', ')', '#NEWLINE#', 'if', 'm', ':', '#NEWLINE#', '#INDENT#', 'try', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'lang', '=', 'm', '.', 'group', '(', "'lang'", ')', '.', 'lower', '(', ')', '#NEWLINE#', '#UNINDENT#', 'except', 'IndexError', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'lang', '=', 'None', '#NEWLINE#', '#UNINDENT#', 'if', 'm', '.', 'group', '(', "'path'", ')', ':', '#NEWLINE#', '#INDENT#', 'lines', '.', 'insert', '(', '0', ',', 'self', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', '(', 'self', '.', 'linenums', 'is', 'None', ')', 'and', 'm', '.', 'group', '(', "'shebang'", ')', ')', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'linenums', '=', 'True', '#NEWLINE#', '#UNINDENT#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'lines', '.', 'insert', '(', '0', ',', 'fl', ')', '#NEWLINE#', '#UNINDENT#', 'self', '.', 'src', '=', "'\\n'", '.', 'join', '(', 'lines', ')', '.', 'strip', '(', "'\\n'", ')']


All attention probs:

[0.011988426558673382, 0.008491989225149155, 0.04288994148373604, 0.012365922331809998, 0.009693851694464684, 0.008620558306574821, 0.006946580950170755, 0.008946343325078487, 0.006864336784929037, 0.010864946991205215, 0.011638808064162731, 0.009046543389558792, 0.014999180100858212, 0.006711927242577076, 0.013123523443937302, 0.004753477405756712, 0.006533809006214142, 0.0053452858701348305, 0.006235585547983646, 0.0065243481658399105, 0.006284141447395086, 0.005144722759723663, 0.006225254852324724, 0.018484415486454964, 0.004826183896511793, 0.009601167403161526, 0.0031320543494075537, 0.0032728337682783604, 0.0035466153640300035, 0.006958795711398125, 0.003673263592645526, 0.004967041779309511, 0.010628662072122097, 0.0050535486079752445, 0.0048535973764956, 0.0026045336853712797, 0.0032979832030832767, 0.003616433357819915, 0.004755374975502491, 0.003535853000357747, 0.006014940794557333, 0.002426188439130783, 0.004806183744221926, 0.002677173586562276, 0.004975979216396809, 0.019709723070263863, 0.004936856683343649, 0.00915208924561739, 0.002779017435386777, 0.0037057700101286173, 0.002977103926241398, 0.017888670787215233, 0.0024534256663173437, 0.003498315578326583, 0.00333967013284564, 0.01477771159261465, 0.0028200240340083838, 0.0025930670090019703, 0.0028658637311309576, 0.0031538396142423153, 0.003346370765939355, 0.0029407828114926815, 0.0029868644196540117, 0.011043624952435493, 0.0018838997930288315, 0.0040413690730929375, 0.003263168502599001, 0.008378969505429268, 0.0023437459021806717, 0.003192733507603407, 0.00329211400821805, 0.004743794444948435, 0.0030337590724229813, 0.0021834438666701317, 0.002906705718487501, 0.003072235966101289, 0.0021912904921919107, 0.0036081396974623203, 0.003880063770338893, 0.00768504710868001, 0.007271414157003164, 0.0032938430085778236, 0.0035110421013087034, 0.0033932344522327185, 0.008709060028195381, 0.0020851597655564547, 0.0035750234965234995, 0.004023116081953049, 0.0034497815649956465, 0.003503536805510521, 0.003341918345540762, 0.004169033840298653, 0.01013756264001131, 0.0019876686856150627, 0.0027906771283596754, 0.002857515588402748, 0.006009431555867195, 0.002588642528280616, 0.003110675374045968, 0.00400328915566206, 0.004153583664447069, 0.008540626615285873, 0.002459197072312236, 0.004072890616953373, 0.0038091731257736683, 0.005156880244612694, 0.002715085167437792, 0.06847289204597473, 0.002056810539215803, 0.0034471468534320593, 0.0036861745174974203, 0.005316716618835926, 0.0030633844435214996, 0.0023148925974965096, 0.013847136870026588, 0.0016382213216274977, 0.0027064394671469927, 0.002282126806676388, 0.0021156738512218, 0.0025648281443864107, 0.003983995411545038, 0.00912777241319418, 0.002259726170450449, 0.003061828901991248, 0.003228686051443219, 0.006003443151712418, 0.0035537038929760456, 0.003052870510146022, 0.003972860053181648, 0.004132511559873819, 0.0036385010462254286, 0.0065834540873765945, 0.0017604617169126868, 0.003944953437894583, 0.00287044164724648, 0.0032058788929134607, 0.0036739010829478502, 0.0031997309997677803, 0.0036956402473151684, 0.007992696948349476, 0.003232493530958891, 0.003455784171819687, 0.0031467534136027098, 0.007785391062498093, 0.0019689982291311026, 0.0033721965737640858, 0.003321905853226781, 0.005503034684807062, 0.002828161232173443, 0.030688980594277382, 0.002921229461207986, 0.004141421988606453, 0.0046357954852283, 0.012128149159252644, 0.004459405783563852, 0.005578287411481142, 0.005124877206981182, 0.004991211462765932, 0.003245114115998149, 0.004850146360695362, 0.004551177844405174, 0.01962999254465103, 0.003868927014991641, 0.002616408746689558, 0.0046264007687568665, 0.0038322173058986664, 0.003978586755692959, 0.003724784590303898]


Top-k source tokens:

['self', 'self', 'fl', 'm', 'lines', 'fl', 'fl', 'lines', 'm', 'self']


Top-k attention probs:

[0.06847289204597473, 0.04288994148373604, 0.030688980594277382, 0.019709723070263863, 0.01962999254465103, 0.018484415486454964, 0.017888670787215233, 0.014999180100858212, 0.01477771159261465, 0.013847136870026588]
