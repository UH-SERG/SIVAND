
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "open_file", "(", "1", ",", "mode", "=", "'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"], "error_location": [42], "repair_targets": [12], "repair_candidates": [12, 28, 63, 16, 24, 46, 14, 55, 20, 42, 44, 38, 51, 59], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "networkx/networkx/networkx/algorithms/bipartite/edgelist.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4150, "results": {"model": "transformer", "prob": {"loc": [[0.02320273406803608, 1.378321144329675e-06, 1.728376730625314e-08, 2.413158028957696e-08, 3.6260768609963634e-08, 1.1627455442919654e-08, 4.7912902090274656e-08, 1.741577015934581e-08, 7.50507300750769e-09, 6.292265819496379e-09, 7.400453139183583e-09, 2.3204822241496004e-07, 6.312779987638351e-07, 8.291702435769821e-09, 3.041822765226243e-06, 6.417372855338499e-09, 9.714903370650063e-08, 1.6621255483073583e-08, 3.456009878277655e-08, 9.202584472234321e-09, 7.210617809505493e-07, 2.8348390301857762e-08, 1.6288173299017217e-07, 1.8598562689930986e-08, 5.1523972643963134e-08, 6.532648910706484e-08, 7.099311005731579e-08, 1.9620630453687227e-08, 1.187163647387024e-07, 6.299906374351849e-08, 4.201730519071134e-07, 3.915119606290318e-08, 1.2504580126915243e-07, 3.6889446164423134e-08, 1.6925334023198957e-08, 2.283355193810621e-08, 1.3793362008129861e-08, 1.651469716534848e-08, 1.3073274907071664e-08, 8.950518548545006e-09, 2.7025661708535154e-09, 5.4094901003054474e-08, 0.9094038009643555, 2.3248936997788405e-08, 0.061200834810733795, 2.6113468720723176e-08, 1.5459354472113773e-05, 2.1406242112220752e-08, 6.991073320250507e-08, 7.724285921995033e-08, 3.889686084335153e-08, 1.558204985485645e-06, 8.966670606014304e-08, 3.0304360620903026e-07, 4.353193361339436e-08, 6.722365242239903e-08, 1.7690972242689895e-08, 2.0099208963841875e-09, 7.402527923972002e-09, 1.4765612377232173e-06, 4.000006370574738e-08, 4.884855631104301e-09, 5.658498736238471e-08, 0.006165083963423967, 1.74382336126655e-07, 2.4003264798011514e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.957097589969635, 0.0, 0.040011387318372726, 0.0, 0.0026753651909530163, 0.0, 0.0, 0.0, 2.4277005650219508e-06, 0.0, 0.0, 0.0, 8.111957868095487e-05, 0.0, 0.0, 0.0, 8.941532541939523e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5961773897288367e-05, 0.0, 0.0, 0.0, 4.055421598536668e-08, 0.0, 5.3786514797593554e-08, 0.0, 1.917199142553727e-06, 0.0, 0.0, 0.0, 0.0, 0.00010348157957196236, 0.0, 0.0, 0.0, 1.7144720914075151e-06, 0.0, 0.0, 0.0, 1.053454425914424e-07, 0.0, 0.0, 0.0, 3.7664520391444967e-08, 0.0, 0.0]], "target": [0.957097589969635]}, "loss": [0.09496594965457916, 0.043849918991327286], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', '@', 'open_file', '(', '1', ',', 'mode', '=', "'wb'", ')', '#NEWLINE#', 'def write_edgelist(', 'G', ',', 'path', ',', 'comments', '=', "'#'", ',', 'delimiter', '=', "' '", ',', 'data', '=', 'True', ',', 'encoding', '=', "'utf-8'", ')', ':', '#NEWLINE#', '#INDENT#', '\'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\\'wb\\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, "test.edgelist")\\n    >>> fh=open("test.edgelist",\\\'wb\\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, "test.edgelist.gz")\\n    >>> nx.write_edgelist(G, "test.edgelist.gz", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\\'red\\\')\\n    >>> nx.write_edgelist(G,\\\'test.edgelist\\\',data=False)\\n    >>> nx.write_edgelist(G,\\\'test.edgelist\\\',data=[\\\'color\\\'])\\n    >>> nx.write_edgelist(G,\\\'test.edgelist\\\',data=[\\\'color\\\',\\\'weight\\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    \'', '#NEWLINE#', 'for', 'line', 'in', 'generate_edgelist', '(', 'delimiter', ',', 'delimiter', ',', 'data', ')', ':', '#NEWLINE#', '#INDENT#', 'line', '+=', "'\\n'", '#NEWLINE#', 'path', '.', 'write', '(', 'line', '.', 'encode', '(', 'encoding', ')', ')']


All attention probs:

[0.018703684210777283, 0.013103875331580639, 0.027052082121372223, 0.017950644716620445, 0.019177401438355446, 0.01385458279401064, 0.02782590128481388, 0.013120055198669434, 0.01223695371299982, 0.013660356402397156, 0.01717315800487995, 0.023489436134696007, 0.026784053072333336, 0.01307750679552555, 0.02926831692457199, 0.010678411461412907, 0.027075421065092087, 0.008705288171768188, 0.0105385547503829, 0.008550133556127548, 0.038435641676187515, 0.008199745789170265, 0.008915411308407784, 0.007667837664484978, 0.0198014248162508, 0.007143831811845303, 0.008326076902449131, 0.006796377245336771, 0.02064921148121357, 0.007136112544685602, 0.01017764862626791, 0.00638977438211441, 0.008677905425429344, 0.008775172755122185, 0.008566736243665218, 0.009148886427283287, 0.009782418608665466, 0.009659511968493462, 0.02679860033094883, 0.009088980033993721, 0.008415675722062588, 0.008560312911868095, 0.056494858115911484, 0.008863535709679127, 0.03683263435959816, 0.00849193800240755, 0.03471623361110687, 0.006417667027562857, 0.006976719945669174, 0.008425985462963581, 0.008596441708505154, 0.019453054293990135, 0.007287962362170219, 0.008049935102462769, 0.009948366321623325, 0.0228872112929821, 0.004957967903465033, 0.00930886808782816, 0.009163210168480873, 0.028689822182059288, 0.00704547856003046, 0.010431889444589615, 0.011427773162722588, 0.03804278373718262, 0.012674396857619286, 0.015676146373152733]


Top-k source tokens:

['delimiter', 'delimiter', 'encoding', 'delimiter', 'data', 'path', 'line', 'mode', 'comments', 'open_file']


Top-k attention probs:

[0.056494858115911484, 0.038435641676187515, 0.03804278373718262, 0.03683263435959816, 0.03471623361110687, 0.02926831692457199, 0.028689822182059288, 0.02782590128481388, 0.027075421065092087, 0.027052082121372223]
