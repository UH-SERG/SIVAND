
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Perform element-wise absolute value of Tensor `a`, storing the result in\\n        Tensor out. Both Tensor's should have identical shape.\\n\\n        Arguments:\\n            a (Tensor): input to be transformed.\\n            out (Tensor, optional): where the result will be stored. If out is\\n                                    None, only the op-tree will be returned.\\n\\n        Returns:\\n            OpTreeNode: the resulting op-tree\\n        \"", "#NEWLINE#", "return", "OpTreeNode", ".", "build", "(", "'abs'", ",", "out", ",", "None", ",", "out", "=", "out", ")"], "error_location": [22], "repair_targets": [4], "repair_candidates": [6, 22, 26, 28, 2, 4], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "NervanaSystems/neon/neon/backends/backend.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1682, "results": {"model": "transformer", "prob": {"loc": [[0.00046200156793929636, 2.5172255391225917e-08, 3.139401272278519e-08, 8.39091129911651e-10, 9.584157822928319e-08, 6.450638911914552e-10, 4.1487624002911616e-08, 2.4947306442868467e-09, 4.0445982674164327e-10, 3.55306395416477e-10, 7.409841629169023e-10, 1.1713929826129288e-09, 5.728230112467259e-10, 4.789661112170052e-09, 6.736630697723456e-10, 7.168120957912194e-11, 1.197815596709617e-10, 3.8944181213196316e-10, 4.5007445687028635e-11, 1.0730173416462208e-09, 4.375969808734226e-08, 3.0532941508454314e-08, 0.9987103939056396, 1.859206344434483e-09, 8.659397643384636e-10, 2.0862500615947965e-10, 2.6306506972773036e-10, 3.0745453405423007e-10, 0.0008273355197161436, 2.864650738843011e-09]], "pointer": [[0.0, 0.0, 0.0002911772462539375, 0.0, 0.9997046589851379, 0.0, 4.082341092725983e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.078014566502361e-08, 0.0, 0.0, 0.0, 7.323238548906374e-08, 0.0, 6.726179613281147e-09, 0.0]], "target": [0.9997046589851379]}, "loss": [0.0012904420727863908, 0.0002953846415039152], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def absolute(', 'self', ',', 'a', ',', 'out', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n        Perform element-wise absolute value of Tensor `a`, storing the result in\\n        Tensor out. Both Tensor\'s should have identical shape.\\n\\n        Arguments:\\n            a (Tensor): input to be transformed.\\n            out (Tensor, optional): where the result will be stored. If out is\\n                                    None, only the op-tree will be returned.\\n\\n        Returns:\\n            OpTreeNode: the resulting op-tree\\n        "', '#NEWLINE#', 'return', 'OpTreeNode', '.', 'build', '(', "'abs'", ',', 'out', ',', 'None', ',', 'out', '=', 'out', ')']


All attention probs:

[0.031514644622802734, 0.022107142955064774, 0.0910964235663414, 0.029467599466443062, 0.0689266100525856, 0.02744927629828453, 0.07114849984645844, 0.02405489608645439, 0.023704232648015022, 0.028460990637540817, 0.02639935351908207, 0.02705562300980091, 0.020220190286636353, 0.023118076846003532, 0.021869340911507607, 0.027325375005602837, 0.025890769436955452, 0.01118628028780222, 0.016786815598607063, 0.013775360770523548, 0.019867602735757828, 0.016368383541703224, 0.10170820355415344, 0.016897547990083694, 0.015117419883608818, 0.019275503233075142, 0.03761151805520058, 0.02375895529985428, 0.0743866041302681, 0.0434507392346859]


Top-k source tokens:

['out', 'self', 'out', 'out', 'a', ')', 'out', '#NEWLINE#', ',', ')']


Top-k attention probs:

[0.10170820355415344, 0.0910964235663414, 0.0743866041302681, 0.07114849984645844, 0.0689266100525856, 0.0434507392346859, 0.03761151805520058, 0.031514644622802734, 0.029467599466443062, 0.028460990637540817]
