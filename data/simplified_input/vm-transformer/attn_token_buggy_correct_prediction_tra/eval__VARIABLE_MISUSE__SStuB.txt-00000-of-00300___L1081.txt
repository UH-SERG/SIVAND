
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "#INDENT#", "'user'", ":", "current_user", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "check", "(", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"], "error_location": [31], "repair_targets": [2], "repair_candidates": [6, 31, 53, 71, 61, 4, 67, 29, 41, 2, 15, 37, 47, 57, 75], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "mikeboers/Flask-ACL/flask_acl/extension.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1081, "results": {"model": "transformer", "prob": {"loc": [[0.03523151949048042, 3.8659408119201544e-07, 4.110340341867413e-06, 1.4206432474850317e-08, 1.988570232924758e-07, 1.695600992945856e-08, 1.1916564091052351e-07, 1.1847842706913525e-08, 6.207106935107731e-07, 5.977889294683791e-09, 1.3215055716386814e-08, 2.2866037951985163e-08, 1.596912646562032e-08, 3.580937146807628e-08, 1.8607266838444048e-08, 2.472008304721385e-07, 8.594855493981868e-09, 3.6577876016963273e-07, 5.115727930160574e-08, 3.435526352291163e-08, 1.8075143159990148e-08, 2.5546935233933254e-08, 0.002727372571825981, 2.8596970125249754e-08, 4.234419392901145e-08, 2.452105896111334e-08, 2.764664763788005e-08, 3.810208326626707e-08, 4.235323913803768e-08, 4.3111074887747236e-07, 6.1556018060571205e-09, 0.9409889578819275, 1.1777247976851868e-07, 7.809631163979702e-09, 6.266331098458977e-08, 3.823567595873101e-08, 2.6283833776119536e-08, 1.2740832389113166e-08, 1.9419260866015975e-08, 2.429229040146197e-09, 2.3068421839411712e-08, 4.92998424306279e-07, 3.4953141039295588e-06, 6.116389954513579e-07, 1.627721957220274e-07, 2.9543721780100896e-07, 8.907526449775105e-08, 2.8254319772713643e-08, 2.0612755946558536e-08, 2.761806783269094e-09, 1.2612804134448652e-08, 4.646432216759422e-08, 1.1367947649887356e-07, 0.004024246707558632, 3.705364974848635e-07, 2.0132047495735605e-07, 1.9744973656088405e-07, 2.189032954902359e-08, 3.8339738495096753e-08, 1.289750306554538e-09, 3.482992028125409e-08, 0.004684820771217346, 1.624078151962749e-07, 2.0279846069115592e-07, 3.4214913124941404e-09, 5.227390964535061e-09, 2.918241470695193e-08, 0.0020521602127701044, 3.162601913686558e-08, 2.1915855796805772e-08, 4.510973283800013e-08, 0.010269053280353546, 3.892486333256784e-08, 6.869641566709106e-08, 6.32803036637597e-08, 7.5598563853418455e-06, 6.487047699010873e-08]], "pointer": [[0.0, 0.0, 0.9718133211135864, 0.0, 0.006971727591007948, 0.0, 0.00461277412250638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008163018501363695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000954957737121731, 0.0, 2.8758675398421474e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011845873668789864, 0.0, 0.0, 0.0, 3.6309782444732264e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015113840345293283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015619279583916068, 0.0, 0.0, 0.0, 0.0005133018712513149, 0.0, 0.0, 0.0, 0.008679339662194252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00028439314337447286, 0.0, 0.0, 0.0, 0.0009966392535716295, 0.0, 0.0, 0.0, 3.4232023608637974e-05, 0.0]], "target": [0.9718133211135864]}, "loss": [0.060823749750852585, 0.028591549023985863], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def can(', 'self', ',', 'permission', ',', 'obj', ',', '**kwargs', ')', ':', '#NEWLINE#', '#INDENT#', '"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can(\'read\', some_object)\\n        >>> auth.can(\'write\', another_object, group=some_group)\\n\\n        "', '#NEWLINE#', 'context', '=', '{', '#NEWLINE#', '#INDENT#', "'user'", ':', 'current_user', ',', '#NEWLINE#', '#UNINDENT#', '}', '#NEWLINE#', 'for', 'func', 'in', 'obj', '.', '_context_processors', ':', '#NEWLINE#', '#INDENT#', 'context', '.', 'update', '(', 'func', '(', ')', ')', '#NEWLINE#', '#UNINDENT#', 'context', '.', 'update', '(', 'get_object_context', '(', 'obj', ')', ')', '#NEWLINE#', 'context', '.', 'update', '(', 'kwargs', ')', '#NEWLINE#', 'return', 'check', '(', 'permission', ',', 'iter_object_acl', '(', 'obj', ')', ',', '**', 'context', ')']


All attention probs:

[0.013316299766302109, 0.011203409172594547, 0.050500884652137756, 0.01750531606376171, 0.024168381467461586, 0.01369442604482174, 0.031069766730070114, 0.012568676844239235, 0.026908494532108307, 0.014686373062431812, 0.014741141349077225, 0.014235657639801502, 0.01154413353651762, 0.013254654593765736, 0.011929619126021862, 0.02794318087399006, 0.013385632075369358, 0.00883923377841711, 0.009575203992426395, 0.00999301765114069, 0.010840636678040028, 0.008827263489365578, 0.024884695187211037, 0.006780971307307482, 0.008353866636753082, 0.0077283186838030815, 0.007581109181046486, 0.008927362971007824, 0.007747642695903778, 0.023197835311293602, 0.008593816310167313, 0.04000724479556084, 0.005978075321763754, 0.004892933648079634, 0.007420701906085014, 0.008866175077855587, 0.009237945079803467, 0.012308071367442608, 0.005162089131772518, 0.007110863924026489, 0.005873483140021563, 0.013374059461057186, 0.011749893426895142, 0.006940413266420364, 0.004496497102081776, 0.009643335826694965, 0.00941599439829588, 0.013974289409816265, 0.004823856987059116, 0.006669973488897085, 0.00601534079760313, 0.008897345513105392, 0.0061747124418616295, 0.025438761338591576, 0.005282715428620577, 0.004499948583543301, 0.008594917133450508, 0.014281767420470715, 0.004021826665848494, 0.007600870449095964, 0.0068866172805428505, 0.03563068434596062, 0.005737433210015297, 0.009398234076797962, 0.014507916755974293, 0.010777667164802551, 0.010808967053890228, 0.023530179634690285, 0.00968457106500864, 0.014197777025401592, 0.007808989845216274, 0.03142949193716049, 0.008420402184128761, 0.008461970835924149, 0.009274992160499096, 0.03104676865041256, 0.0091162184253335]


Top-k source tokens:

['self', 'obj', 'kwargs', 'obj', 'obj', 'context', 'context', '**kwargs', 'obj', 'current_user']


Top-k attention probs:

[0.050500884652137756, 0.04000724479556084, 0.03563068434596062, 0.03142949193716049, 0.031069766730070114, 0.03104676865041256, 0.02794318087399006, 0.026908494532108307, 0.025438761338591576, 0.024884695187211037]
