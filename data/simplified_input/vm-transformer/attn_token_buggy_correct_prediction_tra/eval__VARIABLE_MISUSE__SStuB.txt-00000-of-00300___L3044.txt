
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_jobs'", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"], "error_location": [62], "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 79, 102, 11, 43], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "saltstack/salt/salt/netapi/rest_tornado/saltnado.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3044, "results": {"model": "transformer", "prob": {"loc": [[0.001605027704499662, 3.120051417226932e-08, 1.7175418032255862e-10, 5.883974973919237e-10, 3.0891730840032494e-10, 1.1999898852366186e-09, 1.5520604246255232e-10, 2.99505475975792e-10, 1.6709336692066756e-10, 3.9982361865753546e-10, 2.2380885339456924e-11, 2.8627708203998736e-08, 1.8694838732624675e-10, 5.6402531950494605e-11, 2.145528373020955e-11, 2.5215730545258275e-11, 3.285823002574517e-11, 3.412651064516048e-11, 2.982530333817124e-10, 4.486803983905219e-11, 5.5867092202399604e-11, 4.6561174360526536e-10, 7.565469917203416e-10, 1.4392828262543844e-08, 2.2431026480695948e-10, 2.8179316519105768e-11, 2.2209437067211013e-10, 6.498300231250198e-10, 1.3239695451083833e-10, 2.2487142703475627e-10, 7.715211108871856e-11, 4.2447323433947304e-11, 1.3219988992396736e-10, 1.0411935202903067e-10, 6.172704014595354e-11, 8.107868820772524e-10, 1.557829847342873e-07, 1.3111737251492173e-09, 5.224340404730299e-10, 8.207631796430803e-11, 1.6513343470414554e-10, 2.4575541601734585e-10, 1.1174935976576705e-10, 4.3029271182604134e-05, 1.4387714353247816e-09, 1.2288640105495574e-09, 5.072729458710512e-10, 2.88363910527778e-08, 4.689352239850564e-10, 2.2103786856408902e-10, 4.962180666367999e-10, 2.8431157872432777e-08, 3.440045759361965e-08, 3.774569101722136e-09, 2.627584261283289e-10, 1.6851001705120439e-09, 5.181726714376111e-10, 3.7062832802803314e-08, 5.517371559626838e-10, 6.942174057833483e-10, 4.1588404942061175e-10, 2.7558288984153023e-10, 0.9983514547348022, 8.458069800099111e-10, 1.1887951734124158e-09, 1.637984414770699e-09, 6.241134831164175e-10, 1.91171434238413e-08, 1.2029643947641944e-09, 1.544218530824537e-09, 5.486811560651006e-10, 1.0875377681740517e-10, 4.2067721528482593e-10, 6.025865362246918e-10, 5.486173182411846e-10, 1.2911037516882828e-10, 4.6017314958568534e-10, 1.0067836564431332e-09, 5.687411097632378e-10, 8.294610154280235e-08, 6.603353419620817e-10, 2.2577005542867568e-10, 4.777365170127723e-10, 4.2781591602647495e-09, 3.3770160001722616e-09, 1.5095750205418312e-09, 2.689013456347311e-10, 9.310088810998707e-10, 4.2901035501863305e-10, 1.1487444773194966e-08, 2.6909530159713313e-10, 4.738343051258198e-10, 3.2690921081268698e-09, 2.409074051357152e-10, 1.164944407605617e-08, 3.639921974940563e-10, 7.191892636981834e-10, 4.231348327277118e-10, 1.4389464619846137e-10, 3.6152483784412937e-10, 3.6198161135203577e-10, 2.1771892622091116e-10, 3.4483127464568497e-10, 4.5241707602450276e-10, 1.317915082621468e-10, 1.056316367709087e-09, 1.0815730533408896e-08]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001272360241273418, 0.0, 0.05329909175634384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.690844212338561e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.593928679241799e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9465637803077698, 0.0, 0.0, 0.0, 2.2767345342344925e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3137986343281227e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.706112453182868e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.523976132186363e-07, 0.0, 0.0, 0.0, 0.0]], "target": [0.9998628497123718]}, "loss": [0.0016499252524226904, 0.00013715968816541135], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', '@', 'tornado', '.', 'web', '.', 'asynchronous', '#NEWLINE#', 'def get(', 'self', ',', 'jid', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', '"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - \'20121130104633606931\':\\n                Arguments:\\n                - \'3\'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - \'3\'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: \'*\'\\n                Target-type: glob\\n                User: saltdev\\n                jid: \'20121130104633606931\'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        "', '#NEWLINE#', 'if', '(', 'not', 'self', '.', '_verify_auth', '(', ')', ')', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'redirect', '(', "'/login'", ')', '#NEWLINE#', 'return', '#NEWLINE#', '#UNINDENT#', 'if', 'jid', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'lowstate', '=', '[', '{', '#NEWLINE#', '#INDENT#', "'fun'", ':', "'jobs.list_job'", ',', '#NEWLINE#', "'jid'", ':', 'self', ',', '#NEWLINE#', "'client'", ':', "'runner'", ',', '#NEWLINE#', '#UNINDENT#', '}', ']', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'self', '.', 'lowstate', '=', '[', '{', '#NEWLINE#', '#INDENT#', "'fun'", ':', "'jobs.list_jobs'", ',', '#NEWLINE#', "'client'", ':', "'runner'", ',', '#NEWLINE#', '#UNINDENT#', '}', ']', '#NEWLINE#', '#UNINDENT#', 'self', '.', 'disbatch', '(', ')']


All attention probs:

[0.01671052724123001, 0.009988379664719105, 0.01903846114873886, 0.014166542328894138, 0.011072823777794838, 0.010626545175909996, 0.011227576062083244, 0.00958208367228508, 0.010112022049725056, 0.04696309566497803, 0.014270617626607418, 0.03522678092122078, 0.013456961140036583, 0.010147127322852612, 0.008934563025832176, 0.008241300471127033, 0.010065360926091671, 0.009245485998690128, 0.01052944827824831, 0.009806121699512005, 0.008902432397007942, 0.007048027589917183, 0.006295155268162489, 0.021872537210583687, 0.004911427851766348, 0.005137165542691946, 0.006026085931807756, 0.0045026978477835655, 0.004101908300071955, 0.006050999742001295, 0.006009506527334452, 0.005845312960445881, 0.020914146676659584, 0.004078111611306667, 0.00493007292971015, 0.005046529695391655, 0.009285285137593746, 0.004548574797809124, 0.007548459339886904, 0.005042137112468481, 0.0061890315264463425, 0.006569921970367432, 0.009611459448933601, 0.03892502188682556, 0.005225576926022768, 0.005731398239731789, 0.005386854521930218, 0.016121676191687584, 0.003893771208822727, 0.006869951728731394, 0.004108474589884281, 0.004077831748872995, 0.004695679992437363, 0.004914534278213978, 0.004770438652485609, 0.006395839154720306, 0.004656325560063124, 0.006346771493554115, 0.0036170624662190676, 0.0051140799187123775, 0.008273262530565262, 0.004885934293270111, 0.0734296664595604, 0.0038292687386274338, 0.0052957674488425255, 0.008476555347442627, 0.006159411743283272, 0.006279348861426115, 0.004904845263808966, 0.006578689906746149, 0.006554568652063608, 0.009043723344802856, 0.005066750105470419, 0.0067018186673521996, 0.006225391291081905, 0.012859335169196129, 0.005314838606864214, 0.005502490326762199, 0.005342543125152588, 0.01480035949498415, 0.003149918280541897, 0.005787522066384554, 0.0046146041713654995, 0.004320750944316387, 0.005104397889226675, 0.006100788246840239, 0.0062599629163742065, 0.008986000902950764, 0.006353956181555986, 0.007072224281728268, 0.003596785245463252, 0.005720058456063271, 0.0092745590955019, 0.005473485216498375, 0.007550303358584642, 0.006288948934525251, 0.008440055884420872, 0.009882563725113869, 0.011036844924092293, 0.008796813897788525, 0.009096495807170868, 0.008431477472186089, 0.017890574410557747, 0.007510094437748194, 0.010718819685280323, 0.008219005540013313, 0.008068318478763103]


Top-k source tokens:

['self', 'self', 'jid', 'jid', 'self', 'self', 'tornado', 'self', '#NEWLINE#', 'self']


Top-k attention probs:

[0.0734296664595604, 0.04696309566497803, 0.03892502188682556, 0.03522678092122078, 0.021872537210583687, 0.020914146676659584, 0.01903846114873886, 0.017890574410557747, 0.01671052724123001, 0.016121676191687584]
