
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "count", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'COUNT'", ")", ",", "self", "]", ")", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"], "error_location": [74], "repair_targets": [14, 57], "repair_candidates": [2, 74, 80, 10, 33, 50, 14, 57, 23, 40, 64, 87, 6, 28, 4, 26], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Alephbet/gimel/vendor/redis/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3230, "results": {"model": "transformer", "prob": {"loc": [[0.0005198564613237977, 3.1110993781169327e-09, 1.742846644781082e-09, 1.1178492853591848e-10, 4.4396375464828e-09, 1.0931546640113865e-10, 1.002153116047566e-08, 2.63976535075372e-10, 5.005573733285473e-10, 7.72161223849821e-11, 1.8451190575419218e-09, 2.1273464934079556e-10, 9.297500963567629e-11, 7.877903190900426e-11, 3.423980388106429e-08, 3.593255692990738e-10, 3.129219106057235e-10, 1.23065738155681e-10, 3.0631042147177823e-10, 7.371925292432024e-10, 3.221587996371511e-10, 8.597867418025373e-10, 3.3103633723108317e-10, 1.957865425339378e-09, 2.09321088240344e-10, 1.0828147267716304e-09, 3.0990858590485004e-07, 3.678411186758268e-10, 3.538042108175432e-07, 8.391541350682985e-10, 6.818580144951625e-10, 7.489759368262128e-10, 2.584415181861033e-10, 2.412575213384116e-06, 3.896917510903819e-10, 4.223404681535925e-10, 4.3880790667749636e-10, 6.60554333453689e-10, 1.0743369527332902e-09, 6.511238215267667e-10, 1.5000568565071148e-09, 3.0220814739578827e-10, 1.9529709793797423e-10, 3.3117733000409544e-09, 1.1105991681858995e-08, 4.2244360787258017e-10, 8.462733624980956e-09, 5.786340651070532e-08, 7.1159194092729194e-09, 1.7434085286538448e-09, 1.790513124433346e-05, 3.9638172744105304e-09, 5.739315245278931e-09, 3.6782725754136436e-09, 3.321984243243037e-09, 1.0589666921134722e-09, 7.573248694825452e-10, 7.376923895208165e-05, 3.7873038039037965e-09, 2.273308652434025e-09, 1.2879434185819605e-09, 1.1901180485551777e-08, 8.889310620929791e-09, 3.868865672274069e-09, 4.2335510097579743e-10, 5.193628305200093e-10, 4.621106275415343e-10, 3.317855545859061e-09, 1.3010398980384252e-08, 4.988627289037595e-10, 6.1404401563436295e-09, 5.981245720931838e-08, 1.3965142375838013e-09, 1.4477423704306602e-09, 0.9993817806243896, 2.0485013685345166e-09, 1.134988458773023e-08, 5.2999671318332275e-09, 5.014424875326995e-09, 6.526506557413825e-10, 7.264032708675927e-10, 3.1873970129936424e-10, 2.589507497319232e-10, 1.7923050821266884e-09, 5.009857773075055e-08, 1.340158983786921e-09, 1.5277914489075783e-09, 3.1480049074161798e-06, 6.142243158535621e-09]], "pointer": [[0.0, 0.0, 4.2204542296531145e-06, 0.0, 0.0038572195917367935, 0.0, 0.004497638437896967, 0.0, 0.0, 0.0, 0.00015777169028297067, 0.0, 0.0, 0.0, 0.0027546805795282125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003086520009674132, 0.0, 0.0, 0.0030157987494021654, 0.0, 0.00045477767707780004, 0.0, 0.0, 0.0, 0.0, 3.5056953493040055e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004354372213128954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009537172736600041, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9835126996040344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1467910553619731e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1996862642481574e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 9.057297489789562e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.65893651330407e-07, 0.0]], "target": [0.9862673878669739]}, "loss": [0.0006183857913129032, 0.013827776536345482], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def hscan(', 'self', ',', 'name', ',', 'cursor', '=', '0', ',', 'match', '=', 'None', ',', 'count', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", '#NEWLINE#', 'pieces', '=', '[', 'name', ',', 'cursor', ']', '#NEWLINE#', 'if', '(', 'match', 'is not', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'pieces', '.', 'extend', '(', '[', 'Token', '(', "'MATCH'", ')', ',', 'match', ']', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'count', 'is not', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'pieces', '.', 'extend', '(', '[', 'Token', '(', "'COUNT'", ')', ',', 'self', ']', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'self', '.', 'execute_command', '(', "'HSCAN'", ',', '*', 'pieces', ')']


All attention probs:

[0.015019671991467476, 0.01155632734298706, 0.05030127614736557, 0.015468327328562737, 0.02000543661415577, 0.011661216616630554, 0.02429261803627014, 0.010976456105709076, 0.01499198842793703, 0.012621027417480946, 0.03538721054792404, 0.012567880563437939, 0.009792245924472809, 0.009879538789391518, 0.025754861533641815, 0.010751688852906227, 0.008432758040726185, 0.008078793063759804, 0.0073852245695889, 0.008544212207198143, 0.007731998339295387, 0.007894248701632023, 0.008003638125956059, 0.02129744365811348, 0.006319501902908087, 0.005936541128903627, 0.026838194578886032, 0.00551486574113369, 0.021166369318962097, 0.005234716925770044, 0.006721450947225094, 0.007748239673674107, 0.0056015742011368275, 0.022183364257216454, 0.006295003462582827, 0.006729450076818466, 0.006806231569498777, 0.006824182812124491, 0.008324835449457169, 0.007677855901420116, 0.012256610207259655, 0.003969984594732523, 0.0074962107464671135, 0.006826089229434729, 0.005613662302494049, 0.009457462467253208, 0.0064643253572285175, 0.005807432811707258, 0.004649283830076456, 0.005277393385767937, 0.020687643438577652, 0.004145964048802853, 0.00412654597312212, 0.005805728957056999, 0.006182585842907429, 0.00752806942909956, 0.004675743635743856, 0.04282980039715767, 0.005801812745630741, 0.005324028432369232, 0.005734048318117857, 0.006271482910960913, 0.006491128355264664, 0.007713860832154751, 0.018680643290281296, 0.007506141904741526, 0.008842416107654572, 0.007998732849955559, 0.007380180060863495, 0.006763673387467861, 0.006690255831927061, 0.008494057692587376, 0.004899812396615744, 0.0053419978357851505, 0.07274583727121353, 0.004715390969067812, 0.004257797729223967, 0.006784883327782154, 0.006172293331474066, 0.00978308729827404, 0.013326091691851616, 0.0032778563909232616, 0.006211852189153433, 0.006777716800570488, 0.009249653667211533, 0.00566477095708251, 0.006531503517180681, 0.028707124292850494, 0.007740861736238003]


Top-k source tokens:

['self', 'self', 'count', 'match', 'pieces', 'name', 'count', 'cursor', 'match', 'pieces']


Top-k attention probs:

[0.07274583727121353, 0.05030127614736557, 0.04282980039715767, 0.03538721054792404, 0.028707124292850494, 0.026838194578886032, 0.025754861533641815, 0.02429261803627014, 0.022183364257216454, 0.02129744365811348]
