
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "query_params", "(", "'field_data'", ",", "'fielddata'", ",", "'fields'", ",", "'filter'", ",", "'filter_cache'", ",", "'filter_keys'", ",", "'id'", ",", "'id_cache'", ",", "'allow_no_indices'", ",", "'expand_wildcards'", ",", "'ignore_indices'", ",", "'ignore_unavailable'", ",", "'query_cache'", ",", "'recycler'", ")", "#NEWLINE#", "def clear_cache(", "self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"], "error_location": [78], "repair_targets": [52], "repair_candidates": [34, 55, 78, 52, 36, 65, 50, 40, 72, 74], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "KunihikoKido/sublime-elasticsearch-client/lib/elasticsearch/client/indices.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3053, "results": {"model": "transformer", "prob": {"loc": [[0.0003088788071181625, 1.0248509596522126e-08, 1.245930962567865e-11, 1.817663658476576e-10, 2.0407754652840282e-10, 4.2530635263604566e-11, 3.296023176613261e-11, 3.4660094239136185e-11, 3.4244142244066467e-11, 2.536444665413029e-11, 5.624837401407845e-11, 1.5747070314375833e-11, 4.7431690519683656e-11, 1.0906323587300815e-11, 7.259239737100742e-11, 1.1716388276239442e-11, 2.4680139876220863e-11, 1.3394476500172559e-11, 1.464369181469749e-10, 1.8520849784375848e-11, 1.1712260328256008e-10, 1.7714735928153758e-11, 1.131859016234582e-11, 1.60807929472373e-11, 1.7742235458584332e-10, 2.208346353005375e-11, 1.670032029332802e-10, 2.2597458626538725e-11, 4.935750697043773e-10, 1.4964867886546607e-11, 2.6634516814283415e-09, 1.493313112055361e-11, 3.6241114276247544e-11, 6.89524770614014e-10, 1.7520799255876796e-09, 8.824384278849351e-11, 6.416029929567912e-10, 1.900675172805677e-09, 2.4295251921380157e-10, 4.2193460531025906e-11, 1.7208012792480076e-10, 2.7594275753273223e-09, 4.792990448976298e-10, 2.25368109590951e-11, 3.837944406726024e-10, 2.6501537075951376e-10, 2.1814082484805652e-10, 1.379079073160483e-09, 3.439924178838538e-10, 5.3042206044073836e-11, 1.6121848744887757e-08, 5.815957160315577e-10, 6.424485832212667e-08, 3.5543876869548185e-11, 1.2630781143219139e-10, 1.4616973409431466e-08, 2.2791087073148475e-10, 8.339709998972378e-12, 2.3231604140416806e-10, 5.1924861979579795e-12, 5.677938119674764e-10, 4.3942911531758e-08, 1.571967972457955e-10, 4.8153616510893116e-12, 4.731560698800763e-10, 8.87743317434797e-06, 2.6802374208934054e-10, 1.2804957982837095e-08, 5.0420351227487e-10, 1.368463387052543e-07, 2.803554610686376e-10, 2.0386202448374746e-10, 2.739237447979548e-10, 3.436939899348346e-10, 1.5754087144159712e-05, 1.3916256591528509e-08, 7.900440301966682e-09, 1.727366694126431e-08, 0.9996662139892578]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.08757829922979e-07, 0.0, 0.00027449612389318645, 0.0, 0.0, 0.0, 1.628506106499117e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001939599751494825, 0.0, 0.9993407130241394, 0.0, 0.0, 4.191776525885871e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016424915520474315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4983982055127854e-07, 0.0, 9.370310181111563e-06, 0.0, 0.0, 0.0, 1.1680292999471931e-07]], "target": [0.9993407130241394]}, "loss": [0.00033384948619641364, 0.0006595043814741075], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', '@', 'query_params', '(', "'field_data'", ',', "'fielddata'", ',', "'fields'", ',', "'filter'", ',', "'filter_cache'", ',', "'filter_keys'", ',', "'id'", ',', "'id_cache'", ',', "'allow_no_indices'", ',', "'expand_wildcards'", ',', "'ignore_indices'", ',', "'ignore_unavailable'", ',', "'query_cache'", ',', "'recycler'", ')', '#NEWLINE#', 'def clear_cache(', 'self', ',', 'index', '=', 'None', ',', 'params', '=', 'None', ')', ':', '#NEWLINE#', '#INDENT#', "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", '#NEWLINE#', '(', '_', ',', 'data', ')', '=', 'self', '.', 'transport', '.', 'perform_request', '(', "'POST'", ',', '_make_path', '(', 'index', ',', "'_cache'", ',', "'clear'", ')', ',', 'params', '=', 'params', ')', '#NEWLINE#', 'return', 'self']


All attention probs:

[0.016678906977176666, 0.013652283698320389, 0.019205572083592415, 0.019679643213748932, 0.01454823836684227, 0.012589843012392521, 0.011742775328457355, 0.011761804111301899, 0.017986491322517395, 0.012290791608393192, 0.019361238926649094, 0.012787914834916592, 0.015780488029122353, 0.010449378751218319, 0.014485884457826614, 0.009220239706337452, 0.009537097066640854, 0.008211102336645126, 0.017142701894044876, 0.008615031838417053, 0.013032885268330574, 0.008091118186712265, 0.006059873383492231, 0.007482545915991068, 0.009039669297635555, 0.006787500344216824, 0.00682098651304841, 0.0061055757105350494, 0.013256940059363842, 0.006090333219617605, 0.012023519724607468, 0.005978408269584179, 0.009560774080455303, 0.014683295972645283, 0.04468115046620369, 0.008389527909457684, 0.021331675350666046, 0.007976563647389412, 0.006419166922569275, 0.0072386679239571095, 0.01736726425588131, 0.007658498361706734, 0.00889789592474699, 0.006100631318986416, 0.006089104805141687, 0.007469150237739086, 0.006871961988508701, 0.007835549302399158, 0.007810831069946289, 0.00741335516795516, 0.02488848567008972, 0.007912719622254372, 0.03292926028370857, 0.006603672634810209, 0.0061319624073803425, 0.025185827165842056, 0.0032938062213361263, 0.004326524678617716, 0.004129982087761164, 0.0068968008272349834, 0.006854242645204067, 0.008409282192587852, 0.006561300717294216, 0.009525283239781857, 0.009134568274021149, 0.03367987275123596, 0.011947856284677982, 0.007342879194766283, 0.008884149603545666, 0.010248396545648575, 0.00677492655813694, 0.00857536494731903, 0.020984305068850517, 0.009428665041923523, 0.03319729119539261, 0.006240610498934984, 0.010161366313695908, 0.011349271982908249, 0.07810948044061661]


Top-k source tokens:

['self', 'self', 'index', 'params', 'data', 'self', '_', 'index', 'params', '(']


Top-k attention probs:

[0.07810948044061661, 0.04468115046620369, 0.03367987275123596, 0.03319729119539261, 0.03292926028370857, 0.025185827165842056, 0.02488848567008972, 0.021331675350666046, 0.020984305068850517, 0.019679643213748932]
