
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def decrypt(", "self", ",", "ciphertext", ")", ":", "#NEWLINE#", "#INDENT#", "'Decrypt data with the key and the parameters set at initialization.\\n        \\n        The cipher object is stateful; decryption of a long block\\n        of data can be broken up in two or more calls to `decrypt()`.\\n        That is, the statement:\\n            \\n            >>> c.decrypt(a) + c.decrypt(b)\\n\\n        is always equivalent to:\\n\\n             >>> c.decrypt(a+b)\\n\\n        That also means that you cannot reuse an object for encrypting\\n        or decrypting other data with the same key.\\n\\n        This function does not perform any padding.\\n       \\n         - For `MODE_ECB`, `MODE_CBC`, and `MODE_OFB`, *ciphertext* length\\n           (in bytes) must be a multiple of *block_size*.\\n\\n         - For `MODE_CFB`, *ciphertext* length (in bytes) must be a multiple\\n           of *segment_size*/8.\\n\\n         - For `MODE_CTR`, *ciphertext* can be of any length.\\n\\n         - For `MODE_OPENPGP`, *plaintext* must be a multiple of *block_size*,\\n           unless it is the last chunk of the message.\\n\\n        :Parameters:\\n          ciphertext : byte string\\n            The piece of data to decrypt.\\n        :Return: the decrypted data (byte string, as long as *ciphertext*).\\n        '", "#NEWLINE#", "if", "(", "res", ".", "mode", "==", "MODE_OPENPGP", ")", ":", "#NEWLINE#", "#INDENT#", "padding_length", "=", "(", "(", "self", ".", "block_size", "-", "(", "len", "(", "ciphertext", ")", "%", "self", ".", "block_size", ")", ")", "%", "self", ".", "block_size", ")", "#NEWLINE#", "if", "(", "padding_length", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_done_last_block", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Only the last chunk is allowed to have length not multiple of %d bytes'", ",", "self", ".", "block_size", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "_done_last_block", "=", "True", "#NEWLINE#", "padded", "=", "(", "ciphertext", "+", "(", "b", "(", "'\\x00'", ")", "*", "padding_length", ")", ")", "#NEWLINE#", "res", "=", "self", ".", "_cipher", ".", "decrypt", "(", "padded", ")", "[", ":", "len", "(", "ciphertext", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "res", "=", "self", ".", "_cipher", ".", "decrypt", "(", "ciphertext", ")", "#NEWLINE#", "#UNINDENT#", "return", "res", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "_cipher", ".", "decrypt", "(", "ciphertext", ")"], "error_location": [13], "repair_targets": [2, 26, 36, 42, 57, 68, 74, 97, 120, 135], "repair_candidates": [22, 49, 91, 13, 95, 118, 131, 4, 33, 83, 109, 126, 141, 2, 26, 36, 42, 57, 68, 74, 97, 120, 135, 80, 103], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "cloudera/hue/desktop/core/ext-py/pycrypto-2.6.1/lib/Crypto/Cipher/blockalgo.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 3719, "results": {"model": "transformer", "prob": {"loc": [[9.672066516941413e-05, 4.791575469731413e-10, 2.7879933028884807e-08, 1.0834817418259313e-11, 2.52651610743726e-09, 1.3669507366309563e-11, 2.6971393868313598e-11, 1.597718832235806e-11, 1.0945987172217286e-11, 3.0555907803986315e-10, 2.063008618102824e-11, 1.4413828637593884e-11, 1.2251824554887492e-10, 0.9998821020126343, 2.8561410181371372e-11, 1.1458274329356755e-09, 4.34833835605275e-11, 1.933488924521498e-09, 1.8340346602530033e-11, 3.5077701160401986e-11, 1.3321792453890868e-11, 6.845879332167959e-12, 5.506408662370177e-10, 5.312941059321119e-11, 4.248629920100555e-11, 1.9180950161512555e-09, 2.1474179447977804e-06, 3.778514306995717e-11, 3.333031333568881e-12, 1.3372937306133093e-11, 1.9125655920104734e-11, 2.3585206704312967e-11, 1.7276785557740482e-10, 1.55530116785485e-07, 7.21925123847722e-12, 1.3564940837262895e-11, 5.479820401887991e-07, 1.8584980776559235e-11, 1.348412267260235e-11, 5.3554889689610974e-11, 1.0488293393506876e-11, 3.135266005149795e-11, 8.425367923337035e-07, 2.651872645087483e-11, 1.1566957461295324e-11, 2.3181498387536692e-11, 3.703403902988178e-11, 2.1333690022884433e-11, 3.025802525202792e-11, 1.8138418056423689e-07, 2.0747610574023412e-10, 3.501648970782867e-10, 4.2537952327226236e-11, 1.0782623405258818e-10, 3.6892183752357255e-11, 1.3177969999944583e-11, 2.946635990763724e-11, 1.9654434879612381e-07, 1.3841855613094811e-11, 1.865539840661956e-12, 1.2960983675203153e-10, 4.0187568550731356e-11, 1.6683730785782558e-11, 1.789783599104311e-11, 1.0846500780870016e-11, 4.422243127244485e-11, 1.3081412342241805e-10, 1.2465614478152087e-11, 6.223930881787965e-08, 4.0428591030483574e-11, 4.1963779673359625e-11, 5.631140345685459e-11, 4.365890288182683e-11, 1.9527778699623966e-11, 6.081080639042113e-10, 7.268992699427379e-12, 3.1516204576642615e-12, 1.399020760350922e-10, 1.6571983785240718e-09, 5.3697372937033805e-11, 2.359691886333337e-10, 8.255674789625633e-12, 1.0180315618280034e-10, 2.6897741918219253e-06, 3.170880225056294e-11, 3.01607593067299e-11, 2.6962395857643706e-11, 3.2298411167808183e-10, 2.2955275458258484e-09, 1.1046471029563243e-11, 1.6357512566678167e-11, 1.982252342713764e-06, 2.174588148440293e-10, 1.178983716210169e-10, 5.117656298736506e-11, 1.0072930267668312e-09, 1.3219684895371397e-11, 6.437512301005199e-09, 2.3122545544929096e-11, 4.5380994968813315e-12, 2.9570630666331255e-11, 4.590472533344547e-12, 1.3066300819097876e-10, 4.9407589131078566e-08, 5.46914284693667e-11, 6.680974523609606e-11, 4.777501311226118e-11, 1.2569757734670617e-11, 8.762632980330309e-11, 8.197658644348849e-06, 1.0954054330269969e-10, 1.0367175173886523e-10, 1.5350475057740454e-10, 5.0145960300840287e-11, 5.948883746720313e-11, 1.0321853094463762e-10, 5.5521871822339364e-11, 2.4345673046988203e-11, 2.888977390647085e-10, 2.2972335839144264e-11, 2.467614201862034e-08, 2.3282794095469406e-11, 5.587422885477977e-12, 3.136043508211728e-11, 4.263995840442236e-12, 3.0515895366178825e-10, 1.6141747209985624e-06, 1.598326193619215e-10, 9.765174779907682e-11, 7.208948715753394e-11, 5.259420069597676e-12, 2.2228880069974366e-08, 2.343642779845112e-10, 1.7129068996535324e-10, 1.1322869725161055e-11, 1.0320190035884025e-08, 1.8645480992507402e-11, 4.059717405996421e-12, 2.7720286135957117e-11, 4.2690651361199095e-12, 5.490360249771342e-11, 2.3920244984765304e-06, 1.1119958426286658e-10]], "pointer": [[0.0, 0.0, 0.5769448280334473, 0.0, 0.0003017190902028233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3632765189240956e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2164573490736075e-06, 0.0, 0.0, 0.0, 0.2593851089477539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.321721467524185e-06, 0.0, 0.0, 0.050724852830171585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06480741500854492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8223539061400515e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03179224207997322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.918343231314793e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00013703436707146466, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7955387647816679e-06, 0.0, 0.0, 4.68486774707344e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.849827620200813e-07, 0.0, 0.0, 0.0, 1.0966135732815019e-06, 0.0, 0.003359635593369603, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3646350655326387e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 9.918309160639183e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.433047327116583e-08, 0.0, 0.006261039990931749, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0088671160701779e-06, 0.0, 0.0, 0.0, 0.0, 1.558889017871934e-08, 0.0, 0.0, 0.0, 0.006216017063707113, 0.0, 0.0, 0.0, 0.0, 0.0, 4.4525168618747557e-07, 0.0]], "target": [0.9996873140335083]}, "loss": [0.00011789103882620111, 0.00031273486092686653], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def decrypt(', 'self', ',', 'ciphertext', ')', ':', '#NEWLINE#', '#INDENT#', "'Decrypt data with the key and the parameters set at initialization.\\n        \\n        The cipher object is stateful; decryption of a long block\\n        of data can be broken up in two or more calls to `decrypt()`.\\n        That is, the statement:\\n            \\n            >>> c.decrypt(a) + c.decrypt(b)\\n\\n        is always equivalent to:\\n\\n             >>> c.decrypt(a+b)\\n\\n        That also means that you cannot reuse an object for encrypting\\n        or decrypting other data with the same key.\\n\\n        This function does not perform any padding.\\n       \\n         - For `MODE_ECB`, `MODE_CBC`, and `MODE_OFB`, *ciphertext* length\\n           (in bytes) must be a multiple of *block_size*.\\n\\n         - For `MODE_CFB`, *ciphertext* length (in bytes) must be a multiple\\n           of *segment_size*/8.\\n\\n         - For `MODE_CTR`, *ciphertext* can be of any length.\\n\\n         - For `MODE_OPENPGP`, *plaintext* must be a multiple of *block_size*,\\n           unless it is the last chunk of the message.\\n\\n        :Parameters:\\n          ciphertext : byte string\\n            The piece of data to decrypt.\\n        :Return: the decrypted data (byte string, as long as *ciphertext*).\\n        '", '#NEWLINE#', 'if', '(', 'res', '.', 'mode', '==', 'MODE_OPENPGP', ')', ':', '#NEWLINE#', '#INDENT#', 'padding_length', '=', '(', '(', 'self', '.', 'block_size', '-', '(', 'len', '(', 'ciphertext', ')', '%', 'self', '.', 'block_size', ')', ')', '%', 'self', '.', 'block_size', ')', '#NEWLINE#', 'if', '(', 'padding_length', '>', '0', ')', ':', '#NEWLINE#', '#INDENT#', 'if', 'self', '.', '_done_last_block', ':', '#NEWLINE#', '#INDENT#', 'raise', 'ValueError', '(', "'Only the last chunk is allowed to have length not multiple of %d bytes'", ',', 'self', '.', 'block_size', ')', '#NEWLINE#', '#UNINDENT#', 'self', '.', '_done_last_block', '=', 'True', '#NEWLINE#', 'padded', '=', '(', 'ciphertext', '+', '(', 'b', '(', "'\\x00'", ')', '*', 'padding_length', ')', ')', '#NEWLINE#', 'res', '=', 'self', '.', '_cipher', '.', 'decrypt', '(', 'padded', ')', '[', ':', 'len', '(', 'ciphertext', ')', ']', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'res', '=', 'self', '.', '_cipher', '.', 'decrypt', '(', 'ciphertext', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'res', '#NEWLINE#', '#UNINDENT#', 'return', 'self', '.', '_cipher', '.', 'decrypt', '(', 'ciphertext', ')']


All attention probs:

[0.0097958380356431, 0.0092424051836133, 0.04271034523844719, 0.013751552440226078, 0.024406855925917625, 0.012949461117386818, 0.008705628104507923, 0.00817621685564518, 0.007529945578426123, 0.012115811929106712, 0.00955401360988617, 0.009792172349989414, 0.007875786162912846, 0.05273490771651268, 0.005830235779285431, 0.0071320440620183945, 0.005967059172689915, 0.012674184516072273, 0.006202310789376497, 0.0068525224924087524, 0.007457464002072811, 0.006916049402207136, 0.01807808317244053, 0.005115206819027662, 0.004491270519793034, 0.005262282676994801, 0.016294026747345924, 0.0033093420788645744, 0.004088534042239189, 0.004219799302518368, 0.003954648971557617, 0.0040262313559651375, 0.0042635975405573845, 0.017612263560295105, 0.003400471992790699, 0.003747665323317051, 0.013976845890283585, 0.0034681472461670637, 0.004011183045804501, 0.003380612237378955, 0.003363716648891568, 0.0034290470648556948, 0.018477091565728188, 0.0031209192238748074, 0.003717245766893029, 0.002616340760141611, 0.005624006036669016, 0.004004418384283781, 0.0033911741338670254, 0.01255494449287653, 0.0034032973926514387, 0.004729324486106634, 0.002687997417524457, 0.0027680550701916218, 0.003290260210633278, 0.0033191200345754623, 0.00355297583155334, 0.011615508235991001, 0.0022190811578184366, 0.0032270639203488827, 0.003257171716541052, 0.0034033115953207016, 0.0034629576839506626, 0.005182803142815828, 0.004097749013453722, 0.004139579366892576, 0.004548335447907448, 0.003979352302849293, 0.014818189665675163, 0.0028316210955381393, 0.003784371307119727, 0.0031269739847630262, 0.0055733551271259785, 0.004850687459111214, 0.008581637404859066, 0.0022209356538951397, 0.004219042602926493, 0.0026961283292621374, 0.004695559851825237, 0.0051934379152953625, 0.012601345777511597, 0.003773262957111001, 0.002735172864049673, 0.015834549441933632, 0.003018096089363098, 0.0030019660480320454, 0.006394064985215664, 0.004832172300666571, 0.008546571247279644, 0.0029585235752165318, 0.0031087647657841444, 0.016337910667061806, 0.002733216155320406, 0.002689566696062684, 0.004977475386112928, 0.011524144560098648, 0.007805033586919308, 0.010340397246181965, 0.002928232541307807, 0.0034774786327034235, 0.0025002940092235804, 0.004161172546446323, 0.004350304137915373, 0.017353547737002373, 0.0037807878106832504, 0.003010135143995285, 0.0034451724495738745, 0.0037591797299683094, 0.0029682356398552656, 0.016959238797426224, 0.0029384822119027376, 0.0035014667082577944, 0.004679255653172731, 0.004310197662562132, 0.009641214273869991, 0.003617306239902973, 0.0038310824893414974, 0.003506464883685112, 0.011151447892189026, 0.0036643699277192354, 0.008961789309978485, 0.0024648522958159447, 0.003515006508678198, 0.003501786384731531, 0.004188695922493935, 0.006053675431758165, 0.014870229177176952, 0.006433647125959396, 0.007362320087850094, 0.006550070829689503, 0.008840419352054596, 0.013954698108136654, 0.005309421103447676, 0.004441259894520044, 0.006528896279633045, 0.008277708664536476, 0.0021388924214988947, 0.004378513433039188, 0.002632359741255641, 0.004287685267627239, 0.004078641999512911, 0.01747315004467964, 0.004161166958510876]


Top-k source tokens:

['res', 'self', 'ciphertext', 'self', 'padding_length', 'ciphertext', 'ciphertext', 'padded', 'ciphertext', 'padding_length']


Top-k attention probs:

[0.05273490771651268, 0.04271034523844719, 0.024406855925917625, 0.018477091565728188, 0.01807808317244053, 0.017612263560295105, 0.01747315004467964, 0.017353547737002373, 0.016959238797426224, 0.016337910667061806]
