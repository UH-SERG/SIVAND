
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "_save_macros", "(", ")", "#NEWLINE#", "self", ".", "evaluate", "=", "False"], "error_location": [15], "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 28, 4], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Calysto/metakernel/metakernel/magics/macro_magic.py", "license": "bsd-3-clause", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1728, "results": {"model": "transformer", "prob": {"loc": [[0.0005239707534201443, 3.385950719803077e-08, 5.6558255856486994e-09, 3.280727356447244e-10, 1.613529860833296e-07, 2.7542682023984355e-10, 7.16287085200662e-10, 1.0149509011014857e-09, 8.660464012599789e-10, 4.667320974149902e-10, 7.309203797767339e-10, 1.0782732928760197e-08, 3.6639807854399464e-10, 1.1689808843140526e-10, 1.1523121346002085e-09, 0.9993688464164734, 1.3994712333431636e-10, 2.842993895857404e-10, 0.00010666211164789274, 1.3969944090419517e-09, 2.3935570192534783e-10, 6.26191876129667e-10, 8.994351374802534e-10, 2.9048174976509245e-10, 6.78435640999453e-11, 7.030122262108307e-09, 2.7885065367883044e-09, 9.427041369747258e-10, 2.91435320320943e-09, 3.4361205547561724e-10, 6.942170449608653e-11, 1.0201527622655249e-08, 2.3505911883603403e-07]], "pointer": [[0.0, 0.0, 4.829271347261965e-05, 0.0, 0.9999510049819946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.774776840577033e-08, 0.0, 0.0, 0.0, 3.741813543456374e-07, 0.0, 0.0, 6.586810030739798e-08, 0.0, 0.0, 0.0, 6.093070936685763e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 7.25809243817821e-08, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999510049819946]}, "loss": [0.0006312523037195206, 4.8996218538377434e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def cell_macro(', 'self', ',', 'name', ')', ':', '#NEWLINE#', '#INDENT#', '\'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print "Ok!"\\n\\n            %macro test\\n            Ok!\\n        \'', '#NEWLINE#', 'self', '.', 'learned', '[', 'self', ']', '=', 'self', '.', 'code', '#NEWLINE#', 'self', '.', '_save_macros', '(', ')', '#NEWLINE#', 'self', '.', 'evaluate', '=', 'False']


All attention probs:

[0.032257456332445145, 0.020312873646616936, 0.09879693388938904, 0.029983485117554665, 0.07179254293441772, 0.027770981192588806, 0.022224491462111473, 0.023221969604492188, 0.02140168286859989, 0.022801870480179787, 0.025206681340932846, 0.05018695816397667, 0.014063866809010506, 0.02522336132824421, 0.014293527230620384, 0.10854602605104446, 0.013277645222842693, 0.0138166518881917, 0.0605638287961483, 0.008893649093806744, 0.012184816412627697, 0.018528776243329048, 0.03665053844451904, 0.011480492539703846, 0.014621829614043236, 0.0171553585678339, 0.012816058471798897, 0.020149188116192818, 0.0444423072040081, 0.014529888518154621, 0.024922356009483337, 0.03108666092157364, 0.03679526969790459]


Top-k source tokens:

['self', 'self', 'name', 'self', 'self', 'self', 'False', 'self', '#NEWLINE#', '=']


Top-k attention probs:

[0.10854602605104446, 0.09879693388938904, 0.07179254293441772, 0.0605638287961483, 0.05018695816397667, 0.0444423072040081, 0.03679526969790459, 0.03665053844451904, 0.032257456332445145, 0.03108666092157364]
