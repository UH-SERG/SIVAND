
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def std(", "x_gpu", ",", "ddof", "=", "0", ",", "axis", "=", "None", ",", "stream", "=", "None", ",", "keepdims", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Compute the standard deviation along the specified axis.\\n\\n    Returns the standard deviation of the array elements, a measure of the\\n    spread of a distribution. The standard deviation is computed for the\\n    flattened array by default, otherwise over the specified axis.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Array containing numbers whose std is desired.\\n    ddof : int (optional)\\n        \"Delta Degrees of Freedom\": the divisor used in computing the \\n        variance is ``N - ddof``, where ``N`` is the number of elements.\\n        Setting ``ddof = 1`` is equivalent to applying Bessel\\'s\\n        correction.\\n    axis : int (optional)\\n        Axis along which the std are computed. The default is to\\n        compute the std of the flattened array.\\n    stream : pycuda.driver.Stream (optional)\\n        Optional CUDA stream in which to perform this calculation\\n    keepdims : bool (optional, default False)\\n        If True, the axes which are reduced are left in the result as\\n        dimensions with size one.\\n\\n    Returns\\n    -------\\n    out : pycuda.gpuarray.GPUArray or float\\n        std of elements, or stds of elements along the desired axis.\\n    '", "#NEWLINE#", "def _inplace_pow(", "x_gpu", ",", "p", ",", "stream", ")", ":", "#NEWLINE#", "#INDENT#", "func", "=", "elementwise", ".", "get_pow_kernel", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "func", ".", "prepared_async_call", "(", "x_gpu", ".", "_grid", ",", "x_gpu", ".", "_block", ",", "stream", ",", "p", ",", "x_gpu", ".", "gpudata", ",", "x_gpu", ".", "gpudata", ",", "x_gpu", ".", "mem_size", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "axis", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "var", "(", "x_gpu", ",", "ddof", "=", "ddof", ",", "stream", "=", "stream", ",", "keepdims", "=", "keepdims", ")", "**", "0.5", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "out", "=", "var", "(", "x_gpu", ",", "ddof", "=", "ddof", ",", "axis", "=", "axis", ",", "stream", "=", "stream", ",", "keepdims", "=", "ddof", ")", "#NEWLINE#", "_inplace_pow", "(", "out", ",", "0.5", ",", "stream", ")", "#NEWLINE#", "#UNINDENT#", "return", "out"], "error_location": [132], "repair_targets": [16, 99, 101, 130], "repair_candidates": [2, 26, 41, 50, 54, 62, 66, 70, 89, 116, 8, 78, 122, 124, 4, 91, 93, 118, 120, 132, 135, 112, 137, 146, 16, 99, 101, 130, 12, 30, 58, 95, 97, 126, 128, 141], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "lebedov/scikit-cuda/skcuda/misc.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 500, "results": {"model": "transformer", "prob": {"loc": [[0.0053028082475066185, 2.106738961060728e-08, 5.200817554396053e-09, 7.292463299890528e-10, 9.799021150058707e-09, 1.335850985384468e-09, 2.2502932850443358e-09, 6.933569829392638e-10, 1.0467456235119244e-08, 1.7511667671499254e-09, 7.214090991247701e-10, 5.545189307731846e-10, 9.488357655129676e-09, 2.1404937822211423e-09, 1.4339600618029635e-09, 7.050431904964682e-10, 1.4795613623164172e-08, 1.9892774094643073e-09, 5.492885701841033e-09, 4.857123592216794e-10, 1.6264368740692703e-09, 2.417460898129775e-09, 1.071886801540245e-09, 1.3088994332832726e-09, 1.102399282970623e-09, 1.2158910545068125e-09, 1.8488691466700402e-07, 8.505790516366574e-10, 8.020386133011925e-08, 9.95099447287373e-10, 2.2778594654937478e-07, 5.414947934490044e-10, 1.689659745451877e-09, 1.9469874601441006e-09, 1.6352117437890001e-09, 2.6765960114971676e-08, 1.7781196515187503e-09, 2.1485629941864204e-10, 8.520404382039715e-10, 7.676441426962555e-11, 3.2338527411468476e-09, 9.148350727627985e-06, 5.556912707760375e-09, 4.792421459676177e-10, 1.4532588465954177e-09, 4.529714381362737e-09, 1.0615714973738477e-09, 1.2859158182720876e-09, 8.199245726814297e-10, 9.430580760749763e-10, 8.298388820549008e-06, 1.1317500714369544e-08, 1.0739896794120796e-07, 2.6044528755875263e-09, 7.4709901127789635e-06, 8.269170237440449e-09, 2.4187718494772525e-08, 1.2643410762791518e-09, 0.0007771676173433661, 3.277500271181566e-09, 3.1558499813399976e-06, 4.1943217787832054e-09, 1.2292070096009411e-05, 6.568369848025668e-09, 2.63679605927436e-10, 3.0702942410698597e-09, 1.0714107702369802e-05, 9.876120365959196e-09, 4.898739747183356e-10, 3.895715305901604e-09, 5.775837507826509e-06, 1.0319628707122774e-08, 1.6925570278658597e-08, 6.545096464805056e-09, 1.6012528192277387e-08, 3.435768292092689e-08, 7.49310569148065e-09, 1.7857123557618593e-09, 0.00013995655172038823, 6.240195489226608e-07, 2.5205515896686848e-08, 5.423530069492699e-09, 2.2516767117508607e-08, 1.9789998972896683e-08, 4.6392210073520346e-09, 6.750822123535727e-10, 3.9724962208609327e-10, 4.0508540966044393e-10, 1.0536965078244975e-08, 0.0002990695647895336, 1.5053590596281197e-09, 7.773992116710815e-09, 6.571026389678991e-09, 6.571014819201082e-05, 1.046257969150588e-09, 6.393236162693938e-09, 5.9908558114329935e-09, 1.232417253049789e-05, 1.5970366140649617e-09, 1.0961371366136063e-08, 6.753539394388497e-10, 1.3796983694192022e-05, 5.521066714919698e-09, 1.7898598159149515e-08, 1.6610658349236473e-05, 1.5913968809400103e-08, 9.178450888214229e-09, 6.653824602409486e-09, 8.033089748948896e-09, 3.204216003638294e-09, 5.743377773370639e-09, 2.752729377775154e-09, 1.0267914518635735e-08, 3.521732905298336e-10, 1.7800698415282312e-10, 3.063368225753038e-09, 0.00010125157859874889, 7.129866697042075e-10, 1.7595814583160063e-08, 6.874145697111089e-09, 0.00022135571634862572, 1.1622999229743414e-09, 1.2456989395559503e-07, 5.633171706875828e-09, 2.9671684387722053e-05, 1.4136335435566139e-09, 1.129833222535126e-07, 5.661500601661373e-09, 5.518500529433368e-06, 2.7112001532714203e-09, 6.710902056283885e-08, 3.967803419158145e-09, 0.9909105896949768, 6.660646789669045e-08, 1.076675992806031e-08, 9.683098767254705e-10, 4.908934925218489e-10, 3.776656376430765e-05, 1.0771401548481663e-08, 8.123007546601002e-07, 8.247119431814554e-09, 0.001940875663422048, 5.572593053670971e-08, 1.5366234507041554e-08, 1.5601701264245094e-08, 4.58198190500525e-09, 6.566542288055643e-05]], "pointer": [[0.0, 0.0, 0.00022895784059073776, 0.0, 0.00019073995645157993, 0.0, 0.0, 0.0, 0.00010438668687129393, 0.0, 0.0, 0.0, 0.00015111239918041974, 0.0, 0.0, 0.0, 0.0001339621958322823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00037350167986005545, 0.0, 0.0, 0.0, 0.00013216394290793687, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.644376536409254e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.273715148883639e-06, 0.0, 0.0, 0.0, 4.273821559763746e-06, 0.0, 0.0, 0.0, 5.147480351297418e-06, 0.0, 0.0, 0.0, 1.2150775546615478e-05, 0.0, 0.0, 0.0, 1.1654303307295777e-05, 0.0, 0.0, 0.0, 8.668394002597779e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.813559257854649e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.156637818501622e-07, 0.0, 0.00010547212150413543, 0.0, 2.5639823434175923e-05, 0.0, 2.8540343919303268e-05, 0.0, 1.6520413055332028e-06, 0.0, 5.684988195753249e-07, 0.0, 4.9288890295429155e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.808865247061476e-05, 0.0, 0.0, 0.0, 5.225357426752453e-07, 0.0, 5.276772299112054e-07, 0.0, 1.5928760603856063e-06, 0.0, 2.8820258535233734e-07, 0.0, 2.3435050025000237e-06, 0.0, 8.452278052573092e-06, 0.0, 2.8865923013654537e-05, 0.0, 0.998188316822052, 0.0, 2.417424548184499e-05, 0.0, 0.0, 5.260801572148921e-06, 0.0, 1.11941756131273e-06, 0.0, 0.0, 0.0, 6.335558282444254e-05, 0.0, 0.0, 0.0, 0.0, 7.112934690667316e-05]], "target": [0.9983721375465393]}, "loss": [0.009131100960075855, 0.0016291888896375895], "acc": [0.0, 1.0, 1.0, 1.0]}}


All source tokens:

['#NEWLINE#', 'def std(', 'x_gpu', ',', 'ddof', '=', '0', ',', 'axis', '=', 'None', ',', 'stream', '=', 'None', ',', 'keepdims', '=', 'False', ')', ':', '#NEWLINE#', '#INDENT#', '\'\\n    Compute the standard deviation along the specified axis.\\n\\n    Returns the standard deviation of the array elements, a measure of the\\n    spread of a distribution. The standard deviation is computed for the\\n    flattened array by default, otherwise over the specified axis.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Array containing numbers whose std is desired.\\n    ddof : int (optional)\\n        "Delta Degrees of Freedom": the divisor used in computing the \\n        variance is ``N - ddof``, where ``N`` is the number of elements.\\n        Setting ``ddof = 1`` is equivalent to applying Bessel\\\'s\\n        correction.\\n    axis : int (optional)\\n        Axis along which the std are computed. The default is to\\n        compute the std of the flattened array.\\n    stream : pycuda.driver.Stream (optional)\\n        Optional CUDA stream in which to perform this calculation\\n    keepdims : bool (optional, default False)\\n        If True, the axes which are reduced are left in the result as\\n        dimensions with size one.\\n\\n    Returns\\n    -------\\n    out : pycuda.gpuarray.GPUArray or float\\n        std of elements, or stds of elements along the desired axis.\\n    \'', '#NEWLINE#', 'def _inplace_pow(', 'x_gpu', ',', 'p', ',', 'stream', ')', ':', '#NEWLINE#', '#INDENT#', 'func', '=', 'elementwise', '.', 'get_pow_kernel', '(', 'x_gpu', '.', 'dtype', ')', '#NEWLINE#', 'func', '.', 'prepared_async_call', '(', 'x_gpu', '.', '_grid', ',', 'x_gpu', '.', '_block', ',', 'stream', ',', 'p', ',', 'x_gpu', '.', 'gpudata', ',', 'x_gpu', '.', 'gpudata', ',', 'x_gpu', '.', 'mem_size', ')', '#NEWLINE#', '#UNINDENT#', 'if', '(', 'axis', 'is', 'None', ')', ':', '#NEWLINE#', '#INDENT#', 'return', '(', 'var', '(', 'x_gpu', ',', 'ddof', '=', 'ddof', ',', 'stream', '=', 'stream', ',', 'keepdims', '=', 'keepdims', ')', '**', '0.5', ')', '#NEWLINE#', '#UNINDENT#', 'else', ':', '#NEWLINE#', '#INDENT#', 'out', '=', 'var', '(', 'x_gpu', ',', 'ddof', '=', 'ddof', ',', 'axis', '=', 'axis', ',', 'stream', '=', 'stream', ',', 'keepdims', '=', 'ddof', ')', '#NEWLINE#', '_inplace_pow', '(', 'out', ',', '0.5', ',', 'stream', ')', '#NEWLINE#', '#UNINDENT#', 'return', 'out']


All attention probs:

[0.008937422186136246, 0.008171627297997475, 0.016324946656823158, 0.01209972146898508, 0.01920200139284134, 0.010116735473275185, 0.009890357032418251, 0.007435268722474575, 0.02437949925661087, 0.00861226674169302, 0.008683049120008945, 0.009564142674207687, 0.02387390285730362, 0.007332568056881428, 0.006287493743002415, 0.006540854927152395, 0.014112606644630432, 0.007543275598436594, 0.007648729719221592, 0.006293416954576969, 0.006515348330140114, 0.0062782843597233295, 0.005727940239012241, 0.005535659845918417, 0.006122079212218523, 0.006091072224080563, 0.017376482486724854, 0.004610010888427496, 0.011931435205042362, 0.005037158727645874, 0.014765750616788864, 0.005122375208884478, 0.004779626615345478, 0.005163722671568394, 0.005010902415961027, 0.009821533225476742, 0.0043498254381120205, 0.006201061885803938, 0.002934807911515236, 0.004373667296022177, 0.0035329849924892187, 0.00998595729470253, 0.0035640690475702286, 0.0043176449835300446, 0.0022766466718167067, 0.005624792072921991, 0.008757366798818111, 0.0025619566440582275, 0.003329192055389285, 0.0038598000537604094, 0.009165912866592407, 0.002274219412356615, 0.003275534836575389, 0.0026178613770753145, 0.010334540158510208, 0.002214133506640792, 0.003733603050932288, 0.003003486432135105, 0.017127754166722298, 0.0030992873944342136, 0.01998380571603775, 0.003312762826681137, 0.010580346919596195, 0.0020759357139468193, 0.0029815833549946547, 0.0036721359938383102, 0.009563279338181019, 0.002705057617276907, 0.0038237725384533405, 0.004185892641544342, 0.009336238726973534, 0.0024360367096960545, 0.003295107977464795, 0.0030227284878492355, 0.004226787947118282, 0.0035973237827420235, 0.0046706125140190125, 0.0032139678951352835, 0.012626753188669682, 0.0033198220189660788, 0.002647015731781721, 0.0025370020885020494, 0.0026044994592666626, 0.0034220695961266756, 0.0036030299961566925, 0.0040192934684455395, 0.0030820011161267757, 0.005778081249445677, 0.004253555089235306, 0.012941291555762291, 0.0026991066988557577, 0.0053273881785571575, 0.0029307573568075895, 0.013979241251945496, 0.0032769115641713142, 0.007327198516577482, 0.003963295370340347, 0.012465588748455048, 0.00364702008664608, 0.005342101212590933, 0.0034584072418510914, 0.013177013024687767, 0.002973695984110236, 0.005536620505154133, 0.005567224696278572, 0.003076158231124282, 0.004118392709642649, 0.003620216390118003, 0.007767758332192898, 0.0030403435230255127, 0.004215644206851721, 0.004881576169282198, 0.01220498513430357, 0.0037619115319103003, 0.0040466017089784145, 0.0030617595184594393, 0.011525710113346577, 0.002578269224613905, 0.006245277356356382, 0.0030393563210964203, 0.013932676054537296, 0.0030284614767879248, 0.006159805227071047, 0.004168597981333733, 0.017367471009492874, 0.007375737652182579, 0.007225262466818094, 0.007420036010444164, 0.010741622187197208, 0.005142509937286377, 0.008566360920667648, 0.004043446853756905, 0.020680254325270653, 0.0023940405808389187, 0.004784754011780024, 0.005959914065897465, 0.0035258864518254995, 0.015562525950372219, 0.003163226880133152, 0.004578861407935619, 0.003087117336690426, 0.01909148320555687, 0.0031325628515332937, 0.004548883531242609, 0.00428833719342947, 0.0060783978551626205, 0.01212307345122099]


Top-k source tokens:

['axis', 'stream', 'ddof', 'p', 'ddof', 'stream', 'x_gpu', 'axis', 'stream', 'x_gpu']


Top-k attention probs:

[0.02437949925661087, 0.02387390285730362, 0.020680254325270653, 0.01998380571603775, 0.01920200139284134, 0.01909148320555687, 0.017376482486724854, 0.017367471009492874, 0.017127754166722298, 0.016324946656823158]
