
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"], "error_location": [0], "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 148, 155, 2, 20, 33, 91, 113, 124, 137, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "StackHut/stackhut/stackhut_toolkit/common/barrister/runtime.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2311, "results": {"model": "transformer", "prob": {"loc": [[0.7390168905258179, 2.100736082866206e-06, 5.967602305645414e-07, 3.182355001740689e-08, 2.2413803435483715e-06, 3.3737872939809677e-08, 1.1595858495638822e-06, 1.5885711945884395e-07, 2.1893313828513783e-08, 1.8550442959508473e-08, 4.0199818585051617e-08, 6.916754813346415e-08, 5.859435248112277e-08, 9.823455826563077e-08, 6.979132649576059e-08, 1.616988993191626e-05, 1.2677568861363397e-07, 2.931738265488093e-07, 9.171368731131224e-08, 1.2094643864202226e-07, 3.27174348058179e-06, 4.5118888181150396e-08, 4.260834174374395e-08, 1.427920324204024e-07, 1.8143930802239083e-08, 7.17129182703502e-07, 3.164049758197507e-06, 2.2740221083950019e-07, 5.2038490139239e-07, 1.0717998577547405e-07, 3.7444831946231716e-07, 7.540256774518639e-08, 3.771032552890574e-08, 1.1474646299802771e-07, 2.716494051924201e-08, 5.5358057693410956e-08, 6.097010896155552e-08, 3.2803001204229076e-08, 1.2573778462865448e-07, 1.5400514996599668e-07, 9.71575673247571e-07, 1.0068647782190965e-07, 7.540007729289755e-09, 1.352878342686381e-07, 0.0030152287799865007, 3.3252294429075846e-07, 2.4878445969989116e-07, 2.0717767768019257e-07, 1.936338236419033e-07, 1.3630821626975376e-07, 1.4248881541334413e-07, 1.853244313565483e-08, 1.9345681323557073e-07, 0.003896464593708515, 1.9885243318640278e-07, 2.745327265074593e-06, 7.836021609364252e-08, 2.2618858963596722e-07, 1.1191863080739495e-07, 8.47332515263588e-08, 1.742421176231801e-07, 3.402317716449943e-08, 3.6482191489994875e-08, 2.0822034230150166e-07, 0.008545201271772385, 7.041226268711398e-08, 1.8297599524430552e-07, 5.96459813095862e-07, 1.0121995330791833e-07, 1.8520843525493547e-07, 1.3993059155836818e-07, 1.0504992786763978e-07, 2.6683092073653825e-05, 2.902474989241455e-07, 0.00018497837299946696, 6.732582278345944e-06, 2.8820516035921173e-06, 7.342516141761735e-07, 1.2813699186153826e-06, 6.378887178470904e-07, 1.3968373195893946e-06, 2.764531075172272e-07, 3.1043151693666005e-07, 1.9986084964784823e-07, 3.167638169543352e-07, 2.3301680585063878e-07, 2.087625574631602e-07, 1.220358996079085e-07, 1.4788709449931048e-05, 2.757998061042599e-07, 1.4471743270405568e-06, 1.818324193436638e-07, 2.1074934863918315e-07, 2.5349406129748786e-08, 7.869313094488462e-07, 0.0003756549849640578, 4.499070200836286e-07, 0.06502845883369446, 7.603545668644074e-07, 2.012963477682206e-06, 4.4998487283010036e-06, 1.1856086956640866e-07, 0.05417139455676079, 9.712848623166792e-07, 5.00282737903035e-07, 3.657285390090692e-07, 3.327126592012064e-07, 8.072579475992825e-07, 3.005888515872357e-07, 3.9251165162568213e-07, 1.814913161979348e-07, 1.3213939382694662e-05, 8.741037760273684e-08, 2.8919095029777964e-07, 1.4607398668431415e-07, 2.414404498551903e-08, 4.695903896845266e-07, 0.09344690293073654, 3.2251000448013656e-07, 0.02096034213900566, 8.058856337811449e-07, 3.5761982530857495e-07, 1.8170085525071045e-07, 1.5668463504425745e-07, 2.9977869417052716e-05, 1.430954768011361e-07, 1.574610308807678e-07, 2.5625686816965754e-07, 3.011717808476533e-08, 7.101709229573316e-07, 2.220980059064459e-05, 5.465191748044163e-07, 5.928812356614799e-07, 4.639637438685895e-07, 1.0397018286312232e-06, 2.8603582791220106e-07, 8.967436571083454e-08, 4.4331130766295246e-07, 7.643339472451771e-08, 5.15533393752321e-08, 1.4136566051092814e-07, 4.281983834175662e-08, 1.5664474517507188e-07, 3.982048610851052e-07, 1.4358068938236102e-06, 1.3403123944044637e-07, 1.1459914617262257e-07, 9.103872571358806e-07, 0.003720249282196164, 7.772857202326122e-07, 7.456508228642633e-07, 5.491775141308608e-07, 2.6703000344241445e-07, 3.8154570347614936e-07, 1.0772988190410615e-07, 0.007446525618433952]], "pointer": [[0.0, 0.0, 0.004121857695281506, 0.0, 0.32290568947792053, 0.0, 0.1058480516076088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04466245695948601, 0.0, 0.0, 0.0, 0.0, 0.0002840061788447201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003209258138667792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.057877812534570694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18706195056438446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053248386830091476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12566737830638885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020091816782951355, 0.0, 0.0, 0.001209551701322198, 0.0, 0.0, 0.0, 0.0036394093185663223, 0.0, 0.019048351794481277, 0.0, 0.0, 0.028060859069228172, 0.0, 0.004030322190374136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010779579170048237, 0.0, 0.0017581275897100568, 0.0, 0.0, 0.0, 0.0056032598949968815, 0.0, 0.003299614181742072, 0.0, 0.0, 0.0, 0.0, 5.9145953855477273e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002066979359369725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4827146262396127e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00018995943537447602]], "target": [0.0]}, "loss": [0.3024345934391022, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:53:34.631930", "n_pass": [1, 1, 1], "n_token": 156, "loss": [0.3024345934391022, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 148, 155, 2, 20, 33, 91, 113, 124, 137, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117]}}
{"prediction": {"error_location": 0.7390168905258179, "repair_targets": [], "repair_candidates": [0.004121857695281506, 0.32290568947792053, 0.1058480516076088, 0.04466245695948601, 0.0002840061788447201, 0.0003209258138667792, 0.057877812534570694, 0.18706195056438446, 0.053248386830091476, 0.12566737830638885, 0.020091816782951355, 0.001209551701322198, 0.0036394093185663223, 0.019048351794481277, 0.028060859069228172, 0.004030322190374136, 0.010779579170048237, 0.0017581275897100568, 0.0056032598949968815, 0.003299614181742072, 5.9145953855477273e-05, 0.0002066979359369725, 2.4827146262396127e-05, 0.00018995943537447602], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:34.703499", "n_pass": [52, 2, 2], "n_token": 146, "loss": [0.47645652294158936, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 78, 101, 138, 145, 2, 20, 33, 81, 103, 114, 127, 85, 90, 6, 87, 109, 4, 44, 53, 64, 92, 107]}}
{"prediction": {"error_location": 0.6209798455238342, "repair_targets": [], "repair_candidates": [0.001804446685127914, 0.09401630610227585, 0.10526158660650253, 0.01941024325788021, 0.0001431504060747102, 0.0002199437003582716, 0.0661216527223587, 0.30373820662498474, 0.10506957769393921, 0.19556193053722382, 0.010243834927678108, 0.00039483007276430726, 0.0034530535340309143, 0.013003053143620491, 0.03371262177824974, 0.01698470488190651, 0.0028659338131546974, 0.001030817162245512, 0.022895459085702896, 0.0038124616257846355, 5.116431930218823e-05, 0.00010216380178462714, 1.823627644625958e-05, 8.451691246591508e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:34.768734", "n_pass": [56, 3, 3], "n_token": 136, "loss": [0.41919755935668945, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 78, 101, 128, 135, 2, 20, 33, 81, 103, 114, 117, 85, 90, 6, 87, 109, 4, 44, 53, 64, 92, 107]}}
{"prediction": {"error_location": 0.6575742959976196, "repair_targets": [], "repair_candidates": [0.0022257070522755384, 0.10364288091659546, 0.10177788883447647, 0.026028549298644066, 0.0002442917029839009, 0.00027978053549304605, 0.056705642491579056, 0.23924776911735535, 0.07961491495370865, 0.2875524163246155, 0.01791246235370636, 0.0005764082889072597, 0.0022467956878244877, 0.015413041226565838, 0.023347238078713417, 0.014597507193684578, 0.008989649824798107, 0.0017108703032135963, 0.015680689364671707, 0.00203780853189528, 2.914356991823297e-05, 3.616027970565483e-05, 3.9917704270919785e-05, 6.248072168091312e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:34.836605", "n_pass": [100, 4, 4], "n_token": 131, "loss": [0.6321895718574524, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 78, 101, 123, 130, 2, 20, 33, 81, 103, 114, 117, 85, 90, 6, 87, 109, 4, 44, 53, 64, 92, 107]}}
{"prediction": {"error_location": 0.5314269065856934, "repair_targets": [], "repair_candidates": [0.001418127678334713, 0.08490128815174103, 0.07070139050483704, 0.025901254266500473, 0.00020642875460907817, 0.00019492905994411558, 0.023632526397705078, 0.12147782742977142, 0.042082421481609344, 0.5536015629768372, 0.01810186542570591, 0.00036980881122872233, 0.0010275052627548575, 0.011133655905723572, 0.014127310365438461, 0.01086460705846548, 0.007577769458293915, 0.0010168999433517456, 0.010159228928387165, 0.0010438808239996433, 2.9042530513834208e-05, 3.688724245876074e-05, 0.0003521360922604799, 4.16666989622172e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:34.903302", "n_pass": [105, 5, 5], "n_token": 127, "loss": [0.8933219909667969, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 68, 74, 97, 119, 126, 2, 16, 29, 77, 99, 110, 113, 81, 86, 6, 83, 105, 4, 40, 49, 60, 88, 103]}}
{"prediction": {"error_location": 0.4092938303947449, "repair_targets": [], "repair_candidates": [0.0012250051368027925, 0.08638358116149902, 0.04728652164340019, 0.026201682165265083, 0.0003956403525080532, 0.00023409505956806242, 0.047852978110313416, 0.11293871700763702, 0.06545378267765045, 0.5415589809417725, 0.007109214551746845, 0.00025133209419436753, 0.0007581787649542093, 0.013285048305988312, 0.02570892870426178, 0.0072548119351267815, 0.0011738378088921309, 0.0005322455544956028, 0.013414306566119194, 0.00082904048031196, 3.039530747628305e-05, 2.3219834474730305e-05, 5.62132554478012e-05, 4.226438977639191e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:34.967639", "n_pass": [108, 6, 6], "n_token": 122, "loss": [0.889382004737854, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 63, 69, 92, 114, 121, 2, 16, 24, 72, 94, 105, 108, 76, 81, 6, 78, 100, 4, 35, 44, 55, 83, 98]}}
{"prediction": {"error_location": 0.41090962290763855, "repair_targets": [], "repair_candidates": [0.0017332563875243068, 0.060045599937438965, 0.03718092292547226, 0.034876734018325806, 0.0014673569239675999, 0.00039805477717891335, 0.02514716237783432, 0.034058306366205215, 0.023733235895633698, 0.7381504774093628, 0.005819987040013075, 0.0010753014357760549, 0.0005498113459907472, 0.00389918708242476, 0.012843147851526737, 0.006125429645180702, 0.0009012731607072055, 0.0005111178033985198, 0.010315912775695324, 0.0010192514164373279, 4.5608852815348655e-05, 3.2577867386862636e-05, 2.724616388150025e-05, 4.299442662158981e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.031641", "n_pass": [109, 7, 7], "n_token": 117, "loss": [0.8871512413024902, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 58, 64, 87, 109, 116, 2, 16, 19, 67, 89, 100, 103, 71, 76, 6, 73, 95, 4, 30, 39, 50, 78, 93]}}
{"prediction": {"error_location": 0.41182732582092285, "repair_targets": [], "repair_candidates": [0.0018178240861743689, 0.13668473064899445, 0.10791724920272827, 0.041282087564468384, 0.00026358506875112653, 0.00011543915024958551, 0.0037623215466737747, 0.013509044423699379, 0.007842028513550758, 0.6456385254859924, 0.011107617057859898, 0.0006201830692589283, 0.0008061453700065613, 0.005946990102529526, 0.004857760388404131, 0.002763258060440421, 0.0029612642247229815, 0.0004496742913033813, 0.008043956011533737, 0.0034106087405234575, 5.031100954511203e-05, 3.685314004542306e-05, 8.37388142826967e-05, 2.8760794521076605e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.096010", "n_pass": [111, 8, 8], "n_token": 112, "loss": [0.7816483974456787, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 53, 59, 82, 104, 111, 2, 16, 19, 62, 84, 95, 98, 66, 71, 6, 68, 90, 4, 25, 34, 45, 73, 88]}}
{"prediction": {"error_location": 0.4576510488986969, "repair_targets": [], "repair_candidates": [0.0024817013181746006, 0.13359206914901733, 0.20620493590831757, 0.06740260124206543, 0.00017308950191363692, 0.00010895841114688665, 0.0034444464836269617, 0.02143714390695095, 0.01105146948248148, 0.5000912547111511, 0.018383704125881195, 0.000327517424011603, 0.00089759670663625, 0.011451318860054016, 0.005140741355717182, 0.0022383739706128836, 0.005778989754617214, 0.0004188037128187716, 0.003784671425819397, 0.004795144312083721, 4.081321822013706e-05, 1.779221565811895e-05, 0.000708677398506552, 2.8176633350085467e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.161406", "n_pass": [113, 9, 9], "n_token": 107, "loss": [1.0739802122116089, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 48, 54, 77, 99, 106, 2, 16, 19, 57, 79, 90, 93, 61, 66, 6, 63, 85, 4, 25, 29, 40, 68, 83]}}
{"prediction": {"error_location": 0.3416459262371063, "repair_targets": [], "repair_candidates": [0.0021942979656159878, 0.06445059180259705, 0.42702803015708923, 0.03716414421796799, 0.00021119759185239673, 0.000157299597049132, 0.0016602618852630258, 0.0027492744848132133, 0.006156426388770342, 0.3924259543418884, 0.017290998250246048, 0.00020929252787027508, 0.0008270909311249852, 0.024410933256149292, 0.004146091639995575, 0.0025845016352832317, 0.004849928431212902, 0.00020993233192712069, 0.00563392136245966, 0.005178061779588461, 3.204770473530516e-05, 1.591200998518616e-05, 0.00039147408097051084, 2.2317839466268197e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.224626", "n_pass": [115, 10, 10], "n_token": 102, "loss": [0.8524929881095886, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 49, 72, 94, 101, 2, 16, 19, 52, 74, 85, 88, 56, 61, 6, 58, 80, 4, 25, 29, 35, 63, 78]}}
{"prediction": {"error_location": 0.42635074257850647, "repair_targets": [], "repair_candidates": [0.003169797360897064, 0.13035564124584198, 0.4152280390262604, 0.035656001418828964, 0.0003006638144142926, 0.00025002830079756677, 0.0007795596029609442, 0.0010684331646189094, 0.0017642125021666288, 0.3157109022140503, 0.022455712780356407, 0.0002868322189897299, 0.0002560454304330051, 0.04074417054653168, 0.004528841935098171, 0.005487565882503986, 0.002858651103451848, 0.00045002863043919206, 0.00631321407854557, 0.012065446004271507, 4.741717566503212e-05, 3.0462368158623576e-05, 0.00017318375466857105, 1.911029903567396e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.288456", "n_pass": [117, 11, 11], "n_token": 97, "loss": [0.8356033563613892, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 38, 44, 67, 89, 96, 2, 16, 19, 47, 69, 80, 83, 51, 56, 6, 53, 75, 4, 25, 29, 35, 58, 73]}}
{"prediction": {"error_location": 0.4336128830909729, "repair_targets": [], "repair_candidates": [0.003414530772715807, 0.10511572659015656, 0.3094721734523773, 0.053724538534879684, 0.0005200098967179656, 0.000247826857957989, 0.0008362856460735202, 0.0013293711235746741, 0.003995734732598066, 0.43708351254463196, 0.023777009919285774, 0.00021614987053908408, 9.360164403915405e-05, 0.02990432269871235, 0.004891929216682911, 0.0041322424076497555, 0.002908227499574423, 0.0006590369739569724, 0.004717063624411821, 0.012754072435200214, 4.284545502741821e-05, 1.785367749107536e-05, 0.00011508072930155322, 3.0826333386357874e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.418385", "n_pass": [178, 13, 12], "n_token": 95, "loss": [0.9142571687698364, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 36, 42, 65, 87, 94, 2, 16, 19, 45, 67, 78, 81, 49, 54, 6, 51, 73, 4, 25, 29, 33, 56, 71]}}
{"prediction": {"error_location": 0.4008142650127411, "repair_targets": [], "repair_candidates": [0.0037501202896237373, 0.0943976640701294, 0.2596898674964905, 0.05240429565310478, 0.0009655747562646866, 0.00024863157887011766, 0.0009591649868525565, 0.00219964561983943, 0.0028339752461761236, 0.5009045004844666, 0.020481323823332787, 0.00029226639890111983, 7.237430691020563e-05, 0.032825566828250885, 0.003946213982999325, 0.0029900434892624617, 0.0016009113751351833, 0.0005911397165618837, 0.004989877808839083, 0.013699737377464771, 4.442916906555183e-05, 2.0352777937659994e-05, 6.34881726000458e-05, 2.886292350012809e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.483184", "n_pass": [180, 14, 13], "n_token": 93, "loss": [0.5562160015106201, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 40, 63, 85, 92, 2, 16, 19, 43, 65, 76, 79, 47, 52, 6, 49, 71, 4, 25, 29, 33, 54, 69]}}
{"prediction": {"error_location": 0.5733745694160461, "repair_targets": [], "repair_candidates": [0.0032398542389273643, 0.1749887466430664, 0.30113866925239563, 0.0981021299958229, 0.00032861781073734164, 0.0002779055794235319, 0.0029537412337958813, 0.0037692782934755087, 0.004613829776644707, 0.29127946496009827, 0.05276373773813248, 0.0006294955965131521, 0.00023600997519679368, 0.019190102815628052, 0.014933391474187374, 0.0023229082580655813, 0.0029789379332214594, 0.0007527245907112956, 0.010100179351866245, 0.015052755363285542, 0.00011213515244890004, 5.311396671459079e-05, 0.00010953941819025204, 7.267639739438891e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.546734", "n_pass": [182, 15, 14], "n_token": 91, "loss": [0.5073640942573547, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 38, 61, 83, 90, 2, 16, 19, 41, 63, 74, 77, 45, 50, 6, 47, 69, 4, 25, 29, 33, 52, 67]}}
{"prediction": {"error_location": 0.6020804643630981, "repair_targets": [], "repair_candidates": [0.003840463003143668, 0.23060360550880432, 0.3883851170539856, 0.11700618267059326, 0.0003202924272045493, 0.0002112788351951167, 0.0010854657739400864, 0.0015583100030198693, 0.007456738967448473, 0.11683060228824615, 0.09126970916986465, 0.001119995373301208, 0.000213318839087151, 0.009739675559103489, 0.007846364751458168, 0.001813419396057725, 0.006265839096158743, 0.0010585483396425843, 0.009843400679528713, 0.002954645548015833, 0.00016362706082873046, 7.6973759860266e-05, 0.00025937947793863714, 7.705970347160473e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.611407", "n_pass": [183, 16, 15], "n_token": 89, "loss": [0.40143391489982605, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 59, 81, 88, 2, 16, 19, 39, 61, 72, 75, 43, 48, 6, 45, 67, 4, 25, 29, 33, 50, 65]}}
{"prediction": {"error_location": 0.669359564781189, "repair_targets": [], "repair_candidates": [0.00859827920794487, 0.29113468527793884, 0.481099396944046, 0.07401604950428009, 0.0009045220213010907, 0.00037750668707303703, 0.0015467620687559247, 0.0017303661443293095, 0.005716036073863506, 0.04309983551502228, 0.03777621313929558, 0.005480041261762381, 0.0010046522365882993, 0.014046871103346348, 0.006368391215801239, 0.0015933364629745483, 0.009549388661980629, 0.0018456755205988884, 0.011294892057776451, 0.001978743588551879, 0.00024557451251894236, 9.920629963744432e-05, 0.0004403695638757199, 5.3189851314527914e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.675350", "n_pass": [190, 17, 16], "n_token": 86, "loss": [0.364927738904953, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 56, 78, 85, 2, 16, 19, 39, 58, 69, 72, 43, 48, 6, 45, 64, 4, 25, 29, 33, 50, 62]}}
{"prediction": {"error_location": 0.6942467093467712, "repair_targets": [], "repair_candidates": [0.011767768301069736, 0.2527332007884979, 0.4184264838695526, 0.11999399960041046, 0.0016944573726505041, 0.0002117719268426299, 0.0015182638308033347, 0.0018921599257737398, 0.006424162071198225, 0.05319342762231827, 0.04838468134403229, 0.008996770717203617, 0.0032229586504399776, 0.02112559601664543, 0.012274309992790222, 0.0020850931759923697, 0.02206457406282425, 0.0026860078796744347, 0.008029424585402012, 0.0020296669099479914, 0.00012749880261253566, 5.503821012098342e-05, 0.001022608601488173, 4.009407348348759e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.738685", "n_pass": [191, 18, 17], "n_token": 83, "loss": [0.37306228280067444, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 53, 75, 82, 2, 16, 19, 39, 55, 66, 69, 43, 48, 6, 45, 61, 4, 25, 29, 33, 50, 59]}}
{"prediction": {"error_location": 0.6886224150657654, "repair_targets": [], "repair_candidates": [0.00914493203163147, 0.22844944894313812, 0.41397014260292053, 0.1082053929567337, 0.0011636243434622884, 0.00012441181752365083, 0.0012122185435146093, 0.001452654949389398, 0.006916310638189316, 0.053807616233825684, 0.049116045236587524, 0.009021489880979061, 0.006639781408011913, 0.02137918397784233, 0.02645530365407467, 0.0017700360622256994, 0.04562913253903389, 0.0016792200040072203, 0.007636012975126505, 0.0018584472127258778, 6.775606016162783e-05, 3.176183963660151e-05, 0.004233052488416433, 3.602624929044396e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.802715", "n_pass": [193, 19, 18], "n_token": 80, "loss": [0.5217363834381104, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 53, 72, 79, 2, 16, 19, 39, 55, 63, 66, 43, 48, 6, 45, 58, 4, 25, 29, 33, 50, 56]}}
{"prediction": {"error_location": 0.5934892296791077, "repair_targets": [], "repair_candidates": [0.013540484942495823, 0.2211836278438568, 0.2779521346092224, 0.10457586497068405, 0.0010160129750147462, 0.00034703066921792924, 0.007899939082562923, 0.013896857388317585, 0.01272654626518488, 0.08269302546977997, 0.06524026393890381, 0.007484310306608677, 0.009776494465768337, 0.03260354697704315, 0.04318375885486603, 0.0027768106665462255, 0.015248744748532772, 0.027584722265601158, 0.04043304920196533, 0.006268525030463934, 0.0001724473258946091, 8.484464342473075e-05, 0.013232068158686161, 7.883954822318628e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.865166", "n_pass": [195, 20, 19], "n_token": 77, "loss": [0.7927192449569702, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 53, 69, 76, 2, 16, 19, 39, 55, 60, 63, 43, 48, 6, 45, 58, 4, 25, 29, 33, 50, 56]}}
{"prediction": {"error_location": 0.45261240005493164, "repair_targets": [], "repair_candidates": [0.00831291638314724, 0.12607216835021973, 0.4176676869392395, 0.0814710184931755, 0.0004852474376093596, 0.0012920009903609753, 0.007140403613448143, 0.009010828100144863, 0.008739142678678036, 0.053130853921175, 0.040970202535390854, 0.008112343959510326, 0.002354928059503436, 0.032504864037036896, 0.09393306821584702, 0.0024227481335401535, 0.010526233352720737, 0.03432733193039894, 0.008104819804430008, 0.030636191368103027, 0.0001490075228502974, 0.0002187509962823242, 0.022278646007180214, 0.00013867751113139093], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.928779", "n_pass": [198, 21, 20], "n_token": 74, "loss": [0.8761313557624817, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 53, 66, 73, 2, 16, 19, 39, 55, 60, 63, 43, 48, 6, 45, 58, 4, 25, 29, 33, 50, 56]}}
{"prediction": {"error_location": 0.41639071702957153, "repair_targets": [], "repair_candidates": [0.008733457885682583, 0.11707396805286407, 0.4938580095767975, 0.08093389123678207, 0.0005156847764737904, 0.0008019313681870699, 0.0021097371354699135, 0.0032134694047272205, 0.005395055282860994, 0.050464946776628494, 0.04255093261599541, 0.005221706815063953, 0.003310802858322859, 0.011843221262097359, 0.0898662805557251, 0.0020497506484389305, 0.010867253877222538, 0.03187517449259758, 0.005444628652185202, 0.021129129454493523, 0.0005368920392356813, 0.0008219050941988826, 0.011027335189282894, 0.00035481996019370854], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:35.991592", "n_pass": [200, 22, 21], "n_token": 71, "loss": [0.8675392270088196, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 34, 36, 53, 66, 70, 2, 16, 19, 39, 55, 60, 63, 43, 48, 6, 45, 58, 4, 25, 29, 33, 50, 56]}}
{"prediction": {"error_location": 0.41998377442359924, "repair_targets": [], "repair_candidates": [0.007037153001874685, 0.1069062352180481, 0.5140342116355896, 0.07835958898067474, 0.00042673959978856146, 0.0007115620537661016, 0.0019701721612364054, 0.0032505609560757875, 0.005608423613011837, 0.05282612144947052, 0.043575745075941086, 0.004817871376872063, 0.003187657566741109, 0.011176818050444126, 0.08929415047168732, 0.0021157937590032816, 0.012648631818592548, 0.026440713554620743, 0.004915016237646341, 0.022315653041005135, 0.0006448948988690972, 0.0007114264299161732, 0.006353576667606831, 0.0006712275790050626], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.180801", "n_pass": [209, 25, 22], "n_token": 69, "loss": [0.6988287568092346, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 32, 34, 51, 64, 68, 2, 14, 17, 37, 53, 58, 61, 41, 46, 6, 43, 56, 4, 23, 27, 31, 48, 54]}}
{"prediction": {"error_location": 0.49716728925704956, "repair_targets": [], "repair_candidates": [0.013349547050893307, 0.26173245906829834, 0.11679552495479584, 0.20759151875972748, 0.0026064938865602016, 0.0028956346213817596, 0.0029628798365592957, 0.0031783361919224262, 0.0076383003033697605, 0.1094464436173439, 0.0741242915391922, 0.00688523892313242, 0.002144069876521826, 0.009326011873781681, 0.09091309458017349, 0.001408953103236854, 0.013938626274466515, 0.03616531565785408, 0.00580599345266819, 0.02085866965353489, 0.0008701347978785634, 0.0013667793245986104, 0.007093499414622784, 0.0009022168233059347], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.243911", "n_pass": [212, 26, 23], "n_token": 67, "loss": [0.7523397207260132, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 30, 32, 49, 62, 66, 2, 14, 17, 35, 51, 56, 59, 39, 44, 6, 41, 54, 4, 21, 25, 29, 46, 52]}}
{"prediction": {"error_location": 0.4712626338005066, "repair_targets": [], "repair_candidates": [0.02250957116484642, 0.2184184044599533, 0.09662317484617233, 0.23855648934841156, 0.0007088357815518975, 0.017502622678875923, 0.0031497038435190916, 0.0013880734331905842, 0.0037794967647641897, 0.16661019623279572, 0.10283278673887253, 0.007486589718610048, 0.0008086023735813797, 0.0065869796089828014, 0.0626085102558136, 0.0005065072327852249, 0.009926673956215382, 0.00939871370792389, 0.002733776578679681, 0.021832671016454697, 0.0007065788377076387, 0.001540115918032825, 0.003206042107194662, 0.000578864652197808], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.308619", "n_pass": [213, 27, 24], "n_token": 65, "loss": [1.0113475322723389, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 28, 30, 47, 60, 64, 2, 14, 17, 33, 49, 54, 57, 37, 42, 6, 39, 52, 4, 19, 23, 27, 44, 50]}}
{"prediction": {"error_location": 0.3637285828590393, "repair_targets": [], "repair_candidates": [0.011360245756804943, 0.1570979505777359, 0.056323397904634476, 0.21070227026939392, 0.0024928092025220394, 0.0010312388185411692, 0.017393196001648903, 0.009945892728865147, 0.005040741991251707, 0.2152542769908905, 0.1521693915128708, 0.006605072412639856, 0.0025431441608816385, 0.0038486008998006582, 0.07110109180212021, 0.0009666693513281643, 0.012329880148172379, 0.021731773391366005, 0.006155067589133978, 0.013332599774003029, 0.0011051518376916647, 0.004425234626978636, 0.015519464388489723, 0.0015248535200953484], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.371591", "n_pass": [215, 28, 25], "n_token": 63, "loss": [1.027202844619751, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", "(", "req", "(", "req", ",", "list", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 26, 28, 45, 58, 62, 2, 14, 17, 31, 47, 52, 55, 35, 40, 6, 37, 50, 4, 19, 21, 25, 42, 48]}}
{"prediction": {"error_location": 0.35800695419311523, "repair_targets": [], "repair_candidates": [0.0079916687682271, 0.18289825320243835, 0.029271245002746582, 0.1553291380405426, 0.0006762094562873244, 0.00724810641258955, 0.001154740690253675, 0.003966099116951227, 0.0032835272140800953, 0.24776777625083923, 0.25382572412490845, 0.002418836345896125, 0.0015310065355151892, 0.0008843640680424869, 0.06005764380097389, 0.000987480627372861, 0.012599044479429722, 0.014876396395266056, 0.002213713014498353, 0.004313835874199867, 0.00032136583467945457, 0.0020619125571101904, 0.003966564312577248, 0.0003553747374098748], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.434204", "n_pass": [217, 29, 26], "n_token": 61, "loss": [0.8480962514877319, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", "(", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 24, 26, 43, 56, 60, 2, 14, 17, 29, 45, 50, 53, 33, 38, 6, 35, 48, 4, 19, 21, 23, 40, 46]}}
{"prediction": {"error_location": 0.4282293915748596, "repair_targets": [], "repair_candidates": [0.010110097005963326, 0.2796609103679657, 0.025512052699923515, 0.12049008905887604, 0.000596022407989949, 0.02017759159207344, 0.0019058824982494116, 0.001118165790103376, 0.005898755509406328, 0.24258051812648773, 0.18118305504322052, 0.0027865003794431686, 0.002050223760306835, 0.001329649006947875, 0.05529407039284706, 0.0026189808268100023, 0.01689974218606949, 0.014655576087534428, 0.0038267585914582014, 0.006514744833111763, 0.000504607567563653, 0.0012141781626269221, 0.002831573598086834, 0.00024028809275478125], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.493311", "n_pass": [236, 30, 27], "n_token": 59, "loss": [0.7974156141281128, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "=", "None", "self", "#NEWLINE#", "#INDENT#", "self", "(", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 22, 24, 41, 54, 58, 2, 12, 15, 27, 43, 48, 51, 31, 36, 6, 33, 46, 4, 17, 19, 21, 38, 44]}}
{"prediction": {"error_location": 0.450491726398468, "repair_targets": [], "repair_candidates": [0.011661611497402191, 0.1483345925807953, 0.03247625753283501, 0.12028442323207855, 0.0005965105374343693, 0.015406710095703602, 0.002201047260314226, 0.001175968674942851, 0.005484263878315687, 0.3260481357574463, 0.23600220680236816, 0.0020444521214812994, 0.002515399130061269, 0.00317253521643579, 0.06554306298494339, 0.002293652156367898, 0.0062626926228404045, 0.008126681670546532, 0.002014083554968238, 0.0053626312874257565, 0.0003567235544323921, 0.0007445269147865474, 0.001815129886381328, 7.671873754588887e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.551660", "n_pass": [238, 31, 28], "n_token": 57, "loss": [0.4580705165863037, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "#NEWLINE#", "#INDENT#", "self", "(", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 20, 22, 39, 52, 56, 2, 10, 13, 25, 41, 46, 49, 29, 34, 6, 31, 44, 4, 15, 17, 19, 36, 42]}}
{"prediction": {"error_location": 0.6325028538703918, "repair_targets": [], "repair_candidates": [0.03084820695221424, 0.08160287886857986, 0.07294968515634537, 0.047222185879945755, 0.029016777873039246, 0.10590088367462158, 0.004627731163054705, 0.002574505750089884, 0.006811920553445816, 0.11683372408151627, 0.1499851793050766, 0.0059073613956570625, 0.0050221639685332775, 0.0029736473225057125, 0.2958337664604187, 0.003051299136132002, 0.0062251463532447815, 0.012059947475790977, 0.002712230896577239, 0.011868285946547985, 0.00046246929559856653, 0.004401145037263632, 0.0009866227628663182, 0.0001222645805682987], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.611737", "n_pass": [309, 32, 29], "n_token": 56, "loss": [0.5375504493713379, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "#INDENT#", "self", "(", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 21, 38, 51, 55, 2, 10, 12, 24, 40, 45, 48, 28, 33, 6, 30, 43, 4, 14, 16, 18, 35, 41]}}
{"prediction": {"error_location": 0.5841774940490723, "repair_targets": [], "repair_candidates": [0.029267778620123863, 0.04800809919834137, 0.07263125479221344, 0.0859169065952301, 0.059978168457746506, 0.14407594501972198, 0.0034254328347742558, 0.002022509230300784, 0.004638077225536108, 0.10722649097442627, 0.12413214892148972, 0.005061327014118433, 0.0037144392263144255, 0.0031776614487171173, 0.2763018012046814, 0.0024154980201274157, 0.007302813697606325, 0.00619892030954361, 0.002032252959907055, 0.008069041185081005, 0.0003140523622278124, 0.0029555729124695063, 0.0009933648398146033, 0.00014042800466995686], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.669415", "n_pass": [310, 33, 30], "n_token": 55, "loss": [0.6571808457374573, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "(", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 18, 20, 37, 50, 54, 2, 10, 11, 23, 39, 44, 47, 27, 32, 6, 29, 42, 4, 13, 15, 17, 34, 40]}}
{"prediction": {"error_location": 0.5183104872703552, "repair_targets": [], "repair_candidates": [0.014847055077552795, 0.01873481087386608, 0.04605082422494888, 0.49863848090171814, 0.02889726124703884, 0.0028356045950204134, 0.001606434816494584, 0.0010729802306741476, 0.0022290879860520363, 0.13901068270206451, 0.10902810841798782, 0.0012870562495663762, 0.0017429047729820013, 0.0036534578539431095, 0.11603780090808868, 0.0012583716306835413, 0.0033415660727769136, 0.0030662091448903084, 0.0010538859060034156, 0.003592338878661394, 0.00016228151798713952, 0.0011106434976682067, 0.0006734193302690983, 6.879471038701013e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.727815", "n_pass": [312, 34, 31], "n_token": 54, "loss": [0.6059375405311584, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "(", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 17, 19, 36, 49, 53, 2, 10, 11, 22, 38, 43, 46, 26, 31, 6, 28, 41, 4, 12, 14, 16, 33, 39]}}
{"prediction": {"error_location": 0.5455626845359802, "repair_targets": [], "repair_candidates": [0.018246613442897797, 0.022448940202593803, 0.04821524769067764, 0.4978622794151306, 0.03779713436961174, 0.002953112591058016, 0.0019654107745736837, 0.001553720678202808, 0.0034144646488130093, 0.11366277933120728, 0.09493120014667511, 0.001526992185972631, 0.0016494070878252387, 0.0034184465184807777, 0.1333123743534088, 0.0014508479507640004, 0.004186357371509075, 0.003861822187900543, 0.0017948329914361238, 0.0030709721613675356, 0.00028010865207761526, 0.0015339850215241313, 0.0007667720783501863, 9.613151632947847e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.785847", "n_pass": [314, 35, 32], "n_token": 53, "loss": [0.5176833868026733, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "(", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 16, 18, 35, 48, 52, 2, 10, 11, 21, 37, 42, 45, 25, 30, 6, 27, 40, 4, 12, 13, 15, 32, 38]}}
{"prediction": {"error_location": 0.5958994626998901, "repair_targets": [], "repair_candidates": [0.04184654727578163, 0.02712298184633255, 0.0550139918923378, 0.24706733226776123, 0.13353906571865082, 0.016384826973080635, 0.0018987040966749191, 0.0018944119801744819, 0.004004353657364845, 0.1317177265882492, 0.1338188648223877, 0.003911605570465326, 0.0009134428109973669, 0.0017411960288882256, 0.18098771572113037, 0.0011686470825225115, 0.0072669824585318565, 0.0016969590215012431, 0.0013514223974198103, 0.0030994550324976444, 0.00044356967555359006, 0.0023766348604112864, 0.0005816465709358454, 0.00015184540825430304], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.843346", "n_pass": [316, 36, 33], "n_token": 52, "loss": [0.5016972422599792, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "=", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 17, 34, 47, 51, 2, 10, 11, 20, 36, 41, 44, 24, 29, 6, 26, 39, 4, 12, 13, 14, 31, 37]}}
{"prediction": {"error_location": 0.6055020689964294, "repair_targets": [], "repair_candidates": [0.02656339667737484, 0.035032615065574646, 0.024018624797463417, 0.15998929738998413, 0.10164029151201248, 0.2620433568954468, 0.017513185739517212, 0.0300839152187109, 0.005536616314202547, 0.10350308567285538, 0.09529417008161545, 0.003289205487817526, 0.0004966819542460144, 0.0014323482755571604, 0.12237171828746796, 0.000659230921883136, 0.004762888420373201, 0.0006116810254752636, 0.00028899742756038904, 0.002341202227398753, 0.00040992602589540184, 0.0011421887902542949, 0.0005311780259944499, 0.0004441793425939977], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.900852", "n_pass": [319, 37, 34], "n_token": 51, "loss": [0.39771997928619385, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 33, 46, 50, 2, 10, 11, 19, 35, 40, 43, 23, 28, 6, 25, 38, 4, 12, 13, 14, 30, 36]}}
{"prediction": {"error_location": 0.6718500256538391, "repair_targets": [], "repair_candidates": [0.03826981410384178, 0.031969521194696426, 0.043723076581954956, 0.1520773023366928, 0.08456477522850037, 0.030996179208159447, 0.005857539363205433, 0.0022837244905531406, 0.0021182361524552107, 0.19428865611553192, 0.21612757444381714, 0.0039454251527786255, 0.0016574234468862414, 0.0009035880211740732, 0.16244429349899292, 0.0020209408830851316, 0.016929036006331444, 0.002015375765040517, 0.0009280574740841985, 0.0026826343964785337, 0.001075970707461238, 0.0018380628898739815, 0.0007983697578310966, 0.00048443712876178324], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:36.959877", "n_pass": [321, 38, 35], "n_token": 50, "loss": [0.7259492874145508, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 32, 45, 49, 2, 10, 11, 18, 34, 39, 42, 22, 27, 6, 24, 37, 4, 12, 13, 14, 29, 35]}}
{"prediction": {"error_location": 0.48386505246162415, "repair_targets": [], "repair_candidates": [0.011552923358976841, 0.05475267022848129, 0.0595209002494812, 0.08082053810358047, 0.019254101440310478, 0.0038486707489937544, 0.003600065130740404, 0.005363678093999624, 0.005377865396440029, 0.04514200985431671, 0.02071988768875599, 0.0022061686031520367, 0.0047735595144331455, 0.0023017642088234425, 0.644512951374054, 0.005828456021845341, 0.016014672815799713, 0.0024314781185239553, 0.0038013500161468983, 0.005140713416039944, 0.0002738650655373931, 0.0008293161517940462, 0.000964308506809175, 0.0009681325173005462], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.017274", "n_pass": [322, 39, 36], "n_token": 49, "loss": [0.6102489829063416, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 31, 44, 48, 2, 10, 11, 17, 33, 38, 41, 21, 26, 6, 23, 36, 4, 12, 13, 14, 28, 34]}}
{"prediction": {"error_location": 0.5432155728340149, "repair_targets": [], "repair_candidates": [0.028722405433654785, 0.10018382966518402, 0.0616937056183815, 0.10648473352193832, 0.01568322815001011, 0.014714181423187256, 0.008757714182138443, 0.008320614695549011, 0.007112078834325075, 0.008540194481611252, 0.04946636036038399, 0.005401222035288811, 0.005359281320124865, 0.0012149325339123607, 0.5031828880310059, 0.005155651364475489, 0.040058840066194534, 0.008941089734435081, 0.006146245636045933, 0.006247776094824076, 0.001562228542752564, 0.0017165351891890168, 0.003024383680894971, 0.0023098879028111696], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.304467", "n_pass": [330, 44, 37], "n_token": 48, "loss": [1.0170562267303467, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "]", "#NEWLINE#", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 30, 43, 47, 2, 10, 11, 17, 32, 37, 40, 21, 25, 6, 23, 35, 4, 12, 13, 14, 27, 33]}}
{"prediction": {"error_location": 0.3616580367088318, "repair_targets": [], "repair_candidates": [0.04810011759400368, 0.06204748898744583, 0.09737935662269592, 0.1615573614835739, 0.018405485898256302, 0.010748377069830894, 0.00751143041998148, 0.007064021658152342, 0.0009930332889780402, 0.03850538656115532, 0.07540711760520935, 0.004800037946552038, 0.0024174507707357407, 0.008998142555356026, 0.3965095579624176, 0.0013430302496999502, 0.031007863581180573, 0.007446333300322294, 0.003592201042920351, 0.00848579965531826, 0.0033388480078428984, 0.00031260590185411274, 0.0030183831695467234, 0.0010105883702635765], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.420068", "n_pass": [334, 46, 38], "n_token": 46, "loss": [0.8201957941055298, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 28, 41, 45, 2, 10, 11, 17, 30, 35, 38, 21, 25, 6, 23, 33, 4, 12, 13, 14, 27, 31]}}
{"prediction": {"error_location": 0.44034549593925476, "repair_targets": [], "repair_candidates": [0.004623601213097572, 0.0037770417984575033, 0.0037023962941020727, 0.005198997911065817, 0.004190887790173292, 0.002112026559188962, 0.00048212517867796123, 1.4832820852461737e-05, 0.0009297691285610199, 0.0015613498399034142, 0.002337851794436574, 0.0003369636833667755, 8.237446309067309e-06, 0.0006423073937185109, 0.02848876267671585, 0.0008792667067609727, 0.9379327893257141, 0.000598474289290607, 1.4278603885031771e-05, 0.0005191162344999611, 0.0007569299777969718, 4.8060857807286084e-05, 0.0005218609003350139, 0.0003221968945581466], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.534252", "n_pass": [342, 48, 39], "n_token": 44, "loss": [1.268567681312561, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 15, 16, 28, 41, 43, 2, 10, 11, 17, 30, 35, 38, 21, 25, 6, 23, 33, 4, 12, 13, 14, 27, 31]}}
{"prediction": {"error_location": 0.28123408555984497, "repair_targets": [], "repair_candidates": [0.005622546654194593, 0.010988146997988224, 0.00563053647056222, 0.0034725037403404713, 0.006903181783854961, 0.006179625168442726, 0.0022476655431091785, 0.0030058391857892275, 0.002387756248936057, 0.0011934898793697357, 0.0018154078861698508, 0.0004760085139423609, 1.100003191822907e-05, 0.0006267580902203918, 0.03945421427488327, 0.003401293884962797, 0.9010933637619019, 0.00250783353112638, 8.912554039852694e-05, 0.0011004264233633876, 0.0008070829790085554, 3.546684092725627e-05, 0.0005818858626298606, 0.00036874457146041095], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.591135", "n_pass": [345, 49, 40], "n_token": 43, "loss": [0.8384615778923035, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 14, 15, 27, 40, 42, 1, 9, 10, 16, 29, 34, 37, 20, 24, 5, 22, 32, 3, 11, 12, 13, 26, 30]}}
{"prediction": {"error_location": 0.4323751926422119, "repair_targets": [], "repair_candidates": [0.028171077370643616, 0.044259898364543915, 0.014219389297068119, 0.003483181120827794, 0.03186236321926117, 0.029907144606113434, 0.11583899706602097, 0.020501019433140755, 0.014963062480092049, 0.001797356060706079, 0.0026029020082205534, 0.0021209167316555977, 6.447025953093544e-05, 0.000770825834479183, 0.08545410633087158, 0.005284696817398071, 0.5729922652244568, 0.008251449093222618, 0.0009750463650561869, 0.01023324579000473, 0.002959547797217965, 0.0004813374544028193, 0.0023155859671533108, 0.0004900709609501064], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.650175", "n_pass": [347, 50, 41], "n_token": 42, "loss": [0.6182420253753662, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 13, 14, 26, 39, 41, 1, 8, 9, 15, 28, 33, 36, 19, 23, 4, 21, 31, 2, 10, 11, 12, 25, 29]}}
{"prediction": {"error_location": 0.5388910174369812, "repair_targets": [], "repair_candidates": [0.03100605681538582, 0.08848191052675247, 0.02048671990633011, 0.0031610417645424604, 0.08162518590688705, 0.016247835010290146, 0.08385296911001205, 0.016827983781695366, 0.032612286508083344, 0.003455116180703044, 0.0042273299768567085, 0.003080981783568859, 9.484631300438195e-05, 0.0023544461000710726, 0.0718572586774826, 0.007640826981514692, 0.49061304330825806, 0.004782460164278746, 0.001315921195782721, 0.02307530678808689, 0.010266649536788464, 0.0016801212914288044, 0.0009940608870238066, 0.00025964531232602894], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.707593", "n_pass": [349, 51, 42], "n_token": 41, "loss": [0.3702933192253113, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "=", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 12, 13, 25, 38, 40, 1, 7, 8, 14, 27, 32, 35, 18, 22, 3, 20, 30, 2, 9, 10, 11, 24, 28]}}
{"prediction": {"error_location": 0.6905315518379211, "repair_targets": [], "repair_candidates": [0.06539967656135559, 0.04101894423365593, 0.02327268198132515, 0.002434212015941739, 0.0703442171216011, 0.017945067957043648, 0.06611315906047821, 0.029011579230427742, 0.024953842163085938, 0.0036359732039272785, 0.0048889522440731525, 0.004483875818550587, 0.00011760627967305481, 0.001258466742001474, 0.07612907886505127, 0.006388821639120579, 0.5284687876701355, 0.003689653007313609, 0.0024178107269108295, 0.01786651648581028, 0.004989813081920147, 0.004907655995339155, 0.00013578990183304995, 0.00012783645070157945], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.764751", "n_pass": [351, 52, 43], "n_token": 40, "loss": [0.35832783579826355, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "#NEWLINE#", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 11, 12, 24, 37, 39, 1, 6, 7, 13, 26, 31, 34, 17, 21, 3, 19, 29, 2, 8, 9, 10, 23, 27]}}
{"prediction": {"error_location": 0.6988440155982971, "repair_targets": [], "repair_candidates": [0.04986744746565819, 0.13798123598098755, 0.09565865248441696, 0.002206783276051283, 0.017153983935713768, 0.015239839442074299, 0.06781412661075592, 0.021977240219712257, 0.020176509395241737, 0.0014227534411475062, 0.002624072367325425, 0.00310638640075922, 0.00023050690651871264, 0.0050867837853729725, 0.03217814862728119, 0.00597017165273428, 0.4761725068092346, 0.005937347654253244, 0.011599858291447163, 0.024506641551852226, 0.0008414117619395256, 0.0020747354719787836, 5.846345811733045e-05, 0.00011448137956904247], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.821954", "n_pass": [352, 53, 44], "n_token": 39, "loss": [0.32250329852104187, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 23, 36, 38, 1, 5, 6, 12, 25, 30, 33, 16, 20, 3, 18, 28, 2, 7, 8, 9, 22, 26]}}
{"prediction": {"error_location": 0.7243334650993347, "repair_targets": [], "repair_candidates": [0.022688793018460274, 0.01005061436444521, 0.03948963060975075, 0.011138434521853924, 0.057537324726581573, 0.017762117087841034, 0.040984027087688446, 0.03698885068297386, 0.04686133936047554, 0.0056535410694777966, 0.012688559480011463, 0.0022567110136151314, 1.6984229660010897e-05, 0.0011814350727945566, 0.022337695583701134, 0.003074722131714225, 0.6529163718223572, 0.0003259010554756969, 0.0006432215450331569, 0.007460642606019974, 0.0004663417348638177, 0.007429855410009623, 2.361050974286627e-05, 2.327915899513755e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.881489", "n_pass": [362, 54, 45], "n_token": 38, "loss": [0.5923990607261658, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "_call_and_format", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 22, 35, 37, 1, 5, 6, 12, 24, 29, 32, 15, 19, 3, 17, 27, 2, 7, 8, 9, 21, 25]}}
{"prediction": {"error_location": 0.5529990196228027, "repair_targets": [], "repair_candidates": [0.01312924176454544, 0.008620533160865307, 0.21474210917949677, 0.00988595001399517, 0.003093363018706441, 0.0028252473566681147, 0.014126223511993885, 0.011672042310237885, 0.01522523071616888, 0.0038605632726103067, 0.004094040021300316, 0.00159246486146003, 4.240850466885604e-05, 0.0018094172701239586, 0.06388427317142487, 0.0032471914310008287, 0.6145208477973938, 0.0012121896725147963, 0.0008117784163914621, 0.009113463573157787, 0.0012081675231456757, 0.0011323709040880203, 8.42589870444499e-05, 6.65824263705872e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:37.939253", "n_pass": [363, 55, 46], "n_token": 37, "loss": [0.6896764039993286, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "(", "r", ",", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 21, 34, 36, 1, 5, 6, 12, 23, 28, 31, 14, 18, 3, 16, 26, 2, 7, 8, 9, 20, 24]}}
{"prediction": {"error_location": 0.501738429069519, "repair_targets": [], "repair_candidates": [0.009591256268322468, 0.015827320516109467, 0.052935078740119934, 0.00833023153245449, 0.002694418653845787, 0.0032468533609062433, 0.009380479343235493, 0.007684729527682066, 0.0038808283861726522, 0.0028795127291232347, 0.002363779814913869, 0.0008942651329562068, 3.748528615687974e-05, 0.0005717009771615267, 0.08418842405080795, 0.004136248957365751, 0.7825170755386353, 0.001950617996044457, 0.00034551662974990904, 0.004673741292208433, 0.0010745543986558914, 0.0006393795483745635, 8.497179805999622e-05, 7.147369615267962e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.109840", "n_pass": [368, 58, 47], "n_token": 36, "loss": [0.7767167091369629, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "(", "r", ",", "props", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 20, 33, 35, 1, 5, 6, 12, 22, 27, 30, 14, 17, 3, 16, 25, 2, 7, 8, 9, 19, 23]}}
{"prediction": {"error_location": 0.45991355180740356, "repair_targets": [], "repair_candidates": [0.01625390537083149, 0.03222103416919708, 0.27407118678092957, 0.0018973720725625753, 0.0005219624727033079, 0.0004292586527299136, 0.007233033888041973, 0.007621511351317167, 0.004868379328399897, 0.0013241800479590893, 0.001374386833049357, 0.0005008570151403546, 0.07425718009471893, 0.4288376271724701, 0.0038857439067214727, 0.00308215687982738, 0.07524597644805908, 0.001354708569124341, 0.0005910752806812525, 0.0641561895608902, 5.25631257914938e-05, 0.00016685285663697869, 4.602493572747335e-05, 6.7894293351855595e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.169239", "n_pass": [375, 59, 48], "n_token": 34, "loss": [0.933705747127533, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "(", "r", ",", "props", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 20, 31, 33, 1, 5, 6, 12, 22, 27, 28, 14, 17, 3, 16, 25, 2, 7, 8, 9, 19, 23]}}
{"prediction": {"error_location": 0.3930943012237549, "repair_targets": [], "repair_candidates": [0.00691485870629549, 0.012646160088479519, 0.23139473795890808, 0.0010531373554840684, 0.0001575950882397592, 0.00013932821457274258, 0.0013114770408719778, 0.004711125511676073, 0.0037621972151100636, 0.0003463792090769857, 0.00025014037964865565, 0.0002326200919924304, 0.02703864872455597, 0.04511328786611557, 0.0012846060562878847, 0.0007136993226595223, 0.6245195865631104, 0.0009263211977668107, 0.00019201419490855187, 0.03719225525856018, 4.556376370601356e-05, 4.863971480517648e-05, 2.9208192700025393e-06, 2.5576352982170647e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.227752", "n_pass": [392, 60, 49], "n_token": 33, "loss": [0.737914502620697, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", ",", "props", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 30, 32, 1, 5, 6, 12, 21, 26, 27, 13, 16, 3, 15, 24, 2, 7, 8, 9, 18, 22]}}
{"prediction": {"error_location": 0.47811004519462585, "repair_targets": [], "repair_candidates": [0.014703224413096905, 0.02968517318367958, 0.4310324490070343, 0.0026226521003991365, 0.03850715979933739, 0.010447029024362564, 0.018946228548884392, 0.0011142316507175565, 0.010990927927196026, 0.005363916512578726, 0.0035906322300434113, 0.0038722266908735037, 0.0700216069817543, 0.12159261107444763, 0.09023347496986389, 0.0028058195021003485, 0.13865365087985992, 0.0004259498091414571, 2.91408668999793e-05, 0.0043505774810910225, 0.00048480997793376446, 0.000485648080939427, 2.5356299374834634e-05, 1.5495383195229806e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.285114", "n_pass": [394, 61, 50], "n_token": 32, "loss": [0.913445234298706, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 29, 31, 1, 5, 6, 12, 20, 25, 26, 13, 15, 3, 14, 23, 2, 7, 8, 9, 17, 21]}}
{"prediction": {"error_location": 0.40113985538482666, "repair_targets": [], "repair_candidates": [0.0014471259200945497, 0.004614276345819235, 0.04515599086880684, 0.00023548101307824254, 6.529101665364578e-05, 0.0001086413103621453, 0.011106259189546108, 0.004184667021036148, 0.0030040873680263758, 0.0017441126983612776, 0.0015536436112597585, 0.0002102620928781107, 0.17220157384872437, 0.036471880972385406, 0.5893200039863586, 0.0004006200178992003, 0.12025730311870575, 7.604110578540713e-06, 2.715988921409007e-05, 0.007864447310566902, 9.416941793460865e-06, 9.291551577916835e-06, 5.815965096189757e-07, 1.932759801093198e-07], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.346734", "n_pass": [436, 62, 51], "n_token": 31, "loss": [0.4542619585990906, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 28, 30, 1, 5, 6, 12, 19, 24, 25, 13, 15, 3, 14, 22, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.634916365146637, "repair_targets": [], "repair_candidates": [0.0011866281274706125, 0.0008315438171848655, 0.00540781207382679, 0.0008272973936982453, 0.00040317504317499697, 0.0013807053910568357, 0.002112999791279435, 0.00111592304892838, 0.0010784229962155223, 0.002897757338359952, 0.003949870355427265, 0.0004584320995490998, 0.40788301825523376, 0.1373441368341446, 0.42591309547424316, 0.00010628809104673564, 4.17880728491582e-05, 8.781977521721274e-05, 0.0001982330286409706, 0.0067700715735554695, 2.0046970803377917e-06, 2.1248038137855474e-06, 5.117887553751643e-07, 4.5196000542091497e-07], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.404296", "n_pass": [439, 63, 52], "n_token": 30, "loss": [0.6730097532272339, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 27, 29, 1, 5, 6, 12, 19, 23, 24, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.5101707577705383, "repair_targets": [], "repair_candidates": [0.007752694189548492, 0.0022458264138549566, 0.07149896025657654, 0.005412898492068052, 0.0009593566646799445, 0.004946987610310316, 0.004598675761371851, 0.0016243658028542995, 0.0012989301467314363, 0.0440312996506691, 0.05701031535863876, 0.0017510774778202176, 0.3475605547428131, 0.07315517216920853, 0.35656920075416565, 0.0006550453836098313, 0.003912430256605148, 0.000254912709351629, 0.003197794547304511, 0.011457644402980804, 1.7647362255956978e-05, 1.0572974133538082e-05, 2.655942262208555e-05, 5.099027475807816e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.462387", "n_pass": [441, 64, 53], "n_token": 29, "loss": [0.4097727835178375, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 26, 28, 1, 5, 6, 12, 19, 22, 23, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.6638010740280151, "repair_targets": [], "repair_candidates": [0.013177318498492241, 0.0039155432023108006, 0.08847738057374954, 0.0038045234978199005, 0.002835552440956235, 0.006154652684926987, 0.010005046613514423, 0.006712622940540314, 0.006692073307931423, 0.03138551115989685, 0.053417839109897614, 0.002994831884279847, 0.30604684352874756, 0.0772651806473732, 0.3566480875015259, 0.020826591178774834, 0.0014100815169513226, 0.0003115815343335271, 0.002457553055137396, 0.004561395850032568, 0.000404237158363685, 0.0003987498057540506, 9.256297926185653e-05, 4.336004167271312e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.519907", "n_pass": [444, 65, 54], "n_token": 28, "loss": [0.9722455143928528, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 25, 27, 1, 5, 6, 12, 19, 22, 23, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.3782327473163605, "repair_targets": [], "repair_candidates": [0.006941798143088818, 0.006313982419669628, 0.06916773319244385, 0.001353009371086955, 0.002539324341341853, 0.0029612379148602486, 0.03313252702355385, 0.014234396629035473, 0.012802287004888058, 0.006967741996049881, 0.007826926186680794, 0.0008751712157391012, 0.0782981887459755, 0.14650942385196686, 0.5580711960792542, 0.03372666984796524, 0.0011610914953052998, 0.0008221574244089425, 0.005329453386366367, 0.00997726060450077, 0.0005050171748735011, 0.00046586256939917803, 1.5291017916752025e-05, 2.2573190108232666e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.577798", "n_pass": [445, 66, 55], "n_token": 27, "loss": [0.913040041923523, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 24, 26, 1, 5, 6, 12, 19, 22, 23, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.4013024568557739, "repair_targets": [], "repair_candidates": [0.0044547091238200665, 0.016649046912789345, 0.12368550151586533, 0.0028210582677274942, 0.0022526017855852842, 0.0010921914363279939, 0.027200831100344658, 0.018936406821012497, 0.017069073393940926, 0.01262304000556469, 0.019797610118985176, 0.0015069223009049892, 0.1839575618505478, 0.09447783976793289, 0.20591102540493011, 0.0038849120028316975, 0.0005974826635792851, 9.269692236557603e-05, 0.0007375318673439324, 0.26206907629966736, 6.94052068865858e-05, 5.579263961408287e-05, 3.342462514410727e-05, 2.4280363504658453e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.637228", "n_pass": [447, 67, 56], "n_token": 26, "loss": [0.7017985582351685, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "resp", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 24, 25, 1, 5, 6, 12, 19, 22, 23, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.4956929683685303, "repair_targets": [], "repair_candidates": [0.009643961675465107, 0.003735295031219721, 0.03449016809463501, 0.01019920315593481, 0.0029200802091509104, 0.0026237787678837776, 0.016385769471526146, 0.024108249694108963, 0.006117185112088919, 0.017841076478362083, 0.04382270947098732, 0.003616542089730501, 0.43401899933815, 0.06920784711837769, 0.26359981298446655, 0.011231890879571438, 0.011783785186707973, 0.0019520536297932267, 0.015257149934768677, 0.011159462854266167, 0.0005896982620470226, 0.00024650857085362077, 0.0028917849995195866, 0.0025569587014615536], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:53:38.696374", "n_pass": [465, 68, 57], "n_token": 25, "loss": [1.2874164581298828, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "req", "resp", "self", "req", "props", "self", "self", "resp", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 17, 23, 24, 1, 5, 6, 12, 18, 21, 22, 13, 15, 3, 14, 20, 2, 7, 8, 9, 16, 19]}}
{"prediction": {"error_location": 0.27598288655281067, "repair_targets": [], "repair_candidates": [0.0017179384594783187, 0.0124104218557477, 0.13524974882602692, 0.006813944783061743, 0.000265775976004079, 0.00029208019259385765, 0.025407500565052032, 0.043074969202280045, 0.030411919578909874, 0.005995914340019226, 0.009788695722818375, 0.0005798354977741838, 0.29827970266342163, 0.1331004798412323, 0.21414440870285034, 0.012092672288417816, 0.003080059075728059, 5.625298945233226e-05, 0.003111565485596657, 0.06363643705844879, 1.1250297575315926e-05, 6.582071364391595e-06, 0.0002598835853859782, 0.00021200552873779088], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'req', 'props', 'resp', 'self', 'self', 'req', 'req', 'req', 'resp', 'resp', 'self', 'r', 'props', 'r', 'req', 'resp', 'self', 'req', 'props', 'self', 'self', 'resp', 'resp']
