
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_windll_getnode", ",", "_netbios_getnode", ",", "_ipconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"], "error_location": [0], "repair_targets": [], "repair_candidates": [38, 53, 66, 9, 13, 21, 79, 95, 103, 63, 81], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "amrdraz/kodr/app/brython/www/src/Lib/uuid.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1543, "results": {"model": "transformer", "prob": {"loc": [[0.8751862049102783, 2.378802491875831e-06, 1.179830135811244e-07, 1.8969147674852138e-07, 1.9842258325297735e-07, 1.5887967208527698e-07, 4.995131348550785e-07, 1.160159186497367e-07, 2.459246672970039e-07, 5.408589458966162e-06, 1.1340625860611908e-07, 1.1222942930544377e-07, 1.354257932462133e-07, 0.0018702392699196935, 5.938612730460591e-07, 4.123631640595704e-07, 2.5891134214361955e-07, 1.982744635142808e-07, 2.384425101809029e-07, 1.4795929814681585e-07, 6.659286100330064e-08, 0.002091478556394577, 1.55002794599568e-07, 1.034832237678529e-07, 2.0613116191725567e-07, 3.4143261018471094e-07, 1.0035478226200212e-07, 1.4111738266819884e-07, 1.228626445026748e-07, 1.5845631423871964e-05, 3.4234423651469115e-07, 1.521265886594847e-07, 3.267855674948805e-07, 1.591603222550475e-06, 1.4184531949013035e-07, 2.0721103055620915e-07, 1.215778411278734e-07, 7.49369490904428e-08, 6.662707505711296e-07, 1.4128680447811348e-07, 4.2445196868357016e-07, 0.0028662208933383226, 1.9596582490066794e-07, 0.0005723859067074955, 1.5683455956150283e-07, 0.0009296356583945453, 1.4933138459127804e-07, 4.445559511623287e-07, 4.160430933097814e-07, 4.4720297864841996e-07, 3.288903371867491e-07, 5.165740049051237e-07, 2.472165760991629e-07, 2.4666680928930873e-06, 1.9248621185852244e-07, 7.762581617498654e-07, 0.014860899187624454, 3.159030654842354e-07, 0.004381879232823849, 3.869787121857371e-07, 3.8669466562168964e-07, 2.8596076617759536e-07, 3.3160077350657957e-07, 1.035441346175503e-05, 1.0924087234798208e-07, 3.531238519371982e-07, 0.0001985271810553968, 4.462001470528776e-07, 8.173773835551401e-07, 0.002686700550839305, 3.226800799893681e-07, 5.609999789157882e-07, 1.0298501820216188e-06, 1.047991190716857e-06, 9.051159395312425e-07, 7.599753644171869e-07, 1.939040657816804e-06, 2.192310603277292e-06, 1.1503400401124964e-06, 1.4940575056243688e-05, 2.364279083622023e-07, 0.0007891087443567812, 2.1544999981415458e-05, 4.804200216312893e-06, 2.6442498892720323e-06, 1.3105636753607541e-06, 6.076924819353735e-06, 7.283930472112843e-07, 6.703325539092475e-07, 4.249019411872723e-07, 9.665204743214417e-07, 5.782695779998903e-07, 3.09834888412297e-07, 3.27384469755998e-07, 3.349960877585545e-07, 0.00754518061876297, 4.462054221221479e-06, 2.3043899091135245e-06, 2.326134335817187e-06, 1.3035446499998216e-06, 4.882412554252369e-07, 3.817028755292995e-07, 8.42400197598181e-07, 0.08589062094688416]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3789735436439514, 0.0, 0.0, 0.0, 0.2782079577445984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028575489297509193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18306411802768707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05678607150912285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012900966219604015, 0.0, 0.0, 0.027339478954672813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026313994079828262, 0.0, 5.0045022362610325e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0018674662569537759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00592091353610158]], "target": [0.0]}, "loss": [0.13331842422485352, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:40:00.442157", "n_pass": [1, 1, 1], "n_token": 104, "loss": [0.13331842422485352, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_windll_getnode", ",", "_netbios_getnode", ",", "_ipconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 53, 66, 9, 13, 21, 79, 95, 103, 63, 81]}}
{"prediction": {"error_location": 0.8751862049102783, "repair_targets": [], "repair_candidates": [0.3789735436439514, 0.2782079577445984, 0.028575489297509193, 0.18306411802768707, 0.05678607150912285, 0.012900966219604015, 0.027339478954672813, 0.026313994079828262, 5.0045022362610325e-05, 0.0018674662569537759, 0.00592091353610158], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.502934", "n_pass": [23, 2, 2], "n_token": 91, "loss": [0.3687603175640106, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 40, 53, 9, 13, 21, 66, 82, 90, 50, 68]}}
{"prediction": {"error_location": 0.6915910243988037, "repair_targets": [], "repair_candidates": [0.4600854218006134, 0.36729875206947327, 0.11057880520820618, 0.00843600183725357, 0.02135877124965191, 0.009501210413873196, 0.007681985851377249, 0.013633739203214645, 0.00013855677389074117, 0.00034290956682525575, 0.0009438458364456892], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.560366", "n_pass": [45, 3, 3], "n_token": 84, "loss": [0.3784162104129791, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 40, 46, 9, 13, 21, 59, 75, 83, 43, 61]}}
{"prediction": {"error_location": 0.6849453449249268, "repair_targets": [], "repair_candidates": [0.2585090100765228, 0.33282652497291565, 0.05603957548737526, 0.03669918701052666, 0.0767914205789566, 0.22167567908763885, 0.0009230392752215266, 0.011475970037281513, 0.0024422735441476107, 0.0009130880935117602, 0.001704258262179792], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.616542", "n_pass": [47, 4, 4], "n_token": 77, "loss": [0.44250109791755676, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 40, 46, 9, 13, 21, 52, 68, 76, 43, 54]}}
{"prediction": {"error_location": 0.6424278020858765, "repair_targets": [], "repair_candidates": [0.32580244541168213, 0.3890134394168854, 0.11755278706550598, 0.036063481122255325, 0.035369694232940674, 0.08346772193908691, 0.00032630827627144754, 0.007489449344575405, 0.0035140682011842728, 0.0008380932849831879, 0.0005625775083899498], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.672989", "n_pass": [49, 5, 5], "n_token": 70, "loss": [0.28917014598846436, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 40, 46, 9, 13, 21, 52, 61, 69, 43, 54]}}
{"prediction": {"error_location": 0.7488847374916077, "repair_targets": [], "repair_candidates": [0.28240713477134705, 0.41352322697639465, 0.12119374424219131, 0.03279341757297516, 0.05311184003949165, 0.09011942893266678, 0.0002483548887539655, 0.004723713733255863, 0.0012370276963338256, 0.0005496154772117734, 9.252312884200364e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.732035", "n_pass": [56, 6, 6], "n_token": 64, "loss": [0.16028179228305817, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [32, 34, 40, 9, 13, 21, 46, 55, 63, 37, 48]}}
{"prediction": {"error_location": 0.8519036769866943, "repair_targets": [], "repair_candidates": [0.3571186065673828, 0.35457029938697815, 0.06555716693401337, 0.09689677506685257, 0.030542517080903053, 0.07868638634681702, 0.0003100162139162421, 0.014658395200967789, 0.0009051792440004647, 0.0006969686364755034, 5.775846875621937e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.787725", "n_pass": [57, 7, 7], "n_token": 58, "loss": [0.17489147186279297, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 28, 34, 9, 13, 21, 40, 49, 57, 31, 42]}}
{"prediction": {"error_location": 0.8395479917526245, "repair_targets": [], "repair_candidates": [0.4510944187641144, 0.3041071891784668, 0.027818914502859116, 0.07313420623540878, 0.06457573175430298, 0.05198017507791519, 0.0006774729117751122, 0.02376665733754635, 0.0019373963586986065, 0.0008162466692738235, 9.16321441764012e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.844535", "n_pass": [89, 8, 8], "n_token": 55, "loss": [0.19193576276302338, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 28, 34, 9, 13, 21, 37, 46, 54, 31, 39]}}
{"prediction": {"error_location": 0.8253597021102905, "repair_targets": [], "repair_candidates": [0.5344608426094055, 0.21696142852306366, 0.020269330590963364, 0.07399550825357437, 0.08237086236476898, 0.05292850360274315, 0.0006962473853491247, 0.01538874302059412, 0.0017229923978447914, 0.0010078833438456059, 0.00019764613534789532], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.900571", "n_pass": [93, 9, 9], "n_token": 51, "loss": [0.21484169363975525, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 28, 34, 9, 13, 21, 37, 46, 50, 31, 39]}}
{"prediction": {"error_location": 0.806669294834137, "repair_targets": [], "repair_candidates": [0.5490400791168213, 0.19941027462482452, 0.021013744175434113, 0.06434011459350586, 0.08791854977607727, 0.04958375543355942, 0.0010755188995972276, 0.024935513734817505, 0.0015774433268234134, 0.0006882781744934618, 0.00041670212522149086], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:00.958597", "n_pass": [96, 10, 10], "n_token": 48, "loss": [0.31735700368881226, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [23, 25, 31, 6, 10, 18, 34, 43, 47, 28, 36]}}
{"prediction": {"error_location": 0.7280709147453308, "repair_targets": [], "repair_candidates": [0.43947458267211914, 0.2750466763973236, 0.021445339545607567, 0.045624054968357086, 0.1456185132265091, 0.04660603776574135, 0.0028529842384159565, 0.019708961248397827, 0.0027040312997996807, 0.0005343143129721284, 0.0003845978935714811], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.013973", "n_pass": [97, 11, 11], "n_token": 45, "loss": [0.2854582965373993, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [20, 22, 28, 3, 7, 15, 31, 40, 44, 25, 33]}}
{"prediction": {"error_location": 0.7516696453094482, "repair_targets": [], "repair_candidates": [0.557941734790802, 0.2331802248954773, 0.006332907360047102, 0.026783965528011322, 0.06378050893545151, 0.09397348761558533, 0.00046876477426849306, 0.016834672540426254, 0.00036442771670408547, 0.0002220105961896479, 0.00011736360465874895], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.069023", "n_pass": [100, 12, 12], "n_token": 42, "loss": [0.25334206223487854, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [17, 19, 25, 3, 7, 12, 28, 37, 41, 22, 30]}}
{"prediction": {"error_location": 0.7762023210525513, "repair_targets": [], "repair_candidates": [0.35474300384521484, 0.23755402863025665, 0.00235285353846848, 0.03307812288403511, 0.10691488534212112, 0.24131889641284943, 0.0009123572963289917, 0.02182791568338871, 0.0007461023633368313, 0.0003798656689468771, 0.00017203397874254733], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.124383", "n_pass": [101, 13, 13], "n_token": 39, "loss": [0.5209837555885315, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 16, 22, 3, 7, 9, 25, 34, 38, 19, 27]}}
{"prediction": {"error_location": 0.5939359068870544, "repair_targets": [], "repair_candidates": [0.2597883939743042, 0.07512815296649933, 0.014272172003984451, 0.05816958472132683, 0.47671419382095337, 0.06923826783895493, 0.0011743820505216718, 0.04334355145692825, 0.001291382242925465, 0.0005827625864185393, 0.0002971224603243172], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.180213", "n_pass": [138, 14, 14], "n_token": 38, "loss": [0.6467881202697754, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [13, 15, 21, 3, 6, 8, 24, 33, 37, 18, 26]}}
{"prediction": {"error_location": 0.5237252712249756, "repair_targets": [], "repair_candidates": [0.2161845713853836, 0.36162328720092773, 0.01322754006832838, 0.045213647186756134, 0.27690088748931885, 0.036903269588947296, 0.0008002986432984471, 0.04740522429347038, 0.0008325409726239741, 0.0006005082977935672, 0.0003082531038671732], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.235971", "n_pass": [140, 15, 15], "n_token": 37, "loss": [0.5914477109909058, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 14, 20, 3, 6, 7, 23, 32, 36, 17, 25]}}
{"prediction": {"error_location": 0.5535253286361694, "repair_targets": [], "repair_candidates": [0.27614888548851013, 0.2525585889816284, 0.0748978778719902, 0.05004532262682915, 0.23731066286563873, 0.048247262835502625, 0.000662328558973968, 0.058936070650815964, 0.00041303577017970383, 0.0005355690373107791, 0.0002443275589030236], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.293656", "n_pass": [142, 16, 16], "n_token": 35, "loss": [0.6987299919128418, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [10, 12, 18, 3, 6, 7, 21, 30, 34, 15, 23]}}
{"prediction": {"error_location": 0.4972163736820221, "repair_targets": [], "repair_candidates": [0.23169490694999695, 0.19490867853164673, 0.07546181976795197, 0.04446979612112045, 0.34962472319602966, 0.03686165809631348, 0.0002727401733864099, 0.06614100188016891, 9.893433161778376e-05, 0.00029052194440737367, 0.00017529238539282233], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.570203", "n_pass": [154, 21, 17], "n_token": 33, "loss": [0.8160014748573303, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [10, 12, 18, 3, 6, 7, 21, 30, 32, 15, 23]}}
{"prediction": {"error_location": 0.442196249961853, "repair_targets": [], "repair_candidates": [0.215372234582901, 0.2138262838125229, 0.08356902748346329, 0.05018506571650505, 0.37661707401275635, 0.03416276350617409, 0.0002437815855955705, 0.02575378678739071, 0.00010745726467575878, 0.0001004809164442122, 6.208962440723553e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.629562", "n_pass": [157, 22, 18], "n_token": 32, "loss": [0.9531978368759155, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 11, 17, 2, 5, 6, 20, 29, 31, 14, 22]}}
{"prediction": {"error_location": 0.3855062425136566, "repair_targets": [], "repair_candidates": [0.4462028443813324, 0.13132548332214355, 0.05994877591729164, 0.02745889127254486, 0.2862185537815094, 0.019816536456346512, 7.057633774820715e-05, 0.02881748229265213, 4.3049032683484256e-05, 5.6895445595728233e-05, 4.096860357094556e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:01.967093", "n_pass": [172, 28, 19], "n_token": 30, "loss": [0.8795563578605652, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 11, 17, 2, 5, 6, 20, 27, 29, 14, 22]}}
{"prediction": {"error_location": 0.41496700048446655, "repair_targets": [], "repair_candidates": [0.40433982014656067, 0.13798043131828308, 0.06149507313966751, 0.028051672503352165, 0.28143367171287537, 0.06483735144138336, 5.927402162342332e-05, 0.021646816283464432, 8.120137499645352e-05, 4.088645800948143e-05, 3.376340100658126e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.355012", "n_pass": [215, 35, 20], "n_token": 29, "loss": [0.9936158061027527, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 11, 17, 2, 5, 6, 20, 26, 28, 14, 22]}}
{"prediction": {"error_location": 0.37023553252220154, "repair_targets": [], "repair_candidates": [0.354189932346344, 0.09460502862930298, 0.05104292929172516, 0.026690181344747543, 0.4213741421699524, 0.03250508010387421, 8.744556544115767e-05, 0.019427867606282234, 5.5136926675913855e-05, 1.098155462386785e-05, 1.1265113244007807e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.465298", "n_pass": [218, 37, 21], "n_token": 28, "loss": [0.5402041673660278, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 11, 17, 2, 5, 6, 20, 26, 27, 14, 22]}}
{"prediction": {"error_location": 0.5826292634010315, "repair_targets": [], "repair_candidates": [0.3526599407196045, 0.17180997133255005, 0.09590668231248856, 0.057863879948854446, 0.25765112042427063, 0.04050811380147934, 6.746502185706049e-05, 0.023374376818537712, 7.870695844758302e-05, 4.170761530986056e-05, 3.800253034569323e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.521255", "n_pass": [221, 38, 22], "n_token": 27, "loss": [0.7222442030906677, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "#NEWLINE#", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 10, 16, 1, 4, 5, 19, 25, 26, 13, 21]}}
{"prediction": {"error_location": 0.485661119222641, "repair_targets": [], "repair_candidates": [0.06089698523283005, 0.07317884266376495, 0.07114225625991821, 0.04412402957677841, 0.6920196413993835, 0.03018694370985031, 8.88358845259063e-05, 0.0281979963183403, 6.673225288977847e-05, 5.2291103202151135e-05, 4.542280294117518e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.576708", "n_pass": [223, 39, 23], "n_token": 26, "loss": [0.511458158493042, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "if", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 9, 15, 1, 3, 4, 18, 24, 25, 12, 20]}}
{"prediction": {"error_location": 0.599620521068573, "repair_targets": [], "repair_candidates": [0.05452750250697136, 0.07668743282556534, 0.10916183143854141, 0.11108359694480896, 0.5826912522315979, 0.04301293194293976, 8.109431655611843e-05, 0.022441022098064423, 7.837227894924581e-05, 0.00012449691712390631, 0.00011045372230000794], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.634426", "n_pass": [224, 40, 24], "n_token": 25, "loss": [0.20376817882061005, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 14, 1, 2, 3, 17, 23, 24, 11, 19]}}
{"prediction": {"error_location": 0.8156512975692749, "repair_targets": [], "repair_candidates": [0.09146669507026672, 0.13863256573677063, 0.1624329388141632, 0.11359375715255737, 0.3520398736000061, 0.051883865147829056, 0.0003410857170820236, 0.08883046358823776, 0.00014043350529391319, 0.0003424853493925184, 0.00029592920327559114], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.689814", "n_pass": [227, 41, 25], "n_token": 24, "loss": [0.2018018364906311, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "#INDENT#", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 3, 16, 22, 23, 10, 18]}}
{"prediction": {"error_location": 0.8172569274902344, "repair_targets": [], "repair_candidates": [0.07820379734039307, 0.16798557341098785, 0.17005468904972076, 0.06812308728694916, 0.32621511816978455, 0.03700301796197891, 0.0005610186490230262, 0.15145882964134216, 6.178023613756523e-05, 0.00016761195729486644, 0.0001654705120017752], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.744364", "n_pass": [228, 42, 26], "n_token": 23, "loss": [0.13631321489810944, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 12, 1, 2, 3, 15, 21, 22, 9, 17]}}
{"prediction": {"error_location": 0.8725693821907043, "repair_targets": [], "repair_candidates": [0.10326816886663437, 0.15018919110298157, 0.129189133644104, 0.11014927178621292, 0.16480936110019684, 0.09973670542240143, 0.0007971956511028111, 0.2413303703069687, 7.052057480905205e-05, 0.00023649328795727342, 0.0002236226573586464], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.799974", "n_pass": [230, 43, 27], "n_token": 22, "loss": [0.12057551741600037, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 11, 1, 2, 3, 14, 20, 21, 8, 16]}}
{"prediction": {"error_location": 0.886410117149353, "repair_targets": [], "repair_candidates": [0.12380865216255188, 0.5017789006233215, 0.21158352494239807, 0.017403164878487587, 0.007335654925554991, 0.10552440583705902, 0.0006555392174050212, 0.03181543946266174, 1.1627369531197473e-05, 4.5622386096511036e-05, 3.743216075235978e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.854970", "n_pass": [232, 44, 28], "n_token": 21, "loss": [0.19265660643577576, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "for", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 10, 1, 2, 3, 13, 19, 20, 7, 15]}}
{"prediction": {"error_location": 0.8247650861740112, "repair_targets": [], "repair_candidates": [0.14756804704666138, 0.041529566049575806, 0.045932359993457794, 0.015635406598448753, 0.007679848000407219, 0.5718363523483276, 0.10189510136842728, 0.06615881621837616, 0.0003734955389518291, 0.0008672659751027822, 0.000523678376339376], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.910385", "n_pass": [233, 45, 29], "n_token": 20, "loss": [0.1047208160161972, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "in", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 9, 1, 2, 3, 12, 18, 19, 6, 14]}}
{"prediction": {"error_location": 0.9005759358406067, "repair_targets": [], "repair_candidates": [0.16158902645111084, 0.2942166328430176, 0.1945611834526062, 0.21001999080181122, 0.09179490804672241, 0.011683589778840542, 0.007734892889857292, 0.028306668624281883, 5.941060226177797e-05, 1.942614107974805e-05, 1.4233016372600105e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:02.968186", "n_pass": [235, 46, 30], "n_token": 19, "loss": [0.13852937519550323, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "(", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 8, 1, 2, 3, 11, 17, 18, 6, 13]}}
{"prediction": {"error_location": 0.8706376552581787, "repair_targets": [], "repair_candidates": [0.21646836400032043, 0.05623525753617287, 0.05644580349326134, 0.1280830353498459, 0.07294990867376328, 0.09232278913259506, 0.34202736616134644, 0.009796425700187683, 0.025664405897259712, 3.797850240516709e-06, 2.863412419173983e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.023021", "n_pass": [236, 47, 31], "n_token": 18, "loss": [0.7141530513763428, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "+", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 10, 16, 17, 6, 12]}}
{"prediction": {"error_location": 0.4896065890789032, "repair_targets": [], "repair_candidates": [0.02879357524216175, 0.00041338318260386586, 0.01958557218313217, 0.22326432168483734, 0.3251720666885376, 0.004935051314532757, 0.39577314257621765, 0.0020162358414381742, 3.815252421190962e-05, 4.849138804274844e-06, 3.5045914046349935e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.077930", "n_pass": [238, 48, 32], "n_token": 17, "loss": [0.40962108969688416, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 9, 15, 16, 6, 11]}}
{"prediction": {"error_location": 0.6639018058776855, "repair_targets": [], "repair_candidates": [0.021593544632196426, 0.0012985403882339597, 0.015407131053507328, 0.08673577755689621, 0.29806846380233765, 0.016859689727425575, 0.5566257238388062, 0.0023877653293311596, 0.0010128157446160913, 5.996114396111807e-06, 4.506614914134843e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.133244", "n_pass": [239, 49, 33], "n_token": 16, "loss": [0.2671627104282379, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "=", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 14, 15, 6, 10]}}
{"prediction": {"error_location": 0.7655485272407532, "repair_targets": [], "repair_candidates": [0.027739042416214943, 0.0019903320353478193, 0.002973788185045123, 0.056182973086833954, 0.22686514258384705, 0.0028823299799114466, 0.6760411262512207, 0.0003796978562604636, 0.004892727825790644, 3.222473606001586e-05, 2.0584178855642676e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.188289", "n_pass": [241, 50, 34], "n_token": 15, "loss": [0.01622801274061203, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "getter", "(", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 13, 14, 6, 9]}}
{"prediction": {"error_location": 0.9839029312133789, "repair_targets": [], "repair_candidates": [0.07167436182498932, 0.0024786200374364853, 0.004681054502725601, 0.16161604225635529, 0.1559571474790573, 0.06133484095335007, 0.45366397500038147, 0.006622884888201952, 0.08044827729463577, 0.0009567986708134413, 0.0005658954032696784], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.243709", "n_pass": [243, 51, 35], "n_token": 14, "loss": [0.01895001530647278, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "getter", "#UNINDENT#", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 12, 13, 6, 9]}}
{"prediction": {"error_location": 0.9812282919883728, "repair_targets": [], "repair_candidates": [0.13101185858249664, 0.015183609910309315, 0.019004536792635918, 0.19270503520965576, 0.1876542866230011, 0.026144972071051598, 0.39913713932037354, 0.005864787846803665, 0.017888875678181648, 0.0034790621139109135, 0.001925853779539466], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.301056", "n_pass": [244, 52, 36], "n_token": 13, "loss": [0.001328301033936441, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "getter", "(", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 11, 12, 6, 9]}}
{"prediction": {"error_location": 0.9986724853515625, "repair_targets": [], "repair_candidates": [0.1520944982767105, 0.014873893931508064, 0.01642482727766037, 0.14723274111747742, 0.14646850526332855, 0.08575160801410675, 0.3494158983230591, 0.020444057881832123, 0.045104291290044785, 0.01287804078310728, 0.00931166298687458], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:40:03.355956", "n_pass": [245, 53, 37], "n_token": 12, "loss": [0.0008125579333864152, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "getter", "_node", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 10, 11, 6, 9]}}
{"prediction": {"error_location": 0.9991878867149353, "repair_targets": [], "repair_candidates": [0.22210901975631714, 0.06834021210670471, 0.06374259293079376, 0.1116882711648941, 0.11033190786838531, 0.07928779721260071, 0.10420931875705719, 0.05632613226771355, 0.06974002718925476, 0.05684158205986023, 0.05738307908177376], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', '_node', '_node', '_node', 'getters', 'getters', 'getter', 'getters', '_node', 'getter', '_node', '_node']
