
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "=", "4", ",", "default_flow_style", "=", "False", ")", "#NEWLINE#", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 45, 61, 11, 24, 35, 48, 64, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "fusic-com/flask-todo/utils/ext/bunch.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2604, "results": {"model": "transformer", "prob": {"loc": [[0.9053707718849182, 1.5167217497946694e-05, 2.383953415119322e-06, 2.9476535701178364e-07, 5.034765422351484e-07, 3.4461299946997315e-07, 4.448197330475523e-07, 4.949207550453139e-07, 3.4868844522861764e-07, 1.1631277629930992e-06, 3.507352346332482e-07, 4.695179995906074e-06, 1.6865373027030728e-06, 3.7775183869825923e-08, 5.776737452833913e-07, 2.384998083471146e-07, 2.9357656785578e-06, 5.0260077841812745e-06, 3.492995688247902e-07, 1.0789860738213974e-07, 4.167420399880939e-07, 9.579674042470288e-06, 4.149190147018089e-07, 1.8297440362857742e-07, 2.659998017406906e-07, 1.7465734458710358e-07, 6.365064564306522e-08, 4.4247326513868757e-07, 0.0009201304637826979, 7.693767543059948e-07, 3.6496894040283223e-07, 7.217204256448895e-07, 8.699974500814278e-07, 1.9424936908762902e-05, 2.826846412062878e-06, 0.02690279856324196, 1.5926910634789238e-07, 7.908275847512414e-07, 5.349252205633093e-07, 3.091071221206221e-07, 1.0377615922152472e-07, 1.403568489877216e-06, 4.160828268595651e-07, 1.0899196212221796e-07, 1.6052983937697718e-06, 0.034685056656599045, 1.5445940562131e-06, 2.7689998205460142e-06, 0.013928545638918877, 2.337736532354029e-06, 1.1914203241758514e-06, 5.180233983992366e-07, 6.665837304353772e-08, 5.048328262091673e-07, 6.450546266023593e-07, 3.1269232181330153e-07, 4.907679596044545e-08, 3.0742671697225887e-07, 2.78665993391769e-07, 4.825975352673595e-08, 9.261745503863494e-07, 0.005373029503971338, 6.61686897274194e-07, 6.082882464397699e-07, 0.012727217748761177, 6.462781243499194e-07]], "pointer": [[0.0, 0.0, 0.001960787456482649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016582608222961426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007584873586893082, 0.0, 0.0, 0.0, 0.9679674506187439, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00043822528095915914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007172853802330792, 0.0, 0.0, 0.0019651511684060097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017331367416772991, 0.0, 0.0, 0.002610365627333522, 0.0]], "target": [0.0]}, "loss": [0.09941081702709198, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:59:31.341949", "n_pass": [1, 1, 1], "n_token": 66, "loss": [0.09941081702709198, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "=", "4", ",", "default_flow_style", "=", "False", ")", "#NEWLINE#", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 45, 61, 11, 24, 35, 48, 64, 28]}}
{"prediction": {"error_location": 0.9053707718849182, "repair_targets": [], "repair_candidates": [0.001960787456482649, 0.016582608222961426, 0.007584873586893082, 0.9679674506187439, 0.00043822528095915914, 0.0007172853802330792, 0.0019651511684060097, 0.00017331367416772991, 0.002610365627333522], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.398756", "n_pass": [22, 2, 2], "n_token": 58, "loss": [0.0740007534623146, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 37, 53, 11, 16, 27, 40, 56, 20]}}
{"prediction": {"error_location": 0.92867112159729, "repair_targets": [], "repair_candidates": [0.022179190069437027, 0.09004469215869904, 0.017457423731684685, 0.8569589853286743, 0.000236167325056158, 0.0032869502902030945, 0.00482831709086895, 0.00032223991001956165, 0.004686035215854645], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.455776", "n_pass": [46, 3, 3], "n_token": 54, "loss": [0.20783358812332153, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 33, 49, 11, 16, 27, 36, 52, 20]}}
{"prediction": {"error_location": 0.81234210729599, "repair_targets": [], "repair_candidates": [0.015387109480798244, 0.03442759811878204, 0.04554197937250137, 0.8788033723831177, 0.000413223315263167, 0.017477432265877724, 0.0009871063521131873, 0.0004447514074854553, 0.006517449393868446], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.513818", "n_pass": [47, 4, 4], "n_token": 50, "loss": [0.08750618994235992, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 45, 11, 16, 27, 32, 48, 20]}}
{"prediction": {"error_location": 0.9162130951881409, "repair_targets": [], "repair_candidates": [0.006705703213810921, 0.03320303559303284, 0.005932244937866926, 0.932805597782135, 0.00044748239452019334, 0.006287640891969204, 0.008325116708874702, 0.0007565397536382079, 0.00553662097081542], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.569451", "n_pass": [50, 5, 5], "n_token": 46, "loss": [0.09121675044298172, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 41, 11, 16, 27, 32, 44, 20]}}
{"prediction": {"error_location": 0.912820041179657, "repair_targets": [], "repair_candidates": [0.004356834106147289, 0.04500068724155426, 0.007690830621868372, 0.9167312383651733, 0.0007325757760554552, 0.003059259383007884, 0.005764776840806007, 0.0016057624015957117, 0.015058130957186222], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.624495", "n_pass": [51, 6, 6], "n_token": 41, "loss": [0.09479942172765732, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 36, 11, 16, 27, 32, 39, 20]}}
{"prediction": {"error_location": 0.9095553755760193, "repair_targets": [], "repair_candidates": [0.01453353650867939, 0.08567875623703003, 0.005731432233005762, 0.8546971678733826, 0.00025628332514315844, 0.0006230884464457631, 0.0038916280027478933, 0.017565716058015823, 0.01702238619327545], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.679507", "n_pass": [54, 7, 7], "n_token": 37, "loss": [0.10571326315402985, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 25, 32, 7, 12, 23, 28, 35, 16]}}
{"prediction": {"error_location": 0.8996824026107788, "repair_targets": [], "repair_candidates": [0.013460613787174225, 0.20829924941062927, 0.019365008920431137, 0.7396852374076843, 0.0004396852455101907, 0.0001114969199988991, 0.002342215506359935, 0.001627773861400783, 0.014668774791061878], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.735101", "n_pass": [56, 8, 8], "n_token": 33, "loss": [0.04908480495214462, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 21, 28, 7, 8, 19, 24, 31, 12]}}
{"prediction": {"error_location": 0.9521005153656006, "repair_targets": [], "repair_candidates": [0.015921154990792274, 0.025735942646861076, 0.01629362441599369, 0.9344973564147949, 0.00014691487012896687, 8.309870463563129e-05, 0.00020155958191026002, 0.001016144989989698, 0.006104223895817995], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.791246", "n_pass": [82, 9, 9], "n_token": 31, "loss": [0.09860556572675705, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 19, 26, 7, 8, 17, 22, 29, 10]}}
{"prediction": {"error_location": 0.9061000347137451, "repair_targets": [], "repair_candidates": [0.001518613426014781, 0.008735109120607376, 0.009589387103915215, 0.9784557223320007, 9.274782541979221e-07, 3.1612896691513015e-06, 1.5476064163522096e-06, 0.0011901399120688438, 0.0005054392386227846], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.849670", "n_pass": [84, 10, 10], "n_token": 29, "loss": [0.021978730335831642, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 17, 24, 7, 8, 15, 20, 27, 10]}}
{"prediction": {"error_location": 0.9782610535621643, "repair_targets": [], "repair_candidates": [0.0007062770309858024, 0.004184603225439787, 0.0034078059252351522, 0.990715742111206, 1.3059231605438981e-05, 6.768233561160741e-06, 1.2977476217201911e-05, 0.00025012128753587604, 0.0007026317762210965], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.905384", "n_pass": [85, 11, 11], "n_token": 27, "loss": [0.030948391184210777, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 22, 7, 8, 13, 18, 25, 10]}}
{"prediction": {"error_location": 0.9695256352424622, "repair_targets": [], "repair_candidates": [0.001054182299412787, 0.0025806257035583258, 0.0022026789374649525, 0.9883677363395691, 0.000199868343770504, 1.3363999642024282e-05, 8.165055623976514e-05, 0.0004072483570780605, 0.00509255938231945], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:31.961163", "n_pass": [88, 12, 12], "n_token": 25, "loss": [0.660190999507904, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 20, 7, 8, 13, 16, 23, 10]}}
{"prediction": {"error_location": 0.5167525410652161, "repair_targets": [], "repair_candidates": [0.003055568551644683, 0.0011648753425106406, 0.0009506564820185304, 0.9940212368965149, 3.540024772519246e-05, 0.0002564356254879385, 3.2374357488151873e-06, 0.00014246274076867849, 0.00037003334728069603], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.016338", "n_pass": [90, 13, 13], "n_token": 23, "loss": [0.7578527927398682, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 18, 7, 8, 13, 16, 21, 10]}}
{"prediction": {"error_location": 0.46867167949676514, "repair_targets": [], "repair_candidates": [0.0008800060604698956, 0.0003577797906473279, 0.0003229728899896145, 0.9979257583618164, 7.906088285380974e-06, 0.0004117203352507204, 2.4454975573462434e-06, 8.880035602487624e-05, 2.6671184514270863e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.127009", "n_pass": [125, 15, 14], "n_token": 22, "loss": [0.685417890548706, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 18, 7, 8, 13, 16, 20, 10]}}
{"prediction": {"error_location": 0.5038796663284302, "repair_targets": [], "repair_candidates": [0.0005981919239275157, 0.0003590681590139866, 0.00036593354889191687, 0.9981862902641296, 7.590393124701222e-06, 0.00038880217471159995, 1.3864906804883503e-06, 9.146305819740519e-05, 1.287529016735789e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.184376", "n_pass": [126, 16, 15], "n_token": 21, "loss": [0.45359957218170166, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 18, 7, 8, 13, 16, 19, 10]}}
{"prediction": {"error_location": 0.6353371143341064, "repair_targets": [], "repair_candidates": [0.0009131391998380423, 0.0002030206669587642, 0.0002128708001691848, 0.9978606104850769, 1.2591116501425859e-05, 0.0006615780876018107, 1.2653426892939024e-06, 0.00013126614794600755, 3.6232784168532817e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.239699", "n_pass": [129, 17, 16], "n_token": 20, "loss": [0.2544652223587036, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 14, 17, 6, 7, 12, 15, 18, 9]}}
{"prediction": {"error_location": 0.7753310799598694, "repair_targets": [], "repair_candidates": [0.013745962642133236, 0.0005974920350126922, 0.0006019084248691797, 0.9842157959938049, 9.119197784457356e-05, 0.0002928592439275235, 9.623878577258438e-05, 0.00016723162843845785, 0.000191343468031846], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.295100", "n_pass": [131, 18, 17], "n_token": 19, "loss": [0.08956550806760788, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 13, 16, 5, 6, 11, 14, 17, 8]}}
{"prediction": {"error_location": 0.9143285751342773, "repair_targets": [], "repair_candidates": [0.009217879734933376, 0.003494380973279476, 0.0013078802730888128, 0.9828392863273621, 0.0002837835345417261, 0.0009796336526051164, 0.0002461771364323795, 0.0006119695608504117, 0.0010190873872488737], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.350052", "n_pass": [132, 19, 18], "n_token": 18, "loss": [0.06855025142431259, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 12, 15, 4, 5, 10, 13, 16, 7]}}
{"prediction": {"error_location": 0.9337466359138489, "repair_targets": [], "repair_candidates": [0.029058577492833138, 0.02381737157702446, 0.004016382619738579, 0.9398730993270874, 0.00012739677913486958, 0.0014620926231145859, 0.00023495739151258022, 0.0005355201428756118, 0.0008746717940084636], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.405195", "n_pass": [133, 20, 19], "n_token": 17, "loss": [0.054778482764959335, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 11, 14, 3, 4, 9, 12, 15, 6]}}
{"prediction": {"error_location": 0.9466948509216309, "repair_targets": [], "repair_candidates": [0.012415148317813873, 0.04137925058603287, 0.014972534961998463, 0.9226155877113342, 0.00037627038545906544, 0.0005644080229103565, 0.001178579404950142, 0.00022673395869787782, 0.006271502934396267], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.460470", "n_pass": [134, 21, 20], "n_token": 16, "loss": [0.0971139445900917, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 10, 13, 2, 3, 8, 11, 14, 5]}}
{"prediction": {"error_location": 0.9074525833129883, "repair_targets": [], "repair_candidates": [0.024652395397424698, 0.0027593751437962055, 0.01481708325445652, 0.9352957606315613, 0.0013225454604253173, 0.00036474657827056944, 0.002368046436458826, 0.00029948019073344767, 0.0181205403059721], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.571477", "n_pass": [139, 23, 21], "n_token": 15, "loss": [0.09940347820520401, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", ".", "options", "not in", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 9, 12, 2, 3, 7, 10, 13, 5]}}
{"prediction": {"error_location": 0.905377209186554, "repair_targets": [], "repair_candidates": [0.07011602073907852, 0.004085061140358448, 0.04006822407245636, 0.874252438545227, 0.00026067544240504503, 0.00463856291025877, 0.0012465415056794882, 0.0019920466002076864, 0.003340435680001974], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.625607", "n_pass": [140, 24, 22], "n_token": 14, "loss": [0.14650864899158478, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", ".", "options", "opts", "(", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 8, 11, 2, 3, 6, 9, 12, 5]}}
{"prediction": {"error_location": 0.8637181520462036, "repair_targets": [], "repair_candidates": [0.1002204492688179, 0.009935976006090641, 0.1666228324174881, 0.6621296405792236, 0.02622072957456112, 0.013020933605730534, 0.007319791708141565, 0.009844799526035786, 0.004684824962168932], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.680512", "n_pass": [142, 25, 23], "n_token": 13, "loss": [0.058772556483745575, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", ".", "options", "opts", "self", "opts", ")", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 10, 2, 3, 6, 8, 11, 5]}}
{"prediction": {"error_location": 0.9429212212562561, "repair_targets": [], "repair_candidates": [0.07441236823797226, 0.061698511242866516, 0.14962759613990784, 0.20438320934772491, 0.24026861786842346, 0.008016081526875496, 0.07003891468048096, 0.10579393804073334, 0.0857607051730156], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.735308", "n_pass": [145, 26, 24], "n_token": 12, "loss": [0.000856509490404278, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", ".", "options", "opts", "self", "opts", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 9, 2, 3, 6, 8, 10, 5]}}
{"prediction": {"error_location": 0.9991437196731567, "repair_targets": [], "repair_candidates": [0.3905932605266571, 0.07837209850549698, 0.056454554200172424, 0.09144320338964462, 0.0848478302359581, 0.017998982220888138, 0.06744634360074997, 0.02940410003066063, 0.18343961238861084], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.790137", "n_pass": [152, 27, 25], "n_token": 11, "loss": [0.03910249099135399, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", "options", "opts", "self", "opts", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 8, 2, 3, 5, 7, 9, 4]}}
{"prediction": {"error_location": 0.9616522789001465, "repair_targets": [], "repair_candidates": [0.02089524269104004, 0.24228481948375702, 0.1433834731578827, 0.16302520036697388, 0.16627666354179382, 0.10030195116996765, 0.090997613966465, 0.04053552821278572, 0.032299529761075974], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:59:32.847423", "n_pass": [166, 28, 26], "n_token": 10, "loss": [0.0012409137561917305, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", "options", "opts", "self", "opts", "self", "opts"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 8, 2, 3, 5, 7, 9, 4]}}
{"prediction": {"error_location": 0.9987599849700928, "repair_targets": [], "repair_candidates": [0.28324323892593384, 0.12460064888000488, 0.09233854711055756, 0.07008031010627747, 0.0858408659696579, 0.10133197903633118, 0.08110176771879196, 0.0853186845779419, 0.07614390552043915], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'opts', 'opts', 'options', 'opts', 'self', 'opts', 'self', 'opts']
