
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 16, 6, 24, 4, 22, 8, 26], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Alephbet/gimel/vendor/redis/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2874, "results": {"model": "transformer", "prob": {"loc": [[0.9998070597648621, 5.2443015192693565e-06, 1.2545535810204456e-07, 9.55243972811104e-09, 3.751883355107566e-07, 5.0080877223024345e-09, 2.6805676611729723e-07, 3.631241085599868e-09, 8.829265425447375e-07, 2.275829524833739e-09, 2.0066330819190625e-08, 1.6567366145636697e-08, 1.510540137417138e-08, 3.1831174140961593e-08, 2.763731821175952e-08, 1.0222678703541987e-08, 2.2103213481727835e-08, 6.781752404094732e-08, 2.314341829290356e-09, 3.525003222648593e-08, 5.668008640213884e-08, 2.0680937495853868e-07, 5.0238075345987454e-05, 2.935547982474418e-08, 0.00011217848805245012, 1.6342898589982724e-08, 2.3062961190589704e-05, 8.695261755065076e-08]], "pointer": [[0.0, 0.0, 0.366159051656723, 0.0, 0.10905905067920685, 0.0, 0.1645066887140274, 0.0, 0.29843834042549133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0365375392138958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0032961652614176273, 0.0, 0.0029291657265275717, 0.0, 0.019074002280831337, 0.0]], "target": [0.0]}, "loss": [0.00019298121333122253, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 16:07:16.205062", "n_pass": [1, 1, 1], "n_token": 28, "loss": [0.00019298121333122253, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 16, 6, 24, 4, 22, 8, 26]}}
{"prediction": {"error_location": 0.9998070597648621, "repair_targets": [], "repair_candidates": [0.366159051656723, 0.10905905067920685, 0.1645066887140274, 0.29843834042549133, 0.0365375392138958, 0.0032961652614176273, 0.0029291657265275717, 0.019074002280831337], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.260003", "n_pass": [23, 2, 2], "n_token": 25, "loss": [0.00019393471302464604, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 13, 6, 21, 4, 19, 8, 23]}}
{"prediction": {"error_location": 0.9998061060905457, "repair_targets": [], "repair_candidates": [0.6123653054237366, 0.09250915795564651, 0.12118850648403168, 0.09312523901462555, 0.05887599289417267, 0.004402263090014458, 0.004155267030000687, 0.013378270901739597], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.314248", "n_pass": [24, 3, 3], "n_token": 21, "loss": [0.0010059778578579426, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 17, 4, 15, 8, 19]}}
{"prediction": {"error_location": 0.9989944100379944, "repair_targets": [], "repair_candidates": [0.4942920207977295, 0.022672060877084732, 0.03841514512896538, 0.010785389691591263, 0.3764519691467285, 0.003277637530118227, 0.002288849325850606, 0.051816921681165695], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.372108", "n_pass": [44, 4, 4], "n_token": 19, "loss": [0.041205260902643204, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 15, 4, 13, 8, 17]}}
{"prediction": {"error_location": 0.959632158279419, "repair_targets": [], "repair_candidates": [0.8161566257476807, 0.043484628200531006, 0.01596740074455738, 0.043080542236566544, 0.05142277479171753, 0.01756111904978752, 0.002811103593558073, 0.009515756741166115], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.426899", "n_pass": [45, 5, 5], "n_token": 17, "loss": [0.29267042875289917, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 13, 4, 11, 8, 15]}}
{"prediction": {"error_location": 0.7462679743766785, "repair_targets": [], "repair_candidates": [0.002968760672956705, 0.9603813290596008, 0.0008175845723599195, 0.0019043005304411054, 0.0018186124507337809, 0.03194701671600342, 6.596600724151358e-05, 9.647939441492781e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.534736", "n_pass": [71, 7, 6], "n_token": 16, "loss": [0.1826530396938324, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 12, 4, 11, 8, 14]}}
{"prediction": {"error_location": 0.8330572247505188, "repair_targets": [], "repair_candidates": [0.0013300833525136113, 0.3251335322856903, 0.6102455258369446, 0.001354829641059041, 0.00036865193396806717, 0.026350824162364006, 0.03519073873758316, 2.5817615096457303e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.588911", "n_pass": [73, 8, 7], "n_token": 15, "loss": [0.1618719846010208, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", "offset", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 12, 4, 11, 8, 13]}}
{"prediction": {"error_location": 0.8505499362945557, "repair_targets": [], "repair_candidates": [0.0062491027638316154, 0.3585297167301178, 0.616980791091919, 0.0008234678534790874, 9.284484258387238e-05, 0.009941738098859787, 0.007334546186029911, 4.775270281243138e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.643038", "n_pass": [75, 9, 8], "n_token": 14, "loss": [0.00026890001026913524, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 12, 4, 11, 8, 13]}}
{"prediction": {"error_location": 0.9997312426567078, "repair_targets": [], "repair_candidates": [0.009723540395498276, 0.3527485132217407, 0.30942001938819885, 0.31335318088531494, 0.0006271685124374926, 0.010356499813497066, 0.002319029066711664, 0.0014519597170874476], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.697606", "n_pass": [77, 10, 9], "n_token": 13, "loss": [0.0034783119335770607, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 8, 5, 11, 3, 10, 7, 12]}}
{"prediction": {"error_location": 0.9965277314186096, "repair_targets": [], "repair_candidates": [0.04455548897385597, 0.4213489294052124, 0.5250858664512634, 0.0010539863724261522, 0.00022325650206767023, 0.004648496862500906, 0.0022619960363954306, 0.0008219573646783829], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.755944", "n_pass": [79, 11, 10], "n_token": 12, "loss": [0.05829876661300659, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", ",", "offset", ",", "value", "self", ".", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 4, 10, 2, 9, 6, 11]}}
{"prediction": {"error_location": 0.9433679580688477, "repair_targets": [], "repair_candidates": [0.04237942770123482, 0.06802407652139664, 0.698186457157135, 0.17442135512828827, 0.0002620124723762274, 0.014270150102674961, 0.0015113147674128413, 0.0009452137746848166], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.810028", "n_pass": [81, 12, 11], "n_token": 11, "loss": [0.1276218593120575, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", ",", "value", "self", ".", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 9, 2, 8, 5, 10]}}
{"prediction": {"error_location": 0.880186140537262, "repair_targets": [], "repair_candidates": [0.13440266251564026, 0.09365151822566986, 0.7026996612548828, 0.0033023026771843433, 0.0019620833918452263, 0.019156794995069504, 0.03907380625605583, 0.0057511040940880775], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.864514", "n_pass": [83, 13, 12], "n_token": 10, "loss": [0.0006958208978176117, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", ".", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 8, 2, 7, 4, 9]}}
{"prediction": {"error_location": 0.9993042945861816, "repair_targets": [], "repair_candidates": [0.5430594682693481, 0.11108208447694778, 0.04225577414035797, 0.054228778928518295, 0.09505369514226913, 0.06382029503583908, 0.07184992730617523, 0.018650008365511894], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:07:16.918670", "n_pass": [86, 14, 13], "n_token": 9, "loss": [0.9982482194900513, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", "name", "offset", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 7, 2, 6, 4, 8]}}
{"prediction": {"error_location": 0.368524432182312, "repair_targets": [], "repair_candidates": [0.3505924642086029, 0.39748045802116394, 0.021148568019270897, 0.023612994700670242, 0.1768694669008255, 0.009355170652270317, 0.005500389263033867, 0.015440466813743114], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'name', 'offset', 'value', 'self', 'name', 'offset', 'value']
