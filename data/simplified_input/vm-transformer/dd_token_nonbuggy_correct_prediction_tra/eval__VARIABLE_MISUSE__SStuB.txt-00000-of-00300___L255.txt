
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Informs cairo of the new size of the X Drawable underlying the surface.\\n        For a surface created for a Window (rather than a Pixmap), this\\n        function must be called each time the size of the window changes (for\\n        a subwindow, you are normally resizing the window yourself, but for a\\n        toplevel window, it is necessary to listen for\\n        :class:`xcffib.xproto.ConfigureNotifyEvent`'s).\\n\\n        A Pixmap can never change size, so it is never necessary to call this\\n        function on a surface created for a Pixmap.\\n\\n        :param width: integer\\n        :param height: integer\\n        \"", "#NEWLINE#", "cairo", ".", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 17, 26, 6, 23, 4, 21], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "SimonSapin/cairocffi/cairocffi/xcb.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 255, "results": {"model": "transformer", "prob": {"loc": [[0.9986716508865356, 7.164212092902744e-06, 3.55519915729019e-07, 2.725414738335985e-08, 2.4285125732603774e-07, 3.468376164050824e-08, 5.033509296481498e-06, 7.98074228924861e-09, 6.997911583539462e-08, 1.967832616855958e-07, 1.2007606642328028e-07, 1.7301674404279765e-07, 1.4089427224917017e-07, 1.0292726670968477e-08, 1.8558871772711427e-07, 6.843420941038403e-09, 7.38568814995233e-08, 0.00020528533787000924, 9.843245152296731e-07, 7.552240610664285e-09, 4.505788524511445e-07, 0.00042037019738927484, 9.625718888628398e-08, 0.0006850202917121351, 5.918808554383759e-08, 6.16788966567583e-08, 1.6041909134401067e-07, 1.40541601467703e-07, 1.3105771579091652e-08, 1.262169348592579e-06, 6.168899631120439e-07]], "pointer": [[0.0, 0.0, 0.4208102822303772, 0.0, 0.06291689723730087, 0.0, 0.41358885169029236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00174471247009933, 0.0, 0.0, 0.0, 0.005419311113655567, 0.0, 0.01148178894072771, 0.0, 0.0, 0.08403818309307098, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.001329253427684307, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:58:52.444137", "n_pass": [1, 1, 1], "n_token": 31, "loss": [0.001329253427684307, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Informs cairo of the new size of the X Drawable underlying the surface.\\n        For a surface created for a Window (rather than a Pixmap), this\\n        function must be called each time the size of the window changes (for\\n        a subwindow, you are normally resizing the window yourself, but for a\\n        toplevel window, it is necessary to listen for\\n        :class:`xcffib.xproto.ConfigureNotifyEvent`'s).\\n\\n        A Pixmap can never change size, so it is never necessary to call this\\n        function on a surface created for a Pixmap.\\n\\n        :param width: integer\\n        :param height: integer\\n        \"", "#NEWLINE#", "cairo", ".", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 17, 26, 6, 23, 4, 21]}}
{"prediction": {"error_location": 0.9986716508865356, "repair_targets": [], "repair_candidates": [0.4208102822303772, 0.06291689723730087, 0.41358885169029236, 0.00174471247009933, 0.005419311113655567, 0.01148178894072771, 0.08403818309307098], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.498950", "n_pass": [9, 2, 2], "n_token": 23, "loss": [0.008127118460834026, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 18, 6, 15, 4, 13]}}
{"prediction": {"error_location": 0.991905689239502, "repair_targets": [], "repair_candidates": [0.7212321758270264, 0.16404634714126587, 0.016258658841252327, 0.010467378422617912, 0.013723804615437984, 0.060298360884189606, 0.013973225839436054], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.553685", "n_pass": [21, 3, 3], "n_token": 19, "loss": [0.039198897778987885, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 18, 6, 15, 4, 13]}}
{"prediction": {"error_location": 0.9615594148635864, "repair_targets": [], "repair_candidates": [0.04561025649309158, 0.2897565960884094, 0.2158563882112503, 0.0006377898389473557, 0.035304147750139236, 0.412344753742218, 0.0004900416824966669], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.609401", "n_pass": [40, 4, 4], "n_token": 17, "loss": [0.13669905066490173, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 16, 6, 13, 4, 11]}}
{"prediction": {"error_location": 0.8722328543663025, "repair_targets": [], "repair_candidates": [0.176945760846138, 0.07314813137054443, 0.0144214341416955, 0.2120373547077179, 0.11044754087924957, 0.3958679139614105, 0.017131904140114784], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.667140", "n_pass": [41, 5, 5], "n_token": 15, "loss": [0.542915403842926, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 14, 6, 11, 4, 9]}}
{"prediction": {"error_location": 0.5810518264770508, "repair_targets": [], "repair_candidates": [0.018040645867586136, 0.857829749584198, 0.0008046242292039096, 0.005361606832593679, 0.11195464432239532, 0.005868567153811455, 0.0001401647605234757], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.884547", "n_pass": [70, 9, 6], "n_token": 14, "loss": [0.31623154878616333, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", ",", "height", "self", ".", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 13, 5, 10, 3, 8]}}
{"prediction": {"error_location": 0.7288905382156372, "repair_targets": [], "repair_candidates": [0.013563760556280613, 0.8153821229934692, 0.12790913879871368, 0.00011818004713859409, 0.035030387341976166, 0.007966297678649426, 3.0145842174533755e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:52.992528", "n_pass": [73, 11, 7], "n_token": 13, "loss": [0.012218154035508633, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", ".", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 12, 4, 9, 3, 7]}}
{"prediction": {"error_location": 0.9878562092781067, "repair_targets": [], "repair_candidates": [0.5688902139663696, 0.1151140034198761, 0.057021498680114746, 0.01893479749560356, 0.18696525692939758, 0.05049801617860794, 0.002576264552772045], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:53.050318", "n_pass": [76, 12, 8], "n_token": 12, "loss": [0.6320279240608215, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 11, 4, 8, 3, 6]}}
{"prediction": {"error_location": 0.5315127968788147, "repair_targets": [], "repair_candidates": [0.029489412903785706, 0.5688990950584412, 0.2430458515882492, 0.004404724575579166, 0.12241146713495255, 0.03138839453458786, 0.00036107422783970833], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:53.103901", "n_pass": [78, 13, 9], "n_token": 11, "loss": [0.1429848074913025, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", "width", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 10, 4, 7, 3, 6]}}
{"prediction": {"error_location": 0.8667672276496887, "repair_targets": [], "repair_candidates": [0.03095691092312336, 0.5403748750686646, 0.2273983210325241, 0.021461373195052147, 0.10966695100069046, 0.06919447332620621, 0.0009470772347413003], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:58:53.157656", "n_pass": [80, 14, 10], "n_token": 10, "loss": [0.07242903858423233, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 9, 4, 7, 3, 6]}}
{"prediction": {"error_location": 0.930131733417511, "repair_targets": [], "repair_candidates": [0.3299090266227722, 0.20249193906784058, 0.2826794385910034, 0.0810558944940567, 0.03727990761399269, 0.057086169719696045, 0.009497571736574173], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', ',', 'width', 'height', 'self', 'width', 'height', '#NEWLINE#', 'self']
