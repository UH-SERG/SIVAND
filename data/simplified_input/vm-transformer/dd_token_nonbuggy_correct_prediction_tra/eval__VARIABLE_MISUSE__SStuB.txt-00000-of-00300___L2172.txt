
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 2, 12], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "StackStorm/st2/st2tests/st2tests/mocks/sensor.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2172, "results": {"model": "transformer", "prob": {"loc": [[0.8302204608917236, 0.00017636024858802557, 0.0001220013145939447, 8.920079608287779e-07, 1.3771485100733116e-05, 8.65598281052371e-07, 9.68897802522406e-06, 8.444672857876867e-06, 4.872648787568323e-06, 4.079785867361352e-06, 2.7487169063533656e-05, 2.2163142148201587e-06, 0.16914936900138855, 6.4404898694192525e-06, 0.00025306976749561727]], "pointer": [[0.0, 0.0, 0.00019509500998537987, 0.0, 0.999798595905304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.3432285060116556e-06, 0.0, 0.0]], "target": [0.0]}, "loss": [0.18606401979923248, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:50:48.228075", "n_pass": [1, 1, 1], "n_token": 15, "loss": [0.18606401979923248, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 12]}}
{"prediction": {"error_location": 0.8302204608917236, "repair_targets": [], "repair_candidates": [0.00019509500998537987, 0.999798595905304, 6.3432285060116556e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:50:48.661286", "n_pass": [46, 9, 2], "n_token": 14, "loss": [0.5899211168289185, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ":", "#NEWLINE#", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 11]}}
{"prediction": {"error_location": 0.5543709993362427, "repair_targets": [], "repair_candidates": [4.2104078602278605e-05, 0.9999572038650513, 7.430071491398849e-07], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:50:48.715446", "n_pass": [47, 10, 3], "n_token": 13, "loss": [0.6286217570304871, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ":", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 10]}}
{"prediction": {"error_location": 0.533326268196106, "repair_targets": [], "repair_candidates": [0.0004715050745289773, 0.999519944190979, 8.610365512140561e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:50:48.933864", "n_pass": [51, 14, 4], "n_token": 12, "loss": [0.19859503209590912, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ":", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 9]}}
{"prediction": {"error_location": 0.8198816776275635, "repair_targets": [], "repair_candidates": [0.000455443630926311, 0.9995019435882568, 4.2706698877736926e-05], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'def get_logger(', 'self', ',', 'name', ':', '#INDENT#', "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", '#NEWLINE#', 'self', '.', '_logger']
