
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"], "error_location": [0], "repair_targets": [], "repair_candidates": [11, 85, 116, 2, 56, 50, 68, 19, 38, 90, 109, 4, 29, 31, 61, 100, 102], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "weblabdeusto/weblabdeusto/tools/wcloud/wcloud/actions/redis_actions.py", "license": "bsd-2-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 358, "results": {"model": "transformer", "prob": {"loc": [[0.8894591927528381, 4.46279864263488e-06, 1.072158056558692e-06, 2.1564252961070451e-07, 6.768402727175271e-07, 2.090308441893285e-07, 2.7078323228124646e-07, 3.1969997849046194e-07, 2.967002785680961e-07, 6.906150815666479e-07, 2.971409287511051e-07, 7.115831522241933e-06, 6.216321821739257e-07, 4.2859169298026245e-06, 4.4522624875753536e-07, 3.860887716200523e-07, 8.560224955544982e-07, 1.0345592045268859e-06, 6.353240564749285e-07, 3.899927378370194e-06, 2.6143513309762056e-07, 4.9733010598629335e-08, 1.8113728117441497e-07, 1.69502634150831e-08, 1.6566433203024644e-07, 3.1688213653069397e-07, 7.55527253204491e-07, 4.45174882770516e-05, 2.2968102086906583e-07, 1.450765978461277e-07, 4.335406345035153e-07, 0.0009569469257257879, 1.5472615189082717e-07, 2.277842440889799e-06, 6.535694296871952e-07, 2.1089505025884137e-05, 4.55438993185453e-07, 4.948021796735702e-07, 8.695315045770258e-08, 1.6839052818795608e-07, 8.014931296429495e-08, 1.039694552673609e-06, 3.246980895710294e-06, 1.6756815739427111e-06, 1.037070319398481e-06, 3.831976755463984e-06, 3.4786935430020094e-05, 4.3995734699819877e-07, 1.2104765119147487e-06, 7.873829304116953e-07, 2.314386392754386e-06, 2.2382279496468982e-07, 1.1309539615922404e-07, 3.327458557578211e-07, 2.108432362035728e-08, 6.238967671379214e-07, 0.0020432104356586933, 9.770663922381573e-08, 7.518034408349195e-07, 1.6966811244856217e-06, 5.103312332721543e-07, 0.08300091326236725, 2.135692284355173e-06, 1.0306605418008985e-06, 1.8695164953896892e-06, 5.250807362244814e-07, 1.5423681816173485e-06, 5.124808467371622e-06, 2.888693188651814e-06, 1.0668663890101016e-06, 7.542411850636199e-08, 6.8098242991254665e-06, 4.280468147044303e-06, 2.4012061317080224e-07, 4.646528395824134e-06, 1.9825183699140325e-06, 7.781325166433817e-07, 2.1313756803920114e-07, 2.6831853006115125e-07, 2.4721076741229808e-08, 4.6999210212561593e-07, 0.00012839016562793404, 5.016443992644781e-06, 3.431903451200924e-06, 1.1342705192873836e-06, 2.1364458007155918e-06, 5.634652779917815e-07, 1.1486236871860456e-05, 6.975095061534375e-07, 6.474896849795186e-07, 1.9382796381250955e-05, 7.007184308349679e-07, 6.040535822648962e-07, 6.086467010391061e-07, 4.0858648020503097e-08, 1.151574679170153e-06, 5.126370297148242e-07, 2.9549667033279547e-06, 3.601407661335543e-05, 4.6235928152782435e-07, 1.600074455154754e-07, 5.212697828937962e-07, 0.0028557893820106983, 4.901876309304498e-07, 1.1578449630178511e-06, 5.527149937734066e-07, 8.491471089655533e-05, 1.4986557062002248e-06, 1.7507097709312802e-06, 4.0216468732978683e-07, 7.114633717719698e-07, 5.777199021395063e-07, 1.5356306903413497e-05, 1.1621821613516659e-05, 2.829993718478363e-06, 1.0051763865703833e-06, 0.011842620559036732, 1.0809714694914874e-05, 4.417220225150231e-06, 2.276433178849402e-06, 4.063833330292255e-05, 2.619881115606404e-06, 3.3418825751141412e-06, 6.511155334010255e-06, 0.009240210056304932]], "pointer": [[0.0, 0.0, 0.2033160775899887, 0.0, 0.045675091445446014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17864227294921875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17909951508045197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015062657184898853, 0.0, 0.003979183733463287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14170849323272705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013666625134646893, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0533721037209034, 0.0, 0.0, 0.0, 0.0, 0.0046592215076088905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003370728809386492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03859864920377731, 0.0, 0.0, 0.0, 0.0, 0.07981841266155243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001167667331174016, 0.0, 2.7614822101895697e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04019973799586296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006696216878481209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.11714164167642593, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 16:19:00.404738", "n_pass": [1, 1, 1], "n_token": 125, "loss": [0.11714164167642593, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 85, 116, 2, 56, 50, 68, 19, 38, 90, 109, 4, 29, 31, 61, 100, 102]}}
{"prediction": {"error_location": 0.8894591927528381, "repair_targets": [], "repair_candidates": [0.2033160775899887, 0.045675091445446014, 0.17864227294921875, 0.17909951508045197, 0.015062657184898853, 0.003979183733463287, 0.14170849323272705, 0.013666625134646893, 0.0533721037209034, 0.0046592215076088905, 0.0003370728809386492, 0.03859864920377731, 0.07981841266155243, 0.001167667331174016, 2.7614822101895697e-05, 0.04019973799586296, 0.0006696216878481209], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.468813", "n_pass": [47, 2, 2], "n_token": 117, "loss": [0.18675893545150757, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 77, 108, 2, 48, 42, 60, 19, 30, 82, 101, 4, 21, 23, 53, 92, 94]}}
{"prediction": {"error_location": 0.8296433687210083, "repair_targets": [], "repair_candidates": [0.0628037378191948, 0.04663975164294243, 0.09926439076662064, 0.11714997887611389, 0.01166083849966526, 0.02448655292391777, 0.024344101548194885, 0.07356857508420944, 0.015296916477382183, 0.005224303342401981, 0.0055201067589223385, 0.024075942113995552, 0.43199580907821655, 0.002530221361666918, 2.0797377146664076e-05, 0.05461674928665161, 0.0008012042380869389], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.527734", "n_pass": [53, 3, 3], "n_token": 109, "loss": [0.16849473118782043, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 69, 100, 2, 48, 42, 60, 19, 30, 74, 93, 4, 21, 23, 53, 84, 86]}}
{"prediction": {"error_location": 0.8449357748031616, "repair_targets": [], "repair_candidates": [0.06088126823306084, 0.06306242942810059, 0.14859531819820404, 0.1717420220375061, 0.011450530029833317, 0.11855637282133102, 0.04617845267057419, 0.10889890044927597, 0.007542236242443323, 0.00820084847509861, 0.009271294809877872, 0.03769746795296669, 0.19415132701396942, 0.002599345287308097, 5.945325756329112e-05, 0.01078285463154316, 0.0003299091476947069], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.585809", "n_pass": [54, 4, 4], "n_token": 101, "loss": [0.2316289097070694, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 61, 92, 2, 48, 42, 60, 19, 30, 66, 85, 4, 21, 23, 53, 76, 78]}}
{"prediction": {"error_location": 0.7932403683662415, "repair_targets": [], "repair_candidates": [0.025923991575837135, 0.01707131788134575, 0.02403239719569683, 0.027094600722193718, 0.0038456860929727554, 0.026215923950076103, 0.0073690954595804214, 0.10961025208234787, 0.003955557476729155, 0.001958486856892705, 0.7341668605804443, 0.003719526110216975, 0.00920309778302908, 0.00041692820377647877, 8.13325314084068e-05, 0.00513950502499938, 0.00019549067656043917], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.644198", "n_pass": [59, 5, 5], "n_token": 93, "loss": [0.5744715929031372, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 61, 92, 2, 48, 42, 60, 19, 30, 66, 85, 4, 21, 23, 53, 76, 78]}}
{"prediction": {"error_location": 0.5630022287368774, "repair_targets": [], "repair_candidates": [0.020556779578328133, 0.009792175143957138, 0.02352250926196575, 0.06087184324860573, 0.003325456753373146, 0.012720758095383644, 0.008993945084512234, 0.20551186800003052, 0.0029121714178472757, 0.0010936567559838295, 0.19524994492530823, 0.0003445631009526551, 0.05903787910938263, 0.0004824287025257945, 3.5452612792141736e-05, 0.39546746015548706, 8.117536344798282e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.705960", "n_pass": [98, 6, 6], "n_token": 90, "loss": [0.5869463682174683, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 58, 89, 2, 45, 39, 57, 16, 27, 63, 82, 4, 18, 20, 50, 73, 75]}}
{"prediction": {"error_location": 0.556022584438324, "repair_targets": [], "repair_candidates": [0.014856327325105667, 0.006102154031395912, 0.01842251792550087, 0.04780416190624237, 0.003734718542546034, 0.0008000328671187162, 0.006738940253853798, 0.3164221942424774, 0.002507254248484969, 0.0013775801053270698, 0.30209970474243164, 0.00027032880461774766, 0.03482508286833763, 0.0002610950905364007, 1.6965324903139845e-05, 0.24369166791439056, 6.924832996446639e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.764003", "n_pass": [100, 7, 7], "n_token": 86, "loss": [0.677268385887146, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 54, 85, 2, 41, 35, 53, 12, 23, 59, 78, 4, 14, 16, 46, 69, 71]}}
{"prediction": {"error_location": 0.508002758026123, "repair_targets": [], "repair_candidates": [0.019687898457050323, 0.009858322329819202, 0.02606663480401039, 0.1603410542011261, 0.004891101270914078, 0.0008072002092376351, 0.023703522980213165, 0.27909308671951294, 0.0061423201113939285, 0.0029186299070715904, 0.20073334872722626, 0.0008200082811526954, 0.07541096955537796, 0.0005367506528273225, 1.098823850043118e-05, 0.18892686069011688, 5.130047065904364e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.822361", "n_pass": [103, 8, 8], "n_token": 82, "loss": [0.7255772352218628, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 50, 81, 2, 37, 31, 49, 12, 19, 55, 74, 4, 14, 16, 42, 65, 67]}}
{"prediction": {"error_location": 0.484045147895813, "repair_targets": [], "repair_candidates": [0.03551780432462692, 0.013156539760529995, 0.02783972956240177, 0.09149658679962158, 0.007102977018803358, 0.0015911346999928355, 0.03141709789633751, 0.36414578557014465, 0.010172851383686066, 0.003415752202272415, 0.1718924194574356, 0.0006380914128385484, 0.17211797833442688, 0.0005248606321401894, 1.5797078958712518e-05, 0.06884434074163437, 0.00011035213537979871], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.938746", "n_pass": [106, 10, 9], "n_token": 78, "loss": [0.6972975134849548, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 46, 77, 2, 33, 27, 45, 12, 19, 51, 70, 4, 14, 16, 38, 61, 63]}}
{"prediction": {"error_location": 0.4979291260242462, "repair_targets": [], "repair_candidates": [0.0274213794618845, 0.010631111450493336, 0.04458332061767578, 0.22018170356750488, 0.006526510696858168, 0.00166626600548625, 0.05845493823289871, 0.3307238519191742, 0.009349526837468147, 0.0025448529049754143, 0.06368733197450638, 0.0006331342156045139, 0.1527324616909027, 0.0011143650626763701, 2.4446700990665704e-05, 0.06953568756580353, 0.00018906690820585936], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:00.996809", "n_pass": [109, 11, 10], "n_token": 74, "loss": [0.769884467124939, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 73, 2, 33, 27, 41, 12, 19, 47, 66, 4, 14, 16, 34, 57, 59]}}
{"prediction": {"error_location": 0.4630664885044098, "repair_targets": [], "repair_candidates": [0.05602338910102844, 0.004772747866809368, 0.048964064568281174, 0.39152589440345764, 0.0026034621987491846, 0.0003331533807795495, 0.08836998790502548, 0.16274581849575043, 0.019891422241926193, 0.00045428972225636244, 0.02160220593214035, 0.0007794942939653993, 0.16436852514743805, 0.0005266036605462432, 1.445899124519201e-05, 0.03689781203866005, 0.00012667592091020197], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.516953", "n_pass": [176, 20, 11], "n_token": 72, "loss": [0.8214985132217407, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 71, 2, 33, 27, 41, 12, 19, 47, 64, 4, 14, 16, 34, 55, 57]}}
{"prediction": {"error_location": 0.4397720992565155, "repair_targets": [], "repair_candidates": [0.058451902121305466, 0.00511177396401763, 0.04022721201181412, 0.3970998227596283, 0.0025407285429537296, 0.00035898093483410776, 0.08735325187444687, 0.2016977220773697, 0.01774127595126629, 0.00038405947270803154, 0.03162318840622902, 0.0004332518146838993, 0.10383734107017517, 0.0005566042964346707, 2.1665904569090344e-05, 0.05245453119277954, 0.00010668126196833327], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.574224", "n_pass": [177, 21, 12], "n_token": 70, "loss": [0.772439181804657, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 69, 2, 33, 27, 41, 12, 19, 47, 62, 4, 14, 16, 34, 53, 55]}}
{"prediction": {"error_location": 0.4618850350379944, "repair_targets": [], "repair_candidates": [0.06561698764562607, 0.004809902515262365, 0.04010949283838272, 0.32365354895591736, 0.002913346979767084, 0.00042923784349113703, 0.08282176405191422, 0.27670538425445557, 0.020909979939460754, 0.0004200363764539361, 0.05508412420749664, 0.00047904171515256166, 0.04337475076317787, 0.0007758847787044942, 4.4507283746497706e-05, 0.08170180022716522, 0.0001501741207903251], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.631577", "n_pass": [180, 22, 13], "n_token": 68, "loss": [0.9597694873809814, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 67, 2, 33, 27, 41, 12, 19, 47, 60, 4, 14, 16, 34, 53, 55]}}
{"prediction": {"error_location": 0.38298121094703674, "repair_targets": [], "repair_candidates": [0.03308197483420372, 0.004257126711308956, 0.038905445486307144, 0.4459236264228821, 0.0010870378464460373, 0.00041997546213679016, 0.15920454263687134, 0.20313096046447754, 0.003360611153766513, 0.0007648143218830228, 0.02014046721160412, 0.00024001496785786003, 0.029788808897137642, 0.0025034379214048386, 0.0013109503779560328, 0.055771540850400925, 0.00010869149991776794], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.689202", "n_pass": [181, 23, 14], "n_token": 66, "loss": [0.8096272945404053, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 65, 2, 33, 27, 41, 12, 19, 47, 58, 4, 14, 16, 34, 53, 55]}}
{"prediction": {"error_location": 0.44502395391464233, "repair_targets": [], "repair_candidates": [0.06479699909687042, 0.006360034458339214, 0.03944274038076401, 0.3537425398826599, 0.0036110891960561275, 0.0007668739417567849, 0.15085697174072266, 0.1782328337430954, 0.01635957509279251, 0.0006834329105913639, 0.0725211426615715, 0.0004980965168215334, 0.0348191075026989, 0.0009514432749710977, 1.862839053501375e-05, 0.07621128112077713, 0.00012716180935967714], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.807030", "n_pass": [184, 25, 15], "n_token": 64, "loss": [0.69857257604599, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 63, 2, 33, 27, 41, 12, 19, 47, 58, 4, 14, 16, 34, 53, 55]}}
{"prediction": {"error_location": 0.49729466438293457, "repair_targets": [], "repair_candidates": [0.07611094415187836, 0.006539578549563885, 0.03937345743179321, 0.2933144271373749, 0.00390302250161767, 0.0009899284923449159, 0.2542298436164856, 0.1389397233724594, 0.02541966736316681, 0.0009527992806397378, 0.056332532316446304, 0.000628159090410918, 0.04700804129242897, 0.0008566472097299993, 2.277877865708433e-05, 0.05520988628268242, 0.00016857273294590414], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.865386", "n_pass": [185, 26, 16], "n_token": 62, "loss": [0.632148027420044, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 61, 2, 33, 27, 41, 12, 19, 47, 58, 4, 14, 16, 34, 53, 55]}}
{"prediction": {"error_location": 0.5314490795135498, "repair_targets": [], "repair_candidates": [0.09041771292686462, 0.009426597505807877, 0.0635487511754036, 0.13953019678592682, 0.005144316237419844, 0.0009149840334430337, 0.27765119075775146, 0.13111966848373413, 0.03740210458636284, 0.0008587901247665286, 0.0566280297935009, 0.000494740204885602, 0.06152324751019478, 0.0010132056195288897, 2.1948520952719264e-05, 0.12426558136940002, 3.890384687110782e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:01.923072", "n_pass": [188, 27, 17], "n_token": 61, "loss": [0.8598280549049377, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 41, 60, 1, 32, 26, 40, 11, 18, 46, 57, 3, 13, 15, 33, 52, 54]}}
{"prediction": {"error_location": 0.42323485016822815, "repair_targets": [], "repair_candidates": [0.06401488184928894, 0.017336774617433548, 0.05156579241156578, 0.10790392756462097, 0.0030727628618478775, 0.0006441109580919147, 0.40021008253097534, 0.06674881279468536, 0.021512974053621292, 0.0006560593610629439, 0.05511600151658058, 0.0007668299949727952, 0.06787427514791489, 0.00036919707781635225, 1.1533513315953314e-05, 0.14218103885650635, 1.4981121239543427e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.040812", "n_pass": [193, 29, 18], "n_token": 59, "loss": [0.8438302874565125, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 39, 58, 1, 30, 24, 38, 9, 16, 44, 55, 3, 11, 13, 31, 50, 52]}}
{"prediction": {"error_location": 0.43006011843681335, "repair_targets": [], "repair_candidates": [0.016647888347506523, 0.012354591861367226, 0.08048110455274582, 0.3877487778663635, 0.0006723709520883858, 7.481832290068269e-05, 0.21691153943538666, 0.052259430289268494, 0.013717714697122574, 0.0004221319395583123, 0.04068070650100708, 0.00038623501313850284, 0.031282294541597366, 0.00022978687775321305, 3.106765143456869e-05, 0.14607781171798706, 2.168621176679153e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.156367", "n_pass": [199, 31, 19], "n_token": 57, "loss": [0.758643388748169, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 37, 56, 1, 28, 22, 36, 9, 16, 42, 53, 3, 11, 13, 29, 48, 50]}}
{"prediction": {"error_location": 0.46830135583877563, "repair_targets": [], "repair_candidates": [0.03885864093899727, 0.034553948789834976, 0.21255680918693542, 0.36980193853378296, 0.0013120139483362436, 0.00012254725152160972, 0.005791199393570423, 0.07817655801773071, 0.04705284908413887, 0.0013416336150839925, 0.09158510714769363, 0.000531656900420785, 0.0416090153157711, 0.0004929488059133291, 0.00012028637138428167, 0.07602327316999435, 6.964197382330894e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.213859", "n_pass": [200, 32, 20], "n_token": 55, "loss": [0.6849756240844727, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 35, 54, 1, 26, 20, 34, 9, 16, 40, 51, 3, 11, 13, 27, 46, 48]}}
{"prediction": {"error_location": 0.5041025876998901, "repair_targets": [], "repair_candidates": [0.03776238486170769, 0.023495614528656006, 0.1410212367773056, 0.5740705132484436, 0.0011353198206052184, 7.076199835864827e-05, 0.008009248413145542, 0.048630185425281525, 0.03185766562819481, 0.0006177733303047717, 0.03531140834093094, 0.0001610975741641596, 0.04096556827425957, 0.0007171512115746737, 0.000156626250827685, 0.055974215269088745, 4.319999789004214e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.331193", "n_pass": [203, 34, 21], "n_token": 53, "loss": [0.7402553558349609, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 33, 52, 1, 24, 20, 32, 9, 16, 38, 49, 3, 11, 13, 25, 44, 46]}}
{"prediction": {"error_location": 0.47699210047721863, "repair_targets": [], "repair_candidates": [0.05187917500734329, 0.025511853396892548, 0.20467358827590942, 0.5610809922218323, 0.001814780873246491, 8.234536653617397e-05, 0.01602528616786003, 0.03428838774561882, 0.03112289495766163, 0.0008120351703837514, 0.022700203582644463, 0.00023300189059227705, 0.023180292919278145, 0.000777673558332026, 7.960723451105878e-05, 0.02571640908718109, 2.1513998945010826e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.447123", "n_pass": [207, 36, 22], "n_token": 51, "loss": [0.7607629895210266, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 31, 50, 1, 24, 20, 30, 9, 16, 36, 47, 3, 11, 13, 25, 42, 44]}}
{"prediction": {"error_location": 0.4673098027706146, "repair_targets": [], "repair_candidates": [0.042603783309459686, 0.015381610952317715, 0.2763097882270813, 0.5422484278678894, 0.002228222321718931, 7.730878860456869e-05, 0.010439280420541763, 0.016261929646134377, 0.024142203852534294, 0.0004996582283638418, 0.06617869436740875, 0.0006761528784409165, 0.0019119360949844122, 0.0008949885377660394, 2.3635571778868325e-05, 1.2439852980605792e-05, 0.00010993675095960498], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.505025", "n_pass": [210, 37, 23], "n_token": 49, "loss": [0.8967649340629578, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 31, 48, 1, 24, 20, 30, 9, 16, 34, 45, 3, 11, 13, 25, 40, 42]}}
{"prediction": {"error_location": 0.4078870415687561, "repair_targets": [], "repair_candidates": [0.04037382826209068, 0.014700488187372684, 0.2747109830379486, 0.429000586271286, 0.0019018618622794747, 7.969883154146373e-05, 0.011372263543307781, 0.021747788414359093, 0.026094669476151466, 0.00032334780553355813, 0.17466947436332703, 0.0013509056298062205, 0.0025652791373431683, 0.0008700692560523748, 2.2667878511128947e-05, 2.518803194107022e-05, 0.00019085765234194696], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:02.620156", "n_pass": [213, 39, 24], "n_token": 47, "loss": [0.6509058475494385, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", ",", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 31, 46, 1, 24, 20, 30, 9, 16, 34, 43, 3, 11, 13, 25, 38, 40]}}
{"prediction": {"error_location": 0.5215730667114258, "repair_targets": [], "repair_candidates": [0.0480707548558712, 0.024800125509500504, 0.32576408982276917, 0.28566619753837585, 0.002449480816721916, 8.148790220730007e-05, 0.020552823320031166, 0.02519034780561924, 0.03761904686689377, 0.0004260555433575064, 0.21381860971450806, 0.0071941036731004715, 0.007505292538553476, 0.0004677611868828535, 2.0146428141742945e-05, 0.00015879803686402738, 0.00021484840544871986], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.029994", "n_pass": [284, 46, 25], "n_token": 46, "loss": [0.7739328742027283, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 31, 45, 1, 24, 20, 30, 9, 16, 34, 42, 3, 11, 13, 25, 37, 39]}}
{"prediction": {"error_location": 0.4611956775188446, "repair_targets": [], "repair_candidates": [0.03771813586354256, 0.019549379125237465, 0.2965831458568573, 0.3993755877017975, 0.0018887144979089499, 7.84759467933327e-05, 0.012083537876605988, 0.023820163682103157, 0.029195627197623253, 0.00030220553162507713, 0.1711989939212799, 0.0007460055057890713, 0.0058273570612072945, 0.001395645085722208, 5.521988350665197e-05, 7.77207242208533e-05, 0.00010407950321678072], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.320179", "n_pass": [291, 51, 26], "n_token": 45, "loss": [0.7857664823532104, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 31, 44, 1, 24, 20, 30, 9, 16, 34, 42, 3, 11, 13, 25, 37, 39]}}
{"prediction": {"error_location": 0.45577022433280945, "repair_targets": [], "repair_candidates": [0.031050419434905052, 0.021216589957475662, 0.24537739157676697, 0.4493904411792755, 0.0015648005064576864, 7.340130832744762e-05, 0.025221029296517372, 0.02144729718565941, 0.025020111352205276, 0.00027488727937452495, 0.17017188668251038, 0.000669477041810751, 0.006925246212631464, 0.0011971972417086363, 4.545112096820958e-05, 0.00017765702796168625, 0.0001766889326972887], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.378148", "n_pass": [295, 52, 27], "n_token": 44, "loss": [0.8184159994125366, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 30, 43, 1, 23, 19, 29, 8, 15, 33, 41, 2, 10, 12, 24, 36, 38]}}
{"prediction": {"error_location": 0.4411298334598541, "repair_targets": [], "repair_candidates": [0.0328400544822216, 0.012771098874509335, 0.17761074006557465, 0.35866397619247437, 0.0024184328503906727, 3.129295146209188e-05, 0.030348658561706543, 0.03077419474720955, 0.01335254404693842, 0.0003761787083931267, 0.3308374583721161, 0.0009485746268182993, 0.007018861826509237, 0.0017287296941503882, 2.2572379748453386e-05, 0.00016513525042682886, 9.14787597139366e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.436143", "n_pass": [297, 53, 28], "n_token": 43, "loss": [0.7572565078735352, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 29, 42, 1, 22, 18, 28, 7, 14, 32, 40, 2, 9, 11, 23, 35, 37]}}
{"prediction": {"error_location": 0.4689512252807617, "repair_targets": [], "repair_candidates": [0.017770573496818542, 0.014223530888557434, 0.13623537123203278, 0.22638705372810364, 0.0026891136076301336, 5.117224282003008e-05, 0.01872224546968937, 0.0341232493519783, 0.014885256998240948, 0.00032017810735851526, 0.5262190103530884, 0.000430795771535486, 0.004774021450430155, 0.0029528783634305, 2.3622134904144332e-05, 0.00011375948088243604, 7.818306767148897e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.494695", "n_pass": [298, 54, 29], "n_token": 42, "loss": [0.8426882028579712, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "#NEWLINE#", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 28, 41, 1, 21, 17, 27, 6, 13, 31, 39, 2, 8, 10, 22, 34, 36]}}
{"prediction": {"error_location": 0.43055155873298645, "repair_targets": [], "repair_candidates": [0.01351768895983696, 0.09981744736433029, 0.09778451174497604, 0.09803131967782974, 0.0014532291097566485, 0.00011015060590580106, 0.02096797712147236, 0.032280679792165756, 0.015414942987263203, 0.00025349744828417897, 0.6155610680580139, 0.00020761547784786671, 0.002300236141309142, 0.0021380730904638767, 1.5679575881222263e-05, 9.719144145492464e-05, 4.874078877037391e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.553264", "n_pass": [299, 55, 30], "n_token": 41, "loss": [0.9432785511016846, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 27, 40, 1, 20, 16, 26, 5, 12, 30, 38, 2, 7, 9, 21, 33, 35]}}
{"prediction": {"error_location": 0.3893492817878723, "repair_targets": [], "repair_candidates": [0.03610699623823166, 0.032059524208307266, 0.056899312883615494, 0.0990980863571167, 0.004627818241715431, 0.0013170383172109723, 0.09008556604385376, 0.04159180819988251, 0.0398261658847332, 0.00018235555035062134, 0.5923889875411987, 0.0003541812184266746, 0.002574959537014365, 0.0027055523823946714, 1.1790933967859019e-05, 9.65891158557497e-05, 7.329893560381606e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.671305", "n_pass": [303, 57, 31], "n_token": 40, "loss": [0.985489010810852, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 26, 39, 1, 19, 15, 25, 5, 11, 29, 37, 2, 6, 8, 20, 32, 34]}}
{"prediction": {"error_location": 0.3732566237449646, "repair_targets": [], "repair_candidates": [0.0417504608631134, 0.029131624847650528, 0.039927322417497635, 0.09891994297504425, 0.005491812247782946, 0.005812229588627815, 0.10190212726593018, 0.045259907841682434, 0.030238959938287735, 0.00013597571523860097, 0.5955155491828918, 0.00037916545988991857, 0.0023622503504157066, 0.003004208207130432, 8.663587323098909e-06, 9.413203952135518e-05, 6.568455137312412e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.729199", "n_pass": [305, 58, 32], "n_token": 39, "loss": [0.6303656101226807, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 25, 38, 1, 18, 14, 24, 5, 10, 28, 36, 2, 6, 7, 19, 31, 33]}}
{"prediction": {"error_location": 0.5323970913887024, "repair_targets": [], "repair_candidates": [0.05583023652434349, 0.0643199235200882, 0.05719803646206856, 0.2207745760679245, 0.09128329902887344, 0.05141247436404228, 0.10474059730768204, 0.05599614605307579, 0.02252328023314476, 0.0002611852833069861, 0.2569181025028229, 0.0005825953558087349, 0.008713777177035809, 0.0088267270475626, 1.8714303223532625e-05, 0.0004347906506154686, 0.00016557217168156058], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.786908", "n_pass": [307, 59, 33], "n_token": 38, "loss": [0.5815596580505371, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 24, 37, 1, 17, 13, 23, 5, 9, 27, 35, 2, 6, 7, 18, 30, 32]}}
{"prediction": {"error_location": 0.559025764465332, "repair_targets": [], "repair_candidates": [0.06826718896627426, 0.051426418125629425, 0.0741066038608551, 0.3055807054042816, 0.023076847195625305, 0.06353211402893066, 0.1510392725467682, 0.05416090786457062, 0.04010504111647606, 0.0004429530818015337, 0.14823545515537262, 0.001235475530847907, 0.009332348592579365, 0.008816407062113285, 2.8752838261425495e-05, 0.0004307264171075076, 0.0001827519736252725], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.844700", "n_pass": [308, 60, 34], "n_token": 37, "loss": [0.8327301740646362, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 23, 36, 1, 16, 12, 22, 5, 8, 26, 34, 2, 6, 7, 17, 29, 31]}}
{"prediction": {"error_location": 0.4348604083061218, "repair_targets": [], "repair_candidates": [0.043999262154102325, 0.01702188141644001, 0.029651038348674774, 0.6250837445259094, 0.016100700944662094, 0.0028186580166220665, 0.047918979078531265, 0.04429520666599274, 0.06638240814208984, 0.0002576915139798075, 0.09497742354869843, 0.0008911796612665057, 0.006053428165614605, 0.004037393257021904, 9.5135555966408e-06, 0.00037756050005555153, 0.00012401917774695903], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:03.905362", "n_pass": [310, 61, 35], "n_token": 36, "loss": [0.6776027083396912, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "#INDENT#", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 22, 35, 1, 15, 11, 21, 5, 8, 25, 33, 2, 6, 7, 16, 28, 30]}}
{"prediction": {"error_location": 0.507832944393158, "repair_targets": [], "repair_candidates": [0.08795157819986343, 0.03337758779525757, 0.1778552234172821, 0.21176931262016296, 0.02194543555378914, 0.019395768642425537, 0.003673441708087921, 0.18351489305496216, 0.04170452803373337, 0.0003202549705747515, 0.18913967907428741, 0.0020290629472583532, 0.018205901607871056, 0.007614454720169306, 4.065068787895143e-05, 0.0011899784440174699, 0.0002722358040045947], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.018004", "n_pass": [312, 63, 36], "n_token": 35, "loss": [0.799992561340332, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "=", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 21, 34, 1, 14, 10, 20, 5, 8, 24, 32, 2, 6, 7, 15, 27, 29]}}
{"prediction": {"error_location": 0.4493322968482971, "repair_targets": [], "repair_candidates": [0.05558791011571884, 0.040530845522880554, 0.06931415945291519, 0.46031397581100464, 0.022260351106524467, 0.011970163322985172, 0.11060219258069992, 0.03437820449471474, 0.10413947701454163, 7.280424597411184e-06, 0.0642121210694313, 0.0008017672807909548, 0.013816528022289276, 0.011338469572365284, 3.1857366593612824e-06, 0.000562232278753072, 0.00016112544108182192], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.074572", "n_pass": [314, 64, 37], "n_token": 34, "loss": [0.6892386078834534, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "start_redis", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 20, 33, 1, 13, 10, 19, 5, 8, 23, 31, 2, 6, 7, 14, 26, 28]}}
{"prediction": {"error_location": 0.5019581317901611, "repair_targets": [], "repair_candidates": [0.10316596925258636, 0.05663332715630531, 0.0962325856089592, 0.160417839884758, 0.015223316848278046, 0.010609562508761883, 0.005746705923229456, 0.06633058190345764, 0.27829283475875854, 7.65495678933803e-06, 0.18492117524147034, 0.0017053645569831133, 0.014268573373556137, 0.005316661670804024, 3.878418738167966e-06, 0.0008980318089015782, 0.0002259496395708993], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.131613", "n_pass": [315, 65, 38], "n_token": 33, "loss": [0.6648865342140198, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 19, 32, 1, 12, 10, 18, 5, 8, 22, 30, 2, 6, 7, 13, 25, 27]}}
{"prediction": {"error_location": 0.5143319368362427, "repair_targets": [], "repair_candidates": [0.09366364032030106, 0.04888904094696045, 0.06727467477321625, 0.4197749197483063, 0.020006367936730385, 0.008903615176677704, 0.0008880081586539745, 0.052659422159194946, 0.14664554595947266, 8.127166438498534e-06, 0.12897233664989471, 0.0008249812526628375, 0.005502775311470032, 0.005548153538256884, 3.330697154524387e-06, 0.0002812864840961993, 0.00015382551646325737], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.188372", "n_pass": [316, 66, 39], "n_token": 32, "loss": [0.2284420281648636, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 18, 31, 1, 11, 10, 17, 5, 8, 21, 29, 2, 6, 7, 12, 24, 26]}}
{"prediction": {"error_location": 0.7957724332809448, "repair_targets": [], "repair_candidates": [0.04010387510061264, 0.01692860946059227, 0.031968820840120316, 0.2224910706281662, 0.01608259230852127, 0.01788959465920925, 0.10434955358505249, 0.25107428431510925, 0.1801367551088333, 0.00046896201092749834, 0.09302174299955368, 0.00033559196162968874, 0.0125722112134099, 0.011247765272855759, 2.6787265596794896e-05, 0.0010263483272865415, 0.0002754994493443519], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.247992", "n_pass": [319, 67, 40], "n_token": 31, "loss": [0.24529561400413513, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 17, 30, 1, 11, 10, 16, 5, 8, 20, 28, 2, 6, 7, 12, 23, 25]}}
{"prediction": {"error_location": 0.7824731469154358, "repair_targets": [], "repair_candidates": [0.04146648943424225, 0.022556433454155922, 0.0311955027282238, 0.265641987323761, 0.01882866397500038, 0.020386530086398125, 0.1285380721092224, 0.21222981810569763, 0.14304322004318237, 0.0005462327972054482, 0.08571288734674454, 0.0001881698553916067, 0.015455413609743118, 0.012861406430602074, 2.4513425159966573e-05, 0.0010000595357269049, 0.00032458032364957035], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.304261", "n_pass": [320, 68, 41], "n_token": 30, "loss": [0.252371221780777, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 16, 29, 1, 11, 10, 15, 5, 8, 19, 27, 2, 6, 7, 12, 22, 24]}}
{"prediction": {"error_location": 0.77695631980896, "repair_targets": [], "repair_candidates": [0.041513215750455856, 0.059856630861759186, 0.021745355799794197, 0.3211567997932434, 0.02773117646574974, 0.013987620361149311, 0.04973022639751434, 0.02604791708290577, 0.05604942888021469, 0.016529422253370285, 0.33887821435928345, 4.794885535375215e-05, 0.017576418817043304, 0.00809582881629467, 1.124816026276676e-05, 0.0006766765145584941, 0.0003658903588075191], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.361307", "n_pass": [321, 69, 42], "n_token": 29, "loss": [0.18737925589084625, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 15, 28, 1, 11, 10, 14, 5, 8, 18, 26, 2, 6, 7, 12, 21, 23]}}
{"prediction": {"error_location": 0.829129159450531, "repair_targets": [], "repair_candidates": [0.04004327207803726, 0.11641095578670502, 0.06664491444826126, 0.3058219850063324, 0.07233653962612152, 0.0360855832695961, 0.09624110162258148, 0.05416201427578926, 0.0296572707593441, 0.0074080112390220165, 0.07352575659751892, 0.0009241309016942978, 0.0508846640586853, 0.04769282042980194, 1.0948421731882263e-05, 0.0011389998253434896, 0.0010110611328855157], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.418187", "n_pass": [322, 70, 43], "n_token": 28, "loss": [0.2016015201807022, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 14, 27, 1, 11, 10, 13, 5, 8, 17, 25, 2, 6, 7, 12, 20, 22]}}
{"prediction": {"error_location": 0.8174206018447876, "repair_targets": [], "repair_candidates": [0.010962050408124924, 0.023504309356212616, 0.012121861800551414, 0.09121280908584595, 0.01388395857065916, 0.009875008836388588, 0.02845228649675846, 0.015972210094332695, 0.6894150376319885, 0.0016219851095229387, 0.0751359686255455, 0.000163579112268053, 0.016726531088352203, 0.010173149406909943, 2.9396624086075462e-06, 0.0005337961483746767, 0.00024254970776382834], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.474749", "n_pass": [325, 71, 44], "n_token": 27, "loss": [0.26248040795326233, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "#UNINDENT#", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 14, 26, 1, 11, 10, 13, 5, 8, 16, 24, 2, 6, 7, 12, 19, 21]}}
{"prediction": {"error_location": 0.7691413760185242, "repair_targets": [], "repair_candidates": [0.03621714562177658, 0.05586940050125122, 0.02856523171067238, 0.2797090411186218, 0.010914784856140614, 0.007323473691940308, 0.30539122223854065, 0.03533174842596054, 0.007092280779033899, 0.0010499975178390741, 0.17697349190711975, 0.001298978691920638, 0.04122164100408554, 0.011338924989104271, 1.773854819475673e-05, 0.0010094309691339731, 0.0006755266222171485], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.531049", "n_pass": [326, 72, 45], "n_token": 26, "loss": [0.4849570393562317, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "=", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 14, 25, 1, 11, 10, 13, 5, 8, 15, 23, 2, 6, 7, 12, 18, 20]}}
{"prediction": {"error_location": 0.6157235503196716, "repair_targets": [], "repair_candidates": [0.004277568776160479, 0.009352835826575756, 0.009114846587181091, 0.012232372537255287, 0.00408537220209837, 0.003068024991080165, 0.006325135473161936, 0.005090892780572176, 0.007850668393075466, 0.0008785170502960682, 0.09356424957513809, 0.0006844578892923892, 0.8393952250480652, 0.0038759936578571796, 1.1151165608680458e-06, 0.00014758014003746212, 5.5199758207891136e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.590064", "n_pass": [328, 73, 46], "n_token": 25, "loss": [0.647716224193573, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 14, 24, 1, 11, 10, 13, 5, 8, 15, 22, 2, 6, 7, 12, 17, 19]}}
{"prediction": {"error_location": 0.5232393145561218, "repair_targets": [], "repair_candidates": [0.002831168007105589, 0.0027891546487808228, 0.025009214878082275, 0.006365378852933645, 0.002106748055666685, 0.0018025782192125916, 0.003660091431811452, 0.003606554353609681, 0.005900609772652388, 0.0003885447222273797, 0.028159793466329575, 0.023883378133177757, 0.8887175917625427, 0.004598933272063732, 1.0069911695609335e-06, 0.00011276626901235431, 6.647210102528334e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.870488", "n_pass": [336, 78, 47], "n_token": 24, "loss": [0.40588676929473877, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "=", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 14, 23, 1, 11, 10, 13, 5, 8, 15, 22, 2, 6, 7, 12, 17, 19]}}
{"prediction": {"error_location": 0.6663856506347656, "repair_targets": [], "repair_candidates": [0.013144338503479958, 0.026040079072117805, 0.00490843178704381, 0.022335141897201538, 0.01426016353070736, 0.015314831398427486, 0.017814813181757927, 0.02152763120830059, 0.007080039009451866, 0.002798737259581685, 0.13079099357128143, 0.0038310643285512924, 0.7025494575500488, 0.016210056841373444, 1.18781326818862e-05, 0.001249351422302425, 0.0001330945669906214], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.929448", "n_pass": [342, 79, 48], "n_token": 23, "loss": [0.027177194133400917, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "ping", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 13, 22, 1, 10, 9, 12, 4, 7, 14, 21, 2, 5, 6, 11, 16, 18]}}
{"prediction": {"error_location": 0.9731888771057129, "repair_targets": [], "repair_candidates": [0.0666155144572258, 0.01514079887419939, 0.050265971571207047, 0.049149349331855774, 0.055296000093221664, 0.059231892228126526, 0.0600549653172493, 0.06120627745985985, 0.06401693820953369, 0.02730655111372471, 0.04460255056619644, 0.04999262094497681, 0.3667203187942505, 0.008293070830404758, 0.015270940028131008, 0.004887661896646023, 0.001948580495081842], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:04.986192", "n_pass": [347, 80, 49], "n_token": 22, "loss": [0.03886137902736664, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "redis", "port", "=", "port", ")", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 12, 21, 1, 9, 8, 11, 4, 7, 13, 20, 2, 5, 6, 10, 15, 17]}}
{"prediction": {"error_location": 0.9618841409683228, "repair_targets": [], "repair_candidates": [0.08351164311170578, 0.014145203866064548, 0.07550129294395447, 0.05262873321771622, 0.05594915896654129, 0.05529268458485603, 0.05119466781616211, 0.0595533587038517, 0.05029863864183426, 0.0226376261562109, 0.043875936418771744, 0.04349571093916893, 0.35589462518692017, 0.007718545850366354, 0.013785000890493393, 0.011926846578717232, 0.002590366406366229], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:05.043012", "n_pass": [354, 81, 50], "n_token": 21, "loss": [0.02351236157119274, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "=", "port", ")", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 12, 20, 1, 9, 8, 11, 4, 7, 13, 19, 2, 5, 6, 10, 14, 16]}}
{"prediction": {"error_location": 0.9767618775367737, "repair_targets": [], "repair_candidates": [0.07855820655822754, 0.01849929243326187, 0.04385416582226753, 0.03753051161766052, 0.038459986448287964, 0.039730653166770935, 0.0365837961435318, 0.04249004274606705, 0.041951507329940796, 0.017412129789590836, 0.03932005167007446, 0.05332192778587341, 0.472970187664032, 0.00642823614180088, 0.020123323425650597, 0.005216349381953478, 0.0075496346689760685], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:05.099459", "n_pass": [356, 82, 51], "n_token": 20, "loss": [0.07635204493999481, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "port", ")", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 12, 19, 1, 9, 8, 11, 4, 7, 13, 18, 2, 5, 6, 10, 14, 15]}}
{"prediction": {"error_location": 0.9264898896217346, "repair_targets": [], "repair_candidates": [0.09248325228691101, 0.058818936347961426, 0.05786380544304848, 0.03975868597626686, 0.07637068629264832, 0.0737210288643837, 0.034702546894550323, 0.10595903545618057, 0.08131101727485657, 0.04521629959344864, 0.1006520465016365, 0.021354440599679947, 0.02929334156215191, 0.05304278805851936, 0.08166979253292084, 0.011246309615671635, 0.03653601557016373], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:05.156056", "n_pass": [358, 83, 52], "n_token": 19, "loss": [0.014568032696843147, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "port", "#NEWLINE#", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 12, 18, 1, 9, 8, 11, 4, 7, 13, 17, 2, 5, 6, 10, 14, 15]}}
{"prediction": {"error_location": 0.9855377078056335, "repair_targets": [], "repair_candidates": [0.139999657869339, 0.05828145146369934, 0.035484470427036285, 0.02860862761735916, 0.07611221820116043, 0.08051358908414841, 0.03134226053953171, 0.09815262258052826, 0.035205576568841934, 0.039740707725286484, 0.12228275835514069, 0.009162376634776592, 0.007041195873171091, 0.10798127949237823, 0.10615258663892746, 0.004695210140198469, 0.01924341917037964], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:19:05.214052", "n_pass": [359, 84, 53], "n_token": 18, "loss": [0.0002748588449321687, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "port", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 12, 17, 1, 9, 8, 11, 4, 7, 13, 16, 2, 5, 6, 10, 14, 15]}}
{"prediction": {"error_location": 0.9997251629829407, "repair_targets": [], "repair_candidates": [0.09191011637449265, 0.04282332584261894, 0.04142685979604721, 0.025119591504335403, 0.077572762966156, 0.09239232540130615, 0.04042555019259453, 0.09055496752262115, 0.07066037505865097, 0.08540713787078857, 0.08666353672742844, 0.05700758099555969, 0.0328286774456501, 0.06725108623504639, 0.07149043679237366, 0.009352056309580803, 0.01711370423436165], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'redis_env_folder', 'port', 'started_by_us', 'r', 'port', 'port', 'r', 'result', 'redis_env_folder', 'port', 'result', 'started_by_us', 'r', 'port', 'port', 'r', 'started_by_us']
