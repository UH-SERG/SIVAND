
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 20, 4, 22, 24, 8, 26, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "alimanfoo/petl/petl/transform/validation.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 381, "results": {"model": "transformer", "prob": {"loc": [[0.999936580657959, 3.7407376112241764e-06, 2.6421705712209587e-08, 2.4265489173558308e-08, 3.968549151522893e-07, 6.048565381888693e-08, 2.577447411056255e-08, 2.7566873228579425e-08, 3.552617613422626e-07, 1.9752413038531813e-07, 5.8914690015399174e-08, 4.012241916484527e-08, 5.0319506783580437e-08, 1.0005702222315449e-07, 7.109369448698999e-08, 2.359967936627072e-07, 8.032083087528008e-08, 6.15405539861058e-08, 2.3843947261070753e-08, 2.215508487779516e-08, 2.8833177566411905e-05, 7.586629635625286e-08, 4.457653091094471e-08, 8.25192216780124e-08, 1.957547829078976e-05, 9.837298975412523e-09, 8.959354147464182e-09, 6.089322113211892e-08, 8.88610247784527e-06, 3.787740467942058e-07]], "pointer": [[0.0, 0.0, 0.39812830090522766, 0.0, 0.36471521854400635, 0.0, 0.0, 0.0, 0.19039222598075867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007018272764980793, 0.0, 0.02287242002785206, 0.0, 0.004715851042419672, 0.0, 0.00724929990246892, 0.0, 0.00490836426615715, 0.0]], "target": [0.0]}, "loss": [6.353653589030728e-05, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 16:20:09.346880", "n_pass": [1, 1, 1], "n_token": 30, "loss": [6.353653589030728e-05, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 20, 4, 22, 24, 8, 26, 28]}}
{"prediction": {"error_location": 0.999936580657959, "repair_targets": [], "repair_candidates": [0.39812830090522766, 0.36471521854400635, 0.19039222598075867, 0.007018272764980793, 0.02287242002785206, 0.004715851042419672, 0.00724929990246892, 0.00490836426615715], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.403235", "n_pass": [23, 2, 2], "n_token": 26, "loss": [9.548207890475169e-05, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 16, 4, 18, 20, 8, 22, 24]}}
{"prediction": {"error_location": 0.9999045133590698, "repair_targets": [], "repair_candidates": [0.6179696321487427, 0.2169039249420166, 0.12802137434482574, 0.0031427242793142796, 0.013464884832501411, 0.00291817681863904, 0.014976007863879204, 0.002603286411613226], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.457645", "n_pass": [24, 3, 3], "n_token": 22, "loss": [9.452849917579442e-05, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 12, 4, 14, 16, 8, 18, 20]}}
{"prediction": {"error_location": 0.9999055862426758, "repair_targets": [], "repair_candidates": [0.270841121673584, 0.515814483165741, 0.1637585312128067, 0.0023079144302755594, 0.028549741953611374, 0.011779633350670338, 0.0017867529531940818, 0.0051618353463709354], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.512994", "n_pass": [43, 4, 4], "n_token": 20, "loss": [0.00037901371251791716, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 10, 4, 12, 14, 8, 16, 18]}}
{"prediction": {"error_location": 0.9996210336685181, "repair_targets": [], "repair_candidates": [0.18621625006198883, 0.6263808608055115, 0.1302834302186966, 0.009568409994244576, 0.029479583725333214, 0.013285323046147823, 0.0009688825230114162, 0.0038173706270754337], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.570934", "n_pass": [49, 5, 5], "n_token": 19, "loss": [0.00023731753753963858, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "None", ",", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 9, 3, 11, 13, 7, 15, 17]}}
{"prediction": {"error_location": 0.9997627139091492, "repair_targets": [], "repair_candidates": [0.9540024995803833, 0.0349506139755249, 0.0020729198586195707, 0.0068243942223489285, 0.00023422409140039235, 0.001541187521070242, 4.199914837954566e-05, 0.0003322075353935361], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.625689", "n_pass": [52, 6, 6], "n_token": 17, "loss": [0.0017051455797627568, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 3, 9, 11, 5, 13, 15]}}
{"prediction": {"error_location": 0.9982964396476746, "repair_targets": [], "repair_candidates": [0.7649708390235901, 0.10278396308422089, 0.06681856513023376, 0.06332942843437195, 0.00024705237592570484, 0.000973051181063056, 9.132896229857579e-05, 0.0007858354947529733], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.680662", "n_pass": [79, 7, 7], "n_token": 16, "loss": [0.010703062638640404, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 8, 10, 5, 12, 14]}}
{"prediction": {"error_location": 0.9893538951873779, "repair_targets": [], "repair_candidates": [0.2561354339122772, 0.09127873182296753, 0.006905067712068558, 0.6449970602989197, 0.00027763828984461725, 0.0001673278893576935, 0.00016887910896912217, 6.987434608163312e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.734803", "n_pass": [81, 8, 8], "n_token": 15, "loss": [0.01690208725631237, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 9, 5, 11, 13]}}
{"prediction": {"error_location": 0.9832397103309631, "repair_targets": [], "repair_candidates": [0.06335459649562836, 0.04628157988190651, 0.018666615709662437, 0.8690595030784607, 0.0012659423518925905, 0.0012161590857431293, 0.00013986710109747946, 1.5590710972901434e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.789590", "n_pass": [83, 9, 9], "n_token": 14, "loss": [0.05948562175035477, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 10, 12]}}
{"prediction": {"error_location": 0.9422491788864136, "repair_targets": [], "repair_candidates": [0.3380507230758667, 0.18666885793209076, 0.10749449580907822, 0.2452339380979538, 0.004810631740838289, 0.11666306853294373, 0.0010116545017808676, 6.663958629360422e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.844034", "n_pass": [85, 10, 10], "n_token": 13, "loss": [0.5635744333267212, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 9, 11]}}
{"prediction": {"error_location": 0.5691709518432617, "repair_targets": [], "repair_candidates": [0.010097013786435127, 0.14515165984630585, 0.0016163905384019017, 0.016961494460701942, 0.4738790690898895, 0.3517732620239258, 0.0005112902726978064, 9.920167940435931e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.898496", "n_pass": [87, 11, 11], "n_token": 12, "loss": [0.23739320039749146, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", "header", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 9, 10]}}
{"prediction": {"error_location": 0.788681149482727, "repair_targets": [], "repair_candidates": [0.13526403903961182, 0.141529843211174, 0.056623488664627075, 0.4851715862751007, 0.04319896176457405, 0.12304998189210892, 0.0037336742971092463, 0.01142843533307314], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:09.952915", "n_pass": [89, 12, 12], "n_token": 11, "loss": [0.08380340784788132, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 9, 10]}}
{"prediction": {"error_location": 0.9196121096611023, "repair_targets": [], "repair_candidates": [0.06127272918820381, 0.2626464068889618, 0.26101231575012207, 0.33088216185569763, 0.025067556649446487, 0.011060320772230625, 0.034724317491054535, 0.013334201648831367], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:10.011204", "n_pass": [92, 13, 13], "n_token": 10, "loss": [0.1551613062620163, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", "constraints", "=", "header", "table", "constraints", "constraints", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 2, 6, 7, 4, 8, 9]}}
{"prediction": {"error_location": 0.8562769889831543, "repair_targets": [], "repair_candidates": [0.052114102989435196, 0.16642649471759796, 0.3376677632331848, 0.35919007658958435, 0.04217630624771118, 0.008661104366183281, 0.02362212911248207, 0.010142064653337002], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 16:20:10.065515", "n_pass": [94, 14, 14], "n_token": 9, "loss": [1.0537718534469604, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", "constraints", "header", "table", "constraints", "constraints", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 4, 2, 5, 6, 3, 7, 8]}}
{"prediction": {"error_location": 0.34862032532691956, "repair_targets": [], "repair_candidates": [0.7831305861473083, 0.03718995675444603, 0.045784540474414825, 0.087676040828228, 0.012998376972973347, 0.009895699098706245, 0.012650246731936932, 0.010674693621695042], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'table', 'constraints', 'header', 'table', 'constraints', 'constraints', 'header', 'header']
