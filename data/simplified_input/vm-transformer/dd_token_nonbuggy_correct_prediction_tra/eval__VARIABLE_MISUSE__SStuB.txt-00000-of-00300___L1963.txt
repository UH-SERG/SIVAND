
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 21, 2, 6, 32, 15, 28, 40, 55], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "google/yapf/yapftests/pytree_unwrapper_test.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1963, "results": {"model": "transformer", "prob": {"loc": [[0.9342119693756104, 3.29677482113766e-06, 1.0447350859976723e-06, 6.638419591808997e-08, 1.7590816696611e-06, 4.270540543416246e-08, 1.181428615382174e-06, 1.4323474317734508e-07, 7.270200086395562e-08, 1.2640246183082127e-08, 3.882264820731507e-08, 8.653574923300766e-08, 6.306719768645053e-08, 1.6203649977342138e-07, 7.611711083654882e-08, 1.5132507087400882e-06, 5.5876974158763915e-09, 8.387731753600747e-08, 4.931880681624534e-08, 8.705966614286353e-09, 8.916033067407625e-08, 0.0004955076728947461, 6.031646648807509e-08, 4.29515303324024e-08, 1.7206527758162338e-08, 3.756488098360933e-08, 1.1961451384934207e-08, 6.773018412786769e-08, 0.0043652234598994255, 5.4789659031939664e-08, 6.114642303600704e-08, 1.0487394774827408e-07, 0.00044881508802063763, 1.44733633078431e-07, 1.3792180197924608e-07, 6.551838538371157e-08, 8.026840419006476e-07, 7.857827455381994e-08, 1.136742078244879e-08, 1.1883390982347919e-07, 0.022556114941835403, 1.669178573138197e-07, 2.2996100312866474e-07, 3.8947570146774524e-07, 3.024363650183659e-05, 1.6923183920880547e-06, 1.9536580566636985e-06, 3.0757394142710837e-07, 4.2246148268532124e-07, 2.672712469120597e-07, 1.2841603336255503e-08, 1.034802750154995e-07, 2.1799526450649864e-07, 1.2719354458567977e-08, 1.2760840206738067e-07, 0.0378745011985302, 1.1214074646659355e-07]], "pointer": [[0.0, 0.0, 0.020844237878918648, 0.0, 0.6618089079856873, 0.0, 0.09013686329126358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006450843997299671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11071135103702545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019302709260955453, 0.0, 0.0, 0.0, 0.1069323867559433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008303115610033274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003548048553057015, 0.0]], "target": [0.0]}, "loss": [0.06805212050676346, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 15:44:41.852069", "n_pass": [1, 1, 1], "n_token": 57, "loss": [0.06805212050676346, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 21, 2, 6, 32, 15, 28, 40, 55]}}
{"prediction": {"error_location": 0.9342119693756104, "repair_targets": [], "repair_candidates": [0.020844237878918648, 0.6618089079856873, 0.09013686329126358, 0.006450843997299671, 0.11071135103702545, 0.0019302709260955453, 0.1069323867559433, 0.0008303115610033274, 0.0003548048553057015], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:41.908009", "n_pass": [21, 2, 2], "n_token": 50, "loss": [0.29811519384384155, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 2, 6, 25, 8, 21, 33, 48]}}
{"prediction": {"error_location": 0.7422157526016235, "repair_targets": [], "repair_candidates": [0.010790988802909851, 0.20103402435779572, 0.14744937419891357, 0.058295559138059616, 0.04727192223072052, 0.002443585079163313, 0.5281585454940796, 0.0019002276239916682, 0.0026557694654911757], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:41.967347", "n_pass": [26, 3, 3], "n_token": 43, "loss": [0.6346485018730164, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 2, 6, 25, 8, 21, 33, 41]}}
{"prediction": {"error_location": 0.5301217436790466, "repair_targets": [], "repair_candidates": [0.004940055310726166, 0.16201718151569366, 0.11979757994413376, 0.053069036453962326, 0.05746236443519592, 0.0026869617868214846, 0.5955080986022949, 0.002072750125080347, 0.002445942023769021], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.078052", "n_pass": [50, 5, 4], "n_token": 40, "loss": [0.57454514503479, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 30, 38]}}
{"prediction": {"error_location": 0.5629608631134033, "repair_targets": [], "repair_candidates": [0.007451011799275875, 0.25653761625289917, 0.12697924673557281, 0.008940336294472218, 0.07484287768602371, 0.0005903419223614037, 0.523888349533081, 0.00030689689447171986, 0.0004633883072528988], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.188022", "n_pass": [55, 7, 5], "n_token": 36, "loss": [0.21759630739688873, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 26, 34]}}
{"prediction": {"error_location": 0.8044499754905701, "repair_targets": [], "repair_candidates": [0.013944988138973713, 0.4197757840156555, 0.21803636848926544, 0.021927405148744583, 0.07992709428071976, 0.0015062438324093819, 0.23105193674564362, 0.0005744032096117735, 0.013255742378532887], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.243116", "n_pass": [57, 8, 6], "n_token": 32, "loss": [0.32449835538864136, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 26, 30]}}
{"prediction": {"error_location": 0.7228899598121643, "repair_targets": [], "repair_candidates": [0.027097567915916443, 0.3775666356086731, 0.13829000294208527, 0.00589632336050272, 0.13476811349391937, 0.0004992563044652343, 0.3123966455459595, 0.0002765661629382521, 0.0032088495790958405], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.301215", "n_pass": [63, 9, 7], "n_token": 28, "loss": [0.6984258890151978, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 18, 8, 14, 22, 26]}}
{"prediction": {"error_location": 0.49736765027046204, "repair_targets": [], "repair_candidates": [0.03767571225762367, 0.751934826374054, 0.12328250706195831, 0.00824657455086708, 0.014506888575851917, 0.00043474239646457136, 0.06260570883750916, 0.00021012805518694222, 0.001102926442399621], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.356427", "n_pass": [88, 10, 8], "n_token": 26, "loss": [0.3011898696422577, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 16, 8, 12, 20, 24]}}
{"prediction": {"error_location": 0.7399372458457947, "repair_targets": [], "repair_candidates": [0.018512241542339325, 0.5207635164260864, 0.1680889129638672, 0.008638926781713963, 0.23559169471263885, 0.0022520776838064194, 0.04395760968327522, 0.0003866196784656495, 0.001808456494472921], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.411464", "n_pass": [89, 11, 9], "n_token": 24, "loss": [0.21294935047626495, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", ")", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 14, 8, 12, 18, 22]}}
{"prediction": {"error_location": 0.808197021484375, "repair_targets": [], "repair_candidates": [0.051535069942474365, 0.14261989295482635, 0.04271630570292473, 0.0025816340930759907, 0.3949514329433441, 0.007558435667306185, 0.3558489978313446, 0.0011553744552657008, 0.0010328086791560054], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:42.632593", "n_pass": [98, 15, 10], "n_token": 23, "loss": [0.3800775110721588, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", ")", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 10, 2, 5, 13, 7, 11, 17, 21]}}
{"prediction": {"error_location": 0.6838083267211914, "repair_targets": [], "repair_candidates": [0.06754991412162781, 0.1873001605272293, 0.06115463003516197, 0.0013116097543388605, 0.3859453797340393, 0.0036594541743397713, 0.2921960949897766, 0.0006209453567862511, 0.0002617629070300609], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 15:44:43.070782", "n_pass": [141, 23, 11], "n_token": 22, "loss": [1.2464754581451416, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", ")", "dumptree", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 10, 2, 5, 13, 7, 11, 16, 20]}}
{"prediction": {"error_location": 0.28751638531684875, "repair_targets": [], "repair_candidates": [0.0717431828379631, 0.151285782456398, 0.07452484220266342, 0.00033411936601623893, 0.608036458492279, 0.0018589115934446454, 0.09187819063663483, 0.00027983574545942247, 5.877019793842919e-05], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'def _ParseAndUnwrap(', 'self', 'code', ',', 'dumptree', '#NEWLINE#', 'tree', 'ParseCodeToTree', '(', 'code', 'tree', ')', 'dumptree', 'DumpPyTree', '(', 'tree', ',', 'UnwrapPyTree', '(', 'tree', ')']
