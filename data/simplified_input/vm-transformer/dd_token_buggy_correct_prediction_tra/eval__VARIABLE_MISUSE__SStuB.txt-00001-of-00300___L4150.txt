
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "open_file", "(", "1", ",", "mode", "=", "'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"], "error_location": [42], "repair_targets": [12], "repair_candidates": [12, 28, 63, 16, 24, 46, 14, 55, 20, 42, 44, 38, 51, 59], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "networkx/networkx/networkx/algorithms/bipartite/edgelist.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4150, "results": {"model": "transformer", "prob": {"loc": [[0.02320273406803608, 1.378321144329675e-06, 1.728376730625314e-08, 2.413158028957696e-08, 3.6260768609963634e-08, 1.1627455442919654e-08, 4.7912902090274656e-08, 1.741577015934581e-08, 7.50507300750769e-09, 6.292265819496379e-09, 7.400453139183583e-09, 2.3204822241496004e-07, 6.312779987638351e-07, 8.291702435769821e-09, 3.041822765226243e-06, 6.417372855338499e-09, 9.714903370650063e-08, 1.6621255483073583e-08, 3.456009878277655e-08, 9.202584472234321e-09, 7.210617809505493e-07, 2.8348390301857762e-08, 1.6288173299017217e-07, 1.8598562689930986e-08, 5.1523972643963134e-08, 6.532648910706484e-08, 7.099311005731579e-08, 1.9620630453687227e-08, 1.187163647387024e-07, 6.299906374351849e-08, 4.201730519071134e-07, 3.915119606290318e-08, 1.2504580126915243e-07, 3.6889446164423134e-08, 1.6925334023198957e-08, 2.283355193810621e-08, 1.3793362008129861e-08, 1.651469716534848e-08, 1.3073274907071664e-08, 8.950518548545006e-09, 2.7025661708535154e-09, 5.4094901003054474e-08, 0.9094038009643555, 2.3248936997788405e-08, 0.061200834810733795, 2.6113468720723176e-08, 1.5459354472113773e-05, 2.1406242112220752e-08, 6.991073320250507e-08, 7.724285921995033e-08, 3.889686084335153e-08, 1.558204985485645e-06, 8.966670606014304e-08, 3.0304360620903026e-07, 4.353193361339436e-08, 6.722365242239903e-08, 1.7690972242689895e-08, 2.0099208963841875e-09, 7.402527923972002e-09, 1.4765612377232173e-06, 4.000006370574738e-08, 4.884855631104301e-09, 5.658498736238471e-08, 0.006165083963423967, 1.74382336126655e-07, 2.4003264798011514e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.957097589969635, 0.0, 0.040011387318372726, 0.0, 0.0026753651909530163, 0.0, 0.0, 0.0, 2.4277005650219508e-06, 0.0, 0.0, 0.0, 8.111957868095487e-05, 0.0, 0.0, 0.0, 8.941532541939523e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5961773897288367e-05, 0.0, 0.0, 0.0, 4.055421598536668e-08, 0.0, 5.3786514797593554e-08, 0.0, 1.917199142553727e-06, 0.0, 0.0, 0.0, 0.0, 0.00010348157957196236, 0.0, 0.0, 0.0, 1.7144720914075151e-06, 0.0, 0.0, 0.0, 1.053454425914424e-07, 0.0, 0.0, 0.0, 3.7664520391444967e-08, 0.0, 0.0]], "target": [0.957097589969635]}, "loss": [0.09496594965457916, 0.043849918991327286], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 12:09:15.363934", "n_pass": [1, 1, 1], "n_token": 66, "loss": [0.09496594965457916, 0.043849918991327286], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "open_file", "(", "1", ",", "mode", "=", "'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 42, "repair_targets": [12], "repair_candidates": [12, 28, 63, 16, 24, 46, 14, 55, 20, 42, 44, 38, 51, 59]}}
{"prediction": {"error_location": 0.9094038009643555, "repair_targets": [0.957097589969635], "repair_candidates": [0.957097589969635, 0.040011387318372726, 0.0026753651909530163, 2.4277005650219508e-06, 8.111957868095487e-05, 8.941532541939523e-06, 1.5961773897288367e-05, 4.055421598536668e-08, 5.3786514797593554e-08, 1.917199142553727e-06, 0.00010348157957196236, 1.7144720914075151e-06, 1.053454425914424e-07, 3.7664520391444967e-08], "target_probs": 0.957097589969635}}


{"result": {"time": "2021-02-11 12:09:15.421206", "n_pass": [20, 2, 2], "n_token": 58, "loss": [0.08370112627744675, 0.005950117018073797], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [4, 20, 55, 8, 16, 38, 6, 47, 12, 34, 36, 30, 43, 51]}}
{"prediction": {"error_location": 0.9197061061859131, "repair_targets": [0.9940675497055054], "repair_candidates": [0.9940675497055054, 0.0023528498131781816, 0.003310821019113064, 3.8220491660467815e-06, 0.00022133468883112073, 4.975425781594822e-06, 6.036374088580487e-06, 2.948840105432282e-08, 2.107407937046446e-07, 6.357224265229888e-06, 2.570845936133992e-05, 1.692965554411785e-07, 1.9028504993912065e-08, 9.444313775475166e-09], "target_probs": 0.9940675497055054}}


{"result": {"time": "2021-02-11 12:09:15.538761", "n_pass": [47, 4, 3], "n_token": 54, "loss": [0.0672835111618042, 0.005062618292868137], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 30, "repair_targets": [4], "repair_candidates": [4, 20, 51, 8, 16, 34, 6, 43, 12, 30, 32, 26, 39, 47]}}
{"prediction": {"error_location": 0.9349302053451538, "repair_targets": [0.9949501752853394], "repair_candidates": [0.9949501752853394, 0.002213855739682913, 0.0024489942006766796, 8.145027095451951e-06, 0.00032479982473887503, 6.051167474652175e-06, 8.564951713196933e-06, 1.7884548242363962e-07, 1.0439173365739407e-06, 1.392567173752468e-05, 2.39739274547901e-05, 1.373538367488436e-07, 6.258315465856867e-08, 4.220348515104888e-08], "target_probs": 0.9949501752853394}}


{"result": {"time": "2021-02-11 12:09:15.652705", "n_pass": [86, 6, 4], "n_token": 52, "loss": [0.12313037365674973, 0.027593232691287994], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 49, 8, 16, 32, 6, 41, 12, 28, 30, 24, 37, 45]}}
{"prediction": {"error_location": 0.8841484785079956, "repair_targets": [0.9727839827537537], "repair_candidates": [0.9727839827537537, 0.0035138647072017193, 0.01781022734940052, 4.640174665837549e-06, 0.0055988687090575695, 4.0409362554783e-05, 0.0002395951742073521, 1.0321573284954866e-07, 1.946814620623627e-07, 3.2835930596775142e-06, 4.623742370313266e-06, 6.291318044304717e-08, 1.7154825115994754e-07, 3.0825034968984255e-08], "target_probs": 0.9727839827537537}}


{"result": {"time": "2021-02-11 12:09:15.768180", "n_pass": [91, 8, 5], "n_token": 50, "loss": [0.15923461318016052, 0.045221999287605286], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 47, 8, 16, 32, 6, 39, 12, 28, 30, 24, 35, 43]}}
{"prediction": {"error_location": 0.8527963161468506, "repair_targets": [0.9557852745056152], "repair_candidates": [0.9557852745056152, 0.004226980730891228, 0.034695155918598175, 3.511859176796861e-06, 0.0036359946243464947, 6.00386738369707e-05, 0.0015829855110496283, 5.090070587243645e-08, 7.787306088857804e-08, 2.6655457077140454e-06, 7.122255738067906e-06, 7.594040596359264e-08, 1.8005245294716588e-07, 2.1381971748724027e-08], "target_probs": 0.9557852745056152}}


{"result": {"time": "2021-02-11 12:09:15.824721", "n_pass": [93, 9, 6], "n_token": 48, "loss": [0.17899440228939056, 0.0523199737071991], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 45, 8, 16, 32, 6, 37, 12, 28, 30, 24, 35, 41]}}
{"prediction": {"error_location": 0.8361105918884277, "repair_targets": [0.9490251541137695], "repair_candidates": [0.9490251541137695, 0.005687637720257044, 0.04032404348254204, 4.946139597450383e-06, 0.003892580047249794, 8.510235056746751e-05, 0.0005360941286198795, 7.845997629374324e-08, 1.1090459395290964e-07, 4.5388846956484485e-06, 0.00043871215893886983, 1.4037235018804495e-07, 8.308925885103235e-07, 4.309810108793499e-08], "target_probs": 0.9490251541137695}}


{"result": {"time": "2021-02-11 12:09:15.881080", "n_pass": [95, 10, 7], "n_token": 46, "loss": [0.18496404588222504, 0.12942399084568024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 43, 8, 16, 32, 6, 37, 12, 28, 30, 24, 35, 39]}}
{"prediction": {"error_location": 0.8311342597007751, "repair_targets": [0.8786013722419739], "repair_candidates": [0.8786013722419739, 0.04424717649817467, 0.07231875509023666, 4.411091595102334e-06, 0.00424498924985528, 4.542955866781995e-05, 0.0002649333036970347, 6.975849942136847e-08, 7.918964683995e-08, 3.1013948955660453e-06, 0.00026826621615327895, 2.33853285180885e-07, 1.286643623643613e-06, 2.8304310006888045e-08], "target_probs": 0.8786013722419739}}


{"result": {"time": "2021-02-11 12:09:15.936672", "n_pass": [97, 11, 8], "n_token": 43, "loss": [0.16728763282299042, 0.13939176499843597], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 40, 8, 16, 32, 6, 37, 12, 28, 30, 24, 35, 39]}}
{"prediction": {"error_location": 0.8459561467170715, "repair_targets": [0.8698871731758118], "repair_candidates": [0.8698871731758118, 0.04334864392876625, 0.08297311514616013, 7.020438715699129e-06, 0.0031692057382315397, 7.156369247240946e-05, 0.00044220220297574997, 6.209018721392567e-08, 5.165505001514248e-08, 2.603124812594615e-06, 8.32932855701074e-05, 1.7618999663682189e-06, 1.2753806004184298e-05, 6.585397613889654e-07], "target_probs": 0.8698871731758118}}


{"result": {"time": "2021-02-11 12:09:15.992320", "n_pass": [99, 12, 9], "n_token": 41, "loss": [0.08680114150047302, 0.29192689061164856], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [2, 18, 38, 6, 14, 30, 4, 35, 10, 26, 28, 22, 33, 37]}}
{"prediction": {"error_location": 0.91685950756073, "repair_targets": [0.7468231320381165], "repair_candidates": [0.7468231320381165, 0.09511902183294296, 0.15554986894130707, 8.847990102367476e-06, 0.0018704839749261737, 0.00043939592433162034, 0.00012680236250162125, 3.605578768883788e-08, 3.616398913663943e-08, 2.2305819129542215e-06, 4.683198858401738e-05, 2.3776894977345364e-06, 9.741351277625654e-06, 1.141374127655581e-06], "target_probs": 0.7468231320381165}}


{"result": {"time": "2021-02-11 12:09:16.106412", "n_pass": [104, 14, 10], "n_token": 39, "loss": [0.05424589291214943, 0.20900177955627441], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [2, 16, 36, 6, 12, 28, 4, 33, 8, 24, 26, 20, 31, 35]}}
{"prediction": {"error_location": 0.9471991658210754, "repair_targets": [0.8113937973976135], "repair_candidates": [0.8113937973976135, 0.05518306419253349, 0.13042448461055756, 9.604533261153847e-06, 0.0025837202556431293, 0.00035154246143065393, 3.469915463938378e-05, 6.364576421447055e-08, 7.432971216303486e-08, 2.4989183202706045e-06, 6.391906026692595e-06, 3.33279172082257e-06, 5.349935690901475e-06, 1.3762826256424887e-06], "target_probs": 0.8113937973976135}}


{"result": {"time": "2021-02-11 12:09:16.162953", "n_pass": [106, 15, 11], "n_token": 37, "loss": [0.020460380241274834, 0.031182069331407547], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [2, 14, 34, 6, 10, 26, 4, 31, 8, 22, 24, 18, 29, 33]}}
{"prediction": {"error_location": 0.9797476530075073, "repair_targets": [0.9692990779876709], "repair_candidates": [0.9692990779876709, 0.02710387110710144, 0.0029329461976885796, 2.7483104076964082e-06, 0.0003842141595669091, 0.00026779569452628493, 4.081955466972431e-06, 2.307145230417973e-08, 2.330368431557872e-08, 3.1169520298135467e-07, 2.6482748580747284e-06, 7.779011639286182e-07, 9.212019449478248e-07, 6.027871108926774e-07], "target_probs": 0.9692990779876709}}


{"result": {"time": "2021-02-11 12:09:16.218733", "n_pass": [108, 16, 12], "n_token": 35, "loss": [0.037633705884218216, 0.028541257604956627], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2], "repair_candidates": [2, 12, 32, 6, 10, 24, 4, 29, 8, 20, 22, 16, 27, 31]}}
{"prediction": {"error_location": 0.9630658626556396, "repair_targets": [0.9718621969223022], "repair_candidates": [0.9718621969223022, 0.026556579396128654, 0.0012747673317790031, 6.148763077362673e-06, 3.980101246270351e-05, 0.00021906346955802292, 2.18155219045002e-05, 5.53464367669676e-08, 1.1525906984388712e-07, 5.599736709882563e-07, 1.56507649080595e-05, 7.649263693565445e-07, 2.2141625777294394e-06, 3.7497787275242445e-07], "target_probs": 0.9718621969223022}}


{"result": {"time": "2021-02-11 12:09:16.274868", "n_pass": [110, 17, 13], "n_token": 33, "loss": [0.19717028737068176, 0.6253353357315063], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 18, "repair_targets": [2], "repair_candidates": [2, 12, 30, 6, 10, 22, 4, 27, 8, 18, 20, 14, 25, 29]}}
{"prediction": {"error_location": 0.8210508823394775, "repair_targets": [0.5350819826126099], "repair_candidates": [0.5350819826126099, 0.44834157824516296, 0.003573694499209523, 0.00030848183087073267, 0.0010363322217017412, 0.010179980657994747, 0.00020067668810952455, 1.1474001439637505e-05, 3.711550743901171e-05, 2.351857074245345e-05, 0.0009064269252121449, 2.7009240511688404e-05, 0.00010255476809106767, 0.00016916811000555754], "target_probs": 0.5350819826126099}}


{"result": {"time": "2021-02-11 12:09:16.445924", "n_pass": [160, 20, 14], "n_token": 32, "loss": [0.278778612613678, 0.5561270713806152], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 29, 6, 10, 21, 4, 26, 8, 17, 19, 14, 24, 28]}}
{"prediction": {"error_location": 0.7567074298858643, "repair_targets": [0.5734255909919739], "repair_candidates": [0.5734255909919739, 0.4028635621070862, 0.008412339724600315, 0.0002459725074004382, 0.0004772295360453427, 0.013451121747493744, 8.432628237642348e-05, 3.6830658700637287e-06, 9.846296052273829e-06, 2.27094060392119e-05, 0.0007064883830025792, 1.945165240613278e-05, 0.00016510960995219648, 0.00011259529856033623], "target_probs": 0.5734255909919739}}


{"result": {"time": "2021-02-11 12:09:16.667853", "n_pass": [166, 24, 15], "n_token": 31, "loss": [0.20359712839126587, 0.4943808317184448], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 28, 6, 10, 20, 4, 25, 8, 17, 19, 14, 23, 27]}}
{"prediction": {"error_location": 0.8157908916473389, "repair_targets": [0.609948456287384], "repair_candidates": [0.609948456287384, 0.354544460773468, 0.0181282926350832, 0.00013494587619788945, 0.0011130475904792547, 0.014478097669780254, 0.00010346273484174162, 1.8191814206147683e-06, 2.0338302419986576e-06, 9.102324838750064e-05, 0.0011168915079906583, 1.2530070307548158e-05, 0.00020703650079667568, 0.00011793896555900574], "target_probs": 0.609948456287384}}


{"result": {"time": "2021-02-11 12:09:16.724062", "n_pass": [168, 25, 16], "n_token": 30, "loss": [0.19370345771312714, 0.5160006284713745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 27, 6, 10, 20, 4, 24, 8, 17, 19, 14, 22, 26]}}
{"prediction": {"error_location": 0.8239021301269531, "repair_targets": [0.5969030261039734], "repair_candidates": [0.5969030261039734, 0.36935320496559143, 0.01620553992688656, 0.0003549634711816907, 0.002333796815946698, 0.012725504115223885, 0.00015661372162867337, 6.131522695795866e-06, 7.727160664217081e-06, 4.486647230805829e-05, 0.0011392048327252269, 2.6542000341578387e-05, 0.0003817718243226409, 0.00036117693525739014], "target_probs": 0.5969030261039734}}


{"result": {"time": "2021-02-11 12:09:16.837926", "n_pass": [171, 27, 17], "n_token": 29, "loss": [0.3057153522968292, 0.3525398075580597], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 26, 6, 10, 20, 4, 23, 8, 17, 19, 14, 22, 25]}}
{"prediction": {"error_location": 0.7365962862968445, "repair_targets": [0.7029005885124207], "repair_candidates": [0.7029005885124207, 0.2493721842765808, 0.03694535419344902, 0.0007271136273629963, 0.0032769483514130116, 0.005871948320418596, 6.577106978511438e-05, 2.770638639049139e-05, 6.149544788058847e-05, 0.00010303482122253627, 1.6306954421452247e-05, 2.8763384761987254e-05, 5.513570613402408e-06, 0.0005972990766167641], "target_probs": 0.7029005885124207}}


{"result": {"time": "2021-02-11 12:09:16.893866", "n_pass": [173, 28, 18], "n_token": 28, "loss": [0.049588728696107864, 0.0054911659099161625], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 25, 6, 10, 20, 4, 23, 8, 17, 19, 14, 22, 24]}}
{"prediction": {"error_location": 0.9516205191612244, "repair_targets": [0.9945238828659058], "repair_candidates": [0.9945238828659058, 0.003031662665307522, 0.0017759958282113075, 2.073440555250272e-05, 0.0001645133743295446, 0.00037189581780694425, 7.481118700525258e-06, 2.258464348869893e-07, 1.3983723192723119e-06, 2.064711907223682e-06, 2.7030335331801325e-05, 1.843829159042798e-05, 5.129319106345065e-05, 3.457234015513677e-06], "target_probs": 0.9945238828659058}}


{"result": {"time": "2021-02-11 12:09:16.949307", "n_pass": [176, 29, 19], "n_token": 26, "loss": [0.06371267139911652, 0.019404243677854538], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [2, 12, 25, 6, 10, 20, 4, 23, 8, 17, 19, 14, 22, 24]}}
{"prediction": {"error_location": 0.9382745623588562, "repair_targets": [0.9807828068733215], "repair_candidates": [0.9807828068733215, 0.008644504472613335, 0.0006943931803107262, 1.0587200449663214e-05, 0.00021065316104795784, 0.009503158740699291, 2.2339439965435304e-05, 1.1213248996000402e-07, 2.2441658131810982e-07, 7.098382184267393e-07, 0.00012757159129250795, 2.0595439309545327e-06, 3.7967555499562877e-07, 4.84486974983156e-07], "target_probs": 0.9807828068733215}}


{"result": {"time": "2021-02-11 12:09:17.119140", "n_pass": [180, 32, 20], "n_token": 25, "loss": [0.09699094295501709, 0.03596487641334534], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 11, 24, 5, 9, 19, 3, 22, 7, 16, 18, 13, 21, 23]}}
{"prediction": {"error_location": 0.9075643420219421, "repair_targets": [0.964674174785614], "repair_candidates": [0.964674174785614, 0.006121955346316099, 0.0004007257812190801, 9.45531610341277e-06, 5.871127359569073e-05, 0.02863224223256111, 1.5156340850808192e-05, 7.232053889083545e-08, 1.67381045912407e-07, 5.826615279147518e-07, 8.262263145297766e-05, 9.58073769652401e-07, 1.6492847976223857e-07, 3.0194244118320057e-06], "target_probs": 0.964674174785614}}


{"result": {"time": "2021-02-11 12:09:17.174691", "n_pass": [182, 33, 21], "n_token": 24, "loss": [0.12832723557949066, 0.01576180011034012], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [2, 10, 23, 4, 8, 18, 3, 21, 6, 15, 17, 12, 20, 22]}}
{"prediction": {"error_location": 0.8795655369758606, "repair_targets": [0.9843617677688599], "repair_candidates": [0.9843617677688599, 0.0010201669065281749, 0.008186204358935356, 7.917616130725946e-06, 1.270492430194281e-05, 0.006289550103247166, 1.2137051271565724e-05, 6.169916133558218e-08, 8.489033831438064e-08, 5.002095349482261e-06, 0.00010129099246114492, 8.189959430637828e-07, 9.925310706648816e-08, 2.1396867850853596e-06], "target_probs": 0.9843617677688599}}


{"result": {"time": "2021-02-11 12:09:17.286096", "n_pass": [186, 35, 22], "n_token": 23, "loss": [0.08452372252941132, 0.013894257135689259], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", "comments", "=", "delimiter", "data", "=", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [2, 9, 22, 4, 7, 17, 3, 20, 6, 14, 16, 11, 19, 21]}}
{"prediction": {"error_location": 0.9189497232437134, "repair_targets": [0.986201822757721], "repair_candidates": [0.986201822757721, 0.002025436144322157, 0.010580187663435936, 7.09184769220883e-06, 1.5859486666158773e-05, 0.0010166831780225039, 1.3969077372166794e-05, 6.613575465053145e-08, 9.851792981407925e-08, 4.143922978983028e-06, 0.0001326316560152918, 1.6262088138319086e-06, 6.863336921014707e-08, 4.0420556501885585e-07], "target_probs": 0.986201822757721}}


{"result": {"time": "2021-02-11 12:09:17.342278", "n_pass": [188, 36, 23], "n_token": 22, "loss": [0.06353447586297989, 0.00929008424282074], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", "comments", "=", "delimiter", "data", "encoding", "=", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [2, 8, 21, 4, 7, 16, 3, 19, 6, 13, 15, 10, 18, 20]}}
{"prediction": {"error_location": 0.9384418725967407, "repair_targets": [0.9907529354095459], "repair_candidates": [0.9907529354095459, 0.003110185032710433, 0.005780757404863834, 1.0783692232507747e-05, 1.93103333003819e-05, 0.00017537872190587223, 1.3455764019454364e-05, 8.670196649518402e-08, 1.7245919536890142e-07, 7.208577244455228e-06, 0.00012564317148644477, 3.924977136193775e-06, 6.678654074221413e-08, 4.1339983880561704e-08], "target_probs": 0.9907529354095459}}


{"result": {"time": "2021-02-11 12:09:17.398349", "n_pass": [190, 37, 24], "n_token": 21, "loss": [0.21352232992649078, 0.09358537197113037], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", "comments", "=", "delimiter", "data", "encoding", "line", "generate_edgelist", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [2, 8, 20, 4, 7, 15, 3, 18, 6, 12, 14, 9, 17, 19]}}
{"prediction": {"error_location": 0.8077341914176941, "repair_targets": [0.9106602668762207], "repair_candidates": [0.9106602668762207, 0.04884136840701103, 0.026655809953808784, 0.00031116916215978563, 0.00017658743308857083, 0.002162633929401636, 0.0017869906732812524, 5.635443358187331e-06, 1.194800734083401e-05, 0.0035049195867031813, 0.005465076304972172, 0.0004152391920797527, 1.8849279967980692e-06, 4.5478168431145605e-07], "target_probs": 0.9106602668762207}}


{"result": {"time": "2021-02-11 12:09:17.456944", "n_pass": [192, 38, 25], "n_token": 20, "loss": [0.17757536470890045, 0.0725039690732956], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", "path", "comments", "=", "delimiter", "data", "encoding", "line", "(", "delimiter", ",", "delimiter", "data", "#INDENT#", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [2, 8, 19, 4, 7, 14, 3, 17, 6, 11, 13, 9, 16, 18]}}
{"prediction": {"error_location": 0.8372979164123535, "repair_targets": [0.9300620555877686], "repair_candidates": [0.9300620555877686, 0.03403053805232048, 0.023597553372383118, 0.0002482275594957173, 0.0013515715254470706, 0.00036938668927177787, 0.0014922346454113722, 2.8737756565533346e-06, 6.108025445428211e-06, 0.005776791833341122, 0.0027165310457348824, 0.0003439673746470362, 1.7886237628772506e-06, 3.9658121409047453e-07], "target_probs": 0.9300620555877686}}




Minimal simplified tokens:

['#NEWLINE#', 'def write_edgelist(', 'G', 'path', 'comments', '=', 'delimiter', 'data', 'encoding', 'line', '(', 'delimiter', ',', 'delimiter', 'data', '#INDENT#', 'line', 'path', 'line', 'encoding']
