
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "=", "_ErrorFormatter", "(", "None", ",", "None", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"], "error_location": [26], "repair_targets": [2, 31, 41], "repair_candidates": [9, 22, 2, 31, 41, 20, 26, 35], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "nlloyd/SubliminalCollaborator/libs/twisted/test/test_strerror.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1951, "results": {"model": "transformer", "prob": {"loc": [[1.763255386322271e-05, 4.569835898582397e-10, 3.7113193074311823e-10, 2.716190120044537e-11, 2.233740276080809e-11, 2.6556798427002093e-11, 1.3334201798276268e-11, 7.970116754074663e-12, 8.155326240710803e-12, 2.0326386407365504e-10, 6.698159821932892e-12, 3.2745018502255974e-11, 2.717237025662289e-11, 1.5837052155798226e-11, 6.465068064231971e-12, 6.344303988409239e-12, 8.094361986232812e-12, 9.99093342779478e-12, 7.879094945928422e-12, 2.8557861370820392e-12, 1.0132379379967915e-09, 1.4387402944363026e-12, 8.258316253062503e-10, 7.155839809591669e-11, 1.197095374216861e-11, 3.2553668094514876e-10, 0.9999301433563232, 3.588574992718918e-10, 5.527062835186669e-11, 1.6241771816360995e-11, 1.0907559577777448e-11, 4.1244001269813424e-11, 6.838090857441692e-12, 1.3846236440392956e-12, 3.126757186500129e-11, 6.32747696727165e-06, 1.4188500201128829e-11, 8.343029739288355e-11, 2.1260984292559293e-11, 2.8684734709044646e-12, 2.7473275390765828e-11, 4.589405216393061e-05, 3.187259484116467e-11, 1.0119853739720686e-11, 1.6913852263211737e-11, 1.651593098395132e-11]], "pointer": [[0.0, 0.0, 0.04390418156981468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004277834086678922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.777399484126363e-05, 0.0, 9.492299795965664e-06, 0.0, 0.0, 0.0, 5.321851972439617e-07, 0.0, 0.0, 0.0, 0.0, 0.0007034986047074199, 0.0, 0.0, 0.0, 3.5494480243869475e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9549363851547241, 0.0, 0.0, 0.0, 0.0]], "target": [0.999544084072113]}, "loss": [6.985420623095706e-05, 0.00045601988676935434], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:31:10.439244", "n_pass": [1, 1, 1], "n_token": 46, "loss": [6.985420623095706e-05, 0.00045601988676935434], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "=", "_ErrorFormatter", "(", "None", ",", "None", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2, 31, 41], "repair_candidates": [9, 22, 2, 31, 41, 20, 26, 35]}}
{"prediction": {"error_location": 0.9999301433563232, "repair_targets": [0.04390418156981468, 0.0007034986047074199, 0.9549363851547241], "repair_candidates": [0.04390418156981468, 0.0004277834086678922, 1.777399484126363e-05, 9.492299795965664e-06, 5.321851972439617e-07, 0.0007034986047074199, 3.5494480243869475e-07, 0.9549363851547241], "target_probs": 0.999544084072113}}


{"result": {"time": "2021-02-11 11:31:10.494692", "n_pass": [22, 2, 2], "n_token": 40, "loss": [0.00024685196694917977, 0.0011306237429380417], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 25, 35], "repair_candidates": [9, 16, 2, 25, 35, 14, 20, 29]}}
{"prediction": {"error_location": 0.9997530579566956, "repair_targets": [0.025613529607653618, 0.0002732668654061854, 0.9729832410812378], "repair_candidates": [0.025613529607653618, 0.001072246115654707, 2.47886582656065e-05, 3.120833571301773e-05, 6.641517416028364e-07, 0.0002732668654061854, 1.0381984338891925e-06, 0.9729832410812378], "target_probs": 0.9988700151443481}}


{"result": {"time": "2021-02-11 11:31:10.553406", "n_pass": [44, 3, 3], "n_token": 37, "loss": [0.0003505330823827535, 0.0009240604122169316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2, 22, 32], "repair_candidates": [9, 13, 2, 22, 32, 11, 17, 26]}}
{"prediction": {"error_location": 0.9996495246887207, "repair_targets": [0.044953614473342896, 8.059862011577934e-05, 0.9540421366691589], "repair_candidates": [0.044953614473342896, 0.0007422377821058035, 6.076376303099096e-05, 0.00011865163105539978, 1.127920427279605e-06, 8.059862011577934e-05, 8.21259106942307e-07, 0.9540421366691589], "target_probs": 0.9990763664245605}}


{"result": {"time": "2021-02-11 11:31:10.608402", "n_pass": [47, 4, 4], "n_token": 34, "loss": [0.131510928273201, 0.48991161584854126], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2, 19, 29], "repair_candidates": [9, 13, 2, 19, 29, 11, 17, 23]}}
{"prediction": {"error_location": 0.8767696619033813, "repair_targets": [0.07553207874298096, 0.06391415745019913, 0.47323429584503174], "repair_candidates": [0.07553207874298096, 0.15051612257957458, 0.002329456154257059, 0.23426644504070282, 0.00011698035814333707, 0.06391415745019913, 9.051334200194106e-05, 0.47323429584503174], "target_probs": 0.6126805543899536}}


{"result": {"time": "2021-02-11 11:31:10.773603", "n_pass": [53, 7, 5], "n_token": 32, "loss": [0.0069880131632089615, 0.11852466315031052], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 15, "repair_targets": [0, 17, 27], "repair_candidates": [7, 11, 0, 17, 27, 9, 15, 21]}}
{"prediction": {"error_location": 0.9930362105369568, "repair_targets": [0.005532195325940847, 0.1582222580909729, 0.7244754433631897], "repair_candidates": [0.005532195325940847, 0.018963921815156937, 4.9993399443337694e-05, 0.09274355322122574, 5.712079655495472e-06, 0.1582222580909729, 6.894132638990413e-06, 0.7244754433631897], "target_probs": 0.8882299065589905}}


{"result": {"time": "2021-02-11 11:31:10.828529", "n_pass": [55, 8, 6], "n_token": 29, "loss": [0.004096450749784708, 0.4765627384185791], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 12, "repair_targets": [0, 14, 24], "repair_candidates": [4, 8, 0, 14, 24, 6, 12, 18]}}
{"prediction": {"error_location": 0.9959119558334351, "repair_targets": [0.003949649166315794, 0.11012198030948639, 0.5068423748016357], "repair_candidates": [0.003949649166315794, 0.22735613584518433, 0.00014598290727008134, 0.15156863629817963, 5.940339633525582e-06, 0.11012198030948639, 9.306289939559065e-06, 0.5068423748016357], "target_probs": 0.6209139823913574}}


{"result": {"time": "2021-02-11 11:31:10.886449", "n_pass": [62, 9, 7], "n_token": 26, "loss": [0.004782903008162975, 0.41682106256484985], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 12, "repair_targets": [0, 14, 21], "repair_candidates": [4, 8, 0, 14, 21, 6, 12, 18]}}
{"prediction": {"error_location": 0.9952285289764404, "repair_targets": [0.004119505174458027, 0.23302288353443146, 0.42199647426605225], "repair_candidates": [0.004119505174458027, 0.19412793219089508, 0.0002066337619908154, 0.14651915431022644, 2.650981286933529e-06, 0.23302288353443146, 4.826476924790768e-06, 0.42199647426605225], "target_probs": 0.6591388583183289}}


{"result": {"time": "2021-02-11 11:31:11.050552", "n_pass": [93, 12, 8], "n_token": 24, "loss": [0.003022152464836836, 0.6731552481651306], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "(", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 12, "repair_targets": [0, 14, 21], "repair_candidates": [4, 8, 0, 14, 21, 6, 12, 18]}}
{"prediction": {"error_location": 0.9969825148582458, "repair_targets": [0.0022877142764627934, 0.09133864939212799, 0.4164701998233795], "repair_candidates": [0.0022877142764627934, 0.3381158113479614, 0.00043762088171206415, 0.15133224427700043, 8.752513167564757e-06, 0.09133864939212799, 8.971368515631184e-06, 0.4164701998233795], "target_probs": 0.510096549987793}}


{"result": {"time": "2021-02-11 11:31:11.105303", "n_pass": [95, 13, 9], "n_token": 23, "loss": [0.0015198357868939638, 0.1829095482826233], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "(", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 11, "repair_targets": [0, 13, 20], "repair_candidates": [3, 7, 0, 13, 20, 5, 11, 17]}}
{"prediction": {"error_location": 0.9984813332557678, "repair_targets": [0.0012822231510654092, 0.13046380877494812, 0.7010974287986755], "repair_candidates": [0.0012822231510654092, 0.06702715158462524, 0.0002054768119705841, 0.09991569817066193, 4.2254728214174975e-06, 0.13046380877494812, 4.0466552491125185e-06, 0.7010974287986755], "target_probs": 0.8328434824943542}}


{"result": {"time": "2021-02-11 11:31:11.381788", "n_pass": [103, 18, 10], "n_token": 22, "loss": [0.005854601040482521, 0.1328849345445633], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "assertEqual", "(", "message", ",", "(", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 19], "repair_candidates": [3, 7, 0, 12, 19, 5, 10, 16]}}
{"prediction": {"error_location": 0.9941624999046326, "repair_targets": [0.0012978537706658244, 0.15593944489955902, 0.7183285355567932], "repair_candidates": [0.0012978537706658244, 0.10054275393486023, 0.0004377800796646625, 0.02344183623790741, 8.91240324563114e-06, 0.15593944489955902, 2.9426978471747134e-06, 0.7183285355567932], "target_probs": 0.8755658268928528}}


{"result": {"time": "2021-02-11 11:31:11.491312", "n_pass": [107, 20, 11], "n_token": 20, "loss": [0.03222908079624176, 0.056656837463378906], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "message", ",", "(", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 17], "repair_candidates": [3, 7, 0, 12, 17, 5, 10, 14]}}
{"prediction": {"error_location": 0.9682846069335938, "repair_targets": [0.005969311110675335, 0.08391976356506348, 0.8550292253494263], "repair_candidates": [0.005969311110675335, 0.027413757517933846, 0.01842275634407997, 0.00864203367382288, 0.00017994290101341903, 0.08391976356506348, 0.00042316660983487964, 0.8550292253494263], "target_probs": 0.9449182748794556}}


{"result": {"time": "2021-02-11 11:31:11.877529", "n_pass": [134, 27, 12], "n_token": 19, "loss": [0.037855830043554306, 0.026596156880259514], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "message", "(", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 16], "repair_candidates": [3, 7, 0, 12, 16, 5, 10, 14]}}
{"prediction": {"error_location": 0.962851881980896, "repair_targets": [0.00879126787185669, 0.20265735685825348, 0.7623057961463928], "repair_candidates": [0.00879126787185669, 0.01576278544962406, 0.0031513471622020006, 0.0050907745026052, 4.130371235078201e-05, 0.20265735685825348, 0.00219933595508337, 0.7623057961463928], "target_probs": 0.9737544059753418}}


{"result": {"time": "2021-02-11 11:31:11.932341", "n_pass": [135, 28, 13], "n_token": 18, "loss": [0.014431270770728588, 0.00920868944376707], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "message", "self", ".", "probeErrorCode"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 15], "repair_candidates": [3, 7, 0, 12, 15, 5, 10, 14]}}
{"prediction": {"error_location": 0.9856723546981812, "repair_targets": [0.006693450268357992, 0.3474595546722412, 0.6366806030273438], "repair_candidates": [0.006693450268357992, 0.00677110068500042, 0.00030708612757734954, 0.0020007577259093523, 1.1995292879873887e-05, 0.3474595546722412, 7.544575782958418e-05, 0.6366806030273438], "target_probs": 0.990833580493927}}


{"result": {"time": "2021-02-11 11:31:11.987702", "n_pass": [137, 29, 14], "n_token": 17, "loss": [0.16785170137882233, 0.21439914405345917], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "message", "self", "probeErrorCode"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 15], "repair_candidates": [3, 7, 0, 12, 15, 5, 10, 14]}}
{"prediction": {"error_location": 0.8454791903495789, "repair_targets": [0.028194088488817215, 0.7310072779655457, 0.04782485589385033], "repair_candidates": [0.028194088488817215, 0.12378545850515366, 0.05023111402988434, 0.010049336589872837, 0.0009480613516643643, 0.7310072779655457, 0.007959939539432526, 0.04782485589385033], "target_probs": 0.807026207447052}}


{"result": {"time": "2021-02-11 11:31:12.042274", "n_pass": [138, 30, 15], "n_token": 16, "loss": [0.12084926664829254, 0.025078903883695602], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", "formatError", "(", "message", ".", "self", ".", "message", "self"]}}
{"position": {"error_location": 10, "repair_targets": [0, 12, 15], "repair_candidates": [3, 7, 0, 12, 15, 5, 10, 14]}}
{"prediction": {"error_location": 0.8861674070358276, "repair_targets": [0.011482659727334976, 0.6529961824417114, 0.31075412034988403], "repair_candidates": [0.011482659727334976, 0.020556652918457985, 0.0014255675487220287, 0.0024770451709628105, 7.706923497607931e-05, 0.6529961824417114, 0.0002306757087353617, 0.31075412034988403], "target_probs": 0.9752329587936401}}




Minimal simplified tokens:

['self', "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", '#NEWLINE#', 'formatter', '#NEWLINE#', 'message', '=', 'formatter', 'formatError', '(', 'message', '.', 'self', '.', 'message', 'self']
