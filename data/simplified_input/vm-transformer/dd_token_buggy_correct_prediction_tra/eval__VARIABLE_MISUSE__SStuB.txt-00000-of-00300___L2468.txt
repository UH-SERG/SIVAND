
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "[", "'status'", "]", "=", "(", "_", "(", "'Closed'", ")", "if", "json", ".", "case", ".", "closed", "else", "_", "(", "'Open'", ")", ")", "#NEWLINE#", "return", "json"], "error_location": [30], "repair_targets": [2, 11], "repair_candidates": [2, 11, 9, 19, 30, 43], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "dimagi/commcare-hq/corehq/ex-submodules/casexml/apps/case/templatetags/case_tags.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2468, "results": {"model": "transformer", "prob": {"loc": [[0.003152427962049842, 6.480102143768818e-08, 1.2673902460846875e-07, 7.577588001517199e-10, 1.5230960936918336e-09, 1.8435617477052801e-09, 1.329892973522817e-09, 6.949263386957227e-10, 9.779735909987153e-10, 2.4414421595508884e-09, 5.670655056633223e-10, 6.381745265571226e-07, 1.123090731525167e-09, 1.287260853466421e-10, 1.8519462630095518e-09, 1.0114391962856573e-10, 3.826902350567707e-09, 2.356625117272415e-09, 6.892132975444554e-10, 1.0227369529047792e-07, 1.787549414045131e-10, 2.198200510505899e-09, 1.1273437738879011e-10, 1.1901993279828105e-10, 6.71708522137493e-10, 1.2950245320553222e-08, 1.3305126778107024e-08, 2.742412519296522e-09, 3.4723046660189993e-10, 5.838423966508799e-09, 0.9968275427818298, 6.30179819438581e-09, 5.50628209694537e-10, 8.085528691026411e-09, 1.409434569055179e-09, 8.66867855275899e-10, 4.408786669074516e-10, 2.584286384887946e-08, 1.6852297335390176e-08, 4.218047688908655e-09, 2.854678049502013e-09, 7.832787751738124e-09, 2.174505908669744e-09, 1.8934986655949615e-05]], "pointer": [[0.0, 0.0, 0.32858943939208984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007191944750957191, 0.0, 0.6705961227416992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.245870397629915e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.047856757300906e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.94686903746333e-05]], "target": [0.9991855621337891]}, "loss": [0.0031774768140167, 0.0008147697080858052], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:39:22.600769", "n_pass": [1, 1, 1], "n_token": 44, "loss": [0.0031774768140167, 0.0008147697080858052], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "[", "'status'", "]", "=", "(", "_", "(", "'Closed'", ")", "if", "json", ".", "case", ".", "closed", "else", "_", "(", "'Open'", ")", ")", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 30, "repair_targets": [2, 11], "repair_candidates": [2, 11, 9, 19, 30, 43]}}
{"prediction": {"error_location": 0.9968275427818298, "repair_targets": [0.32858943939208984, 0.6705961227416992], "repair_candidates": [0.32858943939208984, 0.0007191944750957191, 0.6705961227416992, 5.245870397629915e-06, 5.047856757300906e-05, 3.94686903746333e-05], "target_probs": 0.9991855621337891}}


{"result": {"time": "2021-02-11 11:39:22.657077", "n_pass": [24, 2, 2], "n_token": 38, "loss": [0.023678040131926537, 0.0017407778650522232], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "case", ".", "closed", "else", "_", "(", "'Open'", ")", ")", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 24, "repair_targets": [2, 11], "repair_candidates": [2, 11, 9, 19, 24, 37]}}
{"prediction": {"error_location": 0.9766001105308533, "repair_targets": [0.43154916167259216, 0.5667115449905396], "repair_candidates": [0.43154916167259216, 0.0015168414684012532, 0.5667115449905396, 0.00020148068142589182, 5.279956440062961e-06, 1.5624493244104087e-05], "target_probs": 0.9982607364654541}}


{"result": {"time": "2021-02-11 11:39:22.712472", "n_pass": [26, 3, 3], "n_token": 32, "loss": [0.060693059116601944, 0.0037853149697184563], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "'Open'", ")", ")", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 24, "repair_targets": [2, 11], "repair_candidates": [2, 11, 9, 19, 24, 31]}}
{"prediction": {"error_location": 0.9411120414733887, "repair_targets": [0.5744815468788147, 0.4217402935028076], "repair_candidates": [0.5744815468788147, 0.003623410128057003, 0.4217402935028076, 0.00012791920744348317, 1.2395948942867108e-05, 1.4401277439901605e-05], "target_probs": 0.9962218403816223}}


{"result": {"time": "2021-02-11 11:39:22.768367", "n_pass": [45, 4, 4], "n_token": 29, "loss": [0.4005609154701233, 0.02803896553814411], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 24, "repair_targets": [2, 11], "repair_candidates": [2, 11, 9, 19, 24, 28]}}
{"prediction": {"error_location": 0.669944167137146, "repair_targets": [0.6852375268936157, 0.2871129810810089], "repair_candidates": [0.6852375268936157, 0.026952574029564857, 0.2871129810810089, 0.0006485343910753727, 1.7013888282235712e-05, 3.133531572530046e-05], "target_probs": 0.9723504781723022}}


{"result": {"time": "2021-02-11 11:39:22.878364", "n_pass": [48, 6, 5], "n_token": 27, "loss": [0.781812310218811, 0.03329090029001236], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "#INDENT#", "'\\n        Include calculated properties that need to be available to the case\\n        details display by overriding this method.\\n        '", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 22, "repair_targets": [2, 9], "repair_candidates": [2, 9, 7, 17, 22, 26]}}
{"prediction": {"error_location": 0.4575760066509247, "repair_targets": [0.5608311891555786, 0.40642598271369934], "repair_candidates": [0.5608311891555786, 0.03168175369501114, 0.40642598271369934, 0.0010259366827085614, 1.4094955986365676e-05, 2.113648588419892e-05], "target_probs": 0.9672571420669556}}


{"result": {"time": "2021-02-11 11:39:22.936344", "n_pass": [49, 7, 6], "n_token": 25, "loss": [0.6482605934143066, 0.010129320435225964], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "#NEWLINE#", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 20, "repair_targets": [2, 7], "repair_candidates": [2, 7, 5, 15, 20, 24]}}
{"prediction": {"error_location": 0.5229545831680298, "repair_targets": [0.3593623638153076, 0.6305594444274902], "repair_candidates": [0.3593623638153076, 0.008664922788739204, 0.6305594444274902, 0.00138759589754045, 1.6128037714224774e-06, 2.3982685888768174e-05], "target_probs": 0.9899218082427979}}


{"result": {"time": "2021-02-11 11:39:23.157323", "n_pass": [77, 11, 7], "n_token": 24, "loss": [0.7441284656524658, 0.007064381614327431], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "=", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 19, "repair_targets": [2, 6], "repair_candidates": [2, 6, 4, 14, 19, 23]}}
{"prediction": {"error_location": 0.4751482903957367, "repair_targets": [0.475105345249176, 0.517855167388916], "repair_candidates": [0.475105345249176, 0.0038367172237485647, 0.517855167388916, 0.0029236599802970886, 6.539633886859519e-06, 0.00027262017829343677], "target_probs": 0.992960512638092}}


{"result": {"time": "2021-02-11 11:39:23.212275", "n_pass": [79, 12, 8], "n_token": 23, "loss": [0.5619009733200073, 0.004901720676571131], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", ".", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 18, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 13, 18, 22]}}
{"prediction": {"error_location": 0.5701242089271545, "repair_targets": [0.3657708764076233, 0.6293393969535828], "repair_candidates": [0.3657708764076233, 0.003343503689393401, 0.6293393969535828, 0.0013142464449629188, 6.549253157572821e-06, 0.00022544052626471967], "target_probs": 0.995110273361206}}


{"result": {"time": "2021-02-11 11:39:23.270447", "n_pass": [81, 13, 9], "n_token": 22, "loss": [0.387370765209198, 0.01401659194380045], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", "case", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 17, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 12, 17, 21]}}
{"prediction": {"error_location": 0.678839385509491, "repair_targets": [0.21579937636852264, 0.7702817916870117], "repair_candidates": [0.21579937636852264, 0.003231759648770094, 0.7702817916870117, 0.010007715784013271, 5.696804873878136e-05, 0.0006224471144378185], "target_probs": 0.9860811829566956}}


{"result": {"time": "2021-02-11 11:39:23.325288", "n_pass": [82, 14, 10], "n_token": 21, "loss": [0.6276421546936035, 0.006465069483965635], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", ".", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 16, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 11, 16, 20]}}
{"prediction": {"error_location": 0.5338490605354309, "repair_targets": [0.3506941795349121, 0.6428616046905518], "repair_candidates": [0.3506941795349121, 0.001015826128423214, 0.6428616046905518, 0.005221555475145578, 7.821729013812728e-06, 0.00019911474373657256], "target_probs": 0.9935557842254639}}


{"result": {"time": "2021-02-11 11:39:23.380511", "n_pass": [83, 15, 11], "n_token": 20, "loss": [0.5025854110717773, 0.010553058236837387], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", "to_json", "(", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 15, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 10, 15, 19]}}
{"prediction": {"error_location": 0.604964554309845, "repair_targets": [0.3124021887779236, 0.6771002411842346], "repair_candidates": [0.3124021887779236, 0.0012355460785329342, 0.6771002411842346, 0.008952510543167591, 2.720953125390224e-05, 0.0002822300011757761], "target_probs": 0.9895024299621582}}


{"result": {"time": "2021-02-11 11:39:23.435576", "n_pass": [84, 16, 12], "n_token": 18, "loss": [0.6381164789199829, 0.010195314884185791], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", ")", "#NEWLINE#", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 13, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 8, 13, 17]}}
{"prediction": {"error_location": 0.5282865166664124, "repair_targets": [0.28365445137023926, 0.7062020301818848], "repair_candidates": [0.28365445137023926, 0.0015933346003293991, 0.7062020301818848, 0.007739389780908823, 0.00027301578666083515, 0.0005379017093218863], "target_probs": 0.989856481552124}}


{"result": {"time": "2021-02-11 11:39:23.490155", "n_pass": [85, 17, 13], "n_token": 16, "loss": [0.7257461547851562, 0.00018133377307094634], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", "json", "(", "'Closed'", ")", "if", "json", ".", "#NEWLINE#", "return", "json"]}}
{"position": {"error_location": 11, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 6, 11, 15]}}
{"prediction": {"error_location": 0.483963280916214, "repair_targets": [0.32501259446144104, 0.6748060584068298], "repair_candidates": [0.32501259446144104, 0.00011651964450720698, 0.6748060584068298, 1.4775955605728086e-05, 4.318247022183641e-07, 4.959226134815253e-05], "target_probs": 0.9998186826705933}}


{"result": {"time": "2021-02-11 11:39:23.602894", "n_pass": [89, 19, 14], "n_token": 14, "loss": [0.5870776772499084, 0.000957530050072819], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", "json", "(", "'Closed'", ")", "if", "json", "return", "json"]}}
{"position": {"error_location": 11, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 6, 11, 13]}}
{"prediction": {"error_location": 0.5559496283531189, "repair_targets": [0.03942316398024559, 0.9596197605133057], "repair_candidates": [0.03942316398024559, 4.7543097025481984e-05, 0.9596197605133057, 0.0009033479727804661, 1.8350228856434114e-06, 4.344640274211997e-06], "target_probs": 0.9990429282188416}}


{"result": {"time": "2021-02-11 11:39:23.821266", "n_pass": [98, 23, 15], "n_token": 12, "loss": [0.21944361925125122, 8.190013613784686e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def to_full_dict(", "self", ")", "json", "self", "json", "(", "if", "json", "return", "json"]}}
{"position": {"error_location": 9, "repair_targets": [2, 5], "repair_candidates": [2, 5, 4, 6, 9, 11]}}
{"prediction": {"error_location": 0.8029654622077942, "repair_targets": [0.26630058884620667, 0.7336175441741943], "repair_candidates": [0.26630058884620667, 5.6164302804972976e-05, 0.7336175441741943, 2.552553814894054e-05, 1.1051329096289919e-07, 2.6222586768653855e-08], "target_probs": 0.9999181032180786}}




Minimal simplified tokens:

['#NEWLINE#', 'def to_full_dict(', 'self', ')', 'json', 'self', 'json', '(', 'if', 'json', 'return', 'json']
