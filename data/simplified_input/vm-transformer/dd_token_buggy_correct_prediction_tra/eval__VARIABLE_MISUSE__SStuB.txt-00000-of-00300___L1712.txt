
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Check if network exists\\n\\n        :type network_uuid: str\\n            :rtype : Boolean\\n        '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "self", ".", "driver", ".", "conn", ".", "networkLookupByUUIDString", "(", "e", ".", "uuid", ")", "#NEWLINE#", "return", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")", "==", "libvirt", ".", "VIR_ERR_NO_NETWORK", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise"], "error_location": [26], "repair_targets": [7, 18], "repair_candidates": [26, 40, 46, 7, 18], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "openstack/fuel-devops/devops/driver/libvirt/libvirt_driver.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1712, "results": {"model": "transformer", "prob": {"loc": [[0.0003683389804791659, 2.077796068533644e-08, 4.322136260004328e-10, 2.1508126391012183e-09, 2.5173221840368853e-10, 3.679894167163411e-10, 2.2962758361444457e-09, 9.052241978224629e-08, 4.406531389777868e-11, 1.3285257616235668e-10, 6.692387616302753e-11, 4.809114564907624e-11, 4.4058379167211115e-09, 5.3990468346087894e-11, 7.27854027049446e-11, 2.203723870053409e-10, 1.5563443589439174e-10, 1.1292247692473723e-10, 1.7801689011776034e-07, 6.562983489999397e-11, 1.4623618288522877e-11, 2.026807333077585e-10, 5.3254085169429644e-11, 8.027760678430695e-10, 2.278577847236729e-11, 3.2962979013007043e-09, 0.999624490737915, 9.928496913502727e-10, 2.581726776806903e-10, 4.6055606550687855e-10, 7.08459194087574e-11, 3.829644240616048e-11, 4.15364320716094e-09, 1.1703800428808364e-10, 1.9138582385558323e-10, 1.2492759049465008e-09, 4.827272448437725e-08, 5.912212941439066e-10, 8.426450648357786e-09, 3.2465100052725404e-10, 1.8102305432421417e-08, 4.4756789940869623e-10, 6.253171314085648e-10, 1.1801474242290055e-09, 1.1870417981896253e-09, 5.296814098443292e-10, 5.734081241826061e-06, 9.292706604213663e-10, 1.0970800656817659e-10, 1.498433488400508e-09, 6.180873590722058e-10, 1.1540368660689637e-09, 9.966468041966436e-07, 4.328787994722916e-09, 7.118203804168388e-09, 7.120576905883524e-10, 5.167202221656453e-09, 1.1368822550039681e-09, 6.781476491468652e-10, 1.4131331660394153e-09, 1.3543992594122756e-08, 1.2050223041626396e-09, 1.1098305607859515e-09, 1.2592805687106079e-09, 1.805312788150104e-09, 9.40411082339665e-10, 5.143247494565628e-10, 1.1710087122196455e-08]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997973620891571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020175015088170767, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.8344351572259256e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.051926902728155e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7554222015169216e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999911189079285]}, "loss": [0.00037555795279331505, 8.88113117980538e-06], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:27:00.018818", "n_pass": [1, 1, 1], "n_token": 68, "loss": [0.00037555795279331505, 8.88113117980538e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Check if network exists\\n\\n        :type network_uuid: str\\n            :rtype : Boolean\\n        '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "self", ".", "driver", ".", "conn", ".", "networkLookupByUUIDString", "(", "e", ".", "uuid", ")", "#NEWLINE#", "return", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")", "==", "libvirt", ".", "VIR_ERR_NO_NETWORK", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise"]}}
{"position": {"error_location": 26, "repair_targets": [7, 18], "repair_candidates": [26, 40, 46, 7, 18]}}
{"prediction": {"error_location": 0.999624490737915, "repair_targets": [0.997973620891571, 0.0020175015088170767], "repair_candidates": [0.997973620891571, 0.0020175015088170767, 5.8344351572259256e-08, 6.051926902728155e-06, 2.7554222015169216e-06], "target_probs": 0.9999911189079285}}


{"result": {"time": "2021-02-11 11:27:00.075726", "n_pass": [11, 2, 2], "n_token": 51, "loss": [0.0001137191939051263, 1.0132795296158292e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Check if network exists\\n\\n        :type network_uuid: str\\n            :rtype : Boolean\\n        '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "self", ".", "driver", ".", "conn", ".", "networkLookupByUUIDString", "(", "e", ".", "uuid", ")", "#NEWLINE#", "return", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 26, "repair_targets": [7, 18], "repair_candidates": [26, 40, 46, 7, 18]}}
{"prediction": {"error_location": 0.9998862743377686, "repair_targets": [0.9985358715057373, 0.0014631119556725025], "repair_candidates": [0.9985358715057373, 0.0014631119556725025, 1.9429561959327657e-08, 8.671077011968009e-07, 1.197661987362153e-07], "target_probs": 0.9999989867210388}}


{"result": {"time": "2021-02-11 11:27:00.132000", "n_pass": [21, 3, 3], "n_token": 43, "loss": [0.00051771110156551, 1.3709077393286861e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "driver", ".", "conn", ".", "networkLookupByUUIDString", "(", "e", ".", "uuid", ")", "#NEWLINE#", "return", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 18, "repair_targets": [7, 10], "repair_candidates": [18, 32, 38, 7, 10]}}
{"prediction": {"error_location": 0.9994823932647705, "repair_targets": [0.9855062961578369, 0.014492359943687916], "repair_candidates": [0.9855062961578369, 0.014492359943687916, 4.0289268810056456e-08, 8.975171681413485e-07, 4.0561124592386477e-07], "target_probs": 0.9999986290931702}}


{"result": {"time": "2021-02-11 11:27:00.188108", "n_pass": [38, 4, 4], "n_token": 39, "loss": [0.007981075905263424, 1.0669288712961134e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "uuid", ")", "#NEWLINE#", "return", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 14, "repair_targets": [7, 10], "repair_candidates": [14, 28, 34, 7, 10]}}
{"prediction": {"error_location": 0.9920507073402405, "repair_targets": [0.9993884563446045, 0.000600876344833523], "repair_candidates": [0.9993884563446045, 0.000600876344833523, 1.5595416869018663e-07, 7.152384114306187e-06, 3.3119267754955217e-06], "target_probs": 0.9999893307685852}}


{"result": {"time": "2021-02-11 11:27:00.246832", "n_pass": [40, 5, 5], "n_token": 35, "loss": [0.015937911346554756, 3.910141094820574e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "retry", "(", ")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 14, "repair_targets": [7, 10], "repair_candidates": [14, 24, 30, 7, 10]}}
{"prediction": {"error_location": 0.9841886758804321, "repair_targets": [0.9991002082824707, 0.0008606716874055564], "repair_candidates": [0.9991002082824707, 0.0008606716874055564, 3.3034885404958914e-07, 2.0891586245852523e-05, 1.7923472114489414e-05], "target_probs": 0.9999608993530273}}


{"result": {"time": "2021-02-11 11:27:00.414215", "n_pass": [45, 8, 6], "n_token": 31, "loss": [0.011686672456562519, 8.404290383623447e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "True", "#NEWLINE#", "#UNINDENT#", "except", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 20, 26, 3, 6]}}
{"prediction": {"error_location": 0.9883813261985779, "repair_targets": [0.8687872886657715, 0.13120432198047638], "repair_candidates": [0.8687872886657715, 0.13120432198047638, 6.263508112169802e-07, 4.845571766054491e-06, 2.906942199842888e-06], "target_probs": 0.9999915957450867}}


{"result": {"time": "2021-02-11 11:27:00.470316", "n_pass": [49, 9, 7], "n_token": 27, "loss": [0.5673505663871765, 0.00018693764286581427], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "libvirt", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 16, 22, 3, 6]}}
{"prediction": {"error_location": 0.5670257806777954, "repair_targets": [0.378810852766037, 0.6210022568702698], "repair_candidates": [0.378810852766037, 0.6210022568702698, 1.5336252545239404e-05, 0.00014352024300023913, 2.8002776161883958e-05], "target_probs": 0.9998130798339844}}


{"result": {"time": "2021-02-11 11:27:00.584700", "n_pass": [68, 11, 8], "n_token": 25, "loss": [0.00949368067085743, 4.947197794535896e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "libvirtError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 14, 20, 3, 6]}}
{"prediction": {"error_location": 0.990551233291626, "repair_targets": [0.32003748416900635, 0.6799575686454773], "repair_candidates": [0.32003748416900635, 0.6799575686454773, 9.457868088702526e-08, 2.9933109999547014e-06, 1.8699142856348772e-06], "target_probs": 0.9999950528144836}}


{"result": {"time": "2021-02-11 11:27:00.639813", "n_pass": [69, 12, 9], "n_token": 23, "loss": [0.6455703973770142, 0.0001687549811322242], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", ":", "#NEWLINE#", "#INDENT#", "if", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 12, 18, 3, 6]}}
{"prediction": {"error_location": 0.5243633389472961, "repair_targets": [0.5065126419067383, 0.4933186173439026], "repair_candidates": [0.5065126419067383, 0.4933186173439026, 2.1197851310716942e-05, 0.00013733713421970606, 1.0142392056877725e-05], "target_probs": 0.9998312592506409}}


{"result": {"time": "2021-02-11 11:27:00.695388", "n_pass": [71, 13, 10], "n_token": 20, "loss": [0.3945619761943817, 3.7313202483346686e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", ":", "(", "e", ".", "get_error_code", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 12, 15, 3, 6]}}
{"prediction": {"error_location": 0.6739751696586609, "repair_targets": [0.452180951833725, 0.547781765460968], "repair_candidates": [0.452180951833725, 0.547781765460968, 4.988733508071164e-06, 2.6820820494322106e-05, 5.571383098867955e-06], "target_probs": 0.9999626874923706}}


{"result": {"time": "2021-02-11 11:27:00.750902", "n_pass": [73, 14, 11], "n_token": 17, "loss": [0.8125864267349243, 7.450857810908929e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [")", "#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", ":", "(", "e", "."]}}
{"position": {"error_location": 10, "repair_targets": [3, 6], "repair_candidates": [10, 12, 15, 3, 6]}}
{"prediction": {"error_location": 0.44370895624160767, "repair_targets": [0.36101600527763367, 0.6389094591140747], "repair_candidates": [0.36101600527763367, 0.6389094591140747, 3.1134143227973254e-06, 4.039639679831453e-05, 3.100837056990713e-05], "target_probs": 0.9999254941940308}}


{"result": {"time": "2021-02-11 11:27:00.974631", "n_pass": [98, 18, 12], "n_token": 16, "loss": [0.31258827447891235, 4.100883597857319e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", ":", "(", "e", "."]}}
{"position": {"error_location": 9, "repair_targets": [2, 5], "repair_candidates": [9, 11, 14, 2, 5]}}
{"prediction": {"error_location": 0.7315511107444763, "repair_targets": [0.4221281111240387, 0.5778309106826782], "repair_candidates": [0.4221281111240387, 0.5778309106826782, 1.249977458428475e-06, 3.5565137750381837e-06, 3.61450802301988e-05], "target_probs": 0.9999589920043945}}


{"result": {"time": "2021-02-11 11:27:01.474273", "n_pass": [111, 27, 13], "n_token": 15, "loss": [0.7999788522720337, 0.00017572993237990886], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", ":", "e", "."]}}
{"position": {"error_location": 9, "repair_targets": [2, 5], "repair_candidates": [9, 11, 13, 2, 5]}}
{"prediction": {"error_location": 0.44933846592903137, "repair_targets": [0.351258248090744, 0.6485660076141357], "repair_candidates": [0.351258248090744, 0.6485660076141357, 2.7574367322813487e-06, 5.637687354465015e-05, 0.0001166361544164829], "target_probs": 0.9998242855072021}}


{"result": {"time": "2021-02-11 11:27:01.975405", "n_pass": [125, 36, 14], "n_token": 14, "loss": [0.44502830505371094, 0.00019921857165172696], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", ".", "networkLookupByUUIDString", "(", "e", ".", "e", "e", "."]}}
{"position": {"error_location": 9, "repair_targets": [2, 5], "repair_candidates": [9, 11, 12, 2, 5]}}
{"prediction": {"error_location": 0.6408060789108276, "repair_targets": [0.49018123745918274, 0.5096195936203003], "repair_candidates": [0.49018123745918274, 0.5096195936203003, 9.048521314980462e-05, 4.717459523817524e-05, 6.153889262350276e-05], "target_probs": 0.9998008012771606}}


{"result": {"time": "2021-02-11 11:27:02.253466", "n_pass": [133, 41, 15], "n_token": 13, "loss": [0.5276814699172974, 3.421365181566216e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def exists(", "self", "#NEWLINE#", "#INDENT#", "self", "networkLookupByUUIDString", "(", "e", ".", "e", "e", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 5], "repair_candidates": [8, 10, 11, 2, 5]}}
{"prediction": {"error_location": 0.5899712443351746, "repair_targets": [0.7543790340423584, 0.24558673799037933], "repair_candidates": [0.7543790340423584, 0.24558673799037933, 4.54871451438521e-06, 1.373996383335907e-05, 1.5974976122379303e-05], "target_probs": 0.9999657869338989}}




Minimal simplified tokens:

['#NEWLINE#', 'def exists(', 'self', '#NEWLINE#', '#INDENT#', 'self', 'networkLookupByUUIDString', '(', 'e', '.', 'e', 'e', '.']
