
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        .. todo::\\n\\n            WRITEME\\n        '", "#NEWLINE#", "return", "(", "'\\n        if (!CudaNdarray_is_c_contiguous(%%(%(arg_name)s)s))\\n        {\\n            if (!(%(class_name_caps)s_COPY_NON_CONTIGUOUS)) {\\n                PyErr_SetString(PyExc_ValueError,\\n                    \"%(class)s: %(arg_name)s must be C contiguous\");\\n                %%(fail)s;\\n            }\\n        }\\n        '", "%", "{", "#NEWLINE#", "#INDENT#", "'class'", ":", "arg_name", ".", "__class__", ".", "__name__", ",", "#NEWLINE#", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", ".", "__class__", ".", "__name__", ".", "upper", "(", ")", ",", "#NEWLINE#", "#UNINDENT#", "}", ")"], "error_location": [20], "repair_targets": [2, 34], "repair_candidates": [4, 20, 29, 2, 34], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "lisa-lab/pylearn2/pylearn2/sandbox/cuda_convnet/pool.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1192, "results": {"model": "transformer", "prob": {"loc": [[0.010666681453585625, 1.9092631475814414e-07, 7.914625825833355e-07, 3.0173898935004217e-09, 1.5505540318372368e-07, 2.4444473112339438e-09, 4.712397583261918e-09, 4.673558429146851e-09, 3.3700089385746423e-09, 7.197197504638098e-08, 5.1371702447511325e-09, 1.300796470538046e-09, 2.1151185691792307e-08, 1.4226735629563336e-06, 9.633173903011993e-08, 1.9222969172005833e-07, 1.8890638386892533e-08, 3.717233854061419e-09, 5.918262768744853e-09, 3.3332576698796856e-09, 0.9867975115776062, 4.579741030852347e-08, 1.372258537912785e-07, 8.121823213969037e-08, 6.546735598078612e-09, 2.576961755096363e-08, 4.916482776451403e-09, 5.164711325278404e-08, 7.136963464660084e-09, 0.0013367400970309973, 1.1964687018917175e-08, 1.1100257601981411e-08, 7.715205363467703e-09, 1.69481939593652e-08, 0.0011951420456171036, 1.0390957427830472e-08, 1.1235537833442777e-08, 1.553771156181938e-08, 3.353734845390477e-09, 1.8831963544130303e-08, 5.3120929877081835e-09, 2.1186829712860344e-07, 7.508078425644271e-08, 4.074766479789105e-08, 2.45704612211739e-08, 2.1519992898788587e-08, 4.000597897402258e-08, 7.851008376746904e-08]], "pointer": [[0.0, 0.0, 0.7162034511566162, 0.0, 0.0012509196531027555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.3762836614623666e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0006878912681714e-05, 0.0, 0.0, 0.0, 0.0, 0.28247180581092834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9986752271652222]}, "loss": [0.013290387578308582, 0.0013256510719656944], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:17:19.066126", "n_pass": [1, 1, 1], "n_token": 48, "loss": [0.013290387578308582, 0.0013256510719656944], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        .. todo::\\n\\n            WRITEME\\n        '", "#NEWLINE#", "return", "(", "'\\n        if (!CudaNdarray_is_c_contiguous(%%(%(arg_name)s)s))\\n        {\\n            if (!(%(class_name_caps)s_COPY_NON_CONTIGUOUS)) {\\n                PyErr_SetString(PyExc_ValueError,\\n                    \"%(class)s: %(arg_name)s must be C contiguous\");\\n                %%(fail)s;\\n            }\\n        }\\n        '", "%", "{", "#NEWLINE#", "#INDENT#", "'class'", ":", "arg_name", ".", "__class__", ".", "__name__", ",", "#NEWLINE#", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", ".", "__class__", ".", "__name__", ".", "upper", "(", ")", ",", "#NEWLINE#", "#UNINDENT#", "}", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 34], "repair_candidates": [4, 20, 29, 2, 34]}}
{"prediction": {"error_location": 0.9867975115776062, "repair_targets": [0.7162034511566162, 0.28247180581092834], "repair_candidates": [0.7162034511566162, 0.0012509196531027555, 5.3762836614623666e-05, 2.0006878912681714e-05, 0.28247180581092834], "target_probs": 0.9986752271652222}}


{"result": {"time": "2021-02-11 11:17:19.121100", "n_pass": [11, 2, 2], "n_token": 36, "loss": [0.08639118820428848, 0.04395024850964546], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        .. todo::\\n\\n            WRITEME\\n        '", "#NEWLINE#", "return", "(", "'\\n        if (!CudaNdarray_is_c_contiguous(%%(%(arg_name)s)s))\\n        {\\n            if (!(%(class_name_caps)s_COPY_NON_CONTIGUOUS)) {\\n                PyErr_SetString(PyExc_ValueError,\\n                    \"%(class)s: %(arg_name)s must be C contiguous\");\\n                %%(fail)s;\\n            }\\n        }\\n        '", "%", "{", "#NEWLINE#", "#INDENT#", "'class'", ":", "arg_name", ".", "__class__", ".", "__name__", ",", "#NEWLINE#", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 20, "repair_targets": [2, 34], "repair_candidates": [4, 20, 29, 2, 34]}}
{"prediction": {"error_location": 0.917235255241394, "repair_targets": [0.4778832793235779, 0.479118287563324], "repair_candidates": [0.4778832793235779, 0.0358794741332531, 0.006853352766484022, 0.00026556974626146257, 0.479118287563324], "target_probs": 0.9570015668869019}}


{"result": {"time": "2021-02-11 11:17:19.175956", "n_pass": [21, 3, 3], "n_token": 30, "loss": [0.0377873033285141, 0.0069565181620419025], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "(", "'\\n        if (!CudaNdarray_is_c_contiguous(%%(%(arg_name)s)s))\\n        {\\n            if (!(%(class_name_caps)s_COPY_NON_CONTIGUOUS)) {\\n                PyErr_SetString(PyExc_ValueError,\\n                    \"%(class)s: %(arg_name)s must be C contiguous\");\\n                %%(fail)s;\\n            }\\n        }\\n        '", "%", "{", "#NEWLINE#", "#INDENT#", "'class'", ":", "arg_name", ".", "__class__", ".", "__name__", ",", "#NEWLINE#", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 14, "repair_targets": [2, 28], "repair_candidates": [4, 14, 23, 2, 28]}}
{"prediction": {"error_location": 0.9629177451133728, "repair_targets": [0.5311148762702942, 0.46195271611213684], "repair_candidates": [0.5311148762702942, 0.0059839640744030476, 0.0006808312609791756, 0.0002675999130588025, 0.46195271611213684], "target_probs": 0.9930676221847534}}


{"result": {"time": "2021-02-11 11:17:19.230260", "n_pass": [22, 4, 4], "n_token": 24, "loss": [0.2220577746629715, 0.006337176077067852], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "'class'", ":", "arg_name", ".", "__class__", ".", "__name__", ",", "#NEWLINE#", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 22], "repair_candidates": [4, 8, 17, 2, 22]}}
{"prediction": {"error_location": 0.8008691668510437, "repair_targets": [0.6193642616271973, 0.37431856989860535], "repair_candidates": [0.6193642616271973, 0.005210752133280039, 0.0008408235153183341, 0.0002656189608387649, 0.37431856989860535], "target_probs": 0.993682861328125}}


{"result": {"time": "2021-02-11 11:17:19.342312", "n_pass": [37, 6, 5], "n_token": 21, "loss": [0.7630603909492493, 0.027737049385905266], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "'class'", ":", "arg_name", ".", "__class__", ".", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 19], "repair_candidates": [4, 8, 14, 2, 19]}}
{"prediction": {"error_location": 0.4662373661994934, "repair_targets": [0.6806153059005737, 0.2920288145542145], "repair_candidates": [0.6806153059005737, 0.02099180407822132, 0.00413050502538681, 0.0022335441317409277, 0.2920288145542145], "target_probs": 0.9726440906524658}}


{"result": {"time": "2021-02-11 11:17:19.505284", "n_pass": [58, 9, 6], "n_token": 19, "loss": [0.12206918746232986, 0.002624555490911007], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "'class'", ":", "arg_name", ".", "'arg_name'", ":", "arg_name", ",", "#NEWLINE#", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 17], "repair_candidates": [4, 8, 12, 2, 17]}}
{"prediction": {"error_location": 0.8850871324539185, "repair_targets": [0.8063083291053772, 0.1910705417394638], "repair_candidates": [0.8063083291053772, 0.0019280173582956195, 0.0005739469779655337, 0.00011910896137123927, 0.1910705417394638], "target_probs": 0.9973788857460022}}


{"result": {"time": "2021-02-11 11:17:19.613187", "n_pass": [61, 11, 7], "n_token": 17, "loss": [0.6636179685592651, 0.02495349757373333], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "'class'", ":", "arg_name", ".", "'arg_name'", ":", "arg_name", "'class_name_caps'", ":", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 15], "repair_candidates": [4, 8, 12, 2, 15]}}
{"prediction": {"error_location": 0.5149847865104675, "repair_targets": [0.5975637435913086, 0.37779155373573303], "repair_candidates": [0.5975637435913086, 0.013085667043924332, 0.01033663097769022, 0.0012223528465256095, 0.37779155373573303], "target_probs": 0.9753552675247192}}


{"result": {"time": "2021-02-11 11:17:20.374897", "n_pass": [93, 25, 8], "n_token": 16, "loss": [0.5688372850418091, 0.008543524891138077], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _argument_contiguity_check(", "self", ",", "arg_name", ")", "'class'", ":", "arg_name", ".", "'arg_name'", ":", "arg_name", ":", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [2, 14], "repair_candidates": [4, 8, 12, 2, 14]}}
{"prediction": {"error_location": 0.5661833882331848, "repair_targets": [0.7080026268959045, 0.28349024057388306], "repair_candidates": [0.7080026268959045, 0.004244030918926001, 0.003980226814746857, 0.0002829313452821225, 0.28349024057388306], "target_probs": 0.9914928674697876}}




Minimal simplified tokens:

['#NEWLINE#', 'def _argument_contiguity_check(', 'self', ',', 'arg_name', ')', "'class'", ':', 'arg_name', '.', "'arg_name'", ':', 'arg_name', ':', 'self', '.']
