
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_jobs'", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"], "error_location": [62], "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 79, 102, 11, 43], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "saltstack/salt/salt/netapi/rest_tornado/saltnado.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3044, "results": {"model": "transformer", "prob": {"loc": [[0.001605027704499662, 3.120051417226932e-08, 1.7175418032255862e-10, 5.883974973919237e-10, 3.0891730840032494e-10, 1.1999898852366186e-09, 1.5520604246255232e-10, 2.99505475975792e-10, 1.6709336692066756e-10, 3.9982361865753546e-10, 2.2380885339456924e-11, 2.8627708203998736e-08, 1.8694838732624675e-10, 5.6402531950494605e-11, 2.145528373020955e-11, 2.5215730545258275e-11, 3.285823002574517e-11, 3.412651064516048e-11, 2.982530333817124e-10, 4.486803983905219e-11, 5.5867092202399604e-11, 4.6561174360526536e-10, 7.565469917203416e-10, 1.4392828262543844e-08, 2.2431026480695948e-10, 2.8179316519105768e-11, 2.2209437067211013e-10, 6.498300231250198e-10, 1.3239695451083833e-10, 2.2487142703475627e-10, 7.715211108871856e-11, 4.2447323433947304e-11, 1.3219988992396736e-10, 1.0411935202903067e-10, 6.172704014595354e-11, 8.107868820772524e-10, 1.557829847342873e-07, 1.3111737251492173e-09, 5.224340404730299e-10, 8.207631796430803e-11, 1.6513343470414554e-10, 2.4575541601734585e-10, 1.1174935976576705e-10, 4.3029271182604134e-05, 1.4387714353247816e-09, 1.2288640105495574e-09, 5.072729458710512e-10, 2.88363910527778e-08, 4.689352239850564e-10, 2.2103786856408902e-10, 4.962180666367999e-10, 2.8431157872432777e-08, 3.440045759361965e-08, 3.774569101722136e-09, 2.627584261283289e-10, 1.6851001705120439e-09, 5.181726714376111e-10, 3.7062832802803314e-08, 5.517371559626838e-10, 6.942174057833483e-10, 4.1588404942061175e-10, 2.7558288984153023e-10, 0.9983514547348022, 8.458069800099111e-10, 1.1887951734124158e-09, 1.637984414770699e-09, 6.241134831164175e-10, 1.91171434238413e-08, 1.2029643947641944e-09, 1.544218530824537e-09, 5.486811560651006e-10, 1.0875377681740517e-10, 4.2067721528482593e-10, 6.025865362246918e-10, 5.486173182411846e-10, 1.2911037516882828e-10, 4.6017314958568534e-10, 1.0067836564431332e-09, 5.687411097632378e-10, 8.294610154280235e-08, 6.603353419620817e-10, 2.2577005542867568e-10, 4.777365170127723e-10, 4.2781591602647495e-09, 3.3770160001722616e-09, 1.5095750205418312e-09, 2.689013456347311e-10, 9.310088810998707e-10, 4.2901035501863305e-10, 1.1487444773194966e-08, 2.6909530159713313e-10, 4.738343051258198e-10, 3.2690921081268698e-09, 2.409074051357152e-10, 1.164944407605617e-08, 3.639921974940563e-10, 7.191892636981834e-10, 4.231348327277118e-10, 1.4389464619846137e-10, 3.6152483784412937e-10, 3.6198161135203577e-10, 2.1771892622091116e-10, 3.4483127464568497e-10, 4.5241707602450276e-10, 1.317915082621468e-10, 1.056316367709087e-09, 1.0815730533408896e-08]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001272360241273418, 0.0, 0.05329909175634384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.690844212338561e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.593928679241799e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9465637803077698, 0.0, 0.0, 0.0, 2.2767345342344925e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3137986343281227e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.706112453182868e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.523976132186363e-07, 0.0, 0.0, 0.0, 0.0]], "target": [0.9998628497123718]}, "loss": [0.0016499252524226904, 0.00013715968816541135], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:46:18.298190", "n_pass": [1, 1, 1], "n_token": 107, "loss": [0.0016499252524226904, 0.00013715968816541135], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_jobs'", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 62, "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 79, 102, 11, 43]}}
{"prediction": {"error_location": 0.9983514547348022, "repair_targets": [0.05329909175634384, 0.9465637803077698], "repair_candidates": [0.0001272360241273418, 0.05329909175634384, 2.690844212338561e-06, 4.593928679241799e-06, 0.9465637803077698, 2.2767345342344925e-07, 1.3137986343281227e-06, 8.706112453182868e-08, 9.523976132186363e-07], "target_probs": 0.9998628497123718}}


{"result": {"time": "2021-02-11 11:46:18.356983", "n_pass": [25, 2, 2], "n_token": 93, "loss": [0.0017327546374872327, 0.00015975321002770215], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_jobs'", ",", "#NEWLINE#", "'client'", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 62, "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 65, 88, 11, 43]}}
{"prediction": {"error_location": 0.998268723487854, "repair_targets": [0.19381079077720642, 0.8060294985771179], "repair_candidates": [0.00012474911636672914, 0.19381079077720642, 7.589799224660965e-06, 2.0969700926798396e-05, 0.8060294985771179, 2.190023735693103e-07, 4.818089109903667e-06, 1.1029924706917882e-07, 1.3706485333386809e-06], "target_probs": 0.999840259552002}}


{"result": {"time": "2021-02-11 11:46:18.415341", "n_pass": [48, 3, 3], "n_token": 86, "loss": [0.004509873688220978, 0.0003400426940061152], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", ":", "'runner'", ",", "#NEWLINE#", "#UNINDENT#", "}", "]", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 62, "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 65, 81, 11, 43]}}
{"prediction": {"error_location": 0.9955002665519714, "repair_targets": [0.2194708287715912, 0.7801891565322876], "repair_candidates": [0.00022920472838450223, 0.2194708287715912, 2.0746760128531605e-05, 7.792885298840702e-05, 0.7801891565322876, 6.018223643877718e-07, 9.794590368983336e-06, 2.1293735130711866e-07, 1.650973331379646e-06], "target_probs": 0.9996600151062012}}


{"result": {"time": "2021-02-11 11:46:18.472167", "n_pass": [49, 4, 4], "n_token": 79, "loss": [0.011977773159742355, 0.00045709326514042914], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "tornado", ".", "web", ".", "asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 62, "repair_targets": [11, 43], "repair_candidates": [9, 23, 32, 47, 62, 65, 74, 11, 43]}}
{"prediction": {"error_location": 0.9880937933921814, "repair_targets": [0.23951506614685059, 0.7600279450416565], "repair_candidates": [0.00024080497678369284, 0.23951506614685059, 3.127643503830768e-05, 0.00016173263429664075, 0.7600279450416565, 1.4983306755311787e-06, 1.7739146642270498e-05, 7.15230612513551e-07, 3.171282514813356e-06], "target_probs": 0.9995430111885071}}


{"result": {"time": "2021-02-11 11:46:18.531933", "n_pass": [51, 5, 5], "n_token": 73, "loss": [0.0009519098093733191, 0.00026223520399071276], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 56, "repair_targets": [5, 37], "repair_candidates": [3, 17, 26, 41, 56, 59, 68, 5, 37]}}
{"prediction": {"error_location": 0.9990485310554504, "repair_targets": [0.6267090439796448, 0.3730287551879883], "repair_candidates": [3.30520560964942e-05, 0.6267090439796448, 2.5376399207743816e-05, 0.00019755407993216068, 0.3730287551879883, 7.671037565160077e-07, 1.470386678192881e-06, 2.737332351898658e-07, 3.748463541342062e-06], "target_probs": 0.9997377991676331}}


{"result": {"time": "2021-02-11 11:46:18.589258", "n_pass": [53, 6, 6], "n_token": 67, "loss": [0.0004078510100953281, 0.00012332962069194764], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#INDENT#", "'fun'", ":", "'jobs.list_job'", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 50, "repair_targets": [5, 31], "repair_candidates": [3, 11, 20, 35, 50, 53, 62, 5, 31]}}
{"prediction": {"error_location": 0.9995922446250916, "repair_targets": [0.2941319942474365, 0.7057446837425232], "repair_candidates": [1.1702861229423434e-05, 0.2941319942474365, 1.680067362030968e-05, 9.34513082029298e-05, 0.7057446837425232, 9.328247188022942e-07, 1.259206499071297e-07, 4.383892004966583e-08, 2.8563346177179483e-07], "target_probs": 0.9998766779899597}}


{"result": {"time": "2021-02-11 11:46:18.703796", "n_pass": [59, 8, 7], "n_token": 60, "loss": [0.000766102981287986, 0.00015236108447425067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ".", "lowstate", "=", ",", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 43, "repair_targets": [5, 31], "repair_candidates": [3, 11, 20, 35, 43, 46, 55, 5, 31]}}
{"prediction": {"error_location": 0.9992340803146362, "repair_targets": [0.29917916655540466, 0.7006685137748718], "repair_candidates": [2.2953654479351826e-05, 0.29917916655540466, 2.6780930056702346e-05, 0.00010069227573694661, 0.7006685137748718, 7.99743531842978e-07, 2.287099079012478e-07, 1.8736511719907867e-07, 7.056084427858877e-07], "target_probs": 0.9998476505279541}}


{"result": {"time": "2021-02-11 11:46:18.818734", "n_pass": [87, 10, 8], "n_token": 56, "loss": [0.005977965891361237, 8.309232362080365e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "lowstate", "=", "[", "{", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 39, "repair_targets": [5, 31], "repair_candidates": [3, 11, 20, 35, 39, 42, 51, 5, 31]}}
{"prediction": {"error_location": 0.9940398931503296, "repair_targets": [0.3381529152393341, 0.6617640256881714], "repair_candidates": [1.4136187928670552e-05, 0.3381529152393341, 1.4399350220628548e-05, 5.2100855100434273e-05, 0.6617640256881714, 6.872434710203379e-07, 4.814310727851989e-07, 1.021265916278935e-06, 2.1870303612558928e-07], "target_probs": 0.9999169111251831}}


{"result": {"time": "2021-02-11 11:46:18.878105", "n_pass": [90, 11, 9], "n_token": 52, "loss": [0.0073685296811163425, 0.00016356851847376674], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self", ".", "disbatch", "(", ")"]}}
{"position": {"error_location": 39, "repair_targets": [5, 31], "repair_candidates": [3, 11, 20, 35, 39, 42, 47, 5, 31]}}
{"prediction": {"error_location": 0.9926584362983704, "repair_targets": [0.2649455666542053, 0.734890878200531], "repair_candidates": [4.6558925532735884e-05, 0.2649455666542053, 3.1165312975645065e-05, 7.843475032132119e-05, 0.734890878200531, 2.284795073137502e-06, 1.463779881305527e-06, 2.2139902284834534e-06, 1.459742634324357e-06], "target_probs": 0.9998364448547363}}


{"result": {"time": "2021-02-11 11:46:18.934978", "n_pass": [92, 12, 10], "n_token": 48, "loss": [0.03082922473549843, 0.00035566455335356295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["asynchronous", "#NEWLINE#", "def get(", "self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 39, "repair_targets": [5, 31], "repair_candidates": [3, 11, 20, 35, 39, 42, 47, 5, 31]}}
{"prediction": {"error_location": 0.9696412682533264, "repair_targets": [0.2360367625951767, 0.7636076211929321], "repair_candidates": [0.00010324153845431283, 0.2360367625951767, 6.497751746792346e-05, 0.00015854126831982285, 0.7636076211929321, 4.835246727452613e-06, 1.4716330952069256e-05, 3.083825276917196e-06, 6.130228939582594e-06], "target_probs": 0.99964439868927}}


{"result": {"time": "2021-02-11 11:46:18.992214", "n_pass": [93, 13, 11], "n_token": 45, "loss": [0.004915415309369564, 0.0002831621386576444], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "\"\\n        A convenience URL for getting lists of previously run jobs or getting\\n        the return from a single job\\n\\n        .. http:get:: /jobs/(jid)\\n\\n            List jobs or show a single job from the job cache.\\n\\n            :status 200: |200|\\n            :status 401: |401|\\n            :status 406: |406|\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs\\n\\n        .. code-block:: http\\n\\n            GET /jobs HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 165\\n            Content-Type: application/x-yaml\\n\\n            return:\\n            - '20121130104633606931':\\n                Arguments:\\n                - '3'\\n                Function: test.fib\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: jerry\\n                Target-type: glob\\n\\n        **Example request:**\\n\\n        .. code-block:: bash\\n\\n            curl -i localhost:8000/jobs/20121130104633606931\\n\\n        .. code-block:: http\\n\\n            GET /jobs/20121130104633606931 HTTP/1.1\\n            Host: localhost:8000\\n            Accept: application/x-yaml\\n\\n        **Example response:**\\n\\n        .. code-block:: http\\n\\n            HTTP/1.1 200 OK\\n            Content-Length: 73\\n            Content-Type: application/x-yaml\\n\\n            info:\\n            - Arguments:\\n                - '3'\\n                Function: test.fib\\n                Minions:\\n                - jerry\\n                Start Time: 2012, Nov 30 10:46:33.606931\\n                Target: '*'\\n                Target-type: glob\\n                User: saltdev\\n                jid: '20121130104633606931'\\n            return:\\n            - jerry:\\n                - - 0\\n                - 1\\n                - 1\\n                - 2\\n                - 6.9141387939453125e-06\\n        \"", "#NEWLINE#", "if", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 36, "repair_targets": [2, 28], "repair_candidates": [0, 8, 17, 32, 36, 39, 44, 2, 28]}}
{"prediction": {"error_location": 0.995096743106842, "repair_targets": [0.04988234117627144, 0.9498345255851746], "repair_candidates": [0.00025042661582119763, 0.04988234117627144, 2.755909235929721e-06, 2.676847725524567e-05, 0.9498345255851746, 1.6572578260820592e-06, 5.797804760732106e-07, 8.499649197801773e-07, 1.9823347940928215e-07], "target_probs": 0.9997168779373169}}


{"result": {"time": "2021-02-11 11:46:19.048477", "n_pass": [95, 14, 12], "n_token": 42, "loss": [0.001405204995535314, 0.00030492423684336245], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", ".", "_verify_auth", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 33, "repair_targets": [2, 25], "repair_candidates": [0, 5, 14, 29, 33, 36, 41, 2, 25]}}
{"prediction": {"error_location": 0.9985957741737366, "repair_targets": [0.056555069983005524, 0.9431400299072266], "repair_candidates": [0.00026144617004320025, 0.056555069983005524, 9.149732250079978e-06, 2.9058386644464917e-05, 0.9431400299072266, 3.479384304228006e-06, 5.048403295404569e-07, 6.389574878085114e-07, 5.93122933878476e-07], "target_probs": 0.9996951222419739}}


{"result": {"time": "2021-02-11 11:46:19.104860", "n_pass": [97, 15, 13], "n_token": 39, "loss": [0.010932195000350475, 0.0005284155486151576], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 30, "repair_targets": [2, 22], "repair_candidates": [0, 5, 11, 26, 30, 33, 38, 2, 22]}}
{"prediction": {"error_location": 0.9891273379325867, "repair_targets": [0.06269343942403793, 0.9367783069610596], "repair_candidates": [0.0003897787246387452, 0.06269343942403793, 2.5871329853544012e-05, 6.76602721796371e-05, 0.9367783069610596, 3.159590414725244e-05, 2.36820619647915e-06, 1.171807184618956e-06, 9.820979357755277e-06], "target_probs": 0.9994717240333557}}


{"result": {"time": "2021-02-11 11:46:19.160959", "n_pass": [98, 16, 14], "n_token": 36, "loss": [0.02012956328690052, 0.0011823608074337244], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", ".", "redirect", "(", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 27, "repair_targets": [2, 19], "repair_candidates": [0, 5, 8, 23, 27, 30, 35, 2, 19]}}
{"prediction": {"error_location": 0.9800715446472168, "repair_targets": [0.14577144384384155, 0.8530468940734863], "repair_candidates": [0.0009639117051847279, 0.14577144384384155, 6.988701352383941e-05, 7.776239363010973e-05, 0.8530468940734863, 4.0634706238051876e-05, 6.412559741875157e-06, 6.450098908317159e-07, 2.24195664486615e-05], "target_probs": 0.9988183379173279}}


{"result": {"time": "2021-02-11 11:46:19.218546", "n_pass": [100, 17, 15], "n_token": 33, "loss": [0.0869867131114006, 0.005634775385260582], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "'/login'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 24, "repair_targets": [2, 16], "repair_candidates": [0, 5, 8, 20, 24, 27, 32, 2, 16]}}
{"prediction": {"error_location": 0.9166891574859619, "repair_targets": [0.11998338252305984, 0.8743976950645447], "repair_candidates": [0.0017768795369192958, 0.11998338252305984, 0.001218106597661972, 0.0016137213679030538, 0.8743976950645447, 0.0005175128462724388, 5.2537081501213834e-05, 3.021799784619361e-05, 0.0004098905192222446], "target_probs": 0.9943810701370239}}


{"result": {"time": "2021-02-11 11:46:19.329036", "n_pass": [102, 19, 16], "n_token": 30, "loss": [0.08009126782417297, 0.005994848441332579], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "'/login'", ")", "#NEWLINE#", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 21, "repair_targets": [2, 13], "repair_candidates": [0, 5, 8, 17, 21, 24, 29, 2, 13]}}
{"prediction": {"error_location": 0.9230319857597351, "repair_targets": [0.09005990624427795, 0.9039631485939026], "repair_candidates": [0.0012774812057614326, 0.09005990624427795, 0.0012235279427841306, 0.0015417949762195349, 0.9039631485939026, 0.0013724548043683171, 2.590739677543752e-05, 6.874758400954306e-05, 0.0004670056514441967], "target_probs": 0.9940230846405029}}


{"result": {"time": "2021-02-11 11:46:19.385363", "n_pass": [111, 20, 17], "n_token": 27, "loss": [0.505500316619873, 0.05348470062017441], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", "#NEWLINE#", "'jid'", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 18, "repair_targets": [2, 10], "repair_candidates": [0, 5, 8, 14, 18, 21, 26, 2, 10]}}
{"prediction": {"error_location": 0.6032037734985352, "repair_targets": [0.13385909795761108, 0.8140613436698914], "repair_candidates": [0.0044302563183009624, 0.13385909795761108, 0.014730268158018589, 0.023858878761529922, 0.8140613436698914, 0.005851252004504204, 7.103090320015326e-05, 0.00021262998052407056, 0.002925303764641285], "target_probs": 0.9479204416275024}}


{"result": {"time": "2021-02-11 11:46:19.500164", "n_pass": [140, 22, 18], "n_token": 25, "loss": [0.43141990900039673, 0.017143752425909042], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#NEWLINE#", "#NEWLINE#", "#UNINDENT#", "self"]}}
{"position": {"error_location": 16, "repair_targets": [2, 10], "repair_candidates": [0, 5, 8, 14, 16, 19, 24, 2, 10]}}
{"prediction": {"error_location": 0.649586021900177, "repair_targets": [0.14439548552036285, 0.8386068940162659], "repair_candidates": [0.0018948104698210955, 0.14439548552036285, 0.007868311367928982, 0.006084892898797989, 0.8386068940162659, 0.0005219592130742967, 1.2072752724634483e-05, 4.599004387273453e-05, 0.000569656491279602], "target_probs": 0.9830023646354675}}


{"result": {"time": "2021-02-11 11:46:19.611532", "n_pass": [143, 24, 19], "n_token": 23, "loss": [0.25081416964530945, 0.009997466579079628], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 16, "repair_targets": [2, 10], "repair_candidates": [0, 5, 8, 14, 16, 19, 22, 2, 10]}}
{"prediction": {"error_location": 0.7781668901443481, "repair_targets": [0.09245062619447708, 0.8976017236709595], "repair_candidates": [0.001906758639961481, 0.09245062619447708, 0.003279799362644553, 0.003975254483520985, 0.8976017236709595, 0.0005499084363691509, 1.2068917385477107e-05, 3.3039439585991204e-05, 0.00019081021309830248], "target_probs": 0.990052342414856}}


{"result": {"time": "2021-02-11 11:46:19.667319", "n_pass": [146, 25, 20], "n_token": 22, "loss": [0.8668009042739868, 0.01123113464564085], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "(", "not", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 15, "repair_targets": [1, 9], "repair_candidates": [0, 4, 7, 13, 15, 18, 21, 1, 9]}}
{"prediction": {"error_location": 0.420293927192688, "repair_targets": [0.04745350033044815, 0.9413781762123108], "repair_candidates": [0.003311112755909562, 0.04745350033044815, 0.002891081850975752, 0.003410645527765155, 0.9413781762123108, 0.0013408273225650191, 8.415296906605363e-05, 1.6307902114931494e-05, 0.00011415535118430853], "target_probs": 0.9888316988945007}}


{"result": {"time": "2021-02-11 11:46:19.722957", "n_pass": [148, 26, 21], "n_token": 21, "loss": [0.22501814365386963, 0.0014767219545319676], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "not", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 14, "repair_targets": [1, 8], "repair_candidates": [0, 3, 6, 12, 14, 17, 20, 1, 8]}}
{"prediction": {"error_location": 0.7985016703605652, "repair_targets": [0.003929376136511564, 0.9945949912071228], "repair_candidates": [0.0005598831339739263, 0.003929376136511564, 0.00020206159388180822, 0.00043141533387824893, 0.9945949912071228, 0.0002540787390898913, 8.384289685636759e-06, 3.2905513762671035e-06, 1.6514159142388962e-05], "target_probs": 0.9985243678092957}}


{"result": {"time": "2021-02-11 11:46:19.778710", "n_pass": [149, 27, 22], "n_token": 20, "loss": [0.20110510289669037, 0.002114264527335763], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "#NEWLINE#", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 13, "repair_targets": [1, 7], "repair_candidates": [0, 2, 5, 11, 13, 16, 19, 1, 7]}}
{"prediction": {"error_location": 0.8178264498710632, "repair_targets": [0.0035252696834504604, 0.9943627119064331], "repair_candidates": [0.0004311322118155658, 0.0035252696834504604, 0.0004739904252346605, 0.000742515258025378, 0.9943627119064331, 0.00035436986945569515, 1.947369491972495e-05, 6.064699846319854e-05, 2.9830051062162966e-05], "target_probs": 0.9978879690170288}}


{"result": {"time": "2021-02-11 11:46:19.948589", "n_pass": [179, 30, 23], "n_token": 19, "loss": [0.1370663344860077, 0.0030093726236373186], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "#INDENT#", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 12, "repair_targets": [1, 6], "repair_candidates": [0, 2, 4, 10, 12, 15, 18, 1, 6]}}
{"prediction": {"error_location": 0.8719123601913452, "repair_targets": [0.004366916138678789, 0.9926282167434692], "repair_candidates": [0.0004979635123163462, 0.004366916138678789, 0.0008710263064131141, 0.000863406399730593, 0.9926282167434692, 0.0006706604035571218, 3.08703602058813e-05, 3.8604444853262976e-05, 3.215312972315587e-05], "target_probs": 0.9969951510429382}}


{"result": {"time": "2021-02-11 11:46:20.004060", "n_pass": [180, 31, 24], "n_token": 18, "loss": [0.018896792083978653, 0.0005625280318781734], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "if", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 11, "repair_targets": [1, 5], "repair_candidates": [0, 2, 3, 9, 11, 14, 17, 1, 5]}}
{"prediction": {"error_location": 0.9812807440757751, "repair_targets": [0.0021515539847314358, 0.9972860813140869], "repair_candidates": [6.517876317957416e-05, 0.0021515539847314358, 7.547202403657138e-05, 0.00011709196405718103, 0.9972860813140869, 0.000290018564555794, 3.44360523740761e-06, 8.382806299778167e-06, 2.7735588901123265e-06], "target_probs": 0.9994376301765442}}


{"result": {"time": "2021-02-11 11:46:20.059458", "n_pass": [182, 32, 25], "n_token": 17, "loss": [0.032904110848903656, 0.001412017154507339], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "jid", ":", "#NEWLINE#", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 10, "repair_targets": [1, 4], "repair_candidates": [0, 2, 3, 8, 10, 13, 16, 1, 4]}}
{"prediction": {"error_location": 0.9676313400268555, "repair_targets": [0.003514425130560994, 0.9950745701789856], "repair_candidates": [0.0002800908696372062, 0.003514425130560994, 0.00021588064555544406, 0.0002776134351734072, 0.9950745701789856, 0.0005410445737652481, 2.6698215151554905e-05, 4.287907722755335e-05, 2.685121762624476e-05], "target_probs": 0.9985889792442322}}


{"result": {"time": "2021-02-11 11:46:20.173030", "n_pass": [185, 34, 26], "n_token": 16, "loss": [0.25487419962882996, 0.014413196593523026], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "jid", ":", "#INDENT#", "self", ":", "self", ",", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 9, "repair_targets": [1, 4], "repair_candidates": [0, 2, 3, 7, 9, 12, 15, 1, 4]}}
{"prediction": {"error_location": 0.7750139832496643, "repair_targets": [0.014759466983377934, 0.9709306955337524], "repair_candidates": [0.0004708226479124278, 0.014759466983377934, 0.00238626217469573, 0.003590294159948826, 0.9709306955337524, 0.007243942469358444, 0.00046234819456003606, 9.46805885178037e-05, 6.150281842565164e-05], "target_probs": 0.985690176486969}}


{"result": {"time": "2021-02-11 11:46:20.339142", "n_pass": [190, 37, 27], "n_token": 15, "loss": [0.3031110465526581, 0.042912907898426056], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "jid", ":", "#INDENT#", "self", ":", "self", "#NEWLINE#", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 9, "repair_targets": [1, 4], "repair_candidates": [0, 2, 3, 7, 9, 11, 14, 1, 4]}}
{"prediction": {"error_location": 0.7385169863700867, "repair_targets": [0.03337254747748375, 0.9246222972869873], "repair_candidates": [0.0007683223229832947, 0.03337254747748375, 0.012940246611833572, 0.016731539741158485, 0.9246222972869873, 0.011370238848030567, 3.9215610740939155e-05, 1.5150229046412278e-05, 0.00014052064216230065], "target_probs": 0.957994818687439}}


{"result": {"time": "2021-02-11 11:46:20.394528", "n_pass": [191, 38, 28], "n_token": 14, "loss": [0.9881038665771484, 0.11551879346370697], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "jid", ":", "#INDENT#", "self", ":", "self", "self", ".", "#UNINDENT#", "self"]}}
{"position": {"error_location": 9, "repair_targets": [1, 4], "repair_candidates": [0, 2, 3, 7, 9, 10, 13, 1, 4]}}
{"prediction": {"error_location": 0.37228187918663025, "repair_targets": [0.12073764204978943, 0.7701662182807922], "repair_candidates": [0.001491023227572441, 0.12073764204978943, 0.04745333269238472, 0.043168529868125916, 0.7701662182807922, 0.015591006726026535, 0.0005803561653010547, 0.0005160273285582662, 0.0002959110715892166], "target_probs": 0.8909038305282593}}


{"result": {"time": "2021-02-11 11:46:20.450216", "n_pass": [193, 39, 29], "n_token": 13, "loss": [0.6898808479309082, 0.0021701741497963667], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "jid", "self", "self", "jid", ":", "#INDENT#", "self", ":", "self", "self", "#UNINDENT#", "self"]}}
{"position": {"error_location": 9, "repair_targets": [1, 4], "repair_candidates": [0, 2, 3, 7, 9, 10, 12, 1, 4]}}
{"prediction": {"error_location": 0.5016357898712158, "repair_targets": [0.03417769446969032, 0.9636544585227966], "repair_candidates": [0.0004913287120871246, 0.03417769446969032, 0.0007267293985933065, 0.0007148360600695014, 0.9636544585227966, 0.0002017966180574149, 1.5294956483558053e-06, 5.570813073063619e-07, 3.097899389103986e-05], "target_probs": 0.997832179069519}}




Minimal simplified tokens:

['self', 'jid', 'self', 'self', 'jid', ':', '#INDENT#', 'self', ':', 'self', 'self', '#UNINDENT#', 'self']
