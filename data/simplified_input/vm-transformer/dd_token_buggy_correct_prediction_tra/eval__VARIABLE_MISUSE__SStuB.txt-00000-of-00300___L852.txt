
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"], "error_location": [36], "repair_targets": [12, 34], "repair_candidates": [12, 34, 2, 22, 36, 8, 32, 4, 30], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "simon-weber/gmusicapi/gmusicapi/clients/mobileclient.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 852, "results": {"model": "transformer", "prob": {"loc": [[1.778528371687571e-06, 5.735164426701189e-11, 2.38845428894921e-13, 5.112624733294435e-13, 1.801990674732412e-11, 2.3639317500018242e-12, 3.4280063596764387e-12, 6.160300676689989e-13, 8.367880173498765e-12, 7.664034337717673e-12, 1.2598219342740968e-11, 7.058604460478957e-13, 5.073628739360458e-10, 1.7020959294788973e-11, 1.9757692010236028e-11, 2.6917868975462333e-12, 3.973554124625522e-12, 5.866264071729965e-12, 1.9508474696783296e-12, 3.873143125665557e-12, 1.2888413209941052e-12, 2.253880675845421e-13, 4.872753676249397e-13, 1.5740695422442053e-12, 8.63353388346616e-13, 3.2358050700703744e-12, 5.566626673503272e-11, 9.246194955514486e-12, 2.7210868107363506e-12, 3.516669594416655e-12, 1.3163759149392718e-07, 2.9902684061527962e-12, 7.493870413100012e-08, 3.9827507611334134e-12, 8.382373961612899e-11, 2.123656805963492e-11, 0.9999979734420776, 4.5756381322759054e-11]], "pointer": [[0.0, 0.0, 3.345651222730339e-08, 0.0, 5.559984401770635e-07, 0.0, 0.0, 0.0, 1.207943478220841e-05, 0.0, 0.0, 0.0, 0.0032959168311208487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.5604721948523377e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.133138524295646e-11, 0.0, 1.449467490477474e-10, 0.0, 0.9966913461685181, 0.0, 2.5772379785848898e-09, 0.0]], "target": [0.9999872446060181]}, "loss": [2.0265558760002023e-06, 1.2755474926962052e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:56:08.547637", "n_pass": [1, 1, 1], "n_token": 38, "loss": [2.0265558760002023e-06, 1.2755474926962052e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 36, "repair_targets": [12, 34], "repair_candidates": [12, 34, 2, 22, 36, 8, 32, 4, 30]}}
{"prediction": {"error_location": 0.9999979734420776, "repair_targets": [0.0032959168311208487, 0.9966913461685181], "repair_candidates": [3.345651222730339e-08, 5.559984401770635e-07, 1.207943478220841e-05, 0.0032959168311208487, 3.5604721948523377e-10, 7.133138524295646e-11, 1.449467490477474e-10, 0.9966913461685181, 2.5772379785848898e-09], "target_probs": 0.9999872446060181}}


{"result": {"time": "2021-02-11 11:56:08.606842", "n_pass": [23, 2, 2], "n_token": 33, "loss": [0.0017328736139461398, 0.0008002740796655416], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 31, "repair_targets": [12, 29], "repair_candidates": [12, 29, 2, 17, 31, 8, 27, 4, 25]}}
{"prediction": {"error_location": 0.9982686042785645, "repair_targets": [0.005699521396309137, 0.9935005307197571], "repair_candidates": [0.00019335679826326668, 0.00014553153596352786, 0.0004539248766377568, 0.005699521396309137, 2.0983515369721317e-08, 3.570689344201128e-08, 2.6990497303813754e-07, 0.9935005307197571, 6.731286703143269e-06], "target_probs": 0.9992000460624695}}


{"result": {"time": "2021-02-11 11:56:08.662242", "n_pass": [25, 3, 3], "n_token": 28, "loss": [0.0036089783534407616, 0.000507543096318841], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 26, "repair_targets": [12, 24], "repair_candidates": [12, 24, 2, 17, 26, 8, 22, 4, 20]}}
{"prediction": {"error_location": 0.9963976740837097, "repair_targets": [0.005818048492074013, 0.9936745166778564], "repair_candidates": [0.00012188844993943349, 1.800138306862209e-05, 0.0003673484898172319, 0.005818048492074013, 2.230821571913566e-08, 2.233750961977421e-08, 3.938657400226475e-08, 0.9936745166778564, 1.509209823780111e-07], "target_probs": 0.9994925856590271}}


{"result": {"time": "2021-02-11 11:56:08.717776", "n_pass": [48, 4, 4], "n_token": 26, "loss": [0.0015666127437725663, 0.001874533831141889], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 24, "repair_targets": [10, 22], "repair_candidates": [10, 22, 0, 15, 24, 6, 20, 2, 18]}}
{"prediction": {"error_location": 0.9984346032142639, "repair_targets": [0.023935843259096146, 0.9741913676261902], "repair_candidates": [0.00027276959735900164, 4.5446337026078254e-05, 0.0015525558264926076, 0.023935843259096146, 1.3249017172256572e-07, 1.9006179741154483e-07, 1.2633629467018181e-06, 0.9741913676261902, 3.8698166804351786e-07], "target_probs": 0.9981272220611572}}


{"result": {"time": "2021-02-11 11:56:08.772893", "n_pass": [50, 5, 5], "n_token": 24, "loss": [0.002211269922554493, 0.009752106852829456], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 22, "repair_targets": [8, 20], "repair_candidates": [8, 20, 0, 13, 22, 4, 18, 2, 16]}}
{"prediction": {"error_location": 0.997791051864624, "repair_targets": [0.016769953072071075, 0.97352534532547], "repair_candidates": [0.0004828990495298058, 0.00016123898967634887, 0.009035778231918812, 0.016769953072071075, 1.0283293704560492e-05, 3.02443197597313e-07, 1.3781081179331522e-05, 0.97352534532547, 4.927932764076104e-07], "target_probs": 0.9902952909469604}}


{"result": {"time": "2021-02-11 11:56:08.828505", "n_pass": [52, 6, 6], "n_token": 22, "loss": [0.021713273599743843, 0.011141384951770306], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 20, "repair_targets": [6, 18], "repair_candidates": [6, 18, 0, 11, 20, 4, 16, 2, 14]}}
{"prediction": {"error_location": 0.9785207509994507, "repair_targets": [0.01944155804812908, 0.9694789052009583], "repair_candidates": [0.0016858652234077454, 0.0005060711991973221, 0.007431419566273689, 0.01944155804812908, 0.0006094425916671753, 8.051772056205664e-06, 0.0007340485462918878, 0.9694789052009583, 0.00010460205521667376], "target_probs": 0.9889204502105713}}


{"result": {"time": "2021-02-11 11:56:08.885709", "n_pass": [54, 7, 7], "n_token": 20, "loss": [0.001481984043493867, 0.005739978048950434], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 18, "repair_targets": [6, 16], "repair_candidates": [6, 16, 0, 9, 18, 4, 14, 2, 12]}}
{"prediction": {"error_location": 0.9985191226005554, "repair_targets": [0.018288256600499153, 0.9759882092475891], "repair_candidates": [0.00013673170178662986, 0.00044970226008445024, 0.004602090455591679, 0.018288256600499153, 7.63857169658877e-05, 0.00016933520964812487, 0.00028832757379859686, 0.9759882092475891, 8.802772981653106e-07], "target_probs": 0.9942764639854431}}


{"result": {"time": "2021-02-11 11:56:08.941017", "n_pass": [79, 8, 8], "n_token": 19, "loss": [0.007853464223444462, 0.0076337214559316635], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 17, "repair_targets": [6, 15], "repair_candidates": [6, 15, 0, 8, 17, 4, 13, 2, 11]}}
{"prediction": {"error_location": 0.9921773076057434, "repair_targets": [0.04034852609038353, 0.952046811580658], "repair_candidates": [0.00014096111408434808, 0.001736485748551786, 0.0033589729573577642, 0.04034852609038353, 0.0004174536734353751, 0.0018532965332269669, 9.626446262700483e-05, 0.952046811580658, 1.2392812323014368e-06], "target_probs": 0.9923953413963318}}


{"result": {"time": "2021-02-11 11:56:08.996002", "n_pass": [81, 9, 9], "n_token": 18, "loss": [0.0017014563782140613, 0.047231949865818024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "self", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 16, "repair_targets": [6, 14], "repair_candidates": [6, 14, 0, 8, 16, 4, 12, 2, 10]}}
{"prediction": {"error_location": 0.9983000159263611, "repair_targets": [0.0035289626102894545, 0.9503371715545654], "repair_candidates": [0.0001752982207108289, 0.01060964073985815, 0.018289616331458092, 0.0035289626102894545, 0.00012766089639626443, 0.008220074698328972, 0.00870912242680788, 0.9503371715545654, 2.5142824142676545e-06], "target_probs": 0.9538661241531372}}


{"result": {"time": "2021-02-11 11:56:09.050489", "n_pass": [82, 10, 10], "n_token": 17, "loss": [0.00026043839170597494, 0.1447630524635315], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "self", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 15, "repair_targets": [6, 13], "repair_candidates": [6, 13, 0, 8, 15, 4, 11, 2, 9]}}
{"prediction": {"error_location": 0.9997397065162659, "repair_targets": [0.00610886886715889, 0.8591184020042419], "repair_candidates": [0.00011123003787361085, 0.029403503984212875, 0.08048376441001892, 0.00610886886715889, 4.1148592572426423e-05, 0.0026266989298164845, 0.022105669602751732, 0.8591184020042419, 6.890836630191188e-07], "target_probs": 0.8652272820472717}}


{"result": {"time": "2021-02-11 11:56:09.105788", "n_pass": [88, 11, 11], "n_token": 16, "loss": [2.5033637939486653e-05, 0.5262235403060913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "self", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 14, "repair_targets": [5, 12], "repair_candidates": [5, 12, 0, 7, 14, 3, 10, 1, 8]}}
{"prediction": {"error_location": 0.9999749660491943, "repair_targets": [0.0028044823557138443, 0.5880275368690491], "repair_candidates": [3.640717841335572e-05, 0.0005258003366179764, 0.39593300223350525, 0.0028044823557138443, 8.43961606733501e-06, 0.001871543936431408, 0.01079268753528595, 0.5880275368690491, 7.67373791177306e-08], "target_probs": 0.590831995010376}}


{"result": {"time": "2021-02-11 11:56:09.160448", "n_pass": [90, 12, 12], "n_token": 15, "loss": [1.3232143828645349e-05, 0.07634410262107849], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "=", "updated_after", "#INDENT#", "self", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 13, "repair_targets": [4, 11], "repair_candidates": [4, 11, 0, 6, 13, 2, 9, 1, 7]}}
{"prediction": {"error_location": 0.9999867677688599, "repair_targets": [0.001535763032734394, 0.9249615669250488], "repair_candidates": [9.966512152459472e-05, 0.0010624703718349338, 0.049937207251787186, 0.001535763032734394, 3.6078849916520994e-06, 0.001746254856698215, 0.02065340429544449, 0.9249615669250488, 1.6035363259447877e-08], "target_probs": 0.9264973402023315}}


{"result": {"time": "2021-02-11 11:56:09.327044", "n_pass": [111, 15, 13], "n_token": 14, "loss": [0.000277123210253194, 0.5597156882286072], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "=", "updated_after", "#INDENT#", "self", "incremental", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 12, "repair_targets": [4, 10], "repair_candidates": [4, 10, 0, 6, 12, 2, 8, 1, 7]}}
{"prediction": {"error_location": 0.9997228980064392, "repair_targets": [0.0394161157310009, 0.531955361366272], "repair_candidates": [0.00487947603687644, 0.007968329824507236, 0.2928655445575714, 0.0394161157310009, 0.00042442145058885217, 0.024598659947514534, 0.0978916734457016, 0.531955361366272, 4.793438392880489e-07], "target_probs": 0.5713714957237244}}


{"result": {"time": "2021-02-11 11:56:09.381440", "n_pass": [113, 16, 14], "n_token": 13, "loss": [0.0009234455064870417, 0.5046623945236206], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "=", "updated_after", "#INDENT#", "self", "incremental", "include_deleted", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 11, "repair_targets": [4, 9], "repair_candidates": [4, 9, 0, 6, 11, 2, 8, 1, 7]}}
{"prediction": {"error_location": 0.9990768432617188, "repair_targets": [0.35078561305999756, 0.25292372703552246], "repair_candidates": [0.014643733389675617, 0.014391668140888214, 0.07508344203233719, 0.35078561305999756, 0.0007859528996050358, 0.04249514266848564, 0.24888820946216583, 0.25292372703552246, 2.5004030703712488e-06], "target_probs": 0.60370934009552}}


{"result": {"time": "2021-02-11 11:56:09.544799", "n_pass": [121, 19, 15], "n_token": 12, "loss": [0.6916135549545288, 0.6271986365318298], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#INDENT#", "self", "incremental", "include_deleted", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3, 8], "repair_candidates": [3, 8, 0, 5, 10, 2, 7, 1, 6]}}
{"prediction": {"error_location": 0.5007674098014832, "repair_targets": [0.10047358274459839, 0.43361228704452515], "repair_candidates": [0.0005155122489668429, 0.005759330466389656, 0.32297465205192566, 0.10047358274459839, 0.0004832058912143111, 0.06427031755447388, 0.07190007716417313, 0.43361228704452515, 1.107631396735087e-05], "target_probs": 0.5340858697891235}}




Minimal simplified tokens:

['self', 'incremental', 'include_deleted', 'updated_after', '#INDENT#', 'self', 'incremental', 'include_deleted', 'updated_after', '=', 'self', ')']
