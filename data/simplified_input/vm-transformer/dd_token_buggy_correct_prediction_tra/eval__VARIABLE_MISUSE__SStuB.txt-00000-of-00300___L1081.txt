
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "#INDENT#", "'user'", ":", "current_user", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "check", "(", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"], "error_location": [31], "repair_targets": [2], "repair_candidates": [6, 31, 53, 71, 61, 4, 67, 29, 41, 2, 15, 37, 47, 57, 75], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "mikeboers/Flask-ACL/flask_acl/extension.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1081, "results": {"model": "transformer", "prob": {"loc": [[0.03523151949048042, 3.8659408119201544e-07, 4.110340341867413e-06, 1.4206432474850317e-08, 1.988570232924758e-07, 1.695600992945856e-08, 1.1916564091052351e-07, 1.1847842706913525e-08, 6.207106935107731e-07, 5.977889294683791e-09, 1.3215055716386814e-08, 2.2866037951985163e-08, 1.596912646562032e-08, 3.580937146807628e-08, 1.8607266838444048e-08, 2.472008304721385e-07, 8.594855493981868e-09, 3.6577876016963273e-07, 5.115727930160574e-08, 3.435526352291163e-08, 1.8075143159990148e-08, 2.5546935233933254e-08, 0.002727372571825981, 2.8596970125249754e-08, 4.234419392901145e-08, 2.452105896111334e-08, 2.764664763788005e-08, 3.810208326626707e-08, 4.235323913803768e-08, 4.3111074887747236e-07, 6.1556018060571205e-09, 0.9409889578819275, 1.1777247976851868e-07, 7.809631163979702e-09, 6.266331098458977e-08, 3.823567595873101e-08, 2.6283833776119536e-08, 1.2740832389113166e-08, 1.9419260866015975e-08, 2.429229040146197e-09, 2.3068421839411712e-08, 4.92998424306279e-07, 3.4953141039295588e-06, 6.116389954513579e-07, 1.627721957220274e-07, 2.9543721780100896e-07, 8.907526449775105e-08, 2.8254319772713643e-08, 2.0612755946558536e-08, 2.761806783269094e-09, 1.2612804134448652e-08, 4.646432216759422e-08, 1.1367947649887356e-07, 0.004024246707558632, 3.705364974848635e-07, 2.0132047495735605e-07, 1.9744973656088405e-07, 2.189032954902359e-08, 3.8339738495096753e-08, 1.289750306554538e-09, 3.482992028125409e-08, 0.004684820771217346, 1.624078151962749e-07, 2.0279846069115592e-07, 3.4214913124941404e-09, 5.227390964535061e-09, 2.918241470695193e-08, 0.0020521602127701044, 3.162601913686558e-08, 2.1915855796805772e-08, 4.510973283800013e-08, 0.010269053280353546, 3.892486333256784e-08, 6.869641566709106e-08, 6.32803036637597e-08, 7.5598563853418455e-06, 6.487047699010873e-08]], "pointer": [[0.0, 0.0, 0.9718133211135864, 0.0, 0.006971727591007948, 0.0, 0.00461277412250638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008163018501363695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000954957737121731, 0.0, 2.8758675398421474e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011845873668789864, 0.0, 0.0, 0.0, 3.6309782444732264e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015113840345293283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015619279583916068, 0.0, 0.0, 0.0, 0.0005133018712513149, 0.0, 0.0, 0.0, 0.008679339662194252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00028439314337447286, 0.0, 0.0, 0.0, 0.0009966392535716295, 0.0, 0.0, 0.0, 3.4232023608637974e-05, 0.0]], "target": [0.9718133211135864]}, "loss": [0.060823749750852585, 0.028591549023985863], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:16:14.757929", "n_pass": [1, 1, 1], "n_token": 77, "loss": [0.060823749750852585, 0.028591549023985863], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "#INDENT#", "'user'", ":", "current_user", ",", "#NEWLINE#", "#UNINDENT#", "}", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "check", "(", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 31, "repair_targets": [2], "repair_candidates": [6, 31, 53, 71, 61, 4, 67, 29, 41, 2, 15, 37, 47, 57, 75]}}
{"prediction": {"error_location": 0.9409889578819275, "repair_targets": [0.9718133211135864], "repair_candidates": [0.9718133211135864, 0.006971727591007948, 0.00461277412250638, 0.0008163018501363695, 0.000954957737121731, 2.8758675398421474e-05, 0.0011845873668789864, 3.6309782444732264e-05, 0.0015113840345293283, 0.0015619279583916068, 0.0005133018712513149, 0.008679339662194252, 0.00028439314337447286, 0.0009966392535716295, 3.4232023608637974e-05], "target_probs": 0.9718133211135864}}


{"result": {"time": "2021-02-11 11:16:14.815380", "n_pass": [22, 2, 2], "n_token": 68, "loss": [0.07056562602519989, 0.025380630046129227], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "check", "(", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [6, 22, 44, 62, 52, 4, 58, 20, 32, 2, 15, 28, 38, 48, 66]}}
{"prediction": {"error_location": 0.931866466999054, "repair_targets": [0.9749387502670288], "repair_candidates": [0.9749387502670288, 0.012080433778464794, 0.003886342514306307, 0.0007628215826116502, 0.0012206216342747211, 7.020143675617874e-05, 0.0010515443282201886, 0.0001238931145053357, 0.0014530845219269395, 0.0008466924773529172, 8.394667383981869e-05, 0.002859329106286168, 0.00024256955657619983, 0.00037084639188833535, 8.777082257438451e-06], "target_probs": 0.9749387502670288}}


{"result": {"time": "2021-02-11 11:16:14.928057", "n_pass": [47, 4, 3], "n_token": 63, "loss": [0.05411795154213905, 0.025622699409723282], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "check", "(", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [6, 22, 39, 57, 47, 4, 53, 20, 32, 2, 15, 28, 33, 43, 61]}}
{"prediction": {"error_location": 0.9473203420639038, "repair_targets": [0.974702775478363], "repair_candidates": [0.974702775478363, 0.008481497876346111, 0.003503664629533887, 0.00047951118904165924, 0.00570415984839201, 2.9411487048491836e-05, 0.0017877211794257164, 0.0019119747448712587, 0.00017452912288717926, 0.0009118604357354343, 8.703065395820886e-05, 0.0018649990670382977, 0.00017331914568785578, 0.0001820735924411565, 5.38150243301061e-06], "target_probs": 0.974702775478363}}


{"result": {"time": "2021-02-11 11:16:14.984128", "n_pass": [51, 5, 4], "n_token": 58, "loss": [0.04435068741440773, 0.019705964252352715], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [6, 22, 39, 52, 47, 4, 48, 20, 32, 2, 15, 28, 33, 43, 56]}}
{"prediction": {"error_location": 0.9566183090209961, "repair_targets": [0.9804869294166565], "repair_candidates": [0.9804869294166565, 0.004811082500964403, 0.0017278189770877361, 0.000298776023555547, 0.0064072562381625175, 1.338360016234219e-05, 0.0011187418131157756, 0.0023345863446593285, 0.0001346980716334656, 0.0007650008774362504, 8.884130693331826e-06, 0.0013386420905590057, 0.0002678862656466663, 0.000276917009614408, 9.369455256091896e-06], "target_probs": 0.9804869294166565}}


{"result": {"time": "2021-02-11 11:16:15.042729", "n_pass": [56, 6, 5], "n_token": 53, "loss": [0.03142791613936424, 0.006113762501627207], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "\"Check if we can do something with an object.\\n\\n        :param permission: The permission to look for.\\n        :param obj: The object to check the ACL of.\\n        :param **kwargs: The context to pass to predicates.\\n\\n        >>> auth.can('read', some_object)\\n        >>> auth.can('write', another_object, group=some_group)\\n\\n        \"", "#NEWLINE#", "context", "=", "{", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [6, 17, 34, 47, 42, 4, 43, 15, 27, 2, 10, 23, 28, 38, 51]}}
{"prediction": {"error_location": 0.9690607786178589, "repair_targets": [0.9939048886299133], "repair_candidates": [0.9939048886299133, 0.0025260525289922953, 0.00040246121352538466, 0.00016570111620239913, 0.0013593886978924274, 6.420678801077884e-06, 0.0001969741570064798, 0.0005736477905884385, 4.781024836120196e-05, 0.00014567382459063083, 2.6331217668484896e-06, 0.0005159170250408351, 4.9610498535912484e-05, 9.764951391844079e-05, 5.278011485643219e-06], "target_probs": 0.9939048886299133}}


{"result": {"time": "2021-02-11 11:16:15.154615", "n_pass": [90, 8, 6], "n_token": 51, "loss": [0.03359989449381828, 0.00725300470367074], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "{", "#NEWLINE#", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [6, 15, 32, 45, 40, 4, 41, 13, 25, 2, 8, 21, 26, 36, 49]}}
{"prediction": {"error_location": 0.966958224773407, "repair_targets": [0.9927732348442078], "repair_candidates": [0.9927732348442078, 0.0035950220189988613, 0.0006154443835839629, 8.069802424870431e-05, 0.0014464916894212365, 8.504608558723703e-06, 6.104800559114665e-05, 0.0005668204394169152, 2.552922160248272e-05, 0.00012218796473462135, 2.716513108680374e-06, 0.0005525706801563501, 6.946090434212238e-05, 7.275700045283884e-05, 7.583592832816066e-06], "target_probs": 0.9927732348442078}}


{"result": {"time": "2021-02-11 11:16:15.210343", "n_pass": [92, 9, 7], "n_token": 49, "loss": [0.010946226306259632, 0.0020332131534814835], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", ":", "#NEWLINE#", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 30, 43, 38, 4, 39, 11, 23, 2, 8, 19, 24, 34, 47]}}
{"prediction": {"error_location": 0.989113450050354, "repair_targets": [0.997968852519989], "repair_candidates": [0.997968852519989, 0.0011723372153937817, 0.00015429581981152296, 3.175246820319444e-05, 0.00020897177455481142, 9.396718496645917e-07, 1.3075952665531076e-05, 0.00011086231097579002, 2.7845742806675844e-05, 4.113784234505147e-05, 1.202327553073701e-06, 0.00021419257973320782, 2.2453472411143593e-05, 2.3026223061606288e-05, 8.998350494948681e-06], "target_probs": 0.997968852519989}}


{"result": {"time": "2021-02-11 11:16:15.323680", "n_pass": [96, 11, 8], "n_token": 47, "loss": [0.012683086097240448, 0.002068511676043272], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", "#INDENT#", "context", ".", "update", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 28, 41, 36, 4, 37, 11, 21, 2, 8, 17, 22, 32, 45]}}
{"prediction": {"error_location": 0.9873970150947571, "repair_targets": [0.9979336261749268], "repair_candidates": [0.9979336261749268, 0.0011840914376080036, 0.00014862813986837864, 3.381757778697647e-05, 0.00017996873066294938, 1.009004677143821e-06, 1.8674520106287673e-05, 7.758435822324827e-05, 3.0578565201722085e-05, 3.9478800317738205e-05, 1.1948370683967369e-06, 0.00028526136884465814, 2.480385774106253e-05, 2.7383328415453434e-05, 1.3990264051244594e-05], "target_probs": 0.9979336261749268}}


{"result": {"time": "2021-02-11 11:16:15.554843", "n_pass": [98, 12, 9], "n_token": 45, "loss": [0.018483072519302368, 0.0022665895521640778], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", "#INDENT#", "context", "(", "func", "context", ".", "update", "(", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 26, 39, 34, 4, 35, 11, 19, 2, 8, 17, 20, 30, 43]}}
{"prediction": {"error_location": 0.9816863536834717, "repair_targets": [0.9977359771728516], "repair_candidates": [0.9977359771728516, 0.0010019504697993398, 0.000166877027368173, 7.613798516103998e-05, 0.0002451581822242588, 1.620388843548426e-06, 7.474677840946242e-05, 0.00012018177949357778, 6.760424730600789e-05, 5.4893240303499624e-05, 8.147612788889091e-06, 0.0003243243263568729, 3.513455521897413e-05, 6.56204647384584e-05, 2.1614581783069298e-05], "target_probs": 0.9977359771728516}}


{"result": {"time": "2021-02-11 11:16:15.611581", "n_pass": [100, 13, 10], "n_token": 42, "loss": [0.016404636204242706, 0.0037756224628537893], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", "#INDENT#", "context", "(", "func", "context", "get_object_context", "(", "obj", ")", ")", "#NEWLINE#", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 23, 36, 31, 4, 32, 11, 19, 2, 8, 17, 20, 27, 40]}}
{"prediction": {"error_location": 0.9837291836738586, "repair_targets": [0.9962314963340759], "repair_candidates": [0.9962314963340759, 0.0008925383444875479, 9.920266893459484e-05, 5.945723387412727e-05, 9.833955846261233e-05, 2.6148411507165292e-06, 4.8022629925981164e-05, 4.138161330047296e-06, 4.176818947598804e-06, 7.419470784952864e-05, 4.296581209928263e-06, 0.0024150717072188854, 2.0905057681375183e-05, 3.917751382687129e-05, 6.283556558628334e-06], "target_probs": 0.9962314963340759}}


{"result": {"time": "2021-02-11 11:16:15.667431", "n_pass": [102, 14, 11], "n_token": 39, "loss": [0.01550641655921936, 0.001058124820701778], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", "#INDENT#", "context", "(", "func", "context", "get_object_context", "(", "obj", "context", ".", "update", "(", "kwargs", "permission", ",", "iter_object_acl", "(", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 23, 33, 28, 4, 29, 11, 19, 2, 8, 17, 20, 24, 37]}}
{"prediction": {"error_location": 0.984613299369812, "repair_targets": [0.9989424347877502], "repair_candidates": [0.9989424347877502, 0.0003277001960668713, 7.023177749942988e-05, 0.00010947790724458173, 9.579332981957123e-05, 2.940086460512248e-06, 7.601951074320823e-05, 2.4239168396889e-06, 2.744804078247398e-06, 6.086774192226585e-06, 0.00022794448886997998, 8.965928282123059e-05, 1.5061764315760229e-05, 2.008740193559788e-05, 1.1498013009259012e-05], "target_probs": 0.9989424347877502}}


{"result": {"time": "2021-02-11 11:16:15.723263", "n_pass": [105, 15, 12], "n_token": 36, "loss": [0.008142136037349701, 0.002551410347223282], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", ".", "_context_processors", "#INDENT#", "context", "(", "func", "context", "get_object_context", "(", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 23, 30, 28, 4, 29, 11, 19, 2, 8, 17, 20, 24, 34]}}
{"prediction": {"error_location": 0.9918911457061768, "repair_targets": [0.9974518418312073], "repair_candidates": [0.9974518418312073, 0.0013220232212916017, 6.322799163172022e-05, 7.896393799455836e-05, 0.0002352487063035369, 9.037801191880135e-07, 4.324878682382405e-05, 2.9175910185585963e-06, 2.74156559498806e-06, 5.799910923087737e-06, 0.0002609974762890488, 0.00032068754080682993, 0.0001875104644568637, 1.4324829862744082e-05, 9.485278496867977e-06], "target_probs": 0.9974518418312073}}


{"result": {"time": "2021-02-11 11:16:15.837156", "n_pass": [115, 17, 13], "n_token": 34, "loss": [0.6913461685180664, 0.45598679780960083], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "(", "func", "context", "get_object_context", "(", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 21, 28, 26, 4, 27, 11, 17, 2, 8, 15, 18, 22, 32]}}
{"prediction": {"error_location": 0.5009013414382935, "repair_targets": [0.6338222026824951], "repair_candidates": [0.6338222026824951, 0.1892087161540985, 0.005848478991538286, 0.0159235130995512, 0.057150304317474365, 6.158706673886627e-05, 0.006282438058406115, 0.00022951193386688828, 0.00025424070190638304, 0.0006282686372287571, 0.05298347771167755, 0.0247128214687109, 0.010508183389902115, 0.0019449718529358506, 0.00044120391248725355], "target_probs": 0.6338222026824951}}


{"result": {"time": "2021-02-11 11:16:16.004613", "n_pass": [160, 20, 14], "n_token": 33, "loss": [0.9434425830841064, 0.35035738348960876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "get_object_context", "(", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 20, 27, 25, 4, 26, 11, 16, 2, 8, 15, 17, 21, 31]}}
{"prediction": {"error_location": 0.3892854154109955, "repair_targets": [0.7044363021850586], "repair_candidates": [0.7044363021850586, 0.10842780023813248, 0.0062878807075321674, 0.023960096761584282, 0.0844268947839737, 8.086836896836758e-05, 0.04768839478492737, 0.000521896465215832, 0.0008774470770731568, 0.0013654243666678667, 0.004337036516517401, 0.01035867165774107, 0.005108662415295839, 0.0019055481534451246, 0.00021697294141631573], "target_probs": 0.7044363021850586}}


{"result": {"time": "2021-02-11 11:16:16.060742", "n_pass": [163, 21, 15], "n_token": 32, "loss": [0.6533980965614319, 0.24050503969192505], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "(", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 19, 26, 24, 4, 25, 11, 16, 2, 8, 15, 17, 20, 30]}}
{"prediction": {"error_location": 0.5202748775482178, "repair_targets": [0.7862306833267212], "repair_candidates": [0.7862306833267212, 0.06909576803445816, 0.0034574391320347786, 0.014879388734698296, 0.07897478342056274, 5.062034688307904e-05, 0.004262874368578196, 0.00038115374627523124, 0.00017274018318857998, 0.0011135116219520569, 0.0033109800424426794, 0.03418203443288803, 0.0028961291536688805, 0.0009124419302679598, 7.943301898194477e-05], "target_probs": 0.7862306833267212}}


{"result": {"time": "2021-02-11 11:16:16.116318", "n_pass": [164, 22, 16], "n_token": 31, "loss": [0.6436709761619568, 0.17680369317531586], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", ",", "**", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 18, 25, 23, 4, 24, 11, 16, 2, 8, 15, 17, 19, 29]}}
{"prediction": {"error_location": 0.5253601670265198, "repair_targets": [0.8379442691802979], "repair_candidates": [0.8379442691802979, 0.08134057372808456, 0.004192287102341652, 0.008597544394433498, 0.020496347919106483, 2.7826412406284362e-05, 0.0038366643711924553, 0.003250140929594636, 6.102519546402618e-05, 0.000821068708319217, 0.005571933463215828, 0.03211301937699318, 0.0011361336801201105, 0.00037988429539836943, 0.00023137129028327763], "target_probs": 0.8379442691802979}}


{"result": {"time": "2021-02-11 11:16:16.230723", "n_pass": [170, 24, 17], "n_token": 29, "loss": [0.6224885582923889, 0.11815974861383438], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", ",", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", "context", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [6, 13, 18, 25, 23, 4, 24, 11, 16, 2, 8, 15, 17, 19, 27]}}
{"prediction": {"error_location": 0.5366073846817017, "repair_targets": [0.8885540962219238], "repair_candidates": [0.8885540962219238, 0.07415445894002914, 0.0013041985221207142, 0.002623501233756542, 0.01460352260619402, 1.3580412996816449e-05, 0.003864787518978119, 0.0020892492029815912, 0.00018143154738936573, 0.0003594387089833617, 0.002154204761609435, 0.009577621705830097, 0.00038937118370085955, 0.00010245712473988533, 2.7954285542364232e-05], "target_probs": 0.8885540962219238}}


{"result": {"time": "2021-02-11 11:16:16.450223", "n_pass": [177, 28, 18], "n_token": 28, "loss": [1.0264880657196045, 0.059340160340070724], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", "obj", ",", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", "context", ")"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [5, 12, 17, 24, 22, 4, 23, 10, 15, 2, 7, 14, 16, 18, 26]}}
{"prediction": {"error_location": 0.35826295614242554, "repair_targets": [0.9423861503601074], "repair_candidates": [0.9423861503601074, 0.018180860206484795, 0.0007562268292531371, 0.003783401334658265, 0.015809746459126472, 3.062346513615921e-05, 0.002766493707895279, 0.0017729612300172448, 0.00013589007721748203, 0.0002548728953115642, 0.0012418386759236455, 0.012277107685804367, 0.0004690546775236726, 0.00011111139610875398, 2.366875924053602e-05], "target_probs": 0.9423861503601074}}


{"result": {"time": "2021-02-11 11:16:16.508563", "n_pass": [179, 29, 19], "n_token": 27, "loss": [0.27142006158828735, 0.027797657996416092], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", "obj", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", ".", "update", "(", "kwargs", "permission", "obj", ")", "context", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [5, 11, 16, 23, 21, 4, 22, 9, 14, 2, 6, 13, 15, 17, 25]}}
{"prediction": {"error_location": 0.7622961401939392, "repair_targets": [0.972585141658783], "repair_candidates": [0.972585141658783, 0.00831723865121603, 0.0002392154128756374, 0.0012209964916110039, 0.010526085272431374, 5.935420631431043e-06, 0.0010457031894475222, 0.0005075411754660308, 2.205343662353698e-05, 0.00011363841622369364, 0.00031415733974426985, 0.005028013605624437, 5.552975198952481e-05, 1.6156951460288838e-05, 2.6123163934244076e-06], "target_probs": 0.972585141658783}}


{"result": {"time": "2021-02-11 11:16:17.008038", "n_pass": [213, 38, 20], "n_token": 26, "loss": [0.22135065495967865, 0.09153881669044495], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", "obj", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", "update", "(", "kwargs", "permission", "obj", ")", "context", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [5, 11, 16, 22, 20, 4, 21, 9, 14, 2, 6, 13, 15, 17, 24]}}
{"prediction": {"error_location": 0.8014355301856995, "repair_targets": [0.9125258922576904], "repair_candidates": [0.9125258922576904, 0.005966095719486475, 0.00022381705639418215, 0.002048691501840949, 0.060502056032419205, 2.0583638615789823e-05, 0.009984881617128849, 0.0003064630145672709, 1.2539238696263055e-06, 2.6369802981207613e-06, 0.0001425825757905841, 0.008205464109778404, 4.611336044035852e-05, 1.7564509107614867e-05, 5.9285621318849735e-06], "target_probs": 0.9125258922576904}}


{"result": {"time": "2021-02-11 11:16:17.063311", "n_pass": [214, 39, 21], "n_token": 25, "loss": [0.3044298589229584, 0.019756542518734932], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", "obj", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", "(", "kwargs", "permission", "obj", ")", "context", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [5, 11, 16, 21, 19, 4, 20, 9, 14, 2, 6, 13, 15, 17, 23]}}
{"prediction": {"error_location": 0.7375437617301941, "repair_targets": [0.9804373383522034], "repair_candidates": [0.9804373383522034, 0.002690762048587203, 0.00027528530335985124, 0.0016115076141431928, 0.006564164999872446, 9.069779480341822e-06, 0.00398552929982543, 2.49939566856483e-05, 8.937054190027993e-06, 1.5001746760390233e-05, 1.2909640645375475e-05, 0.004348104353994131, 8.740966222831048e-06, 6.939109425729839e-06, 8.369265174223983e-07], "target_probs": 0.9804373383522034}}


{"result": {"time": "2021-02-11 11:16:17.176074", "n_pass": [219, 41, 22], "n_token": 24, "loss": [0.812942385673523, 0.011700688861310482], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def can(", "self", ",", "permission", "obj", "context", "=", "for", "func", "in", "obj", "#INDENT#", "context", "func", "context", "obj", "context", "(", "kwargs", "permission", "obj", "context", ")"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [5, 11, 16, 21, 19, 4, 20, 9, 14, 2, 6, 13, 15, 17, 22]}}
{"prediction": {"error_location": 0.44355106353759766, "repair_targets": [0.98836749792099], "repair_candidates": [0.98836749792099, 0.001965735573321581, 0.00019148073624819517, 0.0008014946943148971, 0.0036669266410171986, 7.574083610961679e-06, 0.0013941755751147866, 1.9870773030561395e-05, 5.332215550879482e-06, 1.3749677236774005e-05, 9.44777002587216e-06, 0.0034755247179418802, 7.385704520856962e-05, 6.79133290759637e-06, 5.280604682411649e-07], "target_probs": 0.98836749792099}}




Minimal simplified tokens:

['#NEWLINE#', 'def can(', 'self', ',', 'permission', 'obj', 'context', '=', 'for', 'func', 'in', 'obj', '#INDENT#', 'context', 'func', 'context', 'obj', 'context', '(', 'kwargs', 'permission', 'obj', 'context', ')']
