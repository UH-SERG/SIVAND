
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "query_params", "(", "'field_data'", ",", "'fielddata'", ",", "'fields'", ",", "'filter'", ",", "'filter_cache'", ",", "'filter_keys'", ",", "'id'", ",", "'id_cache'", ",", "'allow_no_indices'", ",", "'expand_wildcards'", ",", "'ignore_indices'", ",", "'ignore_unavailable'", ",", "'query_cache'", ",", "'recycler'", ")", "#NEWLINE#", "def clear_cache(", "self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"], "error_location": [78], "repair_targets": [52], "repair_candidates": [34, 55, 78, 52, 36, 65, 50, 40, 72, 74], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "KunihikoKido/sublime-elasticsearch-client/lib/elasticsearch/client/indices.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3053, "results": {"model": "transformer", "prob": {"loc": [[0.0003088788071181625, 1.0248509596522126e-08, 1.245930962567865e-11, 1.817663658476576e-10, 2.0407754652840282e-10, 4.2530635263604566e-11, 3.296023176613261e-11, 3.4660094239136185e-11, 3.4244142244066467e-11, 2.536444665413029e-11, 5.624837401407845e-11, 1.5747070314375833e-11, 4.7431690519683656e-11, 1.0906323587300815e-11, 7.259239737100742e-11, 1.1716388276239442e-11, 2.4680139876220863e-11, 1.3394476500172559e-11, 1.464369181469749e-10, 1.8520849784375848e-11, 1.1712260328256008e-10, 1.7714735928153758e-11, 1.131859016234582e-11, 1.60807929472373e-11, 1.7742235458584332e-10, 2.208346353005375e-11, 1.670032029332802e-10, 2.2597458626538725e-11, 4.935750697043773e-10, 1.4964867886546607e-11, 2.6634516814283415e-09, 1.493313112055361e-11, 3.6241114276247544e-11, 6.89524770614014e-10, 1.7520799255876796e-09, 8.824384278849351e-11, 6.416029929567912e-10, 1.900675172805677e-09, 2.4295251921380157e-10, 4.2193460531025906e-11, 1.7208012792480076e-10, 2.7594275753273223e-09, 4.792990448976298e-10, 2.25368109590951e-11, 3.837944406726024e-10, 2.6501537075951376e-10, 2.1814082484805652e-10, 1.379079073160483e-09, 3.439924178838538e-10, 5.3042206044073836e-11, 1.6121848744887757e-08, 5.815957160315577e-10, 6.424485832212667e-08, 3.5543876869548185e-11, 1.2630781143219139e-10, 1.4616973409431466e-08, 2.2791087073148475e-10, 8.339709998972378e-12, 2.3231604140416806e-10, 5.1924861979579795e-12, 5.677938119674764e-10, 4.3942911531758e-08, 1.571967972457955e-10, 4.8153616510893116e-12, 4.731560698800763e-10, 8.87743317434797e-06, 2.6802374208934054e-10, 1.2804957982837095e-08, 5.0420351227487e-10, 1.368463387052543e-07, 2.803554610686376e-10, 2.0386202448374746e-10, 2.739237447979548e-10, 3.436939899348346e-10, 1.5754087144159712e-05, 1.3916256591528509e-08, 7.900440301966682e-09, 1.727366694126431e-08, 0.9996662139892578]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.08757829922979e-07, 0.0, 0.00027449612389318645, 0.0, 0.0, 0.0, 1.628506106499117e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001939599751494825, 0.0, 0.9993407130241394, 0.0, 0.0, 4.191776525885871e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016424915520474315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4983982055127854e-07, 0.0, 9.370310181111563e-06, 0.0, 0.0, 0.0, 1.1680292999471931e-07]], "target": [0.9993407130241394]}, "loss": [0.00033384948619641364, 0.0006595043814741075], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:46:38.310333", "n_pass": [1, 1, 1], "n_token": 79, "loss": [0.00033384948619641364, 0.0006595043814741075], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "query_params", "(", "'field_data'", ",", "'fielddata'", ",", "'fields'", ",", "'filter'", ",", "'filter_cache'", ",", "'filter_keys'", ",", "'id'", ",", "'id_cache'", ",", "'allow_no_indices'", ",", "'expand_wildcards'", ",", "'ignore_indices'", ",", "'ignore_unavailable'", ",", "'query_cache'", ",", "'recycler'", ")", "#NEWLINE#", "def clear_cache(", "self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 78, "repair_targets": [52], "repair_candidates": [34, 55, 78, 52, 36, 65, 50, 40, 72, 74]}}
{"prediction": {"error_location": 0.9996662139892578, "repair_targets": [0.9993407130241394], "repair_candidates": [6.08757829922979e-07, 0.00027449612389318645, 1.628506106499117e-05, 0.0001939599751494825, 0.9993407130241394, 4.191776525885871e-08, 0.00016424915520474315, 1.4983982055127854e-07, 9.370310181111563e-06, 1.1680292999471931e-07], "target_probs": 0.9993407130241394}}


{"result": {"time": "2021-02-11 11:46:38.367246", "n_pass": [8, 2, 2], "n_token": 60, "loss": [0.0051465886645019054, 0.0004448091785889119], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'allow_no_indices'", ",", "'expand_wildcards'", ",", "'ignore_indices'", ",", "'ignore_unavailable'", ",", "'query_cache'", ",", "'recycler'", ")", "#NEWLINE#", "def clear_cache(", "self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 59, "repair_targets": [33], "repair_candidates": [15, 36, 59, 33, 17, 46, 31, 21, 53, 55]}}
{"prediction": {"error_location": 0.9948666095733643, "repair_targets": [0.9995552897453308], "repair_candidates": [2.4140748791978694e-05, 0.00011255140270804986, 2.9803463803546038e-06, 0.0002532660437282175, 0.9995552897453308, 4.783515805684146e-07, 4.7586094297003e-05, 7.90279671036842e-07, 2.223511728516314e-06, 6.149283535705763e-07], "target_probs": 0.9995552897453308}}


{"result": {"time": "2021-02-11 11:46:38.424005", "n_pass": [17, 3, 3], "n_token": 50, "loss": [0.00320825376547873, 0.00047587748849764466], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'recycler'", ")", "#NEWLINE#", "def clear_cache(", "self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 49, "repair_targets": [23], "repair_candidates": [5, 26, 49, 23, 7, 36, 21, 11, 43, 45]}}
{"prediction": {"error_location": 0.9967970252037048, "repair_targets": [0.9995242357254028], "repair_candidates": [8.24105791252805e-06, 8.645202615298331e-05, 0.0001393056008964777, 0.0002136602852260694, 0.9995242357254028, 1.6225964145633043e-06, 2.2305779566522688e-05, 6.296786523307674e-07, 2.120632416335866e-06, 1.4739050584466895e-06], "target_probs": 0.9995242357254028}}


{"result": {"time": "2021-02-11 11:46:38.481478", "n_pass": [32, 4, 4], "n_token": 45, "loss": [0.012570199556648731, 0.001997019862756133], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clear either all caches or specific cached associated with one ore more indices.\\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html>`_\\n\\n        :arg index: A comma-separated list of index name to limit the operation\\n        :arg field_data: Clear field data\\n        :arg fielddata: Clear field data\\n        :arg fields: A comma-separated list of fields to clear when using the\\n            `field_data` parameter (default: all)\\n        :arg filter: Clear filter caches\\n        :arg filter_cache: Clear filter caches\\n        :arg filter_keys: A comma-separated list of keys to clear when using\\n            the `filter_cache` parameter (default: all)\\n        :arg id: Clear ID caches for parent/child\\n        :arg id_cache: Clear ID caches for parent/child\\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\\n            expression resolves into no concrete indices. (This includes `_all` string or\\n            when no indices have been specified)\\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete indices\\n            that are open, closed or both.\\n        :arg ignore_indices: When performed on multiple indices, allows to\\n            ignore `missing` ones (default: none)\\n        :arg ignore_unavailable: Whether specified concrete indices should be ignored\\n            when unavailable (missing or closed)\\n        :arg query_cache: Clear query cache\\n        :arg recycler: Clear the recycler cache\\n        '", "#NEWLINE#", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 44, "repair_targets": [18], "repair_candidates": [0, 21, 44, 18, 2, 31, 16, 6, 38, 40]}}
{"prediction": {"error_location": 0.9875084757804871, "repair_targets": [0.9980049729347229], "repair_candidates": [0.0007111035520210862, 0.0003487740468699485, 0.000167709615197964, 0.00025554504827596247, 0.9980049729347229, 3.973903858423e-06, 0.0004929997958242893, 1.3735842685491662e-06, 5.448726369650103e-06, 8.08685854281066e-06], "target_probs": 0.9980049729347229}}


{"result": {"time": "2021-02-11 11:46:38.537425", "n_pass": [34, 5, 5], "n_token": 40, "loss": [0.04443005472421646, 0.0018316583009436727], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "None", ",", "params", "=", "None", ")", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "perform_request", "(", "'POST'", ",", "_make_path", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 39, "repair_targets": [13], "repair_candidates": [0, 16, 39, 13, 2, 26, 11, 6, 33, 35]}}
{"prediction": {"error_location": 0.9565424919128418, "repair_targets": [0.998170018196106], "repair_candidates": [0.0009399169939570129, 0.0003269095323048532, 0.00013482126814778894, 9.383701399201527e-05, 0.998170018196106, 1.8456565840097028e-06, 0.00031476744334213436, 1.7790856645660824e-06, 5.256362783256918e-06, 1.0793236469908152e-05], "target_probs": 0.998170018196106}}


{"result": {"time": "2021-02-11 11:46:38.593158", "n_pass": [37, 6, 6], "n_token": 35, "loss": [0.016097577288746834, 0.00533145759254694], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "None", ",", "params", "=", "None", ")", "(", "_", ",", "data", ")", "=", "self", ".", "transport", ".", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 34, "repair_targets": [13], "repair_candidates": [0, 16, 34, 13, 2, 21, 11, 6, 28, 30]}}
{"prediction": {"error_location": 0.9840313196182251, "repair_targets": [0.9946827292442322], "repair_candidates": [0.0010373907862231135, 0.0004361807368695736, 0.0001750750670908019, 0.0001249522465514019, 0.9946827292442322, 1.0069373956866912e-06, 0.0035336436703801155, 1.5315865766751813e-06, 2.498176399967633e-06, 4.960930709785316e-06], "target_probs": 0.9946827292442322}}


{"result": {"time": "2021-02-11 11:46:38.651810", "n_pass": [59, 7, 7], "n_token": 32, "loss": [0.003809933550655842, 0.000820913992356509], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "None", ",", "params", "=", "None", ")", "(", "_", ",", "data", ")", "=", "self", "(", "index", ",", "'_cache'", ",", "'clear'", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 31, "repair_targets": [13], "repair_candidates": [0, 16, 31, 13, 2, 18, 11, 6, 25, 27]}}
{"prediction": {"error_location": 0.9961973428726196, "repair_targets": [0.9991794228553772], "repair_candidates": [0.00039473825017921627, 0.00018680324137676507, 4.265812094672583e-05, 7.449100667145103e-05, 0.9991794228553772, 3.970627915350633e-08, 0.00011961895506829023, 3.2927067650234676e-07, 1.4333808167066309e-06, 5.69087660551304e-07], "target_probs": 0.9991794228553772}}


{"result": {"time": "2021-02-11 11:46:38.707217", "n_pass": [61, 8, 8], "n_token": 29, "loss": [0.0035551695618778467, 0.0008546188473701477], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "None", ",", "params", "=", "None", ")", "(", "_", ",", "data", ")", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 28, "repair_targets": [13], "repair_candidates": [0, 16, 28, 13, 2, 18, 11, 6, 22, 24]}}
{"prediction": {"error_location": 0.9964511394500732, "repair_targets": [0.9991457462310791], "repair_candidates": [0.0004360648454166949, 0.00014731897681485862, 3.80678684450686e-05, 0.00018798372184392065, 0.9991457462310791, 6.041165079295752e-08, 4.225696829962544e-05, 1.8670242241114465e-07, 1.8683006146602565e-06, 4.2742442474263953e-07], "target_probs": 0.9991457462310791}}


{"result": {"time": "2021-02-11 11:46:38.762555", "n_pass": [67, 9, 9], "n_token": 27, "loss": [0.0030985698103904724, 0.0016520549543201923], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "None", ")", "(", "_", ",", "data", ")", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 26, "repair_targets": [11], "repair_candidates": [0, 14, 26, 11, 2, 16, 9, 4, 20, 22]}}
{"prediction": {"error_location": 0.9969061017036438, "repair_targets": [0.9983493089675903], "repair_candidates": [0.0005854120245203376, 0.0003522374317981303, 9.110241080634296e-05, 0.0004018567269667983, 0.9983493089675903, 7.364089356087788e-07, 0.00021457357797771692, 1.8325091843962582e-07, 4.022982466267422e-06, 5.506775551111787e-07], "target_probs": 0.9983493089675903}}


{"result": {"time": "2021-02-11 11:46:38.817775", "n_pass": [69, 10, 10], "n_token": 25, "loss": [0.0029431143775582314, 0.0010267997859045863], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "(", "_", ",", "data", ")", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 24, "repair_targets": [9], "repair_candidates": [0, 12, 24, 9, 2, 14, 7, 4, 18, 20]}}
{"prediction": {"error_location": 0.9970611929893494, "repair_targets": [0.9989737272262573], "repair_candidates": [0.00016605958808213472, 0.0001279633434023708, 0.00029777458985336125, 0.00016007396334316581, 0.9989737272262573, 5.557373015108169e-07, 0.0002599360013846308, 4.619206350753302e-08, 1.373370560031617e-05, 2.0368652542401833e-07], "target_probs": 0.9989737272262573}}


{"result": {"time": "2021-02-11 11:46:38.874073", "n_pass": [100, 11, 11], "n_token": 24, "loss": [0.012180587276816368, 0.0007359709125012159], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", ",", "data", ")", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 23, "repair_targets": [8], "repair_candidates": [0, 11, 23, 8, 2, 13, 6, 4, 17, 19]}}
{"prediction": {"error_location": 0.9878931641578674, "repair_targets": [0.9992642998695374], "repair_candidates": [0.00014628177450504154, 6.422813748940825e-05, 0.00016395676357205957, 0.00011618860298767686, 0.9992642998695374, 1.1834165434265742e-06, 0.0002349197311559692, 5.5884672889305875e-08, 8.632810022390913e-06, 2.5891677069012076e-07], "target_probs": 0.9992642998695374}}


{"result": {"time": "2021-02-11 11:46:38.929882", "n_pass": [101, 12, 12], "n_token": 23, "loss": [0.10247345268726349, 0.0043045408092439175], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", "data", ")", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 22, "repair_targets": [7], "repair_candidates": [0, 10, 22, 7, 2, 12, 6, 4, 16, 18]}}
{"prediction": {"error_location": 0.9026021361351013, "repair_targets": [0.995704710483551], "repair_candidates": [0.0006580766057595611, 0.00019687575695570558, 0.0010815184796229005, 0.00037381661240942776, 0.995704710483551, 9.95043410512153e-06, 0.0019061127677559853, 3.330910658405628e-07, 6.664913962595165e-05, 1.939763933478389e-06], "target_probs": 0.995704710483551}}


{"result": {"time": "2021-02-11 11:46:38.988360", "n_pass": [103, 13, 13], "n_token": 22, "loss": [0.011248034425079823, 0.28795692324638367], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", "data", "=", "self", "(", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 21, "repair_targets": [7], "repair_candidates": [0, 9, 21, 7, 2, 11, 6, 4, 15, 17]}}
{"prediction": {"error_location": 0.9888150095939636, "repair_targets": [0.7497938871383667], "repair_candidates": [0.004733898676931858, 0.0032835323363542557, 0.0578048974275589, 0.14290590584278107, 0.7497938871383667, 2.491077975719236e-05, 0.04135847091674805, 1.704792680357059e-06, 8.625417103758082e-05, 6.433801900129765e-06], "target_probs": 0.7497938871383667}}


{"result": {"time": "2021-02-11 11:46:39.098637", "n_pass": [106, 15, 14], "n_token": 21, "loss": [0.13952907919883728, 0.14689654111862183], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", "data", "=", "self", "index", ",", ")", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 20, "repair_targets": [7], "repair_candidates": [0, 9, 20, 7, 2, 10, 6, 4, 14, 16]}}
{"prediction": {"error_location": 0.8697677254676819, "repair_targets": [0.8633832931518555], "repair_candidates": [0.004048620350658894, 0.005512351635843515, 0.03821946308016777, 0.02879881113767624, 0.8633832931518555, 0.00015968263323884457, 0.05941455066204071, 2.0715307982754894e-05, 0.0004276447871234268, 1.4887616089254152e-05], "target_probs": 0.8633832931518555}}


{"result": {"time": "2021-02-11 11:46:39.153856", "n_pass": [108, 16, 15], "n_token": 19, "loss": [0.010677115991711617, 0.3123248815536499], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", "data", "=", "self", "index", ",", "params", "=", "params", ")", "#NEWLINE#", "return", "self"]}}
{"position": {"error_location": 18, "repair_targets": [7], "repair_candidates": [0, 9, 18, 7, 2, 10, 6, 4, 12, 14]}}
{"prediction": {"error_location": 0.9893797039985657, "repair_targets": [0.7317437529563904], "repair_candidates": [0.0035210626665502787, 0.003719935892149806, 0.05752938985824585, 0.18766885995864868, 0.7317437529563904, 2.21185964619508e-05, 0.015653511509299278, 1.6798256183392368e-05, 0.0001172209158539772, 7.233499218273209e-06], "target_probs": 0.7317437529563904}}


{"result": {"time": "2021-02-11 11:46:39.209224", "n_pass": [111, 17, 16], "n_token": 17, "loss": [0.008091880939900875, 0.4024105966091156], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "=", "_", "data", "=", "self", "index", ",", "params", "=", "params", "return", "self"]}}
{"position": {"error_location": 16, "repair_targets": [7], "repair_candidates": [0, 9, 16, 7, 2, 10, 6, 4, 12, 14]}}
{"prediction": {"error_location": 0.9919407963752747, "repair_targets": [0.6687061190605164], "repair_candidates": [6.702913378830999e-05, 0.00012302916729822755, 0.01906893402338028, 0.3116462528705597, 0.6687061190605164, 2.3368843358184677e-06, 0.0002454945060890168, 0.00013885342923458666, 1.8686819203139748e-06, 4.879471404706237e-08], "target_probs": 0.6687061190605164}}


{"result": {"time": "2021-02-11 11:46:39.377177", "n_pass": [118, 20, 17], "n_token": 16, "loss": [0.1184631958603859, 0.14381325244903564], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "=", "params", "_", "data", "=", "self", "index", ",", "params", "=", "params", "return", "self"]}}
{"position": {"error_location": 15, "repair_targets": [6], "repair_candidates": [0, 8, 15, 6, 2, 9, 5, 4, 11, 13]}}
{"prediction": {"error_location": 0.8882843852043152, "repair_targets": [0.8660494685173035], "repair_candidates": [0.0003521167382132262, 0.0012240031501278281, 0.08042924106121063, 0.029681237414479256, 0.8660494685173035, 9.960222814697772e-05, 0.020206265151500702, 0.0019410651875659823, 1.6816502466099337e-05, 1.947378365230179e-07], "target_probs": 0.8660494685173035}}


{"result": {"time": "2021-02-11 11:46:39.541762", "n_pass": [130, 23, 18], "n_token": 15, "loss": [0.14960643649101257, 0.5565889477729797], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "index", "params", "_", "data", "=", "self", "index", ",", "params", "=", "params", "return", "self"]}}
{"position": {"error_location": 14, "repair_targets": [5], "repair_candidates": [0, 7, 14, 5, 2, 8, 4, 3, 10, 12]}}
{"prediction": {"error_location": 0.8610467910766602, "repair_targets": [0.5731608271598816], "repair_candidates": [0.0032065699342638254, 0.26524654030799866, 0.012381279841065407, 0.0028739117551594973, 0.5731608271598816, 0.0017413378227502108, 0.13537432253360748, 0.005963935051113367, 4.980818266631104e-05, 1.4192277149049914e-06], "target_probs": 0.5731608271598816}}




Minimal simplified tokens:

['self', ',', 'index', 'params', '_', 'data', '=', 'self', 'index', ',', 'params', '=', 'params', 'return', 'self']
