
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_get_import_name_without_alias(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Test that function get_name_without_alias() will work on a string.\\n        - Note: This isn't truly needed when pipreqs is walking the AST to find imports\\n        \"", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "=", "'requests'", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"], "error_location": [23], "repair_targets": [9], "repair_candidates": [2, 23, 26, 9, 17, 30, 13, 32], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "bndr/pipreqs/tests/test_pipreqs.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4089, "results": {"model": "transformer", "prob": {"loc": [[2.530630126784672e-06, 1.9141659091115315e-10, 1.25959062624581e-10, 7.388100548011423e-12, 4.672485922480041e-12, 6.7590698663022586e-12, 4.677880912490329e-12, 4.4835125195819e-12, 4.709258590723797e-12, 1.9687036723059492e-10, 1.2947985565670006e-11, 2.696348526398662e-11, 6.633916072723567e-12, 3.0475266754592667e-09, 8.959609096304e-12, 3.952388069605739e-11, 7.195170674545448e-12, 7.178495575743682e-10, 3.966854785191626e-13, 1.3830083996427267e-12, 1.833202209824969e-12, 2.936911998319136e-12, 3.1794393506867635e-11, 0.9999874830245972, 3.542053456095928e-11, 3.5194176132430366e-12, 6.591524201460253e-12, 6.363813555981812e-13, 6.593632974685737e-13, 1.819501797492573e-12, 1.0002920134866145e-05, 2.7454930690007373e-12, 1.9932880235273842e-08, 2.7301297073761832e-12]], "pointer": [[0.0, 0.0, 5.810950387541425e-09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9852161407470703, 0.0, 0.0, 0.0, 0.014783689752221107, 0.0, 0.0, 0.0, 2.505066598601502e-09, 0.0, 0.0, 0.0, 0.0, 0.0, 5.392689073069334e-10, 0.0, 0.0, 1.0073290118706169e-10, 0.0, 0.0, 0.0, 4.3992529064063035e-10, 0.0, 7.162893211898336e-08, 0.0]], "target": [0.9852161407470703]}, "loss": [1.2516897186287679e-05, 0.014894229359924793], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 12:08:10.371989", "n_pass": [1, 1, 1], "n_token": 34, "loss": [1.2516897186287679e-05, 0.014894229359924793], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_get_import_name_without_alias(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Test that function get_name_without_alias() will work on a string.\\n        - Note: This isn't truly needed when pipreqs is walking the AST to find imports\\n        \"", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "=", "'requests'", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 23, "repair_targets": [9], "repair_candidates": [2, 23, 26, 9, 17, 30, 13, 32]}}
{"prediction": {"error_location": 0.9999874830245972, "repair_targets": [0.9852161407470703], "repair_candidates": [5.810950387541425e-09, 0.9852161407470703, 0.014783689752221107, 2.505066598601502e-09, 5.392689073069334e-10, 1.0073290118706169e-10, 4.3992529064063035e-10, 7.162893211898336e-08], "target_probs": 0.9852161407470703}}


{"result": {"time": "2021-02-11 12:08:10.486402", "n_pass": [44, 3, 2], "n_token": 32, "loss": [0.0005768066039308906, 0.0017228653887286782], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Test that function get_name_without_alias() will work on a string.\\n        - Note: This isn't truly needed when pipreqs is walking the AST to find imports\\n        \"", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "=", "'requests'", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 21, "repair_targets": [7], "repair_candidates": [0, 21, 24, 7, 15, 28, 11, 30]}}
{"prediction": {"error_location": 0.9994233846664429, "repair_targets": [0.9982786178588867], "repair_candidates": [3.789675247389823e-06, 0.9982786178588867, 0.0017175683751702309, 5.1550244961617864e-08, 1.1965562984883604e-09, 2.1209205225414252e-10, 5.15149090052347e-10, 4.24497983431138e-08], "target_probs": 0.9982786178588867}}


{"result": {"time": "2021-02-11 12:08:10.541593", "n_pass": [45, 4, 3], "n_token": 30, "loss": [0.00011467275908216834, 0.0013159227091819048], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#INDENT#", "\"\\n        Test that function get_name_without_alias() will work on a string.\\n        - Note: This isn't truly needed when pipreqs is walking the AST to find imports\\n        \"", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "=", "'requests'", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 19, "repair_targets": [5], "repair_candidates": [0, 19, 22, 5, 13, 26, 9, 28]}}
{"prediction": {"error_location": 0.9998853206634521, "repair_targets": [0.9986849427223206], "repair_candidates": [8.908164659260365e-07, 0.9986849427223206, 0.0013141913805156946, 5.2959002516672626e-08, 1.445366881736021e-10, 4.270020101393435e-11, 2.048642228080766e-10, 2.331775306174677e-08], "target_probs": 0.9986849427223206}}


{"result": {"time": "2021-02-11 12:08:10.596507", "n_pass": [46, 5, 4], "n_token": 28, "loss": [0.00010239553375868127, 0.02351982891559601], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "=", "'requests'", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [0, 17, 20, 3, 11, 24, 7, 26]}}
{"prediction": {"error_location": 0.9998975992202759, "repair_targets": [0.9767546057701111], "repair_candidates": [3.965922587667592e-06, 0.9767546057701111, 0.023240845650434494, 5.025901828048518e-07, 2.43106368369439e-10, 2.0963954183716993e-10, 8.626417913326634e-10, 8.970509668415616e-08], "target_probs": 0.9767546057701111}}


{"result": {"time": "2021-02-11 12:08:10.707117", "n_pass": [50, 7, 5], "n_token": 26, "loss": [0.0007325111655518413, 0.0002432761393720284], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "=", "pipreqs", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 15, "repair_targets": [3], "repair_candidates": [0, 15, 18, 3, 9, 22, 7, 24]}}
{"prediction": {"error_location": 0.9992677569389343, "repair_targets": [0.9997567534446716], "repair_candidates": [7.368864316958934e-06, 0.9997567534446716, 0.00023346189118456095, 1.7011232102959184e-06, 1.0946420436752646e-09, 1.0815384143825213e-09, 3.798572567603742e-09, 7.476755854440853e-07], "target_probs": 0.9997567534446716}}


{"result": {"time": "2021-02-11 12:08:10.766283", "n_pass": [52, 8, 6], "n_token": 24, "loss": [0.015933336690068245, 0.0003493442200124264], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", ".", "get_name_without_alias", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 13, "repair_targets": [3], "repair_candidates": [0, 13, 16, 3, 9, 20, 7, 22]}}
{"prediction": {"error_location": 0.9841927886009216, "repair_targets": [0.9996507167816162], "repair_candidates": [9.118090383708477e-05, 0.9996507167816162, 0.0002298489271197468, 6.21943229361932e-07, 2.8986043787426752e-08, 2.8499018256411546e-08, 5.153482263153819e-08, 2.7538304493646137e-05], "target_probs": 0.9996507167816162}}


{"result": {"time": "2021-02-11 12:08:10.821038", "n_pass": [53, 9, 7], "n_token": 22, "loss": [0.06000566482543945, 0.0006804396398365498], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "=", "'requests as R'", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 11, "repair_targets": [3], "repair_candidates": [0, 11, 14, 3, 9, 18, 7, 20]}}
{"prediction": {"error_location": 0.9417592287063599, "repair_targets": [0.9993197917938232], "repair_candidates": [0.00010743067832663655, 0.9993197917938232, 0.0004045242094434798, 9.595902520231903e-05, 2.3704318152795167e-07, 3.609678458360577e-07, 6.202488293638453e-06, 6.536152068292722e-05], "target_probs": 0.9993197917938232}}


{"result": {"time": "2021-02-11 12:08:10.930305", "n_pass": [61, 11, 8], "n_token": 20, "loss": [0.16832348704338074, 0.012305320240557194], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 12, 3, 7, 16, 5, 18]}}
{"prediction": {"error_location": 0.8450804352760315, "repair_targets": [0.9877700805664062], "repair_candidates": [0.0015170156257227063, 0.9877700805664062, 0.007451558019965887, 0.001528436434455216, 2.8671383915934712e-05, 2.168868377339095e-05, 0.0004684087762143463, 0.001214172225445509], "target_probs": 0.9877700805664062}}


{"result": {"time": "2021-02-11 12:08:11.207044", "n_pass": [95, 16, 9], "n_token": 19, "loss": [0.5854353904724121, 0.004939636215567589], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", ",", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 15, 5, 17]}}
{"prediction": {"error_location": 0.5568633079528809, "repair_targets": [0.9950725436210632], "repair_candidates": [0.0020963004790246487, 0.9950725436210632, 0.00223985081538558, 0.0003047530190087855, 2.7909851269214414e-05, 4.805243224836886e-05, 3.334222856210545e-05, 0.00017734804714564234], "target_probs": 0.9950725436210632}}


{"result": {"time": "2021-02-11 12:08:11.701906", "n_pass": [117, 25, 10], "n_token": 18, "loss": [0.8962751626968384, 0.0031622527167201042], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", ".", "assertEqual", "(", "import_name_without_aliases", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 15, 5, 16]}}
{"prediction": {"error_location": 0.408086895942688, "repair_targets": [0.9968427419662476], "repair_candidates": [0.0012810819316655397, 0.9968427419662476, 0.0015449202619493008, 0.00016441849584225565, 4.179538882453926e-05, 4.087812340003438e-05, 2.3407579647027887e-05, 6.072593532735482e-05], "target_probs": 0.9968427419662476}}


{"result": {"time": "2021-02-11 12:08:12.140556", "n_pass": [132, 33, 11], "n_token": 17, "loss": [0.16207535564899445, 0.0022380342707037926], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", "assertEqual", "(", "import_name_without_aliases", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 14, 5, 15]}}
{"prediction": {"error_location": 0.8503770232200623, "repair_targets": [0.9977644681930542], "repair_candidates": [0.0005587860359810293, 0.9977644681930542, 0.001335193868726492, 0.00017716814181767404, 6.45789941700059e-06, 1.2822150893043727e-05, 6.995281728450209e-05, 7.512230513384566e-05], "target_probs": 0.9977644681930542}}


{"result": {"time": "2021-02-11 12:08:12.195160", "n_pass": [133, 34, 12], "n_token": 16, "loss": [0.055936720222234726, 0.010039067827165127], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", "(", "import_name_without_aliases", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 13, 5, 14]}}
{"prediction": {"error_location": 0.9455990791320801, "repair_targets": [0.9900111556053162], "repair_candidates": [0.0020389510318636894, 0.9900111556053162, 0.005097535438835621, 0.0006445046165026724, 2.0353876607259735e-05, 9.295486961491406e-05, 0.0008657536236569285, 0.001228722627274692], "target_probs": 0.9900111556053162}}


{"result": {"time": "2021-02-11 12:08:12.250104", "n_pass": [134, 35, 13], "n_token": 15, "loss": [1.0215044021606445, 0.18970100581645966], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", "import_name_without_aliases", "expected_import_name_without_alias", ")"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 12, 5, 13]}}
{"prediction": {"error_location": 0.36005285382270813, "repair_targets": [0.8272064328193665], "repair_candidates": [0.05691957846283913, 0.8272064328193665, 0.09798441082239151, 0.00886740442365408, 9.669859718997031e-05, 0.0006916470010764897, 0.00496445270255208, 0.0032693890389055014], "target_probs": 0.8272064328193665}}


{"result": {"time": "2021-02-11 12:08:12.308591", "n_pass": [137, 36, 14], "n_token": 14, "loss": [0.8137510418891907, 0.6126189231872559], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "import_name_with_alias", "#NEWLINE#", "expected_import_name_without_alias", "#NEWLINE#", "import_name_without_aliases", "(", "self", "#NEWLINE#", "self", "import_name_without_aliases", "expected_import_name_without_alias"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [0, 9, 11, 3, 7, 12, 5, 13]}}
{"prediction": {"error_location": 0.44319257140159607, "repair_targets": [0.5419297218322754], "repair_candidates": [0.14951230585575104, 0.5419297218322754, 0.25091928243637085, 0.011292281560599804, 0.0036251130513846874, 0.008206542581319809, 0.004099451936781406, 0.030415356159210205], "target_probs": 0.5419297218322754}}




Minimal simplified tokens:

['self', ')', '#NEWLINE#', 'import_name_with_alias', '#NEWLINE#', 'expected_import_name_without_alias', '#NEWLINE#', 'import_name_without_aliases', '(', 'self', '#NEWLINE#', 'self', 'import_name_without_aliases', 'expected_import_name_without_alias']
