
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def make_organization_unit_orgunit_provisioning_uri(", "self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Creates a resource feed URI for the orgunit's Provisioning API calls.\\n\\n    Using this client's Google Apps domain, create a feed URI for organization\\n    unit orgunit's provisioning in that domain. If an org_unit_path is\\n    provided, return a URI for that specific resource.\\n    If params are provided, append them as GET params.\\n\\n    Args:\\n      customer_id: string The customerId of the user.\\n      org_unit_path: string (optional) The organization unit's path for which\\n          to make a feed URI.\\n      params: dict (optional) key -> value params to append as GET vars to the\\n          URI. Example: params={'start': 'my-resource-id'}\\n\\n    Returns:\\n      A string giving the URI for organization unit provisioning for\\n          given org_unit_path\\n    \"", "#NEWLINE#", "return", "self", ".", "make_organization_unit_provisioning_uri", "(", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"], "error_location": [30], "repair_targets": [10], "repair_candidates": [6, 28, 2, 20, 30, 4, 26, 10], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "acil-bwh/SlicerCIP/Scripted/attic/PicasaSnap/gdata/apps/organization/client.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 3542, "results": {"model": "transformer", "prob": {"loc": [[2.2262163838604465e-05, 2.320822353740759e-11, 1.4125717089086276e-11, 1.6994006028780984e-12, 3.001277351644127e-11, 3.350387675626898e-12, 6.353775838796594e-11, 1.6625919391222155e-11, 4.798440290942896e-12, 5.118904432277471e-12, 1.875353872193841e-09, 5.5625126033076455e-11, 3.79166940900344e-11, 6.885808763457124e-12, 2.5898547195701838e-11, 5.1896206082480134e-11, 1.59361048662765e-11, 7.720601068184063e-12, 1.3104582523293384e-11, 2.9995415873340647e-12, 3.0044714546123563e-12, 7.414709471409431e-12, 5.625457239789855e-13, 8.968091547156831e-11, 5.543088210657743e-11, 3.1738646433243645e-11, 3.1252278631654917e-07, 3.704527656855916e-11, 1.5847667782509234e-06, 8.349015229169865e-11, 0.9999758005142212, 6.328401691568786e-11]], "pointer": [[0.0, 0.0, 7.834204893697461e-07, 0.0, 5.102417617308674e-06, 0.0, 5.431229146779515e-05, 0.0, 0.0, 0.0, 0.9999396800994873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.812960696654045e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 4.941750830766978e-08, 0.0, 2.847812652362336e-08, 0.0, 9.924757904400394e-09, 0.0]], "target": [0.9999396800994873]}, "loss": [2.4199192921514623e-05, 6.032171950209886e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 12:02:58.511873", "n_pass": [1, 1, 1], "n_token": 32, "loss": [2.4199192921514623e-05, 6.032171950209886e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def make_organization_unit_orgunit_provisioning_uri(", "self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Creates a resource feed URI for the orgunit's Provisioning API calls.\\n\\n    Using this client's Google Apps domain, create a feed URI for organization\\n    unit orgunit's provisioning in that domain. If an org_unit_path is\\n    provided, return a URI for that specific resource.\\n    If params are provided, append them as GET params.\\n\\n    Args:\\n      customer_id: string The customerId of the user.\\n      org_unit_path: string (optional) The organization unit's path for which\\n          to make a feed URI.\\n      params: dict (optional) key -> value params to append as GET vars to the\\n          URI. Example: params={'start': 'my-resource-id'}\\n\\n    Returns:\\n      A string giving the URI for organization unit provisioning for\\n          given org_unit_path\\n    \"", "#NEWLINE#", "return", "self", ".", "make_organization_unit_provisioning_uri", "(", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 30, "repair_targets": [10], "repair_candidates": [6, 28, 2, 20, 30, 4, 26, 10]}}
{"prediction": {"error_location": 0.9999758005142212, "repair_targets": [0.9999396800994873], "repair_candidates": [7.834204893697461e-07, 5.102417617308674e-06, 5.431229146779515e-05, 0.9999396800994873, 4.812960696654045e-08, 4.941750830766978e-08, 2.847812652362336e-08, 9.924757904400394e-09], "target_probs": 0.9999396800994873}}


{"result": {"time": "2021-02-11 12:02:58.570641", "n_pass": [23, 2, 2], "n_token": 28, "loss": [2.5510462364763953e-05, 2.7180087272427045e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def make_organization_unit_orgunit_provisioning_uri(", "self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "#INDENT#", "\"Creates a resource feed URI for the orgunit's Provisioning API calls.\\n\\n    Using this client's Google Apps domain, create a feed URI for organization\\n    unit orgunit's provisioning in that domain. If an org_unit_path is\\n    provided, return a URI for that specific resource.\\n    If params are provided, append them as GET params.\\n\\n    Args:\\n      customer_id: string The customerId of the user.\\n      org_unit_path: string (optional) The organization unit's path for which\\n          to make a feed URI.\\n      params: dict (optional) key -> value params to append as GET vars to the\\n          URI. Example: params={'start': 'my-resource-id'}\\n\\n    Returns:\\n      A string giving the URI for organization unit provisioning for\\n          given org_unit_path\\n    \"", "#NEWLINE#", "return", "self", ".", "make_organization_unit_provisioning_uri", "(", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 26, "repair_targets": [10], "repair_candidates": [6, 24, 2, 16, 26, 4, 22, 10]}}
{"prediction": {"error_location": 0.9999744892120361, "repair_targets": [0.9999728202819824], "repair_candidates": [1.1059154303438845e-07, 7.422064527418115e-07, 2.6336612791055813e-05, 0.9999728202819824, 1.3182906322128929e-08, 7.132645585272712e-09, 5.387454926619739e-09, 8.69790572899376e-10], "target_probs": 0.9999728202819824}}


{"result": {"time": "2021-02-11 12:02:58.625505", "n_pass": [24, 3, 3], "n_token": 24, "loss": [0.00019631843315437436, 1.9431303371675313e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def make_organization_unit_orgunit_provisioning_uri(", "self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "self", ".", "make_organization_unit_provisioning_uri", "(", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 22, "repair_targets": [10], "repair_candidates": [6, 20, 2, 12, 22, 4, 18, 10]}}
{"prediction": {"error_location": 0.9998037219047546, "repair_targets": [0.9999805688858032], "repair_candidates": [7.146690705894798e-08, 1.0143803592654876e-06, 1.8390359400655143e-05, 0.9999805688858032, 5.505181732701203e-08, 1.1068562066895993e-08, 5.745635522913517e-09, 1.5892456239896546e-09], "target_probs": 0.9999805688858032}}


{"result": {"time": "2021-02-11 12:02:58.680571", "n_pass": [44, 4, 4], "n_token": 22, "loss": [0.04310576245188713, 0.00019486657402012497], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def make_organization_unit_orgunit_provisioning_uri(", "self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "self", ".", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 20, "repair_targets": [10], "repair_candidates": [6, 18, 2, 12, 20, 4, 16, 10]}}
{"prediction": {"error_location": 0.95781010389328, "repair_targets": [0.9998051524162292], "repair_candidates": [1.5017920304671861e-05, 6.506153295049444e-05, 0.00011307977547403425, 0.9998051524162292, 8.823138273328368e-07, 5.13593931827927e-07, 1.3329740511380805e-07, 1.4811607229603396e-07], "target_probs": 0.9998051524162292}}


{"result": {"time": "2021-02-11 12:02:58.789803", "n_pass": [49, 6, 5], "n_token": 20, "loss": [0.201060950756073, 0.0003382539434824139], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "self", ".", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 18, "repair_targets": [8], "repair_candidates": [4, 16, 0, 10, 18, 2, 14, 8]}}
{"prediction": {"error_location": 0.8178625702857971, "repair_targets": [0.9996618032455444], "repair_candidates": [4.411940244608559e-05, 0.0001158193190349266, 0.00017189685604535043, 0.9996618032455444, 1.2807058169528318e-07, 5.8164650909020565e-06, 3.391263021512714e-07, 1.758326639844654e-08], "target_probs": 0.9996618032455444}}


{"result": {"time": "2021-02-11 12:02:58.957381", "n_pass": [81, 9, 6], "n_token": 19, "loss": [0.23682931065559387, 0.1604020893573761], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "customer_id", ",", "org_unit_path", "=", "None", ",", "params", "=", "self", ".", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 17, "repair_targets": [7], "repair_candidates": [3, 15, 0, 9, 17, 1, 13, 7]}}
{"prediction": {"error_location": 0.7891259789466858, "repair_targets": [0.8518012166023254], "repair_candidates": [0.002508901758119464, 0.013053852133452892, 0.007839219644665718, 0.8518012166023254, 6.759375992260175e-06, 0.12476072460412979, 2.7666621463140473e-05, 1.6058248775152606e-06], "target_probs": 0.8518012166023254}}


{"result": {"time": "2021-02-11 12:02:59.011825", "n_pass": [83, 10, 7], "n_token": 18, "loss": [0.24417947232723236, 0.13414758443832397], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "customer_id", "org_unit_path", "=", "None", ",", "params", "=", "self", ".", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 16, "repair_targets": [6], "repair_candidates": [2, 14, 0, 8, 16, 1, 12, 6]}}
{"prediction": {"error_location": 0.7833470106124878, "repair_targets": [0.8744609951972961], "repair_candidates": [0.0004354759876150638, 0.00700742844492197, 0.00027716331533156335, 0.8744609951972961, 4.894189714832464e-06, 0.11780375987291336, 8.933571734814905e-06, 1.3213185638960567e-06], "target_probs": 0.8744609951972961}}


{"result": {"time": "2021-02-11 12:02:59.119777", "n_pass": [86, 12, 8], "n_token": 17, "loss": [0.6380362510681152, 0.6052571535110474], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "customer_id", "org_unit_path", "=", ",", "params", "=", "self", ".", "ORGANIZATION_UNIT_FEED", ",", "customer_id", ",", "org_unit_path", ",", "self", ")"]}}
{"position": {"error_location": 15, "repair_targets": [5], "repair_candidates": [2, 13, 0, 7, 15, 1, 11, 5]}}
{"prediction": {"error_location": 0.5283288955688477, "repair_targets": [0.5459340214729309], "repair_candidates": [0.0008333367295563221, 0.02726006507873535, 0.0026236637495458126, 0.5459340214729309, 1.3111789485265035e-05, 0.42273807525634766, 0.0005896743969060481, 8.08972617960535e-06], "target_probs": 0.5459340214729309}}




Minimal simplified tokens:

['self', 'customer_id', 'org_unit_path', '=', ',', 'params', '=', 'self', '.', 'ORGANIZATION_UNIT_FEED', ',', 'customer_id', ',', 'org_unit_path', ',', 'self', ')']
