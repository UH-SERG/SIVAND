
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", "0.5", ",", "0.5", ")", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create an empty `WeightedMinHashLSH` index that accepts \\n        WeightedMinHash objects\\n        with `sample_size` samples and query\\n        Jaccard similarity threshold `threshold`.\\n        The initialized `WeightedMinHashLSH` will be optimized for the threshold by\\n        minizing the false positive and false negative.\\n\\n        Use `weights` to adjust the relative importance of \\n        minizing false positive and false negative when optimizing \\n        for the Jaccard similarity threshold.\\n        `weights` is a tuple in the format of \\n        (false_positive_weight, false_negative_weight).\\n        '", "#NEWLINE#", "super", "(", "WeightedMinHashLSH", ",", "self", ")", ".", "__init__", "(", "self", ",", "sample_size", ",", "weights", ")"], "error_location": [34], "repair_targets": [4], "repair_candidates": [2, 29, 34, 4, 8, 36, 12, 38], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "ekzhu/datasketch/datasketch/lsh.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 3271, "results": {"model": "transformer", "prob": {"loc": [[1.3320433936314657e-05, 1.0554316309807632e-09, 4.308664189323075e-11, 1.204705779578319e-10, 2.8850055677764885e-09, 1.442925084971236e-10, 3.1505864583891707e-10, 5.877631020778651e-11, 1.348870015682735e-09, 1.8384607725074886e-10, 1.2154106610040571e-09, 7.051866035556742e-11, 1.046120190473232e-09, 2.399822285337194e-10, 3.1299762781600293e-10, 3.2925953519225004e-08, 5.778623690666507e-10, 4.745776660541878e-09, 9.016726254529317e-10, 4.3073353217515375e-10, 8.333134182691992e-09, 3.8284228565110823e-10, 1.7375512140205274e-10, 2.0234305342370362e-09, 1.6101966981985072e-10, 2.358872428984138e-12, 5.844640743601914e-11, 6.5059508891351925e-09, 4.285523047542483e-09, 3.2153071871654504e-10, 8.640703430540242e-11, 1.716315110866784e-11, 1.101078343085371e-11, 3.049865471282942e-09, 0.9999783039093018, 1.0768544278505487e-08, 7.529541562689701e-06, 9.35082500319595e-09, 8.568002272113517e-07, 1.3883154625915495e-09]], "pointer": [[0.0, 0.0, 2.970044432615282e-09, 0.0, 0.9999966621398926, 0.0, 0.0, 0.0, 3.168289140376146e-06, 0.0, 0.0, 0.0, 1.9598491007855046e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9112087740479353e-10, 0.0, 0.0, 0.0, 0.0, 3.8404873725639277e-10, 0.0, 1.3229712880757916e-09, 0.0, 7.275561264563635e-10, 0.0]], "target": [0.9999966621398926]}, "loss": [2.169585604860913e-05, 3.337865791763761e-06], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:50:57.853449", "n_pass": [1, 1, 1], "n_token": 40, "loss": [2.169585604860913e-05, 3.337865791763761e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", "0.5", ",", "0.5", ")", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create an empty `WeightedMinHashLSH` index that accepts \\n        WeightedMinHash objects\\n        with `sample_size` samples and query\\n        Jaccard similarity threshold `threshold`.\\n        The initialized `WeightedMinHashLSH` will be optimized for the threshold by\\n        minizing the false positive and false negative.\\n\\n        Use `weights` to adjust the relative importance of \\n        minizing false positive and false negative when optimizing \\n        for the Jaccard similarity threshold.\\n        `weights` is a tuple in the format of \\n        (false_positive_weight, false_negative_weight).\\n        '", "#NEWLINE#", "super", "(", "WeightedMinHashLSH", ",", "self", ")", ".", "__init__", "(", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [2, 29, 34, 4, 8, 36, 12, 38]}}
{"prediction": {"error_location": 0.9999783039093018, "repair_targets": [0.9999966621398926], "repair_candidates": [2.970044432615282e-09, 0.9999966621398926, 3.168289140376146e-06, 1.9598491007855046e-07, 2.9112087740479353e-10, 3.8404873725639277e-10, 1.3229712880757916e-09, 7.275561264563635e-10], "target_probs": 0.9999966621398926}}


{"result": {"time": "2021-02-11 11:50:57.912841", "n_pass": [23, 2, 2], "n_token": 35, "loss": [3.671578815556131e-05, 3.933914285880746e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", ":", "#NEWLINE#", "#INDENT#", "'\\n        Create an empty `WeightedMinHashLSH` index that accepts \\n        WeightedMinHash objects\\n        with `sample_size` samples and query\\n        Jaccard similarity threshold `threshold`.\\n        The initialized `WeightedMinHashLSH` will be optimized for the threshold by\\n        minizing the false positive and false negative.\\n\\n        Use `weights` to adjust the relative importance of \\n        minizing false positive and false negative when optimizing \\n        for the Jaccard similarity threshold.\\n        `weights` is a tuple in the format of \\n        (false_positive_weight, false_negative_weight).\\n        '", "#NEWLINE#", "super", "(", "WeightedMinHashLSH", ",", "self", ")", ".", "__init__", "(", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 29, "repair_targets": [4], "repair_candidates": [2, 24, 29, 4, 8, 31, 12, 33]}}
{"prediction": {"error_location": 0.9999632835388184, "repair_targets": [0.9999960660934448], "repair_candidates": [4.155963573282406e-09, 0.9999960660934448, 3.863032361550722e-06, 1.1352210549375741e-07, 1.1182760967232142e-10, 1.796469778492238e-10, 7.758747533337385e-10, 3.04495428871121e-10], "target_probs": 0.9999960660934448}}


{"result": {"time": "2021-02-11 11:50:57.968334", "n_pass": [24, 3, 3], "n_token": 30, "loss": [0.0005868143052794039, 3.4570753086882178e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", "super", "(", "WeightedMinHashLSH", ",", "self", ")", ".", "__init__", "(", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 24, "repair_targets": [4], "repair_candidates": [2, 19, 24, 4, 8, 26, 12, 28]}}
{"prediction": {"error_location": 0.999413251876831, "repair_targets": [0.999996542930603], "repair_candidates": [4.403085540616303e-08, 0.999996542930603, 3.2467096389154904e-06, 1.6540390390673565e-07, 1.7529429019447207e-09, 7.336891094666953e-10, 8.499619341684195e-10, 3.9965988851697887e-10], "target_probs": 0.999996542930603}}


{"result": {"time": "2021-02-11 11:50:58.024155", "n_pass": [44, 4, 4], "n_token": 27, "loss": [0.0038832034915685654, 1.1086525773862377e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", ",", "self", ")", ".", "__init__", "(", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 21, "repair_targets": [4], "repair_candidates": [2, 16, 21, 4, 8, 23, 12, 25]}}
{"prediction": {"error_location": 0.9961243271827698, "repair_targets": [0.9999889135360718], "repair_candidates": [1.359454699922935e-07, 0.9999889135360718, 1.0086831935041118e-05, 8.935973028201261e-07, 1.7377171701582483e-08, 1.3380426766573805e-09, 4.280650500732008e-09, 2.4562725187138312e-09], "target_probs": 0.9999889135360718}}


{"result": {"time": "2021-02-11 11:50:58.079342", "n_pass": [46, 5, 5], "n_token": 24, "loss": [0.05610376223921776, 6.55653229841846e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "0.9", ",", "sample_size", "=", "128", ",", "weights", "=", "(", ",", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [2, 16, 18, 4, 8, 20, 12, 22]}}
{"prediction": {"error_location": 0.9454410076141357, "repair_targets": [0.9999934434890747], "repair_candidates": [4.15094625338952e-09, 0.9999934434890747, 5.8582327255862765e-06, 7.377033170996583e-07, 2.120273734362854e-09, 1.2729404197386884e-09, 2.415722510917817e-09, 2.4544291044037436e-09], "target_probs": 0.9999934434890747}}


{"result": {"time": "2021-02-11 11:50:58.189995", "n_pass": [52, 7, 6], "n_token": 22, "loss": [0.03135744854807854, 8.702316335984506e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "sample_size", "=", "128", ",", "weights", "=", "(", ",", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 16, "repair_targets": [4], "repair_candidates": [2, 14, 16, 4, 6, 18, 10, 20]}}
{"prediction": {"error_location": 0.9691290855407715, "repair_targets": [0.9999912977218628], "repair_candidates": [6.234639471358605e-08, 0.9999912977218628, 7.102826202753931e-06, 1.2212426554469857e-06, 3.7865806490344767e-08, 1.4147771842942802e-08, 9.853973637063973e-08, 1.381466319116953e-08], "target_probs": 0.9999912977218628}}


{"result": {"time": "2021-02-11 11:50:58.249176", "n_pass": [54, 8, 7], "n_token": 20, "loss": [0.08094201982021332, 3.314073182991706e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "sample_size", "=", "weights", "=", "(", ",", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 14, "repair_targets": [4], "repair_candidates": [2, 12, 14, 4, 6, 16, 8, 18]}}
{"prediction": {"error_location": 0.922247052192688, "repair_targets": [0.9999668598175049], "repair_candidates": [9.862781098490814e-07, 0.9999668598175049, 1.2406480891513638e-05, 1.5179154615907464e-05, 5.068913537797926e-07, 1.3415076693945593e-07, 1.2811436818083166e-06, 2.646338543854654e-06], "target_probs": 0.9999668598175049}}


{"result": {"time": "2021-02-11 11:50:58.360119", "n_pass": [80, 10, 8], "n_token": 19, "loss": [0.1735536754131317, 0.0006400606362149119], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "sample_size", "=", "weights", "(", ",", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 13, "repair_targets": [4], "repair_candidates": [2, 11, 13, 4, 6, 15, 8, 17]}}
{"prediction": {"error_location": 0.840671956539154, "repair_targets": [0.9993601441383362], "repair_candidates": [1.4716387340740766e-05, 0.9993601441383362, 3.697992360685021e-05, 3.310319152660668e-05, 2.018742452492006e-05, 6.476609087258112e-06, 4.192052438156679e-05, 0.0004864619695581496], "target_probs": 0.9993601441383362}}


{"result": {"time": "2021-02-11 11:50:58.470063", "n_pass": [82, 12, 9], "n_token": 18, "loss": [0.08587057888507843, 0.0011284159263595939], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "threshold", "=", "sample_size", "=", "weights", "(", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 12, "repair_targets": [4], "repair_candidates": [2, 10, 12, 4, 6, 14, 8, 16]}}
{"prediction": {"error_location": 0.9177129864692688, "repair_targets": [0.9988722205162048], "repair_candidates": [2.7087149646831676e-05, 0.9988722205162048, 7.147908763727173e-05, 4.8436762881465256e-05, 2.1723371901316568e-05, 2.112081529048737e-05, 0.00021081347949802876, 0.0007271739887073636], "target_probs": 0.9988722205162048}}


{"result": {"time": "2021-02-11 11:50:58.640064", "n_pass": [90, 15, 10], "n_token": 17, "loss": [0.34213918447494507, 0.008097082376480103], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", "threshold", "=", "sample_size", "=", "weights", "(", "self", ")", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 11, "repair_targets": [3], "repair_candidates": [2, 9, 11, 3, 5, 13, 7, 15]}}
{"prediction": {"error_location": 0.7102494835853577, "repair_targets": [0.9919356107711792], "repair_candidates": [0.00015605424414388835, 0.9919356107711792, 0.0007061833166517317, 0.0001733219251036644, 0.00043267078581266105, 0.0010223991703242064, 0.003302243072539568, 0.00227144337259233], "target_probs": 0.9919356107711792}}


{"result": {"time": "2021-02-11 11:50:58.974828", "n_pass": [113, 21, 11], "n_token": 16, "loss": [0.1605355441570282, 0.00015903783787507564], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def __init__(", "self", "threshold", "=", "sample_size", "=", "weights", "(", "self", "self", ",", "sample_size", ",", "weights", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [2, 9, 10, 3, 5, 12, 7, 14]}}
{"prediction": {"error_location": 0.8516876697540283, "repair_targets": [0.9998409748077393], "repair_candidates": [1.0172547263209708e-05, 0.9998409748077393, 6.200733332661912e-05, 9.213130397256464e-06, 6.320237389445538e-06, 1.8777343484543962e-06, 3.23052991006989e-05, 3.70469679182861e-05], "target_probs": 0.9998409748077393}}




Minimal simplified tokens:

['#NEWLINE#', 'def __init__(', 'self', 'threshold', '=', 'sample_size', '=', 'weights', '(', 'self', 'self', ',', 'sample_size', ',', 'weights', ')']
