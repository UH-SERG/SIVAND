
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Perform element-wise absolute value of Tensor `a`, storing the result in\\n        Tensor out. Both Tensor's should have identical shape.\\n\\n        Arguments:\\n            a (Tensor): input to be transformed.\\n            out (Tensor, optional): where the result will be stored. If out is\\n                                    None, only the op-tree will be returned.\\n\\n        Returns:\\n            OpTreeNode: the resulting op-tree\\n        \"", "#NEWLINE#", "return", "OpTreeNode", ".", "build", "(", "'abs'", ",", "out", ",", "None", ",", "out", "=", "out", ")"], "error_location": [22], "repair_targets": [4], "repair_candidates": [6, 22, 26, 28, 2, 4], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "NervanaSystems/neon/neon/backends/backend.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1682, "results": {"model": "transformer", "prob": {"loc": [[0.00046200156793929636, 2.5172255391225917e-08, 3.139401272278519e-08, 8.39091129911651e-10, 9.584157822928319e-08, 6.450638911914552e-10, 4.1487624002911616e-08, 2.4947306442868467e-09, 4.0445982674164327e-10, 3.55306395416477e-10, 7.409841629169023e-10, 1.1713929826129288e-09, 5.728230112467259e-10, 4.789661112170052e-09, 6.736630697723456e-10, 7.168120957912194e-11, 1.197815596709617e-10, 3.8944181213196316e-10, 4.5007445687028635e-11, 1.0730173416462208e-09, 4.375969808734226e-08, 3.0532941508454314e-08, 0.9987103939056396, 1.859206344434483e-09, 8.659397643384636e-10, 2.0862500615947965e-10, 2.6306506972773036e-10, 3.0745453405423007e-10, 0.0008273355197161436, 2.864650738843011e-09]], "pointer": [[0.0, 0.0, 0.0002911772462539375, 0.0, 0.9997046589851379, 0.0, 4.082341092725983e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.078014566502361e-08, 0.0, 0.0, 0.0, 7.323238548906374e-08, 0.0, 6.726179613281147e-09, 0.0]], "target": [0.9997046589851379]}, "loss": [0.0012904420727863908, 0.0002953846415039152], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:25:59.766110", "n_pass": [1, 1, 1], "n_token": 30, "loss": [0.0012904420727863908, 0.0002953846415039152], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Perform element-wise absolute value of Tensor `a`, storing the result in\\n        Tensor out. Both Tensor's should have identical shape.\\n\\n        Arguments:\\n            a (Tensor): input to be transformed.\\n            out (Tensor, optional): where the result will be stored. If out is\\n                                    None, only the op-tree will be returned.\\n\\n        Returns:\\n            OpTreeNode: the resulting op-tree\\n        \"", "#NEWLINE#", "return", "OpTreeNode", ".", "build", "(", "'abs'", ",", "out", ",", "None", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 22, "repair_targets": [4], "repair_candidates": [6, 22, 26, 28, 2, 4]}}
{"prediction": {"error_location": 0.9987103939056396, "repair_targets": [0.9997046589851379], "repair_candidates": [0.0002911772462539375, 0.9997046589851379, 4.082341092725983e-06, 1.078014566502361e-08, 7.323238548906374e-08, 6.726179613281147e-09], "target_probs": 0.9997046589851379}}


{"result": {"time": "2021-02-11 11:25:59.823942", "n_pass": [9, 2, 2], "n_token": 23, "loss": [0.015424954704940319, 0.0003611501306295395], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "#NEWLINE#", "return", "OpTreeNode", ".", "build", "(", "'abs'", ",", "out", ",", "None", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [6, 15, 19, 21, 2, 4]}}
{"prediction": {"error_location": 0.9846932888031006, "repair_targets": [0.9996389150619507], "repair_candidates": [0.00035813788417726755, 0.9996389150619507, 2.589551741039031e-06, 1.9275461227152846e-07, 4.498462047308749e-08, 1.7460479284636676e-08], "target_probs": 0.9996389150619507}}


{"result": {"time": "2021-02-11 11:25:59.932357", "n_pass": [19, 4, 3], "n_token": 19, "loss": [0.28440147638320923, 0.0012991519179195166], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "build", "(", "'abs'", ",", "out", ",", "None", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 11, "repair_targets": [4], "repair_candidates": [6, 11, 15, 17, 2, 4]}}
{"prediction": {"error_location": 0.7524644732475281, "repair_targets": [0.9987016916275024], "repair_candidates": [0.0012457385892048478, 0.9987016916275024, 4.7905708925100043e-05, 3.7285078633431112e-06, 1.5601474956383754e-07, 6.595847708013025e-07], "target_probs": 0.9987016916275024}}


{"result": {"time": "2021-02-11 11:26:00.041462", "n_pass": [35, 6, 4], "n_token": 17, "loss": [0.06934814900159836, 0.0010436256416141987], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "build", "(", "out", ",", "None", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 9, "repair_targets": [4], "repair_candidates": [6, 9, 13, 15, 2, 4]}}
{"prediction": {"error_location": 0.9330018758773804, "repair_targets": [0.9989569187164307], "repair_candidates": [0.0010391693795099854, 0.9989569187164307, 7.984934882188099e-07, 2.3784245968272444e-06, 5.1339981155251735e-08, 6.787267921026796e-07], "target_probs": 0.9989569187164307}}


{"result": {"time": "2021-02-11 11:26:00.095983", "n_pass": [37, 7, 5], "n_token": 15, "loss": [0.03104061633348465, 0.005960310343652964], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def absolute(", "self", ",", "a", ",", "out", "build", "(", "out", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 9, "repair_targets": [4], "repair_candidates": [6, 9, 11, 13, 2, 4]}}
{"prediction": {"error_location": 0.9694361686706543, "repair_targets": [0.9940574169158936], "repair_candidates": [0.005940691567957401, 0.9940574169158936, 6.636066132159613e-07, 7.91204683991964e-07, 7.151029279839349e-08, 3.1828992064220074e-07], "target_probs": 0.9940574169158936}}


{"result": {"time": "2021-02-11 11:26:00.150198", "n_pass": [40, 8, 6], "n_token": 14, "loss": [0.1179700419306755, 0.06651107221841812], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def absolute(", "self", ",", "a", ",", "out", "build", "(", "out", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 8, "repair_targets": [3], "repair_candidates": [5, 8, 10, 12, 1, 3]}}
{"prediction": {"error_location": 0.8887225985527039, "repair_targets": [0.9356525540351868], "repair_candidates": [0.01676226034760475, 0.9356525540351868, 0.04757854714989662, 3.1973852401279146e-06, 3.0620954021287616e-06, 4.031616072097677e-07], "target_probs": 0.9356525540351868}}


{"result": {"time": "2021-02-11 11:26:00.261648", "n_pass": [62, 10, 7], "n_token": 13, "loss": [0.0999574363231659, 0.00038166175363585353], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "a", ",", "out", "build", "(", "out", ",", "out", "=", "out", ")"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [4, 7, 9, 11, 0, 2]}}
{"prediction": {"error_location": 0.9048758149147034, "repair_targets": [0.999618411064148], "repair_candidates": [0.00010015267616836354, 0.999618411064148, 0.00027442711871117353, 1.1830594530692906e-06, 4.059224920638371e-06, 1.7424758880224545e-06], "target_probs": 0.999618411064148}}


{"result": {"time": "2021-02-11 11:26:00.584785", "n_pass": [72, 16, 8], "n_token": 12, "loss": [0.020407821983098984, 0.0016749214846640825], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "a", ",", "out", "build", "(", "out", ",", "out", "out", ")"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [4, 7, 9, 10, 0, 2]}}
{"prediction": {"error_location": 0.9797990322113037, "repair_targets": [0.9983264803886414], "repair_candidates": [0.0007105321856215596, 0.9983264803886414, 0.000885786663275212, 8.333269761351403e-06, 3.543134516803548e-05, 3.3529027859913185e-05], "target_probs": 0.9983264803886414}}


{"result": {"time": "2021-02-11 11:26:00.639127", "n_pass": [74, 17, 9], "n_token": 11, "loss": [0.327361136674881, 0.20929381251335144], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "a", ",", "out", "build", "(", "out", ",", "out", "out"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [4, 7, 9, 10, 0, 2]}}
{"prediction": {"error_location": 0.7208232879638672, "repair_targets": [0.8111568689346313], "repair_candidates": [0.05782110616564751, 0.8111568689346313, 0.0925465077161789, 0.011166736483573914, 0.02327810227870941, 0.004030745476484299], "target_probs": 0.8111568689346313}}




Minimal simplified tokens:

['self', ',', 'a', ',', 'out', 'build', '(', 'out', ',', 'out', 'out']
