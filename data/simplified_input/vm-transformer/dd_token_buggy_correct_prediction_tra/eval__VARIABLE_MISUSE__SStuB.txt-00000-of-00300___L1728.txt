
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "_save_macros", "(", ")", "#NEWLINE#", "self", ".", "evaluate", "=", "False"], "error_location": [15], "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 28, 4], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Calysto/metakernel/metakernel/magics/macro_magic.py", "license": "bsd-3-clause", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1728, "results": {"model": "transformer", "prob": {"loc": [[0.0005239707534201443, 3.385950719803077e-08, 5.6558255856486994e-09, 3.280727356447244e-10, 1.613529860833296e-07, 2.7542682023984355e-10, 7.16287085200662e-10, 1.0149509011014857e-09, 8.660464012599789e-10, 4.667320974149902e-10, 7.309203797767339e-10, 1.0782732928760197e-08, 3.6639807854399464e-10, 1.1689808843140526e-10, 1.1523121346002085e-09, 0.9993688464164734, 1.3994712333431636e-10, 2.842993895857404e-10, 0.00010666211164789274, 1.3969944090419517e-09, 2.3935570192534783e-10, 6.26191876129667e-10, 8.994351374802534e-10, 2.9048174976509245e-10, 6.78435640999453e-11, 7.030122262108307e-09, 2.7885065367883044e-09, 9.427041369747258e-10, 2.91435320320943e-09, 3.4361205547561724e-10, 6.942170449608653e-11, 1.0201527622655249e-08, 2.3505911883603403e-07]], "pointer": [[0.0, 0.0, 4.829271347261965e-05, 0.0, 0.9999510049819946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.774776840577033e-08, 0.0, 0.0, 0.0, 3.741813543456374e-07, 0.0, 0.0, 6.586810030739798e-08, 0.0, 0.0, 0.0, 6.093070936685763e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 7.25809243817821e-08, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999510049819946]}, "loss": [0.0006312523037195206, 4.8996218538377434e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:27:15.985793", "n_pass": [1, 1, 1], "n_token": 33, "loss": [0.0006312523037195206, 4.8996218538377434e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "_save_macros", "(", ")", "#NEWLINE#", "self", ".", "evaluate", "=", "False"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 28, 4]}}
{"prediction": {"error_location": 0.9993688464164734, "repair_targets": [0.9999510049819946], "repair_candidates": [4.829271347261965e-05, 0.9999510049819946, 4.774776840577033e-08, 3.741813543456374e-07, 6.586810030739798e-08, 6.093070936685763e-08, 7.25809243817821e-08], "target_probs": 0.9999510049819946}}


{"result": {"time": "2021-02-11 11:27:16.041813", "n_pass": [26, 2, 2], "n_token": 29, "loss": [0.0005550036439672112, 6.008328637108207e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", ".", "evaluate", "=", "False"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 24, 4]}}
{"prediction": {"error_location": 0.9994451403617859, "repair_targets": [0.9999399185180664], "repair_candidates": [5.94546836509835e-05, 0.9999399185180664, 5.948419712353825e-08, 2.7451886808194104e-07, 1.1119536225123738e-07, 4.9323443107596177e-08, 7.768759502368994e-08], "target_probs": 0.9999399185180664}}


{"result": {"time": "2021-02-11 11:27:16.097529", "n_pass": [48, 3, 3], "n_token": 26, "loss": [0.00033456450910307467, 3.111410842393525e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 24, 4]}}
{"prediction": {"error_location": 0.9996654987335205, "repair_targets": [0.9999688863754272], "repair_candidates": [3.012046727235429e-05, 0.9999688863754272, 5.832937972627406e-07, 6.755400505653597e-08, 8.522899719309862e-08, 1.8195072470916784e-07, 8.031238962757925e-08], "target_probs": 0.9999688863754272}}


{"result": {"time": "2021-02-11 11:27:16.152386", "n_pass": [49, 4, 4], "n_token": 24, "loss": [0.00012563870404846966, 9.059946933120955e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [0, 9, 13, 16, 20, 22, 2]}}
{"prediction": {"error_location": 0.9998743534088135, "repair_targets": [0.9999909400939941], "repair_candidates": [8.930560397857334e-06, 0.9999909400939941, 8.510513538340092e-08, 4.277876275438075e-09, 1.97847338512247e-08, 5.189209062450573e-09, 3.3826199619113595e-09], "target_probs": 0.9999909400939941}}


{"result": {"time": "2021-02-11 11:27:16.209526", "n_pass": [52, 5, 5], "n_token": 22, "loss": [0.0003413571394048631, 0.00015558023005723953], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [0, 7, 11, 14, 18, 20, 2]}}
{"prediction": {"error_location": 0.9996587038040161, "repair_targets": [0.9998444318771362], "repair_candidates": [0.000154686946189031, 0.9998444318771362, 7.184218588918156e-07, 7.404494795082428e-08, 6.779742278695267e-08, 1.5597764857488983e-08, 2.150212097262738e-08], "target_probs": 0.9998444318771362}}


{"result": {"time": "2021-02-11 11:27:16.263478", "n_pass": [53, 6, 6], "n_token": 20, "loss": [0.01545254047960043, 0.0004074807511642575], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [0, 5, 9, 12, 16, 18, 2]}}
{"prediction": {"error_location": 0.9846663475036621, "repair_targets": [0.9995926022529602], "repair_candidates": [0.0003550975816324353, 0.9995926022529602, 4.360383172752336e-05, 6.400475740520051e-06, 1.2674036042881198e-06, 4.3242928882136766e-07, 6.817817848059349e-07], "target_probs": 0.9995926022529602}}


{"result": {"time": "2021-02-11 11:27:16.372206", "n_pass": [57, 8, 7], "n_token": 18, "loss": [0.47764867544174194, 0.0009284752304665744], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#NEWLINE#", "self", ".", "learned", "[", "self", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [0, 5, 9, 10, 14, 16, 2]}}
{"prediction": {"error_location": 0.6202400326728821, "repair_targets": [0.9990719556808472], "repair_candidates": [0.0008960453560575843, 0.9990719556808472, 2.7922389563173056e-05, 1.7720162759360392e-06, 1.4809138519922271e-06, 3.171640230448247e-07, 4.6886989935046586e-07], "target_probs": 0.9990719556808472}}




Minimal simplified tokens:

['self', ',', 'name', ')', '#NEWLINE#', 'self', '.', 'learned', '[', 'self', 'self', '.', 'code', '#NEWLINE#', 'self', '.', 'self', '.']
