
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'fixtures'", ",", "'absolute.json'", ")", "#NEWLINE#", "management", ".", "call_command", "(", "'loaddata'", ",", "self", ",", "verbosity", "=", "0", ",", "commit", "=", "False", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"], "error_location": [37], "repair_targets": [9], "repair_candidates": [9, 2, 37, 48], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/fixtures_regress/tests.py", "license": "apache-2.0", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1090, "results": {"model": "transformer", "prob": {"loc": [[5.9977373894071206e-05, 1.7452409517559886e-09, 1.4659197189459405e-09, 5.649141918140366e-11, 6.611397540545738e-11, 8.116352728793075e-11, 7.143950708776714e-11, 5.089207874564572e-11, 6.046720069097233e-11, 1.5469795444644774e-09, 1.1098458263525401e-10, 1.1618142004010679e-09, 7.864148915404101e-11, 2.455831545067344e-11, 1.7516231520797731e-10, 3.9776407861902285e-11, 1.1519283443783834e-10, 1.3395380804581691e-08, 1.9870194378768247e-10, 2.6177665937709982e-11, 1.9015973518055063e-10, 1.3762729671185081e-11, 2.2493988616201221e-10, 1.4935470638022252e-09, 4.855426616323655e-10, 1.9171186860234002e-10, 7.599639251232304e-10, 1.8796868228587726e-10, 6.211180458848276e-10, 1.313920916512501e-10, 1.0566716945881183e-10, 7.012524588789759e-11, 8.038642668184437e-11, 1.4618221563789113e-11, 2.510462948634995e-10, 4.847154344567173e-10, 3.5318153956964693e-10, 0.9999343156814575, 1.0973887076826117e-10, 1.2945223885896251e-11, 3.699532069578737e-10, 3.2399392058124477e-09, 1.3543782761971102e-10, 2.4890823777101723e-11, 4.01928296200893e-10, 1.951370176556111e-09, 3.1891592144894787e-10, 2.3546220528913864e-10, 7.121573886159638e-10, 1.526595516665452e-10, 2.3020555947605992e-11, 3.334084397454973e-11, 5.532759132620413e-06, 1.0854361853773753e-09, 2.503267038100887e-10, 1.6997660223783129e-10, 1.1859578563644391e-07, 3.0314845078649455e-10]], "pointer": [[0.0, 0.0, 2.903624078953726e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999995231628418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4399557219112467e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.2783196480277184e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999995231628418]}, "loss": [6.568216485902667e-05, 4.768372718899627e-07], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:16:19.729882", "n_pass": [1, 1, 1], "n_token": 58, "loss": [6.568216485902667e-05, 4.768372718899627e-07], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'fixtures'", ",", "'absolute.json'", ")", "#NEWLINE#", "management", ".", "call_command", "(", "'loaddata'", ",", "self", ",", "verbosity", "=", "0", ",", "commit", "=", "False", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"]}}
{"position": {"error_location": 37, "repair_targets": [9], "repair_candidates": [9, 2, 37, 48]}}
{"prediction": {"error_location": 0.9999343156814575, "repair_targets": [0.9999995231628418], "repair_candidates": [2.903624078953726e-07, 0.9999995231628418, 2.4399557219112467e-07, 5.2783196480277184e-08], "target_probs": 0.9999995231628418}}


{"result": {"time": "2021-02-11 11:16:19.785710", "n_pass": [9, 2, 2], "n_token": 44, "loss": [0.00045015214709565043, 5.996406980557367e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'absolute.json'", ")", "#NEWLINE#", "management", ".", "call_command", "(", "'loaddata'", ",", "self", ",", "verbosity", "=", "0", ",", "commit", "=", "False", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"]}}
{"position": {"error_location": 23, "repair_targets": [9], "repair_candidates": [9, 2, 23, 34]}}
{"prediction": {"error_location": 0.9995500445365906, "repair_targets": [0.999940037727356], "repair_candidates": [2.985142418765463e-05, 0.999940037727356, 2.8557920813909732e-05, 1.5451948911504587e-06], "target_probs": 0.999940037727356}}


{"result": {"time": "2021-02-11 11:16:19.843342", "n_pass": [19, 3, 3], "n_token": 37, "loss": [0.693394124507904, 0.08926669508218765], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ",", "verbosity", "=", "0", ",", "commit", "=", "False", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"]}}
{"position": {"error_location": 16, "repair_targets": [9], "repair_candidates": [9, 2, 16, 27]}}
{"prediction": {"error_location": 0.4998764097690582, "repair_targets": [0.9146016240119934], "repair_candidates": [0.0807814747095108, 0.9146016240119934, 0.004000009503215551, 0.0006168960826471448], "target_probs": 0.9146016240119934}}


{"result": {"time": "2021-02-11 11:16:19.953304", "n_pass": [36, 5, 4], "n_token": 33, "loss": [0.5892447233200073, 0.04227898269891739], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ",", "commit", "=", "False", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"]}}
{"position": {"error_location": 16, "repair_targets": [9], "repair_candidates": [9, 2, 16, 23]}}
{"prediction": {"error_location": 0.554746150970459, "repair_targets": [0.9586023092269897], "repair_candidates": [0.03951132670044899, 0.9586023092269897, 0.0014374968595802784, 0.0004487767000682652], "target_probs": 0.9586023092269897}}


{"result": {"time": "2021-02-11 11:16:20.008139", "n_pass": [37, 6, 5], "n_token": 29, "loss": [0.07538771629333496, 0.0011966233141720295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", ".", "load_count", ",", "1", ")"]}}
{"position": {"error_location": 16, "repair_targets": [9], "repair_candidates": [9, 2, 16, 19]}}
{"prediction": {"error_location": 0.9273839592933655, "repair_targets": [0.9988040924072266], "repair_candidates": [0.0011449487647041678, 0.9988040924072266, 4.2669598769862205e-05, 8.327331670443527e-06], "target_probs": 0.9988040924072266}}


{"result": {"time": "2021-02-11 11:16:20.117403", "n_pass": [40, 8, 6], "n_token": 25, "loss": [0.03324687480926514, 0.0019243385177105665], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", "."]}}
{"position": {"error_location": 16, "repair_targets": [9], "repair_candidates": [9, 2, 16, 19]}}
{"prediction": {"error_location": 0.9672998189926147, "repair_targets": [0.9980775117874146], "repair_candidates": [0.0018836002564057708, 0.9980775117874146, 2.561217115726322e-05, 1.3249142284621485e-05], "target_probs": 0.9980775117874146}}


{"result": {"time": "2021-02-11 11:16:20.174981", "n_pass": [42, 9, 7], "n_token": 22, "loss": [0.013329911977052689, 0.00019009728566743433], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", "#INDENT#", "\"\\n        Regression test for ticket #6436 --\\n        os.path.join will throw away the initial parts of a path if it\\n        encounters an absolute path.\\n        This means that if a fixture is specified as an absolute path,\\n        we need to make sure we don't discover the absolute path in every\\n        fixture directory.\\n        \"", "#NEWLINE#", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", "."]}}
{"position": {"error_location": 13, "repair_targets": [6], "repair_candidates": [6, 2, 13, 16]}}
{"prediction": {"error_location": 0.9867585301399231, "repair_targets": [0.9998099207878113], "repair_candidates": [0.00017519718676339835, 0.9998099207878113, 1.3075486094749067e-05, 1.8182440726377536e-06], "target_probs": 0.9998099207878113}}


{"result": {"time": "2021-02-11 11:16:20.229751", "n_pass": [43, 10, 8], "n_token": 19, "loss": [0.0020189157221466303, 3.337865791763761e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Absolute", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 2, 10, 13]}}
{"prediction": {"error_location": 0.9979830980300903, "repair_targets": [0.9999966621398926], "repair_candidates": [3.0296625936898636e-06, 0.9999966621398926, 1.9955918162395392e-07, 1.4791122282531433e-07], "target_probs": 0.9999966621398926}}


{"result": {"time": "2021-02-11 11:16:20.503987", "n_pass": [65, 15, 9], "n_token": 17, "loss": [0.00472263153642416, 1.1920935776288388e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "Absolute", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 2, 10, 13]}}
{"prediction": {"error_location": 0.9952884912490845, "repair_targets": [0.9999988079071045], "repair_candidates": [9.679312142907293e-07, 0.9999988079071045, 2.2903263641183003e-07, 2.306057567125208e-08], "target_probs": 0.9999988079071045}}


{"result": {"time": "2021-02-11 11:16:20.775995", "n_pass": [90, 20, 10], "n_token": 16, "loss": [0.05770638957619667, 7.629423635080457e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_absolute_path(", "self", "load_absolute_path", "=", "os", ".", "path", "'loaddata'", ",", "self", ")", "#NEWLINE#", "self", ".", "."]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 2, 10, 13]}}
{"prediction": {"error_location": 0.9439269304275513, "repair_targets": [0.9999923706054688], "repair_candidates": [5.491508545674151e-06, 0.9999923706054688, 1.835662601479271e-06, 2.562948964168754e-07], "target_probs": 0.9999923706054688}}




Minimal simplified tokens:

['#NEWLINE#', 'def test_absolute_path(', 'self', 'load_absolute_path', '=', 'os', '.', 'path', "'loaddata'", ',', 'self', ')', '#NEWLINE#', 'self', '.', '.']
