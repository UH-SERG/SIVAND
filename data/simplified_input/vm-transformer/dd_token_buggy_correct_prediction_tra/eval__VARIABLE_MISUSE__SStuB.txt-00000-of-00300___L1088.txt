
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", ">", "SOURCE_REFERENCES_MAX_SIZE", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "validation", ".", "ValidationError", "(", "(", "'Total source reference(s) size exceeds the limit: %d > %d'", "%", "(", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", ")", ":", "#NEWLINE#", "#INDENT#", "ValidateSourceReference", "(", "ref", ".", "strip", "(", ")", ")"], "error_location": [13], "repair_targets": [2, 32, 44], "repair_candidates": [13, 42, 54, 2, 32, 44], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "GoogleCloudPlatform/python-compat-runtime/appengine-compat/exported_appengine_sdk/google/appengine/api/appinfo.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1088, "results": {"model": "transformer", "prob": {"loc": [[2.2566022380487993e-05, 7.754081265964885e-10, 2.168738788554947e-08, 2.7181357165062536e-10, 3.690904526454375e-10, 2.0816952328583938e-10, 1.878790595322144e-10, 5.836735539332949e-09, 4.088577254535153e-10, 7.557171000094343e-10, 1.3685279298680797e-10, 1.995549558930776e-10, 1.5565037037035268e-09, 0.9999685287475586, 6.292106835559252e-10, 1.0367363634244953e-09, 8.749704072386066e-09, 7.869463414245104e-10, 1.4967322936598748e-09, 8.088399394701185e-10, 2.663280429526793e-10, 1.636210784916603e-11, 4.482080817602707e-10, 5.130854421886433e-11, 5.394737781494463e-11, 2.9069097129408306e-10, 5.619044118887473e-10, 3.757750111077485e-09, 2.2008565803144364e-10, 2.041926072671174e-10, 1.5815841691857457e-10, 1.1279065459390836e-09, 8.727815838938113e-06, 3.848900642644537e-10, 4.4153625200493707e-10, 1.7748998937250349e-09, 4.4235051732677277e-10, 2.7349070230719974e-10, 1.5046774937133023e-10, 2.500188944765114e-10, 2.5329771613513685e-10, 4.2828965374219763e-10, 1.1067604610559556e-08, 8.206074708638766e-11, 1.601959898067662e-09, 2.2328475179911322e-10, 4.4324554443475606e-11, 4.1028261343889483e-10, 3.5909927809107955e-10, 1.82689430250349e-09, 1.4976174744774085e-09, 6.8073618963993e-10, 4.3909401115094226e-10, 1.701631058281805e-10, 9.716759308275869e-08, 1.984693659418113e-10, 3.191688927040026e-11, 2.0196322392251886e-09, 7.55181028821994e-10, 5.05883057666523e-10]], "pointer": [[0.0, 0.0, 0.9807327389717102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.202209838576891e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019229333847761154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5992871027492583e-08, 0.0, 3.785614171647467e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8505900811760512e-08, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999999403953552]}, "loss": [3.1470757676288486e-05, 5.960464477539063e-08], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:16:17.795753", "n_pass": [1, 1, 1], "n_token": 60, "loss": [3.1470757676288486e-05, 5.960464477539063e-08], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", ">", "SOURCE_REFERENCES_MAX_SIZE", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "validation", ".", "ValidationError", "(", "(", "'Total source reference(s) size exceeds the limit: %d > %d'", "%", "(", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", ")", ":", "#NEWLINE#", "#INDENT#", "ValidateSourceReference", "(", "ref", ".", "strip", "(", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2, 32, 44], "repair_candidates": [13, 42, 54, 2, 32, 44]}}
{"prediction": {"error_location": 0.9999685287475586, "repair_targets": [0.9807327389717102, 0.019229333847761154, 3.785614171647467e-05], "repair_candidates": [0.9807327389717102, 9.202209838576891e-08, 0.019229333847761154, 1.5992871027492583e-08, 3.785614171647467e-05, 1.8505900811760512e-08], "target_probs": 0.9999999403953552}}


{"result": {"time": "2021-02-11 11:16:17.853603", "n_pass": [9, 2, 2], "n_token": 45, "loss": [0.00010549465514486656, 8.344653679159819e-07], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", ")", ":", "#NEWLINE#", "#INDENT#", "ValidateSourceReference", "(", "ref", ".", "strip", "(", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2, 17, 29], "repair_candidates": [13, 27, 39, 2, 17, 29]}}
{"prediction": {"error_location": 0.9998942613601685, "repair_targets": [0.9433884024620056, 0.0041090352460742, 0.052501752972602844], "repair_candidates": [0.9433884024620056, 5.571221777245228e-07, 0.0041090352460742, 6.09111410199148e-08, 0.052501752972602844, 1.1446965686445765e-07], "target_probs": 0.9999991655349731}}


{"result": {"time": "2021-02-11 11:16:17.910154", "n_pass": [38, 3, 3], "n_token": 41, "loss": [0.00015400654228869826, 6.556513199029723e-07], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", ")", ":", "#NEWLINE#", "#INDENT#", "ValidateSourceReference", "(", "ref", ".", "strip", "(", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2, 17, 25], "repair_candidates": [13, 23, 35, 2, 17, 25]}}
{"prediction": {"error_location": 0.9998459815979004, "repair_targets": [0.9860317707061768, 0.00027110223891213536, 0.01369644608348608], "repair_candidates": [0.9860317707061768, 4.869182248512516e-07, 0.00027110223891213536, 9.282349822115066e-08, 0.01369644608348608, 1.5353566595877055e-07], "target_probs": 0.9999993443489075}}


{"result": {"time": "2021-02-11 11:16:17.965062", "n_pass": [40, 4, 4], "n_token": 37, "loss": [0.00034481301554478705, 1.23978434203309e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", ".", "strip", "(", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2, 17, 25], "repair_candidates": [13, 23, 31, 2, 17, 25]}}
{"prediction": {"error_location": 0.9996551275253296, "repair_targets": [0.9977909326553345, 0.000315501558361575, 0.0018811854533851147], "repair_candidates": [0.9977909326553345, 2.150887212337693e-06, 0.000315501558361575, 4.763483616443409e-07, 0.0018811854533851147, 9.798079190659337e-06], "target_probs": 0.9999876022338867}}


{"result": {"time": "2021-02-11 11:16:18.019956", "n_pass": [42, 5, 5], "n_token": 33, "loss": [0.00025912740966305137, 2.98023678624304e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", ")", ":", "#NEWLINE#", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 13, "repair_targets": [2, 17, 25], "repair_candidates": [13, 23, 31, 2, 17, 25]}}
{"prediction": {"error_location": 0.9997408986091614, "repair_targets": [0.9914541244506836, 0.0006669412832707167, 0.007875928655266762], "repair_candidates": [0.9914541244506836, 2.2387698663806077e-06, 0.0006669412832707167, 4.556442831926688e-07, 0.007875928655266762, 3.3856829873002425e-07], "target_probs": 0.9999970197677612}}


{"result": {"time": "2021-02-11 11:16:18.075145", "n_pass": [44, 6, 6], "n_token": 30, "loss": [0.001379848807118833, 7.438936154358089e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", "#INDENT#", "'Determines if source_refs contains a valid list of source references.\\n\\n  Args:\\n    source_refs: A multi-line string containing one source reference per line.\\n\\n  Raises:\\n    ValidationError: when the reference is malformed.\\n  '", "#NEWLINE#", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 10, "repair_targets": [2, 14, 22], "repair_candidates": [10, 20, 28, 2, 14, 22]}}
{"prediction": {"error_location": 0.9986209869384766, "repair_targets": [0.9876397252082825, 0.008127333596348763, 0.004158562049269676], "repair_candidates": [0.9876397252082825, 5.743620204157196e-05, 0.008127333596348763, 5.752338438469451e-06, 0.004158562049269676, 1.119184435083298e-05], "target_probs": 0.9999256134033203}}


{"result": {"time": "2021-02-11 11:16:18.130940", "n_pass": [45, 7, 7], "n_token": 27, "loss": [0.3878104090690613, 0.2456793636083603], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", "if", "(", "len", "(", "ref", ")", "len", "(", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 7, "repair_targets": [2, 11, 19], "repair_candidates": [7, 17, 25, 2, 11, 19]}}
{"prediction": {"error_location": 0.6785409450531006, "repair_targets": [0.6762804985046387, 0.09708523750305176, 0.008807252161204815], "repair_candidates": [0.6762804985046387, 0.20278798043727875, 0.09708523750305176, 0.01466747373342514, 0.008807252161204815, 0.0003714416816364974], "target_probs": 0.7821729779243469}}


{"result": {"time": "2021-02-11 11:16:18.352491", "n_pass": [70, 11, 8], "n_token": 25, "loss": [0.04757139831781387, 0.00640358030796051], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", "if", "(", "len", "(", "ref", ")", "source_refs", ")", ",", "SOURCE_REFERENCES_MAX_SIZE", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 7, "repair_targets": [2, 9, 17], "repair_candidates": [7, 15, 23, 2, 9, 17]}}
{"prediction": {"error_location": 0.9535424113273621, "repair_targets": [0.6897201538085938, 0.29956963658332825, 0.004327123053371906], "repair_candidates": [0.6897201538085938, 0.0036807176657021046, 0.29956963658332825, 0.0025416312273591757, 0.004327123053371906, 0.00016075717576313764], "target_probs": 0.9936168789863586}}


{"result": {"time": "2021-02-11 11:16:18.406889", "n_pass": [72, 12, 9], "n_token": 23, "loss": [0.062499918043613434, 0.007994394749403], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", "if", "(", "len", "(", "ref", ")", "source_refs", ")", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "splitlines", "(", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 7, "repair_targets": [2, 9, 15], "repair_candidates": [7, 13, 21, 2, 9, 15]}}
{"prediction": {"error_location": 0.9394129514694214, "repair_targets": [0.8491191864013672, 0.13866636157035828, 0.004251929000020027], "repair_candidates": [0.8491191864013672, 0.004060241859406233, 0.13866636157035828, 0.003030711319297552, 0.004251929000020027, 0.0008715048898011446], "target_probs": 0.9920374751091003}}


{"result": {"time": "2021-02-11 11:16:18.518139", "n_pass": [76, 14, 10], "n_token": 21, "loss": [0.4705583453178406, 0.07902821153402328], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def ValidateCombinedSourceReferencesString(", "source_refs", "if", "(", "len", "(", "ref", ")", "source_refs", ")", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 7, "repair_targets": [2, 9, 15], "repair_candidates": [7, 13, 19, 2, 9, 15]}}
{"prediction": {"error_location": 0.6246533989906311, "repair_targets": [0.6811591982841492, 0.1859920620918274, 0.05686257779598236], "repair_candidates": [0.6811591982841492, 0.03999954089522362, 0.1859920620918274, 0.012234310619533062, 0.05686257779598236, 0.02375234104692936], "target_probs": 0.9240138530731201}}


{"result": {"time": "2021-02-11 11:16:18.626798", "n_pass": [79, 16, 11], "n_token": 20, "loss": [0.2524228096008301, 0.06380718946456909], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def ValidateCombinedSourceReferencesString(", "source_refs", "if", "(", "len", "(", "ref", ")", "source_refs", ")", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 6, "repair_targets": [1, 8, 14], "repair_candidates": [6, 12, 18, 1, 8, 14]}}
{"prediction": {"error_location": 0.7769162654876709, "repair_targets": [0.8750055432319641, 0.054595064371824265, 0.008585257455706596], "repair_candidates": [0.8750055432319641, 0.029217969626188278, 0.054595064371824265, 0.028576858341693878, 0.008585257455706596, 0.004019372630864382], "target_probs": 0.9381858706474304}}


{"result": {"time": "2021-02-11 11:16:18.955827", "n_pass": [112, 22, 12], "n_token": 19, "loss": [0.9351050853729248, 0.42733705043792725], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def ValidateCombinedSourceReferencesString(", "source_refs", "(", "len", "(", "ref", ")", "source_refs", ")", "#UNINDENT#", "for", "ref", "in", "source_refs", ".", "ValidateSourceReference", "(", "ref", "."]}}
{"position": {"error_location": 5, "repair_targets": [1, 7, 13], "repair_candidates": [5, 11, 17, 1, 7, 13]}}
{"prediction": {"error_location": 0.39254462718963623, "repair_targets": [0.625726044178009, 0.021785221993923187, 0.004732432775199413], "repair_candidates": [0.625726044178009, 0.18194478750228882, 0.021785221993923187, 0.16440936923027039, 0.004732432775199413, 0.0014021432725712657], "target_probs": 0.6522436738014221}}




Minimal simplified tokens:

['def ValidateCombinedSourceReferencesString(', 'source_refs', '(', 'len', '(', 'ref', ')', 'source_refs', ')', '#UNINDENT#', 'for', 'ref', 'in', 'source_refs', '.', 'ValidateSourceReference', '(', 'ref', '.']
