
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.'", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.  '", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", ".", "security_hash", "(", "None", ",", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"], "error_location": [70], "repair_targets": [30], "repair_candidates": [9, 59, 51, 77, 62, 70, 79, 30, 2, 73], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "AppScale/appscale/AppServer/lib/django-1.2/django/contrib/formtools/tests.py", "license": "apache-2.0", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 145, "results": {"model": "transformer", "prob": {"loc": [[7.3562579927966e-05, 6.313920497547088e-10, 2.0763597785578014e-10, 7.335299902211379e-12, 1.3392407842427456e-11, 1.2955880292209176e-11, 8.855083333259017e-12, 4.8690027704134664e-12, 6.939651544385361e-12, 2.3228559076216015e-09, 9.798432031027371e-12, 7.433779286580844e-12, 3.642962320693499e-11, 1.317075355028452e-11, 4.560180358326171e-12, 4.030513336278352e-12, 3.4015647937257754e-11, 5.605149590998115e-12, 2.1273066641569471e-10, 5.634111233110417e-12, 7.761020125174323e-12, 2.0455989332979208e-11, 1.3246181061743467e-11, 2.7910364991390324e-11, 9.845115174489383e-12, 1.2236002142063107e-11, 8.398197068326674e-12, 1.1308728259384893e-11, 1.1132170706085187e-11, 9.631114482322456e-12, 6.791355033897162e-09, 2.3617925323793365e-11, 1.0443181042152361e-10, 1.7932348661542363e-10, 2.2777181529765045e-10, 3.162984457683038e-11, 3.159680156405997e-11, 7.404677981881491e-10, 1.44542183777574e-10, 6.258121798552452e-10, 7.243679961410621e-11, 1.1651565823278531e-10, 7.193045048481395e-10, 2.3921967184925563e-10, 1.531254678610594e-09, 5.282939641304552e-10, 8.054845124227938e-10, 5.685111825748379e-10, 6.022051191045819e-10, 5.977409678337153e-10, 3.696212780290864e-10, 3.972242534899806e-09, 7.489858039333441e-11, 4.801149755540024e-11, 1.7343175506834285e-10, 7.820611519493426e-11, 1.282742356778499e-08, 4.362537886493101e-09, 1.4167815809429385e-09, 1.2070960110577289e-05, 3.0719766730413767e-09, 5.903715294408585e-10, 2.2124574172721623e-07, 7.674849644700998e-11, 7.265223145314081e-11, 1.3281048483193558e-10, 7.179252331512842e-11, 5.637376787603898e-09, 1.464040333409855e-09, 4.866074210241322e-10, 0.9995899796485901, 1.060966647870032e-09, 3.853029700850996e-11, 2.6583893072973375e-11, 1.871534524577889e-11, 5.041662616903086e-13, 1.7061687132557957e-11, 4.304451522330055e-06, 1.2653469938506134e-10, 0.00031996879260987043, 9.752835206100485e-10]], "pointer": [[0.0, 0.0, 1.0001641292944896e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0014698579907417297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9968333840370178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9102672013104893e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016776168486103415, 0.0, 0.0, 3.220972644157882e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.741737669178292e-09, 0.0, 0.0, 9.283989688135819e-10, 0.0, 0.0, 0.0, 6.186349210679509e-09, 0.0, 1.3986025670931213e-09, 0.0]], "target": [0.9968333840370178]}, "loss": [0.0004103533865418285, 0.0031716402154415846], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:20:08.533982", "n_pass": [1, 1, 1], "n_token": 81, "loss": [0.0004103533865418285, 0.0031716402154415846], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.'", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.  '", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", ".", "security_hash", "(", "None", ",", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 70, "repair_targets": [30], "repair_candidates": [9, 59, 51, 77, 62, 70, 79, 30, 2, 73]}}
{"prediction": {"error_location": 0.9995899796485901, "repair_targets": [0.9968333840370178], "repair_candidates": [1.0001641292944896e-08, 0.0014698579907417297, 0.9968333840370178, 1.9102672013104893e-05, 0.0016776168486103415, 3.220972644157882e-08, 4.741737669178292e-09, 9.283989688135819e-10, 6.186349210679509e-09, 1.3986025670931213e-09], "target_probs": 0.9968333840370178}}


{"result": {"time": "2021-02-11 11:20:08.590488", "n_pass": [21, 2, 2], "n_token": 71, "loss": [0.005052655003964901, 0.012408692389726639], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "#NEWLINE#", "'bio'", ":", "'Nothing notable.'", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.  '", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", ".", "security_hash", "(", "None", ",", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 60, "repair_targets": [20], "repair_candidates": [9, 49, 41, 67, 52, 60, 69, 20, 2, 63]}}
{"prediction": {"error_location": 0.9949600696563721, "repair_targets": [0.987667977809906], "repair_candidates": [1.1426205759335062e-07, 0.0029591224156320095, 0.987667977809906, 0.00038034547469578683, 0.008990555070340633, 1.536697141091281e-06, 2.5302566086793377e-07, 1.1203594496578262e-08, 7.911924626569089e-08, 1.3144530797148946e-08], "target_probs": 0.987667977809906}}


{"result": {"time": "2021-02-11 11:20:08.648810", "n_pass": [22, 3, 3], "n_token": 61, "loss": [0.000491855782456696, 0.003976073116064072], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", ",", "#NEWLINE#", "'bio'", ":", "'Nothing notable.  '", ",", "#NEWLINE#", "#UNINDENT#", "}", ")", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", ".", "security_hash", "(", "None", ",", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 50, "repair_targets": [10], "repair_candidates": [9, 39, 31, 57, 42, 50, 59, 10, 2, 53]}}
{"prediction": {"error_location": 0.999508261680603, "repair_targets": [0.9960318207740784], "repair_candidates": [2.8063098511665885e-08, 0.0025970605202019215, 0.9960318207740784, 6.201464566402137e-05, 0.0013087490806356072, 6.664352270036034e-08, 1.2377691760434573e-08, 2.0249044663245286e-09, 4.265332265163124e-08, 2.2250170594872998e-09], "target_probs": 0.9960318207740784}}


{"result": {"time": "2021-02-11 11:20:08.705012", "n_pass": [24, 4, 4], "n_token": 51, "loss": [9.047575440490618e-05, 0.005961270071566105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", ".", "security_hash", "(", "None", ",", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 40, "repair_targets": [10], "repair_candidates": [9, 29, 21, 47, 32, 40, 49, 10, 2, 43]}}
{"prediction": {"error_location": 0.9999094009399414, "repair_targets": [0.9940564632415771], "repair_candidates": [2.062017934179039e-08, 0.004599993582814932, 0.9940564632415771, 0.00015254142635967582, 0.0011910481844097376, 3.1179654413904245e-09, 1.874243693578137e-08, 7.415583702652384e-10, 3.1698718316874874e-08, 1.7471196711582593e-09], "target_probs": 0.9940564632415771}}


{"result": {"time": "2021-02-11 11:20:08.761379", "n_pass": [43, 5, 5], "n_token": 46, "loss": [0.00021491125517059118, 0.0015908012865111232], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "#INDENT#", "'name'", ":", "'  joe'", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 35, "repair_targets": [10], "repair_candidates": [9, 29, 21, 42, 32, 35, 44, 10, 2, 38]}}
{"prediction": {"error_location": 0.9997851252555847, "repair_targets": [0.9984104633331299], "repair_candidates": [9.530095823606644e-09, 0.0014119577826932073, 0.9984104633331299, 8.73919707373716e-05, 9.01094390428625e-05, 7.629120801766476e-08, 1.951052475135384e-08, 8.558178055118049e-10, 1.608676925002328e-08, 5.85177950540583e-09], "target_probs": 0.9984104633331299}}


{"result": {"time": "2021-02-11 11:20:08.817401", "n_pass": [49, 6, 6], "n_token": 41, "loss": [0.00021979777375236154, 0.0026820474304258823], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "HashTestForm", "(", "{", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 30, "repair_targets": [10], "repair_candidates": [9, 24, 16, 37, 27, 30, 39, 10, 2, 33]}}
{"prediction": {"error_location": 0.9997803568840027, "repair_targets": [0.9973215460777283], "repair_candidates": [9.774233866721715e-09, 0.002406326588243246, 0.9973215460777283, 0.0001873776491265744, 8.459984383080155e-05, 5.990928286792041e-08, 3.154390881832114e-08, 7.342290109235705e-10, 5.6665061975991193e-08, 5.252146717538153e-09], "target_probs": 0.9973215460777283}}


{"result": {"time": "2021-02-11 11:20:08.874411", "n_pass": [74, 7, 7], "n_token": 39, "loss": [0.00039176418795250356, 0.0015830404590815306], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", "=", "utils", ".", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 28, "repair_targets": [10], "repair_candidates": [9, 22, 14, 35, 25, 28, 37, 10, 2, 31]}}
{"prediction": {"error_location": 0.9996083378791809, "repair_targets": [0.9984182119369507], "repair_candidates": [8.131770812269679e-09, 0.0012960480526089668, 0.9984182119369507, 0.0002439405070617795, 4.172382250544615e-05, 1.6388572277037383e-08, 1.9246991556087778e-08, 6.977578514977267e-10, 3.088287314767513e-08, 1.5902287264779602e-09], "target_probs": 0.9984182119369507}}


{"result": {"time": "2021-02-11 11:20:08.932432", "n_pass": [76, 8, 8], "n_token": 36, "loss": [0.001128513365983963, 0.009703956544399261], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", "security_hash", "(", "None", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 25, "repair_targets": [10], "repair_candidates": [9, 19, 14, 32, 22, 25, 34, 10, 2, 28]}}
{"prediction": {"error_location": 0.9988721013069153, "repair_targets": [0.9903429746627808], "repair_candidates": [2.4033644407950305e-08, 0.009447772987186909, 0.9903429746627808, 2.2477040602097986e-06, 0.0002064205182250589, 2.0225921559813287e-07, 1.0595907262711535e-08, 1.5848429235632011e-09, 3.993828556758672e-07, 8.569950082915057e-09], "target_probs": 0.9903429746627808}}


{"result": {"time": "2021-02-11 11:20:08.987950", "n_pass": [77, 9, 9], "n_token": 33, "loss": [0.0004814896092284471, 0.006409099325537682], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_textfield_hash(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 22, "repair_targets": [10], "repair_candidates": [9, 16, 14, 29, 19, 22, 31, 10, 2, 25]}}
{"prediction": {"error_location": 0.9995187520980835, "repair_targets": [0.9936113953590393], "repair_candidates": [1.7442276956103342e-08, 0.005919238086789846, 0.9936113953590393, 0.00036771243321709335, 0.00010168452718062326, 2.716298741489709e-09, 2.508320884331283e-09, 2.7016233694610037e-10, 1.5962397625912672e-08, 7.730635021019339e-10], "target_probs": 0.9936113953590393}}


{"result": {"time": "2021-02-11 11:20:09.045881", "n_pass": [84, 10, 10], "n_token": 31, "loss": [0.000579546787776053, 0.0029925734270364046], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 20, "repair_targets": [8], "repair_candidates": [7, 14, 12, 27, 17, 20, 29, 8, 0, 23]}}
{"prediction": {"error_location": 0.9994206428527832, "repair_targets": [0.9970118999481201], "repair_candidates": [3.735410018634866e-06, 0.0018369229510426521, 0.9970118999481201, 0.0009363063145428896, 0.0002111418725689873, 8.15804046538915e-09, 1.6047108086780781e-09, 1.0107762404842902e-09, 1.2227810763931757e-08, 8.016896035911714e-10], "target_probs": 0.9970118999481201}}


{"result": {"time": "2021-02-11 11:20:09.101279", "n_pass": [86, 11, 11], "n_token": 29, "loss": [0.0003829461056739092, 0.005893935915082693], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#INDENT#", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 18, "repair_targets": [6], "repair_candidates": [5, 12, 10, 25, 15, 18, 27, 6, 0, 21]}}
{"prediction": {"error_location": 0.9996170997619629, "repair_targets": [0.9941233992576599], "repair_candidates": [4.295949565857882e-06, 0.0035254848189651966, 0.9941233992576599, 0.0008647473878227174, 0.0014820100041106343, 1.711597974463075e-08, 1.2541242488950388e-09, 9.783331922363914e-10, 2.3104226087866664e-08, 1.4305675533066164e-09], "target_probs": 0.9941233992576599}}


{"result": {"time": "2021-02-11 11:20:09.212213", "n_pass": [120, 13, 12], "n_token": 28, "loss": [0.00030727434204891324, 0.009088805876672268], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "=", "{", "#NEWLINE#", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 17, "repair_targets": [5], "repair_candidates": [4, 11, 9, 24, 14, 17, 26, 5, 0, 20]}}
{"prediction": {"error_location": 0.9996927976608276, "repair_targets": [0.9909523725509644], "repair_candidates": [6.5780604927567765e-06, 0.003920022863894701, 0.9909523725509644, 0.000942955375649035, 0.004177951719611883, 4.057981684013612e-08, 1.2131531335057844e-09, 2.604885640522525e-09, 4.929112407126013e-08, 3.16169579406278e-09], "target_probs": 0.9909523725509644}}


{"result": {"time": "2021-02-11 11:20:09.324726", "n_pass": [124, 15, 13], "n_token": 27, "loss": [0.0002165798214264214, 0.019809618592262268], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "#NEWLINE#", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 16, "repair_targets": [5], "repair_candidates": [4, 10, 8, 23, 13, 16, 25, 5, 0, 19]}}
{"prediction": {"error_location": 0.9997835755348206, "repair_targets": [0.9803853034973145], "repair_candidates": [6.841655704192817e-06, 0.014099085703492165, 0.9803853034973145, 0.00048251188127323985, 0.005025794263929129, 7.415343361572013e-08, 1.7281767128451975e-09, 4.006613707474571e-09, 3.0077313795118243e-07, 4.830530198063343e-09], "target_probs": 0.9803853034973145}}


{"result": {"time": "2021-02-11 11:20:09.434750", "n_pass": [126, 17, 14], "n_token": 26, "loss": [0.00040880427695810795, 0.053607575595378876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", ",", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 15, "repair_targets": [5], "repair_candidates": [4, 9, 7, 22, 12, 15, 24, 5, 0, 18]}}
{"prediction": {"error_location": 0.9995914101600647, "repair_targets": [0.9478039741516113], "repair_candidates": [3.5325425415067e-05, 0.04104382172226906, 0.9478039741516113, 0.00012008359044557437, 0.010992546565830708, 1.2485514844229328e-06, 1.0833180574820744e-08, 2.150846611925772e-08, 2.982076921398402e-06, 1.9212885504771293e-08], "target_probs": 0.9478039741516113}}


{"result": {"time": "2021-02-11 11:20:09.489986", "n_pass": [128, 18, 15], "n_token": 25, "loss": [0.0003601856005843729, 0.04315359890460968], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", ")", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 14, "repair_targets": [5], "repair_candidates": [4, 8, 7, 21, 11, 14, 23, 5, 0, 17]}}
{"prediction": {"error_location": 0.9996397495269775, "repair_targets": [0.9577642679214478], "repair_candidates": [9.252329618902877e-06, 0.036280885338783264, 0.9577642679214478, 0.00024041038705036044, 0.005703994072973728, 3.53834110455864e-07, 3.660239444869262e-09, 9.946166557028846e-09, 8.34252546155767e-07, 8.530333772682752e-09], "target_probs": 0.9577642679214478}}


{"result": {"time": "2021-02-11 11:20:09.544825", "n_pass": [130, 19, 16], "n_token": 24, "loss": [0.0005046047735959291, 0.009213080629706383], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 13, "repair_targets": [5], "repair_candidates": [4, 8, 7, 20, 10, 13, 22, 5, 0, 16]}}
{"prediction": {"error_location": 0.9994955062866211, "repair_targets": [0.9908292293548584], "repair_candidates": [1.5160204384301323e-05, 0.006726562976837158, 0.9908292293548584, 0.0005136333638802171, 0.001912947278469801, 2.6058117441607465e-07, 6.6313101676485076e-09, 1.0818262730083461e-08, 2.148122575817979e-06, 1.0215288170911663e-08], "target_probs": 0.9908292293548584}}


{"result": {"time": "2021-02-11 11:20:09.711906", "n_pass": [136, 22, 17], "n_token": 22, "loss": [0.0005135409301146865, 0.04390927031636238], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "hash1", ",", "hash2", ")"]}}
{"position": {"error_location": 13, "repair_targets": [5], "repair_candidates": [4, 8, 7, 18, 10, 13, 20, 5, 0, 16]}}
{"prediction": {"error_location": 0.9994866847991943, "repair_targets": [0.9570407867431641], "repair_candidates": [7.694699888816103e-06, 0.009414697997272015, 0.9570407867431641, 0.031275395303964615, 0.0019203994888812304, 2.4843836854415713e-07, 6.1267533268960506e-09, 1.2895126744183472e-08, 0.00034070436959154904, 2.5008562332118345e-08], "target_probs": 0.9570407867431641}}


{"result": {"time": "2021-02-11 11:20:10.098402", "n_pass": [165, 29, 18], "n_token": 21, "loss": [0.005375810898840427, 0.08592332899570465], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "hash1", "hash2", ")"]}}
{"position": {"error_location": 13, "repair_targets": [5], "repair_candidates": [4, 8, 7, 18, 10, 13, 19, 5, 0, 16]}}
{"prediction": {"error_location": 0.9946386218070984, "repair_targets": [0.9176645874977112], "repair_candidates": [0.00011115861707367003, 0.009797176346182823, 0.9176645874977112, 0.06888660788536072, 0.0031032410915941, 9.365078767586965e-06, 1.822749595703499e-08, 3.1686755619375617e-07, 0.00042352546006441116, 3.9718879634165205e-06], "target_probs": 0.9176645874977112}}


{"result": {"time": "2021-02-11 11:20:10.153298", "n_pass": [167, 30, 19], "n_token": 20, "loss": [0.0021772508043795824, 0.07514436542987823], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "utils", "hash2", ")", "#NEWLINE#", "self", ".", "hash1", "hash2"]}}
{"position": {"error_location": 13, "repair_targets": [5], "repair_candidates": [4, 8, 7, 18, 10, 13, 19, 5, 0, 16]}}
{"prediction": {"error_location": 0.9978251457214355, "repair_targets": [0.9276095628738403], "repair_candidates": [6.944360211491585e-05, 0.0057122427970170975, 0.9276095628738403, 0.06528616696596146, 0.001241750898770988, 9.143644774667337e-07, 9.072107509666694e-09, 2.1676964934158605e-07, 7.846472726669163e-05, 1.301266934206069e-06], "target_probs": 0.9276095628738403}}


{"result": {"time": "2021-02-11 11:20:10.539168", "n_pass": [180, 37, 20], "n_token": 19, "loss": [0.001292465953156352, 0.06902652233839035], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "hash2", ")", "#NEWLINE#", "self", ".", "hash1", "hash2"]}}
{"position": {"error_location": 12, "repair_targets": [5], "repair_candidates": [4, 8, 7, 17, 10, 12, 18, 5, 0, 15]}}
{"prediction": {"error_location": 0.9987083673477173, "repair_targets": [0.9333019256591797], "repair_candidates": [3.1915966246742755e-05, 0.0026068149600178003, 0.9333019256591797, 0.06328275799751282, 0.0006790882907807827, 3.9185300693134195e-07, 1.0389176630098973e-08, 5.3102741759403216e-08, 9.468994539929554e-05, 2.301116182934493e-06], "target_probs": 0.9333019256591797}}


{"result": {"time": "2021-02-11 11:20:10.596440", "n_pass": [182, 38, 21], "n_token": 18, "loss": [0.0015010291244834661, 0.06458582729101181], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "hash2", "#NEWLINE#", "self", ".", "hash1", "hash2"]}}
{"position": {"error_location": 12, "repair_targets": [5], "repair_candidates": [4, 8, 7, 16, 10, 12, 17, 5, 0, 14]}}
{"prediction": {"error_location": 0.9984999895095825, "repair_targets": [0.9374556541442871], "repair_candidates": [5.854542177985422e-05, 0.0015447165351361036, 0.9374556541442871, 0.06042858585715294, 0.00041867868276312947, 1.8053776784654474e-07, 1.0477316791934754e-08, 4.5171583451519837e-07, 9.004036837723106e-05, 3.169468982378021e-06], "target_probs": 0.9374556541442871}}


{"result": {"time": "2021-02-11 11:20:10.651358", "n_pass": [183, 39, 22], "n_token": 17, "loss": [0.026079688221216202, 0.01966037228703499], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "hash2", "self", ".", "hash1", "hash2"]}}
{"position": {"error_location": 12, "repair_targets": [5], "repair_candidates": [4, 8, 7, 15, 10, 12, 16, 5, 0, 13]}}
{"prediction": {"error_location": 0.9742574691772461, "repair_targets": [0.980531632900238], "repair_candidates": [0.000803546339739114, 0.002136475872248411, 0.980531632900238, 0.011920665390789509, 0.002217034110799432, 4.5958779082866386e-05, 1.3726880752074067e-06, 0.001921801595017314, 0.0002367785491514951, 0.00018475907563697547], "target_probs": 0.980531632900238}}


{"result": {"time": "2021-02-11 11:20:10.706663", "n_pass": [185, 40, 23], "n_token": 16, "loss": [0.05582308769226074, 0.046183209866285324], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "#NEWLINE#", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "hash2", "self", "hash1", "hash2"]}}
{"position": {"error_location": 12, "repair_targets": [5], "repair_candidates": [4, 8, 7, 14, 10, 12, 15, 5, 0, 13]}}
{"prediction": {"error_location": 0.9457064270973206, "repair_targets": [0.9548670053482056], "repair_candidates": [0.0003271189925726503, 0.0012961510801687837, 0.9548670053482056, 0.04151691496372223, 0.0016293752705678344, 7.83964351285249e-05, 6.93289257469587e-05, 8.68669758347096e-06, 3.6536144762067124e-05, 0.0001703897287370637], "target_probs": 0.9548670053482056}}


{"result": {"time": "2021-02-11 11:20:10.872406", "n_pass": [191, 43, 24], "n_token": 15, "loss": [0.004934869706630707, 0.587181806564331], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", "f1", "f2", "{", "hash1", "f1", "#NEWLINE#", "hash2", "=", "hash2", "self", "hash1", "hash2"]}}
{"position": {"error_location": 11, "repair_targets": [4], "repair_candidates": [3, 7, 6, 13, 9, 11, 14, 4, 0, 12]}}
{"prediction": {"error_location": 0.9950773119926453, "repair_targets": [0.5558916926383972], "repair_candidates": [0.003786483546718955, 0.22878943383693695, 0.5558916926383972, 0.18762516975402832, 0.02122209034860134, 0.0016435558209195733, 6.372769712470472e-05, 0.00045112238149158657, 0.00022632906620856375, 0.00030044253799133003], "target_probs": 0.5558916926383972}}




Minimal simplified tokens:

['self', ')', "'\\n        Regression test for #10034: the hash generation function should ignore\\n        leading/trailing whitespace so as to be friendly to broken browsers that\\n        submit it (usually in textareas).\\n        '", 'f1', 'f2', '{', 'hash1', 'f1', '#NEWLINE#', 'hash2', '=', 'hash2', 'self', 'hash1', 'hash2']
