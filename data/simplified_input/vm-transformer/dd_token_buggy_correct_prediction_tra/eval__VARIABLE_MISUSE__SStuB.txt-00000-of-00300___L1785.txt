
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "mock", ".", "patch", ".", "object", "(", "experiments", ".", "gmacpyutil", ",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "def MifkSE(", "key", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "==", "experiments", ".", "MANUAL_ON_KNOB", ")", ":", "#NEWLINE#", "#INDENT#", "return", "'foo,bar,baz'", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", ".", "assertSameElements", "(", "[", "'foo'", ",", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"], "error_location": [87], "repair_targets": [67], "repair_candidates": [16, 75, 59, 69, 87, 18, 53, 57, 67], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "google/macops/gmacpyutil/gmacpyutil/experiments_test.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1785, "results": {"model": "transformer", "prob": {"loc": [[0.11831171065568924, 2.086048198179924e-06, 3.4569740847700814e-08, 5.611950726347459e-08, 1.7507124994153855e-07, 7.984714045505825e-08, 2.8603508894775587e-08, 2.543146315758804e-08, 1.027122493724164e-06, 1.8966144921250816e-07, 7.749242314503135e-08, 4.8735318003423345e-09, 1.8648409039201397e-08, 4.9162918180911674e-09, 7.726155715204186e-09, 1.3079203426968888e-06, 1.6940781506491476e-06, 4.8099324523320774e-09, 6.637539172515972e-06, 4.289080202113382e-09, 1.0925467641698106e-08, 8.374610338535149e-09, 5.5985198699204375e-09, 1.535271508146252e-06, 6.265798219828866e-06, 6.075814074080199e-09, 1.6469847707867302e-08, 1.9807856688203174e-08, 1.3358311790057087e-08, 2.6652349660594155e-08, 3.4857624342521376e-08, 0.0007294779061339796, 1.2585064723680262e-07, 4.9176260290551e-06, 3.7277649767020193e-07, 2.358908801625148e-08, 1.0079920897965167e-08, 8.653201888364492e-08, 2.5097619982261676e-08, 1.293043805361549e-08, 6.702020272086884e-09, 5.55102542421082e-06, 6.055594070630832e-08, 4.3319996478885514e-08, 3.7798134400190975e-08, 4.6942666642735276e-08, 9.014654978045655e-08, 3.0458092936669345e-08, 3.111711421865948e-08, 1.799831181870104e-07, 5.6234263468013523e-08, 2.9780863997075357e-08, 3.334077192107543e-08, 4.569455541059142e-06, 1.8227444797958015e-07, 1.2317289410646026e-08, 1.334585135737143e-07, 0.0010285115567967296, 7.116585720723378e-08, 1.383149879075063e-07, 3.836504092191717e-08, 1.4756403743376723e-07, 2.0236410591678577e-07, 2.3675711702253466e-07, 8.153450835379772e-06, 4.3090795998068643e-07, 2.541251831189584e-07, 4.1168579627992585e-05, 1.5656094376481633e-07, 1.6514919479959644e-05, 3.7577939338007127e-07, 2.0149741430941503e-08, 7.797722355462611e-05, 4.371663180791074e-06, 1.5025057109596673e-06, 2.8203450597175106e-07, 4.2027463109661767e-07, 1.359374266485247e-07, 1.6323300542353536e-06, 0.000578448933083564, 6.879989086883143e-05, 6.121517799329013e-05, 6.536905857501552e-05, 3.2711141102481633e-05, 1.4200111763784662e-05, 3.6345229545986513e-06, 2.047783254965907e-06, 0.8785696625709534, 1.0741708138084505e-05, 0.00031052803387865424, 2.5828112484305166e-06, 4.148814127802325e-07, 4.3018021642637905e-06, 1.345696728094481e-05]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00024969459627754986, 0.0, 0.003758337814360857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.620398537255824e-05, 0.0, 0.0, 0.0, 0.0014259477611631155, 0.0, 0.0011551708448678255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9924544095993042, 0.0, 0.00027884976589120924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005773481098003685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4000795747269876e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9924544095993042]}, "loss": [0.12946026027202606, 0.0075742024928331375], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:27:42.498257", "n_pass": [1, 1, 1], "n_token": 94, "loss": [0.12946026027202606, 0.0075742024928331375], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "mock", ".", "patch", ".", "object", "(", "experiments", ".", "gmacpyutil", ",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "def MifkSE(", "key", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "==", "experiments", ".", "MANUAL_ON_KNOB", ")", ":", "#NEWLINE#", "#INDENT#", "return", "'foo,bar,baz'", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", ".", "assertSameElements", "(", "[", "'foo'", ",", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"]}}
{"position": {"error_location": 87, "repair_targets": [67], "repair_candidates": [16, 75, 59, 69, 87, 18, 53, 57, 67]}}
{"prediction": {"error_location": 0.8785696625709534, "repair_targets": [0.9924544095993042], "repair_candidates": [0.00024969459627754986, 0.003758337814360857, 7.620398537255824e-05, 0.0014259477611631155, 0.0011551708448678255, 0.9924544095993042, 0.00027884976589120924, 0.0005773481098003685, 2.4000795747269876e-05], "target_probs": 0.9924544095993042}}


{"result": {"time": "2021-02-11 11:27:42.554940", "n_pass": [9, 2, 2], "n_token": 71, "loss": [0.06834474951028824, 0.005573097616434097], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "mock", ".", "patch", ".", "object", "(", "experiments", ".", "gmacpyutil", ",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#INDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", ".", "assertSameElements", "(", "[", "'foo'", ",", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"]}}
{"position": {"error_location": 64, "repair_targets": [44], "repair_candidates": [16, 52, 36, 46, 64, 18, 30, 34, 44]}}
{"prediction": {"error_location": 0.9339383244514465, "repair_targets": [0.9944424033164978], "repair_candidates": [3.702806861838326e-05, 0.00037562372745014727, 2.478267742844764e-05, 0.004556172527372837, 0.00041332285036332905, 0.9944424033164978, 9.332713671028614e-05, 4.7868004912743345e-05, 9.507218237558845e-06], "target_probs": 0.9944424033164978}}


{"result": {"time": "2021-02-11 11:27:42.611491", "n_pass": [23, 3, 3], "n_token": 60, "loss": [0.17343200743198395, 0.011903700418770313], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "#INDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", ".", "assertSameElements", "(", "[", "'foo'", ",", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"]}}
{"position": {"error_location": 53, "repair_targets": [33], "repair_candidates": [5, 41, 25, 35, 53, 7, 19, 23, 33]}}
{"prediction": {"error_location": 0.8407742977142334, "repair_targets": [0.988166868686676], "repair_candidates": [0.0010802287142723799, 0.005652646068483591, 9.620023774914443e-05, 0.0005366243422031403, 0.001265072962269187, 0.988166868686676, 0.0018344544805586338, 0.0013097693445160985, 5.800043072667904e-05], "target_probs": 0.988166868686676}}


{"result": {"time": "2021-02-11 11:27:42.670153", "n_pass": [40, 4, 4], "n_token": 54, "loss": [0.02936246432363987, 0.0052020917646586895], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", ".", "assertSameElements", "(", "[", "'foo'", ",", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"]}}
{"position": {"error_location": 47, "repair_targets": [27], "repair_candidates": [5, 35, 19, 29, 47, 7, 13, 17, 27]}}
{"prediction": {"error_location": 0.9710644483566284, "repair_targets": [0.9948114156723022], "repair_candidates": [0.00034270898322574794, 0.00243025878444314, 7.483699300792068e-05, 0.00022313580848276615, 0.0003112975973635912, 0.9948114156723022, 0.0010462470818310976, 0.0007371657411567867, 2.2952823201194406e-05], "target_probs": 0.9948114156723022}}


{"result": {"time": "2021-02-11 11:27:42.726559", "n_pass": [44, 5, 5], "n_token": 48, "loss": [0.055015791207551956, 0.00496784970164299], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k", "[", "experiments", ".", "MANUAL_ON_KNOB", "]", ")"]}}
{"position": {"error_location": 41, "repair_targets": [27], "repair_candidates": [5, 35, 19, 29, 41, 7, 13, 17, 27]}}
{"prediction": {"error_location": 0.946470320224762, "repair_targets": [0.995044469833374], "repair_candidates": [0.0001344092161161825, 0.002599958563223481, 0.0009613478323444724, 0.00025630969321355224, 0.0002098946861224249, 0.995044469833374, 0.0006194515735842288, 7.4490271799732e-05, 9.969497477868572e-05], "target_probs": 0.995044469833374}}


{"result": {"time": "2021-02-11 11:27:42.782513", "n_pass": [46, 6, 6], "n_token": 42, "loss": [0.047635506838560104, 0.0014234178233891726], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": [",", "'MachineInfoForKey'", ")", "#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 41, "repair_targets": [27], "repair_candidates": [5, 35, 19, 29, 41, 7, 13, 17, 27]}}
{"prediction": {"error_location": 0.9534812569618225, "repair_targets": [0.9985775947570801], "repair_candidates": [7.666412420803681e-05, 0.000700934324413538, 0.00038609723560512066, 0.00011134859232697636, 4.1204679291695356e-05, 0.9985775947570801, 8.239588350988925e-05, 2.1897210899624042e-05, 1.8429972215017187e-06], "target_probs": 0.9985775947570801}}


{"result": {"time": "2021-02-11 11:27:42.839154", "n_pass": [68, 7, 7], "n_token": 39, "loss": [0.29167667031288147, 0.0037220758385956287], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", ":", "#NEWLINE#", "#INDENT#", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 38, "repair_targets": [24], "repair_candidates": [2, 32, 16, 26, 38, 4, 10, 14, 24]}}
{"prediction": {"error_location": 0.7470099925994873, "repair_targets": [0.9962848424911499], "repair_candidates": [2.2734022877557436e-06, 0.0021444635931402445, 0.0006457258714362979, 0.0008199780131690204, 3.707948053488508e-05, 0.9962848424911499, 4.799173620995134e-05, 1.5729408914921805e-05, 1.8862594970414648e-06], "target_probs": 0.9962848424911499}}


{"result": {"time": "2021-02-11 11:27:42.895441", "n_pass": [70, 8, 8], "n_token": 36, "loss": [0.03095151111483574, 0.003940408118069172], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "experiments", ".", "Knobs", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 35, "repair_targets": [21], "repair_candidates": [2, 29, 13, 23, 35, 4, 7, 11, 21]}}
{"prediction": {"error_location": 0.9695224761962891, "repair_targets": [0.9960673451423645], "repair_candidates": [6.0074949033150915e-06, 0.0021528000943362713, 0.0007937894552014768, 0.0008394165197387338, 5.6754466640995815e-05, 0.9960673451423645, 3.72990507457871e-05, 4.216949673718773e-05, 4.481043561099796e-06], "target_probs": 0.9960673451423645}}


{"result": {"time": "2021-02-11 11:27:42.951681", "n_pass": [74, 9, 9], "n_token": 33, "loss": [0.13143588602542877, 0.004586649127304554], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "=", "MifkSE", "#NEWLINE#", "k", "=", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 32, "repair_targets": [18], "repair_candidates": [2, 26, 13, 20, 32, 4, 7, 11, 18]}}
{"prediction": {"error_location": 0.8768354654312134, "repair_targets": [0.9954238533973694], "repair_candidates": [8.872510989021976e-06, 0.00249103712849319, 0.000672011636197567, 0.0009552946430630982, 0.0002366749249631539, 0.9954238533973694, 0.00011790066491812468, 9.100531315198168e-05, 3.3129817893495783e-06], "target_probs": 0.9954238533973694}}


{"result": {"time": "2021-02-11 11:27:43.177342", "n_pass": [108, 13, 10], "n_token": 32, "loss": [0.22310693562030792, 0.028669262304902077], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "(", ")", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 31, "repair_targets": [17], "repair_candidates": [2, 25, 12, 19, 31, 4, 7, 10, 17]}}
{"prediction": {"error_location": 0.8000292778015137, "repair_targets": [0.971737802028656], "repair_candidates": [9.05619963305071e-05, 0.005138487089425325, 0.009188692085444927, 0.013090445660054684, 0.0004076442855875939, 0.971737802028656, 0.00016488971596118063, 0.00017587305046617985, 5.651220362778986e-06], "target_probs": 0.971737802028656}}


{"result": {"time": "2021-02-11 11:27:43.233006", "n_pass": [111, 14, 11], "n_token": 30, "loss": [0.4722757339477539, 0.06361661851406097], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", ".", "_GetKnobs", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 29, "repair_targets": [15], "repair_candidates": [2, 23, 12, 17, 29, 4, 7, 10, 15]}}
{"prediction": {"error_location": 0.62358158826828, "repair_targets": [0.9383646845817566], "repair_candidates": [9.470528311794624e-05, 0.014417348429560661, 0.016747599467635155, 0.02920231968164444, 0.0005838107317686081, 0.9383646845817566, 0.00025339226704090834, 0.000317872705636546, 1.8272188754053786e-05], "target_probs": 0.9383646845817566}}


{"result": {"time": "2021-02-11 11:27:43.288870", "n_pass": [114, 15, 12], "n_token": 28, "loss": [0.15111643075942993, 0.022170785814523697], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'baz'", ",", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 27, "repair_targets": [15], "repair_candidates": [2, 21, 12, 17, 27, 4, 7, 10, 15]}}
{"prediction": {"error_location": 0.859747588634491, "repair_targets": [0.9780731797218323], "repair_candidates": [3.903625110979192e-05, 0.004121627192944288, 0.005097678396850824, 0.012382717803120613, 0.0002389322908129543, 0.9780731797218323, 1.2437032637535594e-05, 3.147147435811348e-05, 2.95630320579221e-06], "target_probs": 0.9780731797218323}}


{"result": {"time": "2021-02-11 11:27:43.401815", "n_pass": [117, 17, 13], "n_token": 26, "loss": [0.10079102963209152, 0.009836314246058464], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 25, "repair_targets": [15], "repair_candidates": [2, 21, 12, 17, 25, 4, 7, 10, 15]}}
{"prediction": {"error_location": 0.9041220545768738, "repair_targets": [0.9902119040489197], "repair_candidates": [1.05313283711439e-05, 0.001892148982733488, 0.0021335373166948557, 0.005647467449307442, 9.021467849379405e-05, 0.9902119040489197, 3.2177144930756185e-06, 1.0196426956099458e-05, 7.24336302937445e-07], "target_probs": 0.9902119040489197}}


{"result": {"time": "2021-02-11 11:27:43.512092", "n_pass": [120, 19, 14], "n_token": 25, "loss": [0.05029941722750664, 0.018297459930181503], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def testKnobsManualKnobReturnsList(", "self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 24, "repair_targets": [14], "repair_candidates": [1, 20, 11, 16, 24, 3, 6, 9, 14]}}
{"prediction": {"error_location": 0.9509446620941162, "repair_targets": [0.9818689227104187], "repair_candidates": [0.00039572748937644064, 0.006670960690826178, 0.0008794908644631505, 0.010060806758701801, 8.572755177738145e-05, 0.9818689227104187, 4.296277438697871e-06, 3.341354022268206e-05, 7.10105439338804e-07], "target_probs": 0.9818689227104187}}


{"result": {"time": "2021-02-11 11:27:43.567443", "n_pass": [121, 20, 15], "n_token": 24, "loss": [0.19201023876667023, 0.042360566556453705], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 23, "repair_targets": [13], "repair_candidates": [0, 19, 10, 15, 23, 2, 5, 8, 13]}}
{"prediction": {"error_location": 0.8252984285354614, "repair_targets": [0.9585241079330444], "repair_candidates": [0.00104012421797961, 0.034909334033727646, 0.0010727749904617667, 0.004275012761354446, 0.00015610590344294906, 0.9585241079330444, 1.8967828054883284e-06, 1.940646325238049e-05, 1.3141261661075987e-06], "target_probs": 0.9585241079330444}}


{"result": {"time": "2021-02-11 11:27:43.623285", "n_pass": [123, 21, 16], "n_token": 23, "loss": [0.017313063144683838, 0.013925202190876007], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", ")", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 22, "repair_targets": [12], "repair_candidates": [0, 18, 9, 14, 22, 1, 4, 7, 12]}}
{"prediction": {"error_location": 0.9828358292579651, "repair_targets": [0.986171305179596], "repair_candidates": [0.00010419600585009903, 0.0001773605472408235, 0.0011702828342095017, 0.012358469888567924, 1.783159859769512e-05, 0.986171305179596, 9.503875020300256e-08, 3.1378090170619544e-07, 4.957524168958116e-08], "target_probs": 0.986171305179596}}


{"result": {"time": "2021-02-11 11:27:43.681103", "n_pass": [125, 22, 17], "n_token": 22, "loss": [0.004331848584115505, 0.0071661327965557575], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "#UNINDENT#", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 21, "repair_targets": [11], "repair_candidates": [0, 17, 8, 13, 21, 1, 3, 6, 11]}}
{"prediction": {"error_location": 0.995677649974823, "repair_targets": [0.9928594827651978], "repair_candidates": [1.948723365785554e-05, 4.6165419917088e-05, 0.0010013118153437972, 0.00606951117515564, 3.9513724914286286e-06, 0.9928594827651978, 3.975283036083965e-08, 1.095325004030201e-07, 1.5358123661712852e-08], "target_probs": 0.9928594827651978}}


{"result": {"time": "2021-02-11 11:27:43.736556", "n_pass": [126, 23, 18], "n_token": 21, "loss": [0.006322619505226612, 0.0008234194829128683], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "mock_mifk", ".", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 20, "repair_targets": [10], "repair_candidates": [0, 16, 7, 12, 20, 1, 2, 5, 10]}}
{"prediction": {"error_location": 0.9936973452568054, "repair_targets": [0.9991769194602966], "repair_candidates": [4.4158455239085015e-06, 3.160622873110697e-05, 0.0001221662969328463, 0.0006542954361066222, 1.0557733730820473e-05, 0.9991769194602966, 5.079854403788886e-08, 2.0450768190016788e-08, 1.190691456542936e-08], "target_probs": 0.9991769194602966}}


{"result": {"time": "2021-02-11 11:27:43.792212", "n_pass": [128, 24, 19], "n_token": 20, "loss": [0.1752956211566925, 0.026940589770674706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "mock_mifk", "side_effect", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 19, "repair_targets": [9], "repair_candidates": [0, 15, 6, 11, 19, 1, 2, 4, 9]}}
{"prediction": {"error_location": 0.8392088413238525, "repair_targets": [0.9734190702438354], "repair_candidates": [7.760557491565123e-05, 0.0002000187087105587, 0.0016630088211968541, 0.02458096854388714, 5.874361886526458e-05, 0.9734190702438354, 3.5608374560069933e-07, 2.7973274541182036e-07, 4.178702184276517e-08], "target_probs": 0.9734190702438354}}


{"result": {"time": "2021-02-11 11:27:43.848047", "n_pass": [129, 25, 20], "n_token": 19, "loss": [0.23184411227703094, 0.014503663405776024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "mock_mifk", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", "'bar'", "]", ",", "k"]}}
{"position": {"error_location": 18, "repair_targets": [8], "repair_candidates": [0, 14, 5, 10, 18, 1, 2, 3, 8]}}
{"prediction": {"error_location": 0.7930697202682495, "repair_targets": [0.985601007938385], "repair_candidates": [3.4764507290674374e-05, 0.0002573744277469814, 0.004984370898455381, 0.009087149053812027, 3.498998557915911e-05, 0.985601007938385, 2.8030669341205794e-07, 1.494021120151956e-07, 3.753857313881781e-08], "target_probs": 0.985601007938385}}


{"result": {"time": "2021-02-11 11:27:43.958968", "n_pass": [136, 27, 21], "n_token": 17, "loss": [0.587018609046936, 0.019406795501708984], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "mock_mifk", "MifkSE", "#NEWLINE#", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", ",", "k"]}}
{"position": {"error_location": 16, "repair_targets": [8], "repair_candidates": [0, 14, 5, 10, 16, 1, 2, 3, 8]}}
{"prediction": {"error_location": 0.5559824109077454, "repair_targets": [0.980780303478241], "repair_candidates": [9.596552263246849e-05, 0.0007569040753878653, 0.005852821283042431, 0.012223177589476109, 0.00028487411327660084, 0.980780303478241, 2.1327884951460874e-06, 9.686356179372524e-07, 2.888134986278601e-06], "target_probs": 0.980780303478241}}


{"result": {"time": "2021-02-11 11:27:44.126870", "n_pass": [164, 30, 22], "n_token": 16, "loss": [0.1403389424085617, 0.03499232232570648], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "mock_mifk", "mock_mifk", "MifkSE", "k", "=", "#NEWLINE#", "knobs", "=", "k", "(", ")", "#NEWLINE#", "self", ",", "k"]}}
{"position": {"error_location": 15, "repair_targets": [7], "repair_candidates": [0, 13, 4, 9, 15, 1, 2, 3, 7]}}
{"prediction": {"error_location": 0.8690636157989502, "repair_targets": [0.9656128287315369], "repair_candidates": [3.997666863142513e-05, 0.0002591522643342614, 0.006383053492754698, 0.027546601369976997, 0.00011075069778598845, 0.9656128287315369, 1.018646526063094e-05, 1.2080038231943035e-06, 3.6317651392892e-05], "target_probs": 0.9656128287315369}}




Minimal simplified tokens:

['self', 'mock_mifk', 'mock_mifk', 'MifkSE', 'k', '=', '#NEWLINE#', 'knobs', '=', 'k', '(', ')', '#NEWLINE#', 'self', ',', 'k']
