
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}\\n        if unicode data is part of the data sequence to be appended to the\\n        output buffer.\\n        '", "#NEWLINE#", "p", "=", "_pollingfile", ".", "_PollableWritePipe", "(", "1", ",", "(", "lambda", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", ".", "writeSequence", ",", "(", "'test'", ",", ")", ")"], "error_location": [45], "repair_targets": [9, 30], "repair_candidates": [9, 30, 2, 24, 39, 45], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "nlloyd/SubliminalCollaborator/libs/twisted/internet/test/test_pollingfile.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1707, "results": {"model": "transformer", "prob": {"loc": [[0.00018067080236505717, 2.0930184252421213e-09, 1.0445564413430475e-09, 4.7131597236127476e-11, 6.755540571390384e-11, 8.443853255490907e-11, 5.508161635137121e-11, 4.0863284977987746e-11, 4.7881847792252685e-11, 5.358500310137515e-09, 6.62775806459237e-11, 1.6156996573979399e-10, 6.416569359180002e-11, 9.4704721495531e-12, 1.576713343220959e-10, 2.3836171925140093e-10, 3.902103293262904e-11, 6.287866755050331e-11, 4.306437151324616e-10, 9.96148163956434e-11, 2.042755131714813e-10, 9.401079220650033e-11, 5.4285499706541174e-11, 3.997139078060208e-11, 2.1504091909929635e-11, 5.844069672633623e-11, 4.390490141586989e-12, 7.392345763301833e-11, 5.825497861877693e-10, 1.7431567300718598e-10, 7.530908533226466e-06, 2.293239376172096e-09, 1.3711237874247661e-11, 1.4173008600071313e-10, 6.735048629913365e-10, 6.818781650430594e-10, 3.8939121371761587e-10, 4.3817355299680116e-10, 2.7186219941910394e-10, 2.400260268320409e-10, 9.94246213137373e-11, 1.1347648515291908e-11, 1.050582509876108e-09, 3.419694305506482e-09, 6.526165163833753e-10, 0.9998118281364441, 1.4296904771171626e-09, 1.6727483981293645e-11, 2.78084777427523e-10, 1.3647875052313907e-09, 5.246845180550963e-09, 7.705661109191908e-10, 1.2496124135452646e-09, 7.212530572786591e-10]], "pointer": [[0.0, 0.0, 1.1489549251564313e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3030104637145996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.982159099308774e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6969751715660095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.688678600928142e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7924343157792464e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999856352806091]}, "loss": [0.00018821375851985067, 1.4364822163770441e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 11:26:49.157142", "n_pass": [1, 1, 1], "n_token": 54, "loss": [0.00018821375851985067, 1.4364822163770441e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}\\n        if unicode data is part of the data sequence to be appended to the\\n        output buffer.\\n        '", "#NEWLINE#", "p", "=", "_pollingfile", ".", "_PollableWritePipe", "(", "1", ",", "(", "lambda", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", ".", "writeSequence", ",", "(", "'test'", ",", ")", ")"]}}
{"position": {"error_location": 45, "repair_targets": [9, 30], "repair_candidates": [9, 30, 2, 24, 39, 45]}}
{"prediction": {"error_location": 0.9998118281364441, "repair_targets": [0.3030104637145996, 0.6969751715660095], "repair_candidates": [1.1489549251564313e-05, 0.3030104637145996, 9.982159099308774e-08, 0.6969751715660095, 4.688678600928142e-08, 2.7924343157792464e-06], "target_probs": 0.9999856352806091}}


{"result": {"time": "2021-02-11 11:26:49.213346", "n_pass": [22, 2, 2], "n_token": 47, "loss": [8.296622399939224e-05, 7.74863383412594e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}\\n        if unicode data is part of the data sequence to be appended to the\\n        output buffer.\\n        '", "#NEWLINE#", "p", "=", "_pollingfile", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", ".", "writeSequence", ",", "(", "'test'", ",", ")", ")"]}}
{"position": {"error_location": 38, "repair_targets": [9, 23], "repair_candidates": [9, 23, 2, 17, 32, 38]}}
{"prediction": {"error_location": 0.9999171495437622, "repair_targets": [0.5787962675094604, 0.42119598388671875], "repair_candidates": [5.235865955910413e-06, 0.5787962675094604, 1.1724188198058982e-07, 0.42119598388671875, 3.6145546999932776e-08, 2.3787283680576365e-06], "target_probs": 0.9999922513961792}}


{"result": {"time": "2021-02-11 11:26:49.268756", "n_pass": [27, 3, 3], "n_token": 40, "loss": [0.0005335576133802533, 4.529963462118758e-06], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}\\n        if unicode data is part of the data sequence to be appended to the\\n        output buffer.\\n        '", "#NEWLINE#", "p", "=", "_pollingfile", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 38, "repair_targets": [9, 23], "repair_candidates": [9, 23, 2, 17, 32, 38]}}
{"prediction": {"error_location": 0.999466598033905, "repair_targets": [0.7914028763771057, 0.20859259366989136], "repair_candidates": [1.6131916709127836e-06, 0.7914028763771057, 2.975193353904615e-07, 0.20859259366989136, 8.273518687929027e-07, 1.7276167909585638e-06], "target_probs": 0.9999954700469971}}


{"result": {"time": "2021-02-11 11:26:49.324527", "n_pass": [47, 4, 4], "n_token": 37, "loss": [0.0009136793087236583, 1.025205165205989e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "#INDENT#", "'\\n        L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}\\n        if unicode data is part of the data sequence to be appended to the\\n        output buffer.\\n        '", "#NEWLINE#", "p", "=", "_pollingfile", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 35, "repair_targets": [6, 20], "repair_candidates": [6, 20, 2, 14, 29, 35]}}
{"prediction": {"error_location": 0.9990867376327515, "repair_targets": [0.5590037107467651, 0.4409860670566559], "repair_candidates": [3.68735254596686e-06, 0.5590037107467651, 1.2354910268186359e-06, 0.4409860670566559, 1.9690123735927045e-06, 3.250401505283662e-06], "target_probs": 0.9999897480010986}}


{"result": {"time": "2021-02-11 11:26:49.382620", "n_pass": [48, 5, 5], "n_token": 34, "loss": [0.012343679554760456, 0.02483323961496353], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ":", "None", ")", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 32, "repair_targets": [3, 17], "repair_candidates": [3, 17, 2, 11, 26, 32]}}
{"prediction": {"error_location": 0.9877321720123291, "repair_targets": [0.11215860396623611, 0.8633139729499817], "repair_candidates": [0.017395252361893654, 0.11215860396623611, 0.0009794451761990786, 0.8633139729499817, 0.002000020118430257, 0.004152655601501465], "target_probs": 0.9754725694656372}}


{"result": {"time": "2021-02-11 11:26:49.437719", "n_pass": [50, 6, 6], "n_token": 31, "loss": [0.02396578900516033, 0.05790052190423012], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 29, "repair_targets": [3, 14], "repair_candidates": [3, 14, 2, 8, 23, 29]}}
{"prediction": {"error_location": 0.9763190150260925, "repair_targets": [0.1060301885008812, 0.8377136588096619], "repair_candidates": [0.03568519651889801, 0.1060301885008812, 0.004482095595449209, 0.8377136588096619, 0.004884315654635429, 0.011204683221876621], "target_probs": 0.9437438249588013}}


{"result": {"time": "2021-02-11 11:26:49.492754", "n_pass": [52, 7, 7], "n_token": 28, "loss": [0.07818156480789185, 0.012590238824486732], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", ".", "writeSequence", ",", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 26, "repair_targets": [3, 11], "repair_candidates": [3, 11, 2, 8, 20, 26]}}
{"prediction": {"error_location": 0.9247965812683105, "repair_targets": [0.04331132397055626, 0.9441773891448975], "repair_candidates": [0.00545891048386693, 0.04331132397055626, 0.006890740245580673, 0.9441773891448975, 0.0001315200497629121, 3.027448292414192e-05], "target_probs": 0.9874886870384216}}


{"result": {"time": "2021-02-11 11:26:49.547656", "n_pass": [54, 8, 8], "n_token": 24, "loss": [0.06309673935174942, 0.00045530431088991463], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 22, "repair_targets": [3, 11], "repair_candidates": [3, 11, 2, 8, 16, 22]}}
{"prediction": {"error_location": 0.9388526678085327, "repair_targets": [0.04592037573456764, 0.953624427318573], "repair_candidates": [4.276467007002793e-05, 0.04592037573456764, 0.00040977122262120247, 0.953624427318573, 2.4144728740793653e-06, 2.319573155773469e-07], "target_probs": 0.9995447993278503}}


{"result": {"time": "2021-02-11 11:26:49.602373", "n_pass": [55, 9, 9], "n_token": 20, "loss": [0.09787748754024506, 0.0031060483306646347], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", "self", ".", "assertRaises", "(", "TypeError", ",", "self", "."]}}
{"position": {"error_location": 18, "repair_targets": [3, 11], "repair_candidates": [3, 11, 2, 8, 12, 18]}}
{"prediction": {"error_location": 0.9067599773406982, "repair_targets": [0.2631209194660187, 0.7337778210639954], "repair_candidates": [0.0011584606254473329, 0.2631209194660187, 0.0012343020644038916, 0.7337778210639954, 0.000699750380590558, 8.754452210268937e-06], "target_probs": 0.9968987703323364}}


{"result": {"time": "2021-02-11 11:26:49.713460", "n_pass": [76, 11, 10], "n_token": 18, "loss": [0.2674795985221863, 0.00607016496360302], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", "self", ".", "assertRaises", "(", "self", "."]}}
{"position": {"error_location": 16, "repair_targets": [3, 11], "repair_candidates": [3, 11, 2, 8, 12, 16]}}
{"prediction": {"error_location": 0.7653059363365173, "repair_targets": [0.5070713758468628, 0.48687681555747986], "repair_candidates": [0.001690219040028751, 0.5070713758468628, 0.0033051723148673773, 0.48687681555747986, 0.0009817200480028987, 7.468272087862715e-05], "target_probs": 0.993948221206665}}


{"result": {"time": "2021-02-11 11:26:49.768161", "n_pass": [77, 12, 11], "n_token": 17, "loss": [0.05972394719719887, 0.08923111110925674], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_writeSequenceUnicode(", "self", "p", "=", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", "self", ".", "assertRaises", "(", "self", "."]}}
{"position": {"error_location": 15, "repair_targets": [2, 10], "repair_candidates": [2, 10, 1, 7, 11, 15]}}
{"prediction": {"error_location": 0.9420245289802551, "repair_targets": [0.2428940087556839, 0.6717401742935181], "repair_candidates": [0.08424672484397888, 0.2428940087556839, 0.0006023879977874458, 0.6717401742935181, 0.0005115632084198296, 5.169495125301182e-06], "target_probs": 0.9146341681480408}}


{"result": {"time": "2021-02-11 11:26:50.042651", "n_pass": [102, 17, 12], "n_token": 16, "loss": [0.26889514923095703, 0.21114231646060944], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_writeSequenceUnicode(", "self", "p", "_pollingfile", ")", "#NEWLINE#", "self", "TypeError", ",", "p", "self", ".", "assertRaises", "(", "self", "."]}}
{"position": {"error_location": 14, "repair_targets": [2, 9], "repair_candidates": [2, 9, 1, 6, 10, 14]}}
{"prediction": {"error_location": 0.7642233371734619, "repair_targets": [0.11682801693677902, 0.6928308010101318], "repair_candidates": [0.16655582189559937, 0.11682801693677902, 0.017523812130093575, 0.6928308010101318, 0.006207708269357681, 5.39670254511293e-05], "target_probs": 0.8096588253974915}}




Minimal simplified tokens:

['def test_writeSequenceUnicode(', 'self', 'p', '_pollingfile', ')', '#NEWLINE#', 'self', 'TypeError', ',', 'p', 'self', '.', 'assertRaises', '(', 'self', '.']
