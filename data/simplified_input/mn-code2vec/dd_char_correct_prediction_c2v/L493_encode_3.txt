
path = /scratch/rabin/data/code2vec/transforms/Methods/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence_encode.java
method_name = encode
method_body = void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERTags.CONSTRUCTED, encoded); } else { super.toDLObject().encode(out); } }
predict, score, loss = encode, 0.9989752769470215, 0.0013561585219576955

Trace of simplified code(s):
{"time": "2021-05-26 18:23:29.392998", "score": "0.999", "loss": "0.0014", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERTags.CONSTRUCTED, encoded); } else { super.toDLObject().encode(out); } }", "n_tokens": 189, "n_pass": [1, 1, 1]}
{"time": "2021-05-26 18:23:32.007676", "score": "0.9896", "loss": "0.0162", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else { super.toDLObject().encode(out); } }", "n_tokens": 165, "n_pass": [25, 2, 2]}
{"time": "2021-05-26 18:23:34.590935", "score": "0.9963", "loss": "0.0049", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else {bject().encode(out); } }", "n_tokens": 153, "n_pass": [48, 3, 3]}
{"time": "2021-05-26 18:23:37.170266", "score": "0.9966", "loss": "0.0049", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 141, "n_pass": [49, 4, 4]}
{"time": "2021-05-26 18:23:39.836298", "score": "0.9925", "loss": "0.0238", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { outd(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 129, "n_pass": [58, 5, 5]}
{"time": "2021-05-26 18:23:42.463102", "score": "0.9925", "loss": "0.0195", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 117, "n_pass": [60, 6, 6]}
{"time": "2021-05-26 18:23:45.857953", "score": "0.9959", "loss": "0.0142", "code": "void encode(ASNtStream out) throws IOException { if (encoded != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 111, "n_pass": [98, 7, 7]}
{"time": "2021-05-26 18:23:48.441641", "score": "0.9959", "loss": "0.0142", "code": "void encode(ASNm out) throws IOException { if (encoded != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 105, "n_pass": [99, 8, 8]}
{"time": "2021-05-26 18:23:51.011038", "score": "0.9978", "loss": "0.0079", "code": "void encode(ASNm out) throws IOExn { if (encoded != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 99, "n_pass": [103, 9, 9]}
{"time": "2021-05-26 18:23:56.989878", "score": "0.9809", "loss": "0.1152", "code": "void encode(ASNm out) throws IOExn { if (eded != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 96, "n_pass": [158, 11, 10]}
{"time": "2021-05-26 18:23:59.565955", "score": "0.9306", "loss": "0.3681", "code": "void encode(ASNm out) throws IOExn { if (e != null) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 93, "n_pass": [159, 12, 11]}
{"time": "2021-05-26 18:24:02.152221", "score": "0.9481", "loss": "0.2728", "code": "void encode(ASNm out) throws IOExn { if (e !=ll) { outd(BERTags.SEd); } else {de(out); } }", "n_tokens": 90, "n_pass": [161, 13, 12]}
{"time": "2021-05-26 18:24:04.719315", "score": "0.9791", "loss": "0.0544", "code": "void encode(ASNm out) throws IOExn { if (e !=ll) { d(BERTags.SEd); } else {de(out); } }", "n_tokens": 87, "n_pass": [164, 14, 13]}
{"time": "2021-05-26 18:24:15.148730", "score": "0.9793", "loss": "0.057", "code": "void encode(ASNm out) throws IOExn { if (e !=ll) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 84, "n_pass": [174, 18, 14]}
{"time": "2021-05-26 18:24:17.731335", "score": "0.9737", "loss": "0.0845", "code": "id encode(ASNm out) throws IOExn { if (e !=ll) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 82, "n_pass": [177, 19, 15]}
{"time": "2021-05-26 18:24:21.496242", "score": "0.977", "loss": "0.0703", "code": "id encode(m out) throws IOExn { if (e !=ll) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 79, "n_pass": [182, 20, 16]}
{"time": "2021-05-26 18:24:24.072329", "score": "0.976", "loss": "0.0675", "code": "id encode(m out) throws In { if (e !=ll) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 76, "n_pass": [188, 21, 17]}
{"time": "2021-05-26 18:24:26.646581", "score": "0.9297", "loss": "0.1563", "code": "id encode(m out) throws In { if (ell) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 73, "n_pass": [192, 22, 18]}
{"time": "2021-05-26 18:24:39.963452", "score": "0.8887", "loss": "0.2825", "code": "id encode(m out) throws n { if (ell) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 72, "n_pass": [268, 26, 19]}
{"time": "2021-05-26 18:24:42.537652", "score": "0.8887", "loss": "0.2825", "code": "id encode(m out) throws n{ if (ell) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 71, "n_pass": [270, 27, 20]}
{"time": "2021-05-26 18:24:45.133301", "score": "0.9853", "loss": "0.0394", "code": "id encode(m out) throws n{ if (l) { d(BERTags.SEd); } else {de(); } }", "n_tokens": 69, "n_pass": [274, 28, 21]}
{"time": "2021-05-26 18:24:47.704049", "score": "0.9906", "loss": "0.025", "code": "id encode(m out) throws n{ if (l) {(BERTags.SEd); } else {de(); } }", "n_tokens": 67, "n_pass": [277, 29, 22]}
{"time": "2021-05-26 18:25:00.583860", "score": "0.9756", "loss": "0.0555", "code": "id encode(m out) throws n{ if (l) {(BERTags.S); } else {de(); } }", "n_tokens": 65, "n_pass": [283, 34, 23]}
{"time": "2021-05-26 18:25:03.161389", "score": "0.9898", "loss": "0.0209", "code": "d encode(m out) throws n{ if (l) {(BERTags.S); } else {de(); } }", "n_tokens": 64, "n_pass": [294, 35, 24]}
{"time": "2021-05-26 18:25:08.863754", "score": "0.9712", "loss": "0.0577", "code": "d encode(m ut) throws n{ if (l) {(BERTags.S); } else {de(); } }", "n_tokens": 63, "n_pass": [306, 36, 25]}
{"time": "2021-05-26 18:25:11.432020", "score": "0.9889", "loss": "0.0203", "code": "d encode(m t) throws n{ if (l) {(BERTags.S); } else {de(); } }", "n_tokens": 62, "n_pass": [307, 37, 26]}
{"time": "2021-05-26 18:25:14.002547", "score": "0.9889", "loss": "0.0203", "code": "d encode(m t)throws n{ if (l) {(BERTags.S); } else {de(); } }", "n_tokens": 61, "n_pass": [310, 38, 27]}
{"time": "2021-05-26 18:25:24.286501", "score": "0.9905", "loss": "0.015", "code": "d encode(m t)throws n{ if (l) {(BERTags); } else {de(); } }", "n_tokens": 59, "n_pass": [328, 42, 28]}
{"time": "2021-05-26 18:25:41.339836", "score": "0.9905", "loss": "0.015", "code": "d encode(m t)throws n{ if (l) {(BERTags); } else{de(); } }", "n_tokens": 58, "n_pass": [411, 46, 29]}
{"time": "2021-05-26 18:25:43.928072", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{ if (l) {(BERTags); } else{e(); } }", "n_tokens": 57, "n_pass": [413, 47, 30]}
{"time": "2021-05-26 18:25:46.495697", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{ if (l) {(BERTags); } else{e();} }", "n_tokens": 56, "n_pass": [418, 48, 31]}
{"time": "2021-05-26 18:25:49.096759", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{ if (l) {(BERTags); } else{e();}}", "n_tokens": 55, "n_pass": [420, 49, 32]}
{"time": "2021-05-26 18:25:54.832362", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{if (l) {(BERTags); } else{e();}}", "n_tokens": 54, "n_pass": [444, 50, 33]}
{"time": "2021-05-26 18:25:57.403497", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{if(l) {(BERTags); } else{e();}}", "n_tokens": 53, "n_pass": [447, 51, 34]}
{"time": "2021-05-26 18:25:59.995852", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{if(l){(BERTags); } else{e();}}", "n_tokens": 52, "n_pass": [451, 52, 35]}
{"time": "2021-05-26 18:26:20.685747", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{if(l){(BERTags);} else{e();}}", "n_tokens": 51, "n_pass": [463, 60, 36]}
{"time": "2021-05-26 18:26:23.248469", "score": "0.9864", "loss": "0.0204", "code": "d encode(m t)throws n{if(l){(BERTags);}else{e();}}", "n_tokens": 50, "n_pass": [465, 61, 37]}

Minimal simplified code:
d encode(m t)throws n{if(l){(BERTags);}else{e();}}

