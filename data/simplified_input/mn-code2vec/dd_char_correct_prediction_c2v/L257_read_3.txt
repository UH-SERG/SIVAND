
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/simplemagic/src/main/java/com/j256/simplemagic/ContentInfoInputStreamWrapper_read.java
method_name = read
method_body = @Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }
predict, score, loss = read, 0.9825207591056824, 0.022601159289479256

Trace of simplified code(s):
{"time": "2021-02-23 00:43:15.949643", "score": "0.9928", "loss": "0.0083", "code": "@Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 291, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 00:43:18.976134", "score": "0.9195", "loss": "0.1215", "code": "nt read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 273, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 00:43:21.599841", "score": "0.9196", "loss": "0.118", "code": "nt read(byte[] b, int off, int len)  { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 255, "n_pass": [46, 3, 3]}
{"time": "2021-02-23 00:43:24.259686", "score": "0.7678", "loss": "0.4578", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 246, "n_pass": [91, 4, 4]}
{"time": "2021-02-23 00:43:26.918192", "score": "0.7085", "loss": "0.5538", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByh - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 237, "n_pass": [95, 5, 5]}
{"time": "2021-02-23 00:43:29.555331", "score": "0.6728", "loss": "0.6211", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 228, "n_pass": [96, 6, 6]}
{"time": "2021-02-23 00:43:32.192403", "score": "0.8068", "loss": "0.4242", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 219, "n_pass": [100, 7, 7]}
{"time": "2021-02-23 00:43:34.843310", "score": "0.8347", "loss": "0.3138", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 210, "n_pass": [104, 8, 8]}
{"time": "2021-02-23 00:43:37.480772", "score": "0.6947", "loss": "0.5628", "code": "nt read(bint off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 201, "n_pass": [113, 9, 9]}
{"time": "2021-02-23 00:43:42.912619", "score": "0.73", "loss": "0.4985", "code": "nt read(bint off, int len)  { inmRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 197, "n_pass": [186, 11, 10]}
{"time": "2021-02-23 00:43:45.538268", "score": "0.6164", "loss": "0.6958", "code": "nt read(bint off, int len)  { ind = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 193, "n_pass": [187, 12, 11]}
{"time": "2021-02-23 00:43:48.134234", "score": "0.4533", "loss": "1.1212", "code": "nt read(bint off, int len)  { indead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 189, "n_pass": [188, 13, 12]}
{"time": "2021-02-23 00:43:50.770492", "score": "0.5426", "loss": "0.848", "code": "nt read(bint off, int len)  { in(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 185, "n_pass": [189, 14, 13]}
{"time": "2021-02-23 00:43:53.407317", "score": "0.4674", "loss": "1.0166", "code": "nt read(bint off, int len)  { in(b,  len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 181, "n_pass": [191, 15, 14]}
{"time": "2021-02-23 00:43:56.007852", "score": "0.5356", "loss": "0.895", "code": "nt read(bint off, int len)  { in(b,  len); ieft = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 177, "n_pass": [194, 16, 15]}
{"time": "2021-02-23 00:43:58.631712", "score": "0.6054", "loss": "0.7027", "code": "nt read(bint off, int len)  { in(b,  len); i= firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 173, "n_pass": [195, 17, 16]}
{"time": "2021-02-23 00:44:01.248100", "score": "0.4719", "loss": "0.9662", "code": "nt read(bint off, int len)  { in(b,  len); irstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 169, "n_pass": [196, 18, 17]}
{"time": "2021-02-23 00:44:03.853195", "score": "0.4719", "loss": "0.9662", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 164, "n_pass": [197, 19, 18]}
{"time": "2021-02-23 00:44:06.493894", "score": "0.4054", "loss": "1.1221", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 159, "n_pass": [207, 20, 19]}
{"time": "2021-02-23 00:44:09.233420", "score": "0.2687", "loss": "1.4708", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 154, "n_pass": [212, 21, 20]}
{"time": "2021-02-23 00:44:11.840324", "score": "0.2613", "loss": "1.4997", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } return numRead; }", "n_tokens": 149, "n_pass": [214, 22, 21]}
{"time": "2021-02-23 00:44:20.901596", "score": "0.409", "loss": "1.0776", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] = b[i]; } return numRead; }", "n_tokens": 146, "n_pass": [311, 25, 22]}
{"time": "2021-02-23 00:44:23.528388", "score": "0.229", "loss": "1.6312", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] [i]; } return numRead; }", "n_tokens": 143, "n_pass": [316, 26, 23]}
{"time": "2021-02-23 00:44:26.123337", "score": "0.3077", "loss": "1.3603", "code": "nt read(bint off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 140, "n_pass": [317, 27, 24]}
{"time": "2021-02-23 00:44:42.933514", "score": "0.7651", "loss": "0.5128", "code": "nt read(nt off, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 138, "n_pass": [329, 33, 25]}
{"time": "2021-02-23 00:44:45.525960", "score": "0.5283", "loss": "0.9866", "code": "nt read(nt o, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 136, "n_pass": [332, 34, 26]}
{"time": "2021-02-23 00:44:53.320513", "score": "0.5283", "loss": "0.9866", "code": "nt read(nt o, int len){ in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 134, "n_pass": [338, 37, 27]}
{"time": "2021-02-23 00:44:55.917409", "score": "0.4303", "loss": "1.2089", "code": "nt read(nt o, int len){ in(b, en); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 132, "n_pass": [343, 38, 28]}
{"time": "2021-02-23 00:44:58.533228", "score": "0.4303", "loss": "1.2089", "code": "nt read(nt o, int len){ in(b, en);ount; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 130, "n_pass": [346, 39, 29]}
{"time": "2021-02-23 00:45:01.152099", "score": "0.3971", "loss": "1.3253", "code": "nt read(nt o, int len){ in(b, en);nt; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 128, "n_pass": [347, 40, 30]}
{"time": "2021-02-23 00:45:03.772844", "score": "0.4345", "loss": "1.1876", "code": "nt read(nt o, int len){ in(b, en);; if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 126, "n_pass": [348, 41, 31]}
{"time": "2021-02-23 00:45:06.350806", "score": "0.4112", "loss": "1.2626", "code": "nt read(nt o, int len){ in(b, en);if (left > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 124, "n_pass": [349, 42, 32]}
{"time": "2021-02-23 00:45:08.959248", "score": "0.4583", "loss": "1.1017", "code": "nt read(nt o, int len){ in(b, en);if (ft > numRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 122, "n_pass": [352, 43, 33]}
{"time": "2021-02-23 00:45:11.577652", "score": "0.5903", "loss": "1.2604", "code": "nt read(nt o, int len){ in(b, en);if (ft >umRead) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 120, "n_pass": [355, 44, 34]}
{"time": "2021-02-23 00:45:14.208436", "score": "0.9858", "loss": "0.0339", "code": "nt read(nt o, int len){ in(b, en);if (ft >Read) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 118, "n_pass": [356, 45, 35]}
{"time": "2021-02-23 00:45:16.777327", "score": "0.5688", "loss": "1.5921", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {umRead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 116, "n_pass": [357, 46, 36]}
{"time": "2021-02-23 00:45:19.384818", "score": "0.5688", "loss": "1.5921", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {uead; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 114, "n_pass": [361, 47, 37]}
{"time": "2021-02-23 00:45:22.065776", "score": "0.5805", "loss": "1.6074", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {ud; } for (intoff;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 112, "n_pass": [362, 48, 38]}
{"time": "2021-02-23 00:45:24.680601", "score": "0.6258", "loss": "1.5314", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {ud; } for (off;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 109, "n_pass": [368, 49, 39]}
{"time": "2021-02-23 00:45:27.252148", "score": "0.5639", "loss": "1.7022", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {ud; } for (;+ left; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 106, "n_pass": [369, 50, 40]}
{"time": "2021-02-23 00:45:29.834528", "score": "0.5844", "loss": "1.5571", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {ud; } for (;+ t; i++) {tes[ount++] ; } return numRead; }", "n_tokens": 103, "n_pass": [371, 51, 41]}
{"time": "2021-02-23 00:45:32.490083", "score": "0.598", "loss": "1.4977", "code": "nt read(nt o, int len){ in(b, en);if (ft >ad) {ud; } for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 100, "n_pass": [373, 52, 42]}
{"time": "2021-02-23 00:45:50.071950", "score": "0.2842", "loss": "2.0721", "code": "nt read(nt o, t len){ in(b, en);if (ft >ad) {ud; } for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 98, "n_pass": [393, 58, 43]}
{"time": "2021-02-23 00:45:57.831177", "score": "0.3719", "loss": "1.4629", "code": "nt read(nt o, t len){ in(b, en);if (ftad) {ud; } for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 96, "n_pass": [406, 61, 44]}
{"time": "2021-02-23 00:46:00.406532", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft) {ud; } for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 94, "n_pass": [407, 62, 45]}
{"time": "2021-02-23 00:46:29.026241", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud; } for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 93, "n_pass": [529, 70, 46]}
{"time": "2021-02-23 00:46:36.889446", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;} for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 92, "n_pass": [534, 73, 47]}
{"time": "2021-02-23 00:46:39.567433", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for (;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 91, "n_pass": [536, 74, 48]}
{"time": "2021-02-23 00:46:42.157266", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;+ t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 90, "n_pass": [540, 75, 49]}
{"time": "2021-02-23 00:46:44.946616", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(; t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 89, "n_pass": [543, 76, 50]}
{"time": "2021-02-23 00:46:47.618678", "score": "0.343", "loss": "1.6746", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;t; ) {tes[ount++] ; } return numRead; }", "n_tokens": 88, "n_pass": [544, 77, 51]}
{"time": "2021-02-23 00:46:50.207729", "score": "0.3603", "loss": "1.617", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;; ) {tes[ount++] ; } return numRead; }", "n_tokens": 87, "n_pass": [545, 78, 52]}
{"time": "2021-02-23 00:46:52.800051", "score": "0.3603", "loss": "1.617", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;;) {tes[ount++] ; } return numRead; }", "n_tokens": 86, "n_pass": [547, 79, 53]}
{"time": "2021-02-23 00:46:55.427532", "score": "0.3603", "loss": "1.617", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;;){tes[ount++] ; } return numRead; }", "n_tokens": 85, "n_pass": [549, 80, 54]}
{"time": "2021-02-23 00:47:05.796206", "score": "0.3603", "loss": "1.617", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; } return numRead; }", "n_tokens": 84, "n_pass": [555, 84, 55]}
{"time": "2021-02-23 00:47:11.010333", "score": "0.3593", "loss": "1.7092", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn numRead; }", "n_tokens": 82, "n_pass": [561, 86, 56]}
{"time": "2021-02-23 00:47:21.466421", "score": "0.8976", "loss": "0.1129", "code": "nt read(nt o, t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 80, "n_pass": [565, 90, 57]}
{"time": "2021-02-23 00:47:29.309334", "score": "0.9227", "loss": "0.0844", "code": "t read(nt o, t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 79, "n_pass": [570, 93, 58]}
{"time": "2021-02-23 00:47:34.190213", "score": "0.989", "loss": "0.0117", "code": "t read(t o, t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 78, "n_pass": [578, 94, 59]}
{"time": "2021-02-23 00:47:36.786029", "score": "0.989", "loss": "0.0117", "code": "t read(t o,t len){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 77, "n_pass": [583, 95, 60]}
{"time": "2021-02-23 00:47:39.398498", "score": "0.9826", "loss": "0.0183", "code": "t read(t o,t en){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 76, "n_pass": [586, 96, 61]}
{"time": "2021-02-23 00:47:42.009709", "score": "0.9193", "loss": "0.0905", "code": "t read(t o,t n){ in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 75, "n_pass": [587, 97, 62]}
{"time": "2021-02-23 00:47:44.619007", "score": "0.9193", "loss": "0.0905", "code": "t read(t o,t n){in(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 74, "n_pass": [591, 98, 63]}
{"time": "2021-02-23 00:47:47.360777", "score": "0.8818", "loss": "0.1338", "code": "t read(t o,t n){n(b, en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 73, "n_pass": [592, 99, 64]}
{"time": "2021-02-23 00:47:50.029213", "score": "0.8818", "loss": "0.1338", "code": "t read(t o,t n){n(b,en);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 72, "n_pass": [597, 100, 65]}
{"time": "2021-02-23 00:47:52.615109", "score": "0.8791", "loss": "0.1381", "code": "t read(t o,t n){n(b,n);if (ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 71, "n_pass": [598, 101, 66]}
{"time": "2021-02-23 00:47:55.224982", "score": "0.8791", "loss": "0.1381", "code": "t read(t o,t n){n(b,n);if(ft){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 70, "n_pass": [604, 102, 67]}
{"time": "2021-02-23 00:47:57.820572", "score": "0.8816", "loss": "0.1359", "code": "t read(t o,t n){n(b,n);if(t){ud;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 69, "n_pass": [606, 103, 68]}
{"time": "2021-02-23 00:48:00.505822", "score": "0.8747", "loss": "0.1438", "code": "t read(t o,t n){n(b,n);if(t){d;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 68, "n_pass": [610, 104, 69]}
{"time": "2021-02-23 00:48:03.160950", "score": "0.874", "loss": "0.1445", "code": "t read(t o,t n){n(b,n);if(t){;}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 67, "n_pass": [611, 105, 70]}
{"time": "2021-02-23 00:48:05.769442", "score": "0.874", "loss": "0.1445", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){tes[unt++] ; }eturn mRead; }", "n_tokens": 66, "n_pass": [612, 106, 71]}
{"time": "2021-02-23 00:48:08.398624", "score": "0.7521", "loss": "0.2912", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){es[unt++] ; }eturn mRead; }", "n_tokens": 65, "n_pass": [622, 107, 72]}
{"time": "2021-02-23 00:48:11.010134", "score": "0.7372", "loss": "0.3112", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){s[unt++] ; }eturn mRead; }", "n_tokens": 64, "n_pass": [623, 108, 73]}
{"time": "2021-02-23 00:48:13.597678", "score": "0.723", "loss": "0.3306", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){s[t++] ; }eturn mRead; }", "n_tokens": 62, "n_pass": [626, 109, 74]}
{"time": "2021-02-23 00:48:16.164485", "score": "0.6908", "loss": "0.3886", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){s[t++] ; }urn mRead; }", "n_tokens": 60, "n_pass": [631, 110, 75]}
{"time": "2021-02-23 00:48:18.767897", "score": "0.7157", "loss": "0.3406", "code": "t read(t o,t n){n(b,n);if(t){}for(;;){s[t++] ; }n mRead; }", "n_tokens": 58, "n_pass": [632, 111, 76]}
{"time": "2021-02-23 00:48:31.361286", "score": "0.6371", "loss": "0.4591", "code": "t read(t o,t n){n(bn);if(t){}for(;;){s[t++] ; }n mRead; }", "n_tokens": 57, "n_pass": [657, 115, 77]}
{"time": "2021-02-23 00:48:33.971785", "score": "0.7249", "loss": "0.3262", "code": "t read(t o,t n){n(b);if(t){}for(;;){s[t++] ; }n mRead; }", "n_tokens": 56, "n_pass": [658, 116, 78]}
{"time": "2021-02-23 00:48:36.555387", "score": "0.3416", "loss": "1.4837", "code": "t read(t o,t n){n(b);if(t){}for(;;){s[t++] ; }mRead; }", "n_tokens": 54, "n_pass": [682, 117, 79]}
{"time": "2021-02-23 00:48:46.716412", "score": "0.357", "loss": "1.3315", "code": "t read(t o,t n){(b);if(t){}for(;;){s[t++] ; }mRead; }", "n_tokens": 53, "n_pass": [703, 120, 80]}
{"time": "2021-02-23 00:48:59.090025", "score": "0.357", "loss": "1.3315", "code": "t read(t o,t n){(b);if(t){}for(;;){s[t++]; }mRead; }", "n_tokens": 52, "n_pass": [769, 123, 81]}
{"time": "2021-02-23 00:49:01.663719", "score": "0.357", "loss": "1.3315", "code": "t read(t o,t n){(b);if(t){}for(;;){s[t++];}mRead; }", "n_tokens": 51, "n_pass": [770, 124, 82]}
{"time": "2021-02-23 00:49:17.598621", "score": "0.357", "loss": "1.3315", "code": "t read(t o,t n){(b);if(t){}for(;;){s[t++];}mRead;}", "n_tokens": 50, "n_pass": [778, 130, 83]}

Minimal simplified code:
t read(t o,t n){(b);if(t){}for(;;){s[t++];}mRead;}

