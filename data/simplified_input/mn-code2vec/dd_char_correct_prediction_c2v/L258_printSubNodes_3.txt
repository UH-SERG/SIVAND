
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CopyStatementNode_printSubNodes.java
method_name = printSubNodes
method_body = public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, "subquery: "); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, "columnList: "); columnList.treePrint(depth + 1); } }
predict, score, loss = printSubNodes, 0.999919056892395, 0.0003040566807612777

Trace of simplified code(s):
{"time": "2021-02-23 00:49:38.561533", "score": "0.9999", "loss": "0.0003", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 254, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 00:49:41.188127", "score": "0.9998", "loss": "0.0008", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); subel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 190, "n_pass": [10, 2, 2]}
{"time": "2021-02-23 00:49:43.804852", "score": "0.9999", "loss": "0.0003", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); sumnList.treePrint(depth + 1); } }", "n_tokens": 158, "n_pass": [20, 3, 3]}
{"time": "2021-02-23 00:49:46.392820", "score": "0.9999", "loss": "0.0003", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { primnList.treePrint(depth + 1); } }", "n_tokens": 126, "n_pass": [24, 4, 4]}
{"time": "2021-02-23 00:49:48.973073", "score": "0.9998", "loss": "0.0007", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { pri(depth + 1); } }", "n_tokens": 110, "n_pass": [37, 5, 5]}
{"time": "2021-02-23 00:49:51.921981", "score": "0.9998", "loss": "0.0007", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { pri(depth + 1); } }", "n_tokens": 103, "n_pass": [60, 6, 6]}
{"time": "2021-02-23 00:50:00.374699", "score": "0.9998", "loss": "0.0006", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (subquerl) { pri(depth + 1); } }", "n_tokens": 95, "n_pass": [70, 9, 7]}
{"time": "2021-02-23 00:50:09.208951", "score": "0.9999", "loss": "0.0005", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (subquerl) {(depth + 1); } }", "n_tokens": 91, "n_pass": [108, 12, 8]}
{"time": "2021-02-23 00:50:11.826476", "score": "0.9998", "loss": "0.0005", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (subquerl) {(depth + 1); } }", "n_tokens": 88, "n_pass": [113, 13, 9]}
{"time": "2021-02-23 00:50:15.545685", "score": "0.9871", "loss": "0.0217", "code": "d printSubNodes(int h) { super.printSubNodes(depth); if (subquerl) {(depth + 1); } }", "n_tokens": 84, "n_pass": [119, 14, 10]}
{"time": "2021-02-23 00:50:18.151014", "score": "0.9868", "loss": "0.0206", "code": "d printSubNodes(int h) {er.printSubNodes(depth); if (subquerl) {(depth + 1); } }", "n_tokens": 80, "n_pass": [121, 15, 11]}
{"time": "2021-02-23 00:50:31.131806", "score": "0.9867", "loss": "0.0213", "code": "d printSubNodes(int h) {er.printSubNodes(depth); if (subl) {(depth + 1); } }", "n_tokens": 76, "n_pass": [130, 20, 12]}
{"time": "2021-02-23 00:50:45.353563", "score": "0.9864", "loss": "0.0223", "code": "d printSubNodes(int h) {er.printSubNodes(depth); if (subl) {(dth + 1); } }", "n_tokens": 74, "n_pass": [191, 25, 13]}
{"time": "2021-02-23 00:50:47.936863", "score": "0.9865", "loss": "0.0215", "code": "d printSubNodes(int h) {er.printSubNodes(depth); if (subl) {(d + 1); } }", "n_tokens": 72, "n_pass": [192, 26, 14]}
{"time": "2021-02-23 00:50:53.163489", "score": "0.8861", "loss": "0.1563", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (subl) {(d + 1); } }", "n_tokens": 70, "n_pass": [206, 27, 15]}
{"time": "2021-02-23 00:51:19.297568", "score": "0.886", "loss": "0.1532", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (sl) {(d + 1); } }", "n_tokens": 68, "n_pass": [225, 37, 16]}
{"time": "2021-02-23 00:51:52.242157", "score": "0.8865", "loss": "0.1522", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s) {(d + 1); } }", "n_tokens": 67, "n_pass": [328, 47, 17]}
{"time": "2021-02-23 00:51:54.849161", "score": "0.8865", "loss": "0.1522", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){(d + 1); } }", "n_tokens": 66, "n_pass": [329, 48, 18]}
{"time": "2021-02-23 00:51:57.466490", "score": "0.8866", "loss": "0.152", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){( + 1); } }", "n_tokens": 65, "n_pass": [332, 49, 19]}
{"time": "2021-02-23 00:52:00.052723", "score": "0.8866", "loss": "0.152", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){(+ 1); } }", "n_tokens": 64, "n_pass": [333, 50, 20]}
{"time": "2021-02-23 00:52:02.917121", "score": "0.8864", "loss": "0.1523", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){( 1); } }", "n_tokens": 63, "n_pass": [334, 51, 21]}
{"time": "2021-02-23 00:52:05.513302", "score": "0.8864", "loss": "0.1523", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){(1); } }", "n_tokens": 62, "n_pass": [335, 52, 22]}
{"time": "2021-02-23 00:52:08.098860", "score": "0.8864", "loss": "0.1523", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){(1);} }", "n_tokens": 61, "n_pass": [339, 53, 23]}
{"time": "2021-02-23 00:52:10.688177", "score": "0.8864", "loss": "0.1523", "code": "d printSubNodes(t h) {er.printSubNodes(depth); if (s){(1);}}", "n_tokens": 60, "n_pass": [341, 54, 24]}
{"time": "2021-02-23 00:52:19.029197", "score": "0.8864", "loss": "0.1523", "code": "d printSubNodes(t h){er.printSubNodes(depth); if (s){(1);}}", "n_tokens": 59, "n_pass": [363, 55, 25]}
{"time": "2021-02-23 00:52:21.600481", "score": "0.8872", "loss": "0.1516", "code": "d printSubNodes(t h){r.printSubNodes(depth); if (s){(1);}}", "n_tokens": 58, "n_pass": [365, 56, 26]}
{"time": "2021-02-23 00:53:13.545418", "score": "0.8872", "loss": "0.1516", "code": "d printSubNodes(t h){r.printSubNodes(depth);if (s){(1);}}", "n_tokens": 57, "n_pass": [389, 76, 27]}
{"time": "2021-02-23 00:53:16.107820", "score": "0.8872", "loss": "0.1516", "code": "d printSubNodes(t h){r.printSubNodes(depth);if(s){(1);}}", "n_tokens": 56, "n_pass": [392, 77, 28]}

Minimal simplified code:
d printSubNodes(t h){r.printSubNodes(depth);if(s){(1);}}

