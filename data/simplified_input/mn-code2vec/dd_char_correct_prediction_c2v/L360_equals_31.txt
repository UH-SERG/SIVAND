
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/vladmihalcea__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/book/hpjp/hibernate/association/UnidirectionalOneToManyJoinColumnSetTest_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; PostComment comment = (PostComment) o; return Objects.equals(slug, comment.slug); }
predict, score, loss = equals, 0.9998255372047424, 0.0002227773511549458

Trace of simplified code(s):
{"time": "2021-02-25 06:20:02.617611", "score": "0.9998", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; PostComment comment = (PostComment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 214, "n_pass": [1, 1, 1]}
{"time": "2021-02-25 06:20:05.344493", "score": "0.9999", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.gmment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 160, "n_pass": [10, 2, 2]}
{"time": "2021-02-25 06:20:08.755046", "score": "0.9977", "loss": "0.0048", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o =mment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 133, "n_pass": [25, 3, 3]}
{"time": "2021-02-25 06:20:11.810449", "score": "0.8834", "loss": "0.1759", "code": "@Override public boolean equals(Object o) { if (thismment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 106, "n_pass": [30, 4, 4]}
{"time": "2021-02-25 06:20:17.903488", "score": "0.8268", "loss": "0.246", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 99, "n_pass": [67, 6, 5]}
{"time": "2021-02-25 06:20:25.868448", "score": "0.7442", "loss": "0.4178", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(smment.slug); }", "n_tokens": 92, "n_pass": [72, 9, 6]}
{"time": "2021-02-25 06:20:28.485692", "score": "0.8733", "loss": "0.1494", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 85, "n_pass": [73, 10, 7]}
{"time": "2021-02-25 06:20:31.095438", "score": "0.8805", "loss": "0.142", "code": "@Overrblic boolean equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 79, "n_pass": [76, 11, 8]}
{"time": "2021-02-25 06:20:34.095464", "score": "0.7906", "loss": "0.4053", "code": "@Overrblic b equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 73, "n_pass": [78, 12, 9]}
{"time": "2021-02-25 06:20:46.337014", "score": "0.8675", "loss": "0.1908", "code": "@Overrblic b equals(Object o) { if (th) return Objects.equals(slug); }", "n_tokens": 70, "n_pass": [121, 16, 10]}
{"time": "2021-02-25 06:20:51.544468", "score": "0.9185", "loss": "0.1177", "code": "@Overrblic b equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 66, "n_pass": [125, 18, 11]}
{"time": "2021-02-25 06:20:59.417711", "score": "0.9185", "loss": "0.1177", "code": "@Ovblic b equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 63, "n_pass": [131, 21, 12]}
{"time": "2021-02-25 06:21:02.022536", "score": "0.9071", "loss": "0.1416", "code": "@Ovc b equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 60, "n_pass": [132, 22, 13]}
{"time": "2021-02-25 06:21:14.398589", "score": "0.9294", "loss": "0.1024", "code": "@Oc b equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 59, "n_pass": [187, 26, 14]}
{"time": "2021-02-25 06:21:17.032140", "score": "0.9217", "loss": "0.1109", "code": "@O b equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 58, "n_pass": [188, 27, 15]}
{"time": "2021-02-25 06:21:22.776700", "score": "0.7438", "loss": "0.4564", "code": "@O b equals(ject o) { if (th) return Obj.equals(slug); }", "n_tokens": 56, "n_pass": [198, 28, 16]}
{"time": "2021-02-25 06:21:25.405717", "score": "0.7358", "loss": "0.4516", "code": "@O b equals(ct o) { if (th) return Obj.equals(slug); }", "n_tokens": 54, "n_pass": [199, 29, 17]}
{"time": "2021-02-25 06:21:30.641989", "score": "0.5969", "loss": "0.6868", "code": "@O b equals(ct o) { if (th) return O.equals(slug); }", "n_tokens": 52, "n_pass": [212, 31, 18]}
{"time": "2021-02-25 06:21:41.164973", "score": "0.8131", "loss": "0.4997", "code": "@O b equals(ct o) { if (th) return O.equals(ug); }", "n_tokens": 50, "n_pass": [217, 35, 19]}
{"time": "2021-02-25 06:22:00.588055", "score": "0.3664", "loss": "1.231", "code": "@O b equals(ct o) { if (th) return O.equals(u); }", "n_tokens": 49, "n_pass": [288, 40, 20]}
{"time": "2021-02-25 06:22:03.223245", "score": "0.3664", "loss": "1.231", "code": "@O b equals(ct o) { if (th) return O.equals(u);}", "n_tokens": 48, "n_pass": [291, 41, 21]}
{"time": "2021-02-25 06:22:12.336704", "score": "0.5484", "loss": "0.7371", "code": "@O b equals(c o) { if (th) return O.equals(u);}", "n_tokens": 47, "n_pass": [306, 43, 22]}
{"time": "2021-02-25 06:22:14.940079", "score": "0.5484", "loss": "0.7371", "code": "@O b equals(c o){ if (th) return O.equals(u);}", "n_tokens": 46, "n_pass": [310, 44, 23]}
{"time": "2021-02-25 06:22:17.544114", "score": "0.5484", "loss": "0.7371", "code": "@O b equals(c o){if (th) return O.equals(u);}", "n_tokens": 45, "n_pass": [312, 45, 24]}
{"time": "2021-02-25 06:22:20.138858", "score": "0.5484", "loss": "0.7371", "code": "@O b equals(c o){if(th) return O.equals(u);}", "n_tokens": 44, "n_pass": [315, 46, 25]}
{"time": "2021-02-25 06:22:22.762568", "score": "0.6403", "loss": "0.5584", "code": "@O b equals(c o){if(h) return O.equals(u);}", "n_tokens": 43, "n_pass": [317, 47, 26]}
{"time": "2021-02-25 06:22:25.380859", "score": "0.6403", "loss": "0.5584", "code": "@O b equals(c o){if(h)return O.equals(u);}", "n_tokens": 42, "n_pass": [320, 48, 27]}

Minimal simplified code:
@O b equals(c o){if(h)return O.equals(u);}

