
path = /scratch/rabin/data/code2vec/transforms/Methods/java-large/test/bcgit__bc-java/core/src/main/jdk1.1/java/security/cert/CertPath_toString.java
method_name = toString
method_body = public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); s.append('\n').append(getType()).append(" Cert Path: length = ").append(certs.size()).append("\n[\n"); while (iter.hasNext()) { s.append("=========================================================Certificate ").append(iter.nextIndex()).append('\n'); s.append(iter.next()).append('\n'); s.append("========================================================Certificate end\n\n\n"); } s.append("\n]"); return s.toString(); }
predict, score, loss = toString, 0.9582758545875549, 0.32477158308029175

Trace of simplified code(s):
{"time": "2021-05-26 16:48:34.319103", "score": "0.9784", "loss": "0.0805", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); s.append('\\n').append(getType()).append(\" Cert Path: length = \").append(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"=========================================================Certificate \").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 555, "n_pass": [1, 1, 1]}
{"time": "2021-05-26 16:48:39.572557", "score": "0.9788", "loss": "0.036", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); s.append('\\n').append(getType()).append(\" Cert Path: length = \").append(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 486, "n_pass": [24, 3, 2]}
{"time": "2021-05-26 16:48:42.185329", "score": "0.826", "loss": "0.5705", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 417, "n_pass": [30, 4, 3]}
{"time": "2021-05-26 16:48:45.265951", "score": "0.8883", "loss": "0.262", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 382, "n_pass": [49, 5, 4]}
{"time": "2021-05-26 16:48:47.906133", "score": "0.8995", "loss": "0.4879", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 347, "n_pass": [54, 6, 5]}
{"time": "2021-05-26 16:48:50.522816", "score": "0.8079", "loss": "0.407", "code": "public String toString() { StringB certs = getCertificates(); ListIterator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 313, "n_pass": [58, 7, 6]}
{"time": "2021-05-26 16:48:53.134371", "score": "0.9862", "loss": "0.0429", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 279, "n_pass": [59, 8, 7]}
{"time": "2021-05-26 16:48:55.745983", "score": "0.9888", "loss": "0.023", "code": "public String toString() { StringBts.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 262, "n_pass": [84, 9, 8]}
{"time": "2021-05-26 16:48:58.355520", "score": "0.9979", "loss": "0.0037", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 245, "n_pass": [85, 10, 9]}
{"time": "2021-05-26 16:49:00.977251", "score": "0.9938", "loss": "0.0128", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 228, "n_pass": [90, 11, 10]}
{"time": "2021-05-26 16:49:03.587301", "score": "0.9965", "loss": "0.0068", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).appeend('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 210, "n_pass": [91, 12, 11]}
{"time": "2021-05-26 16:49:06.180820", "score": "0.9872", "loss": "0.0238", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 192, "n_pass": [92, 13, 12]}
{"time": "2021-05-26 16:49:08.775742", "score": "0.9964", "loss": "0.0052", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 174, "n_pass": [94, 14, 13]}
{"time": "2021-05-26 16:49:11.776464", "score": "0.9977", "loss": "0.0074", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 165, "n_pass": [125, 15, 14]}
{"time": "2021-05-26 16:49:14.355257", "score": "0.993", "loss": "0.0428", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============\"); } s.append(\"\\n]\"); returing(); }", "n_tokens": 156, "n_pass": [128, 16, 15]}
{"time": "2021-05-26 16:49:16.992535", "score": "0.2608", "loss": "3.9731", "code": "tring toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============\"); } s.append(\"\\n]\"); returing(); }", "n_tokens": 148, "n_pass": [130, 17, 16]}
{"time": "2021-05-26 16:49:20.011311", "score": "0.244", "loss": "4.064", "code": "tring toString() { StringB;while (iter.hasNext()) { s.appepend(iter.nextIndex()).apped(\"===============\"); } s.append(\"\\n]\"); returing(); }", "n_tokens": 139, "n_pass": [138, 18, 17]}
{"time": "2021-05-26 16:49:22.595089", "score": "0.2688", "loss": "3.9724", "code": "tring toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"===============\"); } s.append(\"\\n]\"); returing(); }", "n_tokens": 130, "n_pass": [140, 19, 18]}
{"time": "2021-05-26 16:49:25.184502", "score": "0.7981", "loss": "1.079", "code": "tring toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); returing(); }", "n_tokens": 121, "n_pass": [143, 20, 19]}
{"time": "2021-05-26 16:49:30.806705", "score": "0.8572", "loss": "0.7911", "code": "tring toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 116, "n_pass": [192, 22, 20]}
{"time": "2021-05-26 16:49:33.416732", "score": "0.9683", "loss": "0.0903", "code": "g toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 112, "n_pass": [194, 23, 21]}
{"time": "2021-05-26 16:49:36.810037", "score": "0.9646", "loss": "0.1129", "code": "g toString() { SgB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 108, "n_pass": [199, 24, 22]}
{"time": "2021-05-26 16:49:39.412858", "score": "0.9623", "loss": "0.1249", "code": "g toString() { SgB;while (itasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 104, "n_pass": [203, 25, 23]}
{"time": "2021-05-26 16:49:41.989471", "score": "0.7762", "loss": "0.6423", "code": "g toString() { SgB;while (itxt()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 100, "n_pass": [204, 26, 24]}
{"time": "2021-05-26 16:49:44.564424", "score": "0.8953", "loss": "0.2763", "code": "g toString() { SgB;while (it) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 96, "n_pass": [205, 27, 25]}
{"time": "2021-05-26 16:49:47.136059", "score": "0.9179", "loss": "0.267", "code": "g toString() { SgB;while (it) { pepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 92, "n_pass": [207, 28, 26]}
{"time": "2021-05-26 16:49:49.718053", "score": "0.9171", "loss": "0.2772", "code": "g toString() { SgB;while (it) { nd(iterx()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 88, "n_pass": [208, 29, 27]}
{"time": "2021-05-26 16:49:52.294273", "score": "0.9255", "loss": "0.248", "code": "g toString() { SgB;while (it) { nd(i()).apped(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 84, "n_pass": [210, 30, 28]}
{"time": "2021-05-26 16:49:54.866500", "score": "0.9786", "loss": "0.0575", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); } s.append(\"\\n]\"); ret(); }", "n_tokens": 80, "n_pass": [212, 31, 29]}
{"time": "2021-05-26 16:49:57.453906", "score": "0.3984", "loss": "1.4752", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); } end(\"\\n]\"); ret(); }", "n_tokens": 75, "n_pass": [216, 32, 30]}
{"time": "2021-05-26 16:50:00.823386", "score": "0.7186", "loss": "0.8299", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); }d(\"\\n]\"); ret(); }", "n_tokens": 72, "n_pass": [269, 33, 31]}
{"time": "2021-05-26 16:50:03.408869", "score": "0.5374", "loss": "0.9683", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); }d(\"\"); ret(); }", "n_tokens": 69, "n_pass": [271, 34, 32]}
{"time": "2021-05-26 16:50:05.984081", "score": "0.4755", "loss": "1.1431", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); }d(\"\");t(); }", "n_tokens": 66, "n_pass": [273, 35, 33]}
{"time": "2021-05-26 16:50:08.552505", "score": "0.5213", "loss": "0.9962", "code": "g toString() { SgB;while (it) { nd(i()).d(\"======\"); }d(\"\");; }", "n_tokens": 63, "n_pass": [274, 36, 34]}
{"time": "2021-05-26 16:50:13.085589", "score": "0.6153", "loss": "0.763", "code": "g toString() {gB;while (it) { nd(i()).d(\"======\"); }d(\"\");; }", "n_tokens": 61, "n_pass": [283, 37, 35]}
{"time": "2021-05-26 16:50:15.674289", "score": "0.6151", "loss": "0.7556", "code": "g toString() {;while (it) { nd(i()).d(\"======\"); }d(\"\");; }", "n_tokens": 59, "n_pass": [284, 38, 36]}
{"time": "2021-05-26 16:50:18.247816", "score": "0.6919", "loss": "0.5737", "code": "g toString() {;while (it) { (i()).d(\"======\"); }d(\"\");; }", "n_tokens": 57, "n_pass": [292, 39, 37]}
{"time": "2021-05-26 16:50:20.817190", "score": "0.6909", "loss": "0.5755", "code": "g toString() {;while (it) { (i).d(\"======\"); }d(\"\");; }", "n_tokens": 55, "n_pass": [294, 40, 38]}
{"time": "2021-05-26 16:50:49.535817", "score": "0.6909", "loss": "0.5755", "code": "g toString() {;while (it) { (i).d(\"======\");}d(\"\");; }", "n_tokens": 54, "n_pass": [387, 49, 39]}
{"time": "2021-05-26 16:50:52.098541", "score": "0.875", "loss": "0.2318", "code": "g toString() {;while (it) { (i).d(\"======\");}(\"\");; }", "n_tokens": 53, "n_pass": [388, 50, 40]}
{"time": "2021-05-26 16:50:58.578554", "score": "0.875", "loss": "0.2318", "code": "g toString(){;while (it) { (i).d(\"======\");}(\"\");; }", "n_tokens": 52, "n_pass": [406, 51, 41]}
{"time": "2021-05-26 16:51:01.137805", "score": "0.875", "loss": "0.2318", "code": "g toString(){while (it) { (i).d(\"======\");}(\"\");; }", "n_tokens": 51, "n_pass": [408, 52, 42]}
{"time": "2021-05-26 16:51:03.699835", "score": "0.875", "loss": "0.2318", "code": "g toString(){while(it) { (i).d(\"======\");}(\"\");; }", "n_tokens": 50, "n_pass": [414, 53, 43]}
{"time": "2021-05-26 16:51:06.257565", "score": "0.8755", "loss": "0.2293", "code": "g toString(){while(t) { (i).d(\"======\");}(\"\");; }", "n_tokens": 49, "n_pass": [416, 54, 44]}
{"time": "2021-05-26 16:51:08.820648", "score": "0.8755", "loss": "0.2293", "code": "g toString(){while(t){ (i).d(\"======\");}(\"\");; }", "n_tokens": 48, "n_pass": [419, 55, 45]}
{"time": "2021-05-26 16:51:11.408448", "score": "0.8755", "loss": "0.2293", "code": "g toString(){while(t){(i).d(\"======\");}(\"\");; }", "n_tokens": 47, "n_pass": [421, 56, 46]}
{"time": "2021-05-26 16:51:34.789440", "score": "0.8755", "loss": "0.2293", "code": "g toString(){while(t){(i).d(\"======\");}(\"\"); }", "n_tokens": 46, "n_pass": [474, 63, 47]}
{"time": "2021-05-26 16:51:37.349977", "score": "0.8755", "loss": "0.2293", "code": "g toString(){while(t){(i).d(\"======\");}(\"\");}", "n_tokens": 45, "n_pass": [475, 64, 48]}

Minimal simplified code:
g toString(){while(t){(i).d("======");}("");}

