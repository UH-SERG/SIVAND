
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/main/java/edu/illinois/cs/cogcomp/core/datastructures/vectors/OVector_toString.java
method_name = toString
method_body = public String toString() { StringBuffer result = new StringBuffer(); result.append("["); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(", "); } result.append("]"); return result.toString(); }
predict, score, loss = toString, 0.9989089965820312, 0.0022446929942816496

Trace of simplified code(s):
{"time": "2021-02-22 00:52:32.670679", "score": "0.9993", "loss": "0.0012", "code": "public String toString() { StringBuffer result = new StringBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 236, "n_pass": [1, 1, 1]}
{"time": "2021-02-22 00:52:35.346849", "score": "0.999", "loss": "0.0021", "code": "public String toString() { StgBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 207, "n_pass": [21, 2, 2]}
{"time": "2021-02-22 00:52:38.025795", "score": "0.9992", "loss": "0.0014", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 178, "n_pass": [22, 3, 3]}
{"time": "2021-02-22 00:52:40.767553", "score": "0.9993", "loss": "0.0014", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 163, "n_pass": [44, 4, 4]}
{"time": "2021-02-22 00:52:43.809038", "score": "0.9977", "loss": "0.0053", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 156, "n_pass": [79, 5, 5]}
{"time": "2021-02-22 00:52:46.498639", "score": "0.9646", "loss": "0.1089", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); return result.toString(); }", "n_tokens": 148, "n_pass": [83, 6, 6]}
{"time": "2021-02-22 00:52:49.121188", "score": "0.7935", "loss": "0.7746", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); retlt.toString(); }", "n_tokens": 140, "n_pass": [86, 7, 7]}
{"time": "2021-02-22 00:52:51.808021", "score": "0.6666", "loss": "1.3218", "code": "public String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 132, "n_pass": [87, 8, 8]}
{"time": "2021-02-22 00:52:54.460967", "score": "0.6666", "loss": "1.3218", "code": "String toString() { St; for (int i = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 125, "n_pass": [89, 9, 9]}
{"time": "2021-02-22 00:53:04.464375", "score": "0.9722", "loss": "0.0954", "code": "String toString() { St; for (ii = 0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 122, "n_pass": [151, 12, 10]}
{"time": "2021-02-22 00:53:07.076373", "score": "0.9149", "loss": "0.3928", "code": "String toString() { St; for (i0; i < size; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 118, "n_pass": [152, 13, 11]}
{"time": "2021-02-22 00:53:09.680411", "score": "0.8692", "loss": "0.6524", "code": "String toString() { St; for (i0; iize; ++i) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 114, "n_pass": [154, 14, 12]}
{"time": "2021-02-22 00:53:12.334659", "score": "0.9342", "loss": "0.3349", "code": "String toString() { St; for (i0; iize;) { result.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 110, "n_pass": [156, 15, 13]}
{"time": "2021-02-22 00:53:14.990740", "score": "0.9353", "loss": "0.3856", "code": "String toString() { St; for (i0; iize;) { lt.ap; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 106, "n_pass": [158, 16, 14]}
{"time": "2021-02-22 00:53:17.598419", "score": "0.9305", "loss": "0.355", "code": "String toString() { St; for (i0; iize;) { p; if (i + 1) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 102, "n_pass": [159, 17, 15]}
{"time": "2021-02-22 00:53:20.197415", "score": "0.9065", "loss": "0.4916", "code": "String toString() { St; for (i0; iize;) { p; if (i) result.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 98, "n_pass": [162, 18, 16]}
{"time": "2021-02-22 00:53:22.798767", "score": "0.8708", "loss": "0.6695", "code": "String toString() { St; for (i0; iize;) { p; if (i) re.append(\", \"); }append(\"]\"); reting(); }", "n_tokens": 94, "n_pass": [164, 19, 17]}
{"time": "2021-02-22 00:53:28.025149", "score": "0.5898", "loss": "1.4718", "code": "String toString() { St; for (i0; iize;) { p; if (i) re.append(); }append(\"]\"); reting(); }", "n_tokens": 90, "n_pass": [167, 21, 18]}
{"time": "2021-02-22 00:53:30.649352", "score": "0.3925", "loss": "2.5961", "code": "String toString() { St; for (i0; iize;) { p; if (i) re.append(); }nd(\"]\"); reting(); }", "n_tokens": 86, "n_pass": [169, 22, 19]}
{"time": "2021-02-22 00:53:48.485942", "score": "0.3925", "loss": "2.5961", "code": "String toString() { St; for (i0; iize;) { p; if (i) re.append(); }nd(\"]\");eting(); }", "n_tokens": 84, "n_pass": [246, 28, 20]}
{"time": "2021-02-22 00:53:51.126095", "score": "0.3925", "loss": "2.5961", "code": "String toString() { St; for (i0; iize;) { p; if (i) re.append(); }nd(\"]\");etg(); }", "n_tokens": 82, "n_pass": [247, 29, 21]}
{"time": "2021-02-22 00:54:11.856981", "score": "0.3842", "loss": "2.6213", "code": "String toString() { ; for (i0; iize;) { p; if (i) re.append(); }nd(\"]\");etg(); }", "n_tokens": 80, "n_pass": [266, 36, 22]}
{"time": "2021-02-22 00:54:14.499579", "score": "0.3842", "loss": "2.6213", "code": "String toString() { for (i0; iize;) { p; if (i) re.append(); }nd(\"]\");etg(); }", "n_tokens": 78, "n_pass": [267, 37, 23]}
{"time": "2021-02-22 00:54:19.744492", "score": "0.376", "loss": "2.7504", "code": "String toString() { for (i0; ie;) { p; if (i) re.append(); }nd(\"]\");etg(); }", "n_tokens": 76, "n_pass": [273, 39, 24]}
{"time": "2021-02-22 00:54:22.354118", "score": "0.3679", "loss": "2.761", "code": "String toString() { for (i0; ie;) {  if (i) re.append(); }nd(\"]\");etg(); }", "n_tokens": 74, "n_pass": [277, 40, 25]}
{"time": "2021-02-22 00:54:24.964951", "score": "0.2565", "loss": "3.2742", "code": "String toString() { for (i0; ie;) {  if (i) reppend(); }nd(\"]\");etg(); }", "n_tokens": 72, "n_pass": [283, 41, 26]}
{"time": "2021-02-22 00:54:30.195629", "score": "0.2565", "loss": "3.2742", "code": "String toString() { for (i0; ie;) {  if (i) reppd(); }nd(\"]\");etg(); }", "n_tokens": 70, "n_pass": [285, 43, 27]}
{"time": "2021-02-22 00:54:56.104883", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {  if (i) reppd(); }nd(\"]\");etg(); }", "n_tokens": 68, "n_pass": [316, 52, 28]}
{"time": "2021-02-22 00:55:33.251653", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) { if (i) reppd(); }nd(\"]\");etg(); }", "n_tokens": 67, "n_pass": [414, 63, 29]}
{"time": "2021-02-22 00:55:35.875019", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {if (i) reppd(); }nd(\"]\");etg(); }", "n_tokens": 66, "n_pass": [415, 64, 30]}
{"time": "2021-02-22 00:55:38.515730", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {if(i) reppd(); }nd(\"]\");etg(); }", "n_tokens": 65, "n_pass": [418, 65, 31]}
{"time": "2021-02-22 00:55:41.146174", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {if(i)reppd(); }nd(\"]\");etg(); }", "n_tokens": 64, "n_pass": [422, 66, 32]}
{"time": "2021-02-22 00:55:43.758189", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {if(i)eppd(); }nd(\"]\");etg(); }", "n_tokens": 63, "n_pass": [423, 67, 33]}
{"time": "2021-02-22 00:55:57.216904", "score": "0.2777", "loss": "3.0829", "code": "String toString() { for (i0;e;) {if(i)eppd();}nd(\"]\");etg(); }", "n_tokens": 62, "n_pass": [431, 72, 34]}
{"time": "2021-02-22 00:56:12.968049", "score": "0.303", "loss": "3.1943", "code": "String toString() { for (i0;e;) {if(i)eppd();}nd(\"]\");et(); }", "n_tokens": 61, "n_pass": [443, 78, 35]}
{"time": "2021-02-22 00:56:15.610973", "score": "0.303", "loss": "3.1943", "code": "String toString() { for (i0;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 60, "n_pass": [447, 79, 36]}
{"time": "2021-02-22 00:56:37.582459", "score": "0.303", "loss": "3.1943", "code": "String toString(){ for (i0;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 59, "n_pass": [466, 86, 37]}
{"time": "2021-02-22 00:56:40.210013", "score": "0.303", "loss": "3.1943", "code": "String toString(){for (i0;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 58, "n_pass": [468, 87, 38]}
{"time": "2021-02-22 00:56:42.815758", "score": "0.303", "loss": "3.1943", "code": "String toString(){for(i0;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 57, "n_pass": [472, 88, 39]}
{"time": "2021-02-22 00:56:45.475159", "score": "0.3136", "loss": "3.1553", "code": "String toString(){for(0;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 56, "n_pass": [474, 89, 40]}
{"time": "2021-02-22 00:56:48.085056", "score": "0.2946", "loss": "3.2223", "code": "String toString(){for(;e;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 55, "n_pass": [475, 90, 41]}
{"time": "2021-02-22 00:56:50.688022", "score": "0.2783", "loss": "3.2715", "code": "String toString(){for(;;) {if(i)eppd();}nd(\"]\");et();}", "n_tokens": 54, "n_pass": [477, 91, 42]}
{"time": "2021-02-22 00:56:53.314806", "score": "0.2783", "loss": "3.2715", "code": "String toString(){for(;;){if(i)eppd();}nd(\"]\");et();}", "n_tokens": 53, "n_pass": [480, 92, 43]}
{"time": "2021-02-22 00:57:03.800075", "score": "0.2101", "loss": "3.8562", "code": "String toString(){for(;;){if(i)epp();}nd(\"]\");et();}", "n_tokens": 52, "n_pass": [490, 96, 44]}
{"time": "2021-02-22 00:57:38.859271", "score": "0.2457", "loss": "3.6373", "code": "String toString(){for(;;){if(i)pp();}nd(\"]\");et();}", "n_tokens": 51, "n_pass": [540, 108, 45]}
{"time": "2021-02-22 00:57:41.473076", "score": "0.3028", "loss": "3.1636", "code": "String toString(){for(;;){if(i)p();}nd(\"]\");et();}", "n_tokens": 50, "n_pass": [541, 109, 46]}
{"time": "2021-02-22 00:57:51.984119", "score": "0.3453", "loss": "2.5947", "code": "String toString(){for(;;){if(i)p();}nd(\"]\");t();}", "n_tokens": 49, "n_pass": [555, 113, 47]}

Minimal simplified code:
String toString(){for(;;){if(i)p();}nd("]");t();}

