
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-federation/openam-federation-library/src/main/java/com/sun/identity/saml2/assertion/impl/ActionImpl_setNamespace.java
method_name = setNamespace
method_body = public void setNamespace(java.lang.String value) throws SAML2Exception { if (!mutable) { throw new SAML2Exception(SAML2SDKUtils.bundle.getString("objectImmutable")); } namespace = value; }
predict, score, loss = setNamespace, 0.9609541296958923, 0.050874561071395874

Trace of simplified code(s):
{"time": "2021-02-21 16:36:10.480470", "score": "0.961", "loss": "0.0509", "code": "public void setNamespace(java.lang.String value) throws SAML2Exception { if (!mutable) { throw new SAML2Exception(SAML2SDKUtils.bundle.getString(\"objectImmutable\")); } namespace = value; }", "n_tokens": 188, "n_pass": [1, 1, 1]}
{"time": "2021-02-21 16:36:13.515943", "score": "0.964", "loss": "0.0462", "code": "public void setNamespace(java.lang.String value) throws SAML2Exception { if (!mutable) { throw new SAML2Exception(SAring(\"objectImmutable\")); } namespace = value; }", "n_tokens": 164, "n_pass": [25, 2, 2]}
{"time": "2021-02-21 16:36:17.326335", "score": "0.9819", "loss": "0.0221", "code": "public void setNamespace(java.lang.String value) throws on { if (!mutable) { throw new SAML2Exception(SAring(\"objectImmutable\")); } namespace = value; }", "n_tokens": 152, "n_pass": [56, 3, 3]}
{"time": "2021-02-21 16:36:19.927012", "score": "0.994", "loss": "0.0069", "code": "public void setNamespace(java.lang.String value) throws on { if (!mutable) { thrException(SAring(\"objectImmutable\")); } namespace = value; }", "n_tokens": 140, "n_pass": [59, 4, 4]}
{"time": "2021-02-21 16:36:23.354891", "score": "0.994", "loss": "0.0069", "code": "public void setNamespace(java.lang.String value) throws on { if (!mutable) { thrion(SAring(\"objectImmutable\")); } namespace = value; }", "n_tokens": 134, "n_pass": [96, 5, 5]}
{"time": "2021-02-21 16:36:25.970819", "score": "0.9862", "loss": "0.017", "code": "public void setNamespace(java.lang.String value) throws on { if (!mutable) { thrion(SAring(\"Immutable\")); } namespace = value; }", "n_tokens": 128, "n_pass": [98, 6, 6]}
{"time": "2021-02-21 16:36:28.591819", "score": "0.9927", "loss": "0.0085", "code": "public void setNamespace(java.lang.String value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 122, "n_pass": [99, 7, 7]}
{"time": "2021-02-21 16:36:36.410463", "score": "0.9911", "loss": "0.0105", "code": "publid setNamespace(java.lang.String value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 117, "n_pass": [106, 10, 8]}
{"time": "2021-02-21 16:36:39.799968", "score": "0.4506", "loss": "1.314", "code": "publid setNamespace(jng.String value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 111, "n_pass": [110, 11, 9]}
{"time": "2021-02-21 16:36:42.400269", "score": "0.2296", "loss": "2.2579", "code": "publid setNamespace(jing value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 105, "n_pass": [111, 12, 10]}
{"time": "2021-02-21 16:36:50.216879", "score": "0.3356", "loss": "1.6345", "code": "d setNamespace(jing value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 100, "n_pass": [126, 15, 11]}
{"time": "2021-02-21 16:37:00.828420", "score": "0.5063", "loss": "1.1001", "code": "d setNamespace(j value) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 97, "n_pass": [184, 18, 12]}
{"time": "2021-02-21 16:37:03.456639", "score": "0.5694", "loss": "1.2216", "code": "d setNamespace(j va) throws on { if (!mutable) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 94, "n_pass": [185, 19, 13]}
{"time": "2021-02-21 16:37:06.094349", "score": "0.5423", "loss": "1.2036", "code": "d setNamespace(j va) throws on { if (table) { thrion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 91, "n_pass": [192, 20, 14]}
{"time": "2021-02-21 16:37:11.276789", "score": "0.39", "loss": "2.2871", "code": "d setNamespace(j va) throws on { if (table) { ion(SAring(\"ble\")); } namespace = value; }", "n_tokens": 88, "n_pass": [196, 22, 15]}
{"time": "2021-02-21 16:37:13.872415", "score": "0.6403", "loss": "0.6485", "code": "d setNamespace(j va) throws on { if (table) { (SAring(\"ble\")); } namespace = value; }", "n_tokens": 85, "n_pass": [197, 23, 16]}
{"time": "2021-02-21 16:37:16.457118", "score": "0.6285", "loss": "0.6968", "code": "d setNamespace(j va) throws on { if (table) { (SAg(\"ble\")); } namespace = value; }", "n_tokens": 82, "n_pass": [199, 24, 17]}
{"time": "2021-02-21 16:37:19.057681", "score": "0.6526", "loss": "0.6224", "code": "d setNamespace(j va) throws on { if (table) { (SAg(\"\")); } namespace = value; }", "n_tokens": 79, "n_pass": [201, 25, 18]}
{"time": "2021-02-21 16:37:43.685015", "score": "0.6476", "loss": "0.6265", "code": "d setNamespace(j va) throws on { if (table) { (g(\"\")); } namespace = value; }", "n_tokens": 77, "n_pass": [285, 33, 19]}
{"time": "2021-02-21 16:37:46.271342", "score": "0.6548", "loss": "0.6035", "code": "d setNamespace(j va) throws on { if (table) { (g()); } namespace = value; }", "n_tokens": 75, "n_pass": [287, 34, 20]}
{"time": "2021-02-21 16:38:06.948731", "score": "0.6708", "loss": "0.7038", "code": "d setNamespace(j va) throws on { if (table) { (g()); } namespace = vae; }", "n_tokens": 73, "n_pass": [298, 42, 21]}
{"time": "2021-02-21 16:38:15.120976", "score": "0.4522", "loss": "1.1973", "code": "d setNamespace(j a) throws on { if (table) { (g()); } namespace = vae; }", "n_tokens": 72, "n_pass": [318, 43, 22]}
{"time": "2021-02-21 16:38:17.701660", "score": "0.4522", "loss": "1.1973", "code": "d setNamespace(j a)throws on { if (table) { (g()); } namespace = vae; }", "n_tokens": 71, "n_pass": [321, 44, 23]}
{"time": "2021-02-21 16:38:20.288542", "score": "0.3719", "loss": "1.2972", "code": "d setNamespace(j a)throws n { if (table) { (g()); } namespace = vae; }", "n_tokens": 70, "n_pass": [329, 45, 24]}
{"time": "2021-02-21 16:38:22.920655", "score": "0.3871", "loss": "1.2842", "code": "d setNamespace(j a)throws n { if (ble) { (g()); } namespace = vae; }", "n_tokens": 68, "n_pass": [334, 46, 25]}
{"time": "2021-02-21 16:38:25.499799", "score": "0.3446", "loss": "1.3015", "code": "d setNamespace(j a)throws n { if (e) { (g()); } namespace = vae; }", "n_tokens": 66, "n_pass": [335, 47, 26]}
{"time": "2021-02-21 16:38:56.213747", "score": "0.3446", "loss": "1.3015", "code": "d setNamespace(j a)throws n { if (e) { (g());} namespace = vae; }", "n_tokens": 65, "n_pass": [424, 55, 27]}
{"time": "2021-02-21 16:38:58.799379", "score": "0.3446", "loss": "1.3015", "code": "d setNamespace(j a)throws n { if (e) { (g());}namespace = vae; }", "n_tokens": 64, "n_pass": [426, 56, 28]}
{"time": "2021-02-21 16:39:24.616898", "score": "0.3446", "loss": "1.3015", "code": "d setNamespace(j a)throws n { if (e) { (g());}namespace= vae; }", "n_tokens": 63, "n_pass": [436, 66, 29]}
{"time": "2021-02-21 16:39:29.829266", "score": "0.3446", "loss": "1.3015", "code": "d setNamespace(j a)throws n { if (e) { (g());}namespace=vae; }", "n_tokens": 62, "n_pass": [438, 68, 30]}
{"time": "2021-02-21 16:39:35.024708", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n { if (e) { (g());}namespace=ve; }", "n_tokens": 61, "n_pass": [440, 70, 31]}
{"time": "2021-02-21 16:39:40.190002", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n { if (e) { (g());}namespace=ve;}", "n_tokens": 60, "n_pass": [443, 72, 32]}
{"time": "2021-02-21 16:39:48.368681", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n{ if (e) { (g());}namespace=ve;}", "n_tokens": 59, "n_pass": [472, 73, 33]}
{"time": "2021-02-21 16:39:50.986513", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n{if (e) { (g());}namespace=ve;}", "n_tokens": 58, "n_pass": [474, 74, 34]}
{"time": "2021-02-21 16:39:53.605217", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n{if(e) { (g());}namespace=ve;}", "n_tokens": 57, "n_pass": [477, 75, 35]}
{"time": "2021-02-21 16:39:56.194291", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n{if(e){ (g());}namespace=ve;}", "n_tokens": 56, "n_pass": [481, 76, 36]}
{"time": "2021-02-21 16:39:58.808180", "score": "0.4553", "loss": "0.93", "code": "d setNamespace(j a)throws n{if(e){(g());}namespace=ve;}", "n_tokens": 55, "n_pass": [483, 77, 37]}

Minimal simplified code:
d setNamespace(j a)throws n{if(e){(g());}namespace=ve;}

