
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/TernaryOperatorNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }
predict, score, loss = isEquivalent, 0.9999997615814209, 2.3841855067985307e-07

Trace of simplified code(s):
{"time": "2021-02-25 01:51:02.465344", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 439, "n_pass": [1, 1, 1]}
{"time": "2021-02-25 01:51:05.165769", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.mlent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 384, "n_pass": [23, 2, 2]}
{"time": "2021-02-25 01:51:07.960136", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 357, "n_pass": [44, 3, 3]}
{"time": "2021-02-25 01:51:10.616833", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanerand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 329, "n_pass": [48, 4, 4]}
{"time": "2021-02-25 01:51:13.280933", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 301, "n_pass": [49, 5, 5]}
{"time": "2021-02-25 01:51:16.343326", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 274, "n_pass": [57, 6, 6]}
{"time": "2021-02-25 01:51:19.438229", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 260, "n_pass": [88, 7, 7]}
{"time": "2021-02-25 01:51:22.123369", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 246, "n_pass": [90, 8, 8]}
{"time": "2021-02-25 01:51:24.781777", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && othOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 232, "n_pass": [93, 9, 9]}
{"time": "2021-02-25 01:51:27.413455", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 218, "n_pass": [94, 10, 10]}
{"time": "2021-02-25 01:51:30.053775", "score": "1.0", "loss": "0.0", "code": "lean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 205, "n_pass": [98, 11, 11]}
{"time": "2021-02-25 01:51:33.094800", "score": "1.0", "loss": "0.0", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 192, "n_pass": [102, 12, 12]}
{"time": "2021-02-25 01:51:35.743456", "score": "0.6566", "loss": "0.6339", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOperatorNode other = (TernaryOpEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 178, "n_pass": [104, 13, 13]}
{"time": "2021-02-25 01:51:38.351333", "score": "0.4354", "loss": "1.1003", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (TernaryOpEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 164, "n_pass": [106, 14, 14]}
{"time": "2021-02-25 01:51:41.364563", "score": "0.4354", "loss": "1.1003", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (TeEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 157, "n_pass": [144, 15, 15]}
{"time": "2021-02-25 01:51:44.400894", "score": "0.4354", "loss": "1.1003", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (Teent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 150, "n_pass": [145, 16, 16]}
{"time": "2021-02-25 01:51:47.009897", "score": "0.4402", "loss": "1.0768", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (Teent(lef(rightO== null && othvalent(rightOperand)))); } return false; }", "n_tokens": 143, "n_pass": [148, 17, 17]}
{"time": "2021-02-25 01:51:49.672742", "score": "0.4429", "loss": "1.0691", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (Teent(lef(rightO && othvalent(rightOperand)))); } return false; }", "n_tokens": 136, "n_pass": [149, 18, 18]}
{"time": "2021-02-25 01:51:52.332868", "score": "0.4076", "loss": "1.1627", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (Teent(lef(rightOvalent(rightOperand)))); } return false; }", "n_tokens": 129, "n_pass": [150, 19, 19]}
{"time": "2021-02-25 01:51:54.998056", "score": "0.4386", "loss": "1.0621", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (Teent(lef(rightOvalent(erand)))); } return false; }", "n_tokens": 122, "n_pass": [152, 20, 20]}
{"time": "2021-02-25 01:52:03.702646", "score": "0.4731", "loss": "1.0084", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { Terr = (Teent(lef(rightOvalent(erand)))); } return false; }", "n_tokens": 115, "n_pass": [166, 23, 21]}
{"time": "2021-02-25 01:52:12.640293", "score": "0.4566", "loss": "1.038", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { T = (Teent(lef(rightOvalent(erand)))); } return false; }", "n_tokens": 112, "n_pass": [219, 26, 22]}
{"time": "2021-02-25 01:52:15.258471", "score": "0.4348", "loss": "1.0997", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { T(Teent(lef(rightOvalent(erand)))); } return false; }", "n_tokens": 109, "n_pass": [220, 27, 23]}
{"time": "2021-02-25 01:52:17.883313", "score": "0.4348", "loss": "1.0997", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { T(Teent(lef(rOvalent(erand)))); } return false; }", "n_tokens": 105, "n_pass": [224, 28, 24]}
{"time": "2021-02-25 01:52:20.510238", "score": "0.4208", "loss": "1.1744", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { T(Teent(lef(rent(erand)))); } return false; }", "n_tokens": 101, "n_pass": [225, 29, 25]}
{"time": "2021-02-25 01:52:23.150582", "score": "0.4277", "loss": "1.1478", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { T(Teent(lef(rent(d)))); } return false; }", "n_tokens": 97, "n_pass": [227, 30, 26]}
{"time": "2021-02-25 01:52:43.088068", "score": "0.428", "loss": "1.1414", "code": "lean isEquivalent(ValueNode o) throws S { if (isS) { T(Teent(lef(rent(d)))); } return false; }", "n_tokens": 94, "n_pass": [247, 37, 27]}
{"time": "2021-02-25 01:52:51.245684", "score": "0.3672", "loss": "1.3797", "code": "n isEquivalent(ValueNode o) throws S { if (isS) { T(Teent(lef(rent(d)))); } return false; }", "n_tokens": 91, "n_pass": [263, 40, 28]}
{"time": "2021-02-25 01:53:30.397487", "score": "0.4409", "loss": "1.2042", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(Teent(lef(rent(d)))); } return false; }", "n_tokens": 89, "n_pass": [378, 52, 29]}
{"time": "2021-02-25 01:53:35.633058", "score": "0.3639", "loss": "1.5571", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(Tee(lef(rent(d)))); } return false; }", "n_tokens": 87, "n_pass": [381, 54, 30]}
{"time": "2021-02-25 01:53:38.270175", "score": "0.4164", "loss": "1.4331", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(Tee(l(rent(d)))); } return false; }", "n_tokens": 85, "n_pass": [383, 55, 31]}
{"time": "2021-02-25 01:53:40.927515", "score": "0.4313", "loss": "1.3125", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(Tee(l(rt(d)))); } return false; }", "n_tokens": 83, "n_pass": [385, 56, 32]}
{"time": "2021-02-25 01:54:12.820506", "score": "0.4928", "loss": "1.0523", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(T(l(rt(d)))); } return false; }", "n_tokens": 81, "n_pass": [433, 66, 33]}
{"time": "2021-02-25 01:54:49.605345", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(T(l(rt()))); } return false; }", "n_tokens": 80, "n_pass": [548, 76, 34]}
{"time": "2021-02-25 01:54:52.298777", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(T(l(rt())));} return false; }", "n_tokens": 79, "n_pass": [553, 77, 35]}
{"time": "2021-02-25 01:54:54.964231", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(T(l(rt())));}return false; }", "n_tokens": 78, "n_pass": [555, 78, 36]}
{"time": "2021-02-25 01:55:13.362180", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o) throws S { if (isS) {(T(l(rt())));}return false;}", "n_tokens": 77, "n_pass": [569, 85, 37]}
{"time": "2021-02-25 01:55:46.001546", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o)throws S { if (isS) {(T(l(rt())));}return false;}", "n_tokens": 76, "n_pass": [598, 95, 38]}
{"time": "2021-02-25 01:55:48.644999", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o)throws S{ if (isS) {(T(l(rt())));}return false;}", "n_tokens": 75, "n_pass": [607, 96, 39]}
{"time": "2021-02-25 01:55:51.260281", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o)throws S{if (isS) {(T(l(rt())));}return false;}", "n_tokens": 74, "n_pass": [609, 97, 40]}
{"time": "2021-02-25 01:55:53.877582", "score": "0.5046", "loss": "1.0229", "code": "n isEquivalent(ValueNode o)throws S{if(isS) {(T(l(rt())));}return false;}", "n_tokens": 73, "n_pass": [612, 98, 41]}
{"time": "2021-02-25 01:55:56.515237", "score": "0.3101", "loss": "1.8152", "code": "n isEquivalent(ValueNode o)throws S{if(sS) {(T(l(rt())));}return false;}", "n_tokens": 72, "n_pass": [614, 99, 42]}
{"time": "2021-02-25 01:55:59.132181", "score": "0.2982", "loss": "1.8507", "code": "n isEquivalent(ValueNode o)throws S{if(S) {(T(l(rt())));}return false;}", "n_tokens": 71, "n_pass": [615, 100, 43]}
{"time": "2021-02-25 01:56:01.764422", "score": "0.2982", "loss": "1.8507", "code": "n isEquivalent(ValueNode o)throws S{if(S){(T(l(rt())));}return false;}", "n_tokens": 70, "n_pass": [618, 101, 44]}
{"time": "2021-02-25 01:56:04.390129", "score": "0.3289", "loss": "1.7151", "code": "n isEquivalent(ValueNode o)throws S{if(S){((l(rt())));}return false;}", "n_tokens": 69, "n_pass": [621, 102, 45]}
{"time": "2021-02-25 01:56:07.010115", "score": "0.3361", "loss": "1.6664", "code": "n isEquivalent(ValueNode o)throws S{if(S){(((rt())));}return false;}", "n_tokens": 68, "n_pass": [623, 103, 46]}
{"time": "2021-02-25 01:56:09.633156", "score": "0.3358", "loss": "1.6668", "code": "n isEquivalent(ValueNode o)throws S{if(S){(((t())));}return false;}", "n_tokens": 67, "n_pass": [625, 104, 47]}

Minimal simplified code:
n isEquivalent(ValueNode o)throws S{if(S){(((t())));}return false;}

