
path = /scratch/rabin/data/code2vec/transforms/Methods/java-large/test/ppamorim__Dragger/dragger/src/main/java/com/github/ppamorim/dragger/ViewDragHelper_checkTouchSlop.java
method_name = checkTouchSlop
method_body = public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }
predict, score, loss = checkTouchSlop, 0.9999964237213135, 9.894321920000948e-06

Trace of simplified code(s):
{"time": "2021-05-26 10:03:06.006390", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 669, "n_pass": [1, 1, 1]}
{"time": "2021-05-26 10:03:08.757139", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 586, "n_pass": [22, 2, 2]}
{"time": "2021-05-26 10:03:11.480179", "score": "0.9996", "loss": "0.0012", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > lop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 502, "n_pass": [26, 3, 3]}
{"time": "2021-05-26 10:03:14.163514", "score": "0.9982", "loss": "0.004", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 460, "n_pass": [45, 4, 4]}
{"time": "2021-05-26 10:03:17.254747", "score": "0.9983", "loss": "0.0038", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > op; } return false; }", "n_tokens": 439, "n_pass": [78, 5, 5]}
{"time": "2021-05-26 10:03:20.406593", "score": "0.9985", "loss": "0.0035", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > op; } return false; }", "n_tokens": 418, "n_pass": [86, 6, 6]}
{"time": "2021-05-26 10:03:23.503626", "score": "0.9989", "loss": "0.0024", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > op; } return false; }", "n_tokens": 397, "n_pass": [90, 7, 7]}
{"time": "2021-05-26 10:03:26.214225", "score": "0.9967", "loss": "0.0075", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx + dy * dy > op; } return false; }", "n_tokens": 376, "n_pass": [96, 8, 8]}
{"time": "2021-05-26 10:03:29.103705", "score": "0.9965", "loss": "0.0077", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 355, "n_pass": [98, 9, 9]}
{"time": "2021-05-26 10:03:32.656210", "score": "0.9962", "loss": "0.0086", "code": "lean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 345, "n_pass": [152, 10, 10]}
{"time": "2021-05-26 10:03:35.377439", "score": "0.921", "loss": "0.1616", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 335, "n_pass": [155, 11, 11]}
{"time": "2021-05-26 10:03:38.053667", "score": "0.9454", "loss": "0.2071", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 325, "n_pass": [158, 12, 12]}
{"time": "2021-05-26 10:03:43.372619", "score": "0.9448", "loss": "0.2077", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 315, "n_pass": [166, 14, 13]}
{"time": "2021-05-26 10:03:46.049191", "score": "0.9509", "loss": "0.1815", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 305, "n_pass": [168, 15, 14]}
{"time": "2021-05-26 10:03:48.741070", "score": "0.7432", "loss": "0.8834", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; fix = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 294, "n_pass": [170, 16, 15]}
{"time": "2021-05-26 10:03:51.415430", "score": "0.9486", "loss": "0.1785", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; finitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 283, "n_pass": [171, 17, 16]}
{"time": "2021-05-26 10:03:54.084521", "score": "0.9486", "loss": "0.1785", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; finX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 272, "n_pass": [172, 18, 17]}
{"time": "2021-05-26 10:03:56.740608", "score": "0.972", "loss": "0.1164", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; finX[pointerId]; final float dy = m[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 261, "n_pass": [176, 19, 18]}
{"time": "2021-05-26 10:03:59.406638", "score": "0.9853", "loss": "0.0612", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DIRTICAL; finX[pointerId]; final float dy = m - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 250, "n_pass": [177, 20, 19]}
{"time": "2021-05-26 10:04:07.847444", "score": "0.9882", "loss": "0.0518", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[pointerId]; final float dy = m - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 240, "n_pass": [198, 23, 20]}
{"time": "2021-05-26 10:04:16.374662", "score": "0.9867", "loss": "0.0674", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; final float dy = m - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 235, "n_pass": [269, 26, 21]}
{"time": "2021-05-26 10:04:19.032121", "score": "0.9867", "loss": "0.0674", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId];  float dy = m - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 230, "n_pass": [271, 27, 22]}
{"time": "2021-05-26 10:04:21.674597", "score": "0.9856", "loss": "0.0655", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m - mInitialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 225, "n_pass": [272, 28, 23]}
{"time": "2021-05-26 10:04:24.342997", "score": "0.9813", "loss": "0.063", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -tialMotionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 220, "n_pass": [275, 29, 24]}
{"time": "2021-05-26 10:04:27.023175", "score": "0.9813", "loss": "0.063", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -otionY[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 215, "n_pass": [276, 30, 25]}
{"time": "2021-05-26 10:04:29.747156", "score": "0.9802", "loss": "0.0655", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (eckVertical) { returnop; } return false; }", "n_tokens": 210, "n_pass": [277, 31, 26]}
{"time": "2021-05-26 10:04:32.466202", "score": "0.9802", "loss": "0.0655", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } return false; }", "n_tokens": 204, "n_pass": [281, 32, 27]}
{"time": "2021-05-26 10:04:35.125873", "score": "0.9869", "loss": "0.0431", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 198, "n_pass": [286, 33, 28]}
{"time": "2021-05-26 10:04:39.092044", "score": "0.9869", "loss": "0.0431", "code": "lean checkTouchSlop(int dpointerId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 193, "n_pass": [293, 34, 29]}
{"time": "2021-05-26 10:04:41.802602", "score": "0.9869", "loss": "0.0431", "code": "lean checkTouchSlop(int derId) { if (!isn(pointerId)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 188, "n_pass": [294, 35, 30]}
{"time": "2021-05-26 10:04:44.456015", "score": "0.9735", "loss": "0.0962", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 183, "n_pass": [299, 36, 31]}
{"time": "2021-05-26 10:04:47.164744", "score": "0.9715", "loss": "0.1116", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { retulse; } final boolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 178, "n_pass": [302, 37, 32]}
{"time": "2021-05-26 10:04:49.832950", "score": "0.9643", "loss": "0.1305", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { retulse; } finolean checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 173, "n_pass": [305, 38, 33]}
{"time": "2021-05-26 10:04:52.564146", "score": "0.9179", "loss": "0.3152", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { retulse; } fin checkHorizontal = (DIRECCAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 168, "n_pass": [306, 39, 34]}
{"time": "2021-05-26 10:05:03.234571", "score": "0.9168", "loss": "0.3195", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { retulse; } fin checkHorizontal = (CAL) == DInX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 163, "n_pass": [311, 43, 35]}
{"time": "2021-05-26 10:05:05.986615", "score": "0.7224", "loss": "1.2458", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { retulse; } fin checkHorizontal = (CAL) nX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 158, "n_pass": [313, 44, 36]}
{"time": "2021-05-26 10:05:09.868641", "score": "0.7258", "loss": "1.2699", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) {lse; } fin checkHorizontal = (CAL) nX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 153, "n_pass": [336, 45, 37]}
{"time": "2021-05-26 10:05:12.516972", "score": "0.6984", "loss": "1.327", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) {} fin checkHorizontal = (CAL) nX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 148, "n_pass": [337, 46, 38]}
{"time": "2021-05-26 10:05:24.742904", "score": "0.5918", "loss": "1.6566", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {} fin checkHorizontal = (CAL) nX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 145, "n_pass": [423, 50, 39]}
{"time": "2021-05-26 10:05:27.573244", "score": "0.9915", "loss": "0.0381", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL) nX[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 142, "n_pass": [426, 51, 40]}
{"time": "2021-05-26 10:05:43.515912", "score": "0.9795", "loss": "0.181", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t dy = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 139, "n_pass": [435, 57, 41]}
{"time": "2021-05-26 10:05:46.227206", "score": "0.8464", "loss": "0.7229", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = m -Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 136, "n_pass": [439, 58, 42]}
{"time": "2021-05-26 10:05:49.267761", "score": "0.9394", "loss": "0.4549", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pointerId]; if (tical) { returnop; } retlse; }", "n_tokens": 133, "n_pass": [441, 59, 43]}
{"time": "2021-05-26 10:05:51.903389", "score": "0.9648", "loss": "0.3543", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pterId]; if (tical) { returnop; } retlse; }", "n_tokens": 130, "n_pass": [443, 60, 44]}
{"time": "2021-05-26 10:05:54.540183", "score": "0.9633", "loss": "0.377", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (tical) { returnop; } retlse; }", "n_tokens": 127, "n_pass": [444, 61, 45]}
{"time": "2021-05-26 10:05:57.248734", "score": "0.9635", "loss": "0.3777", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) { returnop; } retlse; }", "n_tokens": 124, "n_pass": [448, 62, 46]}
{"time": "2021-05-26 10:05:59.884939", "score": "0.9659", "loss": "0.3352", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) { urnop; } retlse; }", "n_tokens": 121, "n_pass": [451, 63, 47]}
{"time": "2021-05-26 10:06:02.515135", "score": "0.9646", "loss": "0.349", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) { op; } retlse; }", "n_tokens": 118, "n_pass": [452, 64, 48]}
{"time": "2021-05-26 10:06:05.150624", "score": "0.9649", "loss": "0.3369", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } retlse; }", "n_tokens": 115, "n_pass": [453, 65, 49]}
{"time": "2021-05-26 10:06:07.981675", "score": "0.9674", "loss": "0.3484", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } lse; }", "n_tokens": 112, "n_pass": [455, 66, 50]}
{"time": "2021-05-26 10:06:10.820207", "score": "0.9651", "loss": "0.3333", "code": "lean checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 109, "n_pass": [456, 67, 51]}
{"time": "2021-05-26 10:06:13.456542", "score": "0.964", "loss": "0.3234", "code": "an checkTouchSlop(int derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 107, "n_pass": [458, 68, 52]}
{"time": "2021-05-26 10:06:19.394362", "score": "0.246", "loss": "3.1489", "code": "an checkTouchSlop(t derId) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 105, "n_pass": [468, 69, 53]}
{"time": "2021-05-26 10:06:24.697894", "score": "0.3958", "loss": "2.6554", "code": "an checkTouchSlop(t ded) { if (!isn(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 103, "n_pass": [471, 71, 54]}
{"time": "2021-05-26 10:06:27.356887", "score": "0.625", "loss": "1.834", "code": "an checkTouchSlop(t ded) { if (!n(p)) {}  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 101, "n_pass": [477, 72, 55]}
{"time": "2021-05-26 10:06:30.039330", "score": "0.9761", "loss": "0.0716", "code": "an checkTouchSlop(t ded) { if (!n(p))  checkHorizontal = (CAL)[poId]; t = Y[pId]; if (al) {  } ; }", "n_tokens": 98, "n_pass": [480, 73, 56]}
{"time": "2021-05-26 10:06:51.581425", "score": "0.9959", "loss": "0.0103", "code": "an checkTouchSlop(t ded) { if (!n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 95, "n_pass": [492, 81, 57]}
{"time": "2021-05-26 10:06:57.507704", "score": "0.9973", "loss": "0.0092", "code": "an checkTouchSlop(t d) { if (!n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 93, "n_pass": [511, 82, 58]}
{"time": "2021-05-26 10:07:22.851528", "score": "0.9973", "loss": "0.0092", "code": "an checkTouchSlop(t d){ if (!n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 92, "n_pass": [622, 89, 59]}
{"time": "2021-05-26 10:07:25.570003", "score": "0.9973", "loss": "0.0092", "code": "an checkTouchSlop(t d){if (!n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 91, "n_pass": [623, 90, 60]}
{"time": "2021-05-26 10:07:28.249114", "score": "0.9973", "loss": "0.0092", "code": "an checkTouchSlop(t d){if(!n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 90, "n_pass": [626, 91, 61]}
{"time": "2021-05-26 10:07:30.897822", "score": "0.9927", "loss": "0.0252", "code": "an checkTouchSlop(t d){if(n(p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 89, "n_pass": [628, 92, 62]}
{"time": "2021-05-26 10:07:33.715639", "score": "0.9942", "loss": "0.0177", "code": "an checkTouchSlop(t d){if((p))  checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 88, "n_pass": [629, 93, 63]}
{"time": "2021-05-26 10:07:36.460263", "score": "0.9942", "loss": "0.0177", "code": "an checkTouchSlop(t d){if((p)) checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 87, "n_pass": [634, 94, 64]}
{"time": "2021-05-26 10:07:39.107159", "score": "0.9942", "loss": "0.0177", "code": "an checkTouchSlop(t d){if((p))checkHorizontal = (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 86, "n_pass": [635, 95, 65]}
{"time": "2021-05-26 10:08:22.032364", "score": "0.5603", "loss": "2.1469", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (CAL)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 84, "n_pass": [651, 111, 66]}
{"time": "2021-05-26 10:08:24.734306", "score": "0.6273", "loss": "2.4348", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (C)[poId]; tY[pId]; if (al) {  } ; }", "n_tokens": 82, "n_pass": [653, 112, 67]}
{"time": "2021-05-26 10:08:27.368179", "score": "0.9695", "loss": "0.0793", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (C)[Id]; tY[pId]; if (al) {  } ; }", "n_tokens": 80, "n_pass": [655, 113, 68]}
{"time": "2021-05-26 10:08:30.044552", "score": "0.9692", "loss": "0.0825", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (C)[Id];Y[pId]; if (al) {  } ; }", "n_tokens": 78, "n_pass": [658, 114, 69]}
{"time": "2021-05-26 10:08:32.688151", "score": "0.9707", "loss": "0.0773", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (C)[Id];Y[d]; if (al) {  } ; }", "n_tokens": 76, "n_pass": [660, 115, 70]}
{"time": "2021-05-26 10:08:35.341664", "score": "0.9707", "loss": "0.0773", "code": "an checkTouchSlop(t d){if((p))checkHorizontal (C)[Id];Y[d]; if (al) {  } }", "n_tokens": 74, "n_pass": [669, 116, 71]}
{"time": "2021-05-26 10:08:37.984124", "score": "0.8944", "loss": "0.3076", "code": "n checkTouchSlop(t d){if((p))checkHorizontal (C)[Id];Y[d]; if (al) {  } }", "n_tokens": 73, "n_pass": [671, 117, 72]}
{"time": "2021-05-26 10:09:32.702089", "score": "0.8944", "loss": "0.3076", "code": "n checkTouchSlop(t d){if((p))checkHorizontal(C)[Id];Y[d]; if (al) {  } }", "n_tokens": 72, "n_pass": [761, 134, 73]}
{"time": "2021-05-26 10:09:35.343965", "score": "0.696", "loss": "0.8331", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[Id];Y[d]; if (al) {  } }", "n_tokens": 71, "n_pass": [763, 135, 74]}
{"time": "2021-05-26 10:09:37.981951", "score": "0.7619", "loss": "0.6609", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d]; if (al) {  } }", "n_tokens": 70, "n_pass": [766, 136, 75]}
{"time": "2021-05-26 10:09:40.638082", "score": "0.7619", "loss": "0.6609", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if (al) {  } }", "n_tokens": 69, "n_pass": [775, 137, 76]}
{"time": "2021-05-26 10:09:43.275568", "score": "0.7619", "loss": "0.6609", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(al) {  } }", "n_tokens": 68, "n_pass": [778, 138, 77]}
{"time": "2021-05-26 10:09:45.880420", "score": "0.7032", "loss": "0.7639", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l) {  } }", "n_tokens": 67, "n_pass": [780, 139, 78]}
{"time": "2021-05-26 10:09:48.521668", "score": "0.7032", "loss": "0.7639", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l){  } }", "n_tokens": 66, "n_pass": [783, 140, 79]}
{"time": "2021-05-26 10:09:51.160740", "score": "0.7032", "loss": "0.7639", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l){ } }", "n_tokens": 65, "n_pass": [785, 141, 80]}
{"time": "2021-05-26 10:09:53.784356", "score": "0.7032", "loss": "0.7639", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l){} }", "n_tokens": 64, "n_pass": [786, 142, 81]}
{"time": "2021-05-26 10:09:56.461075", "score": "0.7032", "loss": "0.7639", "code": "n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l){}}", "n_tokens": 63, "n_pass": [788, 143, 82]}

Minimal simplified code:
n checkTouchSlop(t d){if((p))checkHorizontal()[d];Y[d];if(l){}}

