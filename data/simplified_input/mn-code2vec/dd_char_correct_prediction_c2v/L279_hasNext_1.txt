
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/ql/analytic/AnalyticRecordSource_hasNext.java
method_name = hasNext
method_body = @Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }
predict, score, loss = hasNext, 0.9363151788711548, 0.07374455034732819

Trace of simplified code(s):
{"time": "2021-02-24 19:22:23.074840", "score": "0.9272", "loss": "0.0855", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 213, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 19:22:26.629450", "score": "0.9249", "loss": "0.0868", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(i).prepareFor(record); } return true; } return false; }", "n_tokens": 199, "n_pass": [55, 2, 2]}
{"time": "2021-02-24 19:22:29.337773", "score": "0.6124", "loss": "0.5714", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } return true; } return false; }", "n_tokens": 185, "n_pass": [56, 3, 3]}
{"time": "2021-02-24 19:22:32.460857", "score": "0.8538", "loss": "0.1826", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } return false; }", "n_tokens": 178, "n_pass": [101, 4, 4]}
{"time": "2021-02-24 19:22:35.142949", "score": "0.9017", "loss": "0.1283", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 171, "n_pass": [102, 5, 5]}
{"time": "2021-02-24 19:22:37.820259", "score": "0.9068", "loss": "0.1229", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 165, "n_pass": [105, 6, 6]}
{"time": "2021-02-24 19:22:44.042185", "score": "0.6465", "loss": "0.6809", "code": "@Overrblic boolean hasNext() { if (chasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 159, "n_pass": [111, 8, 7]}
{"time": "2021-02-24 19:22:46.751839", "score": "0.4775", "loss": "1.0267", "code": "@Overrblic boolean hasNext() { if (ct()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 153, "n_pass": [112, 9, 8]}
{"time": "2021-02-24 19:22:49.443192", "score": "0.5328", "loss": "1.0681", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 147, "n_pass": [114, 10, 9]}
{"time": "2021-02-24 19:22:52.142875", "score": "0.3417", "loss": "2.9731", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (int i = 0, n = functions.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 140, "n_pass": [116, 11, 10]}
{"time": "2021-02-24 19:22:57.502085", "score": "0.5232", "loss": "2.0192", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (int i = 0, n = fs.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 133, "n_pass": [121, 13, 11]}
{"time": "2021-02-24 19:23:03.718968", "score": "0.3186", "loss": "2.5052", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in, n = fs.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 126, "n_pass": [140, 15, 12]}
{"time": "2021-02-24 19:23:06.390173", "score": "0.4117", "loss": "2.5575", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 119, "n_pass": [141, 16, 13]}
{"time": "2021-02-24 19:23:12.576131", "score": "0.2603", "loss": "3.0664", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (inize(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 116, "n_pass": [197, 18, 14]}
{"time": "2021-02-24 19:23:15.258180", "score": "0.3046", "loss": "2.7956", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n; i++) { func(record); } reue; } ralse; }", "n_tokens": 113, "n_pass": [198, 19, 15]}
{"time": "2021-02-24 19:23:17.927676", "score": "0.1706", "loss": "3.4096", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { func(record); } reue; } ralse; }", "n_tokens": 109, "n_pass": [202, 20, 16]}
{"time": "2021-02-24 19:23:20.592172", "score": "0.8045", "loss": "1.0228", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { (record); } reue; } ralse; }", "n_tokens": 105, "n_pass": [204, 21, 17]}
{"time": "2021-02-24 19:23:23.262664", "score": "0.7883", "loss": "1.0637", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { (record); } ; } ralse; }", "n_tokens": 101, "n_pass": [208, 22, 18]}
{"time": "2021-02-24 19:23:25.929664", "score": "0.8156", "loss": "0.9357", "code": "@Overrblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 97, "n_pass": [210, 23, 19]}
{"time": "2021-02-24 19:23:28.584406", "score": "0.8156", "loss": "0.9357", "code": "@Ovblic boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 94, "n_pass": [213, 24, 20]}
{"time": "2021-02-24 19:23:31.249755", "score": "0.7237", "loss": "1.2246", "code": "@Ovc boolean hasNext() { if (ct()) {d.of(cuxt()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 91, "n_pass": [214, 25, 21]}
{"time": "2021-02-24 19:23:40.522436", "score": "0.8743", "loss": "0.4346", "code": "@Ovc boolean hasNext() { if (c) {d.of(cuxt()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 88, "n_pass": [224, 28, 22]}
{"time": "2021-02-24 19:23:43.199465", "score": "0.8032", "loss": "0.6043", "code": "@Ovc boolean hasNext() { if (c) {f(cuxt()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 85, "n_pass": [226, 29, 23]}
{"time": "2021-02-24 19:23:45.858248", "score": "0.816", "loss": "0.4779", "code": "@Ovc boolean hasNext() { if (c) {f(c()); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 82, "n_pass": [228, 30, 24]}
{"time": "2021-02-24 19:23:57.058839", "score": "0.8579", "loss": "0.3021", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in(); i < n;) { (record); } ; } e; }", "n_tokens": 80, "n_pass": [307, 33, 25]}
{"time": "2021-02-24 19:23:59.709071", "score": "0.8579", "loss": "0.3021", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (record); } ; } e; }", "n_tokens": 78, "n_pass": [313, 34, 26]}
{"time": "2021-02-24 19:24:02.366862", "score": "0.8558", "loss": "0.312", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rord); } ; } e; }", "n_tokens": 76, "n_pass": [321, 35, 27]}
{"time": "2021-02-24 19:24:05.025209", "score": "0.8502", "loss": "0.329", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rd); } ; } e; }", "n_tokens": 74, "n_pass": [322, 36, 28]}
{"time": "2021-02-24 19:24:07.721422", "score": "0.8502", "loss": "0.329", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rd); } } e; }", "n_tokens": 72, "n_pass": [326, 37, 29]}
{"time": "2021-02-24 19:24:10.378221", "score": "0.8388", "loss": "0.3696", "code": "@Ovc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rd); } }  }", "n_tokens": 70, "n_pass": [328, 38, 30]}
{"time": "2021-02-24 19:24:13.040447", "score": "0.9124", "loss": "0.2327", "code": "@vc boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rd); } }  }", "n_tokens": 69, "n_pass": [331, 39, 31]}
{"time": "2021-02-24 19:24:15.694315", "score": "0.9636", "loss": "0.0837", "code": "@c boolean hasNext() { if (c) {f(c); for (in; i < n;) { (rd); } }  }", "n_tokens": 68, "n_pass": [332, 40, 32]}
{"time": "2021-02-24 19:24:40.415045", "score": "0.9512", "loss": "0.1121", "code": "@c boolean hasNext() { if (c) {f(c); for (; i < n;) { (rd); } }  }", "n_tokens": 66, "n_pass": [361, 48, 33]}
{"time": "2021-02-24 19:25:12.507491", "score": "0.9512", "loss": "0.1121", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;) { (rd); } }  }", "n_tokens": 65, "n_pass": [454, 56, 34]}
{"time": "2021-02-24 19:25:15.172818", "score": "0.9512", "loss": "0.1121", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){ (rd); } }  }", "n_tokens": 64, "n_pass": [458, 57, 35]}
{"time": "2021-02-24 19:25:17.833215", "score": "0.9512", "loss": "0.1121", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(rd); } }  }", "n_tokens": 63, "n_pass": [460, 58, 36]}
{"time": "2021-02-24 19:25:20.507147", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(d); } }  }", "n_tokens": 62, "n_pass": [462, 59, 37]}
{"time": "2021-02-24 19:25:23.169208", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(d);} }  }", "n_tokens": 61, "n_pass": [466, 60, 38]}
{"time": "2021-02-24 19:25:25.832349", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(d);}}  }", "n_tokens": 60, "n_pass": [468, 61, 39]}
{"time": "2021-02-24 19:25:28.523449", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(d);}} }", "n_tokens": 59, "n_pass": [470, 62, 40]}
{"time": "2021-02-24 19:25:31.204482", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext() { if (c) {f(c); for (; i <n;){(d);}}}", "n_tokens": 58, "n_pass": [471, 63, 41]}
{"time": "2021-02-24 19:25:56.407652", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext(){ if (c) {f(c); for (; i <n;){(d);}}}", "n_tokens": 57, "n_pass": [493, 71, 42]}
{"time": "2021-02-24 19:25:59.062953", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext(){if (c) {f(c); for (; i <n;){(d);}}}", "n_tokens": 56, "n_pass": [495, 72, 43]}
{"time": "2021-02-24 19:26:01.724013", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext(){if(c) {f(c); for (; i <n;){(d);}}}", "n_tokens": 55, "n_pass": [498, 73, 44]}
{"time": "2021-02-24 19:26:04.381523", "score": "0.954", "loss": "0.1051", "code": "@c boolean hasNext(){if(c){f(c); for (; i <n;){(d);}}}", "n_tokens": 54, "n_pass": [502, 74, 45]}
{"time": "2021-02-24 19:26:07.035774", "score": "0.9564", "loss": "0.1009", "code": "@c boolean hasNext(){if(c){(c); for (; i <n;){(d);}}}", "n_tokens": 53, "n_pass": [504, 75, 46]}
{"time": "2021-02-24 19:26:09.675213", "score": "0.9564", "loss": "0.1009", "code": "@c boolean hasNext(){if(c){(c);for (; i <n;){(d);}}}", "n_tokens": 52, "n_pass": [509, 76, 47]}
{"time": "2021-02-24 19:26:12.335357", "score": "0.9564", "loss": "0.1009", "code": "@c boolean hasNext(){if(c){(c);for(; i <n;){(d);}}}", "n_tokens": 51, "n_pass": [513, 77, 48]}
{"time": "2021-02-24 19:26:15.007319", "score": "0.9564", "loss": "0.1009", "code": "@c boolean hasNext(){if(c){(c);for(;i <n;){(d);}}}", "n_tokens": 50, "n_pass": [516, 78, 49]}
{"time": "2021-02-24 19:26:17.661926", "score": "0.9564", "loss": "0.1009", "code": "@c boolean hasNext(){if(c){(c);for(;i<n;){(d);}}}", "n_tokens": 49, "n_pass": [518, 79, 50]}
{"time": "2021-02-24 19:26:20.308796", "score": "0.9061", "loss": "0.3541", "code": "@c boolean hasNext(){if(c){(c);for(;in;){(d);}}}", "n_tokens": 48, "n_pass": [519, 80, 51]}
{"time": "2021-02-24 19:26:22.955233", "score": "0.8591", "loss": "0.4841", "code": "@c boolean hasNext(){if(c){(c);for(;i;){(d);}}}", "n_tokens": 47, "n_pass": [520, 81, 52]}
{"time": "2021-02-24 19:26:47.943819", "score": "0.8012", "loss": "0.6774", "code": "@c boolean hasNext(){if(c){(c);for(;;){(d);}}}", "n_tokens": 46, "n_pass": [567, 89, 53]}

Minimal simplified code:
@c boolean hasNext(){if(c){(c);for(;;){(d);}}}

