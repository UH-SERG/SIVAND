
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/JakeWharton__HanselAndGretel/library/src/android/support/v4/app/FragmentBreadCrumbs_onLayout.java
method_name = onLayout
method_body = @Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }
predict, score, loss = onLayout, 0.9916878342628479, 0.00867254938930273

Trace of simplified code(s):
{"time": "2021-02-21 23:40:12.198435", "score": "0.9969", "loss": "0.0038", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 589, "n_pass": [1, 1, 1]}
{"time": "2021-02-21 23:40:14.944612", "score": "0.9922", "loss": "0.0087", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRightom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 515, "n_pass": [26, 2, 2]}
{"time": "2021-02-21 23:40:17.672768", "score": "0.8913", "loss": "0.1284", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRightom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 479, "n_pass": [50, 3, 3]}
{"time": "2021-02-21 23:40:20.428869", "score": "0.7384", "loss": "0.3163", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geht = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRightom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 442, "n_pass": [52, 4, 4]}
{"time": "2021-02-21 23:40:23.125422", "score": "0.6013", "loss": "0.515", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRightom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 405, "n_pass": [53, 5, 5]}
{"time": "2021-02-21 23:40:25.848993", "score": "0.8995", "loss": "0.1077", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + chtom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 368, "n_pass": [60, 6, 6]}
{"time": "2021-02-21 23:40:31.669234", "score": "0.8322", "loss": "0.1912", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + chtom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 350, "n_pass": [99, 8, 7]}
{"time": "2021-02-21 23:40:34.422963", "score": "0.7753", "loss": "0.2598", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt = mPaddingLeft + chtom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 331, "n_pass": [109, 9, 8]}
{"time": "2021-02-21 23:40:39.775366", "score": "0.8519", "loss": "0.189", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt = mPaddingLeft + chtom; child.layout(mPaddingLeft, mPad, childBottom); } }", "n_tokens": 312, "n_pass": [113, 11, 9]}
{"time": "2021-02-21 23:40:42.533802", "score": "0.516", "loss": "0.8393", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddingLeft, mPad, childBottom); } }", "n_tokens": 293, "n_pass": [128, 12, 10]}
{"time": "2021-02-21 23:40:53.323080", "score": "0.9346", "loss": "0.1107", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddind, childBottom); } }", "n_tokens": 283, "n_pass": [180, 16, 11]}
{"time": "2021-02-21 23:40:56.010724", "score": "0.8943", "loss": "0.7911", "code": "@Override protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 273, "n_pass": [181, 17, 12]}
{"time": "2021-02-21 23:40:58.680676", "score": "0.8561", "loss": "0.8655", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 264, "n_pass": [183, 18, 13]}
{"time": "2021-02-21 23:41:04.455953", "score": "0.855", "loss": "0.8969", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();t mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 255, "n_pass": [192, 20, 14]}
{"time": "2021-02-21 23:41:07.155609", "score": "0.9166", "loss": "0.58", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();gBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 246, "n_pass": [193, 21, 15]}
{"time": "2021-02-21 23:41:09.810891", "score": "0.9271", "loss": "0.294", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop(); getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 237, "n_pass": [194, 22, 16]}
{"time": "2021-02-21 23:41:12.466414", "score": "0.8743", "loss": "0.3302", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 228, "n_pass": [195, 23, 17]}
{"time": "2021-02-21 23:41:15.109590", "score": "0.8648", "loss": "0.4112", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = gunt(); for (int i = 0; i < childCount; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 219, "n_pass": [200, 24, 18]}
{"time": "2021-02-21 23:41:17.772019", "score": "0.9149", "loss": "0.7016", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) { final View child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 210, "n_pass": [204, 25, 19]}
{"time": "2021-02-21 23:41:20.464128", "score": "0.9081", "loss": "0.7408", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChildAchtom; child.layout(mPaddinttom); } }", "n_tokens": 201, "n_pass": [206, 26, 20]}
{"time": "2021-02-21 23:41:23.142217", "score": "0.8284", "loss": "0.9774", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilchild.layout(mPaddinttom); } }", "n_tokens": 192, "n_pass": [209, 27, 21]}
{"time": "2021-02-21 23:41:25.820455", "score": "0.7512", "loss": "1.2808", "code": " protected void onLayout(boint b) { final int mPaddingLeft = geingTop();ngBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilut(mPaddinttom); } }", "n_tokens": 182, "n_pass": [210, 28, 22]}
{"time": "2021-02-21 23:41:31.541560", "score": "0.8337", "loss": "0.7242", "code": " protected void onLayout(boint b) { final int mPaddingLeft = gengBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilut(mPaddinttom); } }", "n_tokens": 173, "n_pass": [220, 30, 23]}
{"time": "2021-02-21 23:41:37.271840", "score": "0.8337", "loss": "0.7242", "code": " protected void onLayout(boint b) { final int mPaddingLeft =gBottom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilut(mPaddinttom); } }", "n_tokens": 169, "n_pass": [279, 32, 24]}
{"time": "2021-02-21 23:41:39.911540", "score": "0.8295", "loss": "1.0412", "code": " protected void onLayout(boint b) { final int mPaddingLeft =tom(); final int childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilut(mPaddinttom); } }", "n_tokens": 165, "n_pass": [280, 33, 25]}
{"time": "2021-02-21 23:41:42.574777", "score": "0.5855", "loss": "1.8736", "code": " protected void onLayout(boint b) { final int mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew child = getChilut(mPaddinttom); } }", "n_tokens": 160, "n_pass": [283, 34, 26]}
{"time": "2021-02-21 23:41:50.518189", "score": "0.6775", "loss": "1.8633", "code": " protected void onLayout(boint b) { final int mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = getChilut(mPaddinttom); } }", "n_tokens": 155, "n_pass": [295, 37, 27]}
{"time": "2021-02-21 23:41:53.189094", "score": "0.6775", "loss": "1.8633", "code": " protected void onLayout(boint b) { final int mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPaddinttom); } }", "n_tokens": 150, "n_pass": [297, 38, 28]}
{"time": "2021-02-21 23:41:55.825584", "score": "0.6775", "loss": "1.8633", "code": " protected void onLayout(boint b) { final int mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 145, "n_pass": [299, 39, 29]}
{"time": "2021-02-21 23:41:58.472074", "score": "0.2283", "loss": "3.269", "code": " protectoid onLayout(boint b) { final int mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 141, "n_pass": [304, 40, 30]}
{"time": "2021-02-21 23:42:02.363658", "score": "0.2235", "loss": "3.2745", "code": " protectoid onLayout(boint b) { finat mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 137, "n_pass": [312, 41, 31]}
{"time": "2021-02-21 23:42:18.226939", "score": "0.2235", "loss": "3.2745", "code": "tectoid onLayout(boint b) { finat mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 133, "n_pass": [334, 47, 32]}
{"time": "2021-02-21 23:42:20.900699", "score": "0.2186", "loss": "3.6943", "code": "oid onLayout(boint b) { finat mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 129, "n_pass": [335, 48, 33]}
{"time": "2021-02-21 23:42:24.787924", "score": "0.2149", "loss": "3.7079", "code": "oid onLayout(boint b) { t mPaddingLeft =tom(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 125, "n_pass": [342, 49, 34]}
{"time": "2021-02-21 23:43:00.701955", "score": "0.2264", "loss": "3.5079", "code": "oid onLayout(boint b) { t mPaddingLeft =m(); fint childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 123, "n_pass": [432, 62, 35]}
{"time": "2021-02-21 23:43:03.373158", "score": "0.3367", "loss": "3.2463", "code": "oid onLayout(boint b) { t mPaddingLeft =m();int childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 121, "n_pass": [435, 63, 36]}
{"time": "2021-02-21 23:43:06.010957", "score": "0.3291", "loss": "3.2562", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount = gunt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 119, "n_pass": [436, 64, 37]}
{"time": "2021-02-21 23:43:24.665951", "score": "0.3291", "loss": "3.2562", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =unt(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 117, "n_pass": [444, 71, 38]}
{"time": "2021-02-21 23:43:27.330699", "score": "0.3229", "loss": "3.2626", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (int i = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 115, "n_pass": [445, 72, 39]}
{"time": "2021-02-21 23:43:29.998709", "score": "0.2756", "loss": "3.2855", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in = 0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 112, "n_pass": [451, 73, 40]}
{"time": "2021-02-21 23:43:32.636066", "score": "0.2383", "loss": "3.4042", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0; i < t; i++) {ew  = geut(mPttom); } }", "n_tokens": 109, "n_pass": [452, 74, 41]}
{"time": "2021-02-21 23:43:35.303636", "score": "0.2372", "loss": "3.4273", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ew  = geut(mPttom); } }", "n_tokens": 106, "n_pass": [454, 75, 42]}
{"time": "2021-02-21 23:43:37.983540", "score": "0.2026", "loss": "3.6421", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ew  =ut(mPttom); } }", "n_tokens": 103, "n_pass": [460, 76, 43]}
{"time": "2021-02-21 23:43:40.625385", "score": "0.2794", "loss": "4.0723", "code": "oid onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ew  =ut(tom); } }", "n_tokens": 100, "n_pass": [462, 77, 44]}
{"time": "2021-02-21 23:43:45.928513", "score": "0.4635", "loss": "2.3069", "code": "d onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ew  =ut(tom); } }", "n_tokens": 98, "n_pass": [466, 79, 45]}
{"time": "2021-02-21 23:44:33.676059", "score": "0.4542", "loss": "1.7972", "code": "d onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ew  =ut(); } }", "n_tokens": 95, "n_pass": [507, 96, 46]}
{"time": "2021-02-21 23:45:18.179511", "score": "0.4524", "loss": "1.7073", "code": "d onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {ewut(); } }", "n_tokens": 92, "n_pass": [548, 112, 47]}
{"time": "2021-02-21 23:46:08.077925", "score": "0.3234", "loss": "2.1113", "code": "d onLayout(boint b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 90, "n_pass": [673, 128, 48]}
{"time": "2021-02-21 23:46:20.120677", "score": "0.3234", "loss": "2.1113", "code": "d onLayout(bont b) { t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 89, "n_pass": [691, 131, 49]}
{"time": "2021-02-21 23:46:28.040244", "score": "0.3234", "loss": "2.1113", "code": "d onLayout(bont b){ t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 88, "n_pass": [697, 134, 50]}
{"time": "2021-02-21 23:46:30.670448", "score": "0.3234", "loss": "2.1113", "code": "d onLayout(bont b){t mPaddingLeft =m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 87, "n_pass": [699, 135, 51]}
{"time": "2021-02-21 23:46:38.565636", "score": "0.7465", "loss": "0.5615", "code": "d onLayout(bont b){t PaddingLeft =m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 86, "n_pass": [702, 138, 52]}
{"time": "2021-02-21 23:47:10.223380", "score": "0.7465", "loss": "0.5615", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount =t(); for (in0;  t; i++) {et(); } }", "n_tokens": 85, "n_pass": [714, 150, 53]}
{"time": "2021-02-21 23:47:44.577850", "score": "0.7465", "loss": "0.5615", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t(); for (in0;  t; i++) {et(); } }", "n_tokens": 84, "n_pass": [732, 163, 54]}
{"time": "2021-02-21 23:47:47.210011", "score": "0.7465", "loss": "0.5615", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for (in0;  t; i++) {et(); } }", "n_tokens": 83, "n_pass": [738, 164, 55]}
{"time": "2021-02-21 23:47:49.862516", "score": "0.7465", "loss": "0.5615", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(in0;  t; i++) {et(); } }", "n_tokens": 82, "n_pass": [742, 165, 56]}
{"time": "2021-02-21 23:47:52.525574", "score": "0.7564", "loss": "0.5255", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(n0;  t; i++) {et(); } }", "n_tokens": 81, "n_pass": [744, 166, 57]}
{"time": "2021-02-21 23:47:55.161764", "score": "0.78", "loss": "0.4929", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(0;  t; i++) {et(); } }", "n_tokens": 80, "n_pass": [745, 167, 58]}
{"time": "2021-02-21 23:47:57.816921", "score": "0.759", "loss": "0.5119", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(;  t; i++) {et(); } }", "n_tokens": 79, "n_pass": [746, 168, 59]}
{"time": "2021-02-21 23:48:00.466113", "score": "0.759", "loss": "0.5119", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(; t; i++) {et(); } }", "n_tokens": 78, "n_pass": [748, 169, 60]}
{"time": "2021-02-21 23:48:03.125238", "score": "0.759", "loss": "0.5119", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(;t; i++) {et(); } }", "n_tokens": 77, "n_pass": [749, 170, 61]}
{"time": "2021-02-21 23:48:05.763872", "score": "0.7599", "loss": "0.5172", "code": "d onLayout(bont b){t PaddingLeft=m();t childCount=t();for(;t; i) {et(); } }", "n_tokens": 75, "n_pass": [752, 171, 62]}
{"time": "2021-02-21 23:48:17.740174", "score": "0.4283", "loss": "1.5364", "code": "d onLayout(bot b){t PaddingLeft=m();t childCount=t();for(;t; i) {et(); } }", "n_tokens": 74, "n_pass": [772, 174, 63]}
{"time": "2021-02-21 23:48:20.389521", "score": "0.5799", "loss": "1.0791", "code": "d onLayout(bo b){t PaddingLeft=m();t childCount=t();for(;t; i) {et(); } }", "n_tokens": 73, "n_pass": [773, 175, 64]}
{"time": "2021-02-21 23:49:29.054956", "score": "0.5798", "loss": "1.0688", "code": "d onLayout(bo b){t PaddingLeft=m();t childCount=t();for(;t;) {et(); } }", "n_tokens": 71, "n_pass": [819, 201, 65]}
{"time": "2021-02-21 23:49:35.805405", "score": "0.7416", "loss": "0.4548", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;t;) {et(); } }", "n_tokens": 70, "n_pass": [837, 202, 66]}
{"time": "2021-02-21 23:50:50.512555", "score": "0.7484", "loss": "0.4314", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;;) {et(); } }", "n_tokens": 69, "n_pass": [915, 228, 67]}
{"time": "2021-02-21 23:50:53.170094", "score": "0.7484", "loss": "0.4314", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;;){et(); } }", "n_tokens": 68, "n_pass": [917, 229, 68]}
{"time": "2021-02-21 23:50:55.795462", "score": "0.8295", "loss": "0.2867", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;;){t(); } }", "n_tokens": 67, "n_pass": [919, 230, 69]}
{"time": "2021-02-21 23:50:58.404874", "score": "0.8295", "loss": "0.2867", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;;){t();} }", "n_tokens": 66, "n_pass": [924, 231, 70]}
{"time": "2021-02-21 23:51:01.013211", "score": "0.8295", "loss": "0.2867", "code": "d onLayout(o b){t PaddingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 65, "n_pass": [926, 232, 71]}
{"time": "2021-02-21 23:51:10.397938", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tPaddingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 64, "n_pass": [945, 234, 72]}
{"time": "2021-02-21 23:51:13.065814", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){taddingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 63, "n_pass": [946, 235, 73]}
{"time": "2021-02-21 23:51:15.685380", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tddingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 62, "n_pass": [947, 236, 74]}
{"time": "2021-02-21 23:51:18.324030", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tdingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 61, "n_pass": [948, 237, 75]}
{"time": "2021-02-21 23:51:20.962734", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tingLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 60, "n_pass": [949, 238, 76]}
{"time": "2021-02-21 23:51:23.626289", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tngLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 59, "n_pass": [950, 239, 77]}
{"time": "2021-02-21 23:51:26.274497", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tgLeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 58, "n_pass": [951, 240, 78]}
{"time": "2021-02-21 23:51:31.550518", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tgeft=m();t childCount=t();for(;;){t();}}", "n_tokens": 57, "n_pass": [953, 242, 79]}
{"time": "2021-02-21 23:51:34.189491", "score": "0.3565", "loss": "1.5855", "code": "d onLayout(o b){tgft=m();t childCount=t();for(;;){t();}}", "n_tokens": 56, "n_pass": [954, 243, 80]}

Minimal simplified code:
d onLayout(o b){tgft=m();t childCount=t();for(;;){t();}}

