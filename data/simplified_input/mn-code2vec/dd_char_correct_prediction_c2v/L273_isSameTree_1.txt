
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_572_isSameTree.java
method_name = isSameTree
method_body = private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }
predict, score, loss = isSameTree, 0.9999957084655762, 5.006777428206988e-06

Trace of simplified code(s):
{"time": "2021-02-24 18:43:10.884748", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 186, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 18:43:14.009575", "score": "1.0", "loss": "0.0", "code": "lean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 175, "n_pass": [44, 2, 2]}
{"time": "2021-02-24 18:43:17.111237", "score": "1.0", "loss": "0.0", "code": "lean isSameTree(TreeNoode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 164, "n_pass": [47, 3, 3]}
{"time": "2021-02-24 18:43:19.794551", "score": "1.0", "loss": "0.0", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 152, "n_pass": [50, 4, 4]}
{"time": "2021-02-24 18:43:22.482074", "score": "1.0", "loss": "0.0", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 140, "n_pass": [53, 5, 5]}
{"time": "2021-02-24 18:43:26.431922", "score": "0.9998", "loss": "0.0002", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.vasSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 134, "n_pass": [91, 6, 6]}
{"time": "2021-02-24 18:43:29.103423", "score": "0.9998", "loss": "0.0002", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.varee(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 128, "n_pass": [92, 7, 7]}
{"time": "2021-02-24 18:43:31.778486", "score": "0.9999", "loss": "0.0002", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.varee(p.q.left) && isSameTree(p.right, q.right); }", "n_tokens": 122, "n_pass": [94, 8, 8]}
{"time": "2021-02-24 18:43:37.163614", "score": "0.9998", "loss": "0.0005", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.varee(p.q.left) && isSameTree(p. q.right); }", "n_tokens": 116, "n_pass": [99, 10, 9]}
{"time": "2021-02-24 18:43:39.831481", "score": "0.989", "loss": "0.0174", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } re= q.varee(p.q.left) && isSameTree(p.ht); }", "n_tokens": 110, "n_pass": [100, 11, 10]}
{"time": "2021-02-24 18:43:43.765839", "score": "0.9877", "loss": "0.0172", "code": "lean isSameTree(TreeNoode q) { if (p =l) { return p == q; } re= q.varee(p.q.left) && isSameTree(p.ht); }", "n_tokens": 104, "n_pass": [109, 12, 11]}
{"time": "2021-02-24 18:43:46.862908", "score": "0.9879", "loss": "0.0154", "code": "lean isSameTree(TreeNoode q) { if (p =l) { return ; } re= q.varee(p.q.left) && isSameTree(p.ht); }", "n_tokens": 98, "n_pass": [112, 13, 12]}
{"time": "2021-02-24 18:43:53.872489", "score": "0.9878", "loss": "0.0156", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } re= q.varee(p.q.left) && isSameTree(p.ht); }", "n_tokens": 92, "n_pass": [129, 15, 13]}
{"time": "2021-02-24 18:44:01.357499", "score": "0.955", "loss": "0.0537", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } re= qree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 89, "n_pass": [181, 17, 14]}
{"time": "2021-02-24 18:44:04.031195", "score": "0.9633", "loss": "0.0434", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } re= q(p.q.left) && isSameTree(p.ht); }", "n_tokens": 86, "n_pass": [182, 18, 15]}
{"time": "2021-02-24 18:44:06.720061", "score": "0.9822", "loss": "0.0238", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 83, "n_pass": [184, 19, 16]}
{"time": "2021-02-24 18:44:20.156939", "score": "0.9877", "loss": "0.016", "code": "an isSameTree(TreeNoode q) { if (p =l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 81, "n_pass": [194, 24, 17]}
{"time": "2021-02-24 18:44:24.935033", "score": "0.9877", "loss": "0.016", "code": "an isSameTree(TNoode q) { if (p =l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 78, "n_pass": [201, 25, 18]}
{"time": "2021-02-24 18:44:27.612173", "score": "0.9697", "loss": "0.054", "code": "an isSameTree(Tde q) { if (p =l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 75, "n_pass": [202, 26, 19]}
{"time": "2021-02-24 18:44:30.264900", "score": "0.9559", "loss": "0.081", "code": "an isSameTree(Tde q) { if (l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 72, "n_pass": [207, 27, 20]}
{"time": "2021-02-24 18:44:48.045485", "score": "0.9559", "loss": "0.081", "code": "an isSameTree(Tde q){ if (l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 71, "n_pass": [283, 32, 21]}
{"time": "2021-02-24 18:44:50.696411", "score": "0.9559", "loss": "0.081", "code": "an isSameTree(Tde q){if (l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 70, "n_pass": [285, 33, 22]}
{"time": "2021-02-24 18:44:53.353170", "score": "0.9559", "loss": "0.081", "code": "an isSameTree(Tde q){if(l) { r; } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 69, "n_pass": [288, 34, 23]}
{"time": "2021-02-24 18:44:56.015904", "score": "0.9568", "loss": "0.0788", "code": "an isSameTree(Tde q){if(l) {  } re= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 67, "n_pass": [293, 35, 24]}
{"time": "2021-02-24 18:44:58.704765", "score": "0.9167", "loss": "0.1547", "code": "an isSameTree(Tde q){if(l) {  }e= q(p.eft) && isSameTree(p.ht); }", "n_tokens": 65, "n_pass": [295, 36, 25]}
{"time": "2021-02-24 18:45:01.774184", "score": "0.9112", "loss": "0.1552", "code": "an isSameTree(Tde q){if(l) {  }e=(p.eft) && isSameTree(p.ht); }", "n_tokens": 63, "n_pass": [297, 37, 26]}
{"time": "2021-02-24 18:45:04.433153", "score": "0.9071", "loss": "0.3226", "code": "an isSameTree(Tde q){if(l) {  }e=(pft) && isSameTree(p.ht); }", "n_tokens": 61, "n_pass": [299, 38, 27]}
{"time": "2021-02-24 18:45:07.080318", "score": "0.7163", "loss": "0.4751", "code": "an isSameTree(Tde q){if(l) {  }e=(p) && isSameTree(p.ht); }", "n_tokens": 59, "n_pass": [300, 39, 28]}
{"time": "2021-02-24 18:45:09.764144", "score": "0.996", "loss": "0.0085", "code": "an isSameTree(Tde q){if(l) {  }e=(p)  isSameTree(p.ht); }", "n_tokens": 57, "n_pass": [302, 40, 29]}
{"time": "2021-02-24 18:45:25.743533", "score": "0.9955", "loss": "0.0103", "code": "an isSameTree(Tde q){if(l) {  }e=(p)  isSameTree(ht); }", "n_tokens": 55, "n_pass": [309, 46, 30]}
{"time": "2021-02-24 18:45:28.392039", "score": "0.9947", "loss": "0.0094", "code": "an isSameTree(Tde q){if(l) {  }e=(p)  isSameTree(); }", "n_tokens": 53, "n_pass": [310, 47, 31]}
{"time": "2021-02-24 18:45:31.035455", "score": "0.9948", "loss": "0.0107", "code": "n isSameTree(Tde q){if(l) {  }e=(p)  isSameTree(); }", "n_tokens": 52, "n_pass": [313, 48, 32]}
{"time": "2021-02-24 18:45:38.719513", "score": "0.9994", "loss": "0.0012", "code": "n isSameTree(de q){if(l) {  }e=(p)  isSameTree(); }", "n_tokens": 51, "n_pass": [327, 49, 33]}
{"time": "2021-02-24 18:45:41.387422", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l) {  }e=(p)  isSameTree(); }", "n_tokens": 50, "n_pass": [328, 50, 34]}
{"time": "2021-02-24 18:46:05.528498", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){  }e=(p)  isSameTree(); }", "n_tokens": 49, "n_pass": [394, 56, 35]}
{"time": "2021-02-24 18:46:08.209371", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){ }e=(p)  isSameTree(); }", "n_tokens": 48, "n_pass": [396, 57, 36]}
{"time": "2021-02-24 18:46:10.858753", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){}e=(p)  isSameTree(); }", "n_tokens": 47, "n_pass": [397, 58, 37]}
{"time": "2021-02-24 18:46:13.514294", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){}e=(p) isSameTree(); }", "n_tokens": 46, "n_pass": [404, 59, 38]}
{"time": "2021-02-24 18:46:16.203391", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){}e=(p)isSameTree(); }", "n_tokens": 45, "n_pass": [405, 60, 39]}
{"time": "2021-02-24 18:46:45.427871", "score": "0.9987", "loss": "0.0021", "code": "n isSameTree(e q){if(l){}e=(p)isSameTree();}", "n_tokens": 44, "n_pass": [419, 71, 40]}

Minimal simplified code:
n isSameTree(e q){if(l){}e=(p)isSameTree();}

