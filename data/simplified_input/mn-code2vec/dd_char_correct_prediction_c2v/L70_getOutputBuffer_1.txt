
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/qqchenjian318__VideoEditor-For-Android/app/src/main/java/com/example/cj/videoeditor/record/video/VideoEncoderCore_getOutputBuffer.java
method_name = getOutputBuffer
method_body = private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }
predict, score, loss = getOutputBuffer, 0.9998393058776855, 0.0009833505610004067

Trace of simplified code(s):
{"time": "2021-02-22 02:57:36.786126", "score": "0.9998", "loss": "0.001", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 216, "n_pass": [1, 1, 1]}
{"time": "2021-02-22 02:57:39.841366", "score": "0.9995", "loss": "0.0017", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSI_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 189, "n_pass": [23, 2, 2]}
{"time": "2021-02-22 02:57:45.567762", "score": "0.9997", "loss": "0.0008", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 176, "n_pass": [44, 4, 3]}
{"time": "2021-02-22 02:57:50.806199", "score": "0.9998", "loss": "0.0005", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { rtOutputBuffers()[index]; } }", "n_tokens": 162, "n_pass": [49, 6, 4]}
{"time": "2021-02-22 02:57:53.417929", "score": "0.9998", "loss": "0.0005", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 148, "n_pass": [50, 7, 5]}
{"time": "2021-02-22 02:57:56.033693", "score": "0.9999", "loss": "0.0004", "code": "uffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 135, "n_pass": [52, 8, 6]}
{"time": "2021-02-22 02:58:03.091973", "score": "0.9996", "loss": "0.0006", "code": "uffer getOutputBuffer(Meec codec, int index) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 129, "n_pass": [87, 10, 7]}
{"time": "2021-02-22 02:58:05.751028", "score": "0.9999", "loss": "0.0009", "code": "uffer getOutputBuffer(Meec codeindex) { if (Build.VELIPOP) { return codec.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 122, "n_pass": [89, 11, 8]}
{"time": "2021-02-22 02:58:08.354897", "score": "0.9999", "loss": "0.0004", "code": "uffer getOutputBuffer(Meec codeindex) { if (BLIPOP) { return codec.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 115, "n_pass": [92, 12, 9]}
{"time": "2021-02-22 02:58:10.960547", "score": "0.9958", "loss": "0.0237", "code": "uffer getOutputBuffer(Meec codeindex) { if (BLIPOP) { retur.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 108, "n_pass": [95, 13, 10]}
{"time": "2021-02-22 02:58:20.169900", "score": "0.9968", "loss": "0.0184", "code": "uffer getOutputBuffer(Meec codeindex) { if (BLIPOP) { ur.getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 105, "n_pass": [144, 16, 11]}
{"time": "2021-02-22 02:58:22.795413", "score": "0.944", "loss": "0.2454", "code": "uffer getOutputBuffer(Meec codeindex) { if (BLIPOP) { getOutputBuffer(index); } else { r()[index]; } }", "n_tokens": 102, "n_pass": [145, 17, 12]}
{"time": "2021-02-22 02:58:33.312129", "score": "0.9349", "loss": "0.2769", "code": "uffer getOutputBuffer(Meec codeindex) { if (BLIPOP) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 98, "n_pass": [150, 21, 13]}
{"time": "2021-02-22 02:58:35.911728", "score": "0.9454", "loss": "0.2469", "code": "er getOutputBuffer(Meec codeindex) { if (BLIPOP) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 95, "n_pass": [158, 22, 14]}
{"time": "2021-02-22 02:58:41.029879", "score": "0.9962", "loss": "0.0154", "code": "er getOutputBuffer(Meec eindex) { if (BLIPOP) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 92, "n_pass": [167, 23, 15]}
{"time": "2021-02-22 02:58:43.684631", "score": "0.954", "loss": "0.1069", "code": "er getOutputBuffer(Meec dex) { if (BLIPOP) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 89, "n_pass": [168, 24, 16]}
{"time": "2021-02-22 02:58:46.361324", "score": "0.9661", "loss": "0.0677", "code": "er getOutputBuffer(Meec dex) { if (BOP) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 86, "n_pass": [173, 25, 17]}
{"time": "2021-02-22 02:59:00.380908", "score": "0.9691", "loss": "0.0631", "code": "er getOutputBuffer(Meec dex) { if (B) { getOutputBuffer(x); } else { r()[index]; } }", "n_tokens": 84, "n_pass": [250, 29, 18]}
{"time": "2021-02-22 02:59:22.311332", "score": "0.9686", "loss": "0.0586", "code": "er getOutputBuffer(Meec dex) { if (B) { getOutputBuffer(x); } else { r[index]; } }", "n_tokens": 82, "n_pass": [268, 37, 19]}
{"time": "2021-02-22 02:59:24.945486", "score": "0.9836", "loss": "0.0492", "code": "er getOutputBuffer(Meec dex) { if (B) { getOutputBuffer(x); } else { r[iex]; } }", "n_tokens": 80, "n_pass": [270, 38, 20]}
{"time": "2021-02-22 02:59:27.565981", "score": "0.9654", "loss": "0.0621", "code": "er getOutputBuffer(Meec dex) { if (B) { getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 78, "n_pass": [271, 39, 21]}
{"time": "2021-02-22 02:59:30.170645", "score": "0.9649", "loss": "0.0521", "code": "r getOutputBuffer(Meec dex) { if (B) { getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 77, "n_pass": [275, 40, 22]}
{"time": "2021-02-22 02:59:38.608563", "score": "0.8705", "loss": "0.1721", "code": "r getOutputBuffer(Mc dex) { if (B) { getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 75, "n_pass": [292, 41, 23]}
{"time": "2021-02-22 02:59:41.245333", "score": "0.9597", "loss": "0.0783", "code": "r getOutputBuffer(Mc x) { if (B) { getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 73, "n_pass": [294, 42, 24]}
{"time": "2021-02-22 03:00:12.970355", "score": "0.9597", "loss": "0.0783", "code": "r getOutputBuffer(Mc x) { if(B) { getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 72, "n_pass": [398, 50, 25]}
{"time": "2021-02-22 03:00:15.574029", "score": "0.9597", "loss": "0.0783", "code": "r getOutputBuffer(Mc x) { if(B){ getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 71, "n_pass": [402, 51, 26]}
{"time": "2021-02-22 03:00:18.181224", "score": "0.9597", "loss": "0.0783", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer(x); } else { r[i]; } }", "n_tokens": 70, "n_pass": [404, 52, 27]}
{"time": "2021-02-22 03:01:00.254860", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer(); } else { r[i]; } }", "n_tokens": 69, "n_pass": [421, 68, 28]}
{"time": "2021-02-22 03:01:02.865120", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();} else { r[i]; } }", "n_tokens": 68, "n_pass": [424, 69, 29]}
{"time": "2021-02-22 03:01:05.458458", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();}else { r[i]; } }", "n_tokens": 67, "n_pass": [426, 70, 30]}
{"time": "2021-02-22 03:01:08.070505", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();}else{ r[i]; } }", "n_tokens": 66, "n_pass": [431, 71, 31]}
{"time": "2021-02-22 03:01:10.669128", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();}else{r[i]; } }", "n_tokens": 65, "n_pass": [433, 72, 32]}
{"time": "2021-02-22 03:01:13.293185", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();}else{r[i];} }", "n_tokens": 64, "n_pass": [439, 73, 33]}
{"time": "2021-02-22 03:01:15.906195", "score": "0.8994", "loss": "0.1768", "code": "r getOutputBuffer(Mc x) { if(B){getOutputBuffer();}else{r[i];}}", "n_tokens": 63, "n_pass": [441, 74, 34]}
{"time": "2021-02-22 03:01:25.155729", "score": "0.9636", "loss": "0.0681", "code": "r getOutputBuffer(c x) { if(B){getOutputBuffer();}else{r[i];}}", "n_tokens": 62, "n_pass": [461, 75, 35]}
{"time": "2021-02-22 03:01:27.788479", "score": "0.9636", "loss": "0.0681", "code": "r getOutputBuffer(c x){ if(B){getOutputBuffer();}else{r[i];}}", "n_tokens": 61, "n_pass": [466, 76, 36]}
{"time": "2021-02-22 03:01:30.465643", "score": "0.9636", "loss": "0.0681", "code": "r getOutputBuffer(c x){if(B){getOutputBuffer();}else{r[i];}}", "n_tokens": 60, "n_pass": [468, 77, 37]}

Minimal simplified code:
r getOutputBuffer(c x){if(B){getOutputBuffer();}else{r[i];}}

