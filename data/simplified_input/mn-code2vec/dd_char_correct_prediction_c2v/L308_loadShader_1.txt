
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/gplibs__android-magic-surface-view/src/main/java/com/gplibs/magicsurfaceview/GLUtil_loadShader.java
method_name = loadShader
method_body = static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException("Could not compile shader " + shaderType + ":" + info); } } return shader; }
predict, score, loss = loadShader, 0.9990237951278687, 0.0010407513473182917

Trace of simplified code(s):
{"time": "2021-02-24 23:46:44.499475", "score": "0.9987", "loss": "0.0015", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 498, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 23:46:47.255314", "score": "0.9995", "loss": "0.0006", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shr, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 436, "n_pass": [23, 2, 2]}
{"time": "2021-02-24 23:46:49.999689", "score": "0.9986", "loss": "0.0016", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 405, "n_pass": [44, 3, 3]}
{"time": "2021-02-24 23:46:52.705467", "score": "0.9955", "loss": "0.0046", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 374, "n_pass": [46, 4, 4]}
{"time": "2021-02-24 23:46:55.406995", "score": "0.9862", "loss": "0.014", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not c:\" + info); } } return shader; }", "n_tokens": 342, "n_pass": [49, 5, 5]}
{"time": "2021-02-24 23:46:58.104600", "score": "0.918", "loss": "0.0855", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not c:\" + info); } } return shader; }", "n_tokens": 311, "n_pass": [56, 6, 6]}
{"time": "2021-02-24 23:47:00.848490", "score": "0.907", "loss": "0.0977", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Could not c:\" + info); } } return shader; }", "n_tokens": 295, "n_pass": [93, 7, 7]}
{"time": "2021-02-24 23:47:07.155559", "score": "0.9102", "loss": "0.0941", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } return shader; }", "n_tokens": 287, "n_pass": [152, 9, 8]}
{"time": "2021-02-24 23:47:10.002223", "score": "0.9803", "loss": "0.0199", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 279, "n_pass": [155, 10, 9]}
{"time": "2021-02-24 23:47:12.714353", "score": "0.9805", "loss": "0.0197", "code": "int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 272, "n_pass": [157, 11, 10]}
{"time": "2021-02-24 23:47:16.287099", "score": "0.9713", "loss": "0.0299", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 265, "n_pass": [161, 12, 11]}
{"time": "2021-02-24 23:47:27.086980", "score": "0.789", "loss": "0.237", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2erSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 257, "n_pass": [174, 16, 12]}
{"time": "2021-02-24 23:47:29.780352", "score": "0.7703", "loss": "0.2612", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 249, "n_pass": [175, 17, 13]}
{"time": "2021-02-24 23:47:32.490047", "score": "0.7691", "loss": "0.2627", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 241, "n_pass": [177, 18, 14]}
{"time": "2021-02-24 23:47:35.208062", "score": "0.7008", "loss": "0.3556", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 233, "n_pass": [180, 19, 15]}
{"time": "2021-02-24 23:47:37.913878", "score": "0.6381", "loss": "0.4495", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { nfo = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 225, "n_pass": [182, 20, 16]}
{"time": "2021-02-24 23:47:40.599510", "score": "0.6962", "loss": "0.3623", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { ES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 217, "n_pass": [183, 21, 17]}
{"time": "2021-02-24 23:47:43.588346", "score": "0.6958", "loss": "0.3629", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { etlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 209, "n_pass": [184, 22, 18]}
{"time": "2021-02-24 23:47:46.288551", "score": "0.6958", "loss": "0.3629", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 201, "n_pass": [185, 23, 19]}
{"time": "2021-02-24 23:47:49.006994", "score": "0.8245", "loss": "0.1938", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 193, "n_pass": [188, 24, 20]}
{"time": "2021-02-24 23:48:00.870166", "score": "0.8227", "loss": "0.1959", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } hader; }", "n_tokens": 189, "n_pass": [267, 28, 21]}
{"time": "2021-02-24 23:48:03.596031", "score": "0.8223", "loss": "0.1965", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 185, "n_pass": [270, 29, 22]}
{"time": "2021-02-24 23:48:08.011486", "score": "0.7647", "loss": "0.2694", "code": "int loadShader(int she, Sg source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 181, "n_pass": [280, 30, 23]}
{"time": "2021-02-24 23:48:10.731937", "score": "0.5013", "loss": "0.6936", "code": "int loadShader(int she, Sg so) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 177, "n_pass": [282, 31, 24]}
{"time": "2021-02-24 23:48:16.387327", "score": "0.55", "loss": "0.6015", "code": "int loadShader(int she, Sg so) { int er = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 173, "n_pass": [285, 33, 25]}
{"time": "2021-02-24 23:48:19.083181", "score": "0.5633", "loss": "0.5774", "code": "int loadShader(int she, Sg so) { int er =S20.glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 169, "n_pass": [287, 34, 26]}
{"time": "2021-02-24 23:48:21.858152", "score": "0.5185", "loss": "0.6849", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 165, "n_pass": [288, 35, 27]}
{"time": "2021-02-24 23:48:35.460971", "score": "0.3408", "loss": "1.9954", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 161, "n_pass": [294, 40, 28]}
{"time": "2021-02-24 23:48:38.234857", "score": "0.3409", "loss": "2.1581", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (er != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 157, "n_pass": [297, 41, 29]}
{"time": "2021-02-24 23:48:40.937683", "score": "0.2998", "loss": "2.3531", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (er != 0) { G(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 153, "n_pass": [301, 42, 30]}
{"time": "2021-02-24 23:48:43.640768", "score": "0.301", "loss": "2.3613", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (er != 0) { G(shaed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 149, "n_pass": [303, 43, 31]}
{"time": "2021-02-24 23:48:46.322115", "score": "0.3207", "loss": "2.2595", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (er != 0) { G(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 145, "n_pass": [304, 44, 32]}
{"time": "2021-02-24 23:48:54.443129", "score": "0.302", "loss": "2.9666", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(shadee); if (er != 0) { G(sha0); if (comp== 0) { eShader(er);ion(\"Cou:\" +o); } } r; }", "n_tokens": 141, "n_pass": [312, 47, 33]}
{"time": "2021-02-24 23:49:09.684122", "score": "0.2523", "loss": "3.2887", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp== 0) { eShader(er);ion(\"Cou:\" +o); } } r; }", "n_tokens": 137, "n_pass": [336, 52, 34]}
{"time": "2021-02-24 23:49:12.412569", "score": "0.2091", "loss": "3.5504", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { eShader(er);ion(\"Cou:\" +o); } } r; }", "n_tokens": 133, "n_pass": [346, 53, 35]}
{"time": "2021-02-24 23:49:31.861641", "score": "0.2091", "loss": "3.5504", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { hader(er);ion(\"Cou:\" +o); } } r; }", "n_tokens": 131, "n_pass": [454, 59, 36]}
{"time": "2021-02-24 23:49:34.577043", "score": "0.1936", "loss": "4.1865", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { har(er);ion(\"Cou:\" +o); } } r; }", "n_tokens": 129, "n_pass": [455, 60, 37]}
{"time": "2021-02-24 23:49:40.012574", "score": "0.1964", "loss": "3.9307", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { har(er);n(\"Cou:\" +o); } } r; }", "n_tokens": 127, "n_pass": [459, 62, 38]}
{"time": "2021-02-24 23:49:45.445810", "score": "0.198", "loss": "3.9142", "code": "int loadShader(int she, Sg so) { int er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 125, "n_pass": [469, 64, 39]}
{"time": "2021-02-24 23:50:07.612451", "score": "0.1762", "loss": "4.0527", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er != 0) { G(sha0); if (comp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 123, "n_pass": [491, 71, 40]}
{"time": "2021-02-24 23:50:34.518463", "score": "0.1769", "loss": "4.0109", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) { G(sha0); if (comp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 121, "n_pass": [508, 81, 41]}
{"time": "2021-02-24 23:50:39.901552", "score": "0.2824", "loss": "3.3207", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) {(sha0); if (comp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 119, "n_pass": [512, 83, 42]}
{"time": "2021-02-24 23:50:42.599833", "score": "0.2808", "loss": "3.2976", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) {(s0); if (comp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 117, "n_pass": [514, 84, 43]}
{"time": "2021-02-24 23:50:45.293739", "score": "0.298", "loss": "2.8554", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) {(s0); if (mp) { har(er);n(\"Cou:\" +o); } }  }", "n_tokens": 115, "n_pass": [519, 85, 44]}
{"time": "2021-02-24 23:50:47.974917", "score": "0.2722", "loss": "2.3792", "code": "int loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 113, "n_pass": [523, 86, 45]}
{"time": "2021-02-24 23:50:58.768831", "score": "0.2118", "loss": "3.2441", "code": "it loadShader(int she, Sg so) { t er =glCreateShader(se); if (er= 0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 112, "n_pass": [538, 90, 46]}
{"time": "2021-02-24 23:51:09.857489", "score": "0.3223", "loss": "2.7626", "code": "it loadShader(int e, Sg so) { t er =glCreateShader(se); if (er= 0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 110, "n_pass": [550, 93, 47]}
{"time": "2021-02-24 23:51:39.495020", "score": "0.2605", "loss": "3.1878", "code": "it loadShader(int e, Sg so) { t er =glCreateShader(se); if (er0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 108, "n_pass": [573, 104, 48]}
{"time": "2021-02-24 23:51:47.711937", "score": "0.2263", "loss": "3.2679", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (er0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 107, "n_pass": [597, 107, 49]}
{"time": "2021-02-24 23:52:23.510827", "score": "0.2897", "loss": "2.7862", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0) {(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 105, "n_pass": [630, 119, 50]}
{"time": "2021-02-24 23:53:13.911253", "score": "0.2897", "loss": "2.7862", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(s0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 104, "n_pass": [786, 133, 51]}
{"time": "2021-02-24 23:53:16.637359", "score": "0.2903", "loss": "2.7858", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0); if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 103, "n_pass": [788, 134, 52]}
{"time": "2021-02-24 23:53:19.354644", "score": "0.2903", "loss": "2.7858", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if (mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 102, "n_pass": [792, 135, 53]}
{"time": "2021-02-24 23:53:22.039569", "score": "0.2903", "loss": "2.7858", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(mp) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 101, "n_pass": [795, 136, 54]}
{"time": "2021-02-24 23:53:27.454571", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m) { r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 100, "n_pass": [798, 138, 55]}
{"time": "2021-02-24 23:53:30.183254", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){ r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 99, "n_pass": [800, 139, 56]}
{"time": "2021-02-24 23:53:32.864497", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou:\" +o); } }  }", "n_tokens": 98, "n_pass": [802, 140, 57]}
{"time": "2021-02-24 23:53:54.562903", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\" +o); } }  }", "n_tokens": 97, "n_pass": [815, 148, 58]}
{"time": "2021-02-24 23:53:57.280816", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o); } }  }", "n_tokens": 96, "n_pass": [817, 149, 59]}
{"time": "2021-02-24 23:53:59.991981", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);} }  }", "n_tokens": 95, "n_pass": [822, 150, 60]}
{"time": "2021-02-24 23:54:02.666855", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}  }", "n_tokens": 94, "n_pass": [824, 151, 61]}
{"time": "2021-02-24 23:54:05.352379", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}} }", "n_tokens": 93, "n_pass": [826, 152, 62]}
{"time": "2021-02-24 23:54:08.042856", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e, Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 92, "n_pass": [827, 153, 63]}
{"time": "2021-02-24 23:54:24.497403", "score": "0.2263", "loss": "2.8755", "code": "t loadShader(int e,Sg so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 91, "n_pass": [848, 157, 64]}
{"time": "2021-02-24 23:54:30.112151", "score": "0.3358", "loss": "3.0658", "code": "t loadShader(int e,S so) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 90, "n_pass": [850, 159, 65]}
{"time": "2021-02-24 23:54:33.067634", "score": "0.343", "loss": "2.6174", "code": "t loadShader(int e,S o) { t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 89, "n_pass": [852, 160, 66]}
{"time": "2021-02-24 23:54:35.876012", "score": "0.343", "loss": "2.6174", "code": "t loadShader(int e,S o){ t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 88, "n_pass": [855, 161, 67]}
{"time": "2021-02-24 23:54:38.714290", "score": "0.343", "loss": "2.6174", "code": "t loadShader(int e,S o){t er =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 87, "n_pass": [857, 162, 68]}
{"time": "2021-02-24 23:54:47.233015", "score": "0.3584", "loss": "2.5497", "code": "t loadShader(int e,S o){t r =glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 86, "n_pass": [860, 165, 69]}
{"time": "2021-02-24 23:54:52.885303", "score": "0.3584", "loss": "2.5497", "code": "t loadShader(int e,S o){t r=glCreateShader(se); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 85, "n_pass": [862, 167, 70]}
{"time": "2021-02-24 23:55:35.595552", "score": "0.332", "loss": "2.5301", "code": "t loadShader(int e,S o){t r=glCreateShader(e); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 84, "n_pass": [879, 182, 71]}
{"time": "2021-02-24 23:55:38.371854", "score": "0.3894", "loss": "2.3849", "code": "t loadShader(int e,S o){t r=glCreateShader(); if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 83, "n_pass": [880, 183, 72]}
{"time": "2021-02-24 23:55:41.164631", "score": "0.3894", "loss": "2.3849", "code": "t loadShader(int e,S o){t r=glCreateShader();if (0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 82, "n_pass": [883, 184, 73]}
{"time": "2021-02-24 23:55:43.983734", "score": "0.3894", "loss": "2.3849", "code": "t loadShader(int e,S o){t r=glCreateShader();if(0){(0);if(m){r(er);n(\"Cou\"+o);}}}", "n_tokens": 81, "n_pass": [886, 185, 74]}
{"time": "2021-02-24 23:55:46.845820", "score": "0.3103", "loss": "1.7901", "code": "t loadShader(int e,S o){t r=glCreateShader();if(0){(0);if(m){(er);n(\"Cou\"+o);}}}", "n_tokens": 80, "n_pass": [901, 186, 75]}
{"time": "2021-02-24 23:55:49.674519", "score": "0.3077", "loss": "1.804", "code": "t loadShader(int e,S o){t r=glCreateShader();if(0){(0);if(m){(r);n(\"Cou\"+o);}}}", "n_tokens": 79, "n_pass": [903, 187, 76]}
{"time": "2021-02-24 23:56:12.205979", "score": "0.314", "loss": "1.8225", "code": "t loadShader(it e,S o){t r=glCreateShader();if(0){(0);if(m){(r);n(\"Cou\"+o);}}}", "n_tokens": 78, "n_pass": [935, 193, 77]}

Minimal simplified code:
t loadShader(it e,S o){t r=glCreateShader();if(0){(0);if(m){(r);n("Cou"+o);}}}

