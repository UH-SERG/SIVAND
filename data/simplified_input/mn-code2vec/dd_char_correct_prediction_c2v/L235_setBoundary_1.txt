
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/tomcat/util/http/fileupload/MultipartStream_setBoundary.java
method_name = setBoundary
method_body = public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException("The length of a boundary token can not be changed"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }
predict, score, loss = setBoundary, 0.999976634979248, 4.255681051290594e-05

Trace of simplified code(s):
{"time": "2021-02-22 22:17:05.801548", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 320, "n_pass": [1, 1, 1]}
{"time": "2021-02-22 22:17:08.610622", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 280, "n_pass": [22, 2, 2]}
{"time": "2021-02-22 22:17:11.345566", "score": "1.0", "loss": "0.0001", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 260, "n_pass": [44, 3, 3]}
{"time": "2021-02-22 22:17:14.054139", "score": "1.0", "loss": "0.0001", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"They token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 240, "n_pass": [46, 4, 4]}
{"time": "2021-02-22 22:17:16.806839", "score": "1.0", "loss": "0.0001", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 220, "n_pass": [47, 5, 5]}
{"time": "2021-02-22 22:17:19.950576", "score": "0.9999", "loss": "0.0002", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(b, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 210, "n_pass": [84, 6, 6]}
{"time": "2021-02-22 22:17:23.062630", "score": "0.9999", "loss": "0.0002", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(bndary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 200, "n_pass": [85, 7, 7]}
{"time": "2021-02-22 22:17:25.798437", "score": "0.9998", "loss": "0.001", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(bNDARY_PREFIX.length, boundary.length); }", "n_tokens": 190, "n_pass": [86, 8, 8]}
{"time": "2021-02-22 22:17:28.527589", "score": "0.9994", "loss": "0.003", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(bIX.length, boundary.length); }", "n_tokens": 180, "n_pass": [87, 9, 9]}
{"time": "2021-02-22 22:17:31.271727", "score": "0.9992", "loss": "0.0044", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(bIX.length,length); }", "n_tokens": 170, "n_pass": [89, 10, 10]}
{"time": "2021-02-22 22:17:34.010392", "score": "0.9992", "loss": "0.0047", "code": "d setBoundary(byte[] boundary) throws IllegalBoundaryException { if (bARY_PREFIX.length) {undaryException(\"Thehanged\"); } System.arraycopy(bIX.length,length); }", "n_tokens": 160, "n_pass": [91, 11, 11]}
{"time": "2021-02-22 22:17:42.590514", "score": "0.9992", "loss": "0.0047", "code": "d setBoundary(byte[] boundary) throws IllegalBoundaryException { if (b.length) {undaryException(\"Thehanged\"); } System.arraycopy(bIX.length,length); }", "n_tokens": 150, "n_pass": [99, 14, 12]}
{"time": "2021-02-22 22:17:45.298998", "score": "0.9992", "loss": "0.0047", "code": "d setBoundary(byte[] boundary) throws IllegalBoundaryException { if (b.length) {ption(\"Thehanged\"); } System.arraycopy(bIX.length,length); }", "n_tokens": 140, "n_pass": [101, 15, 13]}
{"time": "2021-02-22 22:17:48.005134", "score": "0.9983", "loss": "0.0079", "code": "d setBoundary(byte[] boundary) throws IllegalBoundaryException { if (b.length) {ption(\"Thehanged\"); } System.arraycopy(blength); }", "n_tokens": 130, "n_pass": [106, 16, 14]}
{"time": "2021-02-22 22:17:56.556327", "score": "0.9997", "loss": "0.0025", "code": "d setBoundary(byte[] boundary) throws IllegalBoundaryException { if (b.length) {ption(\"Thehanged\"); } System.arraycopy(bh); }", "n_tokens": 125, "n_pass": [146, 19, 15]}
{"time": "2021-02-22 22:18:00.085570", "score": "0.9991", "loss": "0.0056", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (b.length) {ption(\"Thehanged\"); } System.arraycopy(bh); }", "n_tokens": 120, "n_pass": [150, 20, 16]}
{"time": "2021-02-22 22:18:13.780846", "score": "0.9967", "loss": "0.0199", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {ption(\"Thehanged\"); } System.arraycopy(bh); }", "n_tokens": 115, "n_pass": [161, 25, 17]}
{"time": "2021-02-22 22:18:16.506906", "score": "0.9942", "loss": "0.0158", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {(\"Thehanged\"); } System.arraycopy(bh); }", "n_tokens": 110, "n_pass": [163, 26, 18]}
{"time": "2021-02-22 22:18:19.210884", "score": "0.9942", "loss": "0.0158", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } System.arraycopy(bh); }", "n_tokens": 105, "n_pass": [165, 27, 19]}
{"time": "2021-02-22 22:18:21.899492", "score": "0.9992", "loss": "0.0031", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Sysrraycopy(bh); }", "n_tokens": 100, "n_pass": [168, 28, 20]}
{"time": "2021-02-22 22:18:24.597829", "score": "0.9992", "loss": "0.0031", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Sysopy(bh); }", "n_tokens": 95, "n_pass": [169, 29, 21]}
{"time": "2021-02-22 22:18:38.984609", "score": "0.9987", "loss": "0.0039", "code": "d setBoundary(b boundary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 92, "n_pass": [227, 34, 22]}
{"time": "2021-02-22 22:18:44.056609", "score": "0.9963", "loss": "0.0138", "code": "d setBoundary(b undary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 90, "n_pass": [239, 35, 23]}
{"time": "2021-02-22 22:18:46.798430", "score": "0.9963", "loss": "0.0138", "code": "d setBoundary(b dary) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 88, "n_pass": [240, 36, 24]}
{"time": "2021-02-22 22:18:49.509409", "score": "0.9709", "loss": "0.1006", "code": "d setBoundary(b ry) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 86, "n_pass": [241, 37, 25]}
{"time": "2021-02-22 22:19:18.173478", "score": "0.9966", "loss": "0.0141", "code": "d setBoundary(b y) throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 85, "n_pass": [344, 46, 26]}
{"time": "2021-02-22 22:19:20.922723", "score": "0.9966", "loss": "0.0141", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (bth) {(\"Thed\"); } Spy(bh); }", "n_tokens": 84, "n_pass": [346, 47, 27]}
{"time": "2021-02-22 22:20:29.144054", "score": "0.9985", "loss": "0.0045", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"Thed\"); } Spy(bh); }", "n_tokens": 82, "n_pass": [381, 72, 28]}
{"time": "2021-02-22 22:20:31.900025", "score": "0.9985", "loss": "0.0046", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"ed\"); } Spy(bh); }", "n_tokens": 80, "n_pass": [385, 73, 29]}
{"time": "2021-02-22 22:20:34.589234", "score": "0.9985", "loss": "0.0046", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"\"); } Spy(bh); }", "n_tokens": 78, "n_pass": [386, 74, 30]}
{"time": "2021-02-22 22:20:37.344075", "score": "0.9981", "loss": "0.0057", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"\"); } y(bh); }", "n_tokens": 76, "n_pass": [390, 75, 31]}
{"time": "2021-02-22 22:20:40.072830", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"\"); } y(); }", "n_tokens": 74, "n_pass": [392, 76, 32]}
{"time": "2021-02-22 22:21:56.560265", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException { if (h) {(\"\"); } y();}", "n_tokens": 73, "n_pass": [481, 101, 33]}
{"time": "2021-02-22 22:23:09.512256", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{ if (h) {(\"\"); } y();}", "n_tokens": 72, "n_pass": [531, 126, 34]}
{"time": "2021-02-22 22:23:12.227851", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{if (h) {(\"\"); } y();}", "n_tokens": 71, "n_pass": [533, 127, 35]}
{"time": "2021-02-22 22:23:14.928186", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{if(h) {(\"\"); } y();}", "n_tokens": 70, "n_pass": [536, 128, 36]}
{"time": "2021-02-22 22:23:17.634165", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{if(h){(\"\"); } y();}", "n_tokens": 69, "n_pass": [540, 129, 37]}
{"time": "2021-02-22 22:23:20.355587", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{if(h){(\"\");} y();}", "n_tokens": 68, "n_pass": [547, 130, 38]}
{"time": "2021-02-22 22:23:23.073887", "score": "0.9994", "loss": "0.0012", "code": "d setBoundary(b y)throws IllegalBoundaryException{if(h){(\"\");}y();}", "n_tokens": 67, "n_pass": [549, 131, 39]}

Minimal simplified code:
d setBoundary(b y)throws IllegalBoundaryException{if(h){("");}y();}

