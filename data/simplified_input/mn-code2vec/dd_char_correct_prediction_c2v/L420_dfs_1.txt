
path = /scratch/rabin/data/code2vec/transforms/Methods/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_298_dfs.java
method_name = dfs
method_body = private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }
predict, score, loss = dfs, 0.7475762963294983, 0.29286444187164307

Trace of simplified code(s):
{"time": "2021-05-26 09:13:17.993676", "score": "0.7142", "loss": "0.3386", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 242, "n_pass": [1, 1, 1]}
{"time": "2021-05-26 09:13:20.731994", "score": "0.863", "loss": "0.1502", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 212, "n_pass": [22, 2, 2]}
{"time": "2021-05-26 09:13:23.482800", "score": "0.7459", "loss": "0.2988", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left.right, curr, root.val + 1); }", "n_tokens": 181, "n_pass": [25, 3, 3]}
{"time": "2021-05-26 09:13:26.177245", "score": "0.9662", "loss": "0.0799", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 166, "n_pass": [44, 4, 4]}
{"time": "2021-05-26 09:13:29.267199", "score": "0.9815", "loss": "0.0439", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 151, "n_pass": [49, 5, 5]}
{"time": "2021-05-26 09:13:31.919817", "score": "0.9797", "loss": "0.0461", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 136, "n_pass": [51, 6, 6]}
{"time": "2021-05-26 09:13:40.332394", "score": "0.9636", "loss": "0.076", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(r); dfs(root.lefroot.val + 1); }", "n_tokens": 128, "n_pass": [82, 9, 7]}
{"time": "2021-05-26 09:13:45.638531", "score": "0.9644", "loss": "0.0733", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(r); dfs(root.val + 1); }", "n_tokens": 120, "n_pass": [84, 11, 8]}
{"time": "2021-05-26 09:13:48.305711", "score": "0.9327", "loss": "0.1319", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(r); dfs( + 1); }", "n_tokens": 112, "n_pass": [85, 12, 9]}
{"time": "2021-05-26 09:13:50.949061", "score": "0.9327", "loss": "0.1319", "code": " void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(r); dfs( + 1); }", "n_tokens": 105, "n_pass": [87, 13, 10]}
{"time": "2021-05-26 09:13:53.992367", "score": "0.9747", "loss": "0.0601", "code": " void dfs(TreeNode root, intint target) { if (get) { curr++;  1; } max = Math.max(r); dfs( + 1); }", "n_tokens": 98, "n_pass": [92, 14, 11]}
{"time": "2021-05-26 09:13:56.686142", "score": "0.9581", "loss": "0.094", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; } max = Math.max(r); dfs( + 1); }", "n_tokens": 90, "n_pass": [95, 15, 12]}
{"time": "2021-05-26 09:14:05.589688", "score": "0.9438", "loss": "0.1585", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; } maxath.max(r); dfs( + 1); }", "n_tokens": 86, "n_pass": [137, 18, 13]}
{"time": "2021-05-26 09:14:08.283369", "score": "0.8057", "loss": "0.4568", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; } maxmax(r); dfs( + 1); }", "n_tokens": 82, "n_pass": [138, 19, 14]}
{"time": "2021-05-26 09:14:10.903025", "score": "0.4893", "loss": "1.2508", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; } maxmax(r); dfs(); }", "n_tokens": 78, "n_pass": [142, 20, 15]}
{"time": "2021-05-26 09:14:13.542828", "score": "0.3291", "loss": "1.8115", "code": "id dfs(TreeNode root, intint target) {  { curr++;  1; } maxmax(r); dfs(); }", "n_tokens": 75, "n_pass": [144, 21, 16]}
{"time": "2021-05-26 09:14:22.321397", "score": "0.3278", "loss": "1.625", "code": "id dfs(TreeNode root, it target) {  { curr++;  1; } maxmax(r); dfs(); }", "n_tokens": 71, "n_pass": [152, 24, 17]}
{"time": "2021-05-26 09:14:28.090002", "score": "0.9393", "loss": "0.2264", "code": "id dfs(TreeNode root, it target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 67, "n_pass": [160, 26, 18]}
{"time": "2021-05-26 09:14:36.854671", "score": "0.9377", "loss": "0.201", "code": "id dfs(TreeNode root, it ta) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 63, "n_pass": [173, 29, 19]}
{"time": "2021-05-26 09:14:47.176129", "score": "0.9432", "loss": "0.1879", "code": "id dfs(TreeNode root, it ta) {  {urr++;  1; }max(r); dfs(); }", "n_tokens": 61, "n_pass": [228, 32, 20]}
{"time": "2021-05-26 09:14:49.808148", "score": "0.9306", "loss": "0.2237", "code": "id dfs(TreeNode root, it ta) {  {r++;  1; }max(r); dfs(); }", "n_tokens": 59, "n_pass": [229, 33, 21]}
{"time": "2021-05-26 09:14:52.881447", "score": "0.9306", "loss": "0.2237", "code": "id dfs(TreeNode root, it ta) {  {r++;1; }max(r); dfs(); }", "n_tokens": 57, "n_pass": [232, 34, 22]}
{"time": "2021-05-26 09:14:55.535483", "score": "0.9253", "loss": "0.2412", "code": "id dfs(TreeNode root, it ta) {  {r++; }max(r); dfs(); }", "n_tokens": 55, "n_pass": [233, 35, 23]}
{"time": "2021-05-26 09:14:58.187075", "score": "0.8747", "loss": "0.3932", "code": "id dfs(TreeNode root, it ta) {  {r++; }x(r); dfs(); }", "n_tokens": 53, "n_pass": [235, 36, 24]}
{"time": "2021-05-26 09:15:03.615201", "score": "0.9586", "loss": "0.0808", "code": "d dfs(TreeNode root, it ta) {  {r++; }x(r); dfs(); }", "n_tokens": 52, "n_pass": [243, 38, 25]}
{"time": "2021-05-26 09:15:18.585355", "score": "0.9302", "loss": "0.1201", "code": "d dfs(TreeNode rt, it ta) {  {r++; }x(r); dfs(); }", "n_tokens": 50, "n_pass": [254, 43, 26]}
{"time": "2021-05-26 09:15:21.272993", "score": "0.8518", "loss": "0.2895", "code": "d dfs(TreeNode rt,t ta) {  {r++; }x(r); dfs(); }", "n_tokens": 48, "n_pass": [256, 44, 27]}
{"time": "2021-05-26 09:15:42.874484", "score": "0.688", "loss": "0.5486", "code": "d dfs(TreeNode rt,t a) {  {r++; }x(r); dfs(); }", "n_tokens": 47, "n_pass": [327, 50, 28]}
{"time": "2021-05-26 09:15:45.509159", "score": "0.688", "loss": "0.5486", "code": "d dfs(TreeNode rt,t a){  {r++; }x(r); dfs(); }", "n_tokens": 46, "n_pass": [329, 51, 29]}
{"time": "2021-05-26 09:15:48.142934", "score": "0.688", "loss": "0.5486", "code": "d dfs(TreeNode rt,t a){ {r++; }x(r); dfs(); }", "n_tokens": 45, "n_pass": [331, 52, 30]}
{"time": "2021-05-26 09:15:50.838201", "score": "0.688", "loss": "0.5486", "code": "d dfs(TreeNode rt,t a){{r++; }x(r); dfs(); }", "n_tokens": 44, "n_pass": [332, 53, 31]}
{"time": "2021-05-26 09:15:53.552976", "score": "0.688", "loss": "0.5486", "code": "d dfs(TreeNode rt,t a){{r++;}x(r); dfs(); }", "n_tokens": 43, "n_pass": [338, 54, 32]}
{"time": "2021-05-26 09:15:56.255013", "score": "0.8667", "loss": "0.2277", "code": "d dfs(TreeNode rt,t a){{r++;}(r); dfs(); }", "n_tokens": 42, "n_pass": [340, 55, 33]}
{"time": "2021-05-26 09:15:59.292950", "score": "0.8667", "loss": "0.2277", "code": "d dfs(TreeNode rt,t a){{r++;}(r);dfs(); }", "n_tokens": 41, "n_pass": [345, 56, 34]}
{"time": "2021-05-26 09:16:09.998571", "score": "0.8667", "loss": "0.2277", "code": "d dfs(TreeNode rt,t a){{r++;}(r);dfs();}", "n_tokens": 40, "n_pass": [352, 60, 35]}
{"time": "2021-05-26 09:16:35.967377", "score": "0.7782", "loss": "0.4088", "code": "d dfs(TreeNode t,t a){{r++;}(r);dfs();}", "n_tokens": 39, "n_pass": [369, 69, 36]}

Minimal simplified code:
d dfs(TreeNode t,t a){{r++;}(r);dfs();}

