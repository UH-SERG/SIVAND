
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/mail/src/main/java/org/bouncycastle/mail/smime/util/FileBackedMimeBodyPart_writeTo.java
method_name = writeTo
method_body = public void writeTo(OutputStream out) throws IOException, MessagingException { if (!_file.exists()) { throw new IOException("file " + _file.getCanonicalPath() + " no longer exists."); } super.writeTo(out); }
predict, score, loss = writeTo, 0.9408071041107178, 0.11690134555101395

Trace of simplified code(s):
{"time": "2021-02-21 17:55:40.622282", "score": "0.9408", "loss": "0.1169", "code": "public void writeTo(OutputStream out) throws IOException, MessagingException { if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPath() + \" no longer exists.\"); } super.writeTo(out); }", "n_tokens": 207, "n_pass": [1, 1, 1]}
{"time": "2021-02-21 17:55:43.261880", "score": "0.9528", "loss": "0.0657", "code": "public void writeTo(OutputStream out) throws IOExce{ if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPath() + \" no longer exists.\"); } super.writeTo(out); }", "n_tokens": 181, "n_pass": [22, 2, 2]}
{"time": "2021-02-21 17:55:45.880753", "score": "0.9849", "loss": "0.0192", "code": "public void writeTo(OutputStream out) throws IOExce{ if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 155, "n_pass": [25, 3, 3]}
{"time": "2021-02-21 17:55:48.895687", "score": "0.9766", "loss": "0.0286", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 142, "n_pass": [49, 4, 4]}
{"time": "2021-02-21 17:55:51.509935", "score": "0.9836", "loss": "0.0197", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 129, "n_pass": [52, 5, 5]}
{"time": "2021-02-21 17:55:54.110773", "score": "0.9832", "loss": "0.0206", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 116, "n_pass": [55, 6, 6]}
{"time": "2021-02-21 17:55:59.770931", "score": "0.9832", "loss": "0.0206", "code": " void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 110, "n_pass": [87, 8, 7]}
{"time": "2021-02-21 17:56:02.791919", "score": "0.9659", "loss": "0.038", "code": " void writeTo(Outpam out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 104, "n_pass": [90, 9, 8]}
{"time": "2021-02-21 17:56:05.388884", "score": "0.9436", "loss": "0.0623", "code": " void writeTo(Outpam out) { if (!_fists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 98, "n_pass": [94, 10, 9]}
{"time": "2021-02-21 17:56:08.001698", "score": "0.9073", "loss": "0.1136", "code": " void writeTo(Outpam out) { if (!_fists()) { tception(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 91, "n_pass": [99, 11, 10]}
{"time": "2021-02-21 17:56:14.002881", "score": "0.9112", "loss": "0.107", "code": " void writeTo(Outpam out) { if (!_fists()) { tception(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 87, "n_pass": [145, 13, 11]}
{"time": "2021-02-21 17:56:21.808887", "score": "0.6054", "loss": "0.5895", "code": "id writeTo(Outpam out) { if (!_fists()) { tception(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 84, "n_pass": [150, 16, 12]}
{"time": "2021-02-21 17:56:25.570775", "score": "0.6054", "loss": "0.5895", "code": "id writeTo(Oam out) { if (!_fists()) { tception(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 81, "n_pass": [155, 17, 13]}
{"time": "2021-02-21 17:56:28.162543", "score": "0.5973", "loss": "0.5982", "code": "id writeTo(Oam out) { if (!sts()) { tception(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 78, "n_pass": [161, 18, 14]}
{"time": "2021-02-21 17:56:30.751271", "score": "0.5973", "loss": "0.5982", "code": "id writeTo(Oam out) { if (!sts()) { ption(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 75, "n_pass": [165, 19, 15]}
{"time": "2021-02-21 17:56:33.361500", "score": "0.4741", "loss": "0.8662", "code": "id writeTo(Oam out) { if (!sts()) { on(\"file \" +ge); } s.writeTo(out); }", "n_tokens": 72, "n_pass": [166, 20, 16]}
{"time": "2021-02-21 17:56:35.953138", "score": "0.5617", "loss": "0.6766", "code": "id writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(out); }", "n_tokens": 69, "n_pass": [169, 21, 17]}
{"time": "2021-02-21 17:56:56.110145", "score": "0.505", "loss": "0.8298", "code": "id writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 67, "n_pass": [244, 28, 18]}
{"time": "2021-02-21 17:56:58.703809", "score": "0.6042", "loss": "0.5997", "code": "d writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 66, "n_pass": [247, 29, 19]}
{"time": "2021-02-21 17:57:04.905408", "score": "0.438", "loss": "0.9607", "code": "d writeTo(am out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 65, "n_pass": [258, 30, 20]}
{"time": "2021-02-21 17:57:07.523119", "score": "0.5218", "loss": "0.7416", "code": "d writeTo(m out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 64, "n_pass": [259, 31, 21]}
{"time": "2021-02-21 17:57:10.140008", "score": "0.5543", "loss": "0.7041", "code": "d writeTo(m t) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 62, "n_pass": [262, 32, 22]}
{"time": "2021-02-21 17:57:12.750179", "score": "0.4262", "loss": "0.9437", "code": "d writeTo(m t) { if (!s()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 60, "n_pass": [268, 33, 23]}
{"time": "2021-02-21 17:57:15.339671", "score": "0.6646", "loss": "0.4437", "code": "d writeTo(m t) { if (!s()) {n(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 58, "n_pass": [272, 34, 24]}
{"time": "2021-02-21 17:57:35.609312", "score": "0.6646", "loss": "0.4437", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+ge); } s.writeTo(o); }", "n_tokens": 57, "n_pass": [355, 39, 25]}
{"time": "2021-02-21 17:57:38.188602", "score": "0.7707", "loss": "0.2733", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+e); } s.writeTo(o); }", "n_tokens": 56, "n_pass": [356, 40, 26]}
{"time": "2021-02-21 17:57:40.791291", "score": "0.7707", "loss": "0.2733", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+e);} s.writeTo(o); }", "n_tokens": 55, "n_pass": [360, 41, 27]}
{"time": "2021-02-21 17:57:43.407661", "score": "0.7707", "loss": "0.2733", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+e);}s.writeTo(o); }", "n_tokens": 54, "n_pass": [362, 42, 28]}
{"time": "2021-02-21 17:58:06.847870", "score": "0.8392", "loss": "0.1832", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+e);}s.writeTo(); }", "n_tokens": 53, "n_pass": [373, 51, 29]}
{"time": "2021-02-21 17:58:09.467793", "score": "0.8392", "loss": "0.1832", "code": "d writeTo(m t) { if (!s()) {n(\"fi\"+e);}s.writeTo();}", "n_tokens": 52, "n_pass": [376, 52, 30]}
{"time": "2021-02-21 17:58:15.632567", "score": "0.8392", "loss": "0.1832", "code": "d writeTo(m t){ if (!s()) {n(\"fi\"+e);}s.writeTo();}", "n_tokens": 51, "n_pass": [392, 53, 31]}
{"time": "2021-02-21 17:58:18.224942", "score": "0.8392", "loss": "0.1832", "code": "d writeTo(m t){if (!s()) {n(\"fi\"+e);}s.writeTo();}", "n_tokens": 50, "n_pass": [394, 54, 32]}
{"time": "2021-02-21 17:58:20.819921", "score": "0.8392", "loss": "0.1832", "code": "d writeTo(m t){if(!s()) {n(\"fi\"+e);}s.writeTo();}", "n_tokens": 49, "n_pass": [397, 55, 33]}
{"time": "2021-02-21 17:58:23.416181", "score": "0.6914", "loss": "0.3838", "code": "d writeTo(m t){if(s()) {n(\"fi\"+e);}s.writeTo();}", "n_tokens": 48, "n_pass": [399, 56, 34]}
{"time": "2021-02-21 17:58:26.011959", "score": "0.6914", "loss": "0.3838", "code": "d writeTo(m t){if(s()){n(\"fi\"+e);}s.writeTo();}", "n_tokens": 47, "n_pass": [404, 57, 35]}
{"time": "2021-02-21 17:58:28.593505", "score": "0.6513", "loss": "0.4436", "code": "d writeTo(m t){if(s()){(\"fi\"+e);}s.writeTo();}", "n_tokens": 46, "n_pass": [406, 58, 36]}
{"time": "2021-02-21 17:58:31.173211", "score": "0.6521", "loss": "0.4421", "code": "d writeTo(m t){if(s()){(\"i\"+e);}s.writeTo();}", "n_tokens": 45, "n_pass": [409, 59, 37]}
{"time": "2021-02-21 17:58:33.755374", "score": "0.6496", "loss": "0.4466", "code": "d writeTo(m t){if(s()){(\"\"+e);}s.writeTo();}", "n_tokens": 44, "n_pass": [410, 60, 38]}

Minimal simplified code:
d writeTo(m t){if(s()){(""+e);}s.writeTo();}

