
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/drewnoakes__metadata-extractor/Source/com/drew/metadata/exif/makernotes/OlympusEquipmentMakernoteDescriptor_getDescription.java
method_name = getDescription
method_body = @Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }
predict, score, loss = getDescription, 0.9678277373313904, 0.10414113104343414

Trace of simplified code(s):
{"time": "2021-02-25 00:34:13.293014", "score": "0.9735", "loss": "0.0899", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 992, "n_pass": [1, 1, 1]}
{"time": "2021-02-25 00:34:16.443808", "score": "0.9764", "loss": "0.0679", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: returnAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 744, "n_pass": [9, 2, 2]}
{"time": "2021-02-25 00:34:19.129579", "score": "0.972", "loss": "0.0938", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: returnxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 620, "n_pass": [18, 3, 3]}
{"time": "2021-02-25 00:34:21.796607", "score": "0.9738", "loss": "0.0835", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: returnxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: returpeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 496, "n_pass": [19, 4, 4]}
{"time": "2021-02-25 00:34:24.487586", "score": "0.9779", "loss": "0.052", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquixApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: returpeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 372, "n_pass": [22, 5, 5]}
{"time": "2021-02-25 00:34:27.139193", "score": "0.9752", "loss": "0.0423", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 248, "n_pass": [23, 6, 6]}
{"time": "2021-02-25 00:34:29.811943", "score": "0.9768", "loss": "0.0367", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquicription(); default: return super.getDescription(tagType); } }", "n_tokens": 186, "n_pass": [28, 7, 7]}
{"time": "2021-02-25 00:34:32.844580", "score": "0.9888", "loss": "0.0171", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquier.getDescription(tagType); } }", "n_tokens": 155, "n_pass": [37, 8, 8]}
{"time": "2021-02-25 00:34:35.507575", "score": "0.9311", "loss": "0.1424", "code": "ng getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquier.getDescription(tagType); } }", "n_tokens": 124, "n_pass": [38, 9, 9]}
{"time": "2021-02-25 00:34:38.938412", "score": "0.9311", "loss": "0.1424", "code": "ng getDescription(int tagType) { switch(tagType) { case TAG_N: return getEquier.getDescription(tagType); } }", "n_tokens": 108, "n_pass": [55, 10, 10]}
{"time": "2021-02-25 00:34:44.692897", "score": "0.7154", "loss": "0.5447", "code": "ng getDescription(int tagType) { switch(tagType) { case TAG_N: returier.getDescription(tagType); } }", "n_tokens": 100, "n_pass": [78, 12, 11]}
{"time": "2021-02-25 00:35:04.250719", "score": "0.8883", "loss": "0.348", "code": "ng getDescription(int tagType) { switch(tagType) { case TAG_N: returier.getDescription(tpe); } }", "n_tokens": 96, "n_pass": [122, 19, 12]}
{"time": "2021-02-25 00:35:11.740388", "score": "0.7936", "loss": "0.6565", "code": "ng getDescription(int tagType) { switch(ype) { case TAG_N: returier.getDescription(tpe); } }", "n_tokens": 92, "n_pass": [136, 21, 13]}
{"time": "2021-02-25 00:35:14.422206", "score": "0.7891", "loss": "0.669", "code": "ng getDescription(int tagType) { switch(ype) { case N: returier.getDescription(tpe); } }", "n_tokens": 88, "n_pass": [140, 22, 14]}
{"time": "2021-02-25 00:35:17.109318", "score": "0.7891", "loss": "0.669", "code": "ng getDescription(int tagType) { switch(ype) { case N: rier.getDescription(tpe); } }", "n_tokens": 84, "n_pass": [142, 23, 15]}
{"time": "2021-02-25 00:35:35.701578", "score": "0.7667", "loss": "0.7181", "code": "ng getDescription(int tagType) { switch(ype) { case N: rr.getDescription(tpe); } }", "n_tokens": 82, "n_pass": [209, 29, 16]}
{"time": "2021-02-25 00:35:59.658926", "score": "0.9742", "loss": "0.0657", "code": "g getDescription(int tagType) { switch(ype) { case N: rr.getDescription(tpe); } }", "n_tokens": 81, "n_pass": [222, 38, 17]}
{"time": "2021-02-25 00:36:06.014735", "score": "0.8525", "loss": "0.2245", "code": "g getDescription(t tagType) { switch(ype) { case N: rr.getDescription(tpe); } }", "n_tokens": 79, "n_pass": [233, 39, 18]}
{"time": "2021-02-25 00:36:08.678133", "score": "0.5855", "loss": "0.9166", "code": "g getDescription(t gType) { switch(ype) { case N: rr.getDescription(tpe); } }", "n_tokens": 77, "n_pass": [235, 40, 19]}
{"time": "2021-02-25 00:36:11.308786", "score": "0.438", "loss": "1.0553", "code": "g getDescription(t ype) { switch(ype) { case N: rr.getDescription(tpe); } }", "n_tokens": 75, "n_pass": [236, 41, 20]}
{"time": "2021-02-25 00:36:19.246503", "score": "0.4089", "loss": "1.135", "code": "g getDescription(t ype) { switch(ype) { case N:r.getDescription(tpe); } }", "n_tokens": 73, "n_pass": [251, 44, 21]}
{"time": "2021-02-25 00:36:21.924682", "score": "0.4366", "loss": "1.1903", "code": "g getDescription(t ype) { switch(ype) { case N:getDescription(tpe); } }", "n_tokens": 71, "n_pass": [252, 45, 22]}
{"time": "2021-02-25 00:36:43.114498", "score": "0.6026", "loss": "0.852", "code": "g getDescription(t ype) { switch(ype) { case N:getDescription(t); } }", "n_tokens": 69, "n_pass": [261, 53, 23]}
{"time": "2021-02-25 00:36:51.979697", "score": "0.4003", "loss": "1.3098", "code": "g getDescription(t ype) { switch(e) { case N:getDescription(t); } }", "n_tokens": 67, "n_pass": [283, 55, 24]}
{"time": "2021-02-25 00:37:22.657769", "score": "0.4003", "loss": "1.3098", "code": "g getDescription(t ype) { switch(e){ case N:getDescription(t); } }", "n_tokens": 66, "n_pass": [384, 64, 25]}
{"time": "2021-02-25 00:37:25.306552", "score": "0.4003", "loss": "1.3098", "code": "g getDescription(t ype) { switch(e){case N:getDescription(t); } }", "n_tokens": 65, "n_pass": [385, 65, 26]}
{"time": "2021-02-25 00:38:08.280540", "score": "0.4003", "loss": "1.3098", "code": "g getDescription(t ype) { switch(e){case N:getDescription(t);} }", "n_tokens": 64, "n_pass": [411, 81, 27]}
{"time": "2021-02-25 00:38:10.912725", "score": "0.4003", "loss": "1.3098", "code": "g getDescription(t ype) { switch(e){case N:getDescription(t);}}", "n_tokens": 63, "n_pass": [413, 82, 28]}
{"time": "2021-02-25 00:38:20.101480", "score": "0.4331", "loss": "1.1992", "code": "g getDescription(t pe) { switch(e){case N:getDescription(t);}}", "n_tokens": 62, "n_pass": [434, 83, 29]}
{"time": "2021-02-25 00:38:28.140430", "score": "0.4331", "loss": "1.1992", "code": "g getDescription(t pe){ switch(e){case N:getDescription(t);}}", "n_tokens": 61, "n_pass": [438, 86, 30]}
{"time": "2021-02-25 00:38:30.780549", "score": "0.4331", "loss": "1.1992", "code": "g getDescription(t pe){switch(e){case N:getDescription(t);}}", "n_tokens": 60, "n_pass": [440, 87, 31]}

Minimal simplified code:
g getDescription(t pe){switch(e){case N:getDescription(t);}}

