
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/mem/MemStorageModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }
predict, score, loss = configure, 0.8525907397270203, 0.16776955127716064

Trace of simplified code(s):
{"time": "2021-02-22 13:23:01.388887", "score": "0.9292", "loss": "0.0784", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 790, "n_pass": [1, 1, 1]}
{"time": "2021-02-22 13:23:04.066202", "score": "0.9343", "loss": "0.0703", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutMemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 593, "n_pass": [9, 2, 2]}
{"time": "2021-02-22 13:23:09.363597", "score": "0.7698", "loss": "0.2775", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 494, "n_pass": [19, 4, 3]}
{"time": "2021-02-22 13:23:12.047552", "score": "0.6455", "loss": "0.4445", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.classstorageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 395, "n_pass": [20, 5, 4]}
{"time": "2021-02-22 13:23:14.675775", "score": "0.7898", "loss": "0.2436", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutstorageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 296, "n_pass": [24, 6, 5]}
{"time": "2021-02-22 13:23:17.348244", "score": "0.9999", "loss": "0.0001", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mu.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 246, "n_pass": [33, 7, 6]}
{"time": "2021-02-22 13:23:19.992367", "score": "0.9999", "loss": "0.0001", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 197, "n_pass": [38, 8, 7]}
{"time": "2021-02-22 13:23:22.598633", "score": "1.0", "loss": "0.0", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.ofs); expose(storageKey); }", "n_tokens": 172, "n_pass": [51, 9, 8]}
{"time": "2021-02-22 13:23:25.624327", "score": "1.0", "loss": "0.0", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.cls); expose(storageKey); }", "n_tokens": 147, "n_pass": [57, 10, 9]}
{"time": "2021-02-22 13:23:28.623610", "score": "0.9999", "loss": "0.0001", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.ctorageKey); }", "n_tokens": 134, "n_pass": [76, 11, 10]}
{"time": "2021-02-22 13:23:31.212222", "score": "0.9998", "loss": "0.0002", "code": "@Override pr configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.ctorageKey); }", "n_tokens": 122, "n_pass": [79, 12, 11]}
{"time": "2021-02-22 13:23:33.793028", "score": "0.9998", "loss": "0.0003", "code": "@Override pr configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQuetorageKey); }", "n_tokens": 109, "n_pass": [87, 13, 12]}
{"time": "2021-02-22 13:23:36.755501", "score": "0.9998", "loss": "0.0003", "code": "@Override pr configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueKey); }", "n_tokens": 103, "n_pass": [115, 14, 13]}
{"time": "2021-02-22 13:23:40.103352", "score": "0.9998", "loss": "0.0003", "code": "@Override pr configure() { bind(new teral<Amount<Long, Time>>() { }).annotatedWith(SlowQueKey); }", "n_tokens": 97, "n_pass": [122, 15, 14]}
{"time": "2021-02-22 13:23:42.689604", "score": "1.0", "loss": "0.0", "code": "@Override pr configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SlowQueKey); }", "n_tokens": 91, "n_pass": [129, 16, 15]}
{"time": "2021-02-22 13:23:45.305354", "score": "0.9999", "loss": "0.0001", "code": "@Override pr configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 85, "n_pass": [131, 17, 16]}
{"time": "2021-02-22 13:23:48.670553", "score": "1.0", "loss": "0.0", "code": "@Override pr configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(S); }", "n_tokens": 82, "n_pass": [174, 18, 17]}
{"time": "2021-02-22 13:23:51.261443", "score": "1.0", "loss": "0.0", "code": "@Ovide pr configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(S); }", "n_tokens": 79, "n_pass": [176, 19, 18]}
{"time": "2021-02-22 13:23:53.852950", "score": "0.9999", "loss": "0.0001", "code": "@Ov pr configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(S); }", "n_tokens": 76, "n_pass": [177, 20, 19]}
{"time": "2021-02-22 13:24:00.562117", "score": "0.9999", "loss": "0.0001", "code": "@Ov pr configure() { bind(new al<Amount<Long, Time>>() { }).annWith(S); }", "n_tokens": 73, "n_pass": [187, 22, 20]}
{"time": "2021-02-22 13:24:03.137951", "score": "0.9999", "loss": "0.0001", "code": "@Ov pr configure() { bind(new al<unt<Long, Time>>() { }).annWith(S); }", "n_tokens": 70, "n_pass": [189, 23, 21]}
{"time": "2021-02-22 13:24:05.740037", "score": "0.9059", "loss": "0.1821", "code": "@Ov pr configure() { bind(new al<unt<Long,me>>() { }).annWith(S); }", "n_tokens": 67, "n_pass": [193, 24, 22]}
{"time": "2021-02-22 13:24:08.324671", "score": "0.8242", "loss": "0.336", "code": "@Ov pr configure() { bind(new al<unt<Long,me>>() { }).With(S); }", "n_tokens": 64, "n_pass": [198, 25, 23]}
{"time": "2021-02-22 13:24:10.927742", "score": "0.911", "loss": "0.1748", "code": "@Ov pr configure() { bind(new al<unt<Long,me>>() { }).h(S); }", "n_tokens": 61, "n_pass": [199, 26, 24]}
{"time": "2021-02-22 13:24:13.582226", "score": "0.9857", "loss": "0.015", "code": " pr configure() { bind(new al<unt<Long,me>>() { }).h(S); }", "n_tokens": 58, "n_pass": [202, 27, 25]}
{"time": "2021-02-22 13:24:20.285142", "score": "0.3918", "loss": "0.9931", "code": " pr configure() { bind(new al<unt<Lome>>() { }).h(S); }", "n_tokens": 55, "n_pass": [215, 29, 26]}
{"time": "2021-02-22 13:24:28.143413", "score": "0.3918", "loss": "0.9931", "code": " pr configure() { bind(new al<u<Lome>>() { }).h(S); }", "n_tokens": 53, "n_pass": [270, 31, 27]}
{"time": "2021-02-22 13:24:33.336436", "score": "0.3918", "loss": "0.9931", "code": "pr configure() { bind(new al<u<Lome>>() { }).h(S); }", "n_tokens": 52, "n_pass": [282, 33, 28]}
{"time": "2021-02-22 13:24:45.024717", "score": "0.3918", "loss": "0.9931", "code": "pr configure(){ bind(new al<u<Lome>>() { }).h(S); }", "n_tokens": 51, "n_pass": [297, 36, 29]}
{"time": "2021-02-22 13:25:06.560658", "score": "0.3918", "loss": "0.9931", "code": "pr configure(){ bind(new l<u<Lome>>() { }).h(S); }", "n_tokens": 50, "n_pass": [371, 42, 30]}
{"time": "2021-02-22 13:25:09.226304", "score": "0.7118", "loss": "0.353", "code": "pr configure(){ bind(new l<u<ome>>() { }).h(S); }", "n_tokens": 49, "n_pass": [375, 43, 31]}
{"time": "2021-02-22 13:25:19.583063", "score": "0.7118", "loss": "0.353", "code": "pr configure(){ bind(new l<u<ome>>(){ }).h(S); }", "n_tokens": 48, "n_pass": [383, 47, 32]}
{"time": "2021-02-22 13:25:22.186006", "score": "0.7118", "loss": "0.353", "code": "pr configure(){ bind(new l<u<ome>>(){}).h(S); }", "n_tokens": 47, "n_pass": [385, 48, 33]}
{"time": "2021-02-22 13:25:24.784948", "score": "0.7698", "loss": "0.2685", "code": "pr configure(){ bind(new l<u<ome>>(){}).h(); }", "n_tokens": 46, "n_pass": [391, 49, 34]}
{"time": "2021-02-22 13:25:27.399853", "score": "0.7698", "loss": "0.2685", "code": "pr configure(){ bind(new l<u<ome>>(){}).h();}", "n_tokens": 45, "n_pass": [394, 50, 35]}
{"time": "2021-02-22 13:25:39.092776", "score": "0.7698", "loss": "0.2685", "code": "pr configure(){bind(new l<u<ome>>(){}).h();}", "n_tokens": 44, "n_pass": [411, 53, 36]}
{"time": "2021-02-22 13:25:57.369264", "score": "0.368", "loss": "1.038", "code": "pr configure(){bind(new l<u<om>>(){}).h();}", "n_tokens": 43, "n_pass": [427, 60, 37]}

Minimal simplified code:
pr configure(){bind(new l<u<om>>(){}).h();}

