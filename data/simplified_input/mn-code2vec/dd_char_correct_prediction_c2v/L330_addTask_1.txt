
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/batch/src/main/java/droidefense/batch/BatchManager_addTask.java
method_name = addTask
method_body = private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException("Task to be added is not constructed! Null object task found"); } this.taskList.add(task); }
predict, score, loss = addTask, 0.9147729873657227, 0.15222874283790588

Trace of simplified code(s):
{"time": "2021-02-25 02:29:10.109435", "score": "0.9148", "loss": "0.1522", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to be added is not constructed! Null object task found\"); } this.taskList.add(task); }", "n_tokens": 211, "n_pass": [1, 1, 1]}
{"time": "2021-02-25 02:29:12.741609", "score": "0.9148", "loss": "0.1522", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to beNull object task found\"); } this.taskList.add(task); }", "n_tokens": 184, "n_pass": [25, 2, 2]}
{"time": "2021-02-25 02:29:15.380809", "score": "0.9148", "loss": "0.1522", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 171, "n_pass": [47, 3, 3]}
{"time": "2021-02-25 02:29:18.414986", "score": "0.7763", "loss": "0.3745", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { throw new InvalidTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 158, "n_pass": [55, 4, 4]}
{"time": "2021-02-25 02:29:21.068157", "score": "0.6319", "loss": "0.865", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrdTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 145, "n_pass": [58, 5, 5]}
{"time": "2021-02-25 02:29:23.709539", "score": "0.6319", "loss": "0.865", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 132, "n_pass": [59, 6, 6]}
{"time": "2021-02-25 02:29:27.171793", "score": "0.6319", "loss": "0.865", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taeask found\"); } this.taskList.add(task); }", "n_tokens": 125, "n_pass": [91, 7, 7]}
{"time": "2021-02-25 02:29:29.801115", "score": "0.6319", "loss": "0.865", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 118, "n_pass": [92, 8, 8]}
{"time": "2021-02-25 02:29:35.109544", "score": "0.5654", "loss": "1.1022", "code": "privat addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 112, "n_pass": [99, 10, 9]}
{"time": "2021-02-25 02:29:40.757296", "score": "0.4355", "loss": "1.5263", "code": "privat addTask(IBatchTask task) throws Invalid { if (tasll) { thrn(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 105, "n_pass": [108, 12, 10]}
{"time": "2021-02-25 02:29:49.626032", "score": "0.4031", "loss": "1.5376", "code": "privat addTask(IBatchTask task) throws Invalid { if (tl) { thrn(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 102, "n_pass": [157, 15, 11]}
{"time": "2021-02-25 02:29:52.281078", "score": "0.3957", "loss": "1.4629", "code": "privat addTask(IBatchTask task) throws Invalid { if (tl) { t(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 99, "n_pass": [160, 16, 12]}
{"time": "2021-02-25 02:30:14.121683", "score": "0.3957", "loss": "1.4629", "code": "privat addTask(tchTask task) throws Invalid { if (tl) { t(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 96, "n_pass": [176, 24, 13]}
{"time": "2021-02-25 02:30:16.765108", "score": "0.5273", "loss": "0.8914", "code": "privat addTask(Task task) throws Invalid { if (tl) { t(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 93, "n_pass": [177, 25, 14]}
{"time": "2021-02-25 02:30:24.674738", "score": "0.7731", "loss": "0.3826", "code": "privat addTask(Task task) throws alid { if (tl) { t(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 90, "n_pass": [184, 28, 15]}
{"time": "2021-02-25 02:30:27.336573", "score": "0.7317", "loss": "0.4377", "code": "privat addTask(Task task) throws d { if (tl) { t(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 87, "n_pass": [185, 29, 16]}
{"time": "2021-02-25 02:30:30.128704", "score": "0.66", "loss": "0.4927", "code": "privat addTask(Task task) throws d { if (tl) { t(\"T\"); } this.taskList.add(task); }", "n_tokens": 83, "n_pass": [192, 30, 17]}
{"time": "2021-02-25 02:30:40.673029", "score": "0.6835", "loss": "0.6053", "code": "privat addTask(Task task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 79, "n_pass": [199, 34, 18]}
{"time": "2021-02-25 02:30:45.929833", "score": "0.4681", "loss": "1.0194", "code": "pri addTask(Task task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 76, "n_pass": [202, 36, 19]}
{"time": "2021-02-25 02:31:03.737400", "score": "0.6227", "loss": "0.7142", "code": "pr addTask(Task task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 75, "n_pass": [272, 42, 20]}
{"time": "2021-02-25 02:31:09.571318", "score": "0.2726", "loss": "2.1239", "code": "pr addTask(ask task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 74, "n_pass": [282, 43, 21]}
{"time": "2021-02-25 02:31:12.222852", "score": "0.6795", "loss": "0.5025", "code": "pr addTask(sk task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 73, "n_pass": [283, 44, 22]}
{"time": "2021-02-25 02:31:14.870915", "score": "0.3793", "loss": "1.4209", "code": "pr addTask(k task) throws d { if (tl) { t(\"T\"); } this.taskList.add(); }", "n_tokens": 72, "n_pass": [284, 45, 23]}
{"time": "2021-02-25 02:31:20.155830", "score": "0.2831", "loss": "1.7291", "code": "pr addTask(k task) throws d { if (tl) { t(\"T\"); } is.taskList.add(); }", "n_tokens": 70, "n_pass": [305, 47, 24]}
{"time": "2021-02-25 02:31:38.587296", "score": "0.3511", "loss": "1.619", "code": "r addTask(k task) throws d { if (tl) { t(\"T\"); } is.taskList.add(); }", "n_tokens": 69, "n_pass": [316, 54, 25]}
{"time": "2021-02-25 02:32:00.924288", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task) throws d { if (tl) { t(\"T\"); } is.taskList.d(); }", "n_tokens": 67, "n_pass": [353, 61, 26]}
{"time": "2021-02-25 02:32:27.765686", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task) throws d { if (tl) { t(\"T\"); } is.taskList.d();}", "n_tokens": 66, "n_pass": [453, 68, 27]}
{"time": "2021-02-25 02:32:44.602775", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d { if (tl) { t(\"T\"); } is.taskList.d();}", "n_tokens": 65, "n_pass": [471, 73, 28]}
{"time": "2021-02-25 02:32:47.333892", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d{ if (tl) { t(\"T\"); } is.taskList.d();}", "n_tokens": 64, "n_pass": [480, 74, 29]}
{"time": "2021-02-25 02:32:49.978250", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d{if (tl) { t(\"T\"); } is.taskList.d();}", "n_tokens": 63, "n_pass": [482, 75, 30]}
{"time": "2021-02-25 02:32:52.683292", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d{if(tl) { t(\"T\"); } is.taskList.d();}", "n_tokens": 62, "n_pass": [485, 76, 31]}
{"time": "2021-02-25 02:33:00.649663", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d{if(tl){ t(\"T\"); } is.taskList.d();}", "n_tokens": 61, "n_pass": [490, 79, 32]}
{"time": "2021-02-25 02:33:03.296780", "score": "0.1846", "loss": "2.807", "code": "r addTask(k task)throws d{if(tl){t(\"T\"); } is.taskList.d();}", "n_tokens": 60, "n_pass": [492, 80, 33]}
{"time": "2021-02-25 02:33:05.941246", "score": "0.2545", "loss": "2.09", "code": "r addTask(k task)throws d{if(tl){(\"T\"); } is.taskList.d();}", "n_tokens": 59, "n_pass": [493, 81, 34]}
{"time": "2021-02-25 02:33:08.580627", "score": "0.2485", "loss": "2.1263", "code": "r addTask(k task)throws d{if(tl){(\"\"); } is.taskList.d();}", "n_tokens": 58, "n_pass": [496, 82, 35]}
{"time": "2021-02-25 02:33:11.187431", "score": "0.2485", "loss": "2.1263", "code": "r addTask(k task)throws d{if(tl){(\"\");} is.taskList.d();}", "n_tokens": 57, "n_pass": [500, 83, 36]}
{"time": "2021-02-25 02:33:13.824714", "score": "0.2485", "loss": "2.1263", "code": "r addTask(k task)throws d{if(tl){(\"\");}is.taskList.d();}", "n_tokens": 56, "n_pass": [502, 84, 37]}
{"time": "2021-02-25 02:33:16.446996", "score": "0.2677", "loss": "1.978", "code": "r addTask(k task)throws d{if(tl){(\"\");}s.taskList.d();}", "n_tokens": 55, "n_pass": [503, 85, 38]}

Minimal simplified code:
r addTask(k task)throws d{if(tl){("");}s.taskList.d();}

