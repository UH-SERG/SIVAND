
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/ConstraintDefinitionNode_printSubNodes.java
method_name = printSubNodes
method_body = public void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList != null) { printLabel(depth, "columnList: "); columnList.treePrint(depth + 1); } }
predict, score, loss = printSubNodes, 0.9999436140060425, 0.00018249277491122484

Trace of simplified code(s):
{"time": "2021-02-14 06:57:14.735817", "score": "0.9999", "loss": "0.0002", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 62, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 06:57:17.796626", "score": "0.9999", "loss": "0.0002", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 58, "n_pass": [51, 2, 2]}
{"time": "2021-02-14 06:57:20.473926", "score": "0.9999", "loss": "0.0003", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 54, "n_pass": [56, 3, 3]}
{"time": "2021-02-14 06:57:23.934130", "score": "0.9999", "loss": "0.0003", "code": " void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 53, "n_pass": [105, 4, 4]}
{"time": "2021-02-14 06:57:26.561675", "score": "0.9999", "loss": "0.0003", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 52, "n_pass": [106, 5, 5]}
{"time": "2021-02-14 06:57:29.992343", "score": "0.9998", "loss": "0.0008", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"columnList: \");(depth + 1); } }", "n_tokens": 50, "n_pass": [122, 6, 6]}
{"time": "2021-02-14 06:57:32.648040", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \" \");(depth + 1); } }", "n_tokens": 48, "n_pass": [124, 7, 7]}
{"time": "2021-02-14 06:57:42.841401", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(depth + 1); } }", "n_tokens": 47, "n_pass": [197, 8, 8]}
{"time": "2021-02-14 06:57:45.462470", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");( + 1); } }", "n_tokens": 46, "n_pass": [201, 9, 9]}
{"time": "2021-02-14 06:57:48.095551", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(+ 1); } }", "n_tokens": 45, "n_pass": [202, 10, 10]}
{"time": "2021-02-14 06:57:50.727590", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");( 1); } }", "n_tokens": 44, "n_pass": [203, 11, 11]}
{"time": "2021-02-14 06:57:53.346955", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(1); } }", "n_tokens": 43, "n_pass": [204, 12, 12]}
{"time": "2021-02-14 06:57:55.969350", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(1);} }", "n_tokens": 42, "n_pass": [208, 13, 13]}
{"time": "2021-02-14 06:57:58.592595", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 41, "n_pass": [210, 14, 14]}
{"time": "2021-02-14 06:58:02.041710", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth){ super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 40, "n_pass": [220, 15, 15]}
{"time": "2021-02-14 06:58:04.673023", "score": "0.9999", "loss": "0.0004", "code": "void printSubNodes(int depth){super.printSubNodes(depth); if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 39, "n_pass": [222, 16, 16]}
{"time": "2021-02-14 06:58:07.300417", "score": "0.9996", "loss": "0.0008", "code": "void printSubNodes(int depth){superprintSubNodes(depth); if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 38, "n_pass": [224, 17, 17]}
{"time": "2021-02-14 06:58:10.307693", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes(); if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 37, "n_pass": [227, 18, 18]}
{"time": "2021-02-14 06:58:12.934998", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if (columnList ) { printLabel( \"\");(1);}}", "n_tokens": 36, "n_pass": [230, 19, 19]}
{"time": "2021-02-14 06:58:15.565032", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if(columnList ) { printLabel( \"\");(1);}}", "n_tokens": 35, "n_pass": [232, 20, 20]}
{"time": "2021-02-14 06:58:18.192669", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if(columnList) { printLabel( \"\");(1);}}", "n_tokens": 34, "n_pass": [235, 21, 21]}
{"time": "2021-02-14 06:58:20.839484", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if(columnList){ printLabel( \"\");(1);}}", "n_tokens": 33, "n_pass": [237, 22, 22]}
{"time": "2021-02-14 06:58:23.488380", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if(columnList){printLabel( \"\");(1);}}", "n_tokens": 32, "n_pass": [239, 23, 23]}
{"time": "2021-02-14 06:58:28.734145", "score": "0.9999", "loss": "0.0006", "code": "void printSubNodes(int depth){superprintSubNodes();if(columnList){printLabel(\"\");(1);}}", "n_tokens": 31, "n_pass": [242, 25, 24]}
{"time": "2021-02-14 06:58:32.178627", "score": "0.9999", "loss": "0.0005", "code": "void printSubNodes(int depth){printSubNodes();if(columnList){printLabel(\"\");(1);}}", "n_tokens": 30, "n_pass": [262, 26, 25]}
{"time": "2021-02-14 06:58:34.821089", "score": "0.9985", "loss": "0.006", "code": "void printSubNodes(int depth){printSubNodes();if(columnList){(\"\");(1);}}", "n_tokens": 29, "n_pass": [272, 27, 26]}

Minimal simplified code:
void printSubNodes(int depth){printSubNodes();if(columnList){("");(1);}}

