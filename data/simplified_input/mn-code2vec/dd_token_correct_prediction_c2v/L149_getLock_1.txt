
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/service/spi/src/main/java/org/kaazing/gateway/service/collections/MemoryCollectionsFactory_getLock.java
method_name = getLock
method_body = @Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl newLock = new ILockImpl(name); locks.put(name, newLock); lock = newLock; } assert (lock != null); return lock; } }
predict, score, loss = getLock, 0.9643645286560059, 0.040558479726314545

Trace of simplified code(s):
{"time": "2021-02-14 09:33:07.944683", "score": "0.9644", "loss": "0.0406", "code": "@Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl newLock = new ILockImpl(name); locks.put(name, newLock); lock = newLock; } assert (lock != null); return lock; } }", "n_tokens": 105, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 09:33:10.593588", "score": "0.991", "loss": "0.0168", "code": "@Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 79, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 09:33:14.079954", "score": "0.9624", "loss": "0.0473", "code": "@Override public ILock getLock(String name) { synchronized (locks) { locks.get(name); if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 73, "n_pass": [45, 3, 3]}
{"time": "2021-02-14 09:33:16.711752", "score": "0.9879", "loss": "0.025", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 66, "n_pass": [46, 4, 4]}
{"time": "2021-02-14 09:33:19.759130", "score": "0.9815", "loss": "0.0445", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (lock != null); return lock; } }", "n_tokens": 63, "n_pass": [82, 5, 5]}
{"time": "2021-02-14 09:33:22.423906", "score": "0.9739", "loss": "0.0628", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull); return lock; } }", "n_tokens": 59, "n_pass": [85, 6, 6]}
{"time": "2021-02-14 09:33:25.055888", "score": "0.6421", "loss": "0.794", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 55, "n_pass": [87, 7, 7]}
{"time": "2021-02-14 09:33:27.686051", "score": "0.9523", "loss": "0.1291", "code": "public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 52, "n_pass": [89, 8, 8]}
{"time": "2021-02-14 09:33:30.721051", "score": "0.9989", "loss": "0.0014", "code": "public ILock getLock() { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 49, "n_pass": [92, 9, 9]}
{"time": "2021-02-14 09:33:36.779094", "score": "0.9989", "loss": "0.0014", "code": "public ILock getLock(){ synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 48, "n_pass": [141, 10, 10]}
{"time": "2021-02-14 09:33:39.431417", "score": "0.9989", "loss": "0.0014", "code": "public ILock getLock(){synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 47, "n_pass": [143, 11, 11]}
{"time": "2021-02-14 09:33:42.082997", "score": "0.9989", "loss": "0.0014", "code": "public ILock getLock(){synchronized (locks) {if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 45, "n_pass": [148, 12, 12]}
{"time": "2021-02-14 09:33:44.716927", "score": "0.9877", "loss": "0.0156", "code": "public ILock getLock(){synchronized (locks) {if (lock= null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 43, "n_pass": [151, 13, 13]}
{"time": "2021-02-14 09:33:47.344635", "score": "0.9686", "loss": "0.0544", "code": "public ILock getLock(){synchronized (locks) {if (locknull) { ILockImpl; } assert (locknull);  } }", "n_tokens": 41, "n_pass": [152, 14, 14]}
{"time": "2021-02-14 09:33:49.996591", "score": "0.9702", "loss": "0.0511", "code": "public ILock getLock(){synchronized (locks) {if (locknull) {; } assert (locknull);  } }", "n_tokens": 39, "n_pass": [155, 15, 15]}
{"time": "2021-02-14 09:33:52.618754", "score": "0.9702", "loss": "0.0511", "code": "public ILock getLock(){synchronized (locks) {if (locknull) {} assert (locknull);  } }", "n_tokens": 37, "n_pass": [156, 16, 16]}
{"time": "2021-02-14 09:33:55.245356", "score": "0.9702", "loss": "0.0511", "code": "public ILock getLock(){synchronized (locks) {if (locknull) {} (locknull);  } }", "n_tokens": 35, "n_pass": [158, 17, 17]}
{"time": "2021-02-14 09:33:57.874042", "score": "0.9702", "loss": "0.0511", "code": " ILock getLock(){synchronized (locks) {if (locknull) {} (locknull);  } }", "n_tokens": 34, "n_pass": [164, 18, 18]}
{"time": "2021-02-14 09:34:00.492583", "score": "0.9702", "loss": "0.0511", "code": "ILock getLock(){synchronized (locks) {if (locknull) {} (locknull);  } }", "n_tokens": 33, "n_pass": [165, 19, 19]}
{"time": "2021-02-14 09:34:07.649832", "score": "0.9702", "loss": "0.0511", "code": "ILock getLock(){synchronized(locks) {if (locknull) {} (locknull);  } }", "n_tokens": 32, "n_pass": [212, 20, 20]}
{"time": "2021-02-14 09:34:10.262123", "score": "0.9702", "loss": "0.0511", "code": "ILock getLock(){synchronized(locks){if (locknull) {} (locknull);  } }", "n_tokens": 31, "n_pass": [215, 21, 21]}
{"time": "2021-02-14 09:34:12.872812", "score": "0.9702", "loss": "0.0511", "code": "ILock getLock(){synchronized(locks){if(locknull) {} (locknull);  } }", "n_tokens": 30, "n_pass": [218, 22, 22]}
{"time": "2021-02-14 09:34:15.491810", "score": "0.9897", "loss": "0.0126", "code": "ILock getLock(){synchronized(locks){if(null) {} (locknull);  } }", "n_tokens": 29, "n_pass": [220, 23, 23]}
{"time": "2021-02-14 09:34:18.127318", "score": "0.9897", "loss": "0.0126", "code": "ILock getLock(){synchronized(locks){if(null){} (locknull);  } }", "n_tokens": 28, "n_pass": [223, 24, 24]}
{"time": "2021-02-14 09:34:20.747620", "score": "0.9897", "loss": "0.0126", "code": "ILock getLock(){synchronized(locks){if(null){}(locknull);  } }", "n_tokens": 27, "n_pass": [226, 25, 25]}
{"time": "2021-02-14 09:34:23.368799", "score": "0.9901", "loss": "0.0115", "code": "ILock getLock(){synchronized(locks){if(null){}(null);  } }", "n_tokens": 26, "n_pass": [228, 26, 26]}
{"time": "2021-02-14 09:34:25.990625", "score": "0.9901", "loss": "0.0115", "code": "ILock getLock(){synchronized(locks){if(null){}(null); } }", "n_tokens": 25, "n_pass": [232, 27, 27]}
{"time": "2021-02-14 09:34:28.638410", "score": "0.9901", "loss": "0.0115", "code": "ILock getLock(){synchronized(locks){if(null){}(null);} }", "n_tokens": 24, "n_pass": [233, 28, 28]}
{"time": "2021-02-14 09:34:31.272754", "score": "0.9901", "loss": "0.0115", "code": "ILock getLock(){synchronized(locks){if(null){}(null);}}", "n_tokens": 23, "n_pass": [235, 29, 29]}

Minimal simplified code:
ILock getLock(){synchronized(locks){if(null){}(null);}}

