
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/gplibs__android-magic-surface-view/src/main/java/com/gplibs/magicsurfaceview/GLUtil_loadShader.java
method_name = loadShader
method_body = static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException("Could not compile shader " + shaderType + ":" + info); } } return shader; }
predict, score, loss = loadShader, 0.9998030066490173, 0.0002205128694185987

Trace of simplified code(s):
{"time": "2021-02-14 16:39:48.983410", "score": "0.9985", "loss": "0.0015", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 198, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 16:39:51.678645", "score": "1.0", "loss": "0.0001", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 173, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 16:39:54.376235", "score": "0.9999", "loss": "0.0002", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 161, "n_pass": [46, 3, 3]}
{"time": "2021-02-14 16:39:57.051020", "score": "0.9953", "loss": "0.0047", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 148, "n_pass": [50, 4, 4]}
{"time": "2021-02-14 16:39:59.748236", "score": "0.997", "loss": "0.003", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 135, "n_pass": [52, 5, 5]}
{"time": "2021-02-14 16:40:02.449504", "score": "0.9878", "loss": "0.0123", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 129, "n_pass": [91, 6, 6]}
{"time": "2021-02-14 16:40:05.137209", "score": "0.8261", "loss": "0.1911", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 123, "n_pass": [97, 7, 7]}
{"time": "2021-02-14 16:40:07.800944", "score": "0.7274", "loss": "0.3183", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 117, "n_pass": [105, 8, 8]}
{"time": "2021-02-14 16:40:10.482842", "score": "0.7012", "loss": "0.3549", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could  shader \" ); } } return shader; }", "n_tokens": 114, "n_pass": [165, 9, 9]}
{"time": "2021-02-14 16:40:13.139594", "score": "0.6989", "loss": "0.3583", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 111, "n_pass": [166, 10, 10]}
{"time": "2021-02-14 16:40:16.229993", "score": "0.5954", "loss": "0.5185", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 108, "n_pass": [185, 11, 11]}
{"time": "2021-02-14 16:40:18.896161", "score": "0.7151", "loss": "0.3354", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 105, "n_pass": [187, 12, 12]}
{"time": "2021-02-14 16:40:21.562476", "score": "0.7181", "loss": "0.3311", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 102, "n_pass": [190, 13, 13]}
{"time": "2021-02-14 16:40:24.233417", "score": "0.7141", "loss": "0.3368", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String= GLES20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 99, "n_pass": [198, 14, 14]}
{"time": "2021-02-14 16:40:26.898927", "score": "0.7247", "loss": "0.322", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String20.GLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 96, "n_pass": [199, 15, 15]}
{"time": "2021-02-14 16:40:29.552146", "score": "0.7185", "loss": "0.3307", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 93, "n_pass": [200, 16, 16]}
{"time": "2021-02-14 16:40:32.634376", "score": "0.9813", "loss": "0.019", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES0.glGetShaderiv(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 90, "n_pass": [221, 17, 17]}
{"time": "2021-02-14 16:40:35.286517", "score": "0.6063", "loss": "0.5004", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 87, "n_pass": [222, 18, 18]}
{"time": "2021-02-14 16:40:41.766650", "score": "0.6965", "loss": "0.3617", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 85, "n_pass": [313, 19, 19]}
{"time": "2021-02-14 16:40:44.428571", "score": "0.695", "loss": "0.3639", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 83, "n_pass": [324, 20, 20]}
{"time": "2021-02-14 16:40:47.089541", "score": "0.9307", "loss": "0.0718", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } shader; }", "n_tokens": 81, "n_pass": [332, 21, 21]}
{"time": "2021-02-14 16:40:49.750061", "score": "0.9345", "loss": "0.0678", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 79, "n_pass": [333, 22, 22]}
{"time": "2021-02-14 16:40:52.414126", "score": "0.9345", "loss": "0.0678", "code": " int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 78, "n_pass": [335, 23, 23]}
{"time": "2021-02-14 16:40:55.057844", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 77, "n_pass": [336, 24, 24]}
{"time": "2021-02-14 16:40:58.516934", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType,String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 76, "n_pass": [345, 25, 25]}
{"time": "2021-02-14 16:41:01.162932", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType,String source){ GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 75, "n_pass": [350, 26, 26]}
{"time": "2021-02-14 16:41:03.823282", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType,String source){GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 74, "n_pass": [352, 27, 27]}
{"time": "2021-02-14 16:41:06.464690", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType,String source){GLES0.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 73, "n_pass": [354, 28, 28]}
{"time": "2021-02-14 16:41:09.107236", "score": "0.9345", "loss": "0.0678", "code": "int loadShader(int shaderType,String source){GLES.glCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 72, "n_pass": [355, 29, 29]}
{"time": "2021-02-14 16:41:11.743617", "score": "0.8576", "loss": "0.1717", "code": "int loadShader(int shaderType,String source){GLESglCreateShader(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 71, "n_pass": [356, 30, 30]}
{"time": "2021-02-14 16:41:14.375063", "score": "0.8087", "loss": "0.2344", "code": "int loadShader(int shaderType,String source){GLES(shaderType); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 70, "n_pass": [357, 31, 31]}
{"time": "2021-02-14 16:41:17.027962", "score": "0.8692", "loss": "0.2071", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 69, "n_pass": [359, 32, 32]}
{"time": "2021-02-14 16:41:28.455831", "score": "0.8692", "loss": "0.2071", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 68, "n_pass": [457, 33, 33]}
{"time": "2021-02-14 16:41:31.095668", "score": "0.8692", "loss": "0.2071", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){ GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 67, "n_pass": [459, 34, 34]}
{"time": "2021-02-14 16:41:33.731274", "score": "0.8692", "loss": "0.2071", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 66, "n_pass": [461, 35, 35]}
{"time": "2021-02-14 16:41:36.372510", "score": "0.8965", "loss": "0.1188", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 65, "n_pass": [462, 36, 36]}
{"time": "2021-02-14 16:41:39.015787", "score": "0.8965", "loss": "0.1188", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 64, "n_pass": [467, 37, 37]}
{"time": "2021-02-14 16:41:41.648666", "score": "0.8965", "loss": "0.1188", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 63, "n_pass": [469, 38, 38]}
{"time": "2021-02-14 16:41:44.311555", "score": "0.8965", "loss": "0.1188", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]== 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 62, "n_pass": [475, 39, 39]}
{"time": "2021-02-14 16:41:46.947934", "score": "0.8386", "loss": "0.1841", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]= 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 61, "n_pass": [476, 40, 40]}
{"time": "2021-02-14 16:41:49.610060", "score": "0.8386", "loss": "0.1841", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 60, "n_pass": [478, 41, 41]}
{"time": "2021-02-14 16:41:52.255040", "score": "0.8386", "loss": "0.1841", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){ RuntimeException(\"Could \" ); } }  }", "n_tokens": 59, "n_pass": [481, 42, 42]}
{"time": "2021-02-14 16:41:54.902507", "score": "0.8386", "loss": "0.1841", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){RuntimeException(\"Could \" ); } }  }", "n_tokens": 58, "n_pass": [483, 43, 43]}
{"time": "2021-02-14 16:41:57.548660", "score": "0.857", "loss": "0.1583", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"Could \" ); } }  }", "n_tokens": 57, "n_pass": [484, 44, 44]}
{"time": "2021-02-14 16:42:00.189754", "score": "0.8487", "loss": "0.1676", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\" \" ); } }  }", "n_tokens": 56, "n_pass": [487, 45, 45]}
{"time": "2021-02-14 16:42:02.836152", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\" ); } }  }", "n_tokens": 55, "n_pass": [488, 46, 46]}
{"time": "2021-02-14 16:42:05.479828", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\"); } }  }", "n_tokens": 54, "n_pass": [490, 47, 47]}
{"time": "2021-02-14 16:42:08.137790", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\");} }  }", "n_tokens": 53, "n_pass": [493, 48, 48]}
{"time": "2021-02-14 16:42:10.778025", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\");}}  }", "n_tokens": 52, "n_pass": [495, 49, 49]}
{"time": "2021-02-14 16:42:13.420879", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\");}} }", "n_tokens": 51, "n_pass": [497, 50, 50]}
{"time": "2021-02-14 16:42:16.047000", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES(); if (shader !=0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 50, "n_pass": [498, 51, 51]}
{"time": "2021-02-14 16:42:19.509417", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES();if (shader !=0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 49, "n_pass": [517, 52, 52]}
{"time": "2021-02-14 16:42:22.154431", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES();if(shader !=0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 48, "n_pass": [519, 53, 53]}
{"time": "2021-02-14 16:42:24.796354", "score": "0.8468", "loss": "0.1699", "code": "int loadShader(int shaderType,String source){GLES();if(shader!=0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 47, "n_pass": [522, 54, 54]}
{"time": "2021-02-14 16:42:27.443559", "score": "0.899", "loss": "0.1466", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 46, "n_pass": [523, 55, 55]}
{"time": "2021-02-14 16:42:30.090016", "score": "0.6896", "loss": "0.3788", "code": "int loadShader(int shaderType,String source){GLES();if(shader0){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 45, "n_pass": [524, 56, 56]}
{"time": "2021-02-14 16:42:32.711672", "score": "0.6896", "loss": "0.3788", "code": "int loadShader(int shaderType,String source){GLES();if(shader){(0);if(compiled[0]=0){(\"\");}}}", "n_tokens": 44, "n_pass": [525, 57, 57]}

Minimal simplified code:
int loadShader(int shaderType,String source){GLES();if(shader){(0);if(compiled[0]=0){("");}}}

