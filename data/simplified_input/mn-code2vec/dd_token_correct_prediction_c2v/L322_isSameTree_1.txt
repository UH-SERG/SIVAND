
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_572_isSameTree.java
method_name = isSameTree
method_body = private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }
predict, score, loss = isSameTree, 0.9999957084655762, 5.006777428206988e-06

Trace of simplified code(s):
{"time": "2021-02-14 15:14:34.612332", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 98, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 15:14:37.279762", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 86, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 15:14:39.945276", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { returnq; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 80, "n_pass": [44, 3, 3]}
{"time": "2021-02-14 15:14:42.599491", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { returnq; } return p.val == q.val && isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 74, "n_pass": [49, 4, 4]}
{"time": "2021-02-14 15:14:45.694361", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == q.val && isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 71, "n_pass": [99, 5, 5]}
{"time": "2021-02-14 15:14:48.776582", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == q&& isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 68, "n_pass": [107, 6, 6]}
{"time": "2021-02-14 15:14:51.439645", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == qisSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 65, "n_pass": [108, 7, 7]}
{"time": "2021-02-14 15:14:54.904233", "score": "0.9999", "loss": "0.0002", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 62, "n_pass": [129, 8, 8]}
{"time": "2021-02-14 15:14:57.985450", "score": "1.0", "loss": "0.0001", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } returnval =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 59, "n_pass": [148, 9, 9]}
{"time": "2021-02-14 15:15:03.712298", "score": "1.0", "loss": "0.0", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 57, "n_pass": [208, 10, 10]}
{"time": "2021-02-14 15:15:06.780487", "score": "0.9999", "loss": "0.0002", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree(p.right, q.right); }", "n_tokens": 55, "n_pass": [213, 11, 11]}
{"time": "2021-02-14 15:15:09.480854", "score": "0.9997", "loss": "0.0005", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree(right, q.right); }", "n_tokens": 53, "n_pass": [216, 12, 12]}
{"time": "2021-02-14 15:15:12.122138", "score": "0.9998", "loss": "0.0003", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q.right); }", "n_tokens": 51, "n_pass": [217, 13, 13]}
{"time": "2021-02-14 15:15:14.761811", "score": "0.9995", "loss": "0.0007", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 49, "n_pass": [219, 14, 14]}
{"time": "2021-02-14 15:15:17.400457", "score": "0.9995", "loss": "0.0007", "code": " boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 48, "n_pass": [222, 15, 15]}
{"time": "2021-02-14 15:15:20.053617", "score": "0.9995", "loss": "0.0007", "code": "boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 47, "n_pass": [223, 16, 16]}
{"time": "2021-02-14 15:15:23.520286", "score": "0.9995", "loss": "0.0007", "code": "boolean isSameTree(TreeNode p,TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 46, "n_pass": [232, 17, 17]}
{"time": "2021-02-14 15:15:26.180730", "score": "0.9995", "loss": "0.0007", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 45, "n_pass": [237, 18, 18]}
{"time": "2021-02-14 15:15:28.816286", "score": "0.9995", "loss": "0.0007", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) {q; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 43, "n_pass": [243, 19, 19]}
{"time": "2021-02-14 15:15:31.461837", "score": "0.9995", "loss": "0.0007", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 41, "n_pass": [244, 20, 20]}
{"time": "2021-02-14 15:15:34.489741", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree(); }", "n_tokens": 39, "n_pass": [252, 21, 21]}
{"time": "2021-02-14 15:15:41.361442", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 38, "n_pass": [306, 22, 22]}
{"time": "2021-02-14 15:15:44.788787", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){if (null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 37, "n_pass": [320, 23, 23]}
{"time": "2021-02-14 15:15:47.411101", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 36, "n_pass": [322, 24, 24]}
{"time": "2021-02-14 15:15:50.042865", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){ }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 35, "n_pass": [326, 25, 25]}
{"time": "2021-02-14 15:15:52.663744", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val =isSameTree(pleft)& isSameTree();}", "n_tokens": 34, "n_pass": [328, 26, 26]}
{"time": "2021-02-14 15:15:55.315803", "score": "0.9988", "loss": "0.0015", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=isSameTree(pleft)& isSameTree();}", "n_tokens": 33, "n_pass": [331, 27, 27]}
{"time": "2021-02-14 15:15:58.348751", "score": "0.9995", "loss": "0.0009", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(pleft)& isSameTree();}", "n_tokens": 32, "n_pass": [333, 28, 28]}
{"time": "2021-02-14 15:16:00.977277", "score": "0.9993", "loss": "0.0008", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)& isSameTree();}", "n_tokens": 31, "n_pass": [335, 29, 29]}
{"time": "2021-02-14 15:16:03.615257", "score": "0.9999", "loss": "0.0001", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left) isSameTree();}", "n_tokens": 30, "n_pass": [338, 30, 30]}
{"time": "2021-02-14 15:16:06.252114", "score": "0.9999", "loss": "0.0001", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)isSameTree();}", "n_tokens": 29, "n_pass": [339, 31, 31]}

Minimal simplified code:
boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)isSameTree();}

