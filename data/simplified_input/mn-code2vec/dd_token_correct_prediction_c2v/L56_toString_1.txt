
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/main/java/edu/illinois/cs/cogcomp/core/datastructures/vectors/OVector_toString.java
method_name = toString
method_body = public String toString() { StringBuffer result = new StringBuffer(); result.append("["); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(", "); } result.append("]"); return result.toString(); }
predict, score, loss = toString, 0.9967702627182007, 0.006925744004547596

Trace of simplified code(s):
{"time": "2021-02-14 06:33:03.572932", "score": "0.999", "loss": "0.002", "code": "public String toString() { StringBuffer result = new StringBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 117, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 06:33:06.234987", "score": "0.9962", "loss": "0.0082", "code": "public String toString() { StringBuffer result = new StringBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 88, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 06:33:09.302658", "score": "0.9968", "loss": "0.0065", "code": "public String toString() { StringBuffer result ; result.append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 81, "n_pass": [43, 3, 3]}
{"time": "2021-02-14 06:33:12.373369", "score": "0.9929", "loss": "0.0184", "code": "public String toString() { StringBuffer result ;append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 78, "n_pass": [77, 4, 4]}
{"time": "2021-02-14 06:33:14.998706", "score": "0.9897", "loss": "0.0274", "code": "public String toString() { StringBuffer result ;append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 74, "n_pass": [83, 5, 5]}
{"time": "2021-02-14 06:33:18.065238", "score": "0.9906", "loss": "0.0246", "code": "public String toString() {result ;append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 71, "n_pass": [97, 6, 6]}
{"time": "2021-02-14 06:33:20.713234", "score": "0.9906", "loss": "0.0242", "code": "public String toString() {append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 68, "n_pass": [98, 7, 7]}
{"time": "2021-02-14 06:33:25.655829", "score": "0.9969", "loss": "0.0078", "code": "public String toString() {append(\"[\"); for (i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 66, "n_pass": [159, 8, 8]}
{"time": "2021-02-14 06:33:28.302960", "score": "0.993", "loss": "0.0182", "code": "public String toString() {append(\"[\"); for (i = 0;; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 64, "n_pass": [162, 9, 9]}
{"time": "2021-02-14 06:33:30.963068", "score": "0.9955", "loss": "0.0118", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 62, "n_pass": [164, 10, 10]}
{"time": "2021-02-14 06:33:33.625635", "score": "0.9954", "loss": "0.012", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 60, "n_pass": [168, 11, 11]}
{"time": "2021-02-14 06:33:36.273350", "score": "0.963", "loss": "0.0873", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); return result.toString(); }", "n_tokens": 58, "n_pass": [172, 12, 12]}
{"time": "2021-02-14 06:33:38.928038", "score": "0.5674", "loss": "0.8289", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 56, "n_pass": [177, 13, 13]}
{"time": "2021-02-14 06:33:44.220009", "score": "0.5674", "loss": "0.8289", "code": " String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 55, "n_pass": [182, 15, 14]}
{"time": "2021-02-14 06:33:46.859102", "score": "0.5674", "loss": "0.8289", "code": "String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 54, "n_pass": [183, 16, 15]}
{"time": "2021-02-14 06:33:59.685852", "score": "0.5674", "loss": "0.8289", "code": "String toString(){append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 53, "n_pass": [267, 18, 16]}
{"time": "2021-02-14 06:34:02.318615", "score": "0.688", "loss": "0.4926", "code": "String toString(){(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 52, "n_pass": [269, 19, 17]}
{"time": "2021-02-14 06:34:04.957522", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 51, "n_pass": [272, 20, 18]}
{"time": "2021-02-14 06:34:07.612471", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\");for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 50, "n_pass": [276, 21, 19]}
{"time": "2021-02-14 06:34:10.245392", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\");for(i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 49, "n_pass": [278, 22, 20]}
{"time": "2021-02-14 06:34:12.876869", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\");for(i= 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 48, "n_pass": [281, 23, 21]}
{"time": "2021-02-14 06:34:15.535064", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\");for(i=0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 47, "n_pass": [283, 24, 22]}
{"time": "2021-02-14 06:34:18.172612", "score": "0.6997", "loss": "0.4732", "code": "String toString(){(\"\");for(i=0;;i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 46, "n_pass": [287, 25, 23]}
{"time": "2021-02-14 06:34:20.790390", "score": "0.6925", "loss": "0.4841", "code": "String toString(){(\"\");for(i=0;;) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 45, "n_pass": [288, 26, 24]}
{"time": "2021-02-14 06:34:23.430507", "score": "0.6925", "loss": "0.4841", "code": "String toString(){(\"\");for(i=0;;){(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 44, "n_pass": [290, 27, 25]}
{"time": "2021-02-14 06:34:26.045758", "score": "0.6925", "loss": "0.4841", "code": "String toString(){(\"\");for(i=0;;){(\"\");} append(\"]\"); result.toString(); }", "n_tokens": 43, "n_pass": [297, 28, 26]}
{"time": "2021-02-14 06:34:28.675706", "score": "0.6925", "loss": "0.4841", "code": "String toString(){(\"\");for(i=0;;){(\"\");}append(\"]\"); result.toString(); }", "n_tokens": 42, "n_pass": [299, 29, 27]}
{"time": "2021-02-14 06:34:31.298461", "score": "0.8651", "loss": "0.1793", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"]\"); result.toString(); }", "n_tokens": 41, "n_pass": [300, 30, 28]}
{"time": "2021-02-14 06:34:33.916017", "score": "0.7298", "loss": "0.3745", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\"); result.toString(); }", "n_tokens": 40, "n_pass": [303, 31, 29]}
{"time": "2021-02-14 06:34:36.542869", "score": "0.7298", "loss": "0.3745", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\");result.toString(); }", "n_tokens": 39, "n_pass": [307, 32, 30]}
{"time": "2021-02-14 06:34:41.801926", "score": "0.7298", "loss": "0.3745", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\");result.toString();}", "n_tokens": 38, "n_pass": [314, 34, 31]}
{"time": "2021-02-14 06:34:45.613382", "score": "0.9258", "loss": "0.1111", "code": "String toString(){(\"\");for(i0;;){(\"\");}(\"\");result.toString();}", "n_tokens": 37, "n_pass": [330, 35, 32]}
{"time": "2021-02-14 06:34:48.233616", "score": "0.9258", "loss": "0.1111", "code": "String toString(){(\"\");for(i;;){(\"\");}(\"\");result.toString();}", "n_tokens": 36, "n_pass": [331, 36, 33]}
{"time": "2021-02-14 06:34:54.676809", "score": "0.9299", "loss": "0.1043", "code": "String toString(){(\"\");for(;;){(\"\");}(\"\");result.toString();}", "n_tokens": 35, "n_pass": [367, 38, 34]}

Minimal simplified code:
String toString(){("");for(;;){("");}("");result.toString();}

