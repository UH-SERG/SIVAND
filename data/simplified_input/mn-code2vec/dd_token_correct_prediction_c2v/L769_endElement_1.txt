
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-projects__spring-ws/spring-ws-core/src/main/java/org/springframework/ws/soap/saaj/support/SaajContentHandler_endElement.java
method_name = endElement
method_body = @Override public void endElement(String uri, String localName, String qName) throws SAXException { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), "Invalid element on stack"); Assert.isTrue(uri.equals(element.getElementName().getURI()), "Invalid element on stack"); element = element.getParentElement(); }
predict, score, loss = endElement, 0.9985533356666565, 0.0014637719141319394

Trace of simplified code(s):
{"time": "2021-02-16 01:36:25.520121", "score": "0.9986", "loss": "0.0015", "code": "@Override public void endElement(String uri, String localName, String qName) throws SAXException { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"Invalid element on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); element = element.getParentElement(); }", "n_tokens": 106, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 01:36:28.550035", "score": "0.9989", "loss": "0.0011", "code": "@Override public void endElement(String uri, String localName, String qName) throws SAXException { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"Invalid element on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\").getParentElement(); }", "n_tokens": 99, "n_pass": [58, 2, 2]}
{"time": "2021-02-16 01:36:31.666641", "score": "0.9984", "loss": "0.0017", "code": "@Override public void endElement(String uri, String localName, String qName) throws SAXException { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"Invalid element on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 95, "n_pass": [103, 3, 3]}
{"time": "2021-02-16 01:36:34.306412", "score": "0.9982", "loss": "0.0018", "code": "public void endElement(String uri, String localName, String qName) throws SAXException { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"Invalid element on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 92, "n_pass": [105, 4, 4]}
{"time": "2021-02-16 01:36:37.248515", "score": "0.9798", "loss": "0.0521", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"Invalid element on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 89, "n_pass": [113, 5, 5]}
{"time": "2021-02-16 01:36:39.812825", "score": "0.9822", "loss": "0.0261", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \" on stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 86, "n_pass": [122, 6, 6]}
{"time": "2021-02-16 01:36:42.393825", "score": "0.9853", "loss": "0.0354", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\"); Assert.isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 83, "n_pass": [123, 7, 7]}
{"time": "2021-02-16 01:36:45.024175", "score": "0.992", "loss": "0.0204", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element.getElementName().getURI()), \"Invalid element on stack\"); }", "n_tokens": 80, "n_pass": [125, 8, 8]}
{"time": "2021-02-16 01:36:47.610850", "score": "0.9926", "loss": "0.0157", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element.getURI()), \"Invalid element on stack\"); }", "n_tokens": 76, "n_pass": [128, 9, 9]}
{"time": "2021-02-16 01:36:50.248460", "score": "0.9932", "loss": "0.0159", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"Invalid element on stack\"); }", "n_tokens": 72, "n_pass": [129, 10, 10]}
{"time": "2021-02-16 01:36:52.863752", "score": "0.9894", "loss": "0.0174", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"on stack\"); }", "n_tokens": 68, "n_pass": [131, 11, 11]}
{"time": "2021-02-16 01:36:58.230737", "score": "0.9953", "loss": "0.0103", "code": "public void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 66, "n_pass": [195, 12, 12]}
{"time": "2021-02-16 01:37:00.832131", "score": "0.9953", "loss": "0.0103", "code": " void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 65, "n_pass": [198, 13, 13]}
{"time": "2021-02-16 01:37:03.455092", "score": "0.9953", "loss": "0.0103", "code": "void endElement(String uri, String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 64, "n_pass": [199, 14, 14]}
{"time": "2021-02-16 01:37:06.847489", "score": "0.9953", "loss": "0.0103", "code": "void endElement(String uri,String localName, String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 63, "n_pass": [208, 15, 15]}
{"time": "2021-02-16 01:37:09.816553", "score": "0.9953", "loss": "0.0103", "code": "void endElement(String uri,String localName,String qName)  { Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 62, "n_pass": [213, 16, 16]}
{"time": "2021-02-16 01:37:12.533748", "score": "0.9953", "loss": "0.0103", "code": "void endElement(String uri,String localName,String qName){ Assert.isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 60, "n_pass": [216, 17, 17]}
{"time": "2021-02-16 01:37:15.170668", "score": "0.997", "loss": "0.0048", "code": "void endElement(String uri,String localName,String qName){ isTrue(localName.equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 58, "n_pass": [218, 18, 18]}
{"time": "2021-02-16 01:37:17.862681", "score": "0.9983", "loss": "0.0031", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(element.getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 56, "n_pass": [220, 19, 19]}
{"time": "2021-02-16 01:37:20.430007", "score": "0.997", "loss": "0.0047", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri.equals(element), \"stack\"); }", "n_tokens": 54, "n_pass": [222, 20, 20]}
{"time": "2021-02-16 01:37:23.024828", "score": "0.9944", "loss": "0.0078", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri(element), \"stack\"); }", "n_tokens": 52, "n_pass": [232, 21, 21]}
{"time": "2021-02-16 01:37:28.446010", "score": "0.9944", "loss": "0.0078", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri(element),\"stack\"); }", "n_tokens": 51, "n_pass": [307, 22, 22]}
{"time": "2021-02-16 01:37:31.089481", "score": "0.992", "loss": "0.0113", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri(element),\"\"); }", "n_tokens": 50, "n_pass": [308, 23, 23]}
{"time": "2021-02-16 01:37:33.631667", "score": "0.992", "loss": "0.0113", "code": "void endElement(String uri,String localName,String qName){ isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri(element),\"\");}", "n_tokens": 49, "n_pass": [312, 24, 24]}
{"time": "2021-02-16 01:37:37.012981", "score": "0.992", "loss": "0.0113", "code": "void endElement(String uri,String localName,String qName){isTrue(equals(getElementName().getLocalName()), \"stack\").isTrue(uri(element),\"\");}", "n_tokens": 48, "n_pass": [331, 25, 25]}
{"time": "2021-02-16 01:37:39.618029", "score": "0.9974", "loss": "0.005", "code": "void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()), \"stack\").isTrue(uri(element),\"\");}", "n_tokens": 47, "n_pass": [334, 26, 26]}
{"time": "2021-02-16 01:37:42.252558", "score": "0.9974", "loss": "0.005", "code": "void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()),\"stack\").isTrue(uri(element),\"\");}", "n_tokens": 46, "n_pass": [345, 27, 27]}
{"time": "2021-02-16 01:37:44.897497", "score": "0.9871", "loss": "0.0214", "code": "void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()),\"\").isTrue(uri(element),\"\");}", "n_tokens": 45, "n_pass": [347, 28, 28]}
{"time": "2021-02-16 01:37:47.544556", "score": "0.9824", "loss": "0.0328", "code": "void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()),\"\").isTrue((element),\"\");}", "n_tokens": 44, "n_pass": [353, 29, 29]}
{"time": "2021-02-16 01:37:50.148366", "score": "0.9767", "loss": "0.0468", "code": "void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()),\"\").isTrue((element)\"\");}", "n_tokens": 43, "n_pass": [357, 30, 30]}

Minimal simplified code:
void endElement(String uri,String localName,String qName){isTrue((getElementName().getLocalName()),"").isTrue((element)"");}

