
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/simplemagic/src/main/java/com/j256/simplemagic/ContentInfoInputStreamWrapper_read.java
method_name = read
method_body = @Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }
predict, score, loss = read, 0.9882217049598694, 0.01489270944148302

Trace of simplified code(s):
{"time": "2021-02-14 14:35:14.009585", "score": "0.9894", "loss": "0.0128", "code": "@Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 141, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 14:35:17.122416", "score": "0.9571", "loss": "0.0564", "code": " int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 137, "n_pass": [92, 2, 2]}
{"time": "2021-02-14 14:35:19.794106", "score": "0.9668", "loss": "0.0462", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 133, "n_pass": [95, 3, 3]}
{"time": "2021-02-14 14:35:22.485665", "score": "0.9459", "loss": "0.0778", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 129, "n_pass": [102, 4, 4]}
{"time": "2021-02-14 14:35:25.186465", "score": "0.9364", "loss": "0.0903", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 125, "n_pass": [106, 5, 5]}
{"time": "2021-02-14 14:35:27.871509", "score": "0.9084", "loss": "0.1405", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 120, "n_pass": [113, 6, 6]}
{"time": "2021-02-14 14:35:30.570990", "score": "0.9312", "loss": "0.1047", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off; i+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 115, "n_pass": [115, 7, 7]}
{"time": "2021-02-14 14:35:34.019227", "score": "0.9286", "loss": "0.1086", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 113, "n_pass": [195, 8, 8]}
{"time": "2021-02-14 14:35:36.682053", "score": "0.9286", "loss": "0.1086", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 111, "n_pass": [196, 9, 9]}
{"time": "2021-02-14 14:35:39.345024", "score": "0.9266", "loss": "0.1113", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 108, "n_pass": [198, 10, 10]}
{"time": "2021-02-14 14:35:42.014292", "score": "0.9667", "loss": "0.0481", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 105, "n_pass": [206, 11, 11]}
{"time": "2021-02-14 14:35:45.093116", "score": "0.9606", "loss": "0.0571", "code": " int read(byte b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 103, "n_pass": [211, 12, 12]}
{"time": "2021-02-14 14:35:47.754450", "score": "0.9386", "loss": "0.103", "code": " int read(byte b,  int len) throws IOException { numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 101, "n_pass": [220, 13, 13]}
{"time": "2021-02-14 14:35:50.403745", "score": "0.9383", "loss": "0.0997", "code": " int read(byte b,  int len) throws IOException { numRead = read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 99, "n_pass": [223, 14, 14]}
{"time": "2021-02-14 14:35:53.054321", "score": "0.8498", "loss": "0.2691", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 97, "n_pass": [225, 15, 15]}
{"time": "2021-02-14 14:35:55.706024", "score": "0.9823", "loss": "0.0268", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 95, "n_pass": [228, 16, 16]}
{"time": "2021-02-14 14:35:58.352657", "score": "0.9848", "loss": "0.0208", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 93, "n_pass": [231, 17, 17]}
{"time": "2021-02-14 14:36:01.008654", "score": "0.9788", "loss": "0.0289", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 91, "n_pass": [240, 18, 18]}
{"time": "2021-02-14 14:36:03.657432", "score": "0.9806", "loss": "0.0262", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 89, "n_pass": [241, 19, 19]}
{"time": "2021-02-14 14:36:06.743533", "score": "0.9823", "loss": "0.0227", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) { left; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 87, "n_pass": [273, 20, 20]}
{"time": "2021-02-14 14:36:09.400796", "score": "0.9829", "loss": "0.0217", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) {; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 85, "n_pass": [281, 21, 21]}
{"time": "2021-02-14 14:36:12.058464", "score": "0.9829", "loss": "0.0217", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 83, "n_pass": [282, 22, 22]}
{"time": "2021-02-14 14:36:15.160116", "score": "0.9809", "loss": "0.0239", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); byteCount; if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 81, "n_pass": [312, 23, 23]}
{"time": "2021-02-14 14:36:17.811060", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len);  if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 79, "n_pass": [313, 24, 24]}
{"time": "2021-02-14 14:36:31.416349", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 78, "n_pass": [419, 25, 25]}
{"time": "2021-02-14 14:36:34.059252", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 77, "n_pass": [420, 26, 26]}
{"time": "2021-02-14 14:36:36.708279", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left> numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 76, "n_pass": [423, 27, 27]}
{"time": "2021-02-14 14:36:39.351234", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 75, "n_pass": [425, 28, 28]}
{"time": "2021-02-14 14:36:41.996611", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 74, "n_pass": [428, 29, 29]}
{"time": "2021-02-14 14:36:44.644559", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 73, "n_pass": [431, 30, 30]}
{"time": "2021-02-14 14:36:47.290339", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 72, "n_pass": [433, 31, 31]}
{"time": "2021-02-14 14:36:49.938542", "score": "0.9801", "loss": "0.0249", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 71, "n_pass": [435, 32, 32]}
{"time": "2021-02-14 14:36:52.575043", "score": "0.9814", "loss": "0.0229", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 70, "n_pass": [436, 33, 33]}
{"time": "2021-02-14 14:36:55.208430", "score": "0.9824", "loss": "0.0214", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 69, "n_pass": [438, 34, 34]}
{"time": "2021-02-14 14:36:57.847945", "score": "0.9824", "loss": "0.0214", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 68, "n_pass": [440, 35, 35]}
{"time": "2021-02-14 14:37:00.474248", "score": "0.9824", "loss": "0.0214", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){ firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 67, "n_pass": [442, 36, 36]}
{"time": "2021-02-14 14:37:03.100604", "score": "0.9824", "loss": "0.0214", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 66, "n_pass": [444, 37, 37]}
{"time": "2021-02-14 14:37:05.734474", "score": "0.9824", "loss": "0.0214", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 64, "n_pass": [454, 38, 38]}
{"time": "2021-02-14 14:37:08.376759", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 63, "n_pass": [456, 39, 39]}
{"time": "2021-02-14 14:37:11.825097", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b, int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 62, "n_pass": [465, 40, 40]}
{"time": "2021-02-14 14:37:14.453819", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 61, "n_pass": [466, 41, 41]}
{"time": "2021-02-14 14:37:17.083065", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len)throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 60, "n_pass": [471, 42, 42]}
{"time": "2021-02-14 14:37:19.707921", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len)throws IOException{ numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 59, "n_pass": [475, 43, 43]}
{"time": "2021-02-14 14:37:22.336626", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len)throws IOException{numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 58, "n_pass": [477, 44, 44]}
{"time": "2021-02-14 14:37:24.958590", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len)throws IOException{numRead= read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 57, "n_pass": [479, 45, 45]}
{"time": "2021-02-14 14:37:27.592802", "score": "0.9824", "loss": "0.0214", "code": "int read(byte b,int len)throws IOException{numRead=read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 56, "n_pass": [481, 46, 46]}
{"time": "2021-02-14 14:37:30.216055", "score": "0.9516", "loss": "0.0601", "code": "int read(byte b,int len)throws IOException{numRead=(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 55, "n_pass": [482, 47, 47]}
{"time": "2021-02-14 14:37:32.879715", "score": "0.9516", "loss": "0.0601", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 54, "n_pass": [487, 48, 48]}
{"time": "2021-02-14 14:37:35.511713", "score": "0.9404", "loss": "0.0768", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(leftnumRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 53, "n_pass": [491, 49, 49]}
{"time": "2021-02-14 14:37:38.137384", "score": "0.9266", "loss": "0.0961", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 52, "n_pass": [492, 50, 50]}
{"time": "2021-02-14 14:37:41.625295", "score": "0.8246", "loss": "0.2247", "code": "int read(byte b,int len)throws IOException{numRead(len);if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 51, "n_pass": [529, 51, 51]}
{"time": "2021-02-14 14:37:44.258179", "score": "0.7843", "loss": "0.2857", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 50, "n_pass": [531, 52, 52]}
{"time": "2021-02-14 14:37:49.649410", "score": "0.7843", "loss": "0.2857", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]= b[i]; } }", "n_tokens": 49, "n_pass": [594, 53, 53]}
{"time": "2021-02-14 14:37:52.285880", "score": "0.7843", "loss": "0.2857", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i]; } }", "n_tokens": 48, "n_pass": [595, 54, 54]}
{"time": "2021-02-14 14:37:54.912961", "score": "0.7843", "loss": "0.2857", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];} }", "n_tokens": 47, "n_pass": [601, 55, 55]}
{"time": "2021-02-14 14:37:57.542158", "score": "0.7843", "loss": "0.2857", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];}}", "n_tokens": 46, "n_pass": [603, 56, 56]}

Minimal simplified code:
int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];}}

