
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/crypto/test/TnepresTest_performTest.java
method_name = performTest
method_body = public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode("9ea101ecebaa41c712bcb0d9bab3e2e4")); doCbcMonte(Hex.decode("9ea101ecebaa41c712bcb0d9bab3e2e4"), Hex.decode("9ea101ecebaa41c712bcb0d9bab3e2e4"), Hex.decode("b4813d8a66244188b9e92c75913fa2f4"), Hex.decode("f86b2c265b9c75869f31e2c684c13e9f")); }
predict, score, loss = performTest, 0.9572693705558777, 0.07333308458328247

Trace of simplified code(s):
{"time": "2021-02-16 20:31:00.280737", "score": "0.9407", "loss": "0.1355", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"b4813d8a66244188b9e92c75913fa2f4\"), Hex.decode(\"f86b2c265b9c75869f31e2c684c13e9f\")); }", "n_tokens": 229, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 20:31:02.929663", "score": "0.9071", "loss": "0.2116", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e42c75913fa2f4\"), Hex.decode(\"f86b2c265b9c75869f31e2c684c13e9f\")); }", "n_tokens": 200, "n_pass": [25, 2, 2]}
{"time": "2021-02-16 20:31:05.482353", "score": "0.918", "loss": "0.2113", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4b9c75869f31e2c684c13e9f\")); }", "n_tokens": 171, "n_pass": [26, 3, 3]}
{"time": "2021-02-16 20:31:08.063891", "score": "0.918", "loss": "0.2113", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e684c13e9f\")); }", "n_tokens": 156, "n_pass": [45, 4, 4]}
{"time": "2021-02-16 20:31:10.628701", "score": "0.918", "loss": "0.2113", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"99bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e684c13e9f\")); }", "n_tokens": 142, "n_pass": [51, 5, 5]}
{"time": "2021-02-16 20:31:13.182121", "score": "0.918", "loss": "0.2113", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"99bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa684c13e9f\")); }", "n_tokens": 127, "n_pass": [56, 6, 6]}
{"time": "2021-02-16 20:31:15.740006", "score": "0.918", "loss": "0.2113", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new byte[16], Hex.decode(\"99bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 120, "n_pass": [84, 7, 7]}
{"time": "2021-02-16 20:31:20.861313", "score": "0.8857", "loss": "0.2667", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"99bab3e2e4\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 113, "n_pass": [91, 9, 8]}
{"time": "2021-02-16 20:31:23.433093", "score": "0.9066", "loss": "0.2244", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9ea101ecebaa41c712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 106, "n_pass": [93, 10, 9]}
{"time": "2021-02-16 20:31:25.984857", "score": "0.9066", "loss": "0.2244", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9ea712bcb0d9bab3e2e4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 99, "n_pass": [96, 11, 10]}
{"time": "2021-02-16 20:31:28.532732", "score": "0.9066", "loss": "0.2244", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab3e2e4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 92, "n_pass": [97, 12, 11]}
{"time": "2021-02-16 20:31:33.635478", "score": "0.9066", "loss": "0.2244", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"), Hex.decode(\"9ea101ecebaa9f\")); }", "n_tokens": 88, "n_pass": [138, 14, 12]}
{"time": "2021-02-16 20:31:36.195522", "score": "0.9648", "loss": "0.0562", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea101ecebaa9f\")); }", "n_tokens": 84, "n_pass": [140, 15, 13]}
{"time": "2021-02-16 20:31:38.755072", "score": "0.9646", "loss": "0.057", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea9f\")); }", "n_tokens": 80, "n_pass": [142, 16, 14]}
{"time": "2021-02-16 20:31:43.789814", "score": "0.9646", "loss": "0.0578", "code": "public void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 78, "n_pass": [212, 17, 15]}
{"time": "2021-02-16 20:31:46.352694", "score": "0.9646", "loss": "0.0578", "code": " void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 77, "n_pass": [215, 18, 16]}
{"time": "2021-02-16 20:31:48.911887", "score": "0.9646", "loss": "0.0578", "code": "void performTest() throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 76, "n_pass": [216, 19, 17]}
{"time": "2021-02-16 20:31:52.212155", "score": "0.9646", "loss": "0.0578", "code": "void performTest()throws Exception { super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 75, "n_pass": [222, 20, 18]}
{"time": "2021-02-16 20:31:54.756344", "score": "0.9646", "loss": "0.0578", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], new Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 74, "n_pass": [226, 21, 19]}
{"time": "2021-02-16 20:31:59.855904", "score": "0.9575", "loss": "0.0722", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], Hex.decode(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 72, "n_pass": [241, 23, 20]}
{"time": "2021-02-16 20:32:02.392693", "score": "0.9705", "loss": "0.0447", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], Hex(\"9\")); doCbcMonte(Hex.decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 70, "n_pass": [243, 24, 21]}
{"time": "2021-02-16 20:32:04.938142", "score": "0.9763", "loss": "0.0339", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], Hex(\"9\")); doCbcMonte(decode(\"9eabab4\"),(\"9ea\")); }", "n_tokens": 68, "n_pass": [249, 25, 22]}
{"time": "2021-02-16 20:32:07.468136", "score": "0.899", "loss": "0.38", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], Hex(\"9\")); doCbcMonte(decode(\"94\"),(\"9ea\")); }", "n_tokens": 66, "n_pass": [252, 26, 23]}
{"time": "2021-02-16 20:32:10.008472", "score": "0.9003", "loss": "0.364", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16], Hex(\"9\")); doCbcMonte(decode(\"94\"),(\"\")); }", "n_tokens": 64, "n_pass": [256, 27, 24]}
{"time": "2021-02-16 20:32:15.854388", "score": "0.9194", "loss": "0.1425", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"9\")); doCbcMonte(decode(\"94\"),(\"\")); }", "n_tokens": 62, "n_pass": [282, 29, 25]}
{"time": "2021-02-16 20:32:25.246547", "score": "0.9197", "loss": "0.1416", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\")); doCbcMonte(decode(\"94\"),(\"\")); }", "n_tokens": 61, "n_pass": [372, 31, 26]}
{"time": "2021-02-16 20:32:27.799209", "score": "0.9197", "loss": "0.1416", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte(decode(\"94\"),(\"\")); }", "n_tokens": 60, "n_pass": [376, 32, 27]}
{"time": "2021-02-16 20:32:30.352666", "score": "0.988", "loss": "0.0135", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"94\"),(\"\")); }", "n_tokens": 59, "n_pass": [379, 33, 28]}
{"time": "2021-02-16 20:32:32.921753", "score": "0.9895", "loss": "0.0116", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"4\"),(\"\")); }", "n_tokens": 58, "n_pass": [382, 34, 29]}
{"time": "2021-02-16 20:32:35.486328", "score": "0.9898", "loss": "0.0113", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\")); }", "n_tokens": 57, "n_pass": [383, 35, 30]}
{"time": "2021-02-16 20:32:38.018021", "score": "0.9898", "loss": "0.0113", "code": "void performTest()throws Exception{ super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 56, "n_pass": [393, 36, 31]}
{"time": "2021-02-16 20:32:41.339733", "score": "0.9898", "loss": "0.0113", "code": "void performTest()throws Exception{super.performTest(); doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 55, "n_pass": [404, 37, 32]}
{"time": "2021-02-16 20:32:46.420415", "score": "0.9898", "loss": "0.0113", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(new byte[16], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 54, "n_pass": [411, 39, 33]}
{"time": "2021-02-16 20:32:48.965816", "score": "0.9915", "loss": "0.01", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[16], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 53, "n_pass": [415, 40, 34]}
{"time": "2021-02-16 20:32:51.501204", "score": "0.9915", "loss": "0.0099", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[6], new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 52, "n_pass": [418, 41, 35]}
{"time": "2021-02-16 20:32:54.038472", "score": "0.9915", "loss": "0.0099", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[6],new byte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 51, "n_pass": [422, 42, 36]}
{"time": "2021-02-16 20:32:56.569268", "score": "0.989", "loss": "0.0132", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[6],newbyte[16],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 50, "n_pass": [424, 43, 37]}
{"time": "2021-02-16 20:32:59.131271", "score": "0.9898", "loss": "0.0119", "code": "void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[6],newbyte[6],(\"\"));doCbcMonte((\"\"),(\"\"));}", "n_tokens": 49, "n_pass": [427, 44, 38]}

Minimal simplified code:
void performTest()throws Exception{super.performTest();doCbcMonte(newbyte[6],newbyte[6],(""));doCbcMonte((""),(""));}

