
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CastNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }
predict, score, loss = isEquivalent, 1.0, 2.3841855067985307e-07

Trace of simplified code(s):
{"time": "2021-02-14 22:34:51.614687", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 77, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 22:34:54.541235", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) & castOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 58, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 22:34:57.335908", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) ; } return false; }", "n_tokens": 48, "n_pass": [19, 3, 3]}
{"time": "2021-02-14 22:35:00.127053", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { ; } return false; }", "n_tokens": 38, "n_pass": [23, 4, 4]}
{"time": "2021-02-14 22:35:03.383427", "score": "1.0", "loss": "0.0", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { ; } ; }", "n_tokens": 35, "n_pass": [62, 5, 5]}
{"time": "2021-02-14 22:35:06.145443", "score": "1.0", "loss": "0.0", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { ; } ; }", "n_tokens": 33, "n_pass": [64, 6, 6]}
{"time": "2021-02-14 22:35:13.736895", "score": "1.0", "loss": "0.0", "code": "boolean isEquivalent(ValueNode o)throws StandardException { if (isSameNodeType(o)) { ; } ; }", "n_tokens": 32, "n_pass": [115, 7, 7]}
{"time": "2021-02-14 22:35:16.597580", "score": "1.0", "loss": "0.0", "code": "boolean isEquivalent(ValueNode o)throws StandardException{ if (isSameNodeType(o)) { ; } ; }", "n_tokens": 31, "n_pass": [118, 8, 8]}
{"time": "2021-02-14 22:35:19.347707", "score": "1.0", "loss": "0.0", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if (isSameNodeType(o)) { ; } ; }", "n_tokens": 30, "n_pass": [120, 9, 9]}
{"time": "2021-02-14 22:35:22.132301", "score": "1.0", "loss": "0.0", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if(isSameNodeType(o)) { ; } ; }", "n_tokens": 29, "n_pass": [122, 10, 10]}
{"time": "2021-02-14 22:35:24.913465", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { ; } ; }", "n_tokens": 28, "n_pass": [124, 11, 11]}
{"time": "2021-02-14 22:35:27.658641", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { } ; }", "n_tokens": 26, "n_pass": [130, 12, 12]}
{"time": "2021-02-14 22:35:30.412215", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { } }", "n_tokens": 24, "n_pass": [132, 13, 13]}
{"time": "2021-02-14 22:35:35.366230", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { }}", "n_tokens": 23, "n_pass": [160, 14, 14]}
{"time": "2021-02-14 22:35:38.963769", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){ }}", "n_tokens": 22, "n_pass": [179, 15, 15]}
{"time": "2021-02-14 22:35:41.783592", "score": "0.7932", "loss": "0.4074", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){}}", "n_tokens": 21, "n_pass": [181, 16, 16]}

Minimal simplified code:
boolean isEquivalent(ValueNode o)throws StandardException{if((o)){}}

