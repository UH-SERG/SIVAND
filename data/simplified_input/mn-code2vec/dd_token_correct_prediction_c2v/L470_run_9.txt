
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/tomcat/util/net/NioEndpoint_run.java
method_name = run
method_body = @Override public void run() { SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachment ka = null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (ka != null && ka.isUpgraded() && SocketStatus.OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }
predict, score, loss = run, 0.9969378709793091, 0.003917164634913206

Trace of simplified code(s):
{"time": "2021-02-14 20:02:14.291621", "score": "0.9972", "loss": "0.0037", "code": "@Override public void run() { SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachment ka = null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (ka != null && ka.isUpgraded() && SocketStatus.OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 165, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 20:02:16.973912", "score": "0.9977", "loss": "0.0025", "code": "@Override public void run() { SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachment ka = null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 144, "n_pass": [24, 2, 2]}
{"time": "2021-02-14 20:02:20.109478", "score": "0.9881", "loss": "0.0128", "code": "void run() { SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachment ka = null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 139, "n_pass": [100, 3, 3]}
{"time": "2021-02-14 20:02:22.778547", "score": "0.9763", "loss": "0.0281", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachment ka = null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 134, "n_pass": [102, 4, 4]}
{"time": "2021-02-14 20:02:25.441101", "score": "0.9836", "loss": "0.0184", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector()); KeyAttachmentnull; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 129, "n_pass": [107, 5, 5]}
{"time": "2021-02-14 20:02:28.946433", "score": "0.9633", "loss": "0.0423", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector); KeyAttachmentnull; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 127, "n_pass": [183, 6, 6]}
{"time": "2021-02-14 20:02:31.597461", "score": "0.9621", "loss": "0.0439", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector);null; if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 125, "n_pass": [185, 7, 7]}
{"time": "2021-02-14 20:02:34.260464", "score": "0.9058", "loss": "0.1102", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key, ka); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 123, "n_pass": [186, 8, 8]}
{"time": "2021-02-14 20:02:36.945719", "score": "0.9017", "loss": "0.1172", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } } else { synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 120, "n_pass": [209, 9, 9]}
{"time": "2021-02-14 20:02:39.611105", "score": "0.9346", "loss": "0.0755", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(key, ka); } } }", "n_tokens": 117, "n_pass": [212, 10, 10]}
{"time": "2021-02-14 20:02:42.269906", "score": "0.851", "loss": "0.1912", "code": "void run() { SelectionKey .getIOChannel().keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 114, "n_pass": [217, 11, 11]}
{"time": "2021-02-14 20:02:45.344595", "score": "0.745", "loss": "0.3032", "code": "void run() { SelectionKey ().keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 112, "n_pass": [226, 12, 12]}
{"time": "2021-02-14 20:02:48.005718", "score": "0.8314", "loss": "0.1906", "code": "void run() { SelectionKey .keyFor(socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 110, "n_pass": [227, 13, 13]}
{"time": "2021-02-14 20:02:50.661731", "score": "0.5614", "loss": "0.7729", "code": "void run() { SelectionKey (socket.getPoller().getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 108, "n_pass": [228, 14, 14]}
{"time": "2021-02-14 20:02:55.993796", "score": "0.2295", "loss": "1.7856", "code": "void run() { SelectionKey (socket.getPoller.getSelector); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 106, "n_pass": [231, 16, 15]}
{"time": "2021-02-14 20:02:58.646553", "score": "0.8875", "loss": "0.1378", "code": "void run() { SelectionKey (socket.getPoller); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 104, "n_pass": [232, 17, 16]}
{"time": "2021-02-14 20:03:01.748429", "score": "0.9743", "loss": "0.0266", "code": "void run() { (socket.getPoller); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 102, "n_pass": [269, 18, 17]}
{"time": "2021-02-14 20:03:04.402941", "score": "0.9788", "loss": "0.0219", "code": "void run() { (socket); if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 100, "n_pass": [271, 19, 18]}
{"time": "2021-02-14 20:03:14.305146", "score": "0.9788", "loss": "0.0219", "code": "void run() { (socket);if (key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 99, "n_pass": [385, 20, 19]}
{"time": "2021-02-14 20:03:16.952334", "score": "0.9788", "loss": "0.0219", "code": "void run() { (socket);if(key != null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 98, "n_pass": [386, 21, 20]}
{"time": "2021-02-14 20:03:19.605751", "score": "0.9788", "loss": "0.0219", "code": "void run() { (socket);if(key!= null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 97, "n_pass": [389, 22, 21]}
{"time": "2021-02-14 20:03:22.249828", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key= null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 96, "n_pass": [390, 23, 22]}
{"time": "2021-02-14 20:03:24.894670", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null) { ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 95, "n_pass": [392, 24, 23]}
{"time": "2021-02-14 20:03:27.562143", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 94, "n_pass": [395, 25, 24]}
{"time": "2021-02-14 20:03:30.234782", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka = (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 93, "n_pass": [397, 26, 25]}
{"time": "2021-02-14 20:03:32.989217", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka= (KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 92, "n_pass": [399, 27, 26]}
{"time": "2021-02-14 20:03:35.618528", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment) key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 91, "n_pass": [401, 28, 27]}
{"time": "2021-02-14 20:03:38.274311", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)key.attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 90, "n_pass": [405, 29, 28]}
{"time": "2021-02-14 20:03:40.925893", "score": "0.9944", "loss": "0.0057", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment).attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 89, "n_pass": [406, 30, 29]}
{"time": "2021-02-14 20:03:43.596601", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment(); } if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 88, "n_pass": [407, 31, 30]}
{"time": "2021-02-14 20:03:46.264440", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();} if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 87, "n_pass": [412, 32, 31]}
{"time": "2021-02-14 20:03:48.915656", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if (OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 86, "n_pass": [414, 33, 32]}
{"time": "2021-02-14 20:03:51.570080", "score": "0.9853", "loss": "0.015", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(OPEN_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 85, "n_pass": [416, 34, 33]}
{"time": "2021-02-14 20:03:54.214931", "score": "0.9973", "loss": "0.0027", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(_WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 84, "n_pass": [418, 35, 34]}
{"time": "2021-02-14 20:03:56.879074", "score": "0.9973", "loss": "0.0027", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka.getWriteThreadLock()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 83, "n_pass": [419, 36, 35]}
{"time": "2021-02-14 20:03:59.528775", "score": "0.9939", "loss": "0.0062", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka()) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 81, "n_pass": [427, 37, 36]}
{"time": "2021-02-14 20:04:02.163524", "score": "0.9968", "loss": "0.0033", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); } }{ synchronized (socket) { doRun(ka); } } }", "n_tokens": 79, "n_pass": [428, 38, 37]}
{"time": "2021-02-14 20:04:04.825322", "score": "0.9967", "loss": "0.0033", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) { doRun(ka); } } }", "n_tokens": 77, "n_pass": [435, 39, 38]}
{"time": "2021-02-14 20:04:07.462395", "score": "0.9925", "loss": "0.0081", "code": "void run() { (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 75, "n_pass": [440, 40, 39]}
{"time": "2021-02-14 20:04:10.953793", "score": "0.9925", "loss": "0.0081", "code": "void run(){ (socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 74, "n_pass": [451, 41, 40]}
{"time": "2021-02-14 20:04:13.594569", "score": "0.9925", "loss": "0.0081", "code": "void run(){(socket);if(key=null){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 73, "n_pass": [453, 42, 41]}
{"time": "2021-02-14 20:04:16.230987", "score": "0.9916", "loss": "0.0092", "code": "void run(){(socket);if(keynull){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 72, "n_pass": [461, 43, 42]}
{"time": "2021-02-14 20:04:18.906313", "score": "0.9903", "loss": "0.0106", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE == status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 71, "n_pass": [462, 44, 43]}
{"time": "2021-02-14 20:04:28.792570", "score": "0.9903", "loss": "0.0106", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE== status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 70, "n_pass": [557, 45, 44]}
{"time": "2021-02-14 20:04:31.429801", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE= status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 69, "n_pass": [558, 46, 45]}
{"time": "2021-02-14 20:04:34.088587", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status) { synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 68, "n_pass": [560, 47, 46]}
{"time": "2021-02-14 20:04:36.749649", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){ synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 67, "n_pass": [563, 48, 47]}
{"time": "2021-02-14 20:04:39.420657", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized (ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 66, "n_pass": [565, 49, 48]}
{"time": "2021-02-14 20:04:42.061300", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka) { doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 65, "n_pass": [567, 50, 49]}
{"time": "2021-02-14 20:04:44.701293", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){ doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 64, "n_pass": [571, 51, 50]}
{"time": "2021-02-14 20:04:47.348492", "score": "0.9082", "loss": "0.1086", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun(key); }  synchronized (socket) {(ka); } } }", "n_tokens": 63, "n_pass": [573, 52, 51]}
{"time": "2021-02-14 20:04:52.637392", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun(); }  synchronized (socket) {(ka); } } }", "n_tokens": 62, "n_pass": [576, 54, 52]}
{"time": "2021-02-14 20:04:55.306367", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}  synchronized (socket) {(ka); } } }", "n_tokens": 61, "n_pass": [579, 55, 53]}
{"time": "2021-02-14 20:04:57.943477", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();} synchronized (socket) {(ka); } } }", "n_tokens": 60, "n_pass": [581, 56, 54]}
{"time": "2021-02-14 20:05:00.593384", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized (socket) {(ka); } } }", "n_tokens": 59, "n_pass": [582, 57, 55]}
{"time": "2021-02-14 20:05:03.235364", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket) {(ka); } } }", "n_tokens": 58, "n_pass": [584, 58, 56]}
{"time": "2021-02-14 20:05:05.879655", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket){(ka); } } }", "n_tokens": 57, "n_pass": [588, 59, 57]}
{"time": "2021-02-14 20:05:08.528061", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket){(ka);} } }", "n_tokens": 56, "n_pass": [594, 60, 58]}
{"time": "2021-02-14 20:05:11.169838", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket){(ka);}} }", "n_tokens": 55, "n_pass": [596, 61, 59]}
{"time": "2021-02-14 20:05:13.801203", "score": "0.3305", "loss": "1.2146", "code": "void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket){(ka);}}}", "n_tokens": 54, "n_pass": [598, 62, 60]}

Minimal simplified code:
void run(){(socket);if(key){ka=(KeyAttachment)attachment();}if(WRITE=status){synchronized(ka){doRun();}synchronized(socket){(ka);}}}

