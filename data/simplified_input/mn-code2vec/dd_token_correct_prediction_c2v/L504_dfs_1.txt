
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_298_dfs.java
method_name = dfs
method_body = private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }
predict, score, loss = dfs, 0.8722876310348511, 0.13739411532878876

Trace of simplified code(s):
{"time": "2021-02-14 21:04:14.123955", "score": "0.9453", "loss": "0.0581", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 132, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 21:04:16.816281", "score": "0.8048", "loss": "0.2188", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 116, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 21:04:19.491014", "score": "0.8332", "loss": "0.1835", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, right, curr, root.val + 1); }", "n_tokens": 99, "n_pass": [26, 3, 3]}
{"time": "2021-02-14 21:04:22.162469", "score": "0.8759", "loss": "0.139", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left,val + 1); }", "n_tokens": 90, "n_pass": [45, 4, 4]}
{"time": "2021-02-14 21:04:27.493518", "score": "0.9191", "loss": "0.1591", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 85, "n_pass": [79, 6, 5]}
{"time": "2021-02-14 21:04:30.594754", "score": "0.9867", "loss": "0.0438", "code": "private void dfs(TreeNode  curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 81, "n_pass": [83, 7, 6]}
{"time": "2021-02-14 21:04:33.249709", "score": "0.9874", "loss": "0.0405", "code": "private void dfs(TreeNode  curr, int target) { if (root == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 77, "n_pass": [88, 8, 7]}
{"time": "2021-02-14 21:04:35.901759", "score": "0.99", "loss": "0.032", "code": "private void dfs(TreeNode  curr, int target) { if (root ) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 73, "n_pass": [89, 9, 8]}
{"time": "2021-02-14 21:04:38.580823", "score": "0.9836", "loss": "0.0471", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 69, "n_pass": [91, 10, 9]}
{"time": "2021-02-14 21:04:41.217391", "score": "0.9814", "loss": "0.0501", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 65, "n_pass": [94, 11, 10]}
{"time": "2021-02-14 21:04:43.848558", "score": "0.9642", "loss": "0.0717", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(max, curr); dfs(root.left1); }", "n_tokens": 61, "n_pass": [96, 12, 11]}
{"time": "2021-02-14 21:04:46.493215", "score": "0.9623", "loss": "0.0577", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root.left1); }", "n_tokens": 57, "n_pass": [98, 13, 12]}
{"time": "2021-02-14 21:04:52.571729", "score": "0.9904", "loss": "0.0114", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root1); }", "n_tokens": 55, "n_pass": [144, 15, 13]}
{"time": "2021-02-14 21:04:55.210999", "score": "0.9904", "loss": "0.0114", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root1); }", "n_tokens": 53, "n_pass": [147, 16, 14]}
{"time": "2021-02-14 21:04:58.252173", "score": "0.9886", "loss": "0.0139", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } { curr; } Math.max(); dfs(root1); }", "n_tokens": 51, "n_pass": [162, 17, 15]}
{"time": "2021-02-14 21:05:00.880624", "score": "0.9871", "loss": "0.0155", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {; } Math.max(); dfs(root1); }", "n_tokens": 49, "n_pass": [164, 18, 16]}
{"time": "2021-02-14 21:05:03.493624", "score": "0.9871", "loss": "0.0155", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} Math.max(); dfs(root1); }", "n_tokens": 47, "n_pass": [165, 19, 17]}
{"time": "2021-02-14 21:05:06.128201", "score": "0.9933", "loss": "0.0078", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max(); dfs(root1); }", "n_tokens": 45, "n_pass": [167, 20, 18]}
{"time": "2021-02-14 21:05:18.278279", "score": "0.9933", "loss": "0.0078", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max();dfs(root1); }", "n_tokens": 44, "n_pass": [238, 22, 19]}
{"time": "2021-02-14 21:05:20.913188", "score": "0.9653", "loss": "0.047", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max();dfs(1); }", "n_tokens": 43, "n_pass": [240, 23, 20]}
{"time": "2021-02-14 21:05:23.543592", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max();dfs(); }", "n_tokens": 42, "n_pass": [241, 24, 21]}
{"time": "2021-02-14 21:05:26.976939", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr, int target) { if (root ) {  } {} max();dfs(); }", "n_tokens": 41, "n_pass": [250, 25, 22]}
{"time": "2021-02-14 21:05:29.604004", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target) { if (root ) {  } {} max();dfs(); }", "n_tokens": 40, "n_pass": [254, 26, 23]}
{"time": "2021-02-14 21:05:32.269711", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){ if (root ) {  } {} max();dfs(); }", "n_tokens": 39, "n_pass": [259, 27, 24]}
{"time": "2021-02-14 21:05:34.891079", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if (root ) {  } {} max();dfs(); }", "n_tokens": 38, "n_pass": [261, 28, 25]}
{"time": "2021-02-14 21:05:37.504978", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root ) {  } {} max();dfs(); }", "n_tokens": 37, "n_pass": [263, 29, 26]}
{"time": "2021-02-14 21:05:40.139070", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root) {  } {} max();dfs(); }", "n_tokens": 36, "n_pass": [266, 30, 27]}
{"time": "2021-02-14 21:05:42.769014", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){  } {} max();dfs(); }", "n_tokens": 35, "n_pass": [268, 31, 28]}
{"time": "2021-02-14 21:05:45.397458", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){ } {} max();dfs(); }", "n_tokens": 34, "n_pass": [270, 32, 29]}
{"time": "2021-02-14 21:05:48.018788", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){} {} max();dfs(); }", "n_tokens": 33, "n_pass": [271, 33, 30]}
{"time": "2021-02-14 21:05:50.642686", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){}{} max();dfs(); }", "n_tokens": 32, "n_pass": [273, 34, 31]}
{"time": "2021-02-14 21:05:53.290049", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){}{}max();dfs(); }", "n_tokens": 31, "n_pass": [276, 35, 32]}
{"time": "2021-02-14 21:05:57.113918", "score": "0.9912", "loss": "0.0108", "code": "void dfs(TreeNode curr,int target){if(root){}{}max();dfs();}", "n_tokens": 30, "n_pass": [309, 36, 33]}

Minimal simplified code:
void dfs(TreeNode curr,int target){if(root){}{}max();dfs();}

