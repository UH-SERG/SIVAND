
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-sts/openam-client-sts/src/main/java/org/forgerock/openam/sts/config/user/AuthTargetMapping_toString.java
method_name = toString
method_body = @Override public String toString() { StringBuilder builder = new StringBuilder(); for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\n'); } return builder.toString(); }
predict, score, loss = toString, 0.9945005178451538, 0.01026399340480566

Trace of simplified code(s):
{"time": "2021-02-15 01:09:21.971840", "score": "0.9945", "loss": "0.0103", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 104, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 01:09:25.045838", "score": "0.9962", "loss": "0.0068", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 91, "n_pass": [21, 2, 2]}
{"time": "2021-02-15 01:09:27.693619", "score": "0.9983", "loss": "0.0026", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 78, "n_pass": [25, 3, 3]}
{"time": "2021-02-15 01:09:30.361151", "score": "0.9963", "loss": "0.006", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 71, "n_pass": [44, 4, 4]}
{"time": "2021-02-15 01:09:33.799729", "score": "0.7177", "loss": "0.6339", "code": "public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 68, "n_pass": [84, 5, 5]}
{"time": "2021-02-15 01:09:36.937531", "score": "0.6592", "loss": "0.7639", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 65, "n_pass": [90, 6, 6]}
{"time": "2021-02-15 01:09:39.590806", "score": "0.8948", "loss": "0.2577", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 62, "n_pass": [96, 7, 7]}
{"time": "2021-02-15 01:09:45.100112", "score": "0.9023", "loss": "0.2346", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 60, "n_pass": [156, 8, 8]}
{"time": "2021-02-15 01:09:48.088402", "score": "0.685", "loss": "0.6065", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } builder.toString(); }", "n_tokens": 58, "n_pass": [165, 9, 9]}
{"time": "2021-02-15 01:09:50.764121", "score": "0.5846", "loss": "0.8909", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 56, "n_pass": [166, 10, 10]}
{"time": "2021-02-15 01:09:53.405141", "score": "0.5846", "loss": "0.8909", "code": " String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 55, "n_pass": [170, 11, 11]}
{"time": "2021-02-15 01:09:56.197756", "score": "0.5846", "loss": "0.8909", "code": "String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 54, "n_pass": [171, 12, 12]}
{"time": "2021-02-15 01:10:00.036758", "score": "0.5846", "loss": "0.8909", "code": "String toString(){ for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 53, "n_pass": [177, 13, 13]}
{"time": "2021-02-15 01:10:02.752294", "score": "0.5846", "loss": "0.8909", "code": "String toString(){for (Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 52, "n_pass": [179, 14, 14]}
{"time": "2021-02-15 01:10:05.452110", "score": "0.5846", "loss": "0.8909", "code": "String toString(){for(Map.Entry<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 51, "n_pass": [181, 15, 15]}
{"time": "2021-02-15 01:10:08.112887", "score": "0.6968", "loss": "0.6342", "code": "String toString(){for(Map<String> entry : mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 49, "n_pass": [184, 16, 16]}
{"time": "2021-02-15 01:10:18.910731", "score": "0.6968", "loss": "0.6342", "code": "String toString(){for(Map<String> entry :mappings.entrySet()) { (getKey()).append('\\n'); } toString(); }", "n_tokens": 48, "n_pass": [255, 18, 17]}
{"time": "2021-02-15 01:10:24.238009", "score": "0.6968", "loss": "0.6342", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){ (getKey()).append('\\n'); } toString(); }", "n_tokens": 47, "n_pass": [262, 20, 18]}
{"time": "2021-02-15 01:10:26.894002", "score": "0.6968", "loss": "0.6342", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){(getKey()).append('\\n'); } toString(); }", "n_tokens": 46, "n_pass": [264, 21, 19]}
{"time": "2021-02-15 01:10:29.533051", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){(getKey()).append('n'); } toString(); }", "n_tokens": 45, "n_pass": [274, 22, 20]}
{"time": "2021-02-15 01:10:32.504436", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){(getKey()).append('n');} toString(); }", "n_tokens": 44, "n_pass": [279, 23, 21]}
{"time": "2021-02-15 01:10:35.148585", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){(getKey()).append('n');}toString(); }", "n_tokens": 43, "n_pass": [281, 24, 22]}
{"time": "2021-02-15 01:10:37.837875", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String> entry :mappings.entrySet()){(getKey()).append('n');}toString();}", "n_tokens": 42, "n_pass": [286, 25, 23]}
{"time": "2021-02-15 01:10:41.824099", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String>entry :mappings.entrySet()){(getKey()).append('n');}toString();}", "n_tokens": 41, "n_pass": [300, 26, 24]}
{"time": "2021-02-15 01:10:44.482602", "score": "0.5169", "loss": "0.8675", "code": "String toString(){for(Map<String>entry:mappings.entrySet()){(getKey()).append('n');}toString();}", "n_tokens": 40, "n_pass": [302, 27, 25]}

Minimal simplified code:
String toString(){for(Map<String>entry:mappings.entrySet()){(getKey()).append('n');}toString();}

