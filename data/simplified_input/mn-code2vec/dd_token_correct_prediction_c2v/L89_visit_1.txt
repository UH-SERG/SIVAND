
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/jasper/compiler/SmapUtil_visit.java
method_name = visit
method_body = @Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); if (mark == null) { return; } String fileName = mark.getFile(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }
predict, score, loss = visit, 0.9991827607154846, 0.0016687290044501424

Trace of simplified code(s):
{"time": "2021-02-14 07:36:21.776442", "score": "0.9995", "loss": "0.0008", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); if (mark == null) { return; } String fileName = mark.getFile(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 252, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 07:36:24.509872", "score": "1.0", "loss": "0.0001", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 221, "n_pass": [21, 2, 2]}
{"time": "2021-02-14 07:36:27.221204", "score": "0.9996", "loss": "0.0006", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smapn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 189, "n_pass": [24, 3, 3]}
{"time": "2021-02-14 07:36:29.936448", "score": "0.9973", "loss": "0.0096", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 158, "n_pass": [30, 4, 4]}
{"time": "2021-02-14 07:36:32.606801", "score": "1.0", "loss": "0.0", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStartn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 127, "n_pass": [35, 5, 5]}
{"time": "2021-02-14 07:36:35.307149", "score": "1.0", "loss": "0.0", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStartn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 119, "n_pass": [80, 6, 6]}
{"time": "2021-02-14 07:36:38.385844", "score": "1.0", "loss": "0.0", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 111, "n_pass": [86, 7, 7]}
{"time": "2021-02-14 07:36:41.471801", "score": "1.0", "loss": "0.0", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 107, "n_pass": [132, 8, 8]}
{"time": "2021-02-14 07:36:44.137260", "score": "1.0", "loss": "0.0001", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 103, "n_pass": [137, 9, 9]}
{"time": "2021-02-14 07:36:46.785200", "score": "1.0", "loss": "0.0001", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 99, "n_pass": [142, 10, 10]}
{"time": "2021-02-14 07:36:49.448929", "score": "1.0", "loss": "0.0001", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 95, "n_pass": [145, 11, 11]}
{"time": "2021-02-14 07:36:52.104123", "score": "1.0", "loss": "0.0", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 91, "n_pass": [147, 12, 12]}
{"time": "2021-02-14 07:36:54.766583", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 88, "n_pass": [151, 13, 13]}
{"time": "2021-02-14 07:36:57.831148", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 84, "n_pass": [155, 14, 14]}
{"time": "2021-02-14 07:37:01.666520", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {n.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 82, "n_pass": [220, 15, 15]}
{"time": "2021-02-14 07:37:04.321028", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 80, "n_pass": [221, 16, 16]}
{"time": "2021-02-14 07:37:06.977627", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 78, "n_pass": [235, 17, 17]}
{"time": "2021-02-14 07:37:09.622537", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 76, "n_pass": [239, 18, 18]}
{"time": "2021-02-14 07:37:12.269653", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 74, "n_pass": [242, 19, 19]}
{"time": "2021-02-14 07:37:14.943628", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 72, "n_pass": [243, 20, 20]}
{"time": "2021-02-14 07:37:17.584536", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 70, "n_pass": [244, 21, 21]}
{"time": "2021-02-14 07:37:20.232426", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine , iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 68, "n_pass": [248, 22, 22]}
{"time": "2021-02-14 07:37:22.881061", "score": "1.0", "loss": "0.0", "code": "public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 66, "n_pass": [249, 23, 23]}
{"time": "2021-02-14 07:37:25.535618", "score": "1.0", "loss": "0.0", "code": "void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 64, "n_pass": [255, 24, 24]}
{"time": "2021-02-14 07:37:28.576963", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 62, "n_pass": [258, 25, 25]}
{"time": "2021-02-14 07:37:31.264614", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 60, "n_pass": [277, 26, 26]}
{"time": "2021-02-14 07:37:43.768179", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){ addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 59, "n_pass": [369, 27, 27]}
{"time": "2021-02-14 07:37:46.417286", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 58, "n_pass": [371, 28, 28]}
{"time": "2021-02-14 07:37:49.064667", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,  iOutputLineIncrement); } } }", "n_tokens": 57, "n_pass": [375, 29, 29]}
{"time": "2021-02-14 07:37:51.721607", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine, iOutputLineIncrement); } } }", "n_tokens": 56, "n_pass": [377, 30, 30]}
{"time": "2021-02-14 07:37:54.357694", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement); } } }", "n_tokens": 55, "n_pass": [378, 31, 31]}
{"time": "2021-02-14 07:37:57.002479", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);} } }", "n_tokens": 54, "n_pass": [382, 32, 32]}
{"time": "2021-02-14 07:37:59.654655", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}} }", "n_tokens": 53, "n_pass": [384, 33, 33]}
{"time": "2021-02-14 07:38:02.325577", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 52, "n_pass": [386, 34, 34]}
{"time": "2021-02-14 07:38:05.800505", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 51, "n_pass": [396, 35, 35]}
{"time": "2021-02-14 07:38:08.450179", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 50, "n_pass": [402, 36, 36]}
{"time": "2021-02-14 07:38:11.096055", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 49, "n_pass": [404, 37, 37]}
{"time": "2021-02-14 07:38:13.734533", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 48, "n_pass": [407, 38, 38]}
{"time": "2021-02-14 07:38:16.371055", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){ for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 47, "n_pass": [409, 39, 39]}
{"time": "2021-02-14 07:38:19.011977", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 46, "n_pass": [411, 40, 40]}
{"time": "2021-02-14 07:38:21.636483", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 45, "n_pass": [413, 41, 41]}
{"time": "2021-02-14 07:38:24.271286", "score": "1.0", "loss": "0.0001", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for( i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 44, "n_pass": [415, 42, 42]}
{"time": "2021-02-14 07:38:26.901717", "score": "1.0", "loss": "0.0001", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 43, "n_pass": [416, 43, 43]}
{"time": "2021-02-14 07:38:29.531551", "score": "1.0", "loss": "0.0001", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i= 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 42, "n_pass": [418, 44, 44]}
{"time": "2021-02-14 07:38:32.171690", "score": "1.0", "loss": "0.0001", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i=0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 41, "n_pass": [420, 45, 45]}
{"time": "2021-02-14 07:38:34.828261", "score": "1.0", "loss": "0.0001", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 40, "n_pass": [423, 46, 46]}
{"time": "2021-02-14 07:38:37.456345", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLineiOutputLineIncrement);}}}", "n_tokens": 39, "n_pass": [433, 47, 47]}
{"time": "2021-02-14 07:38:40.078275", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLine);}}}", "n_tokens": 38, "n_pass": [434, 48, 48]}
{"time": "2021-02-14 07:38:43.539151", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i0;size();){addLineData(iInputStartLine);}}}", "n_tokens": 37, "n_pass": [461, 49, 49]}
{"time": "2021-02-14 07:38:46.179880", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i;size();){addLineData(iInputStartLine);}}}", "n_tokens": 36, "n_pass": [462, 50, 50]}
{"time": "2021-02-14 07:38:48.822955", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(i;size();){(iInputStartLine);}}}", "n_tokens": 35, "n_pass": [470, 51, 51]}
{"time": "2021-02-14 07:38:52.313977", "score": "1.0", "loss": "0.0", "code": "void visit(TemplateText n){getExtraSmap();if(extraSmap){for(;size();){(iInputStartLine);}}}", "n_tokens": 34, "n_pass": [498, 52, 52]}

Minimal simplified code:
void visit(TemplateText n){getExtraSmap();if(extraSmap){for(;size();){(iInputStartLine);}}}

