
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/javaee__javamail/mail/src/main/java/javax/mail/search/OrTerm_equals.java
method_name = equals
method_body = @Override public boolean equals(Object obj) { if (!(obj instanceof OrTerm)) return false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }
predict, score, loss = equals, 0.999679446220398, 0.0005416594794951379

Trace of simplified code(s):
{"time": "2021-02-14 23:59:52.897911", "score": "0.9989", "loss": "0.002", "code": "@Override public boolean equals(Object obj) { if (!(obj instanceof OrTerm)) return false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 126, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 23:59:55.624724", "score": "0.9951", "loss": "0.0096", "code": "@Override public boolean equals(Object obj) { false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 111, "n_pass": [21, 2, 2]}
{"time": "2021-02-14 23:59:58.351077", "score": "0.9929", "loss": "0.0105", "code": "@Override public boolean equals(Object obj) { if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 95, "n_pass": [22, 3, 3]}
{"time": "2021-02-15 00:00:01.491786", "score": "0.8267", "loss": "0.3382", "code": "@Override public boolean equals(Object obj) { if (length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 91, "n_pass": [78, 4, 4]}
{"time": "2021-02-15 00:00:04.205393", "score": "0.8807", "loss": "0.2488", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 87, "n_pass": [79, 5, 5]}
{"time": "2021-02-15 00:00:06.957487", "score": "0.9139", "loss": "0.1961", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 83, "n_pass": [86, 6, 6]}
{"time": "2021-02-15 00:00:09.756988", "score": "0.8683", "loss": "0.2918", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i])); return true; }", "n_tokens": 79, "n_pass": [94, 7, 7]}
{"time": "2021-02-15 00:00:12.534518", "score": "0.8354", "loss": "0.3592", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 75, "n_pass": [95, 8, 8]}
{"time": "2021-02-15 00:00:15.233873", "score": "0.6629", "loss": "0.7659", "code": "public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 72, "n_pass": [97, 9, 9]}
{"time": "2021-02-15 00:00:18.792116", "score": "0.6629", "loss": "0.7659", "code": "boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 70, "n_pass": [152, 10, 10]}
{"time": "2021-02-15 00:00:21.541925", "score": "0.8059", "loss": "0.2809", "code": "boolean equals(Object obj) { if ( terms) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 68, "n_pass": [160, 11, 11]}
{"time": "2021-02-15 00:00:27.280856", "score": "0.7816", "loss": "0.3148", "code": "boolean equals(Object obj) { if ( terms) return false; for (i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 66, "n_pass": [166, 13, 12]}
{"time": "2021-02-15 00:00:29.969992", "score": "0.7868", "loss": "0.3066", "code": "boolean equals(Object obj) { if ( terms) return false; for (i = 0; i; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 64, "n_pass": [171, 14, 13]}
{"time": "2021-02-15 00:00:32.656445", "score": "0.958", "loss": "0.0655", "code": "boolean equals(Object obj) { if ( terms) return false; for (i = 0; i; i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 62, "n_pass": [181, 15, 14]}
{"time": "2021-02-15 00:00:35.780482", "score": "0.7114", "loss": "0.5125", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0; i; i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 60, "n_pass": [196, 16, 15]}
{"time": "2021-02-15 00:00:41.143235", "score": "0.7144", "loss": "0.508", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;; i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 58, "n_pass": [203, 18, 16]}
{"time": "2021-02-15 00:00:54.672760", "score": "0.7144", "loss": "0.508", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;;i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 57, "n_pass": [292, 20, 17]}
{"time": "2021-02-15 00:00:57.328212", "score": "0.7144", "loss": "0.508", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;;i++)if (!terms[i].equals(terms[i]))true; }", "n_tokens": 56, "n_pass": [297, 21, 18]}
{"time": "2021-02-15 00:00:59.981537", "score": "0.7144", "loss": "0.508", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]))true; }", "n_tokens": 55, "n_pass": [299, 22, 19]}
{"time": "2021-02-15 00:01:05.375527", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i])); }", "n_tokens": 54, "n_pass": [315, 24, 20]}
{"time": "2021-02-15 00:01:08.023576", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj) { if ( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 53, "n_pass": [317, 25, 21]}
{"time": "2021-02-15 00:01:11.517498", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj){ if ( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 52, "n_pass": [327, 26, 22]}
{"time": "2021-02-15 00:01:14.160979", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj){if ( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 51, "n_pass": [329, 27, 23]}
{"time": "2021-02-15 00:01:17.277528", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj){if( terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 50, "n_pass": [331, 28, 24]}
{"time": "2021-02-15 00:01:19.954566", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj){if(terms) false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 49, "n_pass": [333, 29, 25]}
{"time": "2021-02-15 00:01:22.623290", "score": "0.7207", "loss": "0.4878", "code": "boolean equals(Object obj){if(terms)false; for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 48, "n_pass": [336, 30, 26]}
{"time": "2021-02-15 00:01:25.279048", "score": "0.7093", "loss": "0.506", "code": "boolean equals(Object obj){if(terms); for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 47, "n_pass": [337, 31, 27]}
{"time": "2021-02-15 00:01:30.594168", "score": "0.7093", "loss": "0.506", "code": "boolean equals(Object obj){if(terms);for (i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 46, "n_pass": [339, 33, 28]}
{"time": "2021-02-15 00:01:33.244560", "score": "0.7093", "loss": "0.506", "code": "boolean equals(Object obj){if(terms);for(i = 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 45, "n_pass": [341, 34, 29]}
{"time": "2021-02-15 00:01:35.911720", "score": "0.7093", "loss": "0.506", "code": "boolean equals(Object obj){if(terms);for(i= 0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 44, "n_pass": [344, 35, 30]}
{"time": "2021-02-15 00:01:38.555777", "score": "0.7093", "loss": "0.506", "code": "boolean equals(Object obj){if(terms);for(i=0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 43, "n_pass": [346, 36, 31]}
{"time": "2021-02-15 00:01:47.352947", "score": "0.8732", "loss": "0.1855", "code": "boolean equals(Object obj){(terms);for(i=0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 42, "n_pass": [381, 39, 32]}
{"time": "2021-02-15 00:01:50.347512", "score": "0.8968", "loss": "0.1479", "code": "boolean equals(Object obj){(terms);for(i0;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 41, "n_pass": [389, 40, 33]}
{"time": "2021-02-15 00:01:53.015161", "score": "0.8968", "loss": "0.1479", "code": "boolean equals(Object obj){(terms);for(i;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 40, "n_pass": [390, 41, 34]}
{"time": "2021-02-15 00:02:01.806490", "score": "0.9016", "loss": "0.139", "code": "boolean equals(Object obj){(terms);for(;;i++)if(!terms[i].equals(terms[i]));}", "n_tokens": 39, "n_pass": [430, 44, 35]}

Minimal simplified code:
boolean equals(Object obj){(terms);for(;;i++)if(!terms[i].equals(terms[i]));}

