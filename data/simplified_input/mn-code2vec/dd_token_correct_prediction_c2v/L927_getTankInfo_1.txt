
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorCoolantPort_getTankInfo.java
method_name = getTankInfo
method_body = @Override public FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }
predict, score, loss = getTankInfo, 0.9883618950843811, 0.01842760108411312

Trace of simplified code(s):
{"time": "2021-02-16 11:22:03.337090", "score": "0.9884", "loss": "0.0184", "code": "@Override public FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 11:22:06.276009", "score": "0.9834", "loss": "0.0267", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 72, "n_pass": [44, 2, 2]}
{"time": "2021-02-16 11:22:09.198151", "score": "0.9952", "loss": "0.0075", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 67, "n_pass": [50, 3, 3]}
{"time": "2021-02-16 11:22:11.734755", "score": "0.9957", "loss": "0.0062", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 62, "n_pass": [53, 4, 4]}
{"time": "2021-02-16 11:22:14.305445", "score": "0.9952", "loss": "0.0062", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainer().getTankInfo(getConnectedTank()); }", "n_tokens": 57, "n_pass": [57, 5, 5]}
{"time": "2021-02-16 11:22:17.580960", "score": "0.9917", "loss": "0.0137", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 54, "n_pass": [94, 6, 6]}
{"time": "2021-02-16 11:22:20.109347", "score": "0.9922", "loss": "0.0112", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 52, "n_pass": [99, 7, 7]}
{"time": "2021-02-16 11:22:23.064313", "score": "0.9947", "loss": "0.0073", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 50, "n_pass": [111, 8, 8]}
{"time": "2021-02-16 11:22:25.599078", "score": "0.9885", "loss": "0.0167", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { }cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 47, "n_pass": [114, 9, 9]}
{"time": "2021-02-16 11:22:28.119024", "score": "0.9915", "loss": "0.0134", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { } getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 44, "n_pass": [115, 10, 10]}
{"time": "2021-02-16 11:22:31.413539", "score": "0.995", "loss": "0.0071", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir)  getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 41, "n_pass": [134, 11, 11]}
{"time": "2021-02-16 11:22:38.238395", "score": "0.995", "loss": "0.0071", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 40, "n_pass": [189, 12, 12]}
{"time": "2021-02-16 11:22:40.763954", "score": "0.9948", "loss": "0.0075", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 38, "n_pass": [196, 13, 13]}
{"time": "2021-02-16 11:22:43.306075", "score": "0.9948", "loss": "0.0075", "code": "FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 37, "n_pass": [199, 14, 14]}
{"time": "2021-02-16 11:22:46.955420", "score": "0.9948", "loss": "0.0075", "code": "FluidTankInfo getTankInfo(ForgeDirection from){ if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 36, "n_pass": [208, 15, 15]}
{"time": "2021-02-16 11:22:49.497762", "score": "0.9948", "loss": "0.0075", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 35, "n_pass": [210, 16, 16]}
{"time": "2021-02-16 11:22:52.018399", "score": "0.9948", "loss": "0.0075", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 34, "n_pass": [212, 17, 17]}
{"time": "2021-02-16 11:22:54.557480", "score": "0.9938", "loss": "0.0098", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 33, "n_pass": [214, 18, 18]}
{"time": "2021-02-16 11:22:57.107696", "score": "0.9938", "loss": "0.0098", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!= getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 32, "n_pass": [218, 19, 19]}
{"time": "2021-02-16 11:22:59.997636", "score": "0.9938", "loss": "0.0098", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 31, "n_pass": [221, 20, 20]}
{"time": "2021-02-16 11:23:02.537549", "score": "0.9938", "loss": "0.0098", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 30, "n_pass": [224, 21, 21]}
{"time": "2021-02-16 11:23:07.284090", "score": "0.9966", "loss": "0.0044", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo(getConnectedTank); }", "n_tokens": 29, "n_pass": [259, 22, 22]}
{"time": "2021-02-16 11:23:09.831769", "score": "0.9968", "loss": "0.0046", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo(); }", "n_tokens": 28, "n_pass": [261, 23, 23]}
{"time": "2021-02-16 11:23:12.357583", "score": "0.9968", "loss": "0.0046", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo();}", "n_tokens": 27, "n_pass": [264, 24, 24]}

Minimal simplified code:
FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo();}

