
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/http/src/main/java/org/kaazing/gateway/transport/http/HttpBindings_toString.java
method_name = toString
method_body = @Override public String toString() { Iterator<Entry<String, Binding>> i = bindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append("(\n"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(" ").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append("\n #").append(referenceCount()).append(")").toString(); sb.append(';').append('\n'); } }
predict, score, loss = toString, 0.9991936087608337, 0.001412466517649591

Trace of simplified code(s):
{"time": "2021-02-14 09:06:25.688269", "score": "0.9991", "loss": "0.0015", "code": "@Override public String toString() { Iterator<Entry<String, Binding>> i = bindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 238, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 09:06:28.400383", "score": "0.9981", "loss": "0.0045", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 224, "n_pass": [45, 2, 2]}
{"time": "2021-02-14 09:06:31.125014", "score": "0.9988", "loss": "0.0025", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 209, "n_pass": [54, 3, 3]}
{"time": "2021-02-14 09:06:33.824651", "score": "0.9983", "loss": "0.0035", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 194, "n_pass": [57, 4, 4]}
{"time": "2021-02-14 09:06:36.528858", "score": "0.9989", "loss": "0.0022", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 186, "n_pass": [99, 5, 5]}
{"time": "2021-02-14 09:06:39.628125", "score": "0.9995", "loss": "0.0009", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 179, "n_pass": [103, 6, 6]}
{"time": "2021-02-14 09:06:42.305748", "score": "0.9991", "loss": "0.002", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 172, "n_pass": [108, 7, 7]}
{"time": "2021-02-14 09:06:45.413689", "score": "0.9996", "loss": "0.0007", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 165, "n_pass": [114, 8, 8]}
{"time": "2021-02-14 09:06:48.091651", "score": "0.9907", "loss": "0.0142", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 157, "n_pass": [116, 9, 9]}
{"time": "2021-02-14 09:06:51.621605", "score": "0.9992", "loss": "0.0015", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 153, "n_pass": [180, 10, 10]}
{"time": "2021-02-14 09:06:54.314958", "score": "0.9993", "loss": "0.0012", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 149, "n_pass": [181, 11, 11]}
{"time": "2021-02-14 09:06:57.000321", "score": "0.9988", "loss": "0.0024", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 145, "n_pass": [192, 12, 12]}
{"time": "2021-02-14 09:06:59.693136", "score": "0.9965", "loss": "0.0094", "code": "public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 142, "n_pass": [197, 13, 13]}
{"time": "2021-02-14 09:07:02.783834", "score": "0.9971", "loss": "0.009", "code": "public String toString() { Iterator(); if (hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 139, "n_pass": [204, 14, 14]}
{"time": "2021-02-14 09:07:05.482994", "score": "0.9873", "loss": "0.042", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 136, "n_pass": [207, 15, 15]}
{"time": "2021-02-14 09:07:08.180085", "score": "0.9846", "loss": "0.0477", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 132, "n_pass": [209, 16, 16]}
{"time": "2021-02-14 09:07:10.867042", "score": "0.9851", "loss": "0.0458", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 128, "n_pass": [221, 17, 17]}
{"time": "2021-02-14 09:07:13.961879", "score": "0.9835", "loss": "0.0493", "code": "public String toString() { Iterator(); if (hasNext()) return ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 124, "n_pass": [244, 18, 18]}
{"time": "2021-02-14 09:07:20.471845", "score": "0.9918", "loss": "0.022", "code": "public String toString() { Iterator(); if (hasNext()) return sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 122, "n_pass": [344, 19, 19]}
{"time": "2021-02-14 09:07:23.133779", "score": "0.9269", "loss": "0.1238", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 120, "n_pass": [345, 20, 20]}
{"time": "2021-02-14 09:07:25.799002", "score": "0.9247", "loss": "0.1263", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 118, "n_pass": [347, 21, 21]}
{"time": "2021-02-14 09:07:28.580173", "score": "0.9362", "loss": "0.0997", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 116, "n_pass": [357, 22, 22]}
{"time": "2021-02-14 09:07:31.672613", "score": "0.9746", "loss": "0.0482", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 114, "n_pass": [362, 23, 23]}
{"time": "2021-02-14 09:07:34.348018", "score": "0.9612", "loss": "0.069", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 112, "n_pass": [365, 24, 24]}
{"time": "2021-02-14 09:07:37.044585", "score": "0.9844", "loss": "0.029", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 110, "n_pass": [370, 25, 25]}
{"time": "2021-02-14 09:07:39.711359", "score": "0.8938", "loss": "0.1659", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 108, "n_pass": [376, 26, 26]}
{"time": "2021-02-14 09:07:42.403720", "score": "0.9766", "loss": "0.0854", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 106, "n_pass": [379, 27, 27]}
{"time": "2021-02-14 09:07:45.058860", "score": "0.8102", "loss": "0.3759", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\"\\n)\"); sb.append('n'); } }", "n_tokens": 104, "n_pass": [381, 28, 28]}
{"time": "2021-02-14 09:07:47.722471", "score": "0.8102", "loss": "0.3759", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 102, "n_pass": [383, 29, 29]}
{"time": "2021-02-14 09:07:50.379995", "score": "0.5972", "loss": "0.8951", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 100, "n_pass": [387, 30, 30]}
{"time": "2021-02-14 09:07:53.054815", "score": "0.5972", "loss": "0.8951", "code": " String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 99, "n_pass": [393, 31, 31]}
{"time": "2021-02-14 09:07:55.710064", "score": "0.5972", "loss": "0.8951", "code": "String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 98, "n_pass": [394, 32, 32]}
{"time": "2021-02-14 09:07:59.597823", "score": "0.5972", "loss": "0.8951", "code": "String toString(){ Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 97, "n_pass": [400, 33, 33]}
{"time": "2021-02-14 09:08:02.253681", "score": "0.5359", "loss": "1.0497", "code": "String toString(){ Iterator(); if (hasNext()) sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 95, "n_pass": [408, 34, 34]}
{"time": "2021-02-14 09:08:04.920857", "score": "0.589", "loss": "0.8772", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb('n'); } }", "n_tokens": 93, "n_pass": [409, 35, 35]}
{"time": "2021-02-14 09:08:08.424489", "score": "0.6197", "loss": "0.8581", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\"); sb('n'); } }", "n_tokens": 91, "n_pass": [437, 36, 36]}
{"time": "2021-02-14 09:08:11.103878", "score": "0.6513", "loss": "0.7117", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n'); } }", "n_tokens": 89, "n_pass": [441, 37, 37]}
{"time": "2021-02-14 09:08:27.486463", "score": "0.6513", "loss": "0.7117", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');} }", "n_tokens": 88, "n_pass": [579, 38, 38]}
{"time": "2021-02-14 09:08:30.138223", "score": "0.6513", "loss": "0.7117", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 87, "n_pass": [580, 39, 39]}
{"time": "2021-02-14 09:08:34.042264", "score": "0.6513", "loss": "0.7117", "code": "String toString(){Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 86, "n_pass": [588, 40, 40]}
{"time": "2021-02-14 09:08:36.679379", "score": "0.6513", "loss": "0.7117", "code": "String toString(){Iterator();if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 85, "n_pass": [593, 41, 41]}
{"time": "2021-02-14 09:08:39.312898", "score": "0.6513", "loss": "0.7117", "code": "String toString(){Iterator();if(hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 84, "n_pass": [595, 42, 42]}
{"time": "2021-02-14 09:08:41.961629", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 83, "n_pass": [603, 43, 43]}
{"time": "2021-02-14 09:08:44.612284", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 82, "n_pass": [607, 44, 44]}
{"time": "2021-02-14 09:08:47.247761", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 81, "n_pass": [609, 45, 45]}
{"time": "2021-02-14 09:08:49.925389", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 80, "n_pass": [612, 46, 46]}
{"time": "2021-02-14 09:08:52.567381", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 79, "n_pass": [614, 47, 47]}
{"time": "2021-02-14 09:08:55.213697", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){ Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 78, "n_pass": [616, 48, 48]}
{"time": "2021-02-14 09:08:57.860743", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 77, "n_pass": [618, 49, 49]}
{"time": "2021-02-14 09:09:00.521769", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 76, "n_pass": [621, 50, 50]}
{"time": "2021-02-14 09:09:03.167128", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 75, "n_pass": [624, 51, 51]}
{"time": "2021-02-14 09:09:05.811183", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 74, "n_pass": [626, 52, 52]}
{"time": "2021-02-14 09:09:08.447248", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 73, "n_pass": [628, 53, 53]}
{"time": "2021-02-14 09:09:11.116171", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key= append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 72, "n_pass": [630, 54, 54]}
{"time": "2021-02-14 09:09:13.755852", "score": "0.6521", "loss": "0.7148", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 71, "n_pass": [632, 55, 55]}
{"time": "2021-02-14 09:09:19.065210", "score": "0.66", "loss": "0.674", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 70, "n_pass": [636, 57, 56]}
{"time": "2021-02-14 09:09:21.713249", "score": "0.66", "loss": "0.674", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 69, "n_pass": [640, 58, 57]}
{"time": "2021-02-14 09:09:24.361278", "score": "0.7861", "loss": "0.351", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 68, "n_pass": [641, 59, 58]}
{"time": "2021-02-14 09:09:27.015729", "score": "0.7861", "loss": "0.351", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");(value);if (!hasNext())(\")\");('n');}}", "n_tokens": 67, "n_pass": [646, 60, 59]}
{"time": "2021-02-14 09:09:29.656893", "score": "0.7861", "loss": "0.351", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");(value);if(!hasNext())(\")\");('n');}}", "n_tokens": 66, "n_pass": [648, 61, 60]}
{"time": "2021-02-14 09:09:32.293205", "score": "0.8671", "loss": "0.1894", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");(value);if(hasNext())(\")\");('n');}}", "n_tokens": 65, "n_pass": [650, 62, 61]}
{"time": "2021-02-14 09:09:34.941311", "score": "0.8569", "loss": "0.2042", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\"\");(value);if(hasNext())(\"\");('n');}}", "n_tokens": 64, "n_pass": [657, 63, 62]}
{"time": "2021-02-14 09:09:45.315840", "score": "0.6018", "loss": "0.5813", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");(value);if(hasNext())(\"\");('n');}}", "n_tokens": 63, "n_pass": [704, 66, 63]}
{"time": "2021-02-14 09:09:50.402917", "score": "0.3924", "loss": "0.9763", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>ekey=(\"\");(value);if(hasNext())(\"\");('n');}}", "n_tokens": 62, "n_pass": [765, 67, 64]}

Minimal simplified code:
String toString(){Iterator();if(hasNext())("");for(;;){Entry<Binding>ekey=("");(value);if(hasNext())("");('n');}}

