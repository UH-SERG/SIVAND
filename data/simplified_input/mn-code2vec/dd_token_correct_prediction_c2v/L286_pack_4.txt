
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/dependencyLibs/Mavlink/src/com/MAVLink/common/msg_file_transfer_protocol_pack.java
method_name = pack
method_body = public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }
predict, score, loss = pack, 0.9969658255577087, 0.007737309206277132

Trace of simplified code(s):
{"time": "2021-02-14 14:02:22.607388", "score": "0.9952", "loss": "0.0134", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 154, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 14:02:25.301426", "score": "0.9854", "loss": "0.0401", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 135, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 14:02:27.991727", "score": "0.9913", "loss": "0.0289", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 125, "n_pass": [44, 3, 3]}
{"time": "2021-02-14 14:02:30.692667", "score": "0.992", "loss": "0.0195", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 115, "n_pass": [45, 4, 4]}
{"time": "2021-02-14 14:02:33.359348", "score": "0.9999", "loss": "0.0002", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 105, "n_pass": [46, 5, 5]}
{"time": "2021-02-14 14:02:36.023866", "score": "1.0", "loss": "0.0001", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 95, "n_pass": [51, 6, 6]}
{"time": "2021-02-14 14:02:38.684750", "score": "0.9996", "loss": "0.0012", "code": "public MAVLinkPacket pack() {MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255;_MSG_ID_FILE_.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 86, "n_pass": [54, 7, 7]}
{"time": "2021-02-14 14:02:41.340170", "score": "0.952", "loss": "0.1188", "code": "public MAVLinkPacket pack() { packet.sysid = 255;_MSG_ID_FILE_.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 77, "n_pass": [55, 8, 8]}
{"time": "2021-02-14 14:02:44.002833", "score": "0.6211", "loss": "0.7564", "code": "public MAVLinkPacket pack() {5;_MSG_ID_FILE_.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 68, "n_pass": [56, 9, 9]}
{"time": "2021-02-14 14:02:46.681492", "score": "0.6059", "loss": "0.8185", "code": "public MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 63, "n_pass": [79, 10, 10]}
{"time": "2021-02-14 14:02:49.330939", "score": "0.5539", "loss": "0.9353", "code": "public MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int0; i < payload.length; i++) { packet; } return packet; }", "n_tokens": 58, "n_pass": [83, 11, 11]}
{"time": "2021-02-14 14:02:51.976156", "score": "0.3982", "loss": "1.2431", "code": "public MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int0; i ; i++) { packet; } return packet; }", "n_tokens": 53, "n_pass": [85, 12, 12]}
{"time": "2021-02-14 14:02:55.796541", "score": "0.3949", "loss": "1.2515", "code": "public MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int0; i ; ) { packet; } return packet; }", "n_tokens": 50, "n_pass": [121, 13, 13]}
{"time": "2021-02-14 14:02:58.453615", "score": "0.3884", "loss": "1.2674", "code": "public MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int0; i ; ) { } return packet; }", "n_tokens": 47, "n_pass": [123, 14, 14]}
{"time": "2021-02-14 14:03:03.734594", "score": "0.3884", "loss": "1.2674", "code": "MAVLinkPacket pack() {5;_MSG.payload.putUnsignedByte(target_component); for (int0; i ; ) { } return packet; }", "n_tokens": 45, "n_pass": [127, 16, 15]}
{"time": "2021-02-14 14:03:06.763747", "score": "0.3879", "loss": "1.2706", "code": "MAVLinkPacket pack() {5;_payload.putUnsignedByte(target_component); for (int0; i ; ) { } return packet; }", "n_tokens": 43, "n_pass": [133, 17, 16]}
{"time": "2021-02-14 14:03:12.034065", "score": "0.5912", "loss": "0.7761", "code": "MAVLinkPacket pack() {5;_payload.putUnsignedByte(component); for (int0; i ; ) { } return packet; }", "n_tokens": 41, "n_pass": [136, 19, 17]}
{"time": "2021-02-14 14:03:14.683546", "score": "0.4621", "loss": "1.0233", "code": "MAVLinkPacket pack() {5;_payload.putUnsignedByte(component); for (int0; i ; ) { } ; }", "n_tokens": 38, "n_pass": [145, 20, 18]}
{"time": "2021-02-14 14:03:24.236395", "score": "0.4621", "loss": "1.0233", "code": "MAVLinkPacket pack() {5;_payload.putUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 36, "n_pass": [194, 22, 19]}
{"time": "2021-02-14 14:03:28.050266", "score": "0.4621", "loss": "1.0233", "code": "MAVLinkPacket pack(){5;_payload.putUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 35, "n_pass": [201, 23, 20]}
{"time": "2021-02-14 14:03:30.702680", "score": "0.4651", "loss": "1.0136", "code": "MAVLinkPacket pack(){;_payload.putUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 34, "n_pass": [203, 24, 21]}
{"time": "2021-02-14 14:03:33.346223", "score": "0.4651", "loss": "1.0136", "code": "MAVLinkPacket pack(){_payload.putUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 33, "n_pass": [204, 25, 22]}
{"time": "2021-02-14 14:03:35.989928", "score": "0.4651", "loss": "1.0136", "code": "MAVLinkPacket pack(){payload.putUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 32, "n_pass": [205, 26, 23]}
{"time": "2021-02-14 14:03:38.608482", "score": "0.9438", "loss": "0.0646", "code": "MAVLinkPacket pack(){payloadputUnsignedByte(component); for (int0; i ; ) { } }", "n_tokens": 31, "n_pass": [207, 27, 24]}
{"time": "2021-02-14 14:03:43.826389", "score": "0.9451", "loss": "0.0642", "code": "MAVLinkPacket pack(){payloadputUnsignedByte(); for (int0; i ; ) { } }", "n_tokens": 30, "n_pass": [210, 29, 25]}
{"time": "2021-02-14 14:03:46.460365", "score": "0.9451", "loss": "0.0642", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for (int0; i ; ) { } }", "n_tokens": 29, "n_pass": [213, 30, 26]}
{"time": "2021-02-14 14:03:49.069111", "score": "0.9451", "loss": "0.0642", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(int0; i ; ) { } }", "n_tokens": 28, "n_pass": [215, 31, 27]}
{"time": "2021-02-14 14:03:51.714444", "score": "0.9437", "loss": "0.0661", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(0; i ; ) { } }", "n_tokens": 27, "n_pass": [217, 32, 28]}
{"time": "2021-02-14 14:03:54.353851", "score": "0.9431", "loss": "0.0663", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(; i ; ) { } }", "n_tokens": 26, "n_pass": [218, 33, 29]}
{"time": "2021-02-14 14:03:56.966388", "score": "0.9431", "loss": "0.0663", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(;i ; ) { } }", "n_tokens": 25, "n_pass": [220, 34, 30]}
{"time": "2021-02-14 14:03:59.587752", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(; ; ) { } }", "n_tokens": 24, "n_pass": [221, 35, 31]}
{"time": "2021-02-14 14:04:10.910098", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(; ; ){ } }", "n_tokens": 23, "n_pass": [252, 38, 32]}
{"time": "2021-02-14 14:04:13.521332", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(; ; ){} }", "n_tokens": 22, "n_pass": [253, 39, 33]}
{"time": "2021-02-14 14:04:16.162114", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(; ; ){}}", "n_tokens": 21, "n_pass": [255, 40, 34]}
{"time": "2021-02-14 14:04:25.232058", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(;; ){}}", "n_tokens": 20, "n_pass": [271, 43, 35]}
{"time": "2021-02-14 14:04:27.859304", "score": "0.9436", "loss": "0.0655", "code": "MAVLinkPacket pack(){payloadputUnsignedByte();for(;;){}}", "n_tokens": 19, "n_pass": [273, 44, 36]}

Minimal simplified code:
MAVLinkPacket pack(){payloadputUnsignedByte();for(;;){}}

