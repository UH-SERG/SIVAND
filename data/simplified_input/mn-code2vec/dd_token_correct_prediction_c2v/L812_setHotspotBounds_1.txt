
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ozodrukh__RippleDrawable/app/src/main/java/codetail/graphics/drawables/LayerDrawable_setHotspotBounds.java
method_name = setHotspotBounds
method_body = @Override public void setHotspotBounds(int left, int top, int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }
predict, score, loss = setHotspotBounds, 0.9995404481887817, 0.0004667146422434598

Trace of simplified code(s):
{"time": "2021-02-16 02:52:07.452162", "score": "0.9948", "loss": "0.0052", "code": "@Override public void setHotspotBounds(int left, int top, int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 172, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 02:52:10.131677", "score": "0.9978", "loss": "0.0022", "code": "@Override public void setHotspotBounds(int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 162, "n_pass": [45, 2, 2]}
{"time": "2021-02-16 02:52:12.820692", "score": "0.9954", "loss": "0.0046", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 152, "n_pass": [47, 3, 3]}
{"time": "2021-02-16 02:52:15.492322", "score": "0.9857", "loss": "0.0144", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawablebottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 141, "n_pass": [53, 4, 4]}
{"time": "2021-02-16 02:52:18.158191", "score": "0.9758", "loss": "0.0245", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 136, "n_pass": [93, 5, 5]}
{"time": "2021-02-16 02:52:20.767699", "score": "0.9952", "loss": "0.0049", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 130, "n_pass": [97, 6, 6]}
{"time": "2021-02-16 02:52:23.583807", "score": "0.9401", "loss": "0.0622", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 124, "n_pass": [99, 7, 7]}
{"time": "2021-02-16 02:52:26.191417", "score": "0.9936", "loss": "0.0065", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 118, "n_pass": [103, 8, 8]}
{"time": "2021-02-16 02:52:28.831781", "score": "0.9979", "loss": "0.0021", "code": "void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 113, "n_pass": [105, 9, 9]}
{"time": "2021-02-16 02:52:31.914237", "score": "0.8494", "loss": "0.1633", "code": "void setHotspotBounds(int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 108, "n_pass": [107, 10, 10]}
{"time": "2021-02-16 02:52:34.778120", "score": "0.8934", "loss": "0.1127", "code": "void setHotspotBounds(int bottom) { final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 103, "n_pass": [109, 11, 11]}
{"time": "2021-02-16 02:52:37.361785", "score": "0.8447", "loss": "0.1688", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 98, "n_pass": [110, 12, 12]}
{"time": "2021-02-16 02:52:40.107869", "score": "0.8501", "loss": "0.1624", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 93, "n_pass": [115, 13, 13]}
{"time": "2021-02-16 02:52:42.894590", "score": "0.8563", "loss": "0.1552", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 90, "n_pass": [169, 14, 14]}
{"time": "2021-02-16 02:52:45.622446", "score": "0.9246", "loss": "0.0784", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 87, "n_pass": [171, 15, 15]}
{"time": "2021-02-16 02:52:48.225409", "score": "0.9339", "loss": "0.0684", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 84, "n_pass": [180, 16, 16]}
{"time": "2021-02-16 02:52:50.916487", "score": "0.9957", "loss": "0.0044", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left, top); } }", "n_tokens": 81, "n_pass": [184, 17, 17]}
{"time": "2021-02-16 02:52:53.577662", "score": "0.9957", "loss": "0.0044", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 78, "n_pass": [186, 18, 18]}
{"time": "2021-02-16 02:52:56.519099", "score": "0.9991", "loss": "0.0009", "code": "void setHotspotBounds(int bottom) {N = mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 76, "n_pass": [196, 19, 19]}
{"time": "2021-02-16 02:52:59.564998", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {N mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 74, "n_pass": [224, 20, 20]}
{"time": "2021-02-16 02:53:02.670361", "score": "0.9998", "loss": "0.0002", "code": "void setHotspotBounds(int bottom) {mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 72, "n_pass": [251, 21, 21]}
{"time": "2021-02-16 02:53:05.356114", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) { for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 70, "n_pass": [252, 22, 22]}
{"time": "2021-02-16 02:53:12.856897", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 69, "n_pass": [328, 23, 23]}
{"time": "2021-02-16 02:53:15.643805", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 68, "n_pass": [330, 24, 24]}
{"time": "2021-02-16 02:53:18.248140", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for( i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 67, "n_pass": [332, 25, 25]}
{"time": "2021-02-16 02:53:20.859269", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 66, "n_pass": [333, 26, 26]}
{"time": "2021-02-16 02:53:23.434005", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i= 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 65, "n_pass": [335, 27, 27]}
{"time": "2021-02-16 02:53:25.928132", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i=0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 64, "n_pass": [337, 28, 28]}
{"time": "2021-02-16 02:53:28.452180", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i=0;; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 63, "n_pass": [340, 29, 29]}
{"time": "2021-02-16 02:53:30.964476", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i=0;;) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 62, "n_pass": [342, 30, 30]}
{"time": "2021-02-16 02:53:33.456366", "score": "0.9999", "loss": "0.0001", "code": "void setHotspotBounds(int bottom) {for(i=0;;){setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 61, "n_pass": [344, 31, 31]}
{"time": "2021-02-16 02:53:35.977068", "score": "0.997", "loss": "0.003", "code": "void setHotspotBounds(int bottom) {for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 60, "n_pass": [346, 32, 32]}
{"time": "2021-02-16 02:53:38.475626", "score": "0.997", "loss": "0.003", "code": "void setHotspotBounds(int bottom) {for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 58, "n_pass": [362, 33, 33]}
{"time": "2021-02-16 02:53:41.695543", "score": "0.997", "loss": "0.003", "code": "void setHotspotBounds(int bottom){for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 57, "n_pass": [376, 34, 34]}
{"time": "2021-02-16 02:53:44.187625", "score": "0.9951", "loss": "0.0049", "code": "void setHotspotBounds(int bottom){for(i0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 56, "n_pass": [381, 35, 35]}
{"time": "2021-02-16 02:53:46.693522", "score": "0.9951", "loss": "0.0049", "code": "void setHotspotBounds(int bottom){for(i;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 55, "n_pass": [382, 36, 36]}
{"time": "2021-02-16 02:53:49.918357", "score": "0.9977", "loss": "0.0024", "code": "void setHotspotBounds(int bottom){for(;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 54, "n_pass": [418, 37, 37]}
{"time": "2021-02-16 02:53:57.673463", "score": "0.9995", "loss": "0.0005", "code": "void setHotspotBounds(int bottom){for(;;){(bottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 53, "n_pass": [492, 38, 38]}
{"time": "2021-02-16 02:54:00.152397", "score": "0.9995", "loss": "0.0005", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);} if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 52, "n_pass": [495, 39, 39]}
{"time": "2021-02-16 02:54:02.638384", "score": "0.9995", "loss": "0.0005", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 51, "n_pass": [497, 40, 40]}
{"time": "2021-02-16 02:54:05.122815", "score": "0.9995", "loss": "0.0005", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 50, "n_pass": [499, 41, 41]}
{"time": "2021-02-16 02:54:07.631032", "score": "0.9995", "loss": "0.0005", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds== null) { Rect(bottom); } {set(left); } }", "n_tokens": 49, "n_pass": [502, 42, 42]}
{"time": "2021-02-16 02:54:10.110950", "score": "0.7304", "loss": "0.3144", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds= null) { Rect(bottom); } {set(left); } }", "n_tokens": 48, "n_pass": [503, 43, 43]}
{"time": "2021-02-16 02:54:12.582716", "score": "0.7304", "loss": "0.3144", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null) { Rect(bottom); } {set(left); } }", "n_tokens": 47, "n_pass": [505, 44, 44]}
{"time": "2021-02-16 02:54:15.068992", "score": "0.7304", "loss": "0.3144", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){ Rect(bottom); } {set(left); } }", "n_tokens": 46, "n_pass": [508, 45, 45]}
{"time": "2021-02-16 02:54:17.553836", "score": "0.7304", "loss": "0.3144", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){Rect(bottom); } {set(left); } }", "n_tokens": 45, "n_pass": [510, 46, 46]}
{"time": "2021-02-16 02:54:20.038084", "score": "0.6795", "loss": "0.3865", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom); } {set(left); } }", "n_tokens": 44, "n_pass": [511, 47, 47]}
{"time": "2021-02-16 02:54:22.539566", "score": "0.6795", "loss": "0.3865", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);} {set(left); } }", "n_tokens": 43, "n_pass": [516, 48, 48]}
{"time": "2021-02-16 02:54:25.002755", "score": "0.6795", "loss": "0.3865", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);}{set(left); } }", "n_tokens": 42, "n_pass": [518, 49, 49]}
{"time": "2021-02-16 02:54:27.477907", "score": "0.6545", "loss": "0.424", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);}{(left); } }", "n_tokens": 41, "n_pass": [520, 50, 50]}
{"time": "2021-02-16 02:54:29.968116", "score": "0.6545", "loss": "0.424", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);}{(left);} }", "n_tokens": 40, "n_pass": [525, 51, 51]}
{"time": "2021-02-16 02:54:32.474599", "score": "0.6545", "loss": "0.424", "code": "void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);}{(left);}}", "n_tokens": 39, "n_pass": [527, 52, 52]}

Minimal simplified code:
void setHotspotBounds(int bottom){for(;;){(bottom);}if(mHotspotBounds=null){(bottom);}{(left);}}

