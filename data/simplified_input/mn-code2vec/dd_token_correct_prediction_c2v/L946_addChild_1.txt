
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/collections/Trie_addChild.java
method_name = addChild
method_body = void addChild(Node<T> node) { if (children == null) { children = new IntMap<>(4); } children.put(node.getChar(), node); }
predict, score, loss = addChild, 0.8608868718147278, 0.19180774688720703

Trace of simplified code(s):
{"time": "2021-02-16 11:55:24.045492", "score": "0.8609", "loss": "0.1918", "code": "void addChild(Node<T> node) { if (children == null) { children = new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 59, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 11:55:26.963287", "score": "0.8233", "loss": "0.2555", "code": "void addChild(Node<T> node) { if (children ) { children = new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 55, "n_pass": [50, 2, 2]}
{"time": "2021-02-16 11:55:29.489402", "score": "0.844", "loss": "0.3158", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 51, "n_pass": [52, 3, 3]}
{"time": "2021-02-16 11:55:35.254546", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(), node); }", "n_tokens": 49, "n_pass": [103, 5, 4]}
{"time": "2021-02-16 11:55:46.020828", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node); }", "n_tokens": 48, "n_pass": [178, 7, 5]}
{"time": "2021-02-16 11:55:48.548943", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 47, "n_pass": [181, 8, 6]}
{"time": "2021-02-16 11:55:51.841744", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 46, "n_pass": [191, 9, 7]}
{"time": "2021-02-16 11:55:54.408097", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){ if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 45, "n_pass": [194, 10, 8]}
{"time": "2021-02-16 11:55:56.940149", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 44, "n_pass": [196, 11, 9]}
{"time": "2021-02-16 11:55:59.470362", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){if(children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 43, "n_pass": [198, 12, 10]}
{"time": "2021-02-16 11:56:02.005407", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){if(children) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 42, "n_pass": [201, 13, 11]}
{"time": "2021-02-16 11:56:04.533864", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){if(children){ new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 41, "n_pass": [203, 14, 12]}
{"time": "2021-02-16 11:56:07.063757", "score": "0.6602", "loss": "0.8358", "code": "void addChild(Node<T>node){if(children){new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 40, "n_pass": [205, 15, 13]}
{"time": "2021-02-16 11:56:09.600583", "score": "0.6695", "loss": "0.8024", "code": "void addChild(Node<T>node){if(children){new IntMap<>(); } children.put(getChar(),node);}", "n_tokens": 39, "n_pass": [212, 16, 14]}
{"time": "2021-02-16 11:56:12.153337", "score": "0.6695", "loss": "0.8024", "code": "void addChild(Node<T>node){if(children){new IntMap<>();} children.put(getChar(),node);}", "n_tokens": 38, "n_pass": [215, 17, 15]}
{"time": "2021-02-16 11:56:14.706508", "score": "0.6695", "loss": "0.8024", "code": "void addChild(Node<T>node){if(children){new IntMap<>();}children.put(getChar(),node);}", "n_tokens": 37, "n_pass": [217, 18, 16]}

Minimal simplified code:
void addChild(Node<T>node){if(children){new IntMap<>();}children.put(getChar(),node);}

