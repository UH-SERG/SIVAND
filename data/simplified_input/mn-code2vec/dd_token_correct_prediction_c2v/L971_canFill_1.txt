
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorCoolantPort_canFill.java
method_name = canFill
method_body = @Override public boolean canFill(ForgeDirection from, Fluid fluid) { if (!isConnected() || from != getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }
predict, score, loss = canFill, 0.7588969469070435, 0.28515154123306274

Trace of simplified code(s):
{"time": "2021-02-16 12:33:25.488743", "score": "0.7589", "loss": "0.2852", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if (!isConnected() || from != getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 98, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 12:33:28.043574", "score": "0.8373", "loss": "0.1809", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 86, "n_pass": [22, 2, 2]}
{"time": "2021-02-16 12:33:30.603332", "score": "0.8413", "loss": "0.1763", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 74, "n_pass": [23, 3, 3]}
{"time": "2021-02-16 12:33:33.172148", "score": "0.8404", "loss": "0.1788", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 68, "n_pass": [43, 4, 4]}
{"time": "2021-02-16 12:33:35.701885", "score": "0.7164", "loss": "0.3352", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } getReactorController().getCoolantContainercc.canFill(getConnectedTank(), fluid); }", "n_tokens": 62, "n_pass": [45, 5, 5]}
{"time": "2021-02-16 12:33:38.621462", "score": "0.7117", "loss": "0.3414", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 56, "n_pass": [55, 6, 6]}
{"time": "2021-02-16 12:33:41.568386", "score": "0.7896", "loss": "0.2374", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 53, "n_pass": [87, 7, 7]}
{"time": "2021-02-16 12:33:44.110536", "score": "0.7982", "loss": "0.2263", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 50, "n_pass": [98, 8, 8]}
{"time": "2021-02-16 12:33:47.054501", "score": "0.807", "loss": "0.2151", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 47, "n_pass": [114, 9, 9]}
{"time": "2021-02-16 12:33:51.711244", "score": "0.807", "loss": "0.2151", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 45, "n_pass": [161, 10, 10]}
{"time": "2021-02-16 12:33:54.240078", "score": "0.8181", "loss": "0.202", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 43, "n_pass": [163, 11, 11]}
{"time": "2021-02-16 12:33:56.793914", "score": "0.8181", "loss": "0.202", "code": " boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 42, "n_pass": [170, 12, 12]}
{"time": "2021-02-16 12:33:59.310632", "score": "0.8181", "loss": "0.202", "code": "boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 41, "n_pass": [171, 13, 13]}
{"time": "2021-02-16 12:34:02.591105", "score": "0.8181", "loss": "0.202", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 40, "n_pass": [180, 14, 14]}
{"time": "2021-02-16 12:34:05.140892", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 38, "n_pass": [188, 15, 15]}
{"time": "2021-02-16 12:34:11.939986", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) { }canFill(getConnectedTank(), fluid); }", "n_tokens": 37, "n_pass": [241, 16, 16]}
{"time": "2021-02-16 12:34:14.469834", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(), fluid); }", "n_tokens": 36, "n_pass": [242, 17, 17]}
{"time": "2021-02-16 12:34:17.017471", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid); }", "n_tokens": 35, "n_pass": [250, 18, 18]}
{"time": "2021-02-16 12:34:19.548119", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 34, "n_pass": [254, 19, 19]}
{"time": "2021-02-16 12:34:22.834905", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid){ if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 33, "n_pass": [268, 20, 20]}
{"time": "2021-02-16 12:34:25.364645", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 32, "n_pass": [270, 21, 21]}
{"time": "2021-02-16 12:34:27.900092", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 31, "n_pass": [272, 22, 22]}
{"time": "2021-02-16 12:34:30.428355", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 30, "n_pass": [274, 23, 23]}
{"time": "2021-02-16 12:34:32.975093", "score": "0.841", "loss": "0.1743", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir){}canFill(getConnectedTank(),fluid);}", "n_tokens": 29, "n_pass": [277, 24, 24]}

Minimal simplified code:
boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir){}canFill(getConnectedTank(),fluid);}

