
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-sts/openam-rest-sts/src/main/java/org/forgerock/openam/sts/rest/token/validator/RestTokenTransformValidatorResult_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } RestTokenTransformValidatorResult that = (RestTokenTransformValidatorResult) o; return Objects.equal(principal, that.principal) && amSessionId.equals(that.amSessionId) && additionalStateEqual(that); }
predict, score, loss = equals, 0.9999539852142334, 5.280832192511298e-05

Trace of simplified code(s):
{"time": "2021-02-15 02:29:26.794732", "score": "1.0", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } RestTokenTransformValidatorResult that = (RestTokenTransformValidatorResult) o; return Objects.equal(principal, that.principal) && amSessionId.equals(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 121, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 02:29:29.509144", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } RestTokenTransformValidatorResult that = (RestTokenTransformValidatorResult) o; return Objects.equal(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 106, "n_pass": [26, 2, 2]}
{"time": "2021-02-15 02:29:32.583736", "score": "0.9999", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClassgetClass()) { return false; } RestTokenTransformValidatorResult that = (RestTokenTransformValidatorResult) o; return Objects.equal(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 98, "n_pass": [56, 3, 3]}
{"time": "2021-02-15 02:29:35.239018", "score": "0.9997", "loss": "0.0003", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClassgetClass()) { return false; } RestTokenTransformValidatorResult o; return Objects.equal(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 90, "n_pass": [59, 4, 4]}
{"time": "2021-02-15 02:29:38.784423", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return Objects.equal(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 82, "n_pass": [69, 5, 5]}
{"time": "2021-02-15 02:29:42.272397", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 78, "n_pass": [108, 6, 6]}
{"time": "2021-02-15 02:29:44.964337", "score": "0.9997", "loss": "0.0004", "code": "public boolean equals(Object o) { if (this == o) { return true; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 75, "n_pass": [113, 7, 7]}
{"time": "2021-02-15 02:29:48.017954", "score": "0.9337", "loss": "0.0967", "code": "public boolean equals() { if (this == o) { return true; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 72, "n_pass": [116, 8, 8]}
{"time": "2021-02-15 02:29:53.752648", "score": "0.9174", "loss": "0.1241", "code": "public boolean equals() { if (this == o) { true; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 70, "n_pass": [183, 9, 9]}
{"time": "2021-02-15 02:29:56.409615", "score": "0.9249", "loss": "0.1124", "code": "public boolean equals() { if (this == o) {; } if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 68, "n_pass": [184, 10, 10]}
{"time": "2021-02-15 02:29:59.108220", "score": "0.9249", "loss": "0.1124", "code": "public boolean equals() { if (this == o) {} if (o =getClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 66, "n_pass": [185, 11, 11]}
{"time": "2021-02-15 02:30:01.964104", "score": "0.9185", "loss": "0.1217", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; } RestTokenTransformValidatorResult o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 64, "n_pass": [189, 12, 12]}
{"time": "2021-02-15 02:30:10.062270", "score": "0.6671", "loss": "0.5455", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; } o; return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 62, "n_pass": [197, 15, 13]}
{"time": "2021-02-15 02:30:12.739482", "score": "0.6923", "loss": "0.5083", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that.amSessionId) && additionalStateEqual(that); }", "n_tokens": 60, "n_pass": [198, 16, 14]}
{"time": "2021-02-15 02:30:15.763510", "score": "0.6928", "loss": "0.5016", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that) && additionalStateEqual(that); }", "n_tokens": 58, "n_pass": [201, 17, 15]}
{"time": "2021-02-15 02:30:18.411550", "score": "0.9026", "loss": "0.1964", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that)  additionalStateEqual(that); }", "n_tokens": 56, "n_pass": [203, 18, 16]}
{"time": "2021-02-15 02:30:21.104044", "score": "0.8381", "loss": "0.2452", "code": "public boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 54, "n_pass": [204, 19, 17]}
{"time": "2021-02-15 02:30:23.733129", "score": "0.8381", "loss": "0.2452", "code": " boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 53, "n_pass": [208, 20, 18]}
{"time": "2021-02-15 02:30:26.385036", "score": "0.8381", "loss": "0.2452", "code": "boolean equals() { if (this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 52, "n_pass": [209, 21, 19]}
{"time": "2021-02-15 02:30:43.210579", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){ if (this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 51, "n_pass": [290, 24, 20]}
{"time": "2021-02-15 02:30:45.851209", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if (this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 50, "n_pass": [292, 25, 21]}
{"time": "2021-02-15 02:30:48.490159", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this == o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 49, "n_pass": [294, 26, 22]}
{"time": "2021-02-15 02:30:51.120372", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this== o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 48, "n_pass": [297, 27, 23]}
{"time": "2021-02-15 02:30:54.571845", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this==o) {} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 47, "n_pass": [300, 28, 24]}
{"time": "2021-02-15 02:30:57.223548", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this==o){} if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 46, "n_pass": [303, 29, 25]}
{"time": "2021-02-15 02:30:59.859542", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this==o){}if (ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 45, "n_pass": [306, 30, 26]}
{"time": "2021-02-15 02:31:02.507552", "score": "0.8381", "loss": "0.2452", "code": "boolean equals(){if(this==o){}if(ogetClass()) { return false; }  return(that) (that); }", "n_tokens": 44, "n_pass": [308, 31, 27]}
{"time": "2021-02-15 02:31:05.159127", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()) { return false; }  return(that) (that); }", "n_tokens": 43, "n_pass": [310, 32, 28]}
{"time": "2021-02-15 02:31:07.818485", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){ return false; }  return(that) (that); }", "n_tokens": 42, "n_pass": [315, 33, 29]}
{"time": "2021-02-15 02:31:10.469942", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false; }  return(that) (that); }", "n_tokens": 41, "n_pass": [317, 34, 30]}
{"time": "2021-02-15 02:31:21.119198", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false;}  return(that) (that); }", "n_tokens": 40, "n_pass": [322, 38, 31]}
{"time": "2021-02-15 02:31:23.748981", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false;} return(that) (that); }", "n_tokens": 39, "n_pass": [324, 39, 32]}
{"time": "2021-02-15 02:31:26.403676", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false;}return(that) (that); }", "n_tokens": 38, "n_pass": [325, 40, 33]}
{"time": "2021-02-15 02:31:29.466670", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false;}return(that)(that); }", "n_tokens": 37, "n_pass": [330, 41, 34]}
{"time": "2021-02-15 02:31:32.101984", "score": "0.803", "loss": "0.3193", "code": "boolean equals(){if(this==o){}if(getClass()){return false;}return(that)(that);}", "n_tokens": 36, "n_pass": [335, 42, 35]}

Minimal simplified code:
boolean equals(){if(this==o){}if(getClass()){return false;}return(that)(that);}

