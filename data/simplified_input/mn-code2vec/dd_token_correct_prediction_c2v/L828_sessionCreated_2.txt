
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/spi/src/main/java/org/kaazing/gateway/transport/LoggingFilter_sessionCreated.java
method_name = sessionCreated
method_body = @Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session); IoFilterChain filterChain = session.getFilterChain(); Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }
predict, score, loss = sessionCreated, 0.9991161227226257, 0.001100649475120008

Trace of simplified code(s):
{"time": "2021-02-16 03:22:42.943754", "score": "0.9992", "loss": "0.001", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session); IoFilterChain filterChain = session.getFilterChain(); Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 111, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 03:22:46.151267", "score": "0.9992", "loss": "0.0009", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 97, "n_pass": [23, 2, 2]}
{"time": "2021-02-16 03:22:48.664066", "score": "0.9996", "loss": "0.0004", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 83, "n_pass": [24, 3, 3]}
{"time": "2021-02-16 03:22:51.204692", "score": "0.9999", "loss": "0.0001", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 76, "n_pass": [45, 4, 4]}
{"time": "2021-02-16 03:22:53.714559", "score": "0.9999", "loss": "0.0001", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 69, "n_pass": [46, 5, 5]}
{"time": "2021-02-16 03:22:56.579337", "score": "1.0", "loss": "0.0", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 66, "n_pass": [79, 6, 6]}
{"time": "2021-02-16 03:22:59.111943", "score": "1.0", "loss": "0.0", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 63, "n_pass": [88, 7, 7]}
{"time": "2021-02-16 03:23:01.618108", "score": "0.9997", "loss": "0.0004", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) { entry.addLast(entry.getName()); } }", "n_tokens": 59, "n_pass": [92, 8, 8]}
{"time": "2021-02-16 03:23:04.122039", "score": "0.9998", "loss": "0.0002", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry.getName()); } }", "n_tokens": 55, "n_pass": [94, 9, 9]}
{"time": "2021-02-16 03:23:07.944806", "score": "0.9998", "loss": "0.0002", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry()); } }", "n_tokens": 53, "n_pass": [144, 10, 10]}
{"time": "2021-02-16 03:23:10.463259", "score": "0.9998", "loss": "0.0002", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 51, "n_pass": [145, 11, 11]}
{"time": "2021-02-16 03:23:12.956375", "score": "0.9998", "loss": "0.0002", "code": " void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 50, "n_pass": [149, 12, 12]}
{"time": "2021-02-16 03:23:15.467292", "score": "0.9998", "loss": "0.0002", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 49, "n_pass": [150, 13, 13]}
{"time": "2021-02-16 03:23:18.675950", "score": "0.9998", "loss": "0.0002", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 47, "n_pass": [164, 14, 14]}
{"time": "2021-02-16 03:23:21.162082", "score": "0.9983", "loss": "0.0021", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated( session);if (entrynull) {(entry); } }", "n_tokens": 45, "n_pass": [168, 15, 15]}
{"time": "2021-02-16 03:23:23.645871", "score": "0.953", "loss": "0.0633", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if (entrynull) {(entry); } }", "n_tokens": 43, "n_pass": [169, 16, 16]}
{"time": "2021-02-16 03:23:30.823344", "score": "0.953", "loss": "0.0633", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(entrynull) {(entry); } }", "n_tokens": 42, "n_pass": [232, 17, 17]}
{"time": "2021-02-16 03:23:33.319616", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null) {(entry); } }", "n_tokens": 41, "n_pass": [234, 18, 18]}
{"time": "2021-02-16 03:23:35.839807", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry); } }", "n_tokens": 40, "n_pass": [237, 19, 19]}
{"time": "2021-02-16 03:23:38.365482", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);} }", "n_tokens": 39, "n_pass": [243, 20, 20]}
{"time": "2021-02-16 03:23:40.868665", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 38, "n_pass": [245, 21, 21]}
{"time": "2021-02-16 03:23:44.084178", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 37, "n_pass": [255, 22, 22]}
{"time": "2021-02-16 03:23:46.578625", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 36, "n_pass": [260, 23, 23]}
{"time": "2021-02-16 03:23:49.068768", "score": "0.9996", "loss": "0.0004", "code": "void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception{(session);sessionCreated();if(null){(entry);}}", "n_tokens": 35, "n_pass": [264, 24, 24]}

Minimal simplified code:
void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception{(session);sessionCreated();if(null){(entry);}}

