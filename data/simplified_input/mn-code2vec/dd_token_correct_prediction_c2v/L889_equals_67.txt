
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jopt-simple__jopt-simple/src/main/java/joptsimple/ArgumentAcceptingOptionSpec_equals.java
method_name = equals
method_body = @Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; return requiresArgument() == other.requiresArgument(); }
predict, score, loss = equals, 0.996985137462616, 0.0032939244993031025

Trace of simplified code(s):
{"time": "2021-02-16 05:02:14.775922", "score": "0.997", "loss": "0.0033", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; return requiresArgument() == other.requiresArgument(); }", "n_tokens": 69, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 05:02:17.712895", "score": "0.9959", "loss": "0.0049", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; other.requiresArgument(); }", "n_tokens": 60, "n_pass": [26, 2, 2]}
{"time": "2021-02-16 05:02:20.634202", "score": "0.998", "loss": "0.0023", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other =  other.requiresArgument(); }", "n_tokens": 51, "n_pass": [32, 3, 3]}
{"time": "2021-02-16 05:02:23.178984", "score": "0.9866", "loss": "0.0234", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false;  other.requiresArgument(); }", "n_tokens": 42, "n_pass": [38, 4, 4]}
{"time": "2021-02-16 05:02:25.729527", "score": "0.9542", "loss": "0.0687", "code": " boolean equals(Object that) { if (!super.equals(that)) return false;  other.requiresArgument(); }", "n_tokens": 38, "n_pass": [56, 5, 5]}
{"time": "2021-02-16 05:02:28.287201", "score": "0.8111", "loss": "0.3232", "code": " boolean equals(Object that) { if (!super.equals(that))   other.requiresArgument(); }", "n_tokens": 34, "n_pass": [62, 6, 6]}
{"time": "2021-02-16 05:02:31.162890", "score": "0.8111", "loss": "0.3232", "code": " boolean equals(Object that) { if (!super.equals(that)) other.requiresArgument(); }", "n_tokens": 32, "n_pass": [87, 7, 7]}
{"time": "2021-02-16 05:02:33.719021", "score": "0.9303", "loss": "0.0882", "code": " boolean equals(Object that) { if (!super.equals(that)) requiresArgument(); }", "n_tokens": 30, "n_pass": [88, 8, 8]}
{"time": "2021-02-16 05:02:36.242877", "score": "0.9604", "loss": "0.0484", "code": " boolean equals(Object that) { if (!super.equals(that)) ; }", "n_tokens": 27, "n_pass": [89, 9, 9]}
{"time": "2021-02-16 05:02:39.136069", "score": "0.963", "loss": "0.0465", "code": " boolean equals(Object that) { (!super.equals(that)) ; }", "n_tokens": 25, "n_pass": [97, 10, 10]}
{"time": "2021-02-16 05:02:41.675491", "score": "0.9843", "loss": "0.02", "code": " boolean equals(Object that) { (!equals(that)) ; }", "n_tokens": 23, "n_pass": [99, 11, 11]}
{"time": "2021-02-16 05:02:46.870615", "score": "0.9429", "loss": "0.075", "code": " boolean equals(Object that) { (!(that)) ; }", "n_tokens": 22, "n_pass": [133, 12, 12]}
{"time": "2021-02-16 05:02:49.411524", "score": "0.9429", "loss": "0.075", "code": " boolean equals(Object that) { (!(that)); }", "n_tokens": 21, "n_pass": [137, 13, 13]}
{"time": "2021-02-16 05:02:51.965616", "score": "0.9429", "loss": "0.075", "code": "boolean equals(Object that) { (!(that)); }", "n_tokens": 20, "n_pass": [140, 14, 14]}
{"time": "2021-02-16 05:02:55.202946", "score": "0.9429", "loss": "0.075", "code": "boolean equals(Object that){ (!(that)); }", "n_tokens": 19, "n_pass": [149, 15, 15]}
{"time": "2021-02-16 05:02:57.716913", "score": "0.9429", "loss": "0.075", "code": "boolean equals(Object that){(!(that)); }", "n_tokens": 18, "n_pass": [151, 16, 16]}
{"time": "2021-02-16 05:03:00.245589", "score": "0.9429", "loss": "0.075", "code": "boolean equals(Object that){((that)); }", "n_tokens": 17, "n_pass": [153, 17, 17]}
{"time": "2021-02-16 05:03:03.816211", "score": "0.9429", "loss": "0.075", "code": "boolean equals(Object that){((that));}", "n_tokens": 16, "n_pass": [172, 18, 18]}

Minimal simplified code:
boolean equals(Object that){((that));}

