
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/sun/identity/entitlement/util/RelaxedURL_toString.java
method_name = toString
method_body = @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(protocol); builder.append("://"); builder.append(hostname); builder.append(':'); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }
predict, score, loss = toString, 0.9890551567077637, 0.016796240583062172

Trace of simplified code(s):
{"time": "2021-02-15 02:15:42.845267", "score": "0.9923", "loss": "0.0108", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(protocol); builder.append(\"://\"); builder.append(hostname); builder.append(':'); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 123, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 02:15:45.633590", "score": "0.9847", "loss": "0.0249", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 92, "n_pass": [9, 2, 2]}
{"time": "2021-02-15 02:15:48.374198", "score": "0.9846", "loss": "0.0264", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 77, "n_pass": [18, 3, 3]}
{"time": "2021-02-15 02:15:51.465973", "score": "0.9845", "loss": "0.0276", "code": "@Override public String toString() { StringBuilderStringBuilder(); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 70, "n_pass": [42, 4, 4]}
{"time": "2021-02-15 02:15:54.154034", "score": "0.9788", "loss": "0.0386", "code": "@Override public String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 62, "n_pass": [43, 5, 5]}
{"time": "2021-02-15 02:15:57.239363", "score": "0.5821", "loss": "1.0143", "code": "public String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 59, "n_pass": [80, 6, 6]}
{"time": "2021-02-15 02:16:01.116701", "score": "0.5821", "loss": "1.0143", "code": " String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 58, "n_pass": [126, 7, 7]}
{"time": "2021-02-15 02:16:04.200035", "score": "0.4159", "loss": "1.3875", "code": " String toString() {(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 56, "n_pass": [130, 8, 8]}
{"time": "2021-02-15 02:16:06.883170", "score": "0.5194", "loss": "0.9291", "code": " String toString() {(path); if (!query()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 54, "n_pass": [136, 9, 9]}
{"time": "2021-02-15 02:16:09.530522", "score": "0.5124", "loss": "0.9063", "code": " String toString() {(path); if (!query) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 52, "n_pass": [137, 10, 10]}
{"time": "2021-02-15 02:16:14.764248", "score": "0.8137", "loss": "0.3709", "code": " String toString() {(path); if (!query) { builder.append('?'); append(query); } return builder.toString(); }", "n_tokens": 50, "n_pass": [145, 12, 11]}
{"time": "2021-02-15 02:16:17.393219", "score": "0.593", "loss": "0.8441", "code": " String toString() {(path); if (!query) { builder.append('?'); append(query); } builder.toString(); }", "n_tokens": 48, "n_pass": [150, 13, 12]}
{"time": "2021-02-15 02:16:20.007468", "score": "0.5579", "loss": "0.9937", "code": " String toString() {(path); if (!query) { builder.append('?'); append(query); } toString(); }", "n_tokens": 46, "n_pass": [151, 14, 13]}
{"time": "2021-02-15 02:16:23.423367", "score": "0.6675", "loss": "0.6554", "code": " String toString() {(path); if (!query) { append('?'); append(query); } toString(); }", "n_tokens": 44, "n_pass": [166, 15, 14]}
{"time": "2021-02-15 02:16:35.444196", "score": "0.6675", "loss": "0.6554", "code": " String toString() {(path); if (!query) { append('?');append(query); } toString(); }", "n_tokens": 43, "n_pass": [240, 17, 15]}
{"time": "2021-02-15 02:16:38.100678", "score": "0.7937", "loss": "0.4502", "code": " String toString() {(path); if (!query) { append('?');(query); } toString(); }", "n_tokens": 42, "n_pass": [241, 18, 16]}
{"time": "2021-02-15 02:16:40.725948", "score": "0.7937", "loss": "0.4502", "code": " String toString() {(path); if (!query) { append('?');(query);} toString(); }", "n_tokens": 41, "n_pass": [246, 19, 17]}
{"time": "2021-02-15 02:16:43.381621", "score": "0.7937", "loss": "0.4502", "code": " String toString() {(path); if (!query) { append('?');(query);}toString(); }", "n_tokens": 40, "n_pass": [248, 20, 18]}
{"time": "2021-02-15 02:16:46.023079", "score": "0.7937", "loss": "0.4502", "code": " String toString() {(path); if (!query) { append('?');(query);}toString();}", "n_tokens": 39, "n_pass": [253, 21, 19]}
{"time": "2021-02-15 02:16:48.704605", "score": "0.7937", "loss": "0.4502", "code": "String toString() {(path); if (!query) { append('?');(query);}toString();}", "n_tokens": 38, "n_pass": [255, 22, 20]}
{"time": "2021-02-15 02:16:52.485058", "score": "0.7937", "loss": "0.4502", "code": "String toString(){(path); if (!query) { append('?');(query);}toString();}", "n_tokens": 37, "n_pass": [261, 23, 21]}
{"time": "2021-02-15 02:16:55.232434", "score": "0.7937", "loss": "0.4502", "code": "String toString(){(path);if (!query) { append('?');(query);}toString();}", "n_tokens": 36, "n_pass": [267, 24, 22]}
{"time": "2021-02-15 02:16:57.848620", "score": "0.7937", "loss": "0.4502", "code": "String toString(){(path);if(!query) { append('?');(query);}toString();}", "n_tokens": 35, "n_pass": [269, 25, 23]}
{"time": "2021-02-15 02:17:00.464657", "score": "0.4682", "loss": "1.2839", "code": "String toString(){(path);if(query) { append('?');(query);}toString();}", "n_tokens": 34, "n_pass": [271, 26, 24]}
{"time": "2021-02-15 02:17:03.109805", "score": "0.4682", "loss": "1.2839", "code": "String toString(){(path);if(query){ append('?');(query);}toString();}", "n_tokens": 33, "n_pass": [274, 27, 25]}
{"time": "2021-02-15 02:17:05.717687", "score": "0.4682", "loss": "1.2839", "code": "String toString(){(path);if(query){append('?');(query);}toString();}", "n_tokens": 32, "n_pass": [276, 28, 26]}

Minimal simplified code:
String toString(){(path);if(query){append('?');(query);}toString();}

