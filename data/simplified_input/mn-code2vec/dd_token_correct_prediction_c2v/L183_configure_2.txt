
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/mem/MemStorageModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }
predict, score, loss = configure, 0.9745355248451233, 0.029456689953804016

Trace of simplified code(s):
{"time": "2021-02-14 10:44:04.872233", "score": "0.909", "loss": "0.101", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 219, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 10:44:07.571971", "score": "0.8092", "loss": "0.2155", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); ; Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 191, "n_pass": [25, 2, 2]}
{"time": "2021-02-14 10:44:10.258025", "score": "0.9561", "loss": "0.0481", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 177, "n_pass": [47, 3, 3]}
{"time": "2021-02-14 10:44:12.933470", "score": "0.9496", "loss": "0.0552", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 163, "n_pass": [55, 4, 4]}
{"time": "2021-02-14 10:44:15.623877", "score": "0.9615", "loss": "0.041", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 149, "n_pass": [56, 5, 5]}
{"time": "2021-02-14 10:44:18.286794", "score": "0.9234", "loss": "0.082", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 135, "n_pass": [57, 6, 6]}
{"time": "2021-02-14 10:44:20.951287", "score": "0.8935", "loss": "0.1204", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 121, "n_pass": [59, 7, 7]}
{"time": "2021-02-14 10:44:26.344728", "score": "0.9302", "loss": "0.0788", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bind(Singleton.class); expose(storageKey); }", "n_tokens": 114, "n_pass": [90, 9, 8]}
{"time": "2021-02-14 10:44:29.020323", "score": "0.8049", "loss": "0.2289", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 107, "n_pass": [91, 10, 9]}
{"time": "2021-02-14 10:44:32.081003", "score": "0.6858", "loss": "0.4116", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 100, "n_pass": [99, 11, 10]}
{"time": "2021-02-14 10:44:34.753959", "score": "0.6112", "loss": "0.5275", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 93, "n_pass": [103, 12, 11]}
{"time": "2021-02-14 10:44:40.899011", "score": "0.9298", "loss": "0.0821", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 89, "n_pass": [151, 14, 12]}
{"time": "2021-02-14 10:44:49.267463", "score": "0.9298", "loss": "0.0821", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 86, "n_pass": [166, 17, 13]}
{"time": "2021-02-14 10:44:51.917595", "score": "0.9272", "loss": "0.0853", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 83, "n_pass": [171, 18, 14]}
{"time": "2021-02-14 10:45:03.353439", "score": "0.9038", "loss": "0.109", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2,MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 81, "n_pass": [247, 21, 15]}
{"time": "2021-02-14 10:45:06.009551", "score": "0.8993", "loss": "0.1141", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 79, "n_pass": [248, 22, 16]}
{"time": "2021-02-14 10:45:08.667637", "score": "0.8763", "loss": "0.1395", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore.class); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 77, "n_pass": [252, 23, 17]}
{"time": "2021-02-14 10:45:11.324614", "score": "0.8565", "loss": "0.1641", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore); bindStore(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 75, "n_pass": [254, 24, 18]}
{"time": "2021-02-14 10:45:13.978054", "score": "0.9359", "loss": "0.0717", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage.class); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 73, "n_pass": [256, 25, 19]}
{"time": "2021-02-14 10:45:16.633390", "score": "0.9359", "loss": "0.0717", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage); bindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 71, "n_pass": [258, 26, 20]}
{"time": "2021-02-14 10:45:19.289192", "score": "0.9513", "loss": "0.0531", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 69, "n_pass": [260, 27, 21]}
{"time": "2021-02-14 10:45:21.939951", "score": "0.9801", "loss": "0.0215", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 67, "n_pass": [265, 28, 22]}
{"time": "2021-02-14 10:45:24.600073", "score": "0.9798", "loss": "0.0218", "code": "@Overrideprotected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 66, "n_pass": [271, 29, 23]}
{"time": "2021-02-14 10:45:27.237276", "score": "0.9801", "loss": "0.0215", "code": "@Override void configure() { bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 65, "n_pass": [272, 30, 24]}
{"time": "2021-02-14 10:45:31.091740", "score": "0.9801", "loss": "0.0215", "code": "@Override void configure(){ bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 64, "n_pass": [279, 31, 25]}
{"time": "2021-02-14 10:45:33.734300", "score": "0.9801", "loss": "0.0215", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount.of(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 63, "n_pass": [281, 32, 26]}
{"time": "2021-02-14 10:45:41.662430", "score": "0.9794", "loss": "0.0226", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore(MutableMemQuotaStore);(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 61, "n_pass": [295, 35, 27]}
{"time": "2021-02-14 10:45:44.303226", "score": "0.9946", "loss": "0.006", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);to(MemStorage.class); (storageKey); }", "n_tokens": 59, "n_pass": [300, 36, 28]}
{"time": "2021-02-14 10:45:57.667627", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage.class); (storageKey); }", "n_tokens": 58, "n_pass": [386, 39, 29]}
{"time": "2021-02-14 10:46:00.305727", "score": "0.9998", "loss": "0.0002", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorageclass); (storageKey); }", "n_tokens": 57, "n_pass": [388, 40, 30]}
{"time": "2021-02-14 10:46:02.948933", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage); (storageKey); }", "n_tokens": 56, "n_pass": [389, 41, 31]}
{"time": "2021-02-14 10:46:05.994053", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage);(storageKey); }", "n_tokens": 55, "n_pass": [392, 42, 32]}
{"time": "2021-02-14 10:46:08.661536", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long, Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 54, "n_pass": [397, 43, 33]}
{"time": "2021-02-14 10:46:15.164164", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long,Time>>() ).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 53, "n_pass": [418, 45, 34]}
{"time": "2021-02-14 10:46:17.809254", "score": "0.9993", "loss": "0.001", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long,Time>>()).annotatedWith(Amount(2)); bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 52, "n_pass": [424, 46, 35]}
{"time": "2021-02-14 10:46:20.479428", "score": "0.9996", "loss": "0.0005", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long,Time>>()).annotatedWith((2)); bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 51, "n_pass": [429, 47, 36]}
{"time": "2021-02-14 10:46:23.111763", "score": "0.9996", "loss": "0.0005", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Long,Time>>()).annotatedWith((2));bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 50, "n_pass": [435, 48, 37]}
{"time": "2021-02-14 10:46:30.461455", "score": "0.2574", "loss": "2.5158", "code": "@Override void configure(){bind(new TypeLiteral<Amount<LongTime>>()).annotatedWith((2));bindStore();(Storage);(MemStorage);(storageKey);}", "n_tokens": 49, "n_pass": [471, 50, 38]}

Minimal simplified code:
@Override void configure(){bind(new TypeLiteral<Amount<LongTime>>()).annotatedWith((2));bindStore();(Storage);(MemStorage);(storageKey);}

