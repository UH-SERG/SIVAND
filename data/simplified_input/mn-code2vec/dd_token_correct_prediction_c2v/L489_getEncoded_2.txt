
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/test/java/org/bouncycastle/jce/provider/test/CertPathTest_getEncoded.java
method_name = getEncoded
method_body = public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException("Encoding not supported: " + encoding); }
predict, score, loss = getEncoded, 0.9839522242546082, 0.021815452724695206

Trace of simplified code(s):
{"time": "2021-02-14 20:38:34.505253", "score": "0.984", "loss": "0.0218", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 20:38:37.152134", "score": "0.9824", "loss": "0.0236", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 66, "n_pass": [24, 2, 2]}
{"time": "2021-02-14 20:38:39.830035", "score": "0.8716", "loss": "0.1415", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 61, "n_pass": [49, 3, 3]}
{"time": "2021-02-14 20:38:42.480711", "score": "0.9382", "loss": "0.0796", "code": "public byte[] getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 57, "n_pass": [55, 4, 4]}
{"time": "2021-02-14 20:38:45.153117", "score": "0.9657", "loss": "0.0374", "code": "public byte[] getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 54, "n_pass": [104, 5, 5]}
{"time": "2021-02-14 20:38:47.805791", "score": "0.9657", "loss": "0.0374", "code": "byte[] getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 52, "n_pass": [110, 6, 6]}
{"time": "2021-02-14 20:38:54.637059", "score": "0.9657", "loss": "0.0374", "code": "byte[]getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 51, "n_pass": [180, 7, 7]}
{"time": "2021-02-14 20:38:57.309650", "score": "0.9657", "loss": "0.0374", "code": "byte[]getEncoded(String encoding){ if (getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 50, "n_pass": [187, 8, 8]}
{"time": "2021-02-14 20:38:59.950773", "score": "0.9657", "loss": "0.0374", "code": "byte[]getEncoded(String encoding){if (getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 49, "n_pass": [189, 9, 9]}
{"time": "2021-02-14 20:39:02.596178", "score": "0.9657", "loss": "0.0374", "code": "byte[]getEncoded(String encoding){if(getType().equals(encoding)) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 48, "n_pass": [191, 10, 10]}
{"time": "2021-02-14 20:39:05.236875", "score": "0.9542", "loss": "0.0494", "code": "byte[]getEncoded(String encoding){if(getType().equals()) { return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 47, "n_pass": [199, 11, 11]}
{"time": "2021-02-14 20:39:07.868150", "score": "0.9542", "loss": "0.0494", "code": "byte[]getEncoded(String encoding){if(getType().equals()){ return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 46, "n_pass": [202, 12, 12]}
{"time": "2021-02-14 20:39:10.519024", "score": "0.9542", "loss": "0.0494", "code": "byte[]getEncoded(String encoding){if(getType().equals()){return clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 45, "n_pass": [204, 13, 13]}
{"time": "2021-02-14 20:39:13.176267", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){ clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 44, "n_pass": [205, 14, 14]}
{"time": "2021-02-14 20:39:15.795649", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone(); }  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 43, "n_pass": [206, 15, 15]}
{"time": "2021-02-14 20:39:18.415546", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}  CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 42, "n_pass": [211, 16, 16]}
{"time": "2021-02-14 20:39:21.053007", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 40, "n_pass": [213, 17, 17]}
{"time": "2021-02-14 20:39:25.573866", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"Encoding \"+ encoding); }", "n_tokens": 39, "n_pass": [262, 18, 18]}
{"time": "2021-02-14 20:39:28.199681", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"Encoding \"+encoding); }", "n_tokens": 38, "n_pass": [263, 19, 19]}
{"time": "2021-02-14 20:39:30.826853", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"Encoding \"+encoding);}", "n_tokens": 37, "n_pass": [267, 20, 20]}
{"time": "2021-02-14 20:39:38.745892", "score": "0.8186", "loss": "0.217", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"Encoding\"+encoding);}", "n_tokens": 36, "n_pass": [299, 23, 21]}
{"time": "2021-02-14 20:39:44.012828", "score": "0.4994", "loss": "0.72", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(\"\"+encoding);}", "n_tokens": 35, "n_pass": [335, 25, 22]}

Minimal simplified code:
byte[]getEncoded(String encoding){if(getType().equals()){clone();}CertificateEncodingException(""+encoding);}

