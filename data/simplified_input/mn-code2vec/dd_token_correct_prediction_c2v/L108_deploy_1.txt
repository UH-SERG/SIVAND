
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/henryyan__activiti-in-action-codes/chapter13-query/src/main/java/me/kafeitu/activiti/web/chapter5/deployment/DeploymentController_deploy.java
method_name = deploy
method_body = @RequestMapping(value = "/deploy") public String deploy(@RequestParam(value = "file", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals("zip") || extension.equals("bar")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error("error on deploy process, because of file input stream"); } return "redirect:process-list"; }
predict, score, loss = deploy, 0.9936984777450562, 0.00813350360840559

Trace of simplified code(s):
{"time": "2021-02-16 19:48:51.927512", "score": "0.6399", "loss": "0.6957", "code": "@RequestMapping(value = \"/deploy\") public String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 230, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 19:48:54.951820", "score": "0.8793", "loss": "0.1689", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 216, "n_pass": [44, 2, 2]}
{"time": "2021-02-16 19:49:02.738915", "score": "0.9893", "loss": "0.0242", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 209, "n_pass": [94, 5, 3]}
{"time": "2021-02-16 19:49:05.331887", "score": "0.9163", "loss": "0.1435", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamgetInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 202, "n_pass": [96, 6, 4]}
{"time": "2021-02-16 19:49:07.903053", "score": "0.7347", "loss": "0.7241", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamextension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 195, "n_pass": [97, 7, 5]}
{"time": "2021-02-16 19:49:10.485540", "score": "0.5756", "loss": "0.6465", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 188, "n_pass": [98, 8, 6]}
{"time": "2021-02-16 19:49:13.060988", "score": "0.9384", "loss": "0.1129", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamdeployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 181, "n_pass": [99, 9, 7]}
{"time": "2021-02-16 19:49:18.213281", "score": "0.9757", "loss": "0.0654", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamdeployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 174, "n_pass": [107, 11, 8]}
{"time": "2021-02-16 19:49:20.778142", "score": "0.9729", "loss": "0.0765", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamdeployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on  file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 166, "n_pass": [115, 12, 9]}
{"time": "2021-02-16 19:49:23.344032", "score": "0.4687", "loss": "1.0037", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on  file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 159, "n_pass": [125, 13, 10]}
{"time": "2021-02-16 19:49:25.969760", "score": "0.4536", "loss": "1.1391", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on  file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 155, "n_pass": [199, 14, 11]}
{"time": "2021-02-16 19:49:28.555780", "score": "0.4475", "loss": "1.1557", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 151, "n_pass": [217, 15, 12]}
{"time": "2021-02-16 19:49:31.139318", "score": "0.4528", "loss": "1.142", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 147, "n_pass": [218, 16, 13]}
{"time": "2021-02-16 19:49:36.649917", "score": "0.4777", "loss": "1.0878", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) {fileName ; try { InputStream(); if (extension.equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 144, "n_pass": [234, 18, 14]}
{"time": "2021-02-16 19:49:39.203927", "score": "0.4709", "loss": "1.0937", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 141, "n_pass": [235, 19, 15]}
{"time": "2021-02-16 19:49:46.888641", "score": "0.4421", "loss": "1.1331", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 139, "n_pass": [362, 21, 16]}
{"time": "2021-02-16 19:49:52.020370", "score": "0.4291", "loss": "1.2206", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = new ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 137, "n_pass": [373, 23, 17]}
{"time": "2021-02-16 19:49:54.575065", "score": "0.4201", "loss": "1.2414", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(fileInputStreamzip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 135, "n_pass": [375, 24, 18]}
{"time": "2021-02-16 19:49:57.122306", "score": "0.4164", "loss": "1.2484", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 133, "n_pass": [377, 25, 19]}
{"time": "2021-02-16 19:50:09.925975", "score": "0.417", "loss": "1.2484", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\" stream\"); } return \"redirect:process-list\"; }", "n_tokens": 131, "n_pass": [399, 30, 20]}
{"time": "2021-02-16 19:50:12.490050", "score": "0.4152", "loss": "1.2508", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } return \"redirect:process-list\"; }", "n_tokens": 129, "n_pass": [401, 31, 21]}
{"time": "2021-02-16 19:50:15.047063", "score": "0.4739", "loss": "0.9976", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect:process-list\"; }", "n_tokens": 127, "n_pass": [405, 32, 22]}
{"time": "2021-02-16 19:50:17.601282", "score": "0.3954", "loss": "1.2469", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect-list\"; }", "n_tokens": 125, "n_pass": [407, 33, 23]}
{"time": "2021-02-16 19:50:20.168213", "score": "0.4727", "loss": "1.0017", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 123, "n_pass": [408, 34, 24]}
{"time": "2021-02-16 19:50:22.726666", "score": "0.4727", "loss": "1.0017", "code": "String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 122, "n_pass": [411, 35, 25]}
{"time": "2021-02-16 19:50:26.421678", "score": "0.4727", "loss": "1.0017", "code": "String deploy(@RequestParam(value= \"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 121, "n_pass": [420, 36, 26]}
{"time": "2021-02-16 19:50:28.975369", "score": "0.4727", "loss": "1.0017", "code": "String deploy(@RequestParam(value=\"file\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 120, "n_pass": [422, 37, 27]}
{"time": "2021-02-16 19:50:31.539476", "score": "0.4917", "loss": "0.963", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 119, "n_pass": [424, 38, 28]}
{"time": "2021-02-16 19:50:34.116387", "score": "0.4501", "loss": "1.4811", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 117, "n_pass": [454, 39, 29]}
{"time": "2021-02-16 19:50:41.802242", "score": "0.5671", "loss": "1.0209", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) { logger(\"\"); } \"redirect\"; }", "n_tokens": 115, "n_pass": [463, 42, 30]}
{"time": "2021-02-16 19:50:44.363214", "score": "0.5693", "loss": "1.0136", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\"); } \"redirect\"; }", "n_tokens": 113, "n_pass": [472, 43, 31]}
{"time": "2021-02-16 19:51:05.995188", "score": "0.5693", "loss": "1.0136", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");} \"redirect\"; }", "n_tokens": 112, "n_pass": [641, 46, 32]}
{"time": "2021-02-16 19:51:08.545029", "score": "0.5693", "loss": "1.0136", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"redirect\"; }", "n_tokens": 111, "n_pass": [643, 47, 33]}
{"time": "2021-02-16 19:51:11.096513", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\"; }", "n_tokens": 110, "n_pass": [645, 48, 34]}
{"time": "2021-02-16 19:51:13.644797", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 109, "n_pass": [648, 49, 35]}
{"time": "2021-02-16 19:51:17.374887", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required = true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 108, "n_pass": [662, 50, 36]}
{"time": "2021-02-16 19:51:19.957888", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required= true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 107, "n_pass": [664, 51, 37]}
{"time": "2021-02-16 19:51:22.533352", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true) MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 106, "n_pass": [666, 52, 38]}
{"time": "2021-02-16 19:51:25.114172", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file) { try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 105, "n_pass": [669, 53, 39]}
{"time": "2021-02-16 19:51:27.675956", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){ try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 104, "n_pass": [674, 54, 40]}
{"time": "2021-02-16 19:51:30.227949", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try { InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 103, "n_pass": [676, 55, 41]}
{"time": "2021-02-16 19:51:32.793811", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{ InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 102, "n_pass": [678, 56, 42]}
{"time": "2021-02-16 19:51:35.365406", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream(); if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 101, "n_pass": [680, 57, 43]}
{"time": "2021-02-16 19:51:37.930250", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if (equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 100, "n_pass": [685, 58, 44]}
{"time": "2021-02-16 19:51:40.487860", "score": "0.5643", "loss": "1.02", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if(equals(\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 99, "n_pass": [687, 59, 45]}
{"time": "2021-02-16 19:51:43.058027", "score": "0.5654", "loss": "1.0125", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"zip\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 98, "n_pass": [689, 60, 46]}
{"time": "2021-02-16 19:51:45.619044", "score": "0.5587", "loss": "1.0143", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\") |equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 97, "n_pass": [692, 61, 47]}
{"time": "2021-02-16 19:51:48.176374", "score": "0.5587", "loss": "1.0143", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|equals(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 96, "n_pass": [695, 62, 48]}
{"time": "2021-02-16 19:51:50.737217", "score": "0.5606", "loss": "1.0051", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"bar\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 95, "n_pass": [697, 63, 49]}
{"time": "2021-02-16 19:51:53.308050", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")) { ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 94, "n_pass": [700, 64, 50]}
{"time": "2021-02-16 19:51:55.862626", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 93, "n_pass": [704, 65, 51]}
{"time": "2021-02-16 19:51:58.417242", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream = ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 92, "n_pass": [706, 66, 52]}
{"time": "2021-02-16 19:52:00.971960", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream= ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 91, "n_pass": [708, 67, 53]}
{"time": "2021-02-16 19:52:03.547042", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream(); } { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 90, "n_pass": [710, 68, 54]}
{"time": "2021-02-16 19:52:06.114844", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();} { deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 89, "n_pass": [715, 69, 55]}
{"time": "2021-02-16 19:52:08.668351", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{ deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 88, "n_pass": [717, 70, 56]}
{"time": "2021-02-16 19:52:11.222102", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName, fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 87, "n_pass": [719, 71, 57]}
{"time": "2021-02-16 19:52:16.348387", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream); } deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 86, "n_pass": [726, 73, 58]}
{"time": "2021-02-16 19:52:18.906834", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);} deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 85, "n_pass": [730, 74, 59]}
{"time": "2021-02-16 19:52:21.464132", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy(); } catch (Exception e) {(\"\");}\"\";}", "n_tokens": 84, "n_pass": [732, 75, 60]}
{"time": "2021-02-16 19:52:24.021223", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();} catch (Exception e) {(\"\");}\"\";}", "n_tokens": 83, "n_pass": [737, 76, 61]}
{"time": "2021-02-16 19:52:26.571462", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch (Exception e) {(\"\");}\"\";}", "n_tokens": 82, "n_pass": [739, 77, 62]}
{"time": "2021-02-16 19:52:29.139941", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch(Exception e) {(\"\");}\"\";}", "n_tokens": 81, "n_pass": [741, 78, 63]}
{"time": "2021-02-16 19:52:31.698521", "score": "0.5578", "loss": "0.9985", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream=ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch(Exception e){(\"\");}\"\";}", "n_tokens": 80, "n_pass": [747, 79, 64]}
{"time": "2021-02-16 19:52:35.445475", "score": "0.5557", "loss": "1.0012", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStreamZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch(Exception e){(\"\");}\"\";}", "n_tokens": 79, "n_pass": [800, 80, 65]}
{"time": "2021-02-16 19:52:38.000787", "score": "0.5711", "loss": "0.9532", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{InputStream();if((\"\")|(\"\")){ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch(Exception e){(\"\");}\"\";}", "n_tokens": 78, "n_pass": [801, 81, 66]}

Minimal simplified code:
String deploy(@RequestParam(value="",required=true)MultipartFile file){try{InputStream();if(("")|("")){ZipInputStream();}{deployment.addInputStream(fileName,fileInputStream);}deploy();}catch(Exception e){("");}"";}

