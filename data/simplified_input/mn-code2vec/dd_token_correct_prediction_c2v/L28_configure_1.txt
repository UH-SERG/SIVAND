
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/log/LogPersistenceModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class).in(Singleton.class); bind(LogPersistence.class).in(Singleton.class); bind(Persistence.class).to(LogPersistence.class); expose(Persistence.class); expose(LogPersistence.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings("deprecation") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }
predict, score, loss = configure, 0.9989364743232727, 0.0013268723851069808

Trace of simplified code(s):
{"time": "2021-02-14 05:41:12.794871", "score": "0.9982", "loss": "0.0028", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class).in(Singleton.class); bind(LogPersistence.class).in(Singleton.class); bind(Persistence.class).to(LogPersistence.class); expose(Persistence.class); expose(LogPersistence.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings(\"deprecation\") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 213, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 05:41:15.467275", "score": "0.9939", "loss": "0.008", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings(\"deprecation\") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 160, "n_pass": [9, 2, 2]}
{"time": "2021-02-14 05:41:18.117575", "score": "0.9732", "loss": "0.0851", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManagerclass).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 107, "n_pass": [10, 3, 3]}
{"time": "2021-02-14 05:41:20.799453", "score": "0.9961", "loss": "0.0076", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.LogManagerclass).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 94, "n_pass": [34, 4, 4]}
{"time": "2021-02-14 05:41:23.466569", "score": "0.9987", "loss": "0.0018", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySizehashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 87, "n_pass": [56, 5, 5]}
{"time": "2021-02-14 05:41:26.111468", "score": "0.998", "loss": "0.0023", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 80, "n_pass": [57, 6, 6]}
{"time": "2021-02-14 05:41:28.762381", "score": "0.9973", "loss": "0.0033", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 73, "n_pass": [58, 7, 7]}
{"time": "2021-02-14 05:41:31.494103", "score": "0.9907", "loss": "0.0157", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 66, "n_pass": [62, 8, 8]}
{"time": "2021-02-14 05:41:34.945587", "score": "0.9908", "loss": "0.0167", "code": "protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 63, "n_pass": [95, 9, 9]}
{"time": "2021-02-14 05:41:37.570422", "score": "0.9426", "loss": "0.1249", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() { }).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 60, "n_pass": [101, 10, 10]}
{"time": "2021-02-14 05:41:40.219585", "score": "0.9426", "loss": "0.1249", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 57, "n_pass": [104, 11, 11]}
{"time": "2021-02-14 05:41:42.854084", "score": "0.9971", "loss": "0.0063", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 53, "n_pass": [111, 12, 12]}
{"time": "2021-02-14 05:41:47.424253", "score": "0.9951", "loss": "0.0136", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 51, "n_pass": [160, 13, 13]}
{"time": "2021-02-14 05:41:50.046000", "score": "0.9951", "loss": "0.0136", "code": " void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 50, "n_pass": [163, 14, 14]}
{"time": "2021-02-14 05:41:52.661951", "score": "0.9951", "loss": "0.0136", "code": "void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 49, "n_pass": [164, 15, 15]}
{"time": "2021-02-14 05:41:56.095303", "score": "0.9951", "loss": "0.0136", "code": "void configure(){ bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 48, "n_pass": [170, 16, 16]}
{"time": "2021-02-14 05:41:58.727131", "score": "0.9951", "loss": "0.0136", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 47, "n_pass": [172, 17, 17]}
{"time": "2021-02-14 05:42:01.348879", "score": "0.9981", "loss": "0.0043", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 46, "n_pass": [173, 18, 18]}
{"time": "2021-02-14 05:42:03.994272", "score": "0.9989", "loss": "0.0025", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize); install(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 44, "n_pass": [183, 19, 19]}
{"time": "2021-02-14 05:42:06.615781", "score": "0.956", "loss": "0.213", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder().implement(StreamManagerclass)); }", "n_tokens": 42, "n_pass": [185, 20, 20]}
{"time": "2021-02-14 05:42:09.236216", "score": "0.8936", "loss": "0.354", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder.implement(StreamManagerclass)); }", "n_tokens": 40, "n_pass": [188, 21, 21]}
{"time": "2021-02-14 05:42:11.856046", "score": "0.9064", "loss": "0.2989", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 38, "n_pass": [189, 22, 22]}
{"time": "2021-02-14 05:42:17.566405", "score": "0.9512", "loss": "0.1825", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder(StreamManager)); }", "n_tokens": 37, "n_pass": [245, 23, 23]}
{"time": "2021-02-14 05:42:20.214899", "score": "0.9512", "loss": "0.1825", "code": "void configure(){(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder(StreamManager));}", "n_tokens": 36, "n_pass": [248, 24, 24]}
{"time": "2021-02-14 05:42:23.659204", "score": "0.9512", "loss": "0.1825", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize);(new FactoryModuleBuilder(StreamManager));}", "n_tokens": 35, "n_pass": [268, 25, 25]}
{"time": "2021-02-14 05:42:26.271507", "score": "0.9732", "loss": "0.0628", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith();(new FactoryModuleBuilder(StreamManager));}", "n_tokens": 34, "n_pass": [273, 26, 26]}
{"time": "2021-02-14 05:42:28.880793", "score": "0.9945", "loss": "0.008", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith();( FactoryModuleBuilder(StreamManager));}", "n_tokens": 33, "n_pass": [277, 27, 27]}
{"time": "2021-02-14 05:42:31.509908", "score": "0.9945", "loss": "0.008", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith();(FactoryModuleBuilder(StreamManager));}", "n_tokens": 32, "n_pass": [278, 28, 28]}
{"time": "2021-02-14 05:42:36.748687", "score": "0.9505", "loss": "0.145", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith();(FactoryModuleBuilder());}", "n_tokens": 31, "n_pass": [281, 30, 29]}

Minimal simplified code:
void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith();(FactoryModuleBuilder());}

