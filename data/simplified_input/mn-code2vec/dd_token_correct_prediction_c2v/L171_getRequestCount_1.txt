
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/coyote/RequestGroupInfo_getRequestCount.java
method_name = getRequestCount
method_body = public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int i = 0; i < processors.size(); i++) { RequestInfo rp = processors.get(i); requestCount += rp.getRequestCount(); } return requestCount; }
predict, score, loss = getRequestCount, 0.9486581087112427, 0.06909597665071487

Trace of simplified code(s):
{"time": "2021-02-14 10:17:34.989983", "score": "0.9487", "loss": "0.0691", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int i = 0; i < processors.size(); i++) { RequestInfo rp = processors.get(i); requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 85, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 10:17:38.093605", "score": "0.9522", "loss": "0.0639", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int i = 0; i < processors.size(); i++) { RequestInfo; requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 74, "n_pass": [25, 2, 2]}
{"time": "2021-02-14 10:17:44.245697", "score": "0.963", "loss": "0.0497", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i < processors.size(); i++) { RequestInfo; requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 69, "n_pass": [56, 4, 3]}
{"time": "2021-02-14 10:17:46.892305", "score": "0.9599", "loss": "0.0485", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); i++) { RequestInfo; requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 64, "n_pass": [58, 5, 4]}
{"time": "2021-02-14 10:17:52.610784", "score": "0.9617", "loss": "0.0463", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); ) { RequestInfo; requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 61, "n_pass": [97, 7, 5]}
{"time": "2021-02-14 10:17:55.267195", "score": "0.9614", "loss": "0.0465", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); ) { requestCount += rp.getRequestCount(); } return requestCount; }", "n_tokens": 58, "n_pass": [99, 8, 6]}
{"time": "2021-02-14 10:17:57.907099", "score": "0.9512", "loss": "0.0629", "code": "public synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 55, "n_pass": [105, 9, 7]}
{"time": "2021-02-14 10:18:00.560363", "score": "0.9512", "loss": "0.0629", "code": "synchronized int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 53, "n_pass": [107, 10, 8]}
{"time": "2021-02-14 10:18:03.189069", "score": "0.9512", "loss": "0.0629", "code": "int getRequestCount() { int requestCount = deadRequestCount; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 51, "n_pass": [108, 11, 9]}
{"time": "2021-02-14 10:18:06.217315", "score": "0.9657", "loss": "0.0445", "code": "int getRequestCount() { requestCount = deadRequestCount; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 49, "n_pass": [113, 12, 10]}
{"time": "2021-02-14 10:18:08.845647", "score": "0.9622", "loss": "0.0483", "code": "int getRequestCount() { requestCount ; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 46, "n_pass": [115, 13, 11]}
{"time": "2021-02-14 10:18:11.879444", "score": "0.9531", "loss": "0.0603", "code": "int getRequestCount() { ; for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 44, "n_pass": [132, 14, 12]}
{"time": "2021-02-14 10:18:18.771990", "score": "0.9531", "loss": "0.0603", "code": "int getRequestCount() {  for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 43, "n_pass": [181, 15, 13]}
{"time": "2021-02-14 10:18:21.392180", "score": "0.9531", "loss": "0.0603", "code": "int getRequestCount() { for (int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 42, "n_pass": [182, 16, 14]}
{"time": "2021-02-14 10:18:24.008628", "score": "0.9531", "loss": "0.0603", "code": "int getRequestCount() { for(int0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 41, "n_pass": [183, 17, 15]}
{"time": "2021-02-14 10:18:26.622323", "score": "0.9522", "loss": "0.0616", "code": "int getRequestCount() { for(0; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 40, "n_pass": [185, 18, 16]}
{"time": "2021-02-14 10:18:29.223935", "score": "0.9515", "loss": "0.0624", "code": "int getRequestCount() { for(; i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 39, "n_pass": [186, 19, 17]}
{"time": "2021-02-14 10:18:31.833505", "score": "0.9515", "loss": "0.0624", "code": "int getRequestCount() { for(;i (); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 38, "n_pass": [188, 20, 18]}
{"time": "2021-02-14 10:18:34.452463", "score": "0.9515", "loss": "0.0624", "code": "int getRequestCount() { for(;i(); ) { requestCount += rp.getRequestCount(); } ; }", "n_tokens": 37, "n_pass": [190, 21, 19]}
{"time": "2021-02-14 10:18:37.087192", "score": "0.7999", "loss": "0.2436", "code": "int getRequestCount() { for(;i(); ) { requestCount= rp.getRequestCount(); } ; }", "n_tokens": 35, "n_pass": [196, 22, 20]}
{"time": "2021-02-14 10:18:39.695536", "score": "0.5539", "loss": "0.7207", "code": "int getRequestCount() { for(;i(); ) { requestCountrp.getRequestCount(); } ; }", "n_tokens": 33, "n_pass": [197, 23, 21]}
{"time": "2021-02-14 10:18:44.941756", "score": "0.5539", "loss": "0.7207", "code": "int getRequestCount() { for(;i(); ) { requestCountrp.getRequestCount(); } }", "n_tokens": 31, "n_pass": [202, 25, 22]}
{"time": "2021-02-14 10:18:48.365124", "score": "0.5539", "loss": "0.7207", "code": "int getRequestCount(){ for(;i(); ) { requestCountrp.getRequestCount(); } }", "n_tokens": 30, "n_pass": [209, 26, 23]}
{"time": "2021-02-14 10:18:50.978914", "score": "0.5539", "loss": "0.7207", "code": "int getRequestCount(){for(;i(); ) { requestCountrp.getRequestCount(); } }", "n_tokens": 29, "n_pass": [211, 27, 24]}
{"time": "2021-02-14 10:18:53.581375", "score": "0.4818", "loss": "0.8977", "code": "int getRequestCount(){for(;i(); ) {rp.getRequestCount(); } }", "n_tokens": 27, "n_pass": [220, 28, 25]}
{"time": "2021-02-14 10:18:56.182152", "score": "0.9292", "loss": "0.1128", "code": "int getRequestCount(){for(;i(); ) {getRequestCount(); } }", "n_tokens": 25, "n_pass": [221, 29, 26]}
{"time": "2021-02-14 10:19:01.843037", "score": "0.9292", "loss": "0.1128", "code": "int getRequestCount(){for(;i(); ) {getRequestCount();} }", "n_tokens": 24, "n_pass": [256, 30, 27]}
{"time": "2021-02-14 10:19:04.441071", "score": "0.9292", "loss": "0.1128", "code": "int getRequestCount(){for(;i(); ) {getRequestCount();}}", "n_tokens": 23, "n_pass": [257, 31, 28]}
{"time": "2021-02-14 10:19:07.847556", "score": "0.9292", "loss": "0.1128", "code": "int getRequestCount(){for(;i();) {getRequestCount();}}", "n_tokens": 22, "n_pass": [272, 32, 29]}
{"time": "2021-02-14 10:19:10.454591", "score": "0.9292", "loss": "0.1128", "code": "int getRequestCount(){for(;i();){getRequestCount();}}", "n_tokens": 21, "n_pass": [274, 33, 30]}

Minimal simplified code:
int getRequestCount(){for(;i();){getRequestCount();}}

