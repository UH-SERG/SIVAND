
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wnameless__json-flattener/src/main/java/com/github/wnameless/json/unflattener/JsonUnflattener_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }
predict, score, loss = equals, 0.9999476671218872, 8.296622399939224e-05

Trace of simplified code(s):
{"time": "2021-02-14 19:14:29.369150", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 69, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 19:14:32.018506", "score": "0.9994", "loss": "0.0007", "code": "@Override public boolean equals(Object o) { if(!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 52, "n_pass": [9, 2, 2]}
{"time": "2021-02-14 19:14:34.659209", "score": "0.9954", "loss": "0.0075", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 48, "n_pass": [37, 3, 3]}
{"time": "2021-02-14 19:14:37.300879", "score": "0.9876", "loss": "0.0132", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener))  return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 44, "n_pass": [39, 4, 4]}
{"time": "2021-02-14 19:14:39.946172", "score": "0.901", "loss": "0.1121", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 39, "n_pass": [40, 5, 5]}
{"time": "2021-02-14 19:14:42.580469", "score": "0.9919", "loss": "0.0101", "code": " boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 35, "n_pass": [44, 6, 6]}
{"time": "2021-02-14 19:14:48.279048", "score": "0.9919", "loss": "0.0101", "code": "boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 34, "n_pass": [117, 7, 7]}
{"time": "2021-02-14 19:14:51.313618", "score": "0.9919", "loss": "0.0101", "code": "boolean equals(Object o){ if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 33, "n_pass": [125, 8, 8]}
{"time": "2021-02-14 19:14:53.946353", "score": "0.9919", "loss": "0.0101", "code": "boolean equals(Object o){if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 32, "n_pass": [127, 9, 9]}
{"time": "2021-02-14 19:14:56.580221", "score": "0.9919", "loss": "0.0102", "code": "boolean equals(Object o){if((JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 31, "n_pass": [130, 10, 10]}
{"time": "2021-02-14 19:14:59.248453", "score": "0.9919", "loss": "0.0102", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener) o).root); }", "n_tokens": 30, "n_pass": [135, 11, 11]}
{"time": "2021-02-14 19:15:04.499753", "score": "0.9919", "loss": "0.0102", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)o).root); }", "n_tokens": 29, "n_pass": [142, 13, 12]}
{"time": "2021-02-14 19:15:09.808369", "score": "0.9888", "loss": "0.012", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)o)); }", "n_tokens": 27, "n_pass": [145, 15, 13]}
{"time": "2021-02-14 19:15:15.863650", "score": "0.6533", "loss": "0.4701", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener))); }", "n_tokens": 26, "n_pass": [169, 17, 14]}
{"time": "2021-02-14 19:15:22.661684", "score": "0.6533", "loss": "0.4701", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)));}", "n_tokens": 25, "n_pass": [200, 19, 15]}

Minimal simplified code:
boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)));}

