
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/jasper/compiler/TextOptimizer_visit.java
method_name = visit
method_body = @Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) { n.setText(EMPTY_TEXT); return; } if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }
predict, score, loss = visit, 0.9009205102920532, 0.3769478499889374

Trace of simplified code(s):
{"time": "2021-02-16 11:50:01.952552", "score": "0.9009", "loss": "0.3769", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) { n.setText(EMPTY_TEXT); return; } if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 138, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 11:50:04.882824", "score": "0.9727", "loss": "0.0962", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 121, "n_pass": [23, 2, 2]}
{"time": "2021-02-16 11:50:07.457798", "score": "0.9779", "loss": "0.0823", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 103, "n_pass": [26, 3, 3]}
{"time": "2021-02-16 11:50:10.030019", "score": "0.9967", "loss": "0.0124", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 94, "n_pass": [45, 4, 4]}
{"time": "2021-02-16 11:50:12.593212", "score": "0.9499", "loss": "0.1508", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 86, "n_pass": [50, 5, 5]}
{"time": "2021-02-16 11:50:17.720962", "score": "0.9952", "loss": "0.0094", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount= 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 82, "n_pass": [85, 7, 6]}
{"time": "2021-02-16 11:50:20.293603", "score": "0.9967", "loss": "0.0047", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 77, "n_pass": [88, 8, 7]}
{"time": "2021-02-16 11:50:22.844382", "score": "0.9894", "loss": "0.0211", "code": " void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 73, "n_pass": [93, 9, 8]}
{"time": "2021-02-16 11:50:25.389350", "score": "0.9966", "loss": "0.0061", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 69, "n_pass": [97, 10, 9]}
{"time": "2021-02-16 11:50:27.973671", "score": "0.9972", "loss": "0.0048", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 67, "n_pass": [149, 11, 10]}
{"time": "2021-02-16 11:50:30.510943", "score": "0.2527", "loss": "3.1423", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n()) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 65, "n_pass": [155, 12, 11]}
{"time": "2021-02-16 11:50:33.056953", "score": "0.6398", "loss": "1.3475", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n) if (textNodeCount= 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 63, "n_pass": [156, 13, 12]}
{"time": "2021-02-16 11:50:35.598411", "score": "0.8752", "loss": "0.6531", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 61, "n_pass": [160, 14, 13]}
{"time": "2021-02-16 11:50:38.134475", "score": "0.3596", "loss": "2.0125", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 59, "n_pass": [163, 15, 14]}
{"time": "2021-02-16 11:50:40.668963", "score": "0.6299", "loss": "1.3593", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 57, "n_pass": [166, 16, 15]}
{"time": "2021-02-16 11:50:45.722432", "score": "0.447", "loss": "1.6307", "code": " void visit(Node.TemplateText n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(n.getText); } }", "n_tokens": 54, "n_pass": [169, 18, 16]}
{"time": "2021-02-16 11:50:48.648524", "score": "0.4276", "loss": "1.5999", "code": " void visit(Node n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(n.getText); } }", "n_tokens": 52, "n_pass": [175, 19, 17]}
{"time": "2021-02-16 11:50:51.210639", "score": "0.5439", "loss": "1.5876", "code": " void visit(Node n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 49, "n_pass": [194, 20, 18]}
{"time": "2021-02-16 11:50:59.394065", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n) { if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 48, "n_pass": [268, 21, 19]}
{"time": "2021-02-16 11:51:02.295567", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){ if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 47, "n_pass": [276, 22, 20]}
{"time": "2021-02-16 11:51:04.834487", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if ((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 46, "n_pass": [278, 23, 21]}
{"time": "2021-02-16 11:51:07.387626", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces() ) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 45, "n_pass": [280, 24, 22]}
{"time": "2021-02-16 11:51:09.920600", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces()) && n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 44, "n_pass": [286, 25, 23]}
{"time": "2021-02-16 11:51:12.446883", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces())&& n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 43, "n_pass": [288, 26, 24]}
{"time": "2021-02-16 11:51:20.065470", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces())&&n) if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 42, "n_pass": [291, 29, 25]}
{"time": "2021-02-16 11:51:22.591375", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces())&&n)if (textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 41, "n_pass": [294, 30, 26]}
{"time": "2021-02-16 11:51:25.124509", "score": "0.5439", "loss": "1.5876", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(textNodeCount0) { textBuffer = StringBuilder(); } }", "n_tokens": 40, "n_pass": [296, 31, 27]}
{"time": "2021-02-16 11:51:27.649498", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0) { textBuffer = StringBuilder(); } }", "n_tokens": 39, "n_pass": [298, 32, 28]}
{"time": "2021-02-16 11:51:30.186425", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){ textBuffer = StringBuilder(); } }", "n_tokens": 38, "n_pass": [301, 33, 29]}
{"time": "2021-02-16 11:51:32.720887", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer = StringBuilder(); } }", "n_tokens": 37, "n_pass": [303, 34, 30]}
{"time": "2021-02-16 11:51:35.274560", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer= StringBuilder(); } }", "n_tokens": 36, "n_pass": [305, 35, 31]}
{"time": "2021-02-16 11:51:37.808916", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer=StringBuilder(); } }", "n_tokens": 35, "n_pass": [307, 36, 32]}
{"time": "2021-02-16 11:51:49.794003", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer=StringBuilder();} }", "n_tokens": 34, "n_pass": [348, 40, 33]}
{"time": "2021-02-16 11:51:52.341292", "score": "0.3653", "loss": "2.0455", "code": "void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer=StringBuilder();}}", "n_tokens": 33, "n_pass": [349, 41, 34]}

Minimal simplified code:
void visit(Node n){if((getTrimSpaces())&&n)if(0){textBuffer=StringBuilder();}}

