
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/org/forgerock/openam/sm/config/CacheKey_equals.java
method_name = equals
method_body = @Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals(source, cacheKey.source) && Objects.equals(realm, cacheKey.realm); }
predict, score, loss = equals, 0.9999769926071167, 3.0397906812140718e-05

Trace of simplified code(s):
{"time": "2021-02-14 07:04:07.748200", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals(source, cacheKey.source) && Objects.equals(realm, cacheKey.realm); }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 07:04:10.422539", "score": "1.0", "loss": "0.0001", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 89, "n_pass": [26, 2, 2]}
{"time": "2021-02-14 07:04:13.502716", "score": "1.0", "loss": "0.0001", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother; return Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 82, "n_pass": [59, 3, 3]}
{"time": "2021-02-14 07:04:16.594183", "score": "1.0", "loss": "0.0001", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 79, "n_pass": [100, 4, 4]}
{"time": "2021-02-14 07:04:19.247023", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 75, "n_pass": [101, 5, 5]}
{"time": "2021-02-14 07:04:21.903080", "score": "0.9999", "loss": "0.0001", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 72, "n_pass": [105, 6, 6]}
{"time": "2021-02-14 07:04:24.995974", "score": "0.9996", "loss": "0.0009", "code": "public boolean equals() { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 69, "n_pass": [108, 7, 7]}
{"time": "2021-02-14 07:04:27.664919", "score": "0.8508", "loss": "0.395", "code": "public boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 66, "n_pass": [119, 8, 8]}
{"time": "2021-02-14 07:04:32.948068", "score": "0.725", "loss": "0.6387", "code": "public boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 63, "n_pass": [124, 10, 9]}
{"time": "2021-02-14 07:04:35.589278", "score": "0.68", "loss": "0.6667", "code": "public boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals(realm, cacheKey.realm); }", "n_tokens": 60, "n_pass": [125, 11, 10]}
{"time": "2021-02-14 07:04:43.933526", "score": "0.9396", "loss": "0.156", "code": "public boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey.realm); }", "n_tokens": 58, "n_pass": [184, 13, 11]}
{"time": "2021-02-14 07:04:46.564066", "score": "0.9444", "loss": "0.0971", "code": "public boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 56, "n_pass": [186, 14, 12]}
{"time": "2021-02-14 07:04:49.178924", "score": "0.9444", "loss": "0.0971", "code": " boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 55, "n_pass": [189, 15, 13]}
{"time": "2021-02-14 07:04:51.813031", "score": "0.9444", "loss": "0.0971", "code": "boolean equals() { if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 54, "n_pass": [190, 16, 14]}
{"time": "2021-02-14 07:04:55.240816", "score": "0.9444", "loss": "0.0971", "code": "boolean equals(){ if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 53, "n_pass": [196, 17, 15]}
{"time": "2021-02-14 07:04:57.884586", "score": "0.9444", "loss": "0.0971", "code": "boolean equals(){if (this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 52, "n_pass": [198, 18, 16]}
{"time": "2021-02-14 07:05:00.529694", "score": "0.9444", "loss": "0.0971", "code": "boolean equals(){if(this == other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 51, "n_pass": [200, 19, 17]}
{"time": "2021-02-14 07:05:03.151141", "score": "0.9444", "loss": "0.0971", "code": "boolean equals(){if(this== other) { return true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 50, "n_pass": [203, 20, 18]}
{"time": "2021-02-14 07:05:06.614279", "score": "0.9223", "loss": "0.1397", "code": "boolean equals(){if(this== other) { true; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 48, "n_pass": [208, 21, 19]}
{"time": "2021-02-14 07:05:09.243572", "score": "0.9279", "loss": "0.1296", "code": "boolean equals(){if(this== other) {; } if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 46, "n_pass": [209, 22, 20]}
{"time": "2021-02-14 07:05:11.868102", "score": "0.9279", "loss": "0.1296", "code": "boolean equals(){if(this== other) {} if (!(otherCacheKey)) { return false; }equals( cacheKey); }", "n_tokens": 44, "n_pass": [210, 23, 21]}
{"time": "2021-02-14 07:05:17.160256", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this== other) {} if (!(otherCacheKey)) { return false; }equals(); }", "n_tokens": 42, "n_pass": [222, 25, 22]}
{"time": "2021-02-14 07:05:28.174866", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this== other) {} if (!(otherCacheKey)) { return false; }equals();}", "n_tokens": 41, "n_pass": [283, 27, 23]}
{"time": "2021-02-14 07:05:32.423657", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this==other) {} if (!(otherCacheKey)) { return false; }equals();}", "n_tokens": 40, "n_pass": [295, 28, 24]}
{"time": "2021-02-14 07:05:35.060976", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this==other){} if (!(otherCacheKey)) { return false; }equals();}", "n_tokens": 39, "n_pass": [298, 29, 25]}
{"time": "2021-02-14 07:05:37.722601", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this==other){}if (!(otherCacheKey)) { return false; }equals();}", "n_tokens": 38, "n_pass": [301, 30, 26]}
{"time": "2021-02-14 07:05:40.344242", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this==other){}if(!(otherCacheKey)) { return false; }equals();}", "n_tokens": 37, "n_pass": [303, 31, 27]}
{"time": "2021-02-14 07:05:42.950627", "score": "0.9452", "loss": "0.0921", "code": "boolean equals(){if(this==other){}if((otherCacheKey)) { return false; }equals();}", "n_tokens": 36, "n_pass": [305, 32, 28]}
{"time": "2021-02-14 07:05:45.574377", "score": "0.9442", "loss": "0.0936", "code": "boolean equals(){if(this==other){}if((CacheKey)) { return false; }equals();}", "n_tokens": 35, "n_pass": [307, 33, 29]}
{"time": "2021-02-14 07:05:48.192993", "score": "0.9442", "loss": "0.0936", "code": "boolean equals(){if(this==other){}if((CacheKey)){ return false; }equals();}", "n_tokens": 34, "n_pass": [311, 34, 30]}
{"time": "2021-02-14 07:05:50.820647", "score": "0.9442", "loss": "0.0936", "code": "boolean equals(){if(this==other){}if((CacheKey)){return false; }equals();}", "n_tokens": 33, "n_pass": [313, 35, 31]}
{"time": "2021-02-14 07:06:01.293338", "score": "0.9442", "loss": "0.0936", "code": "boolean equals(){if(this==other){}if((CacheKey)){return false;}equals();}", "n_tokens": 32, "n_pass": [318, 39, 32]}

Minimal simplified code:
boolean equals(){if(this==other){}if((CacheKey)){return false;}equals();}

