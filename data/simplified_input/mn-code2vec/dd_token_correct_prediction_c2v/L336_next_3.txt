
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/std/ConcurrentHashMap_next.java
method_name = next
method_body = public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException(); CharSequence k = p.key; V v = p.val; lastReturned = p; advance(); return new MapEntry<>(k, v, map); }
predict, score, loss = next, 0.9913538098335266, 0.011050808243453503

Trace of simplified code(s):
{"time": "2021-02-14 15:41:16.137541", "score": "0.9914", "loss": "0.0111", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException(); CharSequence k = p.key; V v = p.val; lastReturned = p; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 15:41:18.805599", "score": "0.9667", "loss": "0.0437", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException();p; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 80, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 15:41:21.433259", "score": "0.4111", "loss": "1.1063", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 53, "n_pass": [12, 3, 3]}
{"time": "2021-02-14 15:41:24.509801", "score": "0.6379", "loss": "0.7065", "code": "Entry<CharSequence, V> next() { Node<V> pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 47, "n_pass": [33, 4, 4]}
{"time": "2021-02-14 15:41:27.167539", "score": "0.2828", "loss": "1.7858", "code": "Entry<CharSequence> next() { Node<V> pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 44, "n_pass": [56, 5, 5]}
{"time": "2021-02-14 15:41:29.804133", "score": "0.2719", "loss": "1.8293", "code": "Entry<CharSequence> next() { Node pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 41, "n_pass": [60, 6, 6]}
{"time": "2021-02-14 15:41:32.423237", "score": "0.7015", "loss": "0.5605", "code": "Entry<CharSequence> next() { Node; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 38, "n_pass": [61, 7, 7]}
{"time": "2021-02-14 15:41:38.420542", "score": "0.6797", "loss": "0.5996", "code": "Entry<CharSequence> next() {; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 36, "n_pass": [95, 9, 8]}
{"time": "2021-02-14 15:41:41.033164", "score": "0.6797", "loss": "0.5996", "code": "Entry<CharSequence> next() {advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 34, "n_pass": [96, 10, 9]}
{"time": "2021-02-14 15:41:46.261297", "score": "0.6797", "loss": "0.5996", "code": "Entry<CharSequence> next() {advance(); return new MapEntry(k, v, map); }", "n_tokens": 32, "n_pass": [102, 12, 10]}
{"time": "2021-02-14 15:41:48.876876", "score": "0.7166", "loss": "0.5287", "code": "Entry<CharSequence> next() {advance(); return new MapEntry(kv, map); }", "n_tokens": 30, "n_pass": [104, 13, 11]}
{"time": "2021-02-14 15:41:51.894288", "score": "0.7166", "loss": "0.5287", "code": "Entry<CharSequence>next() {advance(); return new MapEntry(kv, map); }", "n_tokens": 29, "n_pass": [113, 14, 12]}
{"time": "2021-02-14 15:41:57.134928", "score": "0.6622", "loss": "0.6499", "code": "Entry<CharSequence>next() {advance(); return MapEntry(kv, map); }", "n_tokens": 27, "n_pass": [120, 16, 13]}
{"time": "2021-02-14 15:42:00.149251", "score": "0.4965", "loss": "1.2225", "code": "Entry<CharSequence>next() {advance(); MapEntry(kv, map); }", "n_tokens": 25, "n_pass": [136, 17, 14]}
{"time": "2021-02-14 15:42:05.453451", "score": "0.5984", "loss": "0.9737", "code": "Entry<CharSequence>next() {advance(); MapEntry(v, map); }", "n_tokens": 24, "n_pass": [173, 18, 15]}
{"time": "2021-02-14 15:42:08.062182", "score": "0.5984", "loss": "0.9737", "code": "Entry<CharSequence>next() {advance(); MapEntry(v,map); }", "n_tokens": 23, "n_pass": [176, 19, 16]}
{"time": "2021-02-14 15:42:10.699401", "score": "0.5984", "loss": "0.9737", "code": "Entry<CharSequence>next() {advance(); MapEntry(v,map);}", "n_tokens": 22, "n_pass": [180, 20, 17]}
{"time": "2021-02-14 15:42:13.710415", "score": "0.5984", "loss": "0.9737", "code": "Entry<CharSequence>next(){advance(); MapEntry(v,map);}", "n_tokens": 21, "n_pass": [189, 21, 18]}
{"time": "2021-02-14 15:42:16.324917", "score": "0.5984", "loss": "0.9737", "code": "Entry<CharSequence>next(){advance();MapEntry(v,map);}", "n_tokens": 20, "n_pass": [195, 22, 19]}
{"time": "2021-02-14 15:42:18.937301", "score": "0.5819", "loss": "0.8359", "code": "Entry<CharSequence>next(){advance();MapEntry(vmap);}", "n_tokens": 19, "n_pass": [199, 23, 20]}
{"time": "2021-02-14 15:42:21.554482", "score": "0.6705", "loss": "0.5989", "code": "Entry<CharSequence>next(){advance();MapEntry(v);}", "n_tokens": 18, "n_pass": [200, 24, 21]}

Minimal simplified code:
Entry<CharSequence>next(){advance();MapEntry(v);}

