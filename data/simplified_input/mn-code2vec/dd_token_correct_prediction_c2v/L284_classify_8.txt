
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/commasrl/src/main/java/edu/illinois/cs/cogcomp/comma/lbj/ParseTreeFeature_classify.java
method_name = classify
method_body = public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples == null ? "null" : examples.getClass().getName(); System.err.println("Classifier 'ParseTreeFeature(Comma)' defined on line 75 of CommaClassifier.lbj received '" + type + "' as input."); new Exception().printStackTrace(); System.exit(1); } return super.classify(examples); }
predict, score, loss = classify, 0.9046224355697632, 0.13036778569221497

Trace of simplified code(s):
{"time": "2021-02-14 13:57:08.293724", "score": "0.9046", "loss": "0.1304", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples == null ? \"null\" : examples.getClass().getName(); System.err.println(\"Classifier 'ParseTreeFeature(Comma)' defined on line 75 of CommaClassifier.lbj received '\" + type + \"' as input.\"); new Exception().printStackTrace(); System.exit(1); } return super.classify(examples); }", "n_tokens": 151, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 13:57:10.966078", "score": "0.85", "loss": "0.2957", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples == null ? \"null\" : examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace(); System.exit(1); } return super.classify(examples); }", "n_tokens": 113, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 13:57:13.654321", "score": "0.8569", "loss": "0.2593", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples ==  examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace(); System.exit(1); } return super.classify(examples); }", "n_tokens": 104, "n_pass": [46, 3, 3]}
{"time": "2021-02-14 13:57:16.367253", "score": "0.8555", "loss": "0.2557", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples ==  examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace.exit(1); } return super.classify(examples); }", "n_tokens": 99, "n_pass": [87, 4, 4]}
{"time": "2021-02-14 13:57:19.027042", "score": "0.8804", "loss": "0.2248", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples instanceof Comma[])) { String type = examples ==  examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 94, "n_pass": [88, 5, 5]}
{"time": "2021-02-14 13:57:21.691730", "score": "0.9065", "loss": "0.1828", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { String type = examples ==  examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 89, "n_pass": [98, 6, 6]}
{"time": "2021-02-14 13:57:24.751173", "score": "0.9078", "loss": "0.1798", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { String type =  examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 84, "n_pass": [101, 7, 7]}
{"time": "2021-02-14 13:57:27.423382", "score": "0.7529", "loss": "0.5704", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) {   examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 79, "n_pass": [119, 8, 8]}
{"time": "2021-02-14 13:57:30.852987", "score": "0.7529", "loss": "0.5704", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examples.getClass().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 77, "n_pass": [171, 9, 9]}
{"time": "2021-02-14 13:57:33.516115", "score": "0.6635", "loss": "0.9119", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examples().getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 75, "n_pass": [173, 10, 10]}
{"time": "2021-02-14 13:57:36.204520", "score": "0.7642", "loss": "0.4626", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examples.getName(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 73, "n_pass": [174, 11, 11]}
{"time": "2021-02-14 13:57:38.850248", "score": "0.742", "loss": "0.5007", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examples(); System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 71, "n_pass": [175, 12, 12]}
{"time": "2021-02-14 13:57:41.516797", "score": "0.7784", "loss": "0.5028", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examples; System.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 69, "n_pass": [176, 13, 13]}
{"time": "2021-02-14 13:57:44.161392", "score": "0.7812", "loss": "0.4966", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesSystem.err.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 67, "n_pass": [177, 14, 14]}
{"time": "2021-02-14 13:57:46.841736", "score": "0.7959", "loss": "0.4525", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { exampleserr.println(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 65, "n_pass": [178, 15, 15]}
{"time": "2021-02-14 13:57:49.513052", "score": "0.8911", "loss": "0.2005", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesprintln(\"Classifier input.\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 63, "n_pass": [179, 16, 16]}
{"time": "2021-02-14 13:57:52.154519", "score": "0.8923", "loss": "0.153", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesprintln(\".\"); new Exception().printStackTrace; } return super.classify(examples); }", "n_tokens": 60, "n_pass": [181, 17, 17]}
{"time": "2021-02-14 13:57:54.822314", "score": "0.6996", "loss": "0.4503", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesprintln(\".\"); new Exception().printStackTrace; }super.classify(examples); }", "n_tokens": 57, "n_pass": [187, 18, 18]}
{"time": "2021-02-14 13:58:00.106258", "score": "0.3358", "loss": "2.1126", "code": "public FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesprintln(\".\"); new Exception().printStackTrace; }super.classify; }", "n_tokens": 54, "n_pass": [189, 20, 19]}
{"time": "2021-02-14 13:58:02.747190", "score": "0.3358", "loss": "2.1126", "code": "FeatureVector[] classify(Object[] examples) { if (!(examples )) { examplesprintln(\".\"); new Exception().printStackTrace; }super.classify; }", "n_tokens": 52, "n_pass": [191, 21, 20]}
{"time": "2021-02-14 13:58:05.398153", "score": "0.2901", "loss": "2.2202", "code": "FeatureVector[] classify(Object[] examples) { if (!(examples )) {println(\".\"); new Exception().printStackTrace; }super.classify; }", "n_tokens": 50, "n_pass": [205, 22, 21]}
{"time": "2021-02-14 13:58:19.345604", "score": "0.2901", "loss": "2.2202", "code": "FeatureVector[] classify(Object[] examples) { if (!(examples )) {println(\".\");new Exception().printStackTrace; }super.classify; }", "n_tokens": 49, "n_pass": [276, 26, 22]}
{"time": "2021-02-14 13:58:21.980121", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[] classify(Object[] examples) { if (!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 47, "n_pass": [277, 27, 23]}
{"time": "2021-02-14 13:58:27.273181", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[] examples) { if (!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 46, "n_pass": [288, 29, 24]}
{"time": "2021-02-14 13:58:29.910321", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples) { if (!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 45, "n_pass": [294, 30, 25]}
{"time": "2021-02-14 13:58:32.570557", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){ if (!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 44, "n_pass": [297, 31, 26]}
{"time": "2021-02-14 13:58:35.202022", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){if (!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 43, "n_pass": [299, 32, 27]}
{"time": "2021-02-14 13:58:37.833360", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){if(!(examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 42, "n_pass": [301, 33, 28]}
{"time": "2021-02-14 13:58:40.463455", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){if((examples )) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 41, "n_pass": [303, 34, 29]}
{"time": "2021-02-14 13:58:43.099897", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){if((examples)) {println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 40, "n_pass": [306, 35, 30]}
{"time": "2021-02-14 13:58:45.777347", "score": "0.307", "loss": "2.0954", "code": "FeatureVector[]classify(Object[]examples){if((examples)){println(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 39, "n_pass": [309, 36, 31]}
{"time": "2021-02-14 13:58:48.416148", "score": "0.2467", "loss": "1.8039", "code": "FeatureVector[]classify(Object[]examples){if((examples)){(\".\");Exception().printStackTrace; }super.classify; }", "n_tokens": 38, "n_pass": [311, 37, 32]}
{"time": "2021-02-14 13:58:57.818993", "score": "0.2467", "loss": "1.8039", "code": "FeatureVector[]classify(Object[]examples){if((examples)){(\".\");Exception().printStackTrace;}super.classify; }", "n_tokens": 37, "n_pass": [363, 40, 33]}
{"time": "2021-02-14 13:59:03.093251", "score": "0.2467", "loss": "1.8039", "code": "FeatureVector[]classify(Object[]examples){if((examples)){(\".\");Exception().printStackTrace;}super.classify;}", "n_tokens": 36, "n_pass": [368, 42, 34]}

Minimal simplified code:
FeatureVector[]classify(Object[]examples){if((examples)){(".");Exception().printStackTrace;}super.classify;}

