
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/kernel/kernel-impl/src/main/java/org/sakaiproject/time/impl/BasicTimeService_overlaps.java
method_name = overlaps
method_body = public boolean overlaps(TimeRange range) { boolean overlaps = false; if (range.contains(firstTime())) { overlaps = true; } else if (range.contains(lastTime())) { overlaps = true; } else if (contains(range)) { overlaps = true; } return overlaps; }
predict, score, loss = overlaps, 0.9525021910667419, 0.05034169927239418

Trace of simplified code(s):
{"time": "2021-02-14 05:30:47.001771", "score": "0.9525", "loss": "0.0503", "code": "public boolean overlaps(TimeRange range) { boolean overlaps = false; if (range.contains(firstTime())) { overlaps = true; } else if (range.contains(lastTime())) { overlaps = true; } else if (contains(range)) { overlaps = true; } return overlaps; }", "n_tokens": 100, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 05:30:49.676719", "score": "0.9866", "loss": "0.0141", "code": "public boolean overlaps(TimeRange range) { boolean overlaps = false; if (range.contains(firstTime())) { overlaps = true; } else if  (contains(range)) { overlaps = true; } return overlaps; }", "n_tokens": 75, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 05:30:52.335579", "score": "0.9852", "loss": "0.0156", "code": "public boolean overlaps(TimeRange range) { false; if (range.contains(firstTime())) { overlaps = true; } else if  (contains(range)) { overlaps = true; } return overlaps; }", "n_tokens": 69, "n_pass": [43, 3, 3]}
{"time": "2021-02-14 05:30:54.978376", "score": "0.9849", "loss": "0.016", "code": "public boolean overlaps(TimeRange range) { false; if (range.contains(firstTime())) {; } else if  (contains(range)) { overlaps = true; } return overlaps; }", "n_tokens": 63, "n_pass": [46, 4, 4]}
{"time": "2021-02-14 05:30:57.643484", "score": "0.986", "loss": "0.0151", "code": "public boolean overlaps(TimeRange range) { false; if (range.contains(firstTime())) {; }if  (contains(range)) { overlaps = true; } return overlaps; }", "n_tokens": 60, "n_pass": [78, 5, 5]}
{"time": "2021-02-14 05:31:00.292290", "score": "0.9766", "loss": "0.0255", "code": "public boolean overlaps(TimeRange range) { false; if (range.contains(firstTime())) {; }if  (contains(range)) {  true; } return overlaps; }", "n_tokens": 57, "n_pass": [83, 6, 6]}
{"time": "2021-02-14 05:31:02.924074", "score": "0.9772", "loss": "0.0248", "code": "public boolean overlaps(TimeRange range) { false; if (range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 53, "n_pass": [84, 7, 7]}
{"time": "2021-02-14 05:31:05.991697", "score": "0.9418", "loss": "0.0643", "code": "public boolean overlaps() { false; if (range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 50, "n_pass": [89, 8, 8]}
{"time": "2021-02-14 05:31:08.620928", "score": "0.9444", "loss": "0.0611", "code": "public boolean overlaps() { if (range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 47, "n_pass": [91, 9, 9]}
{"time": "2021-02-14 05:31:13.530474", "score": "0.9444", "loss": "0.0611", "code": "public boolean overlaps(){ if (range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 46, "n_pass": [138, 10, 10]}
{"time": "2021-02-14 05:31:16.168367", "score": "0.9444", "loss": "0.0611", "code": "public boolean overlaps(){if (range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 45, "n_pass": [140, 11, 11]}
{"time": "2021-02-14 05:31:18.801193", "score": "0.9444", "loss": "0.0611", "code": "public boolean overlaps(){if(range.contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 44, "n_pass": [142, 12, 12]}
{"time": "2021-02-14 05:31:21.446594", "score": "0.8209", "loss": "0.2012", "code": "public boolean overlaps(){if(contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 42, "n_pass": [144, 13, 13]}
{"time": "2021-02-14 05:31:26.689656", "score": "0.8209", "loss": "0.2012", "code": " boolean overlaps(){if(contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 41, "n_pass": [161, 15, 14]}
{"time": "2021-02-14 05:31:29.305468", "score": "0.8209", "loss": "0.2012", "code": "boolean overlaps(){if(contains(firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 40, "n_pass": [162, 16, 15]}
{"time": "2021-02-14 05:31:39.478503", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())) {; }if  (contains(range)) { } return overlaps; }", "n_tokens": 39, "n_pass": [219, 18, 16]}
{"time": "2021-02-14 05:31:42.095739", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())){; }if  (contains(range)) { } return overlaps; }", "n_tokens": 38, "n_pass": [225, 19, 17]}
{"time": "2021-02-14 05:31:44.711646", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())){ }if  (contains(range)) { } return overlaps; }", "n_tokens": 37, "n_pass": [227, 20, 18]}
{"time": "2021-02-14 05:31:47.327234", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())){}if  (contains(range)) { } return overlaps; }", "n_tokens": 36, "n_pass": [228, 21, 19]}
{"time": "2021-02-14 05:31:49.939891", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())){}if (contains(range)) { } return overlaps; }", "n_tokens": 35, "n_pass": [231, 22, 20]}
{"time": "2021-02-14 05:31:52.573473", "score": "0.9475", "loss": "0.0558", "code": "boolean overlaps(){if((firstTime())){}if(contains(range)) { } return overlaps; }", "n_tokens": 34, "n_pass": [232, 23, 21]}
{"time": "2021-02-14 05:31:55.211539", "score": "0.8886", "loss": "0.1229", "code": "boolean overlaps(){if((firstTime())){}if((range)) { } return overlaps; }", "n_tokens": 33, "n_pass": [234, 24, 22]}
{"time": "2021-02-14 05:31:57.824216", "score": "0.8886", "loss": "0.1229", "code": "boolean overlaps(){if((firstTime())){}if((range)){ } return overlaps; }", "n_tokens": 32, "n_pass": [239, 25, 23]}
{"time": "2021-02-14 05:32:00.438025", "score": "0.8886", "loss": "0.1229", "code": "boolean overlaps(){if((firstTime())){}if((range)){} return overlaps; }", "n_tokens": 31, "n_pass": [241, 26, 24]}
{"time": "2021-02-14 05:32:03.072550", "score": "0.8886", "loss": "0.1229", "code": "boolean overlaps(){if((firstTime())){}if((range)){}return overlaps; }", "n_tokens": 30, "n_pass": [243, 27, 25]}
{"time": "2021-02-14 05:32:05.685382", "score": "0.6269", "loss": "0.4834", "code": "boolean overlaps(){if((firstTime())){}if((range)){} overlaps; }", "n_tokens": 29, "n_pass": [244, 28, 26]}
{"time": "2021-02-14 05:32:08.300266", "score": "0.6269", "loss": "0.4834", "code": "boolean overlaps(){if((firstTime())){}if((range)){}overlaps; }", "n_tokens": 28, "n_pass": [245, 29, 27]}
{"time": "2021-02-14 05:32:13.541378", "score": "0.6269", "loss": "0.4834", "code": "boolean overlaps(){if((firstTime())){}if((range)){}overlaps;}", "n_tokens": 27, "n_pass": [248, 31, 28]}

Minimal simplified code:
boolean overlaps(){if((firstTime())){}if((range)){}overlaps;}

