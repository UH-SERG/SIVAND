
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/udacity__ud851-Sunshine/S09.03-Solution-ContentProviderDelete/app/src/main/java/com/example/android/sunshine/data/WeatherProvider_query.java
method_name = query
method_body = @Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + " = ? ", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException("Unknown uri: " + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }
predict, score, loss = query, 0.9876024127006531, 0.0281910989433527

Trace of simplified code(s):
{"time": "2021-02-16 04:18:31.368617", "score": "0.9647", "loss": "0.1386", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + \" = ? \", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 270, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 04:18:33.988256", "score": "0.96", "loss": "0.142", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 202, "n_pass": [10, 2, 2]}
{"time": "2021-02-16 04:18:36.633384", "score": "0.9962", "loss": "0.0065", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 193, "n_pass": [74, 3, 3]}
{"time": "2021-02-16 04:18:39.251864", "score": "0.9979", "loss": "0.0056", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 184, "n_pass": [80, 4, 4]}
{"time": "2021-02-16 04:18:41.859553", "score": "0.9957", "loss": "0.0075", "code": "@Override public Cursor query(@NonNull Uri uri,String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 176, "n_pass": [84, 5, 5]}
{"time": "2021-02-16 04:18:44.498459", "score": "0.9955", "loss": "0.0104", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 172, "n_pass": [148, 6, 6]}
{"time": "2021-02-16 04:18:47.114185", "score": "0.9971", "loss": "0.0044", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 168, "n_pass": [157, 7, 7]}
{"time": "2021-02-16 04:18:49.734799", "score": "0.9986", "loss": "0.0018", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 164, "n_pass": [161, 8, 8]}
{"time": "2021-02-16 04:18:52.357637", "score": "0.9982", "loss": "0.0037", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 160, "n_pass": [168, 9, 9]}
{"time": "2021-02-16 04:18:54.962100", "score": "0.9714", "loss": "0.0471", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 156, "n_pass": [169, 10, 10]}
{"time": "2021-02-16 04:18:57.565915", "score": "0.9985", "loss": "0.002", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 152, "n_pass": [171, 11, 11]}
{"time": "2021-02-16 04:19:00.162603", "score": "0.9973", "loss": "0.0051", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 148, "n_pass": [172, 12, 12]}
{"time": "2021-02-16 04:19:02.770870", "score": "0.999", "loss": "0.0013", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 144, "n_pass": [174, 13, 13]}
{"time": "2021-02-16 04:19:05.380397", "score": "0.998", "loss": "0.0028", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 139, "n_pass": [177, 14, 14]}
{"time": "2021-02-16 04:19:07.989857", "score": "0.9991", "loss": "0.0012", "code": " Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 135, "n_pass": [185, 15, 15]}
{"time": "2021-02-16 04:19:10.610109", "score": "0.9973", "loss": "0.0049", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 131, "n_pass": [188, 16, 16]}
{"time": "2021-02-16 04:19:13.243503", "score": "0.9977", "loss": "0.0029", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 127, "n_pass": [200, 17, 17]}
{"time": "2021-02-16 04:19:15.861047", "score": "0.997", "loss": "0.0046", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 123, "n_pass": [208, 18, 18]}
{"time": "2021-02-16 04:19:18.477152", "score": "0.9982", "loss": "0.0027", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 119, "n_pass": [230, 19, 19]}
{"time": "2021-02-16 04:19:22.123656", "score": "0.9966", "loss": "0.0045", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 117, "n_pass": [315, 20, 20]}
{"time": "2021-02-16 04:19:24.723758", "score": "0.9967", "loss": "0.0043", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 115, "n_pass": [323, 21, 21]}
{"time": "2021-02-16 04:19:27.404780", "score": "0.9982", "loss": "0.0026", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 113, "n_pass": [326, 22, 22]}
{"time": "2021-02-16 04:19:30.012514", "score": "0.9973", "loss": "0.0035", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 111, "n_pass": [330, 23, 23]}
{"time": "2021-02-16 04:19:32.634693", "score": "0.9981", "loss": "0.003", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  } UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 109, "n_pass": [332, 24, 24]}
{"time": "2021-02-16 04:19:35.230679", "score": "0.9983", "loss": "0.0023", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 107, "n_pass": [333, 25, 25]}
{"time": "2021-02-16 04:19:37.845245", "score": "0.9983", "loss": "0.0024", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\"uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 105, "n_pass": [335, 26, 26]}
{"time": "2021-02-16 04:19:40.434078", "score": "0.9983", "loss": "0.0024", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 103, "n_pass": [336, 27, 27]}
{"time": "2021-02-16 04:19:43.035742", "score": "0.9963", "loss": "0.0064", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); return cursor; }", "n_tokens": 100, "n_pass": [341, 28, 28]}
{"time": "2021-02-16 04:19:45.622126", "score": "0.9961", "loss": "0.0055", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 97, "n_pass": [344, 29, 29]}
{"time": "2021-02-16 04:19:48.982232", "score": "0.9897", "loss": "0.0122", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 95, "n_pass": [351, 30, 30]}
{"time": "2021-02-16 04:19:51.584005", "score": "0.9904", "loss": "0.0115", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 93, "n_pass": [357, 31, 31]}
{"time": "2021-02-16 04:19:54.206101", "score": "0.9894", "loss": "0.0124", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 91, "n_pass": [358, 32, 32]}
{"time": "2021-02-16 04:19:56.778584", "score": "0.9894", "loss": "0.0124", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 89, "n_pass": [359, 33, 33]}
{"time": "2021-02-16 04:19:59.378126", "score": "0.9962", "loss": "0.0064", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 87, "n_pass": [361, 34, 34]}
{"time": "2021-02-16 04:20:01.964880", "score": "0.9961", "loss": "0.0069", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 85, "n_pass": [367, 35, 35]}
{"time": "2021-02-16 04:20:04.556758", "score": "0.9966", "loss": "0.0057", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 83, "n_pass": [379, 36, 36]}
{"time": "2021-02-16 04:20:17.310127", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 82, "n_pass": [498, 37, 37]}
{"time": "2021-02-16 04:20:19.894056", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder); }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 81, "n_pass": [502, 38, 38]}
{"time": "2021-02-16 04:20:22.476086", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 80, "n_pass": [503, 39, 39]}
{"time": "2021-02-16 04:20:25.060790", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 79, "n_pass": [507, 40, 40]}
{"time": "2021-02-16 04:20:27.632194", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+ uri); }setNotificationUri(getContext); ; }", "n_tokens": 78, "n_pass": [509, 41, 41]}
{"time": "2021-02-16 04:20:30.198930", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri); }setNotificationUri(getContext); ; }", "n_tokens": 77, "n_pass": [511, 42, 42]}
{"time": "2021-02-16 04:20:32.770076", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); ; }", "n_tokens": 76, "n_pass": [515, 43, 43]}
{"time": "2021-02-16 04:20:35.364011", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 74, "n_pass": [519, 44, 44]}
{"time": "2021-02-16 04:20:37.956087", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 73, "n_pass": [521, 45, 45]}
{"time": "2021-02-16 04:20:41.635529", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 72, "n_pass": [528, 46, 46]}
{"time": "2021-02-16 04:20:44.237747", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 71, "n_pass": [534, 47, 47]}
{"time": "2021-02-16 04:20:46.831224", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 70, "n_pass": [539, 48, 48]}
{"time": "2021-02-16 04:20:49.398148", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 69, "n_pass": [543, 49, 49]}
{"time": "2021-02-16 04:20:51.973833", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){ case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 68, "n_pass": [548, 50, 50]}
{"time": "2021-02-16 04:20:54.547089", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 67, "n_pass": [550, 51, 51]}
{"time": "2021-02-16 04:20:57.120688", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 66, "n_pass": [555, 52, 52]}
{"time": "2021-02-16 04:20:59.697628", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 65, "n_pass": [560, 53, 53]}
{"time": "2021-02-16 04:21:02.273936", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments= new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 64, "n_pass": [562, 54, 54]}
{"time": "2021-02-16 04:21:04.845905", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 63, "n_pass": [564, 55, 55]}
{"time": "2021-02-16 04:21:07.426147", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{ };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 62, "n_pass": [570, 56, 56]}
{"time": "2021-02-16 04:21:10.002571", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 61, "n_pass": [572, 57, 57]}
{"time": "2021-02-16 04:21:14.442411", "score": "0.7655", "loss": "0.326", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}(getContext); }", "n_tokens": 60, "n_pass": [639, 58, 58]}
{"time": "2021-02-16 04:21:17.036387", "score": "0.7655", "loss": "0.326", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}(getContext);}", "n_tokens": 59, "n_pass": [644, 59, 59]}

Minimal simplified code:
Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(""+uri);}(getContext);}

