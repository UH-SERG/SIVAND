
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/util/AsymmetricBlockCipher_doFinal.java
method_name = doFinal
method_body = public final int doFinal(byte[] input, int inOff, int inLen, byte[] output, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException("Output buffer too short."); } byte[] out = doFinal(input, inOff, inLen); System.arraycopy(out, 0, output, outOff, out.length); return out.length; }
predict, score, loss = doFinal, 0.9598247408866882, 0.04328569397330284

Trace of simplified code(s):
{"time": "2021-02-15 03:38:37.867075", "score": "0.9982", "loss": "0.002", "code": "public final int doFinal(byte[] input, int inOff, int inLen, byte[] output, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, inLen); System.arraycopy(out, 0, output, outOff, out.length); return out.length; }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 03:38:40.527303", "score": "0.9971", "loss": "0.0032", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, inLen); System.arraycopy(out, 0, output, outOff, out.length); return out.length; }", "n_tokens": 120, "n_pass": [21, 2, 2]}
{"time": "2021-02-15 03:38:43.208560", "score": "0.9934", "loss": "0.007", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 103, "n_pass": [26, 3, 3]}
{"time": "2021-02-15 03:38:45.867893", "score": "0.9822", "loss": "0.019", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length); return out.length; }", "n_tokens": 98, "n_pass": [81, 4, 4]}
{"time": "2021-02-15 03:38:48.518043", "score": "0.981", "loss": "0.0201", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 93, "n_pass": [83, 5, 5]}
{"time": "2021-02-15 03:38:51.149822", "score": "0.981", "loss": "0.0201", "code": "int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 89, "n_pass": [85, 6, 6]}
{"time": "2021-02-15 03:38:53.781684", "score": "0.9874", "loss": "0.0135", "code": "int doFinal(byte[]  outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 85, "n_pass": [88, 7, 7]}
{"time": "2021-02-15 03:38:56.425157", "score": "0.9941", "loss": "0.0062", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 81, "n_pass": [91, 8, 8]}
{"time": "2021-02-15 03:38:59.082708", "score": "0.9902", "loss": "0.0104", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 77, "n_pass": [97, 9, 9]}
{"time": "2021-02-15 03:39:01.761878", "score": "0.9971", "loss": "0.0039", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"too short.\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 73, "n_pass": [99, 10, 10]}
{"time": "2021-02-15 03:39:04.392816", "score": "0.9987", "loss": "0.0015", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 69, "n_pass": [100, 11, 11]}
{"time": "2021-02-15 03:39:07.403847", "score": "0.9994", "loss": "0.0006", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(inputout.length).length; }", "n_tokens": 66, "n_pass": [157, 12, 12]}
{"time": "2021-02-15 03:39:10.029995", "score": "0.9994", "loss": "0.0007", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 63, "n_pass": [158, 13, 13]}
{"time": "2021-02-15 03:39:13.091728", "score": "0.9967", "loss": "0.0036", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 61, "n_pass": [168, 14, 14]}
{"time": "2021-02-15 03:39:15.774093", "score": "0.9973", "loss": "0.0029", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 59, "n_pass": [173, 15, 15]}
{"time": "2021-02-15 03:39:18.425461", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 57, "n_pass": [175, 16, 16]}
{"time": "2021-02-15 03:39:21.101139", "score": "0.9999", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 55, "n_pass": [179, 17, 17]}
{"time": "2021-02-15 03:39:24.232061", "score": "0.9998", "loss": "0.0002", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output(inLen)) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 53, "n_pass": [202, 18, 18]}
{"time": "2021-02-15 03:39:32.752255", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 52, "n_pass": [279, 19, 19]}
{"time": "2021-02-15 03:39:35.411944", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 51, "n_pass": [282, 20, 20]}
{"time": "2021-02-15 03:39:38.082466", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");} byte[] out = doFinal(input).length; }", "n_tokens": 50, "n_pass": [289, 21, 21]}
{"time": "2021-02-15 03:39:40.710459", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[] out = doFinal(input).length; }", "n_tokens": 49, "n_pass": [291, 22, 22]}
{"time": "2021-02-15 03:39:43.350139", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out = doFinal(input).length; }", "n_tokens": 48, "n_pass": [295, 23, 23]}
{"time": "2021-02-15 03:39:46.034925", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out= doFinal(input).length; }", "n_tokens": 47, "n_pass": [297, 24, 24]}
{"time": "2021-02-15 03:39:48.653001", "score": "1.0", "loss": "0.0001", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal(input).length; }", "n_tokens": 46, "n_pass": [299, 25, 25]}
{"time": "2021-02-15 03:39:51.335982", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 45, "n_pass": [300, 26, 26]}
{"time": "2021-02-15 03:39:54.785809", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[] outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 44, "n_pass": [313, 27, 27]}
{"time": "2021-02-15 03:39:57.413879", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 43, "n_pass": [314, 28, 28]}
{"time": "2021-02-15 03:40:00.039024", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException { if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 42, "n_pass": [317, 29, 29]}
{"time": "2021-02-15 03:40:02.670804", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException{ if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 41, "n_pass": [321, 30, 30]}
{"time": "2021-02-15 03:40:05.305968", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if (output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 40, "n_pass": [323, 31, 31]}
{"time": "2021-02-15 03:40:07.942469", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=(input).length; }", "n_tokens": 39, "n_pass": [325, 32, 32]}
{"time": "2021-02-15 03:40:12.129276", "score": "0.9996", "loss": "0.0005", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=(input)length; }", "n_tokens": 38, "n_pass": [369, 33, 33]}
{"time": "2021-02-15 03:40:14.795449", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=(input); }", "n_tokens": 37, "n_pass": [370, 34, 34]}
{"time": "2021-02-15 03:40:17.420974", "score": "0.9998", "loss": "0.0003", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=(input);}", "n_tokens": 36, "n_pass": [372, 35, 35]}

Minimal simplified code:
int doFinal(byte[]outOff)throws BadPaddingException{if(output()){("");}byte[]out=(input);}

