
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Treeptik__cloudunit/cu-core/src/main/java/fr/treeptik/cloudunit/model/Image_equals.java
method_name = equals
method_body = @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Image other = (Image) obj; if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }
predict, score, loss = equals, 0.9999959468841553, 5.364403477869928e-06

Trace of simplified code(s):
{"time": "2021-02-15 02:56:32.241285", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Image other = (Image) obj; if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }", "n_tokens": 143, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 02:56:34.933317", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass()) return false; Image other = (Image) obj; if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }", "n_tokens": 134, "n_pass": [50, 2, 2]}
{"time": "2021-02-15 02:56:37.613369", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass()) return false; Imageobj; if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }", "n_tokens": 125, "n_pass": [51, 3, 3]}
{"time": "2021-02-15 02:56:40.377040", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass())  Imageobj; if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }", "n_tokens": 121, "n_pass": [94, 4, 4]}
{"time": "2021-02-15 02:56:43.266891", "score": "0.9994", "loss": "0.0008", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return false; return true; }", "n_tokens": 116, "n_pass": [95, 5, 5]}
{"time": "2021-02-15 02:56:45.994765", "score": "0.9985", "loss": "0.0024", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 111, "n_pass": [106, 6, 6]}
{"time": "2021-02-15 02:56:48.663410", "score": "0.9941", "loss": "0.0088", "code": " boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 107, "n_pass": [108, 7, 7]}
{"time": "2021-02-15 02:56:51.328978", "score": "0.9857", "loss": "0.0242", "code": " boolean equals(Object obj) { if (thisobj) return true; if (obj == null) return false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 103, "n_pass": [113, 8, 8]}
{"time": "2021-02-15 02:56:54.036898", "score": "0.9824", "loss": "0.031", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull) return false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 99, "n_pass": [117, 9, 9]}
{"time": "2021-02-15 02:56:57.478421", "score": "0.9883", "loss": "0.0207", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull) false; if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 97, "n_pass": [185, 10, 10]}
{"time": "2021-02-15 02:57:00.292507", "score": "0.9883", "loss": "0.0206", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull); if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 95, "n_pass": [186, 11, 11]}
{"time": "2021-02-15 02:57:02.948941", "score": "0.9951", "loss": "0.0089", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull)if (getClass()) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 93, "n_pass": [187, 12, 12]}
{"time": "2021-02-15 02:57:05.604649", "score": "0.995", "loss": "0.0093", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull)if (getClass) if (name == null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 91, "n_pass": [190, 13, 13]}
{"time": "2021-02-15 02:57:08.276194", "score": "0.9949", "loss": "0.0093", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull)if (getClass) if (name= null) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 89, "n_pass": [194, 14, 14]}
{"time": "2021-02-15 02:57:10.912320", "score": "0.9566", "loss": "0.1365", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull)if (getClass) if (namenull) { if (other.name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 87, "n_pass": [195, 15, 15]}
{"time": "2021-02-15 02:57:13.659108", "score": "0.5586", "loss": "1.5913", "code": " boolean equals(Object obj) { if (thisobj) return true; if (objnull)if (getClass) if (namenull) { if (name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 85, "n_pass": [200, 16, 16]}
{"time": "2021-02-15 02:57:24.714281", "score": "0.5252", "loss": "1.6371", "code": " boolean equals(Object obj) { if (thisobj) true; if (objnull)if (getClass) if (namenull) { if (name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 83, "n_pass": [223, 20, 17]}
{"time": "2021-02-15 02:57:27.395739", "score": "0.5523", "loss": "1.558", "code": " boolean equals(Object obj) { if (thisobj); if (objnull)if (getClass) if (namenull) { if (name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 81, "n_pass": [224, 21, 18]}
{"time": "2021-02-15 02:57:30.039215", "score": "0.9636", "loss": "0.1474", "code": " boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null) return false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 79, "n_pass": [225, 22, 19]}
{"time": "2021-02-15 02:57:32.730367", "score": "0.8087", "loss": "0.7549", "code": " boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name.equals(other.name)) return true; }", "n_tokens": 76, "n_pass": [241, 23, 20]}
{"time": "2021-02-15 02:57:35.409649", "score": "0.5583", "loss": "1.3532", "code": " boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name.equals()) return true; }", "n_tokens": 73, "n_pass": [247, 24, 21]}
{"time": "2021-02-15 02:57:47.791156", "score": "0.5431", "loss": "1.3746", "code": " boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name()) return true; }", "n_tokens": 71, "n_pass": [344, 26, 22]}
{"time": "2021-02-15 02:57:50.508487", "score": "0.3959", "loss": "1.9055", "code": " boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 69, "n_pass": [345, 27, 23]}
{"time": "2021-02-15 02:57:55.826818", "score": "0.3959", "loss": "1.9055", "code": "boolean equals(Object obj) { if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 68, "n_pass": [350, 29, 24]}
{"time": "2021-02-15 02:57:59.293054", "score": "0.3959", "loss": "1.9055", "code": "boolean equals(Object obj){ if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 67, "n_pass": [359, 30, 25]}
{"time": "2021-02-15 02:58:01.941597", "score": "0.3959", "loss": "1.9055", "code": "boolean equals(Object obj){if (thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 66, "n_pass": [361, 31, 26]}
{"time": "2021-02-15 02:58:04.608053", "score": "0.3959", "loss": "1.9055", "code": "boolean equals(Object obj){if(thisobj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 65, "n_pass": [363, 32, 27]}
{"time": "2021-02-15 02:58:07.254554", "score": "0.6473", "loss": "1.1052", "code": "boolean equals(Object obj){if(obj)if (objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 64, "n_pass": [365, 33, 28]}
{"time": "2021-02-15 02:58:09.890841", "score": "0.6473", "loss": "1.1052", "code": "boolean equals(Object obj){if(obj)if(objnull)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 63, "n_pass": [369, 34, 29]}
{"time": "2021-02-15 02:58:12.557609", "score": "0.8199", "loss": "0.632", "code": "boolean equals(Object obj){if(obj)if(null)if (getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 62, "n_pass": [371, 35, 30]}
{"time": "2021-02-15 02:58:15.199256", "score": "0.8199", "loss": "0.632", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass) if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 61, "n_pass": [375, 36, 31]}
{"time": "2021-02-15 02:58:17.858375", "score": "0.8199", "loss": "0.632", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if (namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 60, "n_pass": [379, 37, 32]}
{"time": "2021-02-15 02:58:20.577254", "score": "0.8199", "loss": "0.632", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(namenull) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 59, "n_pass": [381, 38, 33]}
{"time": "2021-02-15 02:58:23.225118", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null) { if (name != null)false; } else if (!name) return true; }", "n_tokens": 58, "n_pass": [383, 39, 34]}
{"time": "2021-02-15 02:58:25.910481", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){ if (name != null)false; } else if (!name) return true; }", "n_tokens": 57, "n_pass": [386, 40, 35]}
{"time": "2021-02-15 02:58:28.562126", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if (name != null)false; } else if (!name) return true; }", "n_tokens": 56, "n_pass": [388, 41, 36]}
{"time": "2021-02-15 02:58:31.312772", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name != null)false; } else if (!name) return true; }", "n_tokens": 55, "n_pass": [390, 42, 37]}
{"time": "2021-02-15 02:58:33.948925", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!= null)false; } else if (!name) return true; }", "n_tokens": 54, "n_pass": [393, 43, 38]}
{"time": "2021-02-15 02:58:39.233738", "score": "0.9851", "loss": "0.0549", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!=null)false; } else if (!name) return true; }", "n_tokens": 53, "n_pass": [396, 45, 39]}
{"time": "2021-02-15 02:58:41.863918", "score": "0.9855", "loss": "0.0529", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!=null); } else if (!name) return true; }", "n_tokens": 52, "n_pass": [399, 46, 40]}
{"time": "2021-02-15 02:58:44.493832", "score": "0.9855", "loss": "0.0529", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!=null);} else if (!name) return true; }", "n_tokens": 51, "n_pass": [401, 47, 41]}
{"time": "2021-02-15 02:58:47.129668", "score": "0.9855", "loss": "0.0529", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!=null);}else if (!name) return true; }", "n_tokens": 50, "n_pass": [403, 48, 42]}
{"time": "2021-02-15 02:58:49.751769", "score": "0.386", "loss": "1.2059", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){if(name!=null);} if (!name) return true; }", "n_tokens": 49, "n_pass": [404, 49, 43]}
{"time": "2021-02-15 02:58:55.827745", "score": "0.3922", "loss": "1.1841", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);} if (!name) return true; }", "n_tokens": 48, "n_pass": [438, 51, 44]}
{"time": "2021-02-15 02:59:06.861208", "score": "0.3922", "loss": "1.1841", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);}if (!name) return true; }", "n_tokens": 47, "n_pass": [494, 54, 45]}
{"time": "2021-02-15 02:59:09.514175", "score": "0.3922", "loss": "1.1841", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);}if(!name) return true; }", "n_tokens": 46, "n_pass": [495, 55, 46]}
{"time": "2021-02-15 02:59:14.817194", "score": "0.3922", "loss": "1.1841", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);}if(!name)return true; }", "n_tokens": 45, "n_pass": [500, 57, 47]}
{"time": "2021-02-15 02:59:25.558269", "score": "0.3922", "loss": "1.1841", "code": "boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);}if(!name)return true;}", "n_tokens": 44, "n_pass": [505, 61, 48]}

Minimal simplified code:
boolean equals(Object obj){if(obj)if(null)if(getClass)if(null){(name!=null);}if(!name)return true;}

