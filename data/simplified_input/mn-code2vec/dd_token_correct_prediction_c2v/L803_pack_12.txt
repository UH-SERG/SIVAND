
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/dependencyLibs/Mavlink/src/com/MAVLink/ardupilotmega/msg_compassmot_status_pack.java
method_name = pack
method_body = public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_COMPASSMOT_STATUS; packet.payload.putFloat(current); packet.payload.putFloat(CompensationX); packet.payload.putFloat(CompensationY); packet.payload.putFloat(CompensationZ); packet.payload.putUnsignedShort(throttle); packet.payload.putUnsignedShort(interference); return packet; }
predict, score, loss = pack, 0.9997943043708801, 0.0004104725376237184

Trace of simplified code(s):
{"time": "2021-02-16 02:33:58.815385", "score": "1.0", "loss": "0.0", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_COMPASSMOT_STATUS; packet.payload.putFloat(current); packet.payload.putFloat(CompensationX); packet.payload.putFloat(CompensationY); packet.payload.putFloat(CompensationZ); packet.payload.putUnsignedShort(throttle); packet.payload.putUnsignedShort(interference); return packet; }", "n_tokens": 133, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 02:34:01.424837", "score": "1.0", "loss": "0.0001", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = packet.payload.putFloat(current); packet.payload.putFloat(CompensationX); packet.payload.putFloat(CompensationY); packet.payload.putFloat(CompensationZ); packet.payload.putUnsignedShort(throttle); packet.payload.putUnsignedShort(interference); return packet; }", "n_tokens": 100, "n_pass": [9, 2, 2]}
{"time": "2021-02-16 02:34:04.023627", "score": "0.9971", "loss": "0.0031", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid =payload.putFloat(CompensationZ); packet.payload.putUnsignedShort(throttle); packet.payload.putUnsignedShort(interference); return packet; }", "n_tokens": 67, "n_pass": [10, 3, 3]}
{"time": "2021-02-16 02:34:06.597639", "score": "1.0", "loss": "0.0", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = packet.payload.putUnsignedShort(interference); return packet; }", "n_tokens": 50, "n_pass": [15, 4, 4]}
{"time": "2021-02-16 02:34:09.221451", "score": "0.9983", "loss": "0.0026", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet.payload.putUnsignedShort(interference); return packet; }", "n_tokens": 33, "n_pass": [17, 5, 5]}
{"time": "2021-02-16 02:34:12.517964", "score": "0.9986", "loss": "0.0021", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet.putUnsignedShort(interference); return packet; }", "n_tokens": 31, "n_pass": [59, 6, 6]}
{"time": "2021-02-16 02:34:15.161612", "score": "0.9996", "loss": "0.0006", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet(interference); return packet; }", "n_tokens": 29, "n_pass": [60, 7, 7]}
{"time": "2021-02-16 02:34:17.709420", "score": "0.9996", "loss": "0.0006", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet(interference); packet; }", "n_tokens": 27, "n_pass": [63, 8, 8]}
{"time": "2021-02-16 02:34:20.244892", "score": "0.9996", "loss": "0.0006", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet(interference);; }", "n_tokens": 25, "n_pass": [64, 9, 9]}
{"time": "2021-02-16 02:34:22.795734", "score": "0.9996", "loss": "0.0006", "code": "MAVLinkPacket pack() { MAVLinkPacket packet =  packet(interference);; }", "n_tokens": 23, "n_pass": [66, 10, 10]}
{"time": "2021-02-16 02:34:25.713091", "score": "0.9957", "loss": "0.0052", "code": "MAVLinkPacket pack() { packet =  packet(interference);; }", "n_tokens": 21, "n_pass": [71, 11, 11]}
{"time": "2021-02-16 02:34:28.280599", "score": "0.9995", "loss": "0.0016", "code": "MAVLinkPacket pack() { packet = (interference);; }", "n_tokens": 19, "n_pass": [74, 12, 12]}
{"time": "2021-02-16 02:34:31.236963", "score": "0.9994", "loss": "0.0009", "code": "MAVLinkPacket pack() { packet (interference);; }", "n_tokens": 17, "n_pass": [83, 13, 13]}
{"time": "2021-02-16 02:34:34.131683", "score": "0.9968", "loss": "0.0085", "code": "MAVLinkPacket pack() { (interference);; }", "n_tokens": 15, "n_pass": [91, 14, 14]}
{"time": "2021-02-16 02:34:38.775918", "score": "0.9968", "loss": "0.0085", "code": "MAVLinkPacket pack() { (interference); }", "n_tokens": 14, "n_pass": [116, 15, 15]}
{"time": "2021-02-16 02:34:42.480782", "score": "0.9968", "loss": "0.0085", "code": "MAVLinkPacket pack(){ (interference); }", "n_tokens": 13, "n_pass": [124, 16, 16]}
{"time": "2021-02-16 02:34:45.010141", "score": "0.9968", "loss": "0.0085", "code": "MAVLinkPacket pack(){(interference); }", "n_tokens": 12, "n_pass": [126, 17, 17]}
{"time": "2021-02-16 02:34:49.072612", "score": "0.9968", "loss": "0.0085", "code": "MAVLinkPacket pack(){(interference);}", "n_tokens": 11, "n_pass": [140, 18, 18]}

Minimal simplified code:
MAVLinkPacket pack(){(interference);}

