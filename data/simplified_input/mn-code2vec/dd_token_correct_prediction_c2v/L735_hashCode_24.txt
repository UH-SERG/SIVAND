
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wildfly__jandex/src/main/java/org/jboss/jandex/WildcardType_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int hash = this.hash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }
predict, score, loss = hashCode, 0.9995703101158142, 0.00047958316281437874

Trace of simplified code(s):
{"time": "2021-02-16 00:28:27.391761", "score": "0.9996", "loss": "0.0005", "code": "@Override public int hashCode() { int hash = this.hash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 113, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 00:28:30.422615", "score": "0.9996", "loss": "0.0005", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 106, "n_pass": [46, 2, 2]}
{"time": "2021-02-16 00:28:33.019917", "score": "0.9992", "loss": "0.0009", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 99, "n_pass": [53, 3, 3]}
{"time": "2021-02-16 00:28:35.635699", "score": "0.9988", "loss": "0.0012", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); return this.hash = hash; }", "n_tokens": 92, "n_pass": [55, 4, 4]}
{"time": "2021-02-16 00:28:38.636734", "score": "0.9979", "loss": "0.0022", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash = hash; }", "n_tokens": 88, "n_pass": [98, 5, 5]}
{"time": "2021-02-16 00:28:41.211367", "score": "0.9993", "loss": "0.0007", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 84, "n_pass": [99, 6, 6]}
{"time": "2021-02-16 00:28:43.773358", "score": "0.9653", "loss": "0.038", "code": "public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 81, "n_pass": [101, 7, 7]}
{"time": "2021-02-16 00:28:46.698644", "score": "0.9605", "loss": "0.0432", "code": "public int hashCode() {; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 78, "n_pass": [105, 8, 8]}
{"time": "2021-02-16 00:28:49.269306", "score": "0.9639", "loss": "0.0395", "code": "public int hashCode() {; if (hash != 0) { ; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 75, "n_pass": [111, 9, 9]}
{"time": "2021-02-16 00:28:51.853700", "score": "0.9375", "loss": "0.0714", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 71, "n_pass": [113, 10, 10]}
{"time": "2021-02-16 00:28:54.429973", "score": "0.568", "loss": "0.6298", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 67, "n_pass": [115, 11, 11]}
{"time": "2021-02-16 00:28:57.383575", "score": "0.9517", "loss": "0.116", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 63, "n_pass": [117, 12, 12]}
{"time": "2021-02-16 00:28:59.966406", "score": "0.9447", "loss": "0.1226", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 59, "n_pass": [118, 13, 13]}
{"time": "2021-02-16 00:29:02.547915", "score": "0.5842", "loss": "0.7601", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 55, "n_pass": [123, 14, 14]}
{"time": "2021-02-16 00:29:05.459149", "score": "0.9747", "loss": "0.0352", "code": "public int hashCode() {; if (hash != 0) { ; }hash =  (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 51, "n_pass": [134, 15, 15]}
{"time": "2021-02-16 00:29:08.027362", "score": "0.9805", "loss": "0.0404", "code": "public int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 47, "n_pass": [135, 16, 16]}
{"time": "2021-02-16 00:29:10.553835", "score": "0.9892", "loss": "0.0214", "code": "public int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 43, "n_pass": [139, 17, 17]}
{"time": "2021-02-16 00:29:13.450490", "score": "0.5364", "loss": "0.7997", "code": "public int hashCode() {; if (hash != 0) { ; } (isExtends0); hashhash; }", "n_tokens": 39, "n_pass": [152, 18, 18]}
{"time": "2021-02-16 00:29:18.004307", "score": "0.5364", "loss": "0.7997", "code": " int hashCode() {; if (hash != 0) { ; } (isExtends0); hashhash; }", "n_tokens": 38, "n_pass": [191, 19, 19]}
{"time": "2021-02-16 00:29:20.542613", "score": "0.5364", "loss": "0.7997", "code": "int hashCode() {; if (hash != 0) { ; } (isExtends0); hashhash; }", "n_tokens": 37, "n_pass": [192, 20, 20]}
{"time": "2021-02-16 00:29:23.506768", "score": "0.5364", "loss": "0.7997", "code": "int hashCode(){; if (hash != 0) { ; } (isExtends0); hashhash; }", "n_tokens": 36, "n_pass": [197, 21, 21]}
{"time": "2021-02-16 00:29:26.053594", "score": "0.5364", "loss": "0.7997", "code": "int hashCode(){if (hash != 0) { ; } (isExtends0); hashhash; }", "n_tokens": 34, "n_pass": [199, 22, 22]}
{"time": "2021-02-16 00:29:31.096706", "score": "0.5364", "loss": "0.7997", "code": "int hashCode(){if (hash != 0) { } (isExtends0); hashhash; }", "n_tokens": 32, "n_pass": [206, 24, 23]}
{"time": "2021-02-16 00:29:33.639055", "score": "0.574", "loss": "0.7487", "code": "int hashCode(){if (hash != 0) { } (isExtends0);hash; }", "n_tokens": 30, "n_pass": [211, 25, 24]}
{"time": "2021-02-16 00:29:36.185604", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if (hash != 0) { } (isExtends0); }", "n_tokens": 28, "n_pass": [212, 26, 25]}
{"time": "2021-02-16 00:29:44.643984", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if (hash != 0) { } (isExtends0);}", "n_tokens": 27, "n_pass": [252, 28, 26]}
{"time": "2021-02-16 00:29:47.897370", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash != 0) { } (isExtends0);}", "n_tokens": 26, "n_pass": [260, 29, 27]}
{"time": "2021-02-16 00:29:50.407374", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash!= 0) { } (isExtends0);}", "n_tokens": 25, "n_pass": [263, 30, 28]}
{"time": "2021-02-16 00:29:55.432690", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash!=0) { } (isExtends0);}", "n_tokens": 24, "n_pass": [266, 32, 29]}
{"time": "2021-02-16 00:29:57.968469", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash!=0){ } (isExtends0);}", "n_tokens": 23, "n_pass": [269, 33, 30]}
{"time": "2021-02-16 00:30:00.500668", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash!=0){} (isExtends0);}", "n_tokens": 22, "n_pass": [271, 34, 31]}
{"time": "2021-02-16 00:30:03.027928", "score": "0.3274", "loss": "1.3838", "code": "int hashCode(){if(hash!=0){}(isExtends0);}", "n_tokens": 21, "n_pass": [273, 35, 32]}
{"time": "2021-02-16 00:30:05.533323", "score": "0.7044", "loss": "0.6385", "code": "int hashCode(){if(hash!=0){}(0);}", "n_tokens": 20, "n_pass": [275, 36, 33]}

Minimal simplified code:
int hashCode(){if(hash!=0){}(0);}

