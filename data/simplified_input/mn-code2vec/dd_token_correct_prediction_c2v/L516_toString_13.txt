
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/SINTEF-9012__JArduino/jarduino.core/src/main/java/org/sintef/jarduino/msg/AnalogReadMsg_toString.java
method_name = toString
method_body = @Override public String toString() { String myString = "analogRead:"; myString += " [pin: " + pin + "]"; return myString; }
predict, score, loss = toString, 0.9914669990539551, 0.026126375421881676

Trace of simplified code(s):
{"time": "2021-02-14 21:24:36.468871", "score": "0.9915", "loss": "0.0261", "code": "@Override public String toString() { String myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 55, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 21:24:39.906371", "score": "0.9685", "loss": "0.0711", "code": "public String toString() { String myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 52, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 21:24:42.557898", "score": "0.9088", "loss": "0.222", "code": "public String toString() {myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 49, "n_pass": [47, 3, 3]}
{"time": "2021-02-14 21:24:45.220125", "score": "0.9613", "loss": "0.0947", "code": "public String toString() { \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 46, "n_pass": [48, 4, 4]}
{"time": "2021-02-14 21:24:47.881910", "score": "0.9953", "loss": "0.007", "code": "public String toString() { \"analogRead:\"; myString += \" \" + pin + \"]\"; return myString; }", "n_tokens": 42, "n_pass": [53, 5, 5]}
{"time": "2021-02-14 21:24:50.496675", "score": "0.999", "loss": "0.001", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\"; return myString; }", "n_tokens": 38, "n_pass": [55, 6, 6]}
{"time": "2021-02-14 21:24:55.042927", "score": "0.9997", "loss": "0.0003", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\"; myString; }", "n_tokens": 36, "n_pass": [92, 7, 7]}
{"time": "2021-02-14 21:24:57.699465", "score": "0.9998", "loss": "0.0003", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 34, "n_pass": [93, 8, 8]}
{"time": "2021-02-14 21:25:00.300261", "score": "0.9998", "loss": "0.0003", "code": " String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 33, "n_pass": [95, 9, 9]}
{"time": "2021-02-14 21:25:02.918638", "score": "0.9998", "loss": "0.0003", "code": "String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 32, "n_pass": [96, 10, 10]}
{"time": "2021-02-14 21:25:11.273072", "score": "0.9998", "loss": "0.0003", "code": "String toString(){ \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 31, "n_pass": [144, 11, 11]}
{"time": "2021-02-14 21:25:13.910651", "score": "0.9998", "loss": "0.0003", "code": "String toString(){\"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 30, "n_pass": [146, 12, 12]}
{"time": "2021-02-14 21:25:16.518130", "score": "0.9997", "loss": "0.0003", "code": "String toString(){\":\"; myString += \" \" + \"]\";  }", "n_tokens": 29, "n_pass": [148, 13, 13]}
{"time": "2021-02-14 21:25:19.125660", "score": "0.9998", "loss": "0.0003", "code": "String toString(){\"\"; myString += \" \" + \"]\";  }", "n_tokens": 28, "n_pass": [149, 14, 14]}
{"time": "2021-02-14 21:25:21.768711", "score": "0.9998", "loss": "0.0003", "code": "String toString(){\"\";myString += \" \" + \"]\";  }", "n_tokens": 27, "n_pass": [152, 15, 15]}
{"time": "2021-02-14 21:25:24.378181", "score": "0.9998", "loss": "0.0003", "code": "String toString(){\"\";myString+= \" \" + \"]\";  }", "n_tokens": 26, "n_pass": [154, 16, 16]}
{"time": "2021-02-14 21:25:26.994535", "score": "0.9697", "loss": "0.0593", "code": "String toString(){\"\";myString= \" \" + \"]\";  }", "n_tokens": 25, "n_pass": [155, 17, 17]}
{"time": "2021-02-14 21:25:29.624816", "score": "0.9697", "loss": "0.0593", "code": "String toString(){\"\";myString=\" \" + \"]\";  }", "n_tokens": 24, "n_pass": [157, 18, 18]}
{"time": "2021-02-14 21:25:32.223021", "score": "0.9722", "loss": "0.053", "code": "String toString(){\"\";myString=\"\" + \"]\";  }", "n_tokens": 23, "n_pass": [159, 19, 19]}
{"time": "2021-02-14 21:25:34.832444", "score": "0.9722", "loss": "0.053", "code": "String toString(){\"\";myString=\"\"+ \"]\";  }", "n_tokens": 22, "n_pass": [161, 20, 20]}
{"time": "2021-02-14 21:25:37.479623", "score": "0.9722", "loss": "0.053", "code": "String toString(){\"\";myString=\"\"+\"]\";  }", "n_tokens": 21, "n_pass": [163, 21, 21]}
{"time": "2021-02-14 21:25:42.758595", "score": "0.9722", "loss": "0.053", "code": "String toString(){\"\";myString=\"\"+\"]\"; }", "n_tokens": 20, "n_pass": [168, 23, 22]}
{"time": "2021-02-14 21:25:45.383184", "score": "0.9722", "loss": "0.053", "code": "String toString(){\"\";myString=\"\"+\"]\";}", "n_tokens": 19, "n_pass": [169, 24, 23]}

Minimal simplified code:
String toString(){"";myString=""+"]";}

