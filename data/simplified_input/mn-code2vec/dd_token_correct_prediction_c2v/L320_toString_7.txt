
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/RevokeNode_toString.java
method_name = toString
method_body = public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it = grantees.iterator(); it.hasNext(); ) { if (sb.length() > 0) sb.append(","); sb.append(it.next()); } return super.toString() + privileges.toString() + "TO: \n" + sb.toString() + "\n"; }
predict, score, loss = toString, 0.9887474179267883, 0.013754704035818577

Trace of simplified code(s):
{"time": "2021-02-14 15:09:53.829075", "score": "0.9929", "loss": "0.0086", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it = grantees.iterator(); it.hasNext(); ) { if (sb.length() > 0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 134, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 15:09:56.950724", "score": "0.9966", "loss": "0.0086", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (sb.length() > 0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 126, "n_pass": [48, 2, 2]}
{"time": "2021-02-14 15:09:59.614283", "score": "0.9978", "loss": "0.0057", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 118, "n_pass": [51, 3, 3]}
{"time": "2021-02-14 15:10:02.291717", "score": "0.9991", "loss": "0.0022", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString()+ \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 109, "n_pass": [56, 4, 4]}
{"time": "2021-02-14 15:10:04.957981", "score": "0.9987", "loss": "0.0026", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + sb.toString() + \"\\n\"; }", "n_tokens": 100, "n_pass": [57, 5, 5]}
{"time": "2021-02-14 15:10:07.613746", "score": "0.9938", "loss": "0.0177", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString()+ \"\\n\"; }", "n_tokens": 91, "n_pass": [58, 6, 6]}
{"time": "2021-02-14 15:10:11.118869", "score": "0.9955", "loss": "0.0114", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it.next()); } return super.toString()+ \"\\n\"; }", "n_tokens": 87, "n_pass": [109, 7, 7]}
{"time": "2021-02-14 15:10:14.597541", "score": "0.9957", "loss": "0.0106", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it()); } return super.toString()+ \"\\n\"; }", "n_tokens": 85, "n_pass": [173, 8, 8]}
{"time": "2021-02-14 15:10:17.251109", "score": "0.9957", "loss": "0.0107", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString()+ \"\\n\"; }", "n_tokens": 83, "n_pass": [174, 9, 9]}
{"time": "2021-02-14 15:10:20.739333", "score": "0.9483", "loss": "0.1535", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 81, "n_pass": [180, 10, 10]}
{"time": "2021-02-14 15:10:23.404865", "score": "0.9483", "loss": "0.1535", "code": "String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 79, "n_pass": [184, 11, 11]}
{"time": "2021-02-14 15:10:26.465996", "score": "0.9465", "loss": "0.1756", "code": "String toString() { sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 77, "n_pass": [189, 12, 12]}
{"time": "2021-02-14 15:10:29.123676", "score": "0.964", "loss": "0.0979", "code": "String toString() { sb = StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 75, "n_pass": [192, 13, 13]}
{"time": "2021-02-14 15:10:31.772768", "score": "0.9649", "loss": "0.0879", "code": "String toString() { sb = StringBuffer(); for (String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 73, "n_pass": [197, 14, 14]}
{"time": "2021-02-14 15:10:34.428235", "score": "0.9697", "loss": "0.0823", "code": "String toString() { sb = StringBuffer(); for ( it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 71, "n_pass": [198, 15, 15]}
{"time": "2021-02-14 15:10:37.068420", "score": "0.9697", "loss": "0.0803", "code": "String toString() { sb = StringBuffer(); for (; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 69, "n_pass": [199, 16, 16]}
{"time": "2021-02-14 15:10:39.704731", "score": "0.955", "loss": "0.1112", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 67, "n_pass": [201, 17, 17]}
{"time": "2021-02-14 15:10:42.344417", "score": "0.8668", "loss": "0.373", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0) sb(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 65, "n_pass": [210, 18, 18]}
{"time": "2021-02-14 15:10:45.808040", "score": "0.8725", "loss": "0.3518", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 63, "n_pass": [241, 19, 19]}
{"time": "2021-02-14 15:10:57.221629", "score": "0.8725", "loss": "0.3518", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 62, "n_pass": [334, 20, 20]}
{"time": "2021-02-14 15:10:59.872182", "score": "0.8725", "loss": "0.3518", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);} return super.toString+ \"\\n\"; }", "n_tokens": 61, "n_pass": [341, 21, 21]}
{"time": "2021-02-14 15:11:02.533253", "score": "0.8725", "loss": "0.3518", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return super.toString+ \"\\n\"; }", "n_tokens": 60, "n_pass": [343, 22, 22]}
{"time": "2021-02-14 15:11:05.986259", "score": "0.9735", "loss": "0.0401", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+ \"\\n\"; }", "n_tokens": 59, "n_pass": [347, 23, 23]}
{"time": "2021-02-14 15:11:08.619562", "score": "0.9735", "loss": "0.0401", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\\n\"; }", "n_tokens": 58, "n_pass": [350, 24, 24]}
{"time": "2021-02-14 15:11:11.253535", "score": "0.9735", "loss": "0.0401", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 56, "n_pass": [352, 25, 25]}
{"time": "2021-02-14 15:11:15.072962", "score": "0.9735", "loss": "0.0401", "code": "String toString(){ sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 55, "n_pass": [360, 26, 26]}
{"time": "2021-02-14 15:11:17.690653", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 54, "n_pass": [362, 27, 27]}
{"time": "2021-02-14 15:11:20.315700", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb= StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 53, "n_pass": [364, 28, 28]}
{"time": "2021-02-14 15:11:22.936846", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 52, "n_pass": [366, 29, 29]}
{"time": "2021-02-14 15:11:25.556229", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 51, "n_pass": [371, 30, 30]}
{"time": "2021-02-14 15:11:28.187813", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 50, "n_pass": [373, 31, 31]}
{"time": "2021-02-14 15:11:30.845515", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(;hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 49, "n_pass": [376, 32, 32]}
{"time": "2021-02-14 15:11:33.471482", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(;hasNext();) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 48, "n_pass": [381, 33, 33]}
{"time": "2021-02-14 15:11:36.095074", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(;hasNext();){ if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 47, "n_pass": [383, 34, 34]}
{"time": "2021-02-14 15:11:38.728459", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 46, "n_pass": [385, 35, 35]}
{"time": "2021-02-14 15:11:41.356611", "score": "0.9735", "loss": "0.0401", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 45, "n_pass": [387, 36, 36]}
{"time": "2021-02-14 15:11:44.794208", "score": "0.8213", "loss": "0.3406", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return toString+\"\"; }", "n_tokens": 44, "n_pass": [403, 37, 37]}
{"time": "2021-02-14 15:11:47.442975", "score": "0.3073", "loss": "2.8765", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return +\"\"; }", "n_tokens": 43, "n_pass": [404, 38, 38]}
{"time": "2021-02-14 15:11:50.068322", "score": "0.4118", "loss": "2.0934", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return \"\"; }", "n_tokens": 42, "n_pass": [405, 39, 39]}
{"time": "2021-02-14 15:11:56.554684", "score": "0.2947", "loss": "2.9225", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);} \"\"; }", "n_tokens": 41, "n_pass": [444, 41, 40]}
{"time": "2021-02-14 15:11:59.202416", "score": "0.2947", "loss": "2.9225", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}\"\"; }", "n_tokens": 40, "n_pass": [445, 42, 41]}
{"time": "2021-02-14 15:12:06.475305", "score": "0.2947", "loss": "2.9225", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}\"\";}", "n_tokens": 39, "n_pass": [490, 44, 42]}

Minimal simplified code:
String toString(){sb=StringBuffer();for(;hasNext();){if(0)("");(it);}"";}

