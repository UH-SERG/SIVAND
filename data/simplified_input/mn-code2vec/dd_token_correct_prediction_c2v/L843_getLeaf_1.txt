
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/classify/DecisionTree_getLeaf.java
method_name = getLeaf
method_body = private Node getLeaf(Node node, FeatureVector fv) { if (node.child0 == null) return node; else if (fv.value(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }
predict, score, loss = getLeaf, 0.9773639440536499, 0.030900657176971436

Trace of simplified code(s):
{"time": "2021-02-16 03:45:33.907105", "score": "0.9774", "loss": "0.0309", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node.child0 == null) return node; else if (fv.value(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 88, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 03:45:36.453107", "score": "0.4139", "loss": "1.107", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (nodevalue(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 66, "n_pass": [9, 2, 2]}
{"time": "2021-02-16 03:45:38.993229", "score": "0.3544", "loss": "1.1801", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 55, "n_pass": [18, 3, 3]}
{"time": "2021-02-16 03:45:44.076095", "score": "0.5322", "loss": "0.7482", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 52, "n_pass": [66, 5, 4]}
{"time": "2021-02-16 03:45:46.607105", "score": "0.4788", "loss": "0.8596", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(fv); else return getLeaf(node.child0, fv); }", "n_tokens": 49, "n_pass": [67, 6, 5]}
{"time": "2021-02-16 03:45:49.140787", "score": "0.6733", "loss": "0.7114", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 46, "n_pass": [69, 7, 6]}
{"time": "2021-02-16 03:45:54.220931", "score": "0.6733", "loss": "0.7114", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 44, "n_pass": [75, 9, 7]}
{"time": "2021-02-16 03:46:03.094855", "score": "0.6733", "loss": "0.7114", "code": "Node getLeaf(Node node,FeatureVector fv) { if (node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 43, "n_pass": [132, 11, 8]}
{"time": "2021-02-16 03:46:05.641168", "score": "0.6733", "loss": "0.7114", "code": "Node getLeaf(Node node,FeatureVector fv){ if (node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 42, "n_pass": [137, 12, 9]}
{"time": "2021-02-16 03:46:08.174392", "score": "0.6733", "loss": "0.7114", "code": "Node getLeaf(Node node,FeatureVector fv){if (node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 41, "n_pass": [139, 13, 10]}
{"time": "2021-02-16 03:46:10.703321", "score": "0.6733", "loss": "0.7114", "code": "Node getLeaf(Node node,FeatureVector fv){if(node) return getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 40, "n_pass": [141, 14, 11]}
{"time": "2021-02-16 03:46:13.235780", "score": "0.4908", "loss": "1.2321", "code": "Node getLeaf(Node node,FeatureVector fv){if(node) getLeaf(fv);return getLeaf(node.child0, fv); }", "n_tokens": 38, "n_pass": [145, 15, 12]}
{"time": "2021-02-16 03:46:15.777298", "score": "0.4565", "loss": "1.0163", "code": "Node getLeaf(Node node,FeatureVector fv){if(node) getLeaf(fv);return getLeaf(node0, fv); }", "n_tokens": 36, "n_pass": [151, 16, 13]}
{"time": "2021-02-16 03:46:21.701293", "score": "0.4565", "loss": "1.0163", "code": "Node getLeaf(Node node,FeatureVector fv){if(node) getLeaf(fv);return getLeaf(node0,fv); }", "n_tokens": 35, "n_pass": [198, 17, 14]}
{"time": "2021-02-16 03:46:24.236946", "score": "0.4565", "loss": "1.0163", "code": "Node getLeaf(Node node,FeatureVector fv){if(node) getLeaf(fv);return getLeaf(node0,fv);}", "n_tokens": 34, "n_pass": [201, 18, 15]}
{"time": "2021-02-16 03:46:28.198050", "score": "0.4565", "loss": "1.0163", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)getLeaf(fv);return getLeaf(node0,fv);}", "n_tokens": 33, "n_pass": [220, 19, 16]}
{"time": "2021-02-16 03:46:30.747447", "score": "0.2921", "loss": "1.6407", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)(fv);return getLeaf(node0,fv);}", "n_tokens": 32, "n_pass": [221, 20, 17]}
{"time": "2021-02-16 03:46:33.273392", "score": "0.4843", "loss": "1.2467", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)(fv); getLeaf(node0,fv);}", "n_tokens": 31, "n_pass": [226, 21, 18]}
{"time": "2021-02-16 03:46:35.810796", "score": "0.4843", "loss": "1.2467", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)(fv);getLeaf(node0,fv);}", "n_tokens": 30, "n_pass": [227, 22, 19]}
{"time": "2021-02-16 03:46:38.338916", "score": "0.1499", "loss": "3.2572", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)(fv);getLeaf(0,fv);}", "n_tokens": 29, "n_pass": [230, 23, 20]}

Minimal simplified code:
Node getLeaf(Node node,FeatureVector fv){if(node)(fv);getLeaf(0,fv);}

