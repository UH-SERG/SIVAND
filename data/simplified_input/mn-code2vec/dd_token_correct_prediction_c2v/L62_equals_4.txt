
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/common/classes/UndirectedGraphNode_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } UndirectedGraphNode that = (UndirectedGraphNode) o; if (label != that.label) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }
predict, score, loss = equals, 0.9997716546058655, 0.0002636561985127628

Trace of simplified code(s):
{"time": "2021-02-14 06:43:31.494630", "score": "0.9995", "loss": "0.0006", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } UndirectedGraphNode that = (UndirectedGraphNode) o; if (label != that.label) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 140, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 06:43:34.186482", "score": "0.9997", "loss": "0.0004", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 105, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 06:43:36.860932", "score": "0.9657", "loss": "0.1289", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 96, "n_pass": [47, 3, 3]}
{"time": "2021-02-14 06:43:39.525256", "score": "0.9161", "loss": "0.3762", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 91, "n_pass": [82, 4, 4]}
{"time": "2021-02-14 06:43:42.173728", "score": "0.9519", "loss": "0.2487", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 86, "n_pass": [84, 5, 5]}
{"time": "2021-02-14 06:43:50.123558", "score": "0.9217", "loss": "0.3548", "code": "@Override public boolean equals(Object o) { if (this == o) {; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 82, "n_pass": [97, 8, 6]}
{"time": "2021-02-14 06:43:52.798440", "score": "0.9551", "loss": "0.1529", "code": "@Override public boolean equals(Object o) { if (this == o) {; } if (onull || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 78, "n_pass": [100, 9, 7]}
{"time": "2021-02-14 06:43:58.108299", "score": "0.4193", "loss": "1.3047", "code": "@Override public boolean equals(Object o) { if (thiso) {; } if (onull || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 74, "n_pass": [115, 11, 8]}
{"time": "2021-02-14 06:44:03.814284", "score": "0.4193", "loss": "1.3047", "code": "@Override public boolean equals(Object o) { if (thiso) {} if (onull || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 72, "n_pass": [169, 13, 9]}
{"time": "2021-02-14 06:44:06.457105", "score": "0.5505", "loss": "0.8865", "code": "@Override public boolean equals(Object o) { if (thiso) {} if (o|| getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 70, "n_pass": [172, 14, 10]}
{"time": "2021-02-14 06:44:09.097456", "score": "0.5785", "loss": "0.8427", "code": "@Override public boolean equals(Object o) { if (thiso) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 68, "n_pass": [175, 15, 11]}
{"time": "2021-02-14 06:44:22.751027", "score": "0.5785", "loss": "0.8427", "code": "@Override boolean equals(Object o) { if (thiso) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 66, "n_pass": [191, 20, 12]}
{"time": "2021-02-14 06:44:44.447516", "score": "0.5785", "loss": "0.8427", "code": "@Override boolean equals(Object o){ if (thiso) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 65, "n_pass": [291, 25, 13]}
{"time": "2021-02-14 06:44:47.117011", "score": "0.5785", "loss": "0.8427", "code": "@Override boolean equals(Object o){if (thiso) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 64, "n_pass": [293, 26, 14]}
{"time": "2021-02-14 06:44:49.786188", "score": "0.5785", "loss": "0.8427", "code": "@Override boolean equals(Object o){if(thiso) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 63, "n_pass": [295, 27, 15]}
{"time": "2021-02-14 06:44:52.414070", "score": "0.5879", "loss": "0.809", "code": "@Override boolean equals(Object o){if(o) {} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 62, "n_pass": [297, 28, 16]}
{"time": "2021-02-14 06:44:55.092193", "score": "0.5879", "loss": "0.809", "code": "@Override boolean equals(Object o){if(o){} if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 61, "n_pass": [300, 29, 17]}
{"time": "2021-02-14 06:44:57.725679", "score": "0.5879", "loss": "0.809", "code": "@Override boolean equals(Object o){if(o){}if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 60, "n_pass": [303, 30, 18]}
{"time": "2021-02-14 06:45:00.396801", "score": "0.5879", "loss": "0.809", "code": "@Override boolean equals(Object o){if(o){}if(o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 59, "n_pass": [305, 31, 19]}
{"time": "2021-02-14 06:45:03.043482", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 58, "n_pass": [308, 32, 20]}
{"time": "2021-02-14 06:45:05.677380", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 57, "n_pass": [310, 33, 21]}
{"time": "2021-02-14 06:45:08.318941", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){ } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 56, "n_pass": [313, 34, 22]}
{"time": "2021-02-14 06:45:10.993551", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){} return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 55, "n_pass": [315, 35, 23]}
{"time": "2021-02-14 06:45:13.635332", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 54, "n_pass": [317, 36, 24]}
{"time": "2021-02-14 06:45:17.087877", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 53, "n_pass": [321, 37, 25]}
{"time": "2021-02-14 06:45:19.732737", "score": "0.5333", "loss": "0.905", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 52, "n_pass": [323, 38, 26]}
{"time": "2021-02-14 06:45:25.041037", "score": "0.5866", "loss": "0.6481", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?neighbors.equals(thatneighbors) : that.neighbors == null; }", "n_tokens": 51, "n_pass": [329, 40, 27]}
{"time": "2021-02-14 06:45:27.674028", "score": "0.7495", "loss": "0.3633", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?neighbors.equals(that) : that.neighbors == null; }", "n_tokens": 50, "n_pass": [330, 41, 28]}
{"time": "2021-02-14 06:45:30.306311", "score": "0.7495", "loss": "0.3633", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?neighbors.equals(that): that.neighbors == null; }", "n_tokens": 49, "n_pass": [332, 42, 29]}
{"time": "2021-02-14 06:45:32.936845", "score": "0.6674", "loss": "0.4524", "code": "@Override boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?neighbors.equals(that): that == null; }", "n_tokens": 47, "n_pass": [335, 43, 30]}
{"time": "2021-02-14 06:45:37.616684", "score": "0.7346", "loss": "0.3585", "code": "@Override boolean equals(Object o){if(o){}if(ogetClass){}return neighbors?neighbors.equals(that): that == null; }", "n_tokens": 46, "n_pass": [361, 44, 31]}
{"time": "2021-02-14 06:45:40.271520", "score": "0.6701", "loss": "0.4463", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?neighbors.equals(that): that == null; }", "n_tokens": 45, "n_pass": [362, 45, 32]}
{"time": "2021-02-14 06:45:43.700868", "score": "0.3164", "loss": "1.2409", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?neighborsequals(that): that == null; }", "n_tokens": 44, "n_pass": [371, 46, 33]}
{"time": "2021-02-14 06:45:54.435484", "score": "0.6464", "loss": "0.4667", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that): that == null; }", "n_tokens": 43, "n_pass": [410, 49, 34]}
{"time": "2021-02-14 06:46:07.047354", "score": "0.6464", "loss": "0.4667", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that):that == null; }", "n_tokens": 42, "n_pass": [459, 52, 35]}
{"time": "2021-02-14 06:46:09.667065", "score": "0.6464", "loss": "0.4667", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that):that== null; }", "n_tokens": 41, "n_pass": [460, 53, 36]}
{"time": "2021-02-14 06:46:13.119310", "score": "0.6464", "loss": "0.4667", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that):that==null; }", "n_tokens": 40, "n_pass": [463, 54, 37]}
{"time": "2021-02-14 06:46:15.773863", "score": "0.6464", "loss": "0.4667", "code": "@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that):that==null;}", "n_tokens": 39, "n_pass": [466, 55, 38]}

Minimal simplified code:
@Override boolean equals(Object o){if(o){}if(o){}return neighbors?equals(that):that==null;}

