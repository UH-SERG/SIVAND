
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/tomcat/util/http/fileupload/MultipartStream_setBoundary.java
method_name = setBoundary
method_body = public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException("The length of a boundary token can not be changed"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }
predict, score, loss = setBoundary, 0.999976634979248, 4.2914423829643056e-05

Trace of simplified code(s):
{"time": "2021-02-14 13:43:37.504418", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 103, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 13:43:40.170288", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 90, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 13:43:42.830343", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"The  be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 77, "n_pass": [23, 3, 3]}
{"time": "2021-02-14 13:43:45.484400", "score": "1.0", "loss": "0.0", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 71, "n_pass": [42, 4, 4]}
{"time": "2021-02-14 13:43:48.133010", "score": "1.0", "loss": "0.0001", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, boundary.length); }", "n_tokens": 64, "n_pass": [46, 5, 5]}
{"time": "2021-02-14 13:43:51.235589", "score": "0.9997", "loss": "0.0007", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, boundary.length); }", "n_tokens": 61, "n_pass": [89, 6, 6]}
{"time": "2021-02-14 13:43:53.877227", "score": "0.9998", "loss": "0.0003", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary,this.boundary, boundary.length); }", "n_tokens": 57, "n_pass": [94, 7, 7]}
{"time": "2021-02-14 13:43:56.516131", "score": "0.9999", "loss": "0.0002", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary.length); }", "n_tokens": 53, "n_pass": [95, 8, 8]}
{"time": "2021-02-14 13:44:01.845706", "score": "0.9999", "loss": "0.0002", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 51, "n_pass": [148, 9, 9]}
{"time": "2021-02-14 13:44:04.481775", "score": "0.9999", "loss": "0.0002", "code": " void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 50, "n_pass": [151, 10, 10]}
{"time": "2021-02-14 13:44:07.138257", "score": "0.9999", "loss": "0.0002", "code": "void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 49, "n_pass": [152, 11, 11]}
{"time": "2021-02-14 13:44:10.584195", "score": "0.9999", "loss": "0.0002", "code": "void setBoundary(byte[]boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 48, "n_pass": [160, 12, 12]}
{"time": "2021-02-14 13:44:13.237545", "score": "0.9999", "loss": "0.0002", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 47, "n_pass": [163, 13, 13]}
{"time": "2021-02-14 13:44:15.900128", "score": "0.9999", "loss": "0.0002", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 45, "n_pass": [170, 14, 14]}
{"time": "2021-02-14 13:44:18.523547", "score": "0.9999", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 43, "n_pass": [173, 15, 15]}
{"time": "2021-02-14 13:44:21.147339", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy(boundary, boundary); }", "n_tokens": 41, "n_pass": [178, 16, 16]}
{"time": "2021-02-14 13:44:23.777160", "score": "1.0", "loss": "0.0", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy( boundary); }", "n_tokens": 39, "n_pass": [180, 17, 17]}
{"time": "2021-02-14 13:44:26.398743", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy(); }", "n_tokens": 37, "n_pass": [181, 18, 18]}
{"time": "2021-02-14 13:44:33.593243", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy();}", "n_tokens": 36, "n_pass": [234, 19, 19]}
{"time": "2021-02-14 13:44:37.028983", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{ if (boundary) { (\"\"); } arraycopy();}", "n_tokens": 35, "n_pass": [247, 20, 20]}
{"time": "2021-02-14 13:44:39.645173", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if (boundary) { (\"\"); } arraycopy();}", "n_tokens": 34, "n_pass": [249, 21, 21]}
{"time": "2021-02-14 13:44:42.263884", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary) { (\"\"); } arraycopy();}", "n_tokens": 33, "n_pass": [251, 22, 22]}
{"time": "2021-02-14 13:44:44.887715", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){ (\"\"); } arraycopy();}", "n_tokens": 32, "n_pass": [255, 23, 23]}
{"time": "2021-02-14 13:44:47.506576", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\"); } arraycopy();}", "n_tokens": 31, "n_pass": [257, 24, 24]}
{"time": "2021-02-14 13:44:50.143179", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");} arraycopy();}", "n_tokens": 30, "n_pass": [263, 25, 25]}
{"time": "2021-02-14 13:44:52.762647", "score": "1.0", "loss": "0.0001", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");}arraycopy();}", "n_tokens": 29, "n_pass": [265, 26, 26]}

Minimal simplified code:
void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){("");}arraycopy();}

