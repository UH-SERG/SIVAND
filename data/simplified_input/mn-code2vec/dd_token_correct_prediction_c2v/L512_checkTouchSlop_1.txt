
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ppamorim__Dragger/dragger/src/main/java/com/github/ppamorim/dragger/ViewDragHelper_checkTouchSlop.java
method_name = checkTouchSlop
method_body = public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }
predict, score, loss = checkTouchSlop, 0.9999982118606567, 4.6491513785440475e-06

Trace of simplified code(s):
{"time": "2021-02-14 21:16:10.856812", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 229, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 21:16:15.205845", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal= DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 215, "n_pass": [47, 2, 2]}
{"time": "2021-02-14 21:16:17.918110", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal= DIRECTION_HORIZONTAL; final boolean checkVertical =DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 201, "n_pass": [49, 3, 3]}
{"time": "2021-02-14 21:16:20.614770", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontalDIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 187, "n_pass": [63, 4, 4]}
{"time": "2021-02-14 21:16:23.306190", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 173, "n_pass": [76, 5, 5]}
{"time": "2021-02-14 21:16:26.002344", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 166, "n_pass": [115, 6, 6]}
{"time": "2021-02-14 21:16:28.703744", "score": "1.0", "loss": "0.0", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 159, "n_pass": [117, 7, 7]}
{"time": "2021-02-14 21:16:31.399305", "score": "0.9897", "loss": "0.025", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 152, "n_pass": [121, 8, 8]}
{"time": "2021-02-14 21:16:34.075708", "score": "0.9953", "loss": "0.0112", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 144, "n_pass": [128, 9, 9]}
{"time": "2021-02-14 21:16:37.235949", "score": "0.9892", "loss": "0.0257", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL; final float dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 141, "n_pass": [204, 10, 10]}
{"time": "2021-02-14 21:16:39.934501", "score": "0.9959", "loss": "0.011", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx = mLastMotionX[pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 138, "n_pass": [206, 11, 11]}
{"time": "2021-02-14 21:16:42.592276", "score": "0.9985", "loss": "0.0034", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx [pointerId]; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 135, "n_pass": [208, 12, 12]}
{"time": "2021-02-14 21:16:45.271781", "score": "0.9986", "loss": "0.0031", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 132, "n_pass": [209, 13, 13]}
{"time": "2021-02-14 21:16:47.958668", "score": "0.9894", "loss": "0.0225", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return dxdy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 128, "n_pass": [215, 14, 14]}
{"time": "2021-02-14 21:16:50.627765", "score": "0.989", "loss": "0.0248", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 124, "n_pass": [218, 15, 15]}
{"time": "2021-02-14 21:16:53.311845", "score": "0.9935", "loss": "0.0184", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 120, "n_pass": [219, 16, 16]}
{"time": "2021-02-14 21:16:56.005451", "score": "0.9929", "loss": "0.0191", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 116, "n_pass": [220, 17, 17]}
{"time": "2021-02-14 21:16:59.084463", "score": "0.997", "loss": "0.0122", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId))VERTICAL;  dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx); } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 112, "n_pass": [227, 18, 18]}
{"time": "2021-02-14 21:17:02.175277", "score": "0.9974", "loss": "0.01", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) dx ; final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx); } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 109, "n_pass": [244, 19, 19]}
{"time": "2021-02-14 21:17:04.865444", "score": "0.9972", "loss": "0.0107", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx); } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 106, "n_pass": [245, 20, 20]}
{"time": "2021-02-14 21:17:07.561827", "score": "0.9886", "loss": "0.0283", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { abs(dx); } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 102, "n_pass": [257, 21, 21]}
{"time": "2021-02-14 21:17:10.243721", "score": "0.9863", "loss": "0.0323", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { ; } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 98, "n_pass": [258, 22, 22]}
{"time": "2021-02-14 21:17:15.611526", "score": "0.9863", "loss": "0.0323", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 96, "n_pass": [340, 23, 23]}
{"time": "2021-02-14 21:17:18.713900", "score": "0.9867", "loss": "0.0316", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; } return false; }", "n_tokens": 94, "n_pass": [343, 24, 24]}
{"time": "2021-02-14 21:17:21.376252", "score": "0.9864", "loss": "0.0306", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; } false; }", "n_tokens": 92, "n_pass": [350, 25, 25]}
{"time": "2021-02-14 21:17:24.072321", "score": "0.9859", "loss": "0.0314", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 90, "n_pass": [351, 26, 26]}
{"time": "2021-02-14 21:17:26.763742", "score": "0.9859", "loss": "0.0314", "code": " boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 89, "n_pass": [353, 27, 27]}
{"time": "2021-02-14 21:17:29.452596", "score": "0.9859", "loss": "0.0314", "code": "boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 88, "n_pass": [354, 28, 28]}
{"time": "2021-02-14 21:17:32.958992", "score": "0.9909", "loss": "0.0246", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); final float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 86, "n_pass": [367, 29, 29]}
{"time": "2021-02-14 21:17:35.653101", "score": "0.9909", "loss": "0.0246", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); float dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 84, "n_pass": [372, 30, 30]}
{"time": "2021-02-14 21:17:38.321534", "score": "0.9981", "loss": "0.0072", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { return  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 82, "n_pass": [373, 31, 31]}
{"time": "2021-02-14 21:17:40.994241", "score": "0.9959", "loss": "0.0111", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) {  mTouchSlop; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 80, "n_pass": [384, 32, 32]}
{"time": "2021-02-14 21:17:43.657053", "score": "0.9948", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { ; } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 78, "n_pass": [385, 33, 33]}
{"time": "2021-02-14 21:17:46.320182", "score": "0.9948", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } else if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 76, "n_pass": [386, 34, 34]}
{"time": "2021-02-14 21:17:48.962237", "score": "0.9947", "loss": "0.0118", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal) { } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 74, "n_pass": [388, 35, 35]}
{"time": "2021-02-14 21:18:03.048477", "score": "0.9947", "loss": "0.0118", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){ } { return abs(dy) > mTouchSlop; }  }", "n_tokens": 73, "n_pass": [499, 36, 36]}
{"time": "2021-02-14 21:18:05.712088", "score": "0.9947", "loss": "0.0118", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){} { return abs(dy) > mTouchSlop; }  }", "n_tokens": 72, "n_pass": [501, 37, 37]}
{"time": "2021-02-14 21:18:08.387309", "score": "0.9947", "loss": "0.0118", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{ return abs(dy) > mTouchSlop; }  }", "n_tokens": 71, "n_pass": [503, 38, 38]}
{"time": "2021-02-14 21:18:11.066286", "score": "0.9947", "loss": "0.0118", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return abs(dy) > mTouchSlop; }  }", "n_tokens": 70, "n_pass": [505, 39, 39]}
{"time": "2021-02-14 21:18:14.522884", "score": "0.9939", "loss": "0.0131", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy) > mTouchSlop; }  }", "n_tokens": 69, "n_pass": [508, 40, 40]}
{"time": "2021-02-14 21:18:17.165789", "score": "0.9939", "loss": "0.0131", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy)> mTouchSlop; }  }", "n_tokens": 68, "n_pass": [512, 41, 41]}
{"time": "2021-02-14 21:18:19.814838", "score": "0.9939", "loss": "0.0132", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy) mTouchSlop; }  }", "n_tokens": 67, "n_pass": [513, 42, 42]}
{"time": "2021-02-14 21:18:22.467402", "score": "0.9939", "loss": "0.0132", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy)mTouchSlop; }  }", "n_tokens": 66, "n_pass": [514, 43, 43]}
{"time": "2021-02-14 21:18:25.124547", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy); }  }", "n_tokens": 65, "n_pass": [515, 44, 44]}
{"time": "2021-02-14 21:18:27.768572", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}  }", "n_tokens": 64, "n_pass": [517, 45, 45]}
{"time": "2021-02-14 21:18:30.418351", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);} }", "n_tokens": 63, "n_pass": [519, 46, 46]}
{"time": "2021-02-14 21:18:33.075764", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions, int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 62, "n_pass": [520, 47, 47]}
{"time": "2021-02-14 21:18:36.565467", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions,int pointerId) { (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 61, "n_pass": [530, 48, 48]}
{"time": "2021-02-14 21:18:39.194078", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions,int pointerId){ (!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 60, "n_pass": [535, 49, 49]}
{"time": "2021-02-14 21:18:41.861889", "score": "0.9933", "loss": "0.0142", "code": "boolean checkTouchSlop(int directions,int pointerId){(!isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 59, "n_pass": [537, 50, 50]}
{"time": "2021-02-14 21:18:44.519157", "score": "0.9931", "loss": "0.0148", "code": "boolean checkTouchSlop(int directions,int pointerId){(isPointerDown(pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 58, "n_pass": [539, 51, 51]}
{"time": "2021-02-14 21:18:47.170535", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId)); dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 57, "n_pass": [540, 52, 52]}
{"time": "2021-02-14 21:18:49.800357", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy = mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 56, "n_pass": [546, 53, 53]}
{"time": "2021-02-14 21:18:52.471799", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy= mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 55, "n_pass": [548, 54, 54]}
{"time": "2021-02-14 21:18:55.108405", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId]; if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 54, "n_pass": [550, 55, 55]}
{"time": "2021-02-14 21:18:57.773725", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if ( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 53, "n_pass": [556, 56, 56]}
{"time": "2021-02-14 21:19:00.409282", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if( checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 52, "n_pass": [558, 57, 57]}
{"time": "2021-02-14 21:19:03.038299", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical) { } if (checkHorizontal){}{return (dy);}}", "n_tokens": 51, "n_pass": [560, 58, 58]}
{"time": "2021-02-14 21:19:05.689827", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){ } if (checkHorizontal){}{return (dy);}}", "n_tokens": 50, "n_pass": [563, 59, 59]}
{"time": "2021-02-14 21:19:08.339944", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){} if (checkHorizontal){}{return (dy);}}", "n_tokens": 49, "n_pass": [565, 60, 60]}
{"time": "2021-02-14 21:19:11.001054", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){}if (checkHorizontal){}{return (dy);}}", "n_tokens": 48, "n_pass": [567, 61, 61]}
{"time": "2021-02-14 21:19:13.649663", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){}if(checkHorizontal){}{return (dy);}}", "n_tokens": 47, "n_pass": [569, 62, 62]}
{"time": "2021-02-14 21:19:16.304067", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){}if(checkHorizontal){}{ (dy);}}", "n_tokens": 46, "n_pass": [576, 63, 63]}
{"time": "2021-02-14 21:19:18.952366", "score": "0.9907", "loss": "0.0145", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy=mLastMotionY[pointerId];if(checkVertical){}if(checkHorizontal){}{(dy);}}", "n_tokens": 45, "n_pass": [577, 64, 64]}
{"time": "2021-02-14 21:19:22.419983", "score": "0.9829", "loss": "0.0192", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dymLastMotionY[pointerId];if(checkVertical){}if(checkHorizontal){}{(dy);}}", "n_tokens": 44, "n_pass": [604, 65, 65]}
{"time": "2021-02-14 21:19:25.045099", "score": "0.9878", "loss": "0.0139", "code": "boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy[pointerId];if(checkVertical){}if(checkHorizontal){}{(dy);}}", "n_tokens": 43, "n_pass": [605, 66, 66]}

Minimal simplified code:
boolean checkTouchSlop(int directions,int pointerId){((pointerId));dy[pointerId];if(checkVertical){}if(checkHorizontal){}{(dy);}}

