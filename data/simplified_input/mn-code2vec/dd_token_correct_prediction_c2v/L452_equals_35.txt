
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/etsy__oculus/resources/elasticsearch-oculus-plugin/com/dtw/WarpPath_equals.java
method_name = equals
method_body = public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI() == this.maxI()) && (p.maxJ() == this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }
predict, score, loss = equals, 0.9995444416999817, 0.0007564543629996479

Trace of simplified code(s):
{"time": "2021-02-14 19:25:47.627150", "score": "0.9995", "loss": "0.0008", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI() == this.maxI()) && (p.maxJ() == this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 186, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 19:25:50.406013", "score": "0.9737", "loss": "0.0326", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI== this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 163, "n_pass": [23, 2, 2]}
{"time": "2021-02-14 19:25:53.520565", "score": "0.8692", "loss": "0.276", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 157, "n_pass": [86, 3, 3]}
{"time": "2021-02-14 19:25:56.198873", "score": "0.8754", "loss": "0.2632", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 151, "n_pass": [88, 4, 4]}
{"time": "2021-02-14 19:25:58.879654", "score": "0.9935", "loss": "0.0088", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; } else return false; } else return false; }", "n_tokens": 145, "n_pass": [96, 5, 5]}
{"time": "2021-02-14 19:26:01.548990", "score": "0.9671", "loss": "0.0514", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 139, "n_pass": [98, 6, 6]}
{"time": "2021-02-14 19:26:04.242937", "score": "0.9831", "loss": "0.0246", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.sizethis.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 133, "n_pass": [110, 7, 7]}
{"time": "2021-02-14 19:26:06.948867", "score": "0.9769", "loss": "0.0318", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 130, "n_pass": [180, 8, 8]}
{"time": "2021-02-14 19:26:09.627378", "score": "0.9659", "loss": "0.0484", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0;  this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 127, "n_pass": [188, 9, 9]}
{"time": "2021-02-14 19:26:12.293573", "score": "0.9741", "loss": "0.0355", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 124, "n_pass": [189, 10, 10]}
{"time": "2021-02-14 19:26:14.957848", "score": "0.9798", "loss": "0.0273", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 121, "n_pass": [190, 11, 11]}
{"time": "2021-02-14 19:26:17.626183", "score": "0.9744", "loss": "0.0328", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 118, "n_pass": [195, 12, 12]}
{"time": "2021-02-14 19:26:20.305610", "score": "0.9866", "loss": "0.0182", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals((x))))return true; }; } else return false; }", "n_tokens": 115, "n_pass": [198, 13, 13]}
{"time": "2021-02-14 19:26:22.966582", "score": "0.9607", "loss": "0.0498", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals()))return true; }; } else return false; }", "n_tokens": 112, "n_pass": [199, 14, 14]}
{"time": "2021-02-14 19:26:25.631076", "score": "0.9614", "loss": "0.049", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; } else return false; }", "n_tokens": 109, "n_pass": [201, 15, 15]}
{"time": "2021-02-14 19:26:28.298563", "score": "0.7663", "loss": "0.3368", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }return false; }", "n_tokens": 106, "n_pass": [204, 16, 16]}
{"time": "2021-02-14 19:26:33.609794", "score": "0.7663", "loss": "0.3368", "code": "boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }return false; }", "n_tokens": 104, "n_pass": [207, 18, 17]}
{"time": "2021-02-14 19:26:36.672553", "score": "0.4633", "loss": "0.9093", "code": "boolean equals(Object obj) { if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }return false; }", "n_tokens": 101, "n_pass": [215, 19, 18]}
{"time": "2021-02-14 19:26:42.020964", "score": "0.4629", "loss": "0.9097", "code": "boolean equals(Object obj) { if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals())); }; }return false; }", "n_tokens": 98, "n_pass": [235, 21, 19]}
{"time": "2021-02-14 19:26:57.212280", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj) { if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 96, "n_pass": [346, 24, 20]}
{"time": "2021-02-14 19:27:03.398706", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){ if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 95, "n_pass": [362, 26, 21]}
{"time": "2021-02-14 19:27:06.043644", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 94, "n_pass": [364, 27, 22]}
{"time": "2021-02-14 19:27:08.689749", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 93, "n_pass": [366, 28, 23]}
{"time": "2021-02-14 19:27:11.374795", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 92, "n_pass": [370, 29, 24]}
{"time": "2021-02-14 19:27:14.058831", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj)){ final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 91, "n_pass": [373, 30, 25]}
{"time": "2021-02-14 19:27:16.720875", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj)){final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 90, "n_pass": [375, 31, 26]}
{"time": "2021-02-14 19:27:19.381014", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj)){ WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 89, "n_pass": [376, 32, 27]}
{"time": "2021-02-14 19:27:22.067956", "score": "0.4206", "loss": "1.0221", "code": "boolean equals(Object obj){if((obj)){WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 88, "n_pass": [377, 33, 28]}
{"time": "2021-02-14 19:27:24.747626", "score": "0.4827", "loss": "0.9074", "code": "boolean equals(Object obj){if((obj)){ p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 87, "n_pass": [378, 34, 29]}
{"time": "2021-02-14 19:27:27.418711", "score": "0.4827", "loss": "0.9074", "code": "boolean equals(Object obj){if((obj)){p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 86, "n_pass": [379, 35, 30]}
{"time": "2021-02-14 19:27:30.074420", "score": "0.4827", "loss": "0.9074", "code": "boolean equals(Object obj){if((obj)){p= (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 85, "n_pass": [381, 36, 31]}
{"time": "2021-02-14 19:27:32.725960", "score": "0.4827", "loss": "0.9074", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 84, "n_pass": [383, 37, 32]}
{"time": "2021-02-14 19:27:35.397457", "score": "0.4827", "loss": "0.9074", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 83, "n_pass": [387, 38, 33]}
{"time": "2021-02-14 19:27:38.080931", "score": "0.2463", "loss": "1.6034", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath); if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 82, "n_pass": [388, 39, 34]}
{"time": "2021-02-14 19:27:40.735106", "score": "0.2463", "loss": "1.6034", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 81, "n_pass": [390, 40, 35]}
{"time": "2021-02-14 19:27:43.391530", "score": "0.5227", "loss": "0.7693", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if ((p()) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 79, "n_pass": [394, 41, 36]}
{"time": "2021-02-14 19:27:46.039926", "score": "0.5178", "loss": "0.7802", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if ((p) && (p.maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 77, "n_pass": [395, 42, 37]}
{"time": "2021-02-14 19:27:51.334416", "score": "0.8607", "loss": "0.1729", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if ((p) && (maxJ())) { for (0; ; x++)(!((x).equals)); }; }return false; }", "n_tokens": 75, "n_pass": [399, 44, 38]}
{"time": "2021-02-14 19:27:54.001979", "score": "0.8546", "loss": "0.1811", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if ((p) && (maxJ())) { for (0; ; x++)(!((x))); }; }return false; }", "n_tokens": 73, "n_pass": [413, 45, 39]}
{"time": "2021-02-14 19:28:00.148203", "score": "0.6862", "loss": "0.4383", "code": "boolean equals(Object obj){if((obj)){p(WarpPath);if ((p) && (maxJ())) { for (0; ; x++)(!((x))); }; }return false; }", "n_tokens": 72, "n_pass": [438, 47, 40]}
{"time": "2021-02-14 19:28:02.801401", "score": "0.8703", "loss": "0.1581", "code": "boolean equals(Object obj){if((obj)){p();if ((p) && (maxJ())) { for (0; ; x++)(!((x))); }; }return false; }", "n_tokens": 71, "n_pass": [440, 48, 41]}
{"time": "2021-02-14 19:28:05.446042", "score": "0.8706", "loss": "0.1578", "code": "boolean equals(Object obj){if((obj)){p();if ((p)  (maxJ())) { for (0; ; x++)(!((x))); }; }return false; }", "n_tokens": 69, "n_pass": [447, 49, 42]}
{"time": "2021-02-14 19:28:08.098214", "score": "0.3114", "loss": "1.3272", "code": "boolean equals(Object obj){if((obj)){p();if ((p)  (maxJ())) { for (0; ; x++)(!((x))); }; }false; }", "n_tokens": 67, "n_pass": [466, 50, 43]}
{"time": "2021-02-14 19:28:10.731783", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if ((p)  (maxJ())) { for (0; ; x++)(!((x))); }; } }", "n_tokens": 65, "n_pass": [467, 51, 44]}
{"time": "2021-02-14 19:28:19.884936", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if ((p)  (maxJ())) { for (0; ; x++)(!((x))); }; }}", "n_tokens": 64, "n_pass": [555, 52, 45]}
{"time": "2021-02-14 19:28:23.358504", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p)  (maxJ())) { for (0; ; x++)(!((x))); }; }}", "n_tokens": 63, "n_pass": [577, 53, 46]}
{"time": "2021-02-14 19:28:26.007416", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p) (maxJ())) { for (0; ; x++)(!((x))); }; }}", "n_tokens": 62, "n_pass": [582, 54, 47]}
{"time": "2021-02-14 19:28:28.656319", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())) { for (0; ; x++)(!((x))); }; }}", "n_tokens": 61, "n_pass": [583, 55, 48]}
{"time": "2021-02-14 19:28:31.324270", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){ for (0; ; x++)(!((x))); }; }}", "n_tokens": 60, "n_pass": [590, 56, 49]}
{"time": "2021-02-14 19:28:33.978299", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for (0; ; x++)(!((x))); }; }}", "n_tokens": 59, "n_pass": [592, 57, 50]}
{"time": "2021-02-14 19:28:36.617386", "score": "0.299", "loss": "1.3741", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(0; ; x++)(!((x))); }; }}", "n_tokens": 58, "n_pass": [594, 58, 51]}
{"time": "2021-02-14 19:28:39.281288", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(; ; x++)(!((x))); }; }}", "n_tokens": 57, "n_pass": [596, 59, 52]}
{"time": "2021-02-14 19:28:41.920603", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;; x++)(!((x))); }; }}", "n_tokens": 56, "n_pass": [598, 60, 53]}
{"time": "2021-02-14 19:28:44.548803", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(!((x))); }; }}", "n_tokens": 55, "n_pass": [600, 61, 54]}
{"time": "2021-02-14 19:28:47.201397", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(((x))); }; }}", "n_tokens": 54, "n_pass": [606, 62, 55]}
{"time": "2021-02-14 19:28:49.865744", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(((x)));}; }}", "n_tokens": 53, "n_pass": [614, 63, 56]}
{"time": "2021-02-14 19:28:52.496171", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(((x)));} }}", "n_tokens": 52, "n_pass": [616, 64, 57]}
{"time": "2021-02-14 19:28:55.123763", "score": "0.4179", "loss": "0.9632", "code": "boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(((x)));}}}", "n_tokens": 51, "n_pass": [617, 65, 58]}

Minimal simplified code:
boolean equals(Object obj){if((obj)){p();if((p)(maxJ())){for(;;x++)(((x)));}}}

