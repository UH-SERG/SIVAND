
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ecgost12/BCECGOST3410_2012PublicKey_equals.java
method_name = equals
method_body = public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST3410_2012PublicKey other = (BCECGOST3410_2012PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQ()) && (engineGetSpec().equals(other.engineGetSpec())); }
predict, score, loss = equals, 0.9944378137588501, 0.0063470215536653996

Trace of simplified code(s):
{"time": "2021-02-14 09:27:53.756199", "score": "0.9944", "loss": "0.0063", "code": "public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST3410_2012PublicKey other = (BCECGOST3410_2012PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQ()) && (engineGetSpec().equals(other.engineGetSpec())); }", "n_tokens": 117, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 09:27:56.436932", "score": "0.9944", "loss": "0.0063", "code": "public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST3410_2012PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQ()) && (engineGetSpec().equals(other.engineGetSpec())); }", "n_tokens": 110, "n_pass": [51, 2, 2]}
{"time": "2021-02-14 09:27:59.086403", "score": "0.9944", "loss": "0.0063", "code": "public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQ()) && (engineGetSpec().equals(other.engineGetSpec())); }", "n_tokens": 103, "n_pass": [53, 3, 3]}
{"time": "2021-02-14 09:28:01.741924", "score": "0.9982", "loss": "0.0024", "code": "public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQengineGetSpec().equals(other.engineGetSpec())); }", "n_tokens": 95, "n_pass": [57, 4, 4]}
{"time": "2021-02-14 09:28:04.401784", "score": "0.9971", "loss": "0.0034", "code": "public boolean equals(Object o) { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 91, "n_pass": [97, 5, 5]}
{"time": "2021-02-14 09:28:07.454088", "score": "0.6824", "loss": "0.5194", "code": "public boolean equals() { if (!(o instanceof BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 88, "n_pass": [102, 6, 6]}
{"time": "2021-02-14 09:28:10.106660", "score": "0.4957", "loss": "0.9476", "code": "public boolean equals() { if (!( BCECGOST3410_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 85, "n_pass": [106, 7, 7]}
{"time": "2021-02-14 09:28:12.769609", "score": "0.4957", "loss": "0.9476", "code": "public boolean equals() { if (!( BCECGOST3_2012PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 82, "n_pass": [108, 8, 8]}
{"time": "2021-02-14 09:28:15.412210", "score": "0.4957", "loss": "0.9476", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.getQ().equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 78, "n_pass": [109, 9, 9]}
{"time": "2021-02-14 09:28:20.714207", "score": "0.3958", "loss": "1.1844", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.equals(other.ecPublicKey.getQequals(other.engineGetSpec())); }", "n_tokens": 74, "n_pass": [119, 11, 10]}
{"time": "2021-02-14 09:28:23.356896", "score": "0.9905", "loss": "0.0207", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST341 other = (BCECGOST12PublicKey) o; return ecPublicKey.equals(otherequals(other.engineGetSpec())); }", "n_tokens": 70, "n_pass": [121, 12, 11]}
{"time": "2021-02-14 09:28:26.415854", "score": "0.9734", "loss": "0.077", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST12PublicKey) o; return ecPublicKey.equals(otherequals(other.engineGetSpec())); }", "n_tokens": 66, "n_pass": [135, 13, 12]}
{"time": "2021-02-14 09:28:30.626312", "score": "0.9734", "loss": "0.077", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; return ecPublicKey.equals(otherequals(other.engineGetSpec())); }", "n_tokens": 64, "n_pass": [193, 14, 13]}
{"time": "2021-02-14 09:28:33.284652", "score": "0.9866", "loss": "0.0406", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey.equals(otherequals(other.engineGetSpec())); }", "n_tokens": 62, "n_pass": [196, 15, 14]}
{"time": "2021-02-14 09:28:35.926224", "score": "0.9963", "loss": "0.0326", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(other.engineGetSpec())); }", "n_tokens": 60, "n_pass": [198, 16, 15]}
{"time": "2021-02-14 09:28:38.558208", "score": "0.4815", "loss": "0.9846", "code": "public boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 58, "n_pass": [201, 17, 16]}
{"time": "2021-02-14 09:28:41.189772", "score": "0.4815", "loss": "0.9846", "code": " boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 57, "n_pass": [206, 18, 17]}
{"time": "2021-02-14 09:28:43.846740", "score": "0.4815", "loss": "0.9846", "code": "boolean equals() { if (!( BCECGOST32PublicKey)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 56, "n_pass": [207, 19, 18]}
{"time": "2021-02-14 09:28:47.270195", "score": "0.4815", "loss": "0.9846", "code": "boolean equals() { if (!( BCECGOST3)) { return false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 54, "n_pass": [218, 20, 19]}
{"time": "2021-02-14 09:28:49.919666", "score": "0.6591", "loss": "0.712", "code": "boolean equals() { if (!( BCECGOST3)) { false; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 52, "n_pass": [221, 21, 20]}
{"time": "2021-02-14 09:28:52.575888", "score": "0.6652", "loss": "0.6999", "code": "boolean equals() { if (!( BCECGOST3)) {; } BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 50, "n_pass": [222, 22, 21]}
{"time": "2021-02-14 09:28:55.234587", "score": "0.6652", "loss": "0.6999", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) o; ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 48, "n_pass": [223, 23, 22]}
{"time": "2021-02-14 09:28:57.867645", "score": "0.7305", "loss": "0.4735", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1)  ecPublicKey(otherequals(engineGetSpec())); }", "n_tokens": 46, "n_pass": [230, 24, 23]}
{"time": "2021-02-14 09:29:00.531588", "score": "0.8041", "loss": "1.3915", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) (otherequals(engineGetSpec())); }", "n_tokens": 44, "n_pass": [231, 25, 24]}
{"time": "2021-02-14 09:29:08.124574", "score": "0.9999", "loss": "0.0002", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) (equals(engineGetSpec())); }", "n_tokens": 43, "n_pass": [296, 26, 25]}
{"time": "2021-02-14 09:29:10.745762", "score": "0.912", "loss": "0.6564", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec())); }", "n_tokens": 42, "n_pass": [297, 27, 26]}
{"time": "2021-02-14 09:29:13.356236", "score": "0.912", "loss": "0.6564", "code": "boolean equals() { if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 41, "n_pass": [305, 28, 27]}
{"time": "2021-02-14 09:29:16.803498", "score": "0.912", "loss": "0.6564", "code": "boolean equals(){ if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 40, "n_pass": [312, 29, 28]}
{"time": "2021-02-14 09:29:19.440855", "score": "0.912", "loss": "0.6564", "code": "boolean equals(){if (!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 39, "n_pass": [314, 30, 29]}
{"time": "2021-02-14 09:29:22.060658", "score": "0.912", "loss": "0.6564", "code": "boolean equals(){if(!( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 38, "n_pass": [316, 31, 30]}
{"time": "2021-02-14 09:29:24.679741", "score": "0.912", "loss": "0.6564", "code": "boolean equals(){if(( BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 37, "n_pass": [318, 32, 31]}
{"time": "2021-02-14 09:29:27.287775", "score": "0.912", "loss": "0.6564", "code": "boolean equals(){if((BCECGOST3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 36, "n_pass": [320, 33, 32]}
{"time": "2021-02-14 09:29:29.899614", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)) {} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 35, "n_pass": [321, 34, 33]}
{"time": "2021-02-14 09:29:32.509937", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){} BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 34, "n_pass": [325, 35, 34]}
{"time": "2021-02-14 09:29:35.119800", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST3 = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 33, "n_pass": [328, 36, 35]}
{"time": "2021-02-14 09:29:38.122417", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST = (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 32, "n_pass": [330, 37, 36]}
{"time": "2021-02-14 09:29:40.754713", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST= (BCECGOST1) ((engineGetSpec()));}", "n_tokens": 31, "n_pass": [331, 38, 37]}
{"time": "2021-02-14 09:29:43.364292", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST=(BCECGOST1) ((engineGetSpec()));}", "n_tokens": 30, "n_pass": [333, 39, 38]}
{"time": "2021-02-14 09:29:46.024402", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST=(BCECGOST) ((engineGetSpec()));}", "n_tokens": 29, "n_pass": [336, 40, 39]}
{"time": "2021-02-14 09:29:48.636924", "score": "0.9276", "loss": "0.6088", "code": "boolean equals(){if((3)){}BCECGOST=(BCECGOST)((engineGetSpec()));}", "n_tokens": 28, "n_pass": [338, 41, 40]}

Minimal simplified code:
boolean equals(){if((3)){}BCECGOST=(BCECGOST)((engineGetSpec()));}

