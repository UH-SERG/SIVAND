
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/sections/sections-app-util/src/java/org/sakaiproject/tool/section/jsf/MessagingBean_equals.java
method_name = equals
method_body = public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecorator other = (MessageDecorator) obj; return new EqualsBuilder().append(getSeverity(), other.getSeverity()).append(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }
predict, score, loss = equals, 0.9999079704284668, 0.00011193125828867778

Trace of simplified code(s):
{"time": "2021-02-14 23:12:36.106600", "score": "0.9999", "loss": "0.0001", "code": "public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecorator other = (MessageDecorator) obj; return new EqualsBuilder().append(getSeverity(), other.getSeverity()).append(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 136, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 23:12:38.788765", "score": "0.9991", "loss": "0.0014", "code": "public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 102, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 23:12:41.561602", "score": "0.9987", "loss": "0.0023", "code": "public boolean equals(Object obj) { if (this== null) return false; if (getClass() != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 85, "n_pass": [22, 3, 3]}
{"time": "2021-02-14 23:12:44.227553", "score": "0.9437", "loss": "0.1459", "code": "public boolean equals(Object obj) { if (this != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 68, "n_pass": [23, 4, 4]}
{"time": "2021-02-14 23:12:46.962946", "score": "0.9964", "loss": "0.008", "code": "public boolean equals(Object obj) { if (this != obj.getClass()) return false; MessageDecoratorappend(getDetail(), getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 59, "n_pass": [39, 5, 5]}
{"time": "2021-02-14 23:12:50.020886", "score": "0.9754", "loss": "0.0645", "code": "public boolean equals(Object obj) { if ( obj.getClass()) return false; MessageDecoratorappend(getDetail(), getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 55, "n_pass": [69, 6, 6]}
{"time": "2021-02-14 23:12:52.674601", "score": "0.9821", "loss": "0.0408", "code": "public boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend(getDetail(), getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 51, "n_pass": [71, 7, 7]}
{"time": "2021-02-14 23:12:55.299779", "score": "0.5279", "loss": "1.5112", "code": "public boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend( getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 47, "n_pass": [73, 8, 8]}
{"time": "2021-02-14 23:12:58.352448", "score": "0.8991", "loss": "0.1712", "code": "public boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 45, "n_pass": [108, 9, 9]}
{"time": "2021-02-14 23:13:01.014178", "score": "0.9363", "loss": "0.0895", "code": "public boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend( getSummaryother.getSummary()).isEquals(); }", "n_tokens": 43, "n_pass": [109, 10, 10]}
{"time": "2021-02-14 23:13:03.678076", "score": "0.9519", "loss": "0.0624", "code": "public boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend( getSummarygetSummary()).isEquals(); }", "n_tokens": 41, "n_pass": [110, 11, 11]}
{"time": "2021-02-14 23:13:06.321739", "score": "0.9519", "loss": "0.0624", "code": "boolean equals(Object obj) { if ( obj.getClass())  MessageDecoratorappend( getSummarygetSummary()).isEquals(); }", "n_tokens": 39, "n_pass": [115, 12, 12]}
{"time": "2021-02-14 23:13:09.375170", "score": "0.9789", "loss": "0.0248", "code": "boolean equals(Object obj) { if ( obj())  MessageDecoratorappend( getSummarygetSummary()).isEquals(); }", "n_tokens": 37, "n_pass": [124, 13, 13]}
{"time": "2021-02-14 23:13:11.995513", "score": "0.9631", "loss": "0.0454", "code": "boolean equals(Object obj) { if ( obj)  MessageDecoratorappend( getSummarygetSummary()).isEquals(); }", "n_tokens": 35, "n_pass": [125, 14, 14]}
{"time": "2021-02-14 23:13:14.626991", "score": "0.9702", "loss": "0.0375", "code": "boolean equals(Object obj) { if ( obj) append( getSummarygetSummary()).isEquals(); }", "n_tokens": 33, "n_pass": [127, 15, 15]}
{"time": "2021-02-14 23:13:17.253649", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj) { if ( obj) append(getSummary()).isEquals(); }", "n_tokens": 31, "n_pass": [129, 16, 16]}
{"time": "2021-02-14 23:13:24.144793", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj){ if ( obj) append(getSummary()).isEquals(); }", "n_tokens": 30, "n_pass": [188, 17, 17]}
{"time": "2021-02-14 23:13:26.775878", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj){if ( obj) append(getSummary()).isEquals(); }", "n_tokens": 29, "n_pass": [189, 18, 18]}
{"time": "2021-02-14 23:13:29.816330", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj){if( obj) append(getSummary()).isEquals(); }", "n_tokens": 28, "n_pass": [191, 19, 19]}
{"time": "2021-02-14 23:13:32.672843", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj){if(obj) append(getSummary()).isEquals(); }", "n_tokens": 27, "n_pass": [193, 20, 20]}
{"time": "2021-02-14 23:13:35.313281", "score": "0.9805", "loss": "0.0275", "code": "boolean equals(Object obj){if(obj)append(getSummary()).isEquals(); }", "n_tokens": 26, "n_pass": [196, 21, 21]}
{"time": "2021-02-14 23:13:37.947671", "score": "0.9856", "loss": "0.0186", "code": "boolean equals(Object obj){if(obj)(getSummary()).isEquals(); }", "n_tokens": 25, "n_pass": [197, 22, 22]}
{"time": "2021-02-14 23:13:42.552222", "score": "0.9856", "loss": "0.0186", "code": "boolean equals(Object obj){if(obj)(getSummary()).isEquals();}", "n_tokens": 24, "n_pass": [230, 23, 23]}

Minimal simplified code:
boolean equals(Object obj){if(obj)(getSummary()).isEquals();}

