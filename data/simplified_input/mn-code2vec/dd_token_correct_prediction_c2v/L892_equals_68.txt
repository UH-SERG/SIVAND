
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/vfs/src/main/java/droidefense/vfs/model/impl/VirtualFolder_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; VirtualNode that = (VirtualNode) o; if (parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }
predict, score, loss = equals, 0.9999880790710449, 1.3947389561508317e-05

Trace of simplified code(s):
{"time": "2021-02-16 05:05:40.064462", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; VirtualNode that = (VirtualNode) o; if (parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 161, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 05:05:42.664687", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 121, "n_pass": [9, 2, 2]}
{"time": "2021-02-16 05:05:45.255244", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object o) { if (thisparentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 101, "n_pass": [23, 3, 3]}
{"time": "2021-02-16 05:05:47.851935", "score": "0.9997", "loss": "0.0005", "code": "@Override public boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 96, "n_pass": [68, 4, 4]}
{"time": "2021-02-16 05:05:50.432890", "score": "0.9732", "loss": "0.0485", "code": "@Override public boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 91, "n_pass": [74, 5, 5]}
{"time": "2021-02-16 05:05:53.009925", "score": "0.4528", "loss": "1.7717", "code": "boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 86, "n_pass": [83, 6, 6]}
{"time": "2021-02-16 05:05:55.971116", "score": "0.6725", "loss": "0.8898", "code": "boolean equals(Object o) { if (thisnull ?parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 84, "n_pass": [144, 7, 7]}
{"time": "2021-02-16 05:06:01.080630", "score": "0.6711", "loss": "1.1147", "code": "boolean equals(Object o) { if (thisnull ?parentNode.equals(getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 82, "n_pass": [147, 9, 8]}
{"time": "2021-02-16 05:06:03.672161", "score": "0.6477", "loss": "1.3167", "code": "boolean equals(Object o) { if (thisnull ?parentNode.equals(getParentNode()) :getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 79, "n_pass": [151, 10, 9]}
{"time": "2021-02-16 05:06:06.974876", "score": "0.544", "loss": "1.6718", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 77, "n_pass": [178, 11, 10]}
{"time": "2021-02-16 05:06:14.289531", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()) :getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 76, "n_pass": [269, 12, 11]}
{"time": "2021-02-16 05:06:16.844880", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 75, "n_pass": [274, 13, 12]}
{"time": "2021-02-16 05:06:19.405352", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!= null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 74, "n_pass": [279, 14, 13]}
{"time": "2021-02-16 05:06:22.331673", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!=null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 73, "n_pass": [282, 15, 14]}
{"time": "2021-02-16 05:06:24.880466", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!=null)return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 72, "n_pass": [285, 16, 15]}
{"time": "2021-02-16 05:06:27.806065", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!=null)return(name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 71, "n_pass": [287, 17, 16]}
{"time": "2021-02-16 05:06:30.386267", "score": "0.3826", "loss": "2.3951", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 70, "n_pass": [290, 18, 17]}
{"time": "2021-02-16 05:06:40.592009", "score": "0.2833", "loss": "2.7104", "code": "boolean equals(Object o) { if (thisnull ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 68, "n_pass": [303, 22, 18]}
{"time": "2021-02-16 05:06:43.900208", "score": "0.2833", "loss": "2.7104", "code": "boolean equals(Object o){ if (thisnull ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 67, "n_pass": [318, 23, 19]}
{"time": "2021-02-16 05:06:46.473142", "score": "0.2833", "loss": "2.7104", "code": "boolean equals(Object o){if (thisnull ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 66, "n_pass": [320, 24, 20]}
{"time": "2021-02-16 05:06:49.030032", "score": "0.2833", "loss": "2.7104", "code": "boolean equals(Object o){if(thisnull ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 65, "n_pass": [322, 25, 21]}
{"time": "2021-02-16 05:06:51.580758", "score": "0.6905", "loss": "0.8859", "code": "boolean equals(Object o){if(null ?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 64, "n_pass": [324, 26, 22]}
{"time": "2021-02-16 05:06:54.134710", "score": "0.6905", "loss": "0.8859", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (getName() == null); }", "n_tokens": 63, "n_pass": [326, 27, 23]}
{"time": "2021-02-16 05:06:59.982551", "score": "0.4546", "loss": "1.1973", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name!= null) ? equals(that.getName()) : (getName() == null); }", "n_tokens": 61, "n_pass": [349, 29, 24]}
{"time": "2021-02-16 05:07:06.561651", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()) : (getName() == null); }", "n_tokens": 60, "n_pass": [391, 31, 25]}
{"time": "2021-02-16 05:07:18.777837", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()): (getName() == null); }", "n_tokens": 59, "n_pass": [473, 34, 26]}
{"time": "2021-02-16 05:07:21.314413", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()):(getName() == null); }", "n_tokens": 58, "n_pass": [474, 35, 27]}
{"time": "2021-02-16 05:07:23.881620", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()):(getName()== null); }", "n_tokens": 57, "n_pass": [479, 36, 28]}
{"time": "2021-02-16 05:07:27.153361", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()):(getName()==null); }", "n_tokens": 56, "n_pass": [482, 37, 29]}
{"time": "2021-02-16 05:07:29.703533", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(that.getName()):(getName()==null);}", "n_tokens": 55, "n_pass": [486, 38, 30]}
{"time": "2021-02-16 05:07:33.723861", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null) ? equals(that.getName()):(getName()==null);}", "n_tokens": 54, "n_pass": [518, 39, 31]}
{"time": "2021-02-16 05:07:36.291964", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)? equals(that.getName()):(getName()==null);}", "n_tokens": 53, "n_pass": [521, 40, 32]}
{"time": "2021-02-16 05:07:38.862655", "score": "0.3263", "loss": "1.6213", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(that.getName()):(getName()==null);}", "n_tokens": 52, "n_pass": [523, 41, 33]}

Minimal simplified code:
boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(that.getName()):(getName()==null);}

