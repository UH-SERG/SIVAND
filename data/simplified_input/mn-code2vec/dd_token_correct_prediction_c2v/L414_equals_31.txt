
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcElieceCCA2PrivateKey_equals.java
method_name = equals
method_body = public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey) other; return (getN() == otherKey.getN()) && (getK() == otherKey.getK()) && getField().equals(otherKey.getField()) && getGoppaPoly().equals(otherKey.getGoppaPoly()) && getP().equals(otherKey.getP()) && getH().equals(otherKey.getH()); }
predict, score, loss = equals, 0.9997085928916931, 0.0003299168893136084

Trace of simplified code(s):
{"time": "2021-02-14 18:18:22.824279", "score": "0.9996", "loss": "0.0004", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey) other; return (getN() == otherKey.getN()) && (getK() == otherKey.getK()) && getField().equals(otherKey.getField()) && getGoppaPoly().equals(otherKey.getGoppaPoly()) && getP().equals(otherKey.getP()) && getH().equals(otherKey.getH()); }", "n_tokens": 165, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 18:18:25.490931", "score": "0.9997", "loss": "0.0004", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey) other; return (getN() == otherKey.getN()) &(otherKey.getGoppaPoly()) && getP().equals(otherKey.getP()) && getH().equals(otherKey.getH()); }", "n_tokens": 124, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 18:18:28.154718", "score": "0.9991", "loss": "0.0011", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey) (otherKey.getGoppaPoly()) && getP().equals(otherKey.getP()) && getH().equals(otherKey.getH()); }", "n_tokens": 103, "n_pass": [24, 3, 3]}
{"time": "2021-02-14 18:18:30.812852", "score": "0.9992", "loss": "0.001", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey)& getP().equals(otherKey.getP()) && getH().equals(otherKey.getH()); }", "n_tokens": 93, "n_pass": [40, 4, 4]}
{"time": "2021-02-14 18:18:34.283898", "score": "0.9999", "loss": "0.0001", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) && getH().equals(otherKey.getH()); }", "n_tokens": 88, "n_pass": [68, 5, 5]}
{"time": "2021-02-14 18:18:36.924597", "score": "0.9994", "loss": "0.0007", "code": "public boolean equals(Object other) { if (other == null || !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 82, "n_pass": [71, 6, 6]}
{"time": "2021-02-14 18:18:39.591749", "score": "0.9797", "loss": "0.0239", "code": "public boolean equals(Object other) { if (other == !(other instanceof BCMcElieceCCA2PrivateKey)) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 77, "n_pass": [78, 7, 7]}
{"time": "2021-02-14 18:18:42.236094", "score": "0.9808", "loss": "0.0228", "code": "public boolean equals(Object other) { if (other == !(other )) { return false; } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 72, "n_pass": [80, 8, 8]}
{"time": "2021-02-14 18:18:44.880939", "score": "0.9493", "loss": "0.0612", "code": "public boolean equals(Object other) { if (other == !(other )) { } BCMcElieceCCA2PrivateKey otherKey = (BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 67, "n_pass": [82, 9, 9]}
{"time": "2021-02-14 18:18:47.526744", "score": "0.8499", "loss": "0.2471", "code": "public boolean equals(Object other) { if (other == !(other )) { } BCMcElieceCCA2PrivateKey(BCMcElieceCCA2PrivateKey).equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 62, "n_pass": [84, 10, 10]}
{"time": "2021-02-14 18:18:50.182756", "score": "0.8514", "loss": "0.2339", "code": "public boolean equals(Object other) { if (other == !(other )) { } BCMcElieceCCA2PrivateKey.equals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 57, "n_pass": [85, 11, 11]}
{"time": "2021-02-14 18:18:52.833585", "score": "0.8759", "loss": "0.2384", "code": "public boolean equals(Object other) { if (other == !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 54, "n_pass": [119, 12, 12]}
{"time": "2021-02-14 18:18:55.495755", "score": "0.8759", "loss": "0.2384", "code": "boolean equals(Object other) { if (other == !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 52, "n_pass": [127, 13, 13]}
{"time": "2021-02-14 18:19:03.128998", "score": "0.8759", "loss": "0.2384", "code": "boolean equals(Object other){ if (other == !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 51, "n_pass": [196, 14, 14]}
{"time": "2021-02-14 18:19:05.764635", "score": "0.8759", "loss": "0.2384", "code": "boolean equals(Object other){if (other == !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 50, "n_pass": [197, 15, 15]}
{"time": "2021-02-14 18:19:08.401085", "score": "0.8759", "loss": "0.2384", "code": "boolean equals(Object other){if(other == !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 49, "n_pass": [199, 16, 16]}
{"time": "2021-02-14 18:19:11.034277", "score": "0.8759", "loss": "0.2384", "code": "boolean equals(Object other){if(other== !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 48, "n_pass": [202, 17, 17]}
{"time": "2021-02-14 18:19:13.685160", "score": "0.8789", "loss": "0.2412", "code": "boolean equals(Object other){if(other= !(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 47, "n_pass": [203, 18, 18]}
{"time": "2021-02-14 18:19:16.331740", "score": "0.8789", "loss": "0.2412", "code": "boolean equals(Object other){if(other=!(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 46, "n_pass": [205, 19, 19]}
{"time": "2021-02-14 18:19:18.964119", "score": "0.8825", "loss": "0.2349", "code": "boolean equals(Object other){if(other=(other )) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 45, "n_pass": [206, 20, 20]}
{"time": "2021-02-14 18:19:21.621470", "score": "0.8825", "loss": "0.2349", "code": "boolean equals(Object other){if(other=(other)) { } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 44, "n_pass": [209, 21, 21]}
{"time": "2021-02-14 18:19:24.253568", "score": "0.8825", "loss": "0.2349", "code": "boolean equals(Object other){if(other=(other)){ } BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 43, "n_pass": [212, 22, 22]}
{"time": "2021-02-14 18:19:26.888451", "score": "0.8825", "loss": "0.2349", "code": "boolean equals(Object other){if(other=(other)){} BCMcElieceCCAequals(otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 42, "n_pass": [214, 23, 23]}
{"time": "2021-02-14 18:19:29.532346", "score": "0.9108", "loss": "0.1294", "code": "boolean equals(Object other){if(other=(other)){} (otherKey.getP()) .equals(otherKey.getH()); }", "n_tokens": 40, "n_pass": [216, 24, 24]}
{"time": "2021-02-14 18:19:32.199151", "score": "0.9227", "loss": "0.147", "code": "boolean equals(Object other){if(other=(other)){} (otherKey()) .equals(otherKey.getH()); }", "n_tokens": 38, "n_pass": [218, 25, 25]}
{"time": "2021-02-14 18:19:34.811774", "score": "0.9417", "loss": "0.1158", "code": "boolean equals(Object other){if(other=(other)){} (otherKey) .equals(otherKey.getH()); }", "n_tokens": 36, "n_pass": [219, 26, 26]}
{"time": "2021-02-14 18:19:37.851798", "score": "0.9948", "loss": "0.009", "code": "boolean equals(Object other){if(other=(other)){} (otherKey) .equals(otherKey()); }", "n_tokens": 34, "n_pass": [223, 27, 27]}
{"time": "2021-02-14 18:19:40.499917", "score": "0.9904", "loss": "0.0185", "code": "boolean equals(Object other){if(other=(other)){} (otherKey) .equals(otherKey); }", "n_tokens": 32, "n_pass": [224, 28, 28]}
{"time": "2021-02-14 18:19:43.945622", "score": "0.99", "loss": "0.0252", "code": "boolean equals(Object other){if(other(other)){} (otherKey) .equals(otherKey); }", "n_tokens": 31, "n_pass": [239, 29, 29]}
{"time": "2021-02-14 18:19:46.562039", "score": "0.9907", "loss": "0.0205", "code": "boolean equals(Object other){if(other()){} (otherKey) .equals(otherKey); }", "n_tokens": 30, "n_pass": [241, 30, 30]}
{"time": "2021-02-14 18:19:51.894559", "score": "0.9907", "loss": "0.0205", "code": "boolean equals(Object other){if(other()){}(otherKey) .equals(otherKey); }", "n_tokens": 29, "n_pass": [280, 31, 31]}
{"time": "2021-02-14 18:19:54.531729", "score": "0.9907", "loss": "0.0205", "code": "boolean equals(Object other){if(other()){}(otherKey).equals(otherKey); }", "n_tokens": 28, "n_pass": [284, 32, 32]}
{"time": "2021-02-14 18:19:57.550319", "score": "0.9954", "loss": "0.0082", "code": "boolean equals(Object other){if(other()){}(otherKey).equals(); }", "n_tokens": 27, "n_pass": [288, 33, 33]}
{"time": "2021-02-14 18:20:00.173582", "score": "0.9954", "loss": "0.0082", "code": "boolean equals(Object other){if(other()){}(otherKey).equals();}", "n_tokens": 26, "n_pass": [291, 34, 34]}

Minimal simplified code:
boolean equals(Object other){if(other()){}(otherKey).equals();}

