
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/com/o3dr/services/android/lib/drone/mission/item/spatial/Waypoint_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double.compare(waypoint.delay, delay) != 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0) return false; if (Double.compare(waypoint.yawAngle, yawAngle) != 0) return false; if (Double.compare(waypoint.orbitalRadius, orbitalRadius) != 0) return false; return orbitCCW == waypoint.orbitCCW; }
predict, score, loss = equals, 0.9998804330825806, 0.00016282663273159415

Trace of simplified code(s):
{"time": "2021-02-14 08:02:54.414341", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double.compare(waypoint.delay, delay) != 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0) return false; if (Double.compare(waypoint.yawAngle, yawAngle) != 0) return false; if (Double.compare(waypoint.orbitalRadius, orbitalRadius) != 0) return false; return orbitCCW == waypoint.orbitCCW; }", "n_tokens": 197, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 08:02:57.141940", "score": "0.986", "loss": "0.0206", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double.compare(waypoint.delay, delay) != 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0) return false; if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return false; return orbitCCW == waypoint.orbitCCW; }", "n_tokens": 172, "n_pass": [26, 2, 2]}
{"time": "2021-02-14 08:02:59.852128", "score": "0.9993", "loss": "0.0007", "code": "@Override public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double.compare(waypoint.delay, delay) != 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0) return false; if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return false; return orbitCCW == waypoint.orbitCCW; }", "n_tokens": 160, "n_pass": [51, 3, 3]}
{"time": "2021-02-14 08:03:02.562973", "score": "0.9979", "loss": "0.0034", "code": "@Override public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0) return false; if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return false; return orbitCCW == waypoint.orbitCCW; }", "n_tokens": 148, "n_pass": [55, 4, 4]}
{"time": "2021-02-14 08:03:05.295019", "score": "0.985", "loss": "0.0191", "code": "@Override public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return false; return orbitCCW == waypoint.orbitCCW; }", "n_tokens": 142, "n_pass": [97, 5, 5]}
{"time": "2021-02-14 08:03:07.967297", "score": "0.9988", "loss": "0.002", "code": "@Override public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return false; waypoint.orbitCCW; }", "n_tokens": 135, "n_pass": [102, 6, 6]}
{"time": "2021-02-14 08:03:11.504526", "score": "0.8785", "loss": "0.1858", "code": "@Override public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 131, "n_pass": [169, 7, 7]}
{"time": "2021-02-14 08:03:14.182463", "score": "0.9058", "loss": "0.1327", "code": "public boolean equals(Object o) { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 128, "n_pass": [171, 8, 8]}
{"time": "2021-02-14 08:03:17.265036", "score": "0.8804", "loss": "0.563", "code": "public boolean equals() { if (this == (o instanceof Waypoint)) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 125, "n_pass": [174, 9, 9]}
{"time": "2021-02-14 08:03:20.354900", "score": "0.6013", "loss": "1.6735", "code": "public boolean equals() { if (this == (o )) return false; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 122, "n_pass": [180, 10, 10]}
{"time": "2021-02-14 08:03:23.017641", "score": "0.8381", "loss": "0.5132", "code": "public boolean equals() { if (this == (o )) ; if (!super.equals(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 119, "n_pass": [182, 11, 11]}
{"time": "2021-02-14 08:03:25.687334", "score": "0.3478", "loss": "1.9373", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double= 0) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 116, "n_pass": [185, 12, 12]}
{"time": "2021-02-14 08:03:31.072553", "score": "0.5445", "loss": "1.4556", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle, yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 113, "n_pass": [195, 14, 13]}
{"time": "2021-02-14 08:03:33.748024", "score": "0.8751", "loss": "0.3007", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle)  != 0) return falseorbitCCW; }", "n_tokens": 110, "n_pass": [208, 15, 14]}
{"time": "2021-02-14 08:03:36.430312", "score": "0.9484", "loss": "0.1426", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if (Double.compare(waypoint.yawAngle)  != 0)orbitCCW; }", "n_tokens": 106, "n_pass": [212, 16, 15]}
{"time": "2021-02-14 08:03:45.354097", "score": "0.989", "loss": "0.0196", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  != 0)orbitCCW; }", "n_tokens": 103, "n_pass": [243, 19, 16]}
{"time": "2021-02-14 08:03:48.005447", "score": "0.9937", "loss": "0.0095", "code": "public boolean equals() { if (this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 100, "n_pass": [246, 20, 17]}
{"time": "2021-02-14 08:03:51.073366", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals() {(this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 97, "n_pass": [252, 21, 18]}
{"time": "2021-02-14 08:04:02.175091", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this == (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 96, "n_pass": [350, 23, 19]}
{"time": "2021-02-14 08:04:04.838173", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this== (o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 95, "n_pass": [354, 24, 20]}
{"time": "2021-02-14 08:04:08.327416", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this==(o )) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 94, "n_pass": [357, 25, 21]}
{"time": "2021-02-14 08:04:10.993647", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this==(o)) ; if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 93, "n_pass": [360, 26, 22]}
{"time": "2021-02-14 08:04:13.652418", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this==(o)); if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 92, "n_pass": [363, 27, 23]}
{"time": "2021-02-14 08:04:16.312356", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this==(o));if (!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 91, "n_pass": [365, 28, 24]}
{"time": "2021-02-14 08:04:18.973102", "score": "0.6403", "loss": "0.9215", "code": "public boolean equals(){(this==(o));if(!(o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 90, "n_pass": [367, 29, 25]}
{"time": "2021-02-14 08:04:21.664260", "score": "0.6403", "loss": "0.9198", "code": "public boolean equals(){(this==(o));if((o)) return false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 89, "n_pass": [369, 30, 26]}
{"time": "2021-02-14 08:04:24.345644", "score": "0.2563", "loss": "2.3443", "code": "public boolean equals(){(this==(o));if((o)) false; Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 87, "n_pass": [374, 31, 27]}
{"time": "2021-02-14 08:04:27.002479", "score": "0.2647", "loss": "2.3099", "code": "public boolean equals(){(this==(o));if((o)); Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)  0)orbitCCW; }", "n_tokens": 85, "n_pass": [375, 32, 28]}
{"time": "2021-02-14 08:04:51.289662", "score": "0.2647", "loss": "2.3099", "code": "public boolean equals(){(this==(o));if((o)); Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 83, "n_pass": [403, 41, 29]}
{"time": "2021-02-14 08:04:53.946962", "score": "0.2647", "loss": "2.3099", "code": " boolean equals(){(this==(o));if((o)); Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 82, "n_pass": [407, 42, 30]}
{"time": "2021-02-14 08:04:56.617332", "score": "0.2647", "loss": "2.3099", "code": "boolean equals(){(this==(o));if((o)); Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 81, "n_pass": [408, 43, 31]}
{"time": "2021-02-14 08:05:00.932069", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint = (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 80, "n_pass": [424, 44, 32]}
{"time": "2021-02-14 08:05:37.118128", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint= (Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 79, "n_pass": [536, 54, 33]}
{"time": "2021-02-14 08:05:39.792527", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint) o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 78, "n_pass": [538, 55, 34]}
{"time": "2021-02-14 08:05:42.441624", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o; if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 77, "n_pass": [542, 56, 35]}
{"time": "2021-02-14 08:05:47.728336", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if (Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 76, "n_pass": [545, 58, 36]}
{"time": "2021-02-14 08:05:50.372524", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double) return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 75, "n_pass": [547, 59, 37]}
{"time": "2021-02-14 08:05:53.016099", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false; if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 74, "n_pass": [551, 60, 38]}
{"time": "2021-02-14 08:06:03.604099", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if (Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 73, "n_pass": [556, 64, 39]}
{"time": "2021-02-14 08:06:06.249613", "score": "0.2628", "loss": "2.32", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypoint.acceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 72, "n_pass": [558, 65, 40]}
{"time": "2021-02-14 08:06:11.535982", "score": "0.6635", "loss": "1.3167", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius, acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 71, "n_pass": [565, 67, 41]}
{"time": "2021-02-14 08:06:16.823865", "score": "0.6635", "loss": "1.3167", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius) != 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 70, "n_pass": [568, 69, 42]}
{"time": "2021-02-14 08:06:19.470749", "score": "0.6635", "loss": "1.3167", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!= 0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 69, "n_pass": [571, 70, 43]}
{"time": "2021-02-14 08:06:22.546430", "score": "0.6635", "loss": "1.3167", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if ((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 68, "n_pass": [574, 71, 44]}
{"time": "2021-02-14 08:06:25.194234", "score": "0.6635", "loss": "1.3167", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint.yawAngle)0)orbitCCW; }", "n_tokens": 67, "n_pass": [578, 72, 45]}
{"time": "2021-02-14 08:06:27.837521", "score": "0.7654", "loss": "0.9872", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypointyawAngle)0)orbitCCW; }", "n_tokens": 66, "n_pass": [582, 73, 46]}
{"time": "2021-02-14 08:06:30.494573", "score": "0.6118", "loss": "1.4904", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint)0)orbitCCW; }", "n_tokens": 65, "n_pass": [583, 74, 47]}
{"time": "2021-02-14 08:06:33.139933", "score": "0.6433", "loss": "1.365", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint))orbitCCW; }", "n_tokens": 64, "n_pass": [585, 75, 48]}
{"time": "2021-02-14 08:06:35.785690", "score": "0.6709", "loss": "1.2458", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint)); }", "n_tokens": 63, "n_pass": [587, 76, 49]}
{"time": "2021-02-14 08:06:38.432373", "score": "0.6709", "loss": "1.2458", "code": "boolean equals(){(this==(o));((o)); Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint));}", "n_tokens": 62, "n_pass": [589, 77, 50]}
{"time": "2021-02-14 08:06:42.739195", "score": "0.6709", "loss": "1.2458", "code": "boolean equals(){(this==(o));((o));Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(waypointacceptanceRadius,acceptanceRadius)!=0)if((waypoint));}", "n_tokens": 61, "n_pass": [612, 78, 51]}
{"time": "2021-02-14 08:07:06.610148", "score": "0.6709", "loss": "1.2458", "code": "boolean equals(){(this==(o));((o));Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(acceptanceRadius,acceptanceRadius)!=0)if((waypoint));}", "n_tokens": 60, "n_pass": [636, 87, 52]}
{"time": "2021-02-14 08:07:12.336515", "score": "0.7185", "loss": "1.081", "code": "boolean equals(){(this==(o));((o));Waypoint waypoint=(Waypoint)o;if(Double)return false;if(Double.compare(acceptanceRadius,acceptanceRadius)!=0)((waypoint));}", "n_tokens": 59, "n_pass": [645, 89, 53]}
{"time": "2021-02-14 08:07:24.632899", "score": "0.182", "loss": "4.1154", "code": "boolean equals(){(this==(o));((o));Waypoint waypoint=(Waypoint);if(Double)return false;if(Double.compare(acceptanceRadius,acceptanceRadius)!=0)((waypoint));}", "n_tokens": 58, "n_pass": [681, 93, 54]}
{"time": "2021-02-14 08:07:45.318197", "score": "0.418", "loss": "3.0958", "code": "boolean equals(){(this==(o));((o));Waypointwaypoint=(Waypoint);if(Double)return false;if(Double.compare(acceptanceRadius,acceptanceRadius)!=0)((waypoint));}", "n_tokens": 57, "n_pass": [734, 100, 55]}

Minimal simplified code:
boolean equals(){(this==(o));((o));Waypointwaypoint=(Waypoint);if(Double)return false;if(Double.compare(acceptanceRadius,acceptanceRadius)!=0)((waypoint));}

