
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CopyStatementNode_printSubNodes.java
method_name = printSubNodes
method_body = public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, "subquery: "); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, "columnList: "); columnList.treePrint(depth + 1); } }
predict, score, loss = printSubNodes, 0.999919056892395, 0.0003036991402041167

Trace of simplified code(s):
{"time": "2021-02-14 14:38:03.708427", "score": "0.9999", "loss": "0.0003", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 14:38:06.836123", "score": "0.9992", "loss": "0.0036", "code": "public void printSubNodes() { super.printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 99, "n_pass": [94, 2, 2]}
{"time": "2021-02-14 14:38:09.486308", "score": "0.9989", "loss": "0.0041", "code": "public void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(depth, \"subquery: \"); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 96, "n_pass": [95, 3, 3]}
{"time": "2021-02-14 14:38:12.164522", "score": "0.9971", "loss": "0.0093", "code": "public void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \"); subquery.treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 93, "n_pass": [103, 4, 4]}
{"time": "2021-02-14 14:38:14.822383", "score": "0.998", "loss": "0.0066", "code": "public void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint(depth + 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 90, "n_pass": [106, 5, 5]}
{"time": "2021-02-14 14:38:17.479240", "score": "0.9981", "loss": "0.0059", "code": "public void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \"); columnList.treePrint(depth + 1); } }", "n_tokens": 87, "n_pass": [108, 6, 6]}
{"time": "2021-02-14 14:38:20.139766", "score": "0.9976", "loss": "0.007", "code": "public void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 83, "n_pass": [119, 7, 7]}
{"time": "2021-02-14 14:38:25.896330", "score": "0.9976", "loss": "0.007", "code": " void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 82, "n_pass": [204, 8, 8]}
{"time": "2021-02-14 14:38:28.542639", "score": "0.9976", "loss": "0.007", "code": "void printSubNodes() {printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 81, "n_pass": [205, 9, 9]}
{"time": "2021-02-14 14:38:31.600859", "score": "0.9976", "loss": "0.007", "code": "void printSubNodes(){printSubNodes(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 80, "n_pass": [210, 10, 10]}
{"time": "2021-02-14 14:38:34.261888", "score": "0.9941", "loss": "0.0205", "code": "void printSubNodes(){(depth); if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 79, "n_pass": [212, 11, 11]}
{"time": "2021-02-14 14:38:36.909375", "score": "0.9941", "loss": "0.0205", "code": "void printSubNodes(){(depth);if (subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 78, "n_pass": [217, 12, 12]}
{"time": "2021-02-14 14:38:39.559915", "score": "0.9941", "loss": "0.0205", "code": "void printSubNodes(){(depth);if(subquery != null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 77, "n_pass": [219, 13, 13]}
{"time": "2021-02-14 14:38:42.219584", "score": "0.9941", "loss": "0.0205", "code": "void printSubNodes(){(depth);if(subquery!= null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 76, "n_pass": [222, 14, 14]}
{"time": "2021-02-14 14:38:44.864854", "score": "0.9978", "loss": "0.0106", "code": "void printSubNodes(){(depth);if(subquery= null) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 75, "n_pass": [223, 15, 15]}
{"time": "2021-02-14 14:38:47.501319", "score": "0.999", "loss": "0.005", "code": "void printSubNodes(){(depth);if(subquerynull) { printLabel(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 73, "n_pass": [224, 16, 16]}
{"time": "2021-02-14 14:38:50.158356", "score": "0.9997", "loss": "0.0023", "code": "void printSubNodes(){(depth);if(subquerynull) {(\"subquery: \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 71, "n_pass": [227, 17, 17]}
{"time": "2021-02-14 14:38:52.794191", "score": "0.9997", "loss": "0.0021", "code": "void printSubNodes(){(depth);if(subquerynull) {(\" \").treePrint( 1); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 69, "n_pass": [229, 18, 18]}
{"time": "2021-02-14 14:38:55.433549", "score": "0.9994", "loss": "0.0049", "code": "void printSubNodes(){(depth);if(subquerynull) {(\" \").treePrint(); } if (columnList != null) { printLabel(depth, \"columnList: \");(depth + 1); } }", "n_tokens": 67, "n_pass": [233, 19, 19]}
{"time": "2021-02-14 14:38:58.084502", "score": "0.9819", "loss": "0.1239", "code": "void printSubNodes(){(depth);if(subquerynull) {(\" \").treePrint(); } if (columnList != null) { printLabel( \"columnList: \");(depth + 1); } }", "n_tokens": 65, "n_pass": [244, 20, 20]}
{"time": "2021-02-14 14:39:00.712968", "score": "0.9884", "loss": "0.0528", "code": "void printSubNodes(){(depth);if(subquerynull) {(\" \").treePrint(); } if (columnList != null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 63, "n_pass": [246, 21, 21]}
{"time": "2021-02-14 14:39:04.259697", "score": "0.9862", "loss": "0.0651", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint(); } if (columnList != null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 62, "n_pass": [267, 22, 22]}
{"time": "2021-02-14 14:39:14.489355", "score": "0.9862", "loss": "0.0651", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();} if (columnList != null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 61, "n_pass": [361, 23, 23]}
{"time": "2021-02-14 14:39:17.127814", "score": "0.9862", "loss": "0.0651", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if (columnList != null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 60, "n_pass": [362, 24, 24]}
{"time": "2021-02-14 14:39:19.765189", "score": "0.9862", "loss": "0.0651", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList != null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 59, "n_pass": [364, 25, 25]}
{"time": "2021-02-14 14:39:22.399043", "score": "0.9862", "loss": "0.0651", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList!= null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 58, "n_pass": [367, 26, 26]}
{"time": "2021-02-14 14:39:25.033768", "score": "0.99", "loss": "0.0563", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList= null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 57, "n_pass": [368, 27, 27]}
{"time": "2021-02-14 14:39:27.664168", "score": "0.99", "loss": "0.0563", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null) { printLabel( \" \");(depth + 1); } }", "n_tokens": 56, "n_pass": [370, 28, 28]}
{"time": "2021-02-14 14:39:30.302124", "score": "0.99", "loss": "0.0563", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){ printLabel( \" \");(depth + 1); } }", "n_tokens": 55, "n_pass": [373, 29, 29]}
{"time": "2021-02-14 14:39:32.933427", "score": "0.99", "loss": "0.0563", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){printLabel( \" \");(depth + 1); } }", "n_tokens": 54, "n_pass": [375, 30, 30]}
{"time": "2021-02-14 14:39:35.562824", "score": "0.9352", "loss": "0.2378", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){( \" \");(depth + 1); } }", "n_tokens": 53, "n_pass": [376, 31, 31]}
{"time": "2021-02-14 14:39:38.200787", "score": "0.9352", "loss": "0.2378", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\" \");(depth + 1); } }", "n_tokens": 52, "n_pass": [378, 32, 32]}
{"time": "2021-02-14 14:39:40.845745", "score": "0.9351", "loss": "0.2394", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");(depth + 1); } }", "n_tokens": 51, "n_pass": [380, 33, 33]}
{"time": "2021-02-14 14:39:43.481403", "score": "0.934", "loss": "0.2327", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");( + 1); } }", "n_tokens": 50, "n_pass": [385, 34, 34]}
{"time": "2021-02-14 14:39:46.117662", "score": "0.934", "loss": "0.2327", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");(+ 1); } }", "n_tokens": 49, "n_pass": [386, 35, 35]}
{"time": "2021-02-14 14:39:48.746835", "score": "0.9343", "loss": "0.232", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");( 1); } }", "n_tokens": 48, "n_pass": [387, 36, 36]}
{"time": "2021-02-14 14:39:51.377012", "score": "0.9343", "loss": "0.232", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");(1); } }", "n_tokens": 47, "n_pass": [388, 37, 37]}
{"time": "2021-02-14 14:39:54.014260", "score": "0.9343", "loss": "0.232", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");(1);} }", "n_tokens": 46, "n_pass": [392, 38, 38]}
{"time": "2021-02-14 14:39:56.665038", "score": "0.9343", "loss": "0.232", "code": "void printSubNodes(){(depth);if(null) {(\" \").treePrint();}if(columnList=null){(\"\");(1);}}", "n_tokens": 45, "n_pass": [394, 39, 39]}
{"time": "2021-02-14 14:40:00.100139", "score": "0.9343", "loss": "0.232", "code": "void printSubNodes(){(depth);if(null){(\" \").treePrint();}if(columnList=null){(\"\");(1);}}", "n_tokens": 44, "n_pass": [410, 40, 40]}
{"time": "2021-02-14 14:40:02.745379", "score": "0.9412", "loss": "0.2686", "code": "void printSubNodes(){(depth);if(null){(\"\").treePrint();}if(columnList=null){(\"\");(1);}}", "n_tokens": 43, "n_pass": [414, 41, 41]}
{"time": "2021-02-14 14:40:05.385661", "score": "0.9363", "loss": "0.2453", "code": "void printSubNodes(){(depth);if(null){(\"\").treePrint();}if(columnListnull){(\"\");(1);}}", "n_tokens": 42, "n_pass": [426, 42, 42]}
{"time": "2021-02-14 14:40:08.012723", "score": "0.9182", "loss": "0.3982", "code": "void printSubNodes(){(depth);if(null){(\"\").treePrint();}if(columnList){(\"\");(1);}}", "n_tokens": 41, "n_pass": [427, 43, 43]}

Minimal simplified code:
void printSubNodes(){(depth);if(null){("").treePrint();}if(columnList){("");(1);}}

