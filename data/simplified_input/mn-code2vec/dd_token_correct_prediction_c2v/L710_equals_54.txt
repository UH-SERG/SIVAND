
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseGroup_equals.java
method_name = equals
method_body = @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; BaseGroup other = (BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }
predict, score, loss = equals, 0.9999918937683105, 1.0967194612021558e-05

Trace of simplified code(s):
{"time": "2021-02-15 03:40:23.607139", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; BaseGroup other = (BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 151, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 03:40:26.302851", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj = obj.getClass()) return false; BaseGroup other = (BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 132, "n_pass": [22, 2, 2]}
{"time": "2021-02-15 03:40:29.018508", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return false; BaseGroup other = (BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 127, "n_pass": [86, 3, 3]}
{"time": "2021-02-15 03:40:31.658244", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return other = (BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 122, "n_pass": [88, 4, 4]}
{"time": "2021-02-15 03:40:34.317612", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return(BaseGroup) obj; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 117, "n_pass": [89, 5, 5]}
{"time": "2021-02-15 03:40:36.980698", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id != null) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 112, "n_pass": [90, 6, 6]}
{"time": "2021-02-15 03:40:39.626071", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!m_id.equals(other.m_id)) return false; return true; }", "n_tokens": 107, "n_pass": [96, 7, 7]}
{"time": "2021-02-15 03:40:42.308105", "score": "0.9994", "loss": "0.001", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return false; return true; }", "n_tokens": 102, "n_pass": [100, 8, 8]}
{"time": "2021-02-15 03:40:44.962469", "score": "0.9994", "loss": "0.0011", "code": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 97, "n_pass": [103, 9, 9]}
{"time": "2021-02-15 03:40:47.592560", "score": "0.9934", "loss": "0.0091", "code": " boolean equals(Object obj) { if (this == obj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 93, "n_pass": [105, 10, 10]}
{"time": "2021-02-15 03:40:50.276296", "score": "0.9716", "loss": "0.0998", "code": " boolean equals(Object obj) { if (thisobj) return true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 89, "n_pass": [110, 11, 11]}
{"time": "2021-02-15 03:40:53.654266", "score": "0.9743", "loss": "0.1011", "code": " boolean equals(Object obj) { if (thisobj) true; if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 87, "n_pass": [169, 12, 12]}
{"time": "2021-02-15 03:40:56.313605", "score": "0.9749", "loss": "0.0984", "code": " boolean equals(Object obj) { if (thisobj); if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 85, "n_pass": [170, 13, 13]}
{"time": "2021-02-15 03:40:58.951807", "score": "0.545", "loss": "1.6515", "code": " boolean equals(Object obj) { if (thisobj)if (obj ()) return; if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 83, "n_pass": [171, 14, 14]}
{"time": "2021-02-15 03:41:01.578591", "score": "0.545", "loss": "1.6515", "code": " boolean equals(Object obj) { if (thisobj)if (obj ()); if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 81, "n_pass": [176, 15, 15]}
{"time": "2021-02-15 03:41:04.222305", "score": "0.35", "loss": "2.5902", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m_id == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 79, "n_pass": [177, 16, 16]}
{"time": "2021-02-15 03:41:06.876371", "score": "0.2996", "loss": "2.876", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m == null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 77, "n_pass": [180, 17, 17]}
{"time": "2021-02-15 03:41:09.502259", "score": "0.306", "loss": "3.2211", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m= null) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 75, "n_pass": [181, 18, 18]}
{"time": "2021-02-15 03:41:12.131805", "score": "0.5242", "loss": "0.7301", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (mnull) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 73, "n_pass": [182, 19, 19]}
{"time": "2021-02-15 03:41:22.976721", "score": "0.5306", "loss": "2.4431", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m) { if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 72, "n_pass": [273, 21, 20]}
{"time": "2021-02-15 03:41:25.592115", "score": "0.5306", "loss": "2.4431", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){ if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 71, "n_pass": [274, 22, 21]}
{"time": "2021-02-15 03:41:28.257473", "score": "0.5306", "loss": "2.4431", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if (other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 70, "n_pass": [276, 23, 22]}
{"time": "2021-02-15 03:41:30.878764", "score": "0.5306", "loss": "2.4431", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other.m_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 69, "n_pass": [278, 24, 23]}
{"time": "2021-02-15 03:41:33.493804", "score": "0.4817", "loss": "0.8328", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(otherm_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 68, "n_pass": [281, 25, 24]}
{"time": "2021-02-15 03:41:36.139803", "score": "0.8198", "loss": "0.2681", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other_id) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 67, "n_pass": [282, 26, 25]}
{"time": "2021-02-15 03:41:38.742842", "score": "0.8198", "loss": "0.2681", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(otherid) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 66, "n_pass": [283, 27, 26]}
{"time": "2021-02-15 03:41:41.385583", "score": "0.9643", "loss": "0.0807", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other) return false; } else if (!(other.m_id)) return true; }", "n_tokens": 65, "n_pass": [284, 28, 27]}
{"time": "2021-02-15 03:41:43.997888", "score": "0.9643", "loss": "0.0807", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)return false; } else if (!(other.m_id)) return true; }", "n_tokens": 64, "n_pass": [286, 29, 28]}
{"time": "2021-02-15 03:41:46.661720", "score": "0.8089", "loss": "0.3812", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other) false; } else if (!(other.m_id)) return true; }", "n_tokens": 63, "n_pass": [287, 30, 29]}
{"time": "2021-02-15 03:41:49.276260", "score": "0.8089", "loss": "0.3812", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } else if (!(other.m_id)) return true; }", "n_tokens": 62, "n_pass": [288, 31, 30]}
{"time": "2021-02-15 03:41:51.913876", "score": "0.8608", "loss": "0.2803", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } if (!(other.m_id)) return true; }", "n_tokens": 60, "n_pass": [291, 32, 31]}
{"time": "2021-02-15 03:41:54.539284", "score": "0.8145", "loss": "0.3668", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } if (!(m_id)) return true; }", "n_tokens": 58, "n_pass": [295, 33, 32]}
{"time": "2021-02-15 03:41:57.154415", "score": "0.8044", "loss": "0.3819", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } if (!(id)) return true; }", "n_tokens": 56, "n_pass": [296, 34, 33]}
{"time": "2021-02-15 03:41:59.773260", "score": "0.7023", "loss": "0.5938", "code": " boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 54, "n_pass": [299, 35, 34]}
{"time": "2021-02-15 03:42:02.392585", "score": "0.7023", "loss": "0.5938", "code": "boolean equals(Object obj) { if (thisobj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 53, "n_pass": [302, 36, 35]}
{"time": "2021-02-15 03:42:05.776888", "score": "0.7023", "loss": "0.5938", "code": "boolean equals(Object obj){ if (thisobj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 52, "n_pass": [311, 37, 36]}
{"time": "2021-02-15 03:42:08.386236", "score": "0.7023", "loss": "0.5938", "code": "boolean equals(Object obj){if (thisobj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 51, "n_pass": [313, 38, 37]}
{"time": "2021-02-15 03:42:10.987783", "score": "0.7023", "loss": "0.5938", "code": "boolean equals(Object obj){if(thisobj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 50, "n_pass": [315, 39, 38]}
{"time": "2021-02-15 03:42:13.586490", "score": "0.9972", "loss": "0.0049", "code": "boolean equals(Object obj){if(obj)if (obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 49, "n_pass": [317, 40, 39]}
{"time": "2021-02-15 03:42:16.194448", "score": "0.9972", "loss": "0.0049", "code": "boolean equals(Object obj){if(obj)if(obj ())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 48, "n_pass": [321, 41, 40]}
{"time": "2021-02-15 03:42:18.797471", "score": "0.9972", "loss": "0.0049", "code": "boolean equals(Object obj){if(obj)if(obj())if (m){if(other)false; } if (!(id)) true; }", "n_tokens": 47, "n_pass": [324, 42, 41]}
{"time": "2021-02-15 03:42:21.400610", "score": "0.9972", "loss": "0.0049", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other)false; } if (!(id)) true; }", "n_tokens": 46, "n_pass": [329, 43, 42]}
{"time": "2021-02-15 03:42:27.780200", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other); } if (!(id)) true; }", "n_tokens": 45, "n_pass": [385, 44, 43]}
{"time": "2021-02-15 03:42:30.401182", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);} if (!(id)) true; }", "n_tokens": 44, "n_pass": [386, 45, 44]}
{"time": "2021-02-15 03:42:33.011378", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if (!(id)) true; }", "n_tokens": 43, "n_pass": [388, 46, 45]}
{"time": "2021-02-15 03:42:35.639323", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if(!(id)) true; }", "n_tokens": 42, "n_pass": [390, 47, 46]}
{"time": "2021-02-15 03:42:38.281422", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if((id)) true; }", "n_tokens": 41, "n_pass": [392, 48, 47]}
{"time": "2021-02-15 03:42:40.891061", "score": "0.9967", "loss": "0.0057", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if((id))true; }", "n_tokens": 40, "n_pass": [397, 49, 48]}
{"time": "2021-02-15 03:42:43.533239", "score": "0.9969", "loss": "0.0053", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if((id)); }", "n_tokens": 39, "n_pass": [398, 50, 49]}
{"time": "2021-02-15 03:42:46.141272", "score": "0.9969", "loss": "0.0053", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){if(other);}if((id));}", "n_tokens": 38, "n_pass": [400, 51, 50]}
{"time": "2021-02-15 03:42:49.561795", "score": "0.9672", "loss": "0.0508", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){(other);}if((id));}", "n_tokens": 37, "n_pass": [426, 52, 51]}
{"time": "2021-02-15 03:42:52.182733", "score": "0.9672", "loss": "0.0508", "code": "boolean equals(Object obj){if(obj)if(obj())if(m){(other);}((id));}", "n_tokens": 36, "n_pass": [432, 53, 52]}

Minimal simplified code:
boolean equals(Object obj){if(obj)if(obj())if(m){(other);}((id));}

