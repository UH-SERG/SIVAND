
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/tomcat/util/net/NioSelectorPool_open.java
method_name = open
method_body = public void open() throws IOException { enabled = true; getSharedSelector(); if (SHARED) { blockingSelector = new NioBlockingSelector(); blockingSelector.open(getSharedSelector()); } }
predict, score, loss = open, 0.9873096346855164, 0.025651851668953896

Trace of simplified code(s):
{"time": "2021-02-14 23:54:45.181256", "score": "0.9873", "loss": "0.0257", "code": "public void open() throws IOException { enabled = true; getSharedSelector(); if (SHARED) { blockingSelector = new NioBlockingSelector(); blockingSelector.open(getSharedSelector()); } }", "n_tokens": 58, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 23:54:47.928485", "score": "0.9977", "loss": "0.004", "code": "public void open() throws IOException { getSharedSelector(); if (SHARED) { blockingSelector = new NioBlockingSelector(); blockingSelector.open(getSharedSelector()); } }", "n_tokens": 51, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 23:54:50.625884", "score": "0.9972", "loss": "0.0043", "code": "public void open() throws IOException { getSharedSelector(); if (SHARED) { new NioBlockingSelector(); blockingSelector.open(getSharedSelector()); } }", "n_tokens": 47, "n_pass": [47, 3, 3]}
{"time": "2021-02-14 23:54:54.876685", "score": "0.9963", "loss": "0.0055", "code": "public void open() throws IOException { getSharedSelector(); if (SHARED) { NioBlockingSelector(); blockingSelector.open(getSharedSelector()); } }", "n_tokens": 45, "n_pass": [87, 4, 4]}
{"time": "2021-02-14 23:54:57.583453", "score": "0.3778", "loss": "1.7504", "code": "public void open() throws IOException { getSharedSelector(); if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 43, "n_pass": [90, 5, 5]}
{"time": "2021-02-14 23:55:02.933760", "score": "0.3778", "loss": "1.7504", "code": " void open() throws IOException { getSharedSelector(); if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 42, "n_pass": [96, 7, 6]}
{"time": "2021-02-14 23:55:05.624703", "score": "0.3778", "loss": "1.7504", "code": "void open() throws IOException { getSharedSelector(); if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 41, "n_pass": [97, 8, 7]}
{"time": "2021-02-14 23:55:09.107196", "score": "0.2609", "loss": "2.7113", "code": "void open() throws IOException { getSharedSelector; if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 39, "n_pass": [106, 9, 8]}
{"time": "2021-02-14 23:55:18.096923", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {; if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 37, "n_pass": [127, 12, 9]}
{"time": "2021-02-14 23:55:20.808333", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if (SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 35, "n_pass": [128, 13, 10]}
{"time": "2021-02-14 23:55:33.864903", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED) { NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 34, "n_pass": [180, 16, 11]}
{"time": "2021-02-14 23:55:36.623593", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED){ NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 33, "n_pass": [184, 17, 12]}
{"time": "2021-02-14 23:55:39.322031", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED){NioBlockingSelector(); blockingSelector(getSharedSelector()); } }", "n_tokens": 32, "n_pass": [186, 18, 13]}
{"time": "2021-02-14 23:55:42.081797", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector()); } }", "n_tokens": 31, "n_pass": [191, 19, 14]}
{"time": "2021-02-14 23:55:47.496424", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector());} }", "n_tokens": 30, "n_pass": [199, 21, 15]}
{"time": "2021-02-14 23:55:50.172798", "score": "0.2583", "loss": "2.7349", "code": "void open() throws IOException {if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector());}}", "n_tokens": 29, "n_pass": [201, 22, 16]}
{"time": "2021-02-14 23:55:53.680457", "score": "0.2583", "loss": "2.7349", "code": "void open()throws IOException {if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector());}}", "n_tokens": 28, "n_pass": [208, 23, 17]}
{"time": "2021-02-14 23:55:56.598161", "score": "0.2583", "loss": "2.7349", "code": "void open()throws IOException{if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector());}}", "n_tokens": 27, "n_pass": [212, 24, 18]}

Minimal simplified code:
void open()throws IOException{if(SHARED){NioBlockingSelector();blockingSelector(getSharedSelector());}}

