
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/text/TokenSequence_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }
predict, score, loss = equals, 0.9998742341995239, 0.00014399446081370115

Trace of simplified code(s):
{"time": "2021-02-14 21:58:11.538219", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 101, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 21:58:14.212403", "score": "0.9718", "loss": "0.0568", "code": "@Override public boolean equals(Object o) { if (this == o() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 76, "n_pass": [9, 2, 2]}
{"time": "2021-02-14 21:58:16.858207", "score": "0.9988", "loss": "0.0015", "code": "@Override public boolean equals(Object o) { if (this ==  o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 70, "n_pass": [36, 3, 3]}
{"time": "2021-02-14 21:58:19.926293", "score": "0.9988", "loss": "0.0015", "code": "@Override public boolean equals(Object o) { if (this == getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 67, "n_pass": [70, 4, 4]}
{"time": "2021-02-14 21:58:22.599175", "score": "0.9971", "loss": "0.0035", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 64, "n_pass": [72, 5, 5]}
{"time": "2021-02-14 21:58:25.249233", "score": "0.9973", "loss": "0.0032", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 61, "n_pass": [73, 6, 6]}
{"time": "2021-02-14 21:58:30.536386", "score": "0.9988", "loss": "0.0014", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 57, "n_pass": [79, 8, 7]}
{"time": "2021-02-14 21:58:33.210535", "score": "0.9981", "loss": "0.0022", "code": "public boolean equals(Object o) { if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 54, "n_pass": [83, 9, 8]}
{"time": "2021-02-14 21:58:36.253604", "score": "0.2617", "loss": "2.309", "code": "public boolean equals() { if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 51, "n_pass": [86, 10, 9]}
{"time": "2021-02-14 21:58:47.216144", "score": "0.2617", "loss": "2.309", "code": "public boolean equals(){ if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 50, "n_pass": [138, 13, 10]}
{"time": "2021-02-14 21:58:49.845996", "score": "0.2617", "loss": "2.309", "code": "public boolean equals(){if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 49, "n_pass": [140, 14, 11]}
{"time": "2021-02-14 21:58:52.478664", "score": "0.2617", "loss": "2.309", "code": "public boolean equals(){if(this == getClass()) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 48, "n_pass": [142, 15, 12]}
{"time": "2021-02-14 21:58:55.116704", "score": "0.3206", "loss": "2.1607", "code": "public boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 46, "n_pass": [147, 16, 13]}
{"time": "2021-02-14 21:59:08.301151", "score": "0.3209", "loss": "2.1499", "code": "public boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals( sequence.words); }", "n_tokens": 44, "n_pass": [158, 21, 14]}
{"time": "2021-02-14 21:59:10.949743", "score": "0.3492", "loss": "1.9951", "code": "public boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals( sequence); }", "n_tokens": 42, "n_pass": [160, 22, 15]}
{"time": "2021-02-14 21:59:13.569455", "score": "0.3492", "loss": "1.9951", "code": " boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals( sequence); }", "n_tokens": 41, "n_pass": [163, 23, 16]}
{"time": "2021-02-14 21:59:16.205474", "score": "0.3492", "loss": "1.9951", "code": "boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals( sequence); }", "n_tokens": 40, "n_pass": [164, 24, 17]}
{"time": "2021-02-14 21:59:30.221581", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals(); }", "n_tokens": 38, "n_pass": [186, 29, 18]}
{"time": "2021-02-14 21:59:48.709793", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this == getClass) {} TokenSequence sequence = (TokenSequence) o; equals();}", "n_tokens": 37, "n_pass": [242, 34, 19]}
{"time": "2021-02-14 21:59:52.163655", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this== getClass) {} TokenSequence sequence = (TokenSequence) o; equals();}", "n_tokens": 36, "n_pass": [252, 35, 20]}
{"time": "2021-02-14 21:59:55.622912", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass) {} TokenSequence sequence = (TokenSequence) o; equals();}", "n_tokens": 35, "n_pass": [255, 36, 21]}
{"time": "2021-02-14 21:59:58.254415", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){} TokenSequence sequence = (TokenSequence) o; equals();}", "n_tokens": 34, "n_pass": [258, 37, 22]}
{"time": "2021-02-14 22:00:00.898550", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){}TokenSequence sequence = (TokenSequence) o; equals();}", "n_tokens": 33, "n_pass": [261, 38, 23]}
{"time": "2021-02-14 22:00:11.454173", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){}TokenSequence sequence= (TokenSequence) o; equals();}", "n_tokens": 32, "n_pass": [265, 42, 24]}
{"time": "2021-02-14 22:00:14.105835", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){}TokenSequence sequence=(TokenSequence) o; equals();}", "n_tokens": 31, "n_pass": [267, 43, 25]}
{"time": "2021-02-14 22:00:16.736115", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){}TokenSequence sequence=(TokenSequence)o; equals();}", "n_tokens": 30, "n_pass": [271, 44, 26]}
{"time": "2021-02-14 22:00:22.038296", "score": "0.3374", "loss": "2.0039", "code": "boolean equals(){if(this==getClass){}TokenSequence sequence=(TokenSequence)o;equals();}", "n_tokens": 29, "n_pass": [274, 46, 27]}

Minimal simplified code:
boolean equals(){if(this==getClass){}TokenSequence sequence=(TokenSequence)o;equals();}

