
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/rwiki/rwiki-util/jrcs/src/completejava/org/apache/commons/jrcs/diff/myers/PathNode_toString.java
method_name = toString
method_body = public String toString() { StringBuffer buf = new StringBuffer("["); PathNode node = this; while (node != null) { buf.append("("); buf.append(Integer.toString(node.i)); buf.append(","); buf.append(Integer.toString(node.j)); buf.append(")"); node = node.prev; } buf.append("]"); return buf.toString(); }
predict, score, loss = toString, 0.9880748391151428, 0.02114853449165821

Trace of simplified code(s):
{"time": "2021-02-16 12:53:45.085847", "score": "0.9926", "loss": "0.0167", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node != null) { buf.append(\"(\"); buf.append(Integer.toString(node.i)); buf.append(\",\"); buf.append(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf.append(\"]\"); return buf.toString(); }", "n_tokens": 139, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 12:53:48.050021", "score": "0.9861", "loss": "0.0278", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node != null) { bufbuf.append(Integer.toString(node.i)); buf.append(\",\"); buf.append(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf.append(\"]\"); return buf.toString(); }", "n_tokens": 130, "n_pass": [50, 2, 2]}
{"time": "2021-02-16 12:53:50.648150", "score": "0.9862", "loss": "0.0272", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node != null) { bufbuf.append(Integer.toString(node.i)); buf.appendappend(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf.append(\"]\"); return buf.toString(); }", "n_tokens": 121, "n_pass": [53, 3, 3]}
{"time": "2021-02-16 12:53:53.211346", "score": "0.857", "loss": "0.4594", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node != null) { bufbuf.append(Integer.toString(node.i)); buf.appendappend(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf. buf.toString(); }", "n_tokens": 112, "n_pass": [58, 4, 4]}
{"time": "2021-02-16 12:53:56.170014", "score": "0.9838", "loss": "0.0313", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node != null) { bufbuf.append(Integer.toString(node.i)); buf.appendappend(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf(); }", "n_tokens": 107, "n_pass": [98, 5, 5]}
{"time": "2021-02-16 12:53:59.140411", "score": "0.9585", "loss": "0.0705", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { bufbuf.append(Integer.toString(node.i)); buf.appendappend(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf(); }", "n_tokens": 103, "n_pass": [110, 6, 6]}
{"time": "2021-02-16 12:54:01.700553", "score": "0.97", "loss": "0.0564", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); buf.appendappend(Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf(); }", "n_tokens": 99, "n_pass": [112, 7, 7]}
{"time": "2021-02-16 12:54:04.254297", "score": "0.9878", "loss": "0.0241", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString(node.j)); buf.append(\")\"); node = node.prev; } buf(); }", "n_tokens": 95, "n_pass": [116, 8, 8]}
{"time": "2021-02-16 12:54:06.805059", "score": "0.9881", "loss": "0.0233", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\"); node = node.prev; } buf(); }", "n_tokens": 90, "n_pass": [118, 9, 9]}
{"time": "2021-02-16 12:54:09.383180", "score": "0.9936", "loss": "0.0126", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\"); node ; } buf(); }", "n_tokens": 85, "n_pass": [122, 10, 10]}
{"time": "2021-02-16 12:54:13.067217", "score": "0.994", "loss": "0.0119", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } buf(); }", "n_tokens": 82, "n_pass": [183, 11, 11]}
{"time": "2021-02-16 12:54:15.610286", "score": "0.9944", "loss": "0.0105", "code": "public String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 79, "n_pass": [185, 12, 12]}
{"time": "2021-02-16 12:54:18.167653", "score": "0.9944", "loss": "0.0105", "code": "String toString() { StringBuffer buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 77, "n_pass": [187, 13, 13]}
{"time": "2021-02-16 12:54:21.084574", "score": "0.9524", "loss": "0.2917", "code": "String toString() { buf = new StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 75, "n_pass": [192, 14, 14]}
{"time": "2021-02-16 12:54:23.657359", "score": "0.9882", "loss": "0.0422", "code": "String toString() { buf = StringBuffer(\"[\"); PathNode node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 73, "n_pass": [195, 15, 15]}
{"time": "2021-02-16 12:54:26.199917", "score": "0.9846", "loss": "0.0518", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer.toString(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 71, "n_pass": [200, 16, 16]}
{"time": "2021-02-16 12:54:28.739736", "score": "0.9825", "loss": "0.0611", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node.i)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 69, "n_pass": [210, 17, 17]}
{"time": "2021-02-16 12:54:31.283917", "score": "0.9833", "loss": "0.0577", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer.toString); buf.append(\")\");  } ; }", "n_tokens": 67, "n_pass": [212, 18, 18]}
{"time": "2021-02-16 12:54:33.818306", "score": "0.982", "loss": "0.0629", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer); buf.append(\")\");  } ; }", "n_tokens": 65, "n_pass": [216, 19, 19]}
{"time": "2021-02-16 12:54:47.535637", "score": "0.982", "loss": "0.0629", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\")\");  } ; }", "n_tokens": 64, "n_pass": [312, 21, 20]}
{"time": "2021-02-16 12:54:52.626285", "score": "0.5742", "loss": "1.1142", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\");  } ; }", "n_tokens": 63, "n_pass": [317, 23, 21]}
{"time": "2021-02-16 12:54:55.161472", "score": "0.5742", "loss": "1.1142", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } ; }", "n_tokens": 62, "n_pass": [321, 24, 22]}
{"time": "2021-02-16 12:54:57.692036", "score": "0.5742", "loss": "1.1142", "code": "String toString() { buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 60, "n_pass": [323, 25, 23]}
{"time": "2021-02-16 12:55:01.347467", "score": "0.5742", "loss": "1.1142", "code": "String toString(){ buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 59, "n_pass": [330, 26, 24]}
{"time": "2021-02-16 12:55:03.903579", "score": "0.5742", "loss": "1.1142", "code": "String toString(){buf = StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 58, "n_pass": [332, 27, 25]}
{"time": "2021-02-16 12:55:06.435297", "score": "0.5742", "loss": "1.1142", "code": "String toString(){buf= StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 57, "n_pass": [334, 28, 26]}
{"time": "2021-02-16 12:55:08.981631", "score": "0.5742", "loss": "1.1142", "code": "String toString(){buf=StringBuffer(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 56, "n_pass": [336, 29, 27]}
{"time": "2021-02-16 12:55:11.527907", "score": "0.5578", "loss": "0.8945", "code": "String toString(){buf=(\"[\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 55, "n_pass": [337, 30, 28]}
{"time": "2021-02-16 12:55:14.087660", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\"); node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 54, "n_pass": [340, 31, 29]}
{"time": "2021-02-16 12:55:16.642376", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node = this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 53, "n_pass": [344, 32, 30]}
{"time": "2021-02-16 12:55:19.190295", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node= this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 52, "n_pass": [346, 33, 31]}
{"time": "2021-02-16 12:55:21.749211", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this; while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 51, "n_pass": [348, 34, 32]}
{"time": "2021-02-16 12:55:24.306576", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this;while (node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 50, "n_pass": [351, 35, 33]}
{"time": "2021-02-16 12:55:26.837060", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this;while(node ) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 49, "n_pass": [353, 36, 34]}
{"time": "2021-02-16 12:55:29.357199", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this;while(node) { (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 48, "n_pass": [356, 37, 35]}
{"time": "2021-02-16 12:55:31.888537", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this;while(node){ (Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 47, "n_pass": [358, 38, 36]}
{"time": "2021-02-16 12:55:34.431075", "score": "0.5418", "loss": "0.9202", "code": "String toString(){buf=(\"\");node=this;while(node){(Integer(node)); (Integer);buf.append(\"\"); } }", "n_tokens": 46, "n_pass": [360, 39, 37]}
{"time": "2021-02-16 12:55:36.957281", "score": "0.5478", "loss": "0.8862", "code": "String toString(){buf=(\"\");node=this;while(node){((node)); (Integer);buf.append(\"\"); } }", "n_tokens": 45, "n_pass": [362, 40, 38]}
{"time": "2021-02-16 12:55:39.489892", "score": "0.5478", "loss": "0.8862", "code": "String toString(){buf=(\"\");node=this;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 44, "n_pass": [368, 41, 39]}
{"time": "2021-02-16 12:55:46.046692", "score": "0.6976", "loss": "0.5778", "code": "String toString(){buf(\"\");node=this;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 43, "n_pass": [390, 43, 40]}
{"time": "2021-02-16 12:55:48.584412", "score": "0.7602", "loss": "0.4342", "code": "String toString(){buf(\"\");nodethis;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 42, "n_pass": [397, 44, 41]}
{"time": "2021-02-16 12:55:51.112146", "score": "0.8368", "loss": "0.2444", "code": "String toString(){buf(\"\");node;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 41, "n_pass": [398, 45, 42]}
{"time": "2021-02-16 12:55:57.686346", "score": "0.9526", "loss": "0.0568", "code": "String toString(){(\"\");node;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 40, "n_pass": [431, 47, 43]}
{"time": "2021-02-16 12:56:00.231796", "score": "0.9567", "loss": "0.0515", "code": "String toString(){(\"\");;while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 39, "n_pass": [437, 48, 44]}
{"time": "2021-02-16 12:56:02.767637", "score": "0.9567", "loss": "0.0515", "code": "String toString(){(\"\");while(node){((node));(Integer);buf.append(\"\"); } }", "n_tokens": 38, "n_pass": [438, 49, 45]}
{"time": "2021-02-16 12:56:10.068259", "score": "0.9567", "loss": "0.0515", "code": "String toString(){(\"\");while(node){((node));(Integer);buf.append(\"\");} }", "n_tokens": 37, "n_pass": [479, 51, 46]}
{"time": "2021-02-16 12:56:12.592960", "score": "0.9567", "loss": "0.0515", "code": "String toString(){(\"\");while(node){((node));(Integer);buf.append(\"\");}}", "n_tokens": 36, "n_pass": [480, 52, 47]}

Minimal simplified code:
String toString(){("");while(node){((node));(Integer);buf.append("");}}

