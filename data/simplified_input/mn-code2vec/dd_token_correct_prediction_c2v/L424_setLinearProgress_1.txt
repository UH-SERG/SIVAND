
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/pnikosis__materialish-progress/library/src/main/java/com/pnikosis/materialishprogress/ProgressWheel_setLinearProgress.java
method_name = setLinearProgress
method_body = public void setLinearProgress(boolean isLinear) { linearProgress = isLinear; if (!isSpinning) { invalidate(); } }
predict, score, loss = setLinearProgress, 0.999879002571106, 0.000336590368533507

Trace of simplified code(s):
{"time": "2021-02-14 18:45:03.099169", "score": "0.9999", "loss": "0.0003", "code": "public void setLinearProgress(boolean isLinear) { linearProgress = isLinear; if (!isSpinning) { invalidate(); } }", "n_tokens": 37, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 18:45:06.134649", "score": "0.9947", "loss": "0.0212", "code": "public void setLinearProgress(boolean isLinear) {isLinear; if (!isSpinning) { invalidate(); } }", "n_tokens": 32, "n_pass": [23, 2, 2]}
{"time": "2021-02-14 18:45:09.164741", "score": "0.9949", "loss": "0.011", "code": "public void setLinearProgress(boolean isLinear) { if (!isSpinning) { invalidate(); } }", "n_tokens": 30, "n_pass": [45, 3, 3]}
{"time": "2021-02-14 18:45:11.793178", "score": "0.9949", "loss": "0.011", "code": "void setLinearProgress(boolean isLinear) { if (!isSpinning) { invalidate(); } }", "n_tokens": 28, "n_pass": [53, 4, 4]}
{"time": "2021-02-14 18:45:18.282463", "score": "0.9949", "loss": "0.011", "code": "void setLinearProgress(boolean isLinear){ if (!isSpinning) { invalidate(); } }", "n_tokens": 27, "n_pass": [98, 5, 5]}
{"time": "2021-02-14 18:45:20.921680", "score": "0.9949", "loss": "0.011", "code": "void setLinearProgress(boolean isLinear){if (!isSpinning) { invalidate(); } }", "n_tokens": 26, "n_pass": [99, 6, 6]}
{"time": "2021-02-14 18:45:23.555010", "score": "0.9949", "loss": "0.011", "code": "void setLinearProgress(boolean isLinear){if(!isSpinning) { invalidate(); } }", "n_tokens": 25, "n_pass": [101, 7, 7]}
{"time": "2021-02-14 18:45:26.172465", "score": "0.8883", "loss": "0.2026", "code": "void setLinearProgress(boolean isLinear){if(isSpinning) { invalidate(); } }", "n_tokens": 24, "n_pass": [103, 8, 8]}
{"time": "2021-02-14 18:45:28.788746", "score": "0.8883", "loss": "0.2026", "code": "void setLinearProgress(boolean isLinear){if(isSpinning){ invalidate(); } }", "n_tokens": 23, "n_pass": [106, 9, 9]}
{"time": "2021-02-14 18:45:31.407514", "score": "0.8883", "loss": "0.2026", "code": "void setLinearProgress(boolean isLinear){if(isSpinning){invalidate(); } }", "n_tokens": 22, "n_pass": [108, 10, 10]}
{"time": "2021-02-14 18:45:35.966115", "score": "0.8883", "loss": "0.2026", "code": "void setLinearProgress(boolean isLinear){if(isSpinning){invalidate();} }", "n_tokens": 21, "n_pass": [136, 11, 11]}
{"time": "2021-02-14 18:45:38.580810", "score": "0.8883", "loss": "0.2026", "code": "void setLinearProgress(boolean isLinear){if(isSpinning){invalidate();}}", "n_tokens": 20, "n_pass": [137, 12, 12]}

Minimal simplified code:
void setLinearProgress(boolean isLinear){if(isSpinning){invalidate();}}

