
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/isismtt/ocsp/RequestedCertificate_getInstance.java
method_name = getInstance
method_body = public static RequestedCertificate getInstance(ASN1TaggedObject obj, boolean explicit) { if (!explicit) { throw new IllegalArgumentException("choice item must be explicitly tagged"); } return getInstance(obj.getObject()); }
predict, score, loss = getInstance, 0.999990701675415, 1.1444026313256472e-05

Trace of simplified code(s):
{"time": "2021-02-14 11:20:34.900736", "score": "1.0", "loss": "0.0", "code": "public static RequestedCertificate getInstance(ASN1TaggedObject obj, boolean explicit) { if (!explicit) { throw new IllegalArgumentException(\"choice item must be explicitly tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 68, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 11:20:37.560612", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject obj, boolean explicit) { if (!explicit) { throw new IllegalArgumentException(\"choice item must be explicitly tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 64, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 11:20:40.190470", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject  explicit) { if (!explicit) { throw new IllegalArgumentException(\"choice item must be explicitly tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 60, "n_pass": [46, 3, 3]}
{"time": "2021-02-14 11:20:42.831631", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject  explicit) { if (!explicit) { throw(\"choice item must be explicitly tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 56, "n_pass": [51, 4, 4]}
{"time": "2021-02-14 11:20:45.460404", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject  explicit) { if (!explicit) { throw(\"choice be explicitly tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 52, "n_pass": [53, 5, 5]}
{"time": "2021-02-14 11:20:48.092840", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject  explicit) { if (!explicit) { throw(\"choice tagged\"); } return getInstance(obj.getObject()); }", "n_tokens": 48, "n_pass": [54, 6, 6]}
{"time": "2021-02-14 11:20:50.736539", "score": "1.0", "loss": "0.0", "code": "RequestedCertificate getInstance(ASN1TaggedObject  explicit) { if (!explicit) { throw(\"choice tagged\"); } getInstance(obj.getObject()); }", "n_tokens": 46, "n_pass": [91, 7, 7]}
{"time": "2021-02-14 11:20:56.405984", "score": "0.9733", "loss": "0.0375", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) { throw(\"choice tagged\"); } getInstance(obj.getObject()); }", "n_tokens": 44, "n_pass": [99, 9, 8]}
{"time": "2021-02-14 11:20:59.043674", "score": "0.9733", "loss": "0.0375", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"choice tagged\"); } getInstance(obj.getObject()); }", "n_tokens": 42, "n_pass": [107, 10, 9]}
{"time": "2021-02-14 11:21:01.684785", "score": "0.9352", "loss": "0.1103", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"tagged\"); } getInstance(obj.getObject()); }", "n_tokens": 40, "n_pass": [109, 11, 10]}
{"time": "2021-02-14 11:21:08.156207", "score": "0.9731", "loss": "0.0378", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\"); } getInstance(obj.getObject()); }", "n_tokens": 39, "n_pass": [164, 12, 11]}
{"time": "2021-02-14 11:21:10.782788", "score": "0.9731", "loss": "0.0378", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\");} getInstance(obj.getObject()); }", "n_tokens": 38, "n_pass": [167, 13, 12]}
{"time": "2021-02-14 11:21:13.411264", "score": "0.9731", "loss": "0.0378", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\");}getInstance(obj.getObject()); }", "n_tokens": 37, "n_pass": [169, 14, 13]}
{"time": "2021-02-14 11:21:16.029465", "score": "0.8582", "loss": "0.1888", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\");}(obj.getObject()); }", "n_tokens": 36, "n_pass": [170, 15, 14]}
{"time": "2021-02-14 11:21:18.649966", "score": "0.8207", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\");}(obj()); }", "n_tokens": 34, "n_pass": [173, 16, 15]}
{"time": "2021-02-14 11:21:21.256655", "score": "0.8208", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN1 explicit) { if (!explicit) {(\"\");}(obj); }", "n_tokens": 32, "n_pass": [174, 17, 16]}
{"time": "2021-02-14 11:21:25.102191", "score": "0.8208", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN explicit) { if (!explicit) {(\"\");}(obj); }", "n_tokens": 31, "n_pass": [182, 18, 17]}
{"time": "2021-02-14 11:21:27.718761", "score": "0.8208", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN explicit){ if (!explicit) {(\"\");}(obj); }", "n_tokens": 30, "n_pass": [186, 19, 18]}
{"time": "2021-02-14 11:21:30.332929", "score": "0.8208", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN explicit){if (!explicit) {(\"\");}(obj); }", "n_tokens": 29, "n_pass": [188, 20, 19]}
{"time": "2021-02-14 11:21:32.949558", "score": "0.8208", "loss": "0.2367", "code": "RequestedCertificate getInstance(ASN explicit){if(!explicit) {(\"\");}(obj); }", "n_tokens": 28, "n_pass": [190, 21, 20]}
{"time": "2021-02-14 11:21:35.592221", "score": "0.8284", "loss": "0.2303", "code": "RequestedCertificate getInstance(ASN explicit){if(explicit) {(\"\");}(obj); }", "n_tokens": 27, "n_pass": [192, 22, 21]}
{"time": "2021-02-14 11:21:38.210643", "score": "0.8284", "loss": "0.2303", "code": "RequestedCertificate getInstance(ASN explicit){if(explicit){(\"\");}(obj); }", "n_tokens": 26, "n_pass": [195, 23, 22]}
{"time": "2021-02-14 11:21:42.799443", "score": "0.8284", "loss": "0.2303", "code": "RequestedCertificate getInstance(ASN explicit){if(explicit){(\"\");}(obj);}", "n_tokens": 25, "n_pass": [226, 24, 23]}

Minimal simplified code:
RequestedCertificate getInstance(ASN explicit){if(explicit){("");}(obj);}

