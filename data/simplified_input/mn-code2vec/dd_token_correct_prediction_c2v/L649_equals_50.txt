
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/core/LabelSet_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { LabelSet l2 = (LabelSet) o; if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }
predict, score, loss = equals, 0.9982629418373108, 0.0024568631779402494

Trace of simplified code(s):
{"time": "2021-02-15 01:48:36.362611", "score": "0.9983", "loss": "0.0025", "code": "@Override public boolean equals(Object o) { LabelSet l2 = (LabelSet) o; if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 124, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 01:48:39.476610", "score": "0.9976", "loss": "0.0032", "code": "@Override public boolean equals(Object o) {if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 109, "n_pass": [21, 2, 2]}
{"time": "2021-02-15 01:48:42.583178", "score": "0.9539", "loss": "0.0617", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 101, "n_pass": [44, 3, 3]}
{"time": "2021-02-15 01:48:45.276322", "score": "0.9658", "loss": "0.0456", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 93, "n_pass": [48, 4, 4]}
{"time": "2021-02-15 01:48:51.048089", "score": "0.9589", "loss": "0.0511", "code": "public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 90, "n_pass": [97, 6, 5]}
{"time": "2021-02-15 01:48:55.221886", "score": "0.9589", "loss": "0.0511", "code": " boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 89, "n_pass": [167, 7, 6]}
{"time": "2021-02-15 01:48:57.922551", "score": "0.9589", "loss": "0.0511", "code": "boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 88, "n_pass": [168, 8, 7]}
{"time": "2021-02-15 01:49:00.609817", "score": "0.9105", "loss": "0.1184", "code": "boolean equals(Object o) {if (indices.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 86, "n_pass": [175, 9, 8]}
{"time": "2021-02-15 01:49:03.283560", "score": "0.9677", "loss": "0.0406", "code": "boolean equals(Object o) {if (indices) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 84, "n_pass": [176, 10, 9]}
{"time": "2021-02-15 01:49:05.962100", "score": "0.965", "loss": "0.0433", "code": "boolean equals(Object o) {if (indices) false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 82, "n_pass": [178, 11, 10]}
{"time": "2021-02-15 01:49:08.628715", "score": "0.9651", "loss": "0.0432", "code": "boolean equals(Object o) {if (indices) false; { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 80, "n_pass": [180, 12, 11]}
{"time": "2021-02-15 01:49:11.268468", "score": "0.9633", "loss": "0.0448", "code": "boolean equals(Object o) {if (indices) false; { for (i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 78, "n_pass": [184, 13, 12]}
{"time": "2021-02-15 01:49:16.604001", "score": "0.8559", "loss": "0.201", "code": "boolean equals(Object o) {if (indices) false; { for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } } return true; }", "n_tokens": 76, "n_pass": [199, 15, 13]}
{"time": "2021-02-15 01:49:24.536718", "score": "0.8652", "loss": "0.1851", "code": "boolean equals(Object o) {if (indices) false; { for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } } true; }", "n_tokens": 74, "n_pass": [209, 18, 14]}
{"time": "2021-02-15 01:49:27.159272", "score": "0.87", "loss": "0.177", "code": "boolean equals(Object o) {if (indices) false; { for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 72, "n_pass": [210, 19, 15]}
{"time": "2021-02-15 01:49:30.623376", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices)  { for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 70, "n_pass": [220, 20, 16]}
{"time": "2021-02-15 01:49:51.818230", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) { for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 69, "n_pass": [326, 24, 17]}
{"time": "2021-02-15 01:49:54.449745", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for (i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 68, "n_pass": [327, 25, 18]}
{"time": "2021-02-15 01:49:57.118207", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i = 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 67, "n_pass": [329, 26, 19]}
{"time": "2021-02-15 01:49:59.790096", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i= 0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 66, "n_pass": [332, 27, 20]}
{"time": "2021-02-15 01:50:02.451059", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;; i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 65, "n_pass": [334, 28, 21]}
{"time": "2021-02-15 01:50:05.092204", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++) { if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 64, "n_pass": [338, 29, 22]}
{"time": "2021-02-15 01:50:07.734294", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){ if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 63, "n_pass": [343, 30, 23]}
{"time": "2021-02-15 01:50:10.451627", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if (indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 62, "n_pass": [345, 31, 24]}
{"time": "2021-02-15 01:50:13.127878", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i] != l2[i]) { return false; } } }  }", "n_tokens": 61, "n_pass": [347, 32, 25]}
{"time": "2021-02-15 01:50:15.796297", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!= l2[i]) { return false; } } }  }", "n_tokens": 60, "n_pass": [353, 33, 26]}
{"time": "2021-02-15 01:50:21.111459", "score": "0.8466", "loss": "0.2146", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=l2[i]) { return false; } } }  }", "n_tokens": 59, "n_pass": [356, 35, 27]}
{"time": "2021-02-15 01:50:23.760631", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]) { return false; } } }  }", "n_tokens": 58, "n_pass": [357, 36, 28]}
{"time": "2021-02-15 01:50:26.424812", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){ return false; } } }  }", "n_tokens": 57, "n_pass": [363, 37, 29]}
{"time": "2021-02-15 01:50:29.079126", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false; } } }  }", "n_tokens": 56, "n_pass": [365, 38, 30]}
{"time": "2021-02-15 01:50:39.672519", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;} } }  }", "n_tokens": 55, "n_pass": [370, 42, 31]}
{"time": "2021-02-15 01:50:42.316926", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}} }  }", "n_tokens": 54, "n_pass": [372, 43, 32]}
{"time": "2021-02-15 01:50:44.943634", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}}}  }", "n_tokens": 53, "n_pass": [374, 44, 33]}
{"time": "2021-02-15 01:50:47.584003", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}}} }", "n_tokens": 52, "n_pass": [376, 45, 34]}
{"time": "2021-02-15 01:50:50.205600", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o) {if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 51, "n_pass": [377, 46, 35]}
{"time": "2021-02-15 01:50:53.641927", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o){if (indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 50, "n_pass": [387, 47, 36]}
{"time": "2021-02-15 01:50:56.284437", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o){if(indices) {for(i=0;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 49, "n_pass": [390, 48, 37]}
{"time": "2021-02-15 01:50:58.938313", "score": "0.7476", "loss": "0.401", "code": "boolean equals(Object o){if(indices){for(i=0;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 48, "n_pass": [394, 49, 38]}
{"time": "2021-02-15 01:51:01.569431", "score": "0.8395", "loss": "0.2542", "code": "boolean equals(Object o){if(indices){for(i0;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 47, "n_pass": [399, 50, 39]}
{"time": "2021-02-15 01:51:04.305614", "score": "0.8395", "loss": "0.2542", "code": "boolean equals(Object o){if(indices){for(i;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 46, "n_pass": [400, 51, 40]}
{"time": "2021-02-15 01:51:18.500897", "score": "0.8485", "loss": "0.2391", "code": "boolean equals(Object o){if(indices){for(;;i++){if(indices[i]!=2[i]){return false;}}}}", "n_tokens": 45, "n_pass": [446, 56, 41]}

Minimal simplified code:
boolean equals(Object o){if(indices){for(;;i++){if(indices[i]!=2[i]){return false;}}}}

