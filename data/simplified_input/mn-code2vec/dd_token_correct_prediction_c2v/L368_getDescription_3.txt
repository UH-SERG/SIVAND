
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/drewnoakes__metadata-extractor/Source/com/drew/metadata/exif/makernotes/OlympusEquipmentMakernoteDescriptor_getDescription.java
method_name = getDescription
method_body = @Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }
predict, score, loss = getDescription, 0.9566071629524231, 0.17286796867847443

Trace of simplified code(s):
{"time": "2021-02-14 16:55:54.738805", "score": "0.9838", "loss": "0.0498", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 270, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 16:55:57.417879", "score": "0.9747", "loss": "0.079", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 203, "n_pass": [9, 2, 2]}
{"time": "2021-02-14 16:56:00.098516", "score": "0.9736", "loss": "0.0816", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 169, "n_pass": [20, 3, 3]}
{"time": "2021-02-14 16:56:02.749001", "score": "0.9781", "loss": "0.0436", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL:; case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 135, "n_pass": [21, 4, 4]}
{"time": "2021-02-14 16:56:05.401397", "score": "0.9762", "loss": "0.0406", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL:; case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 101, "n_pass": [24, 5, 5]}
{"time": "2021-02-14 16:56:08.045218", "score": "0.9745", "loss": "0.0413", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 84, "n_pass": [36, 6, 6]}
{"time": "2021-02-14 16:56:11.076811", "score": "0.9988", "loss": "0.0021", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 76, "n_pass": [53, 7, 7]}
{"time": "2021-02-14 16:56:13.711823", "score": "0.9988", "loss": "0.0021", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 68, "n_pass": [56, 8, 8]}
{"time": "2021-02-14 16:56:16.352262", "score": "0.9988", "loss": "0.0021", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_: default: return super.getDescription(tagType); } }", "n_tokens": 59, "n_pass": [59, 9, 9]}
{"time": "2021-02-14 16:56:19.384219", "score": "0.999", "loss": "0.0017", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 55, "n_pass": [81, 10, 10]}
{"time": "2021-02-14 16:56:22.017939", "score": "0.999", "loss": "0.0017", "code": "String getDescription(int tagType) { switch(tagType) { case _MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 51, "n_pass": [90, 11, 11]}
{"time": "2021-02-14 16:56:24.674073", "score": "0.9993", "loss": "0.0012", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 49, "n_pass": [127, 12, 12]}
{"time": "2021-02-14 16:56:27.307184", "score": "0.9992", "loss": "0.0014", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 47, "n_pass": [129, 13, 13]}
{"time": "2021-02-14 16:56:29.942062", "score": "0.8933", "loss": "0.158", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: return super.getDescription(tagType); } }", "n_tokens": 45, "n_pass": [132, 14, 14]}
{"time": "2021-02-14 16:56:32.592718", "score": "0.8933", "loss": "0.158", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: super.getDescription(tagType); } }", "n_tokens": 43, "n_pass": [135, 15, 15]}
{"time": "2021-02-14 16:56:35.207632", "score": "0.9953", "loss": "0.012", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(tagType); } }", "n_tokens": 41, "n_pass": [136, 16, 16]}
{"time": "2021-02-14 16:56:47.658637", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 40, "n_pass": [196, 19, 17]}
{"time": "2021-02-14 16:56:51.490190", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){ switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 39, "n_pass": [208, 20, 18]}
{"time": "2021-02-14 16:56:54.106333", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 38, "n_pass": [210, 21, 19]}
{"time": "2021-02-14 16:56:56.724543", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){ case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 37, "n_pass": [215, 22, 20]}
{"time": "2021-02-14 16:56:59.358793", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 36, "n_pass": [217, 23, 21]}
{"time": "2021-02-14 16:57:01.998562", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){case FOCAL: getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 35, "n_pass": [220, 24, 22]}
{"time": "2021-02-14 16:57:04.620866", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription(); TAG: getDescription(); } }", "n_tokens": 34, "n_pass": [223, 25, 23]}
{"time": "2021-02-14 16:57:07.245022", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();TAG: getDescription(); } }", "n_tokens": 33, "n_pass": [228, 26, 24]}
{"time": "2021-02-14 16:57:09.884872", "score": "0.9532", "loss": "0.1109", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();TAG:getDescription(); } }", "n_tokens": 32, "n_pass": [231, 27, 25]}
{"time": "2021-02-14 16:57:13.758831", "score": "0.4094", "loss": "1.3819", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();TAGgetDescription(); } }", "n_tokens": 31, "n_pass": [260, 28, 26]}
{"time": "2021-02-14 16:57:20.236065", "score": "0.9975", "loss": "0.0048", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();getDescription(); } }", "n_tokens": 30, "n_pass": [288, 30, 27]}
{"time": "2021-02-14 16:57:25.201774", "score": "0.9975", "loss": "0.0048", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();getDescription();} }", "n_tokens": 29, "n_pass": [324, 31, 28]}
{"time": "2021-02-14 16:57:27.837219", "score": "0.9975", "loss": "0.0048", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();getDescription();}}", "n_tokens": 28, "n_pass": [325, 32, 29]}

Minimal simplified code:
String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();getDescription();}}

