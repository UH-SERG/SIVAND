
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wotomas__VoiceRipple/ripplelibrary/src/main/java/info/kimjihyok/ripplelibrary/renderer/TimerCircleRippleRenderer_setStrokeWidth.java
method_name = setStrokeWidth
method_body = public void setStrokeWidth(int strokeWidth) { if (strokeWidth % 2 != 0) { throw new IllegalArgumentException("Stroke Width should be an even number!"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }
predict, score, loss = setStrokeWidth, 0.998647153377533, 0.0013940150383859873

Trace of simplified code(s):
{"time": "2021-02-14 20:58:58.058431", "score": "0.9986", "loss": "0.0014", "code": "public void setStrokeWidth(int strokeWidth) { if (strokeWidth % 2 != 0) { throw new IllegalArgumentException(\"Stroke Width should be an even number!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 75, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 20:59:01.128092", "score": "0.9996", "loss": "0.0004", "code": "public void setStrokeWidth(int strokeWidth) { if (2 != 0) { throw new IllegalArgumentException(\"Stroke Width should be an even number!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 71, "n_pass": [48, 2, 2]}
{"time": "2021-02-14 20:59:03.791466", "score": "0.9998", "loss": "0.0002", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { throw new IllegalArgumentException(\"Stroke Width should be an even number!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 66, "n_pass": [49, 3, 3]}
{"time": "2021-02-14 20:59:06.435984", "score": "0.9999", "loss": "0.0001", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke Width should be an even number!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 61, "n_pass": [51, 4, 4]}
{"time": "2021-02-14 20:59:09.115911", "score": "0.9999", "loss": "0.0001", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke Widthan even number!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 56, "n_pass": [53, 5, 5]}
{"time": "2021-02-14 20:59:11.754764", "score": "0.9998", "loss": "0.0002", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke Width!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 51, "n_pass": [54, 6, 6]}
{"time": "2021-02-14 20:59:14.809426", "score": "0.9998", "loss": "0.0002", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidth = strokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 49, "n_pass": [88, 7, 7]}
{"time": "2021-02-14 20:59:17.434816", "score": "0.9994", "loss": "0.0006", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidthstrokeWidth; timerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 46, "n_pass": [93, 8, 8]}
{"time": "2021-02-14 20:59:20.037249", "score": "0.9994", "loss": "0.0006", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidthtimerPaint.setStrokeWidth(strokeWidth); }", "n_tokens": 43, "n_pass": [94, 9, 9]}
{"time": "2021-02-14 20:59:22.701596", "score": "0.9964", "loss": "0.0037", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidth(strokeWidth); }", "n_tokens": 40, "n_pass": [95, 10, 10]}
{"time": "2021-02-14 20:59:25.344270", "score": "0.7455", "loss": "0.2967", "code": "public void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidth; }", "n_tokens": 37, "n_pass": [96, 11, 11]}
{"time": "2021-02-14 20:59:27.980869", "score": "0.7455", "loss": "0.2967", "code": "void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } this.strokeWidth; }", "n_tokens": 35, "n_pass": [98, 12, 12]}
{"time": "2021-02-14 20:59:30.986769", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } ; }", "n_tokens": 32, "n_pass": [113, 13, 13]}
{"time": "2021-02-14 20:59:37.767804", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth) { if (0) { (\"Stroke!\"); } }", "n_tokens": 30, "n_pass": [159, 14, 14]}
{"time": "2021-02-14 20:59:41.181276", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth){ if (0) { (\"Stroke!\"); } }", "n_tokens": 29, "n_pass": [169, 15, 15]}
{"time": "2021-02-14 20:59:43.788870", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth){if (0) { (\"Stroke!\"); } }", "n_tokens": 28, "n_pass": [171, 16, 16]}
{"time": "2021-02-14 20:59:46.392818", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth){if(0) { (\"Stroke!\"); } }", "n_tokens": 27, "n_pass": [173, 17, 17]}
{"time": "2021-02-14 20:59:48.991040", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth){if(0){ (\"Stroke!\"); } }", "n_tokens": 26, "n_pass": [177, 18, 18]}
{"time": "2021-02-14 20:59:51.618604", "score": "0.7498", "loss": "0.3293", "code": "void setStrokeWidth(int strokeWidth){if(0){(\"Stroke!\"); } }", "n_tokens": 25, "n_pass": [179, 19, 19]}
{"time": "2021-02-14 20:59:54.250159", "score": "0.9567", "loss": "0.1516", "code": "void setStrokeWidth(int strokeWidth){if(0){(\"!\"); } }", "n_tokens": 24, "n_pass": [182, 20, 20]}
{"time": "2021-02-14 20:59:56.893773", "score": "0.9646", "loss": "0.0911", "code": "void setStrokeWidth(int strokeWidth){if(0){(\"\"); } }", "n_tokens": 23, "n_pass": [183, 21, 21]}
{"time": "2021-02-14 20:59:59.506481", "score": "0.9646", "loss": "0.0911", "code": "void setStrokeWidth(int strokeWidth){if(0){(\"\");} }", "n_tokens": 22, "n_pass": [187, 22, 22]}
{"time": "2021-02-14 21:00:03.327052", "score": "0.9646", "loss": "0.0911", "code": "void setStrokeWidth(int strokeWidth){if(0){(\"\");}}", "n_tokens": 21, "n_pass": [211, 23, 23]}

Minimal simplified code:
void setStrokeWidth(int strokeWidth){if(0){("");}}

