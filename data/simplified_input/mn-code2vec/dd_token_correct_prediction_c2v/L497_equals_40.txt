
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/memapktool/src/main/java/org/jf/dexlib2/base/value/BaseFloatEncodedValue_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (o != null && o instanceof FloatEncodedValue) { return Float.floatToRawIntBits(getValue()) == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }
predict, score, loss = equals, 0.9996956586837769, 0.0005690624238923192

Trace of simplified code(s):
{"time": "2021-02-14 20:50:07.310254", "score": "0.9997", "loss": "0.0006", "code": "@Override public boolean equals(Object o) { if (o != null && o instanceof FloatEncodedValue) { return Float.floatToRawIntBits(getValue()) == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 78, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 20:50:09.967108", "score": "0.9997", "loss": "0.0008", "code": " boolean equals(Object o) { if (o != null && o instanceof FloatEncodedValue) { return Float.floatToRawIntBits(getValue()) == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 74, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 20:50:12.618292", "score": "0.9973", "loss": "0.0051", "code": " boolean equals(Object o) { if (o != o instanceof FloatEncodedValue) { return Float.floatToRawIntBits(getValue()) == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 69, "n_pass": [49, 3, 3]}
{"time": "2021-02-14 20:50:15.254331", "score": "0.9992", "loss": "0.0013", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return Float.floatToRawIntBits(getValue()) == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 64, "n_pass": [50, 4, 4]}
{"time": "2021-02-14 20:50:18.304901", "score": "0.9969", "loss": "0.0037", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return Float.floatToRawIntBits == Float.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 59, "n_pass": [53, 5, 5]}
{"time": "2021-02-14 20:50:20.956602", "score": "0.7531", "loss": "0.3099", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return Float.floatToRawIntBits.floatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 54, "n_pass": [54, 6, 6]}
{"time": "2021-02-14 20:50:23.610587", "score": "0.9997", "loss": "0.0005", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return FloatfloatToRawIntBits(((FloatEncodedValue) o).getValue()); } return false; }", "n_tokens": 51, "n_pass": [89, 7, 7]}
{"time": "2021-02-14 20:50:26.264385", "score": "0.9997", "loss": "0.0005", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return FloatfloatToRawIntBits(( o).getValue()); } return false; }", "n_tokens": 48, "n_pass": [91, 8, 8]}
{"time": "2021-02-14 20:50:28.904467", "score": "0.9998", "loss": "0.0003", "code": " boolean equals(Object o) { if (o !=FloatEncodedValue) { return FloatfloatToRawIntBits(( o).getValue()); } ; }", "n_tokens": 45, "n_pass": [96, 9, 9]}
{"time": "2021-02-14 20:50:31.968745", "score": "0.9998", "loss": "0.0005", "code": " boolean equals(Object o) { if (o=FloatEncodedValue) { return FloatfloatToRawIntBits(( o).getValue()); } ; }", "n_tokens": 43, "n_pass": [106, 10, 10]}
{"time": "2021-02-14 20:50:34.597337", "score": "0.2875", "loss": "1.7005", "code": " boolean equals(Object o) { if (o) { return FloatfloatToRawIntBits(( o).getValue()); } ; }", "n_tokens": 41, "n_pass": [107, 11, 11]}
{"time": "2021-02-14 20:50:44.418347", "score": "0.2875", "loss": "1.7005", "code": " boolean equals(Object o) { if (o){ return FloatfloatToRawIntBits(( o).getValue()); } ; }", "n_tokens": 40, "n_pass": [160, 13, 12]}
{"time": "2021-02-14 20:50:47.047879", "score": "0.2875", "loss": "1.7005", "code": " boolean equals(Object o) { if (o){return FloatfloatToRawIntBits(( o).getValue()); } ; }", "n_tokens": 39, "n_pass": [162, 14, 13]}
{"time": "2021-02-14 20:51:00.204159", "score": "0.2875", "loss": "1.7005", "code": " boolean equals(Object o) { if (o){return FloatfloatToRawIntBits((o).getValue()); } ; }", "n_tokens": 38, "n_pass": [169, 19, 14]}
{"time": "2021-02-14 20:51:05.500008", "score": "0.2875", "loss": "1.7005", "code": " boolean equals(Object o) { if (o){return FloatfloatToRawIntBits((o).getValue()); } }", "n_tokens": 36, "n_pass": [175, 21, 15]}
{"time": "2021-02-14 20:51:08.127775", "score": "0.2875", "loss": "1.7005", "code": "boolean equals(Object o) { if (o){return FloatfloatToRawIntBits((o).getValue()); } }", "n_tokens": 35, "n_pass": [177, 22, 16]}
{"time": "2021-02-14 20:51:11.546725", "score": "0.2875", "loss": "1.7005", "code": "boolean equals(Object o){ if (o){return FloatfloatToRawIntBits((o).getValue()); } }", "n_tokens": 34, "n_pass": [186, 23, 17]}
{"time": "2021-02-14 20:51:14.189596", "score": "0.2875", "loss": "1.7005", "code": "boolean equals(Object o){if (o){return FloatfloatToRawIntBits((o).getValue()); } }", "n_tokens": 33, "n_pass": [188, 24, 18]}
{"time": "2021-02-14 20:51:16.817101", "score": "0.2875", "loss": "1.7005", "code": "boolean equals(Object o){if(o){return FloatfloatToRawIntBits((o).getValue()); } }", "n_tokens": 32, "n_pass": [190, 25, 19]}
{"time": "2021-02-14 20:51:34.521150", "score": "0.8224", "loss": "0.2906", "code": "boolean equals(Object o){if(o){return FloatfloatToRawIntBits((o)getValue()); } }", "n_tokens": 31, "n_pass": [231, 31, 20]}
{"time": "2021-02-14 20:51:37.146274", "score": "0.8224", "loss": "0.2906", "code": "boolean equals(Object o){if(o){return FloatfloatToRawIntBits((o)getValue());} }", "n_tokens": 30, "n_pass": [236, 32, 21]}
{"time": "2021-02-14 20:51:39.767902", "score": "0.8224", "loss": "0.2906", "code": "boolean equals(Object o){if(o){return FloatfloatToRawIntBits((o)getValue());}}", "n_tokens": 29, "n_pass": [238, 33, 22]}
{"time": "2021-02-14 20:51:43.195400", "score": "0.5998", "loss": "0.6276", "code": "boolean equals(Object o){if(o){ FloatfloatToRawIntBits((o)getValue());}}", "n_tokens": 28, "n_pass": [254, 34, 23]}
{"time": "2021-02-14 20:51:45.807493", "score": "0.5998", "loss": "0.6276", "code": "boolean equals(Object o){if(o){FloatfloatToRawIntBits((o)getValue());}}", "n_tokens": 27, "n_pass": [255, 35, 24]}
{"time": "2021-02-14 20:51:51.078317", "score": "0.226", "loss": "1.9349", "code": "boolean equals(Object o){if(o){Float((o)getValue());}}", "n_tokens": 26, "n_pass": [257, 37, 25]}
{"time": "2021-02-14 20:51:54.507875", "score": "0.3231", "loss": "1.2265", "code": "boolean equals(Object o){if(o){((o)getValue());}}", "n_tokens": 25, "n_pass": [283, 38, 26]}

Minimal simplified code:
boolean equals(Object o){if(o){((o)getValue());}}

