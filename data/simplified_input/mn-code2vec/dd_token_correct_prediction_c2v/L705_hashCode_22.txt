
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/DERExternal_hashCode.java
method_name = hashCode
method_body = public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); } if (indirectReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }
predict, score, loss = hashCode, 0.9970023036003113, 0.0032182352151721716

Trace of simplified code(s):
{"time": "2021-02-15 03:30:14.137455", "score": "0.997", "loss": "0.0032", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); } if (indirectReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }", "n_tokens": 117, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 03:30:16.818795", "score": "0.994", "loss": "0.0065", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }", "n_tokens": 102, "n_pass": [23, 2, 2]}
{"time": "2021-02-15 03:30:19.481759", "score": "0.9941", "loss": "0.0062", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 94, "n_pass": [51, 3, 3]}
{"time": "2021-02-15 03:30:22.493757", "score": "0.9939", "loss": "0.0063", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 87, "n_pass": [58, 4, 4]}
{"time": "2021-02-15 03:30:25.517831", "score": "0.9925", "loss": "0.0077", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 83, "n_pass": [95, 5, 5]}
{"time": "2021-02-15 03:30:28.541276", "score": "0.9959", "loss": "0.0043", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 79, "n_pass": [101, 6, 6]}
{"time": "2021-02-15 03:30:31.161270", "score": "0.9934", "loss": "0.0073", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 75, "n_pass": [103, 7, 7]}
{"time": "2021-02-15 03:30:33.787018", "score": "0.9936", "loss": "0.0072", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 71, "n_pass": [107, 8, 8]}
{"time": "2021-02-15 03:30:36.805683", "score": "0.9887", "loss": "0.013", "code": "public int hashCode() {ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 68, "n_pass": [112, 9, 9]}
{"time": "2021-02-15 03:30:39.446498", "score": "0.9922", "loss": "0.0086", "code": "public int hashCode() { 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 65, "n_pass": [113, 10, 10]}
{"time": "2021-02-15 03:30:42.070929", "score": "0.992", "loss": "0.0088", "code": "public int hashCode() { if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 62, "n_pass": [114, 11, 11]}
{"time": "2021-02-15 03:30:46.603474", "score": "0.996", "loss": "0.007", "code": "public int hashCode() { if (directReference= null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 60, "n_pass": [170, 12, 12]}
{"time": "2021-02-15 03:30:49.230073", "score": "0.9989", "loss": "0.0016", "code": "public int hashCode() { if (directReferencenull) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 58, "n_pass": [171, 13, 13]}
{"time": "2021-02-15 03:30:51.835480", "score": "0.9982", "loss": "0.003", "code": "public int hashCode() { if (directReferencenull) { ret= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 56, "n_pass": [175, 14, 14]}
{"time": "2021-02-15 03:30:54.451979", "score": "0.996", "loss": "0.0068", "code": "public int hashCode() { if (directReferencenull) { retindirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 54, "n_pass": [176, 15, 15]}
{"time": "2021-02-15 03:30:57.078877", "score": "0.9914", "loss": "0.0183", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 52, "n_pass": [177, 16, 16]}
{"time": "2021-02-15 03:31:02.286534", "score": "0.8982", "loss": "0.2361", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; } ret ret; }", "n_tokens": 50, "n_pass": [188, 18, 17]}
{"time": "2021-02-15 03:31:04.889743", "score": "0.897", "loss": "0.2384", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; } ret; }", "n_tokens": 48, "n_pass": [191, 19, 18]}
{"time": "2021-02-15 03:31:07.497445", "score": "0.9003", "loss": "0.2332", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; }  }", "n_tokens": 46, "n_pass": [192, 20, 19]}
{"time": "2021-02-15 03:31:10.099814", "score": "0.9003", "loss": "0.2332", "code": " int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; }  }", "n_tokens": 45, "n_pass": [194, 21, 20]}
{"time": "2021-02-15 03:31:12.733742", "score": "0.9003", "loss": "0.2332", "code": "int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; }  }", "n_tokens": 44, "n_pass": [195, 22, 21]}
{"time": "2021-02-15 03:31:16.121065", "score": "0.9956", "loss": "0.0104", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; }  }", "n_tokens": 42, "n_pass": [206, 23, 22]}
{"time": "2021-02-15 03:31:18.738355", "score": "0.9777", "loss": "0.0698", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor; }  }", "n_tokens": 40, "n_pass": [216, 24, 23]}
{"time": "2021-02-15 03:31:22.086865", "score": "0.9892", "loss": "0.0307", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { ; }  }", "n_tokens": 38, "n_pass": [238, 25, 24]}
{"time": "2021-02-15 03:31:24.660357", "score": "0.9892", "loss": "0.0307", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { }  }", "n_tokens": 36, "n_pass": [239, 26, 25]}
{"time": "2021-02-15 03:31:32.727237", "score": "0.9892", "loss": "0.0307", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { } }", "n_tokens": 35, "n_pass": [293, 27, 26]}
{"time": "2021-02-15 03:31:35.322544", "score": "0.9892", "loss": "0.0307", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 34, "n_pass": [294, 28, 27]}
{"time": "2021-02-15 03:31:38.674655", "score": "0.9892", "loss": "0.0307", "code": "int hashCode(){ if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 33, "n_pass": [301, 29, 28]}
{"time": "2021-02-15 03:31:41.281694", "score": "0.9892", "loss": "0.0307", "code": "int hashCode(){if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 32, "n_pass": [303, 30, 29]}
{"time": "2021-02-15 03:31:43.858100", "score": "0.9892", "loss": "0.0307", "code": "int hashCode(){if(directReferencenull) {hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 31, "n_pass": [305, 31, 30]}
{"time": "2021-02-15 03:31:46.453711", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null) {hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 30, "n_pass": [307, 32, 31]}
{"time": "2021-02-15 03:31:49.056019", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode(); } if (dataValueDescriptor ) { }}", "n_tokens": 29, "n_pass": [310, 33, 32]}
{"time": "2021-02-15 03:31:51.678966", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();} if (dataValueDescriptor ) { }}", "n_tokens": 28, "n_pass": [316, 34, 33]}
{"time": "2021-02-15 03:31:54.268595", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();}if (dataValueDescriptor ) { }}", "n_tokens": 27, "n_pass": [318, 35, 34]}
{"time": "2021-02-15 03:31:56.870620", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor ) { }}", "n_tokens": 26, "n_pass": [320, 36, 35]}
{"time": "2021-02-15 03:31:59.474353", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor) { }}", "n_tokens": 25, "n_pass": [323, 37, 36]}
{"time": "2021-02-15 03:32:02.059555", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor){ }}", "n_tokens": 24, "n_pass": [325, 38, 37]}
{"time": "2021-02-15 03:32:04.641146", "score": "0.9945", "loss": "0.0152", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor){}}", "n_tokens": 23, "n_pass": [327, 39, 38]}

Minimal simplified code:
int hashCode(){if(null){hashCode();}if(dataValueDescriptor){}}

