
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/batch/src/main/java/droidefense/batch/BatchManager_addTask.java
method_name = addTask
method_body = private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException("Task to be added is not constructed! Null object task found"); } this.taskList.add(task); }
predict, score, loss = addTask, 0.9147729873657227, 0.15222854912281036

Trace of simplified code(s):
{"time": "2021-02-14 17:28:53.649628", "score": "0.9148", "loss": "0.1522", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to be added is not constructed! Null object task found\"); } this.taskList.add(task); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 17:28:58.921806", "score": "0.9148", "loss": "0.1522", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to be added istask found\"); } this.taskList.add(task); }", "n_tokens": 66, "n_pass": [25, 3, 2]}
{"time": "2021-02-14 17:29:01.971200", "score": "0.8622", "loss": "0.1989", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task) { throw new InvalidTaskException(\"Task to be added istask found\"); } this.taskList.add(task); }", "n_tokens": 61, "n_pass": [56, 4, 3]}
{"time": "2021-02-14 17:29:04.613697", "score": "0.8622", "loss": "0.1989", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task) { throw new InvalidTaskException(\"Task to task found\"); } this.taskList.add(task); }", "n_tokens": 56, "n_pass": [60, 5, 4]}
{"time": "2021-02-14 17:29:10.314390", "score": "0.8622", "loss": "0.1989", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task) { throw new InvalidTaskException(\"Task tofound\"); } this.taskList.add(task); }", "n_tokens": 53, "n_pass": [98, 7, 5]}
{"time": "2021-02-14 17:29:12.936316", "score": "0.8189", "loss": "0.2541", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task) { throw new InvalidTaskException(\"Task tofound\"); }taskList.add(task); }", "n_tokens": 50, "n_pass": [101, 8, 6]}
{"time": "2021-02-14 17:29:20.866113", "score": "0.8189", "loss": "0.2541", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) { throw new InvalidTaskException(\"Task tofound\"); }taskList.add(task); }", "n_tokens": 48, "n_pass": [105, 11, 7]}
{"time": "2021-02-14 17:29:23.907837", "score": "0.8144", "loss": "0.2832", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) { new InvalidTaskException(\"Task tofound\"); }taskList.add(task); }", "n_tokens": 46, "n_pass": [117, 12, 8]}
{"time": "2021-02-14 17:29:26.541145", "score": "0.7908", "loss": "0.385", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) { InvalidTaskException(\"Task tofound\"); }taskList.add(task); }", "n_tokens": 44, "n_pass": [118, 13, 9]}
{"time": "2021-02-14 17:29:29.174058", "score": "0.8217", "loss": "0.2341", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) {(\"Task tofound\"); }taskList.add(task); }", "n_tokens": 42, "n_pass": [119, 14, 10]}
{"time": "2021-02-14 17:29:31.824108", "score": "0.823", "loss": "0.2331", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) {(\"found\"); }taskList.add(task); }", "n_tokens": 39, "n_pass": [121, 15, 11]}
{"time": "2021-02-14 17:29:43.894335", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) {(\"\"); }taskList.add(task); }", "n_tokens": 38, "n_pass": [173, 18, 12]}
{"time": "2021-02-14 17:29:46.515255", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task) {(\"\");}taskList.add(task); }", "n_tokens": 37, "n_pass": [177, 19, 13]}
{"time": "2021-02-14 17:29:52.574060", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task)throws InvalidTaskException { if (task) {(\"\");}taskList.add(task); }", "n_tokens": 36, "n_pass": [191, 21, 14]}
{"time": "2021-02-14 17:29:55.194698", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task)throws InvalidTaskException{ if (task) {(\"\");}taskList.add(task); }", "n_tokens": 35, "n_pass": [195, 22, 15]}
{"time": "2021-02-14 17:29:57.821648", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if (task) {(\"\");}taskList.add(task); }", "n_tokens": 34, "n_pass": [197, 23, 16]}
{"time": "2021-02-14 17:30:00.445603", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task) {(\"\");}taskList.add(task); }", "n_tokens": 33, "n_pass": [199, 24, 17]}
{"time": "2021-02-14 17:30:03.042010", "score": "0.8128", "loss": "0.246", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\");}taskList.add(task); }", "n_tokens": 32, "n_pass": [203, 25, 18]}
{"time": "2021-02-14 17:30:12.466280", "score": "0.8882", "loss": "0.2048", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\");}taskList.add(); }", "n_tokens": 31, "n_pass": [246, 28, 19]}
{"time": "2021-02-14 17:30:15.084016", "score": "0.8882", "loss": "0.2048", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\");}taskList.add();}", "n_tokens": 30, "n_pass": [249, 29, 20]}

Minimal simplified code:
void addTask(IBatchTask task)throws InvalidTaskException{if(task){("");}taskList.add();}

