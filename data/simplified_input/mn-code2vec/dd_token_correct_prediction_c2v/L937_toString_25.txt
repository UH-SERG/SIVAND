
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/demilich1__metastone/game/src/main/java/net/demilich/metastone/game/spells/desc/SpellDesc_toString.java
method_name = toString
method_body = @Override public String toString() { String result = "[SpellDesc arguments= {\n"; for (SpellArg spellArg : arguments.keySet()) { result += "\t" + spellArg + ": " + arguments.get(spellArg) + "\n"; } result += "}"; return result; }
predict, score, loss = toString, 0.9998577833175659, 0.0001573438785271719

Trace of simplified code(s):
{"time": "2021-02-16 11:41:05.258477", "score": "0.9999", "loss": "0.0002", "code": "@Override public String toString() { String result = \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" + spellArg + \": \" + arguments.get(spellArg) + \"\\n\"; } result += \"}\"; return result; }", "n_tokens": 106, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 11:41:08.599839", "score": "0.9999", "loss": "0.0001", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" + spellArg + \": \" + arguments.get(spellArg) + \"\\n\"; } result += \"}\"; return result; }", "n_tokens": 100, "n_pass": [46, 2, 2]}
{"time": "2021-02-16 11:41:11.170080", "score": "0.9999", "loss": "0.0002", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" + spellArg + arguments.get(spellArg) + \"\\n\"; } result += \"}\"; return result; }", "n_tokens": 93, "n_pass": [54, 3, 3]}
{"time": "2021-02-16 11:41:14.114769", "score": "0.9999", "loss": "0.0001", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\"  + arguments.get(spellArg) + \"\\n\"; } result += \"}\"; return result; }", "n_tokens": 90, "n_pass": [97, 4, 4]}
{"time": "2021-02-16 11:41:16.691212", "score": "0.9998", "loss": "0.0002", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result += \"}\"; return result; }", "n_tokens": 86, "n_pass": [98, 5, 5]}
{"time": "2021-02-16 11:41:19.249359", "score": "0.9809", "loss": "0.0254", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; }  \"}\"; return result; }", "n_tokens": 82, "n_pass": [103, 6, 6]}
{"time": "2021-02-16 11:41:21.790881", "score": "0.9774", "loss": "0.0297", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } ; return result; }", "n_tokens": 78, "n_pass": [104, 7, 7]}
{"time": "2021-02-16 11:41:24.321452", "score": "0.9713", "loss": "0.0347", "code": "@Override public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 74, "n_pass": [105, 8, 8]}
{"time": "2021-02-16 11:41:26.865938", "score": "0.3085", "loss": "2.3286", "code": "public String toString() { \"[SpellDesc arguments= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 71, "n_pass": [107, 9, 9]}
{"time": "2021-02-16 11:41:29.791975", "score": "0.3085", "loss": "2.3286", "code": "public String toString() { \"[= {\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 68, "n_pass": [112, 10, 10]}
{"time": "2021-02-16 11:41:32.329880", "score": "0.3204", "loss": "2.2856", "code": "public String toString() { \"[\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 65, "n_pass": [113, 11, 11]}
{"time": "2021-02-16 11:41:37.383866", "score": "0.3204", "loss": "2.2856", "code": "public String toString() {\"[\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 64, "n_pass": [175, 12, 12]}
{"time": "2021-02-16 11:41:39.921558", "score": "0.3237", "loss": "2.2629", "code": "public String toString() {\"\\n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 63, "n_pass": [177, 13, 13]}
{"time": "2021-02-16 11:41:42.454497", "score": "0.2978", "loss": "2.4052", "code": "public String toString() {\"n\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 62, "n_pass": [178, 14, 14]}
{"time": "2021-02-16 11:41:44.990418", "score": "0.3237", "loss": "2.2629", "code": "public String toString() {\"\"; for (SpellArg spellArg : arguments.keySet()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 61, "n_pass": [179, 15, 15]}
{"time": "2021-02-16 11:41:47.534597", "score": "0.2111", "loss": "3.3229", "code": "public String toString() {\"\"; for (SpellArg spellArg : arguments()) { result += \"\\t\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 59, "n_pass": [187, 16, 16]}
{"time": "2021-02-16 11:41:52.620321", "score": "0.2031", "loss": "3.3636", "code": "public String toString() {\"\"; for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; } result; }", "n_tokens": 57, "n_pass": [194, 18, 17]}
{"time": "2021-02-16 11:41:55.148594", "score": "0.1989", "loss": "3.3918", "code": "public String toString() {\"\"; for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 55, "n_pass": [204, 19, 18]}
{"time": "2021-02-16 11:41:57.682931", "score": "0.1989", "loss": "3.3918", "code": " String toString() {\"\"; for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 54, "n_pass": [206, 20, 19]}
{"time": "2021-02-16 11:42:00.211061", "score": "0.1989", "loss": "3.3918", "code": "String toString() {\"\"; for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 53, "n_pass": [207, 21, 20]}
{"time": "2021-02-16 11:42:03.861314", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\"; for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 52, "n_pass": [213, 22, 21]}
{"time": "2021-02-16 11:42:16.063118", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for (SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 51, "n_pass": [289, 24, 22]}
{"time": "2021-02-16 11:42:18.585125", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg : arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 50, "n_pass": [291, 25, 23]}
{"time": "2021-02-16 11:42:21.116930", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg: arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 49, "n_pass": [296, 26, 24]}
{"time": "2021-02-16 11:42:23.645779", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()) { result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 48, "n_pass": [298, 27, 25]}
{"time": "2021-02-16 11:42:26.188978", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){ result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 47, "n_pass": [303, 28, 26]}
{"time": "2021-02-16 11:42:28.738956", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result += \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 46, "n_pass": [305, 29, 27]}
{"time": "2021-02-16 11:42:31.294340", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+= \"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 45, "n_pass": [307, 30, 28]}
{"time": "2021-02-16 11:42:36.772866", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\" .get(spellArg) + \"\\n\"; }  }", "n_tokens": 44, "n_pass": [310, 32, 29]}
{"time": "2021-02-16 11:42:39.296958", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg) + \"\\n\"; }  }", "n_tokens": 43, "n_pass": [313, 33, 30]}
{"time": "2021-02-16 11:42:44.406404", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+ \"\\n\"; }  }", "n_tokens": 42, "n_pass": [319, 35, 31]}
{"time": "2021-02-16 11:42:46.953625", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"\\n\"; }  }", "n_tokens": 41, "n_pass": [321, 36, 32]}
{"time": "2021-02-16 11:42:49.495769", "score": "0.239", "loss": "3.1568", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"n\"; }  }", "n_tokens": 40, "n_pass": [323, 37, 33]}
{"time": "2021-02-16 11:42:52.015511", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"\"; }  }", "n_tokens": 39, "n_pass": [324, 38, 34]}
{"time": "2021-02-16 11:42:54.541381", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"\";}  }", "n_tokens": 38, "n_pass": [327, 39, 35]}
{"time": "2021-02-16 11:42:57.105929", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"\";} }", "n_tokens": 37, "n_pass": [329, 40, 36]}
{"time": "2021-02-16 11:42:59.628011", "score": "0.1989", "loss": "3.3918", "code": "String toString(){\"\";for(SpellArg spellArg:arguments()){result+=\"\".get(spellArg)+\"\";}}", "n_tokens": 36, "n_pass": [330, 41, 37]}

Minimal simplified code:
String toString(){"";for(SpellArg spellArg:arguments()){result+="".get(spellArg)+"";}}

