
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/qqchenjian318__VideoEditor-For-Android/app/src/main/java/com/example/cj/videoeditor/record/video/VideoEncoderCore_getOutputBuffer.java
method_name = getOutputBuffer
method_body = private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }
predict, score, loss = getOutputBuffer, 0.9998393058776855, 0.0009838269324973226

Trace of simplified code(s):
{"time": "2021-02-14 07:12:48.010250", "score": "0.9998", "loss": "0.001", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 74, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 07:12:50.670153", "score": "0.9995", "loss": "0.0016", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 65, "n_pass": [23, 2, 2]}
{"time": "2021-02-14 07:12:53.328679", "score": "0.9835", "loss": "0.0304", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers; } }", "n_tokens": 60, "n_pass": [50, 3, 3]}
{"time": "2021-02-14 07:12:56.398999", "score": "0.9945", "loss": "0.0097", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers; } }", "n_tokens": 56, "n_pass": [53, 4, 4]}
{"time": "2021-02-14 07:12:59.058550", "score": "0.9999", "loss": "0.0002", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { ; } }", "n_tokens": 51, "n_pass": [62, 5, 5]}
{"time": "2021-02-14 07:13:02.492704", "score": "0.9999", "loss": "0.0002", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 48, "n_pass": [96, 6, 6]}
{"time": "2021-02-14 07:13:05.150153", "score": "0.9999", "loss": "0.0002", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 46, "n_pass": [98, 7, 7]}
{"time": "2021-02-14 07:13:08.193041", "score": "0.9999", "loss": "0.0003", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 44, "n_pass": [107, 8, 8]}
{"time": "2021-02-14 07:13:10.826837", "score": "0.9999", "loss": "0.0002", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 42, "n_pass": [108, 9, 9]}
{"time": "2021-02-14 07:13:13.458114", "score": "0.9999", "loss": "0.0003", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 40, "n_pass": [109, 10, 10]}
{"time": "2021-02-14 07:13:16.116137", "score": "1.0", "loss": "0.0001", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 38, "n_pass": [110, 11, 11]}
{"time": "2021-02-14 07:13:23.280519", "score": "1.0", "loss": "0.0001", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){ return codec.getOutputBuffer(index); } else {} }", "n_tokens": 37, "n_pass": [160, 12, 12]}
{"time": "2021-02-14 07:13:25.898396", "score": "1.0", "loss": "0.0001", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){return codec.getOutputBuffer(index); } else {} }", "n_tokens": 36, "n_pass": [162, 13, 13]}
{"time": "2021-02-14 07:13:28.514904", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){ codec.getOutputBuffer(index); } else {} }", "n_tokens": 35, "n_pass": [163, 14, 14]}
{"time": "2021-02-14 07:13:31.132343", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); } else {} }", "n_tokens": 34, "n_pass": [164, 15, 15]}
{"time": "2021-02-14 07:13:36.414407", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); } {} }", "n_tokens": 32, "n_pass": [172, 17, 16]}
{"time": "2021-02-14 07:13:39.059830", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 30, "n_pass": [173, 18, 17]}
{"time": "2021-02-14 07:13:42.908898", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec index) { if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 29, "n_pass": [180, 19, 18]}
{"time": "2021-02-14 07:13:45.535765", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec index){ if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 28, "n_pass": [184, 20, 19]}
{"time": "2021-02-14 07:13:48.144690", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 27, "n_pass": [186, 21, 20]}
{"time": "2021-02-14 07:13:50.766563", "score": "0.9997", "loss": "0.0008", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer(index); }  }", "n_tokens": 26, "n_pass": [188, 22, 21]}
{"time": "2021-02-14 07:13:58.717803", "score": "0.9953", "loss": "0.0107", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer(); }  }", "n_tokens": 25, "n_pass": [219, 24, 22]}
{"time": "2021-02-14 07:14:01.340250", "score": "0.9953", "loss": "0.0107", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}  }", "n_tokens": 24, "n_pass": [221, 25, 23]}
{"time": "2021-02-14 07:14:03.949635", "score": "0.9953", "loss": "0.0107", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();} }", "n_tokens": 23, "n_pass": [223, 26, 24]}
{"time": "2021-02-14 07:14:06.589162", "score": "0.9953", "loss": "0.0107", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}}", "n_tokens": 22, "n_pass": [224, 27, 25]}

Minimal simplified code:
ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}}

