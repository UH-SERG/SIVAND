
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/a-student__BetterVectorDrawable/lib/src/main/java/com/bettervectordrawable/lib/graphics/Insets_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o; if (bottom != insets.bottom) return false; if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }
predict, score, loss = equals, 0.9999897480010986, 1.168244216387393e-05

Trace of simplified code(s):
{"time": "2021-02-16 04:12:22.571262", "score": "0.9999", "loss": "0.0001", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o; if (bottom != insets.bottom) return false; if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 155, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 04:12:25.159220", "score": "1.0", "loss": "0.0", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 136, "n_pass": [24, 2, 2]}
{"time": "2021-02-16 04:12:27.789951", "score": "0.9998", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return false; Insets insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 126, "n_pass": [56, 3, 3]}
{"time": "2021-02-16 04:12:30.385832", "score": "0.9997", "loss": "0.0004", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 121, "n_pass": [99, 4, 4]}
{"time": "2021-02-16 04:12:32.965587", "score": "0.9998", "loss": "0.0003", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top != insets.top) return false; return true; }", "n_tokens": 116, "n_pass": [108, 5, 5]}
{"time": "2021-02-16 04:12:35.542375", "score": "0.9998", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return false; return true; }", "n_tokens": 111, "n_pass": [110, 6, 6]}
{"time": "2021-02-16 04:12:38.150521", "score": "0.9998", "loss": "0.0002", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 106, "n_pass": [112, 7, 7]}
{"time": "2021-02-16 04:12:40.721148", "score": "0.9997", "loss": "0.0004", "code": " boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 102, "n_pass": [114, 8, 8]}
{"time": "2021-02-16 04:12:43.286000", "score": "0.9774", "loss": "0.031", "code": " boolean equals(Object o) { if (this == o) if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 97, "n_pass": [120, 9, 9]}
{"time": "2021-02-16 04:12:45.880448", "score": "0.9788", "loss": "0.0298", "code": " boolean equals(Object o) { if (this == o) if (o() != o()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 95, "n_pass": [188, 10, 10]}
{"time": "2021-02-16 04:12:48.438973", "score": "0.9772", "loss": "0.0316", "code": " boolean equals(Object o) { if (this == o) if (o() != o) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 93, "n_pass": [189, 11, 11]}
{"time": "2021-02-16 04:12:51.003849", "score": "0.9756", "loss": "0.0342", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 91, "n_pass": [191, 12, 12]}
{"time": "2021-02-16 04:12:53.587172", "score": "0.9746", "loss": "0.0352", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 88, "n_pass": [194, 13, 13]}
{"time": "2021-02-16 04:12:56.159583", "score": "0.9294", "loss": "0.1947", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 85, "n_pass": [200, 14, 14]}
{"time": "2021-02-16 04:12:58.717414", "score": "0.5044", "loss": "1.3701", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right) if (top.top) return true; }", "n_tokens": 82, "n_pass": [201, 15, 15]}
{"time": "2021-02-16 04:13:01.279884", "score": "0.6843", "loss": "0.7176", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right) if (top.top) ; }", "n_tokens": 79, "n_pass": [209, 16, 16]}
{"time": "2021-02-16 04:13:04.976339", "score": "0.8118", "loss": "0.4744", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right)(top.top) ; }", "n_tokens": 76, "n_pass": [240, 17, 17]}
{"time": "2021-02-16 04:13:15.648030", "score": "0.631", "loss": "0.8531", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets)(top.top) ; }", "n_tokens": 74, "n_pass": [337, 18, 18]}
{"time": "2021-02-16 04:13:18.228832", "score": "0.4205", "loss": "1.6731", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 72, "n_pass": [338, 19, 19]}
{"time": "2021-02-16 04:13:23.346474", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 71, "n_pass": [343, 21, 20]}
{"time": "2021-02-16 04:13:26.630621", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){ if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 70, "n_pass": [352, 22, 21]}
{"time": "2021-02-16 04:13:29.193915", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 69, "n_pass": [354, 23, 22]}
{"time": "2021-02-16 04:13:31.756784", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 68, "n_pass": [356, 24, 23]}
{"time": "2021-02-16 04:13:34.318785", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this== o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 67, "n_pass": [359, 25, 24]}
{"time": "2021-02-16 04:13:37.603050", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 66, "n_pass": [362, 26, 25]}
{"time": "2021-02-16 04:13:40.161095", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 65, "n_pass": [365, 27, 26]}
{"time": "2021-02-16 04:13:42.733521", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 64, "n_pass": [367, 28, 27]}
{"time": "2021-02-16 04:13:45.294275", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!= o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 63, "n_pass": [372, 29, 28]}
{"time": "2021-02-16 04:13:48.227881", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 62, "n_pass": [375, 30, 29]}
{"time": "2021-02-16 04:13:50.784624", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 61, "n_pass": [378, 31, 30]}
{"time": "2021-02-16 04:13:53.339549", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 60, "n_pass": [380, 32, 31]}
{"time": "2021-02-16 04:13:55.920082", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets= o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 59, "n_pass": [382, 33, 32]}
{"time": "2021-02-16 04:13:58.479182", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 58, "n_pass": [383, 34, 33]}
{"time": "2021-02-16 04:14:01.057555", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 57, "n_pass": [387, 35, 34]}
{"time": "2021-02-16 04:14:03.630387", "score": "0.4205", "loss": "1.6731", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left!= insets.left)if (right != insetstop.top) ; }", "n_tokens": 56, "n_pass": [390, 36, 35]}
{"time": "2021-02-16 04:14:06.186055", "score": "0.19", "loss": "2.6543", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left= insets.left)if (right != insetstop.top) ; }", "n_tokens": 55, "n_pass": [391, 37, 36]}
{"time": "2021-02-16 04:14:08.746433", "score": "0.19", "loss": "2.6543", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left=insets.left)if (right != insetstop.top) ; }", "n_tokens": 54, "n_pass": [393, 38, 37]}
{"time": "2021-02-16 04:14:13.863159", "score": "0.5611", "loss": "0.9958", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left=insets.left)if (right !=top.top) ; }", "n_tokens": 52, "n_pass": [400, 40, 38]}
{"time": "2021-02-16 04:14:16.443008", "score": "0.4798", "loss": "1.1545", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left=insets.left)if (right !=top) ; }", "n_tokens": 50, "n_pass": [401, 41, 39]}
{"time": "2021-02-16 04:14:20.857746", "score": "0.6877", "loss": "0.7482", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insetso;if(left=insets.left)if (right !=top) ; }", "n_tokens": 49, "n_pass": [431, 42, 40]}
{"time": "2021-02-16 04:14:23.411933", "score": "0.659", "loss": "0.8639", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left=insets.left)if (right !=top) ; }", "n_tokens": 48, "n_pass": [432, 43, 41]}
{"time": "2021-02-16 04:14:25.983843", "score": "0.404", "loss": "1.4761", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(leftinsets.left)if (right !=top) ; }", "n_tokens": 47, "n_pass": [437, 44, 42]}
{"time": "2021-02-16 04:14:28.550219", "score": "0.6634", "loss": "0.7512", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left.left)if (right !=top) ; }", "n_tokens": 46, "n_pass": [438, 45, 43]}
{"time": "2021-02-16 04:14:31.094362", "score": "0.6987", "loss": "0.667", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left)if (right !=top) ; }", "n_tokens": 44, "n_pass": [439, 46, 44]}
{"time": "2021-02-16 04:14:35.467571", "score": "0.7142", "loss": "0.5983", "code": "boolean equals(Object o){if(this==o)if(o()!=o);if(left)if (right !=top) ; }", "n_tokens": 43, "n_pass": [472, 47, 45]}
{"time": "2021-02-16 04:14:38.021681", "score": "0.7865", "loss": "0.4183", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if (right !=top) ; }", "n_tokens": 42, "n_pass": [473, 48, 46]}
{"time": "2021-02-16 04:14:44.041307", "score": "0.7865", "loss": "0.4183", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right !=top) ; }", "n_tokens": 41, "n_pass": [523, 49, 47]}
{"time": "2021-02-16 04:14:46.584577", "score": "0.7865", "loss": "0.4183", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right!=top) ; }", "n_tokens": 40, "n_pass": [525, 50, 48]}
{"time": "2021-02-16 04:14:49.136096", "score": "0.7395", "loss": "0.5532", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right=top) ; }", "n_tokens": 39, "n_pass": [526, 51, 49]}
{"time": "2021-02-16 04:14:51.702302", "score": "0.4241", "loss": "1.0266", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(righttop) ; }", "n_tokens": 38, "n_pass": [527, 52, 50]}
{"time": "2021-02-16 04:14:54.248064", "score": "0.8044", "loss": "0.3671", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right) ; }", "n_tokens": 37, "n_pass": [528, 53, 51]}
{"time": "2021-02-16 04:14:56.807113", "score": "0.8044", "loss": "0.3671", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right); }", "n_tokens": 36, "n_pass": [530, 54, 52]}
{"time": "2021-02-16 04:14:59.342366", "score": "0.8044", "loss": "0.3671", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right);}", "n_tokens": 35, "n_pass": [532, 55, 53]}
{"time": "2021-02-16 04:15:03.725114", "score": "0.7969", "loss": "0.3853", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)(right);}", "n_tokens": 34, "n_pass": [563, 56, 54]}

Minimal simplified code:
boolean equals(Object o){if(this==o)if(o()!=o)if(left)(right);}

