
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/pipe/AddClassifierTokenPredictions_classify.java
method_name = classify
method_body = public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKey(instName)) return m_tokenClassifier.classify(instance); Classifier classifier = (Classifier) m_table.get(instName); return classifier.classify(instance); }
predict, score, loss = classify, 0.7741163372993469, 0.25838029384613037

Trace of simplified code(s):
{"time": "2021-02-16 03:40:54.164681", "score": "0.7741", "loss": "0.2584", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKey(instName)) return m_tokenClassifier.classify(instance); Classifier classifier = (Classifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 94, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 03:40:56.713120", "score": "0.7313", "loss": "0.3283", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKeyClassifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 70, "n_pass": [10, 2, 2]}
{"time": "2021-02-16 03:40:59.253967", "score": "0.7979", "loss": "0.2371", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 58, "n_pass": [25, 3, 3]}
{"time": "2021-02-16 03:41:09.485444", "score": "0.9392", "loss": "0.0643", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 55, "n_pass": [77, 7, 4]}
{"time": "2021-02-16 03:41:12.034755", "score": "0.9392", "loss": "0.0643", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 53, "n_pass": [78, 8, 5]}
{"time": "2021-02-16 03:41:14.896412", "score": "0.9662", "loss": "0.0379", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object= instance.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 50, "n_pass": [85, 9, 6]}
{"time": "2021-02-16 03:41:17.457525", "score": "0.9701", "loss": "0.0343", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 47, "n_pass": [86, 10, 7]}
{"time": "2021-02-16 03:41:28.062260", "score": "0.9701", "loss": "0.0343", "code": "Classification classify(Instance instance, boolean useOutOfFold){ Object.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 46, "n_pass": [136, 13, 8]}
{"time": "2021-02-16 03:41:30.598995", "score": "0.9701", "loss": "0.0343", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object.getName(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 45, "n_pass": [138, 14, 9]}
{"time": "2021-02-16 03:41:33.149480", "score": "0.9649", "loss": "0.0386", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object(); if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 43, "n_pass": [140, 15, 10]}
{"time": "2021-02-16 03:41:35.691560", "score": "0.9754", "loss": "0.0269", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object; if (Classifier) m_table.get(instName); return classifier.classify; }", "n_tokens": 41, "n_pass": [141, 16, 11]}
{"time": "2021-02-16 03:41:38.609014", "score": "0.9713", "loss": "0.0311", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object; if (Classifier) table.get(instName); return classifier.classify; }", "n_tokens": 39, "n_pass": [146, 17, 12]}
{"time": "2021-02-16 03:41:41.144154", "score": "0.9715", "loss": "0.0301", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object; if (Classifier) get(instName); return classifier.classify; }", "n_tokens": 37, "n_pass": [147, 18, 13]}
{"time": "2021-02-16 03:41:46.193538", "score": "0.651", "loss": "0.4335", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object; if (Classifier) get(instName); return classify; }", "n_tokens": 35, "n_pass": [152, 20, 14]}
{"time": "2021-02-16 03:41:49.816780", "score": "0.651", "loss": "0.4335", "code": "Classification classify(Instance instance,boolean useOutOfFold){Object; if (Classifier) get(instName); return classify; }", "n_tokens": 34, "n_pass": [163, 21, 15]}
{"time": "2021-02-16 03:41:52.350958", "score": "0.6505", "loss": "0.4342", "code": "Classification classify(Instance instance,boolean useOutOfFold){; if (Classifier) get(instName); return classify; }", "n_tokens": 33, "n_pass": [169, 22, 16]}
{"time": "2021-02-16 03:41:54.895566", "score": "0.6505", "loss": "0.4342", "code": "Classification classify(Instance instance,boolean useOutOfFold){if (Classifier) get(instName); return classify; }", "n_tokens": 31, "n_pass": [170, 23, 17]}
{"time": "2021-02-16 03:41:57.807961", "score": "0.4679", "loss": "0.9118", "code": "Classification classify(Instance instance,boolean useOutOfFold){if (Classifier) get(instName); classify; }", "n_tokens": 29, "n_pass": [177, 24, 18]}
{"time": "2021-02-16 03:42:06.276693", "score": "0.4679", "loss": "0.9118", "code": "Classification classify(Instance instance,boolean useOutOfFold){if (Classifier) get(instName); classify;}", "n_tokens": 28, "n_pass": [216, 26, 19]}
{"time": "2021-02-16 03:42:10.256833", "score": "0.4679", "loss": "0.9118", "code": "Classification classify(Instance instance,boolean useOutOfFold){if(Classifier) get(instName); classify;}", "n_tokens": 27, "n_pass": [231, 27, 20]}
{"time": "2021-02-16 03:42:12.801186", "score": "0.4679", "loss": "0.9118", "code": "Classification classify(Instance instance,boolean useOutOfFold){if(Classifier)get(instName); classify;}", "n_tokens": 26, "n_pass": [235, 28, 21]}
{"time": "2021-02-16 03:42:15.326054", "score": "0.6981", "loss": "0.4273", "code": "Classification classify(Instance instance,boolean useOutOfFold){if(Classifier)(instName); classify;}", "n_tokens": 25, "n_pass": [236, 29, 22]}
{"time": "2021-02-16 03:42:18.195764", "score": "0.6981", "loss": "0.4273", "code": "Classification classify(Instance instance,boolean useOutOfFold){if(Classifier)(instName);classify;}", "n_tokens": 24, "n_pass": [241, 30, 23]}

Minimal simplified code:
Classification classify(Instance instance,boolean useOutOfFold){if(Classifier)(instName);classify;}

