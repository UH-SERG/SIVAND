
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/experiment/statisticsexporters/AbstractMeasurementEvaluationStatisticsExporter_getOptions.java
method_name = getOptions
method_body = @Override public String[] getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions()); OptionUtils.add(result, 'M', getMeasurement()); return OptionUtils.toArray(result); }
predict, score, loss = getOptions, 0.9759076237678528, 0.026166440919041634

Trace of simplified code(s):
{"time": "2021-02-14 14:50:04.531174", "score": "0.9759", "loss": "0.0262", "code": "@Override public String[] getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions()); OptionUtils.add(result, 'M', getMeasurement()); return OptionUtils.toArray(result); }", "n_tokens": 77, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 14:50:07.624535", "score": "0.9518", "loss": "0.0552", "code": " String[] getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions()); OptionUtils.add(result, 'M', getMeasurement()); return OptionUtils.toArray(result); }", "n_tokens": 73, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 14:50:13.782535", "score": "0.9004", "loss": "0.1084", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions()); OptionUtils.add(result, 'M', getMeasurement()); return OptionUtils.toArray(result); }", "n_tokens": 71, "n_pass": [91, 4, 3]}
{"time": "2021-02-14 14:50:23.018694", "score": "0.9677", "loss": "0.0349", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions());add(result, 'M', getMeasurement()); return OptionUtils.toArray(result); }", "n_tokens": 68, "n_pass": [110, 7, 4]}
{"time": "2021-02-14 14:50:25.681868", "score": "0.9304", "loss": "0.0743", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions());add(result, 'M', getMeasurement());OptionUtils.toArray(result); }", "n_tokens": 65, "n_pass": [116, 8, 5]}
{"time": "2021-02-14 14:50:28.349973", "score": "0.9474", "loss": "0.0546", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions());add(result, 'M', getMeasurement());(result); }", "n_tokens": 62, "n_pass": [117, 9, 6]}
{"time": "2021-02-14 14:50:31.001239", "score": "0.9473", "loss": "0.0548", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils.add(result, super.getOptions());add(result, 'M', getMeasurement());; }", "n_tokens": 59, "n_pass": [118, 10, 7]}
{"time": "2021-02-14 14:50:35.272806", "score": "0.4343", "loss": "1.0043", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils(result, super.getOptions());add(result, 'M', getMeasurement());; }", "n_tokens": 57, "n_pass": [134, 11, 8]}
{"time": "2021-02-14 14:50:47.093804", "score": "0.4343", "loss": "1.0043", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils(result,super.getOptions());add(result, 'M', getMeasurement());; }", "n_tokens": 56, "n_pass": [210, 13, 9]}
{"time": "2021-02-14 14:50:52.410187", "score": "0.8844", "loss": "0.1646", "code": " String getOptions() { List<String> result = new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 54, "n_pass": [219, 15, 10]}
{"time": "2021-02-14 14:50:55.065462", "score": "0.8844", "loss": "0.1646", "code": "String getOptions() { List<String> result = new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 53, "n_pass": [227, 16, 11]}
{"time": "2021-02-14 14:50:58.947686", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){ List<String> result = new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 52, "n_pass": [233, 17, 12]}
{"time": "2021-02-14 14:51:01.605609", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String> result = new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 51, "n_pass": [235, 18, 13]}
{"time": "2021-02-14 14:51:04.651016", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result = new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 50, "n_pass": [240, 19, 14]}
{"time": "2021-02-14 14:51:07.301309", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result= new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 49, "n_pass": [242, 20, 15]}
{"time": "2021-02-14 14:51:09.948698", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>(); OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 48, "n_pass": [244, 21, 16]}
{"time": "2021-02-14 14:51:12.617392", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add( 'M', getMeasurement());; }", "n_tokens": 47, "n_pass": [253, 22, 17]}
{"time": "2021-02-14 14:51:24.899772", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add('M', getMeasurement());; }", "n_tokens": 46, "n_pass": [311, 25, 18]}
{"time": "2021-02-14 14:51:27.897737", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add('M',getMeasurement());; }", "n_tokens": 45, "n_pass": [315, 26, 19]}
{"time": "2021-02-14 14:51:30.560864", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add('M',getMeasurement()); }", "n_tokens": 44, "n_pass": [320, 27, 20]}
{"time": "2021-02-14 14:51:33.199661", "score": "0.8844", "loss": "0.1646", "code": "String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add('M',getMeasurement());}", "n_tokens": 43, "n_pass": [322, 28, 21]}

Minimal simplified code:
String getOptions(){List<String>result=new ArrayList<>();OptionUtils(result,super.getOptions());add('M',getMeasurement());}

