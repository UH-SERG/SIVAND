
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jmockit__jmockit1/main/src/mockit/asm/MethodWriter_visitJumpInsn.java
method_name = visitJumpInsn
method_body = @Override public void visitJumpInsn(int opcode, @Nonnull Label label) { Label nextInsn = cfgAnalysis.updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W); } else { if (nextInsn != null) { nextInsn.markAsTarget(); } code.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); } else { code.putByte(opcode); label.put(code, code.length - 1, false); } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }
predict, score, loss = visitJumpInsn, 0.9217905402183533, 0.10250745713710785

Trace of simplified code(s):
{"time": "2021-02-16 20:06:15.715567", "score": "0.9626", "loss": "0.0566", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) { Label nextInsn = cfgAnalysis.updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W); } else { if (nextInsn != null) { nextInsn.markAsTarget(); } code.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); } else { code.putByte(opcode); label.put(code, code.length - 1, false); } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 256, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 20:06:18.320359", "score": "0.8322", "loss": "0.2472", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) { Label nextInsn = cfgAnalysis.updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W);(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); } else { code.putByte(opcode); label.put(code, code.length - 1, false); } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 224, "n_pass": [23, 2, 2]}
{"time": "2021-02-16 20:06:20.920192", "score": "0.9544", "loss": "0.0816", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) { Label nextInsn = cfgAnalysis.updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W);(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); put(code, code.length - 1, false); } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 208, "n_pass": [49, 3, 3]}
{"time": "2021-02-16 20:06:23.500322", "score": "0.9911", "loss": "0.0144", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) { Label nextInsn = cfgAnalysis.updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W);(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 192, "n_pass": [50, 4, 4]}
{"time": "2021-02-16 20:06:26.105026", "score": "0.8009", "loss": "0.3903", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) { updateCurrentBlockForJumpInstruction(opcode, label); if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W);(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 184, "n_pass": [92, 5, 5]}
{"time": "2021-02-16 20:06:28.674145", "score": "0.783", "loss": "0.3903", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code.putByte(GOTO_W);(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 176, "n_pass": [93, 6, 6]}
{"time": "2021-02-16 20:06:31.349694", "score": "0.9737", "loss": "0.0397", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putShort(8); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 168, "n_pass": [100, 7, 7]}
{"time": "2021-02-16 20:06:33.922352", "score": "0.9792", "loss": "0.033", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); code.putByte(GOTO_W); } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 160, "n_pass": [106, 8, 8]}
{"time": "2021-02-16 20:06:36.504009", "score": "0.8753", "loss": "0.1633", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(code, code.length - 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 152, "n_pass": [107, 9, 9]}
{"time": "2021-02-16 20:06:39.083545", "score": "0.9423", "loss": "0.0838", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put( 1, true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 144, "n_pass": [109, 10, 10]}
{"time": "2021-02-16 20:06:41.673620", "score": "0.964", "loss": "0.0492", "code": "@Override public void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 140, "n_pass": [164, 11, 11]}
{"time": "2021-02-16 20:06:46.820888", "score": "0.8958", "loss": "0.1333", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && label.position - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 136, "n_pass": [169, 13, 12]}
{"time": "2021-02-16 20:06:49.402916", "score": "0.9522", "loss": "0.0635", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code.length < Short.MIN_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 132, "n_pass": [178, 14, 13]}
{"time": "2021-02-16 20:06:51.973509", "score": "0.9669", "loss": "0.044", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code.length <_VALUE) { if (opcode == GOTO) { code(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 128, "n_pass": [181, 15, 14]}
{"time": "2021-02-16 20:06:54.559005", "score": "0.9671", "loss": "0.0437", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code.length <_VALUE) { if (opcode == GOTO) { code(opcode <6 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 124, "n_pass": [188, 16, 15]}
{"time": "2021-02-16 20:06:57.127212", "score": "0.9669", "loss": "0.0438", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code.length <_VALUE) { if (opcode == GOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : opcode ^ 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 120, "n_pass": [192, 17, 16]}
{"time": "2021-02-16 20:06:59.676486", "score": "0.9648", "loss": "0.0462", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code.length <_VALUE) { if (opcode == GOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 116, "n_pass": [195, 18, 17]}
{"time": "2021-02-16 20:07:04.826316", "score": "0.9712", "loss": "0.0382", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() && - code_VALUE) { if (opcode == GOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 112, "n_pass": [213, 20, 18]}
{"time": "2021-02-16 20:07:09.955208", "score": "0.9642", "loss": "0.0462", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcode == GOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 108, "n_pass": [241, 22, 19]}
{"time": "2021-02-16 20:07:16.494156", "score": "0.9971", "loss": "0.0052", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcode= GOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 106, "n_pass": [328, 24, 20]}
{"time": "2021-02-16 20:07:19.037324", "score": "0.9966", "loss": "0.0059", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) { code(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 104, "n_pass": [329, 25, 21]}
{"time": "2021-02-16 20:07:21.583166", "score": "0.9965", "loss": "0.0062", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode <6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 102, "n_pass": [332, 26, 22]}
{"time": "2021-02-16 20:07:24.127167", "score": "0.9969", "loss": "0.0054", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode6 ? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 100, "n_pass": [334, 27, 23]}
{"time": "2021-02-16 20:07:26.677461", "score": "0.9969", "loss": "0.0054", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((opcode + 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 98, "n_pass": [335, 28, 24]}
{"time": "2021-02-16 20:07:29.229452", "score": "0.9969", "loss": "0.0054", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((+ 1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 96, "n_pass": [338, 29, 25]}
{"time": "2021-02-16 20:07:31.769143", "score": "0.9969", "loss": "0.0054", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); ; } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 94, "n_pass": [339, 30, 26]}
{"time": "2021-02-16 20:07:34.312878", "score": "0.9969", "loss": "0.0054", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } label.put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 92, "n_pass": [346, 31, 27]}
{"time": "2021-02-16 20:07:36.882374", "score": "0.9942", "loss": "0.0098", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); ; } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 90, "n_pass": [349, 32, 28]}
{"time": "2021-02-16 20:07:39.425447", "score": "0.9942", "loss": "0.0098", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } cfgAnalysis.updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 88, "n_pass": [352, 33, 29]}
{"time": "2021-02-16 20:07:41.980414", "score": "0.9659", "loss": "0.0508", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(opcode, nextInsn); }", "n_tokens": 86, "n_pass": [355, 34, 30]}
{"time": "2021-02-16 20:07:44.513473", "score": "0.9728", "loss": "0.0409", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget( nextInsn); }", "n_tokens": 84, "n_pass": [357, 35, 31]}
{"time": "2021-02-16 20:07:47.068525", "score": "0.9552", "loss": "0.0989", "code": " void visitJumpInsn(int opcode, @Nonnull Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 82, "n_pass": [358, 36, 32]}
{"time": "2021-02-16 20:07:49.986324", "score": "0.9971", "loss": "0.0069", "code": " void visitJumpInsn(int opcode,  Label label) {  if (label.isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 80, "n_pass": [366, 37, 33]}
{"time": "2021-02-16 20:07:52.544370", "score": "0.9981", "loss": "0.0042", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved() &&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 78, "n_pass": [373, 38, 34]}
{"time": "2021-02-16 20:08:05.319149", "score": "0.9981", "loss": "0.0042", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 77, "n_pass": [494, 39, 35]}
{"time": "2021-02-16 20:08:07.855385", "score": "0.9989", "loss": "0.0021", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&_VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 76, "n_pass": [495, 40, 36]}
{"time": "2021-02-16 20:08:10.385919", "score": "0.9989", "loss": "0.0021", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE) { if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 75, "n_pass": [497, 41, 37]}
{"time": "2021-02-16 20:08:12.949295", "score": "0.9989", "loss": "0.0021", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){ if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 74, "n_pass": [500, 42, 38]}
{"time": "2021-02-16 20:08:15.483637", "score": "0.9989", "loss": "0.0021", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if (opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 73, "n_pass": [502, 43, 39]}
{"time": "2021-02-16 20:08:18.044624", "score": "0.9989", "loss": "0.0021", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(opcodeGOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 72, "n_pass": [504, 44, 40]}
{"time": "2021-02-16 20:08:20.579673", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO) {(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 71, "n_pass": [506, 45, 41]}
{"time": "2021-02-16 20:08:23.111959", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode? ((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 70, "n_pass": [509, 46, 42]}
{"time": "2021-02-16 20:08:25.651694", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1)) - 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 69, "n_pass": [514, 47, 43]}
{"time": "2021-02-16 20:08:28.216564", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))- 1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 68, "n_pass": [520, 48, 44]}
{"time": "2021-02-16 20:08:30.746318", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1 : 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 67, "n_pass": [522, 49, 45]}
{"time": "2021-02-16 20:08:33.279576", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1: 1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 66, "n_pass": [524, 50, 46]}
{"time": "2021-02-16 20:08:35.817008", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1); } put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 65, "n_pass": [526, 51, 47]}
{"time": "2021-02-16 20:08:38.361126", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);} put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 64, "n_pass": [530, 52, 48]}
{"time": "2021-02-16 20:08:40.918564", "score": "0.9333", "loss": "0.0778", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}put(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 63, "n_pass": [532, 53, 49]}
{"time": "2021-02-16 20:08:43.469472", "score": "0.9643", "loss": "0.0388", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true); } updateCurrentBlockForJumpTarget(); }", "n_tokens": 62, "n_pass": [533, 54, 50]}
{"time": "2021-02-16 20:08:46.020752", "score": "0.9643", "loss": "0.0388", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);} updateCurrentBlockForJumpTarget(); }", "n_tokens": 61, "n_pass": [538, 55, 51]}
{"time": "2021-02-16 20:08:48.554989", "score": "0.9643", "loss": "0.0388", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget(); }", "n_tokens": 60, "n_pass": [540, 56, 52]}
{"time": "2021-02-16 20:08:51.126601", "score": "0.9643", "loss": "0.0388", "code": " void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 59, "n_pass": [545, 57, 53]}
{"time": "2021-02-16 20:08:53.662136", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,  Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 58, "n_pass": [547, 58, 54]}
{"time": "2021-02-16 20:08:56.963064", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode, Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 57, "n_pass": [556, 59, 55]}
{"time": "2021-02-16 20:08:59.495784", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,Label label) {  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 56, "n_pass": [557, 60, 56]}
{"time": "2021-02-16 20:09:02.034184", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,Label label){  if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 55, "n_pass": [562, 61, 57]}
{"time": "2021-02-16 20:09:04.568709", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,Label label){ if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 54, "n_pass": [564, 62, 58]}
{"time": "2021-02-16 20:09:07.103432", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,Label label){if (isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 53, "n_pass": [565, 63, 59]}
{"time": "2021-02-16 20:09:09.629508", "score": "0.9643", "loss": "0.0388", "code": "void visitJumpInsn(int opcode,Label label){if(isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}", "n_tokens": 52, "n_pass": [567, 64, 60]}

Minimal simplified code:
void visitJumpInsn(int opcode,Label label){if(isResolved()&VALUE){if(GOTO){(opcode?((1))-1:1);}(true);}updateCurrentBlockForJumpTarget();}

