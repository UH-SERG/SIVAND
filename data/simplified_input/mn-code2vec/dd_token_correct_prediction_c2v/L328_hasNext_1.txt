
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/ql/analytic/AnalyticRecordSource_hasNext.java
method_name = hasNext
method_body = @Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }
predict, score, loss = hasNext, 0.7974861264228821, 0.23969249427318573

Trace of simplified code(s):
{"time": "2021-02-14 15:25:50.229997", "score": "0.9289", "loss": "0.0826", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 15:25:52.903237", "score": "0.979", "loss": "0.0361", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 89, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 15:25:55.649304", "score": "0.9853", "loss": "0.0248", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 83, "n_pass": [45, 3, 3]}
{"time": "2021-02-14 15:25:58.301826", "score": "0.9656", "loss": "0.0707", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 76, "n_pass": [50, 4, 4]}
{"time": "2021-02-14 15:26:01.365197", "score": "0.4719", "loss": "1.3197", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 73, "n_pass": [93, 5, 5]}
{"time": "2021-02-14 15:26:06.662097", "score": "0.4326", "loss": "1.6381", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (int in =size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 70, "n_pass": [103, 7, 6]}
{"time": "2021-02-14 15:26:11.938621", "score": "0.2784", "loss": "2.1743", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (int in =size(); i < n; ) { prepareFor(record); } return true; } return false; }", "n_tokens": 67, "n_pass": [108, 9, 7]}
{"time": "2021-02-14 15:26:15.021564", "score": "0.3244", "loss": "1.7952", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (n =size(); i < n; ) { prepareFor(record); } return true; } return false; }", "n_tokens": 64, "n_pass": [124, 10, 8]}
{"time": "2021-02-14 15:26:17.660986", "score": "0.4608", "loss": "1.2875", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (size(); i < n; ) { prepareFor(record); } return true; } return false; }", "n_tokens": 61, "n_pass": [125, 11, 9]}
{"time": "2021-02-14 15:26:20.299845", "score": "0.3534", "loss": "1.5934", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) { prepareFor(record); } return true; } return false; }", "n_tokens": 58, "n_pass": [126, 12, 10]}
{"time": "2021-02-14 15:26:28.610524", "score": "0.9713", "loss": "0.0369", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); } return true; } return false; }", "n_tokens": 56, "n_pass": [190, 14, 11]}
{"time": "2021-02-14 15:26:31.250085", "score": "0.9731", "loss": "0.0337", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); } true; } return false; }", "n_tokens": 54, "n_pass": [194, 15, 12]}
{"time": "2021-02-14 15:26:33.879025", "score": "0.9672", "loss": "0.0402", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }; } return false; }", "n_tokens": 52, "n_pass": [195, 16, 13]}
{"time": "2021-02-14 15:26:36.507926", "score": "0.9672", "loss": "0.0402", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }} return false; }", "n_tokens": 50, "n_pass": [196, 17, 14]}
{"time": "2021-02-14 15:26:39.159244", "score": "0.9922", "loss": "0.008", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }} false; }", "n_tokens": 48, "n_pass": [198, 18, 15]}
{"time": "2021-02-14 15:26:41.813851", "score": "0.9912", "loss": "0.009", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 46, "n_pass": [199, 19, 16]}
{"time": "2021-02-14 15:26:44.455877", "score": "0.9912", "loss": "0.009", "code": " boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 45, "n_pass": [201, 20, 17]}
{"time": "2021-02-14 15:26:47.085529", "score": "0.9912", "loss": "0.009", "code": "boolean hasNext() { if (cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 44, "n_pass": [202, 21, 18]}
{"time": "2021-02-14 15:26:50.517145", "score": "0.9912", "loss": "0.009", "code": "boolean hasNext(){ if (cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 43, "n_pass": [208, 22, 19]}
{"time": "2021-02-14 15:26:53.147494", "score": "0.9912", "loss": "0.009", "code": "boolean hasNext(){if (cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 42, "n_pass": [210, 23, 20]}
{"time": "2021-02-14 15:26:55.787481", "score": "0.9912", "loss": "0.009", "code": "boolean hasNext(){if(cursor.hasNext()) {for (; i < n; ) {(record); }}  }", "n_tokens": 41, "n_pass": [212, 24, 21]}
{"time": "2021-02-14 15:26:58.418908", "score": "0.9315", "loss": "0.0967", "code": "boolean hasNext(){if(cursor()) {for (; i < n; ) {(record); }}  }", "n_tokens": 39, "n_pass": [215, 25, 22]}
{"time": "2021-02-14 15:27:01.055238", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (; i < n; ) {(record); }}  }", "n_tokens": 37, "n_pass": [216, 26, 23]}
{"time": "2021-02-14 15:27:09.354735", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i < n; ) {(record); }}  }", "n_tokens": 36, "n_pass": [270, 27, 24]}
{"time": "2021-02-14 15:27:11.964143", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i< n; ) {(record); }}  }", "n_tokens": 35, "n_pass": [272, 28, 25]}
{"time": "2021-02-14 15:27:14.571174", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n; ) {(record); }}  }", "n_tokens": 34, "n_pass": [274, 29, 26]}
{"time": "2021-02-14 15:27:17.198365", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n;) {(record); }}  }", "n_tokens": 33, "n_pass": [277, 30, 27]}
{"time": "2021-02-14 15:27:19.847797", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n;){(record); }}  }", "n_tokens": 32, "n_pass": [279, 31, 28]}
{"time": "2021-02-14 15:27:22.456687", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n;){(record);}}  }", "n_tokens": 31, "n_pass": [285, 32, 29]}
{"time": "2021-02-14 15:27:25.073397", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n;){(record);}} }", "n_tokens": 30, "n_pass": [288, 33, 30]}
{"time": "2021-02-14 15:27:27.681595", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor) {for (;i<n;){(record);}}}", "n_tokens": 29, "n_pass": [289, 34, 31]}
{"time": "2021-02-14 15:27:31.085200", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor){for (;i<n;){(record);}}}", "n_tokens": 28, "n_pass": [301, 35, 32]}
{"time": "2021-02-14 15:27:33.700700", "score": "0.9668", "loss": "0.0476", "code": "boolean hasNext(){if(cursor){for(;i<n;){(record);}}}", "n_tokens": 27, "n_pass": [304, 36, 33]}
{"time": "2021-02-14 15:27:36.311619", "score": "0.928", "loss": "0.0866", "code": "boolean hasNext(){if(cursor){for(;in;){(record);}}}", "n_tokens": 26, "n_pass": [308, 37, 34]}
{"time": "2021-02-14 15:27:38.937832", "score": "0.8718", "loss": "0.1531", "code": "boolean hasNext(){if(cursor){for(;i;){(record);}}}", "n_tokens": 25, "n_pass": [309, 38, 35]}
{"time": "2021-02-14 15:27:42.363288", "score": "0.7943", "loss": "0.2534", "code": "boolean hasNext(){if(cursor){for(;;){(record);}}}", "n_tokens": 24, "n_pass": [334, 39, 36]}

Minimal simplified code:
boolean hasNext(){if(cursor){for(;;){(record);}}}

