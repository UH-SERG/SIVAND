
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/tang-jie__NettyRPC/src/main/java/com/newlandframework/rpc/parallel/policy/RejectedPolicyType_fromString.java
method_name = fromString
method_body = public static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException("Mismatched type with value=" + value); }
predict, score, loss = fromString, 1.0, 0.0

Trace of simplified code(s):
{"time": "2021-02-16 12:30:59.723197", "score": "1.0", "loss": "0.0", "code": "public static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 87, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 12:31:02.696411", "score": "1.0", "loss": "0.0", "code": "static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 85, "n_pass": [92, 2, 2]}
{"time": "2021-02-16 12:31:05.242984", "score": "1.0", "loss": "0.0", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 83, "n_pass": [93, 3, 3]}
{"time": "2021-02-16 12:31:08.203888", "score": "1.0", "loss": "0.0", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 80, "n_pass": [108, 4, 4]}
{"time": "2021-02-16 12:31:10.747638", "score": "1.0", "loss": "0.0", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 77, "n_pass": [113, 5, 5]}
{"time": "2021-02-16 12:31:13.297483", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 74, "n_pass": [116, 6, 6]}
{"time": "2021-02-16 12:31:21.323056", "score": "0.9979", "loss": "0.0036", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (equalsIgnoreCase(value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 71, "n_pass": [137, 9, 7]}
{"time": "2021-02-16 12:31:33.965510", "score": "0.9979", "loss": "0.0036", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){ if (equalsIgnoreCase(value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 70, "n_pass": [216, 12, 8]}
{"time": "2021-02-16 12:31:36.534165", "score": "0.9979", "loss": "0.0036", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if (equalsIgnoreCase(value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 69, "n_pass": [218, 13, 9]}
{"time": "2021-02-16 12:31:39.106057", "score": "0.9979", "loss": "0.0036", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 68, "n_pass": [220, 14, 10]}
{"time": "2021-02-16 12:31:41.648656", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if((value.trim())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 67, "n_pass": [222, 15, 11]}
{"time": "2021-02-16 12:31:44.191516", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if((value())) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 65, "n_pass": [224, 16, 12]}
{"time": "2021-02-16 12:31:46.732960", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { ; } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 63, "n_pass": [225, 17, 13]}
{"time": "2021-02-16 12:31:49.278447", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { } }  IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 61, "n_pass": [228, 18, 14]}
{"time": "2021-02-16 12:31:51.840264", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 59, "n_pass": [231, 19, 15]}
{"time": "2021-02-16 12:32:03.234560", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value){ for (RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 58, "n_pass": [250, 23, 16]}
{"time": "2021-02-16 12:32:05.796151", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value){for (RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 57, "n_pass": [252, 24, 17]}
{"time": "2021-02-16 12:32:08.344121", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type : RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 56, "n_pass": [254, 25, 18]}
{"time": "2021-02-16 12:32:10.892375", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type: RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 55, "n_pass": [259, 26, 19]}
{"time": "2021-02-16 12:32:13.453833", "score": "0.998", "loss": "0.0032", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType.values()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 54, "n_pass": [261, 27, 20]}
{"time": "2021-02-16 12:32:15.997197", "score": "0.9959", "loss": "0.0066", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyTypevalues()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 53, "n_pass": [263, 28, 21]}
{"time": "2021-02-16 12:32:18.545485", "score": "0.9959", "loss": "0.0066", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)) { } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 52, "n_pass": [264, 29, 22]}
{"time": "2021-02-16 12:32:33.504390", "score": "0.9959", "loss": "0.0066", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){ } }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 51, "n_pass": [336, 33, 23]}
{"time": "2021-02-16 12:32:36.053482", "score": "0.9959", "loss": "0.0066", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){} }IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 50, "n_pass": [337, 34, 24]}
{"time": "2021-02-16 12:32:38.599481", "score": "0.9959", "loss": "0.0066", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 49, "n_pass": [339, 35, 25]}
{"time": "2021-02-16 12:32:41.152840", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatched type with value=\" + value); }", "n_tokens": 48, "n_pass": [341, 36, 26]}
{"time": "2021-02-16 12:32:46.216960", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtype with value=\" + value); }", "n_tokens": 47, "n_pass": [345, 38, 27]}
{"time": "2021-02-16 12:32:51.310575", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewith value=\" + value); }", "n_tokens": 46, "n_pass": [347, 40, 28]}
{"time": "2021-02-16 12:32:56.381520", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewithvalue=\" + value); }", "n_tokens": 45, "n_pass": [349, 42, 29]}
{"time": "2021-02-16 12:33:01.460214", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewithvalue\" + value); }", "n_tokens": 44, "n_pass": [351, 44, 30]}
{"time": "2021-02-16 12:33:04.025346", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewithvalue\"+ value); }", "n_tokens": 43, "n_pass": [353, 45, 31]}
{"time": "2021-02-16 12:33:06.572411", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewithvalue\"+value); }", "n_tokens": 42, "n_pass": [355, 46, 32]}
{"time": "2021-02-16 12:33:09.102756", "score": "0.9999", "loss": "0.0003", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}(\"Mismatchedtypewithvalue\"+value);}", "n_tokens": 41, "n_pass": [359, 47, 33]}

Minimal simplified code:
RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if((value)){}}("Mismatchedtypewithvalue"+value);}

