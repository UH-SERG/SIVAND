
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/math/FloatArrays_min.java
method_name = min
method_body = public static float min(float... input) { validateArray(input); float min = input[0]; for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }
predict, score, loss = min, 0.9349529147148132, 0.07668862491846085

Trace of simplified code(s):
{"time": "2021-02-16 02:15:31.395298", "score": "0.935", "loss": "0.0767", "code": "public static float min(float... input) { validateArray(input); float min = input[0]; for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 99, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 02:15:34.353047", "score": "0.9634", "loss": "0.0409", "code": "public static float min(float... input) { validateArray(input); for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 87, "n_pass": [22, 2, 2]}
{"time": "2021-02-16 02:15:36.972421", "score": "0.9701", "loss": "0.0328", "code": "public static float min(float... input) { validateArray(input); for (int i = 1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 81, "n_pass": [46, 3, 3]}
{"time": "2021-02-16 02:15:39.959287", "score": "0.7062", "loss": "0.3628", "code": "public static float min(float... input) { for (int i = 1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 75, "n_pass": [56, 4, 4]}
{"time": "2021-02-16 02:15:42.934143", "score": "0.7001", "loss": "0.3709", "code": "public static float min(float... input) { for (int i1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 72, "n_pass": [95, 5, 5]}
{"time": "2021-02-16 02:15:45.555722", "score": "0.6908", "loss": "0.3827", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 69, "n_pass": [97, 6, 6]}
{"time": "2021-02-16 02:15:50.676449", "score": "0.6488", "loss": "0.446", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min [i]; } } return min; }", "n_tokens": 66, "n_pass": [105, 8, 7]}
{"time": "2021-02-16 02:15:53.271323", "score": "0.6491", "loss": "0.4455", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 63, "n_pass": [106, 9, 8]}
{"time": "2021-02-16 02:15:55.920638", "score": "0.6491", "loss": "0.4455", "code": " float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 60, "n_pass": [110, 10, 9]}
{"time": "2021-02-16 02:15:58.920772", "score": "0.6491", "loss": "0.4455", "code": " float min(float input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 57, "n_pass": [113, 11, 10]}
{"time": "2021-02-16 02:16:01.487931", "score": "0.6434", "loss": "0.4537", "code": " float min(float input) { for (1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 54, "n_pass": [117, 12, 11]}
{"time": "2021-02-16 02:16:06.620110", "score": "0.6436", "loss": "0.4536", "code": " float min(float input) { for (1; length; ) { if (input[i] < min) {; } } return min; }", "n_tokens": 51, "n_pass": [126, 14, 12]}
{"time": "2021-02-16 02:16:14.438126", "score": "0.6436", "loss": "0.4536", "code": " float min(float input) { for (1; length; ) { if (input[i] < min) {} } return min; }", "n_tokens": 49, "n_pass": [175, 16, 13]}
{"time": "2021-02-16 02:16:19.561097", "score": "0.6436", "loss": "0.4536", "code": "float min(float input) { for (1; length; ) { if (input[i] < min) {} } return min; }", "n_tokens": 48, "n_pass": [180, 18, 14]}
{"time": "2021-02-16 02:16:22.850265", "score": "0.6436", "loss": "0.4536", "code": "float min(float input){ for (1; length; ) { if (input[i] < min) {} } return min; }", "n_tokens": 47, "n_pass": [189, 19, 15]}
{"time": "2021-02-16 02:16:25.380968", "score": "0.6436", "loss": "0.4536", "code": "float min(float input){for (1; length; ) { if (input[i] < min) {} } return min; }", "n_tokens": 46, "n_pass": [191, 20, 16]}
{"time": "2021-02-16 02:16:27.924499", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) { if (input[i] < min) {} } return min; }", "n_tokens": 44, "n_pass": [195, 21, 17]}
{"time": "2021-02-16 02:16:38.886156", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if (input[i] < min) {} } return min; }", "n_tokens": 43, "n_pass": [257, 23, 18]}
{"time": "2021-02-16 02:16:41.426486", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i] < min) {} } return min; }", "n_tokens": 42, "n_pass": [259, 24, 19]}
{"time": "2021-02-16 02:16:44.032322", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]< min) {} } return min; }", "n_tokens": 41, "n_pass": [265, 25, 20]}
{"time": "2021-02-16 02:16:46.640674", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]<min) {} } return min; }", "n_tokens": 40, "n_pass": [267, 26, 21]}
{"time": "2021-02-16 02:16:49.210912", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]<min){} } return min; }", "n_tokens": 39, "n_pass": [270, 27, 22]}
{"time": "2021-02-16 02:16:51.798517", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]<min){}} return min; }", "n_tokens": 38, "n_pass": [273, 28, 23]}
{"time": "2021-02-16 02:16:54.354890", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]<min){}}return min; }", "n_tokens": 37, "n_pass": [275, 29, 24]}
{"time": "2021-02-16 02:17:04.722135", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for (1;; ) {if(input[i]<min){}}return min;}", "n_tokens": 36, "n_pass": [280, 33, 25]}
{"time": "2021-02-16 02:17:08.002242", "score": "0.6493", "loss": "0.4443", "code": "float min(float input){for(1;; ) {if(input[i]<min){}}return min;}", "n_tokens": 35, "n_pass": [292, 34, 26]}
{"time": "2021-02-16 02:17:10.562090", "score": "0.6582", "loss": "0.4299", "code": "float min(float input){for(;; ) {if(input[i]<min){}}return min;}", "n_tokens": 34, "n_pass": [294, 35, 27]}
{"time": "2021-02-16 02:17:13.169899", "score": "0.6582", "loss": "0.4299", "code": "float min(float input){for(;;) {if(input[i]<min){}}return min;}", "n_tokens": 33, "n_pass": [297, 36, 28]}
{"time": "2021-02-16 02:17:15.804806", "score": "0.6582", "loss": "0.4299", "code": "float min(float input){for(;;){if(input[i]<min){}}return min;}", "n_tokens": 32, "n_pass": [299, 37, 29]}

Minimal simplified code:
float min(float input){for(;;){if(input[i]<min){}}return min;}

