
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/json-iterator__java/src/main/java/com/jsoniter/any/ListWrapperAny_next.java
method_name = next
method_body = @Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }
predict, score, loss = next, 0.9699442982673645, 0.032921068370342255

Trace of simplified code(s):
{"time": "2021-02-14 16:44:34.008392", "score": "0.9699", "loss": "0.0329", "code": "@Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 92, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 16:44:37.084685", "score": "0.9945", "loss": "0.0061", "code": "Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 87, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 16:44:40.580203", "score": "0.9952", "loss": "0.0053", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 84, "n_pass": [98, 3, 3]}
{"time": "2021-02-14 16:44:43.260182", "score": "0.9971", "loss": "0.003", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 81, "n_pass": [108, 4, 4]}
{"time": "2021-02-14 16:44:45.901747", "score": "0.9172", "loss": "0.0939", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } returnget(index++); }", "n_tokens": 78, "n_pass": [115, 5, 5]}
{"time": "2021-02-14 16:44:53.495790", "score": "0.8941", "loss": "0.1165", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 76, "n_pass": [198, 6, 6]}
{"time": "2021-02-14 16:44:56.140404", "score": "0.8941", "loss": "0.1165", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 74, "n_pass": [200, 7, 7]}
{"time": "2021-02-14 16:44:59.992954", "score": "0.8941", "loss": "0.1165", "code": "Any next(){ if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 73, "n_pass": [208, 8, 8]}
{"time": "2021-02-14 16:45:02.636185", "score": "0.8941", "loss": "0.1165", "code": "Any next(){if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 72, "n_pass": [210, 9, 9]}
{"time": "2021-02-14 16:45:05.300510", "score": "0.8941", "loss": "0.1165", "code": "Any next(){if(cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 71, "n_pass": [212, 10, 10]}
{"time": "2021-02-14 16:45:07.954380", "score": "0.8941", "loss": "0.1165", "code": "Any next(){if(cache== null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 70, "n_pass": [215, 11, 11]}
{"time": "2021-02-14 16:45:10.593557", "score": "0.8319", "loss": "0.1942", "code": "Any next(){if(cache= null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 69, "n_pass": [216, 12, 12]}
{"time": "2021-02-14 16:45:13.267740", "score": "0.8319", "loss": "0.1942", "code": "Any next(){if(cache=null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 68, "n_pass": [218, 13, 13]}
{"time": "2021-02-14 16:45:15.929926", "score": "0.8319", "loss": "0.1942", "code": "Any next(){if(cache=null){  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 67, "n_pass": [221, 14, 14]}
{"time": "2021-02-14 16:45:18.571859", "score": "0.8319", "loss": "0.1942", "code": "Any next(){if(cache=null){ new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 66, "n_pass": [223, 15, 15]}
{"time": "2021-02-14 16:45:21.229859", "score": "0.8319", "loss": "0.1942", "code": "Any next(){if(cache=null){new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 65, "n_pass": [224, 16, 16]}
{"time": "2021-02-14 16:45:23.957879", "score": "0.8532", "loss": "0.1705", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 64, "n_pass": [229, 17, 17]}
{"time": "2021-02-14 16:45:26.601102", "score": "0.4791", "loss": "0.8672", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (index= cache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 62, "n_pass": [237, 18, 18]}
{"time": "2021-02-14 16:45:29.263116", "score": "0.846", "loss": "0.1959", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexcache.size()) { (Any.wrap(val.get(index))); } (index); }", "n_tokens": 60, "n_pass": [238, 19, 19]}
{"time": "2021-02-14 16:45:34.528993", "score": "0.7662", "loss": "0.3049", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexcache.size()) { (wrap(val.get(index))); } (index); }", "n_tokens": 58, "n_pass": [244, 21, 20]}
{"time": "2021-02-14 16:45:37.172887", "score": "0.7828", "loss": "0.2728", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 56, "n_pass": [246, 22, 21]}
{"time": "2021-02-14 16:45:41.022675", "score": "0.7653", "loss": "0.297", "code": "Any next(){if(cachenull){new ArrayList<>(); } if (indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 55, "n_pass": [264, 23, 22]}
{"time": "2021-02-14 16:45:43.657131", "score": "0.8387", "loss": "0.1874", "code": "Any next(){if(cache){new ArrayList<>(); } if (indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 54, "n_pass": [265, 24, 23]}
{"time": "2021-02-14 16:45:54.357229", "score": "0.8387", "loss": "0.1874", "code": "Any next(){if(cache){new ArrayList<>();} if (indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 53, "n_pass": [339, 26, 24]}
{"time": "2021-02-14 16:45:56.995584", "score": "0.8387", "loss": "0.1874", "code": "Any next(){if(cache){new ArrayList<>();}if (indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 52, "n_pass": [341, 27, 25]}
{"time": "2021-02-14 16:45:59.616379", "score": "0.8387", "loss": "0.1874", "code": "Any next(){if(cache){new ArrayList<>();}if(indexcache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 51, "n_pass": [343, 28, 26]}
{"time": "2021-02-14 16:46:02.238514", "score": "0.9111", "loss": "0.0986", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()) { (wrap(get(index))); } (index); }", "n_tokens": 50, "n_pass": [345, 29, 27]}
{"time": "2021-02-14 16:46:07.492144", "score": "0.9111", "loss": "0.0986", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){ (wrap(get(index))); } (index); }", "n_tokens": 49, "n_pass": [352, 31, 28]}
{"time": "2021-02-14 16:46:10.138146", "score": "0.9111", "loss": "0.0986", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){(wrap(get(index))); } (index); }", "n_tokens": 48, "n_pass": [354, 32, 29]}
{"time": "2021-02-14 16:46:12.768584", "score": "0.9607", "loss": "0.043", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){((get(index))); } (index); }", "n_tokens": 47, "n_pass": [356, 33, 30]}
{"time": "2021-02-14 16:46:15.390675", "score": "0.9619", "loss": "0.0417", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){(((index))); } (index); }", "n_tokens": 46, "n_pass": [358, 34, 31]}
{"time": "2021-02-14 16:46:18.020112", "score": "0.9619", "loss": "0.0417", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){(((index)));} (index); }", "n_tokens": 45, "n_pass": [365, 35, 32]}
{"time": "2021-02-14 16:46:20.639060", "score": "0.9619", "loss": "0.0417", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){(((index)));}(index); }", "n_tokens": 44, "n_pass": [367, 36, 33]}
{"time": "2021-02-14 16:46:23.273505", "score": "0.9619", "loss": "0.0417", "code": "Any next(){if(cache){new ArrayList<>();}if(cache.size()){(((index)));}(index);}", "n_tokens": 43, "n_pass": [372, 37, 34]}

Minimal simplified code:
Any next(){if(cache){new ArrayList<>();}if(cache.size()){(((index)));}(index);}

