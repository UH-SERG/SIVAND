
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rakam-io__rakam/rakam-parser/src/main/java/com/facebook/presto/sql/RakamSqlFormatter_visitSingleColumn.java
method_name = visitSingleColumn
method_body = @Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }
predict, score, loss = visitSingleColumn, 0.9999138116836548, 0.0003644755925051868

Trace of simplified code(s):
{"time": "2021-02-14 20:34:27.392925", "score": "0.9999", "loss": "0.0004", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 110, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 20:34:30.489352", "score": "0.9999", "loss": "0.0004", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 103, "n_pass": [49, 2, 2]}
{"time": "2021-02-14 20:34:33.155265", "score": "0.9999", "loss": "0.0003", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 96, "n_pass": [54, 3, 3]}
{"time": "2021-02-14 20:34:35.820073", "score": "0.9999", "loss": "0.0003", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.getAlias(), columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 89, "n_pass": [56, 4, 4]}
{"time": "2021-02-14 20:34:38.935702", "score": "0.9999", "loss": "0.0003", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node. columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 85, "n_pass": [96, 5, 5]}
{"time": "2021-02-14 20:34:41.592406", "score": "0.9999", "loss": "0.0003", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 81, "n_pass": [97, 6, 6]}
{"time": "2021-02-14 20:34:44.249441", "score": "0.9998", "loss": "0.001", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 78, "n_pass": [102, 7, 7]}
{"time": "2021-02-14 20:34:47.326281", "score": "0.9996", "loss": "0.0028", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 75, "n_pass": [109, 8, 8]}
{"time": "2021-02-14 20:34:50.013156", "score": "0.9999", "loss": "0.0007", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionqueryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 72, "n_pass": [112, 9, 9]}
{"time": "2021-02-14 20:34:52.670715", "score": "0.9999", "loss": "0.0005", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 69, "n_pass": [113, 10, 10]}
{"time": "2021-02-14 20:34:55.326981", "score": "0.9999", "loss": "0.0007", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node.isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 65, "n_pass": [117, 11, 11]}
{"time": "2021-02-14 20:34:57.980606", "score": "0.9999", "loss": "0.0009", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 61, "n_pass": [118, 12, 12]}
{"time": "2021-02-14 20:35:01.049471", "score": "0.9999", "loss": "0.001", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 58, "n_pass": [133, 13, 13]}
{"time": "2021-02-14 20:35:06.024745", "score": "0.9999", "loss": "0.0007", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 56, "n_pass": [193, 14, 14]}
{"time": "2021-02-14 20:35:08.669670", "score": "0.9999", "loss": "0.0006", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression(queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 54, "n_pass": [195, 15, 15]}
{"time": "2021-02-14 20:35:11.315388", "score": "0.9999", "loss": "0.0005", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression( escapeIdentifier)); } return null; }", "n_tokens": 52, "n_pass": [196, 16, 16]}
{"time": "2021-02-14 20:35:13.951983", "score": "0.9999", "loss": "0.0005", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } return null; }", "n_tokens": 50, "n_pass": [197, 17, 17]}
{"time": "2021-02-14 20:35:16.588043", "score": "0.9999", "loss": "0.0004", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 48, "n_pass": [201, 18, 18]}
{"time": "2021-02-14 20:35:19.233122", "score": "0.9999", "loss": "0.0004", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 46, "n_pass": [202, 19, 19]}
{"time": "2021-02-14 20:35:21.897860", "score": "0.9999", "loss": "0.0004", "code": " Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 45, "n_pass": [204, 20, 20]}
{"time": "2021-02-14 20:35:24.556724", "score": "0.9999", "loss": "0.0004", "code": "Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 44, "n_pass": [205, 21, 21]}
{"time": "2021-02-14 20:35:33.344185", "score": "0.9999", "loss": "0.0004", "code": "Void visitSingleColumn(SingleColumn node,Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 43, "n_pass": [268, 22, 22]}
{"time": "2021-02-14 20:35:35.980406", "score": "0.9999", "loss": "0.0004", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){ (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 42, "n_pass": [272, 23, 23]}
{"time": "2021-02-14 20:35:38.603214", "score": "0.9999", "loss": "0.0004", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){(formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 41, "n_pass": [274, 24, 24]}
{"time": "2021-02-14 20:35:41.233541", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier)); if (node) { append(formatExpression()); }  }", "n_tokens": 40, "n_pass": [276, 25, 25]}
{"time": "2021-02-14 20:35:43.885297", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if (node) { append(formatExpression()); }  }", "n_tokens": 39, "n_pass": [282, 26, 26]}
{"time": "2021-02-14 20:35:46.530699", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node) { append(formatExpression()); }  }", "n_tokens": 38, "n_pass": [284, 27, 27]}
{"time": "2021-02-14 20:35:49.151471", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){ append(formatExpression()); }  }", "n_tokens": 37, "n_pass": [288, 28, 28]}
{"time": "2021-02-14 20:35:51.771566", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){append(formatExpression()); }  }", "n_tokens": 36, "n_pass": [290, 29, 29]}
{"time": "2021-02-14 20:35:54.385629", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression()); }  }", "n_tokens": 35, "n_pass": [291, 30, 30]}
{"time": "2021-02-14 20:35:57.022642", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}  }", "n_tokens": 34, "n_pass": [298, 31, 31]}
{"time": "2021-02-14 20:35:59.638142", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());} }", "n_tokens": 33, "n_pass": [300, 32, 32]}
{"time": "2021-02-14 20:36:02.253237", "score": "0.9999", "loss": "0.0003", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}}", "n_tokens": 32, "n_pass": [301, 33, 33]}

Minimal simplified code:
Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}}

