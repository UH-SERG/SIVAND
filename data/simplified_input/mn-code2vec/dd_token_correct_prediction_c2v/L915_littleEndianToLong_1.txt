
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/util/Pack_littleEndianToLong.java
method_name = littleEndianToLong
method_body = public static void littleEndianToLong(byte[] bs, int off, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }
predict, score, loss = littleEndianToLong, 0.8797464966773987, 0.5733224749565125

Trace of simplified code(s):
{"time": "2021-02-16 11:00:33.921579", "score": "0.8797", "loss": "0.5733", "code": "public static void littleEndianToLong(byte[] bs, int off, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 84, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 11:00:36.866270", "score": "0.7435", "loss": "0.9817", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 79, "n_pass": [47, 2, 2]}
{"time": "2021-02-16 11:00:39.431651", "score": "0.6303", "loss": "1.3199", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 74, "n_pass": [52, 3, 3]}
{"time": "2021-02-16 11:00:44.976646", "score": "0.5868", "loss": "1.2209", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 71, "n_pass": [96, 5, 4]}
{"time": "2021-02-16 11:00:47.578455", "score": "0.8133", "loss": "0.5653", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 68, "n_pass": [103, 6, 5]}
{"time": "2021-02-16 11:00:50.143557", "score": "0.8133", "loss": "0.5653", "code": "static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 66, "n_pass": [109, 7, 6]}
{"time": "2021-02-16 11:00:52.715819", "score": "0.8133", "loss": "0.5653", "code": "void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 64, "n_pass": [110, 8, 7]}
{"time": "2021-02-16 11:00:55.649287", "score": "0.7826", "loss": "0.6926", "code": "void littleEndianToLong(byte[] bs, long ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 62, "n_pass": [117, 9, 8]}
{"time": "2021-02-16 11:01:02.828490", "score": "0.7826", "loss": "0.6926", "code": "void littleEndianToLong(byte[] bs, long ns){ for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 61, "n_pass": [190, 10, 9]}
{"time": "2021-02-16 11:01:05.393864", "score": "0.7826", "loss": "0.6926", "code": "void littleEndianToLong(byte[] bs, long ns){for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 60, "n_pass": [192, 11, 10]}
{"time": "2021-02-16 11:01:07.938460", "score": "0.7826", "loss": "0.6926", "code": "void littleEndianToLong(byte[] bs, long ns){for(int i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 59, "n_pass": [194, 12, 11]}
{"time": "2021-02-16 11:01:10.497153", "score": "0.8372", "loss": "0.8242", "code": "void littleEndianToLong(byte[] bs, long ns){for( i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 58, "n_pass": [196, 13, 12]}
{"time": "2021-02-16 11:01:13.032447", "score": "0.8372", "loss": "0.8242", "code": "void littleEndianToLong(byte[] bs, long ns){for(i = 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 57, "n_pass": [197, 14, 13]}
{"time": "2021-02-16 11:01:15.568052", "score": "0.8372", "loss": "0.8242", "code": "void littleEndianToLong(byte[] bs, long ns){for(i= 0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 56, "n_pass": [199, 15, 14]}
{"time": "2021-02-16 11:01:18.121729", "score": "0.8372", "loss": "0.8242", "code": "void littleEndianToLong(byte[] bs, long ns){for(i=0;; ++i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 55, "n_pass": [201, 16, 15]}
{"time": "2021-02-16 11:01:20.656143", "score": "0.8163", "loss": "0.8894", "code": "void littleEndianToLong(byte[] bs, long ns){for(i=0;;+i) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 53, "n_pass": [205, 17, 16]}
{"time": "2021-02-16 11:01:23.218381", "score": "0.8381", "loss": "0.7895", "code": "void littleEndianToLong(byte[] bs, long ns){for(i=0;;) { ns[i] = littleEndianToLong(off); off += 8; } }", "n_tokens": 51, "n_pass": [206, 18, 17]}
{"time": "2021-02-16 11:01:25.755552", "score": "0.87", "loss": "0.6824", "code": "void littleEndianToLong(byte[] bs, long ns){for(i=0;;) { ns[i] =(off); off += 8; } }", "n_tokens": 49, "n_pass": [212, 19, 18]}
{"time": "2021-02-16 11:01:28.295479", "score": "0.2459", "loss": "2.8075", "code": "void littleEndianToLong(byte[] bs, long ns){for(i=0;;) { ns[i] =(off); off= 8; } }", "n_tokens": 47, "n_pass": [216, 20, 19]}
{"time": "2021-02-16 11:01:34.135286", "score": "0.2459", "loss": "2.8075", "code": "void littleEndianToLong(byte[]bs, long ns){for(i=0;;) { ns[i] =(off); off= 8; } }", "n_tokens": 46, "n_pass": [228, 22, 20]}
{"time": "2021-02-16 11:01:36.670247", "score": "0.2459", "loss": "2.8075", "code": "void littleEndianToLong(byte[]bs,long ns){for(i=0;;) { ns[i] =(off); off= 8; } }", "n_tokens": 45, "n_pass": [231, 23, 21]}
{"time": "2021-02-16 11:01:39.217489", "score": "0.3508", "loss": "2.4215", "code": "void littleEndianToLong(byte[]bs,long ns){for(i0;;) { ns[i] =(off); off= 8; } }", "n_tokens": 44, "n_pass": [240, 24, 22]}
{"time": "2021-02-16 11:01:41.736736", "score": "0.3508", "loss": "2.4215", "code": "void littleEndianToLong(byte[]bs,long ns){for(i;;) { ns[i] =(off); off= 8; } }", "n_tokens": 43, "n_pass": [241, 25, 23]}
{"time": "2021-02-16 11:01:47.597879", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i] =(off); off= 8; } }", "n_tokens": 42, "n_pass": [272, 27, 24]}
{"time": "2021-02-16 11:01:56.576654", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i]=(off); off= 8; } }", "n_tokens": 41, "n_pass": [331, 29, 25]}
{"time": "2021-02-16 11:01:59.510848", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i]=(off);off= 8; } }", "n_tokens": 40, "n_pass": [336, 30, 26]}
{"time": "2021-02-16 11:02:02.061237", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i]=(off);off=8; } }", "n_tokens": 39, "n_pass": [339, 31, 27]}
{"time": "2021-02-16 11:02:04.592367", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i]=(off);off=8;} }", "n_tokens": 38, "n_pass": [342, 32, 28]}
{"time": "2021-02-16 11:02:07.129861", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;) { ns[i]=(off);off=8;}}", "n_tokens": 37, "n_pass": [344, 33, 29]}
{"time": "2021-02-16 11:02:10.442212", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;){ ns[i]=(off);off=8;}}", "n_tokens": 36, "n_pass": [365, 34, 30]}
{"time": "2021-02-16 11:02:12.966337", "score": "0.3679", "loss": "2.3195", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;){ns[i]=(off);off=8;}}", "n_tokens": 35, "n_pass": [367, 35, 31]}

Minimal simplified code:
void littleEndianToLong(byte[]bs,long ns){for(;;){ns[i]=(off);off=8;}}

