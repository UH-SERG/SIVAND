
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/test/java/com/questdb/net/ha/AbstractJournalTest_setUp.java
method_name = setUp
method_body = @Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, "origin"); slave = getFactory().writer(Quote.class, "slave"); master = getFactory().writer(Quote.class, "master"); journalClientStateProducer = new JournalClientStateProducer(); journalClientStateConsumer = new JournalClientStateConsumer(); this.masterReader = getFactory().reader(Quote.class, "master"); journalDeltaProducer = new JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }
predict, score, loss = setUp, 0.9551747441291809, 0.046976495534181595

Trace of simplified code(s):
{"time": "2021-02-15 02:20:15.603694", "score": "0.9298", "loss": "0.0752", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave = getFactory().writer(Quote.class, \"slave\"); master = getFactory().writer(Quote.class, \"master\"); journalClientStateProducer = new JournalClientStateProducer(); journalClientStateConsumer = new JournalClientStateConsumer(); this.masterReader = getFactory().reader(Quote.class, \"master\"); journalDeltaProducer = new JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 161, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 02:20:18.270710", "score": "0.9948", "loss": "0.0054", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave journalClientStateProducer = new JournalClientStateProducer(); journalClientStateConsumer = new JournalClientStateConsumer(); this.masterReader = getFactory().reader(Quote.class, \"master\"); journalDeltaProducer = new JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 121, "n_pass": [9, 2, 2]}
{"time": "2021-02-15 02:20:20.957685", "score": "0.9961", "loss": "0.004", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave ; this.masterReader = getFactory().reader(Quote.class, \"master\"); journalDeltaProducer = new JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 101, "n_pass": [18, 3, 3]}
{"time": "2021-02-15 02:20:23.658919", "score": "0.9963", "loss": "0.0039", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\"); journalDeltaProducer = new JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 96, "n_pass": [63, 4, 4]}
{"time": "2021-02-15 02:20:26.334235", "score": "0.9954", "loss": "0.0048", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\");  JournalDeltaProducer(masterReader); journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 91, "n_pass": [67, 5, 5]}
{"time": "2021-02-15 02:20:29.073498", "score": "0.9973", "loss": "0.0028", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\"); ; journalDeltaConsumer = new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 86, "n_pass": [68, 6, 6]}
{"time": "2021-02-15 02:20:31.713289", "score": "0.9961", "loss": "0.0042", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\");  new JournalDeltaConsumer(slave); channel = new MockByteChannel(); }", "n_tokens": 81, "n_pass": [69, 7, 7]}
{"time": "2021-02-15 02:20:34.429012", "score": "0.6288", "loss": "0.4832", "code": "@Before public void setUp() throws Exception { origin = getFactory().writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\");  new JournalDeltaConsumer(slave); channelMockByteChannel(); }", "n_tokens": 76, "n_pass": [72, 8, 8]}
{"time": "2021-02-15 02:20:42.403970", "score": "0.5689", "loss": "0.5845", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class, \"origin\"); slave  = getFactory().reader(Quote.class, \"master\");  new JournalDeltaConsumer(slave); channelMockByteChannel(); }", "n_tokens": 71, "n_pass": [78, 11, 9]}
{"time": "2021-02-15 02:20:45.076903", "score": "0.6346", "loss": "0.4739", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  new JournalDeltaConsumer(slave); channelMockByteChannel(); }", "n_tokens": 66, "n_pass": [80, 12, 10]}
{"time": "2021-02-15 02:20:53.495017", "score": "0.6709", "loss": "0.4092", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  (slave); channelMockByteChannel(); }", "n_tokens": 63, "n_pass": [131, 15, 11]}
{"time": "2021-02-15 02:20:56.128993", "score": "0.6764", "loss": "0.4002", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  ; channelMockByteChannel(); }", "n_tokens": 60, "n_pass": [132, 16, 12]}
{"time": "2021-02-15 02:20:58.776120", "score": "0.8916", "loss": "0.1184", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  MockByteChannel(); }", "n_tokens": 57, "n_pass": [133, 17, 13]}
{"time": "2021-02-15 02:21:01.408213", "score": "0.7534", "loss": "0.2895", "code": "@Before public void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  ; }", "n_tokens": 54, "n_pass": [134, 18, 14]}
{"time": "2021-02-15 02:21:06.711177", "score": "0.7534", "loss": "0.2895", "code": "@Before void setUp() throws Exception { origin =writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  ; }", "n_tokens": 52, "n_pass": [137, 20, 15]}
{"time": "2021-02-15 02:21:09.743156", "score": "0.5829", "loss": "0.6976", "code": "@Before void setUp() throws Exception { originwriter(Quote.class); slave  = getFactory().reader(Quote.class, \"master\");  ; }", "n_tokens": 50, "n_pass": [145, 21, 16]}
{"time": "2021-02-15 02:21:12.406554", "score": "0.5829", "loss": "0.6976", "code": "@Before void setUp() throws Exception { originwriter(Quote.class); slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 47, "n_pass": [156, 22, 17]}
{"time": "2021-02-15 02:21:18.400465", "score": "0.7301", "loss": "0.33", "code": "@Before void setUp() throws Exception {writer(Quote.class); slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 45, "n_pass": [165, 24, 18]}
{"time": "2021-02-15 02:21:27.940545", "score": "0.8272", "loss": "0.1925", "code": "@Before void setUp() throws Exception {(Quote.class); slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 44, "n_pass": [220, 26, 19]}
{"time": "2021-02-15 02:21:30.586619", "score": "0.8333", "loss": "0.1849", "code": "@Before void setUp() throws Exception {(Quoteclass); slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 43, "n_pass": [222, 27, 20]}
{"time": "2021-02-15 02:21:33.234857", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp() throws Exception {(Quote); slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 42, "n_pass": [223, 28, 21]}
{"time": "2021-02-15 02:21:36.328738", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp() throws Exception {(Quote);slave  = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 41, "n_pass": [226, 29, 22]}
{"time": "2021-02-15 02:21:38.997770", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp() throws Exception {(Quote);slave = getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 40, "n_pass": [228, 30, 23]}
{"time": "2021-02-15 02:21:41.651786", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp() throws Exception {(Quote);slave= getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 39, "n_pass": [229, 31, 24]}
{"time": "2021-02-15 02:21:44.287267", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp() throws Exception {(Quote);slave=getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 38, "n_pass": [231, 32, 25]}
{"time": "2021-02-15 02:21:48.576407", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp()throws Exception {(Quote);slave=getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 37, "n_pass": [249, 33, 26]}
{"time": "2021-02-15 02:21:51.262440", "score": "0.822", "loss": "0.1991", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote.class, \"master\"); }", "n_tokens": 36, "n_pass": [253, 34, 27]}
{"time": "2021-02-15 02:21:59.274362", "score": "0.8894", "loss": "0.1192", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quoteclass, \"master\"); }", "n_tokens": 35, "n_pass": [306, 36, 28]}
{"time": "2021-02-15 02:22:01.914928", "score": "0.6932", "loss": "0.3769", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote, \"master\"); }", "n_tokens": 34, "n_pass": [307, 37, 29]}
{"time": "2021-02-15 02:22:04.578603", "score": "0.6932", "loss": "0.3769", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote,\"master\"); }", "n_tokens": 33, "n_pass": [309, 38, 30]}
{"time": "2021-02-15 02:22:07.331609", "score": "0.687", "loss": "0.3848", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote,\"\"); }", "n_tokens": 32, "n_pass": [311, 39, 31]}
{"time": "2021-02-15 02:22:10.004305", "score": "0.687", "loss": "0.3848", "code": "@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote,\"\");}", "n_tokens": 31, "n_pass": [315, 40, 32]}

Minimal simplified code:
@Before void setUp()throws Exception{(Quote);slave=getFactory().reader(Quote,"");}

