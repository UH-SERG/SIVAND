
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/udacity__ud851-Sunshine/S11.03-Exercise-DetailLayoutAndDataBinding/app/src/main/java/com/example/android/sunshine/data/WeatherProvider_query.java
method_name = query
method_body = @Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + " = ? ", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException("Unknown uri: " + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }
predict, score, loss = query, 0.9539642930030823, 0.2279166281223297

Trace of simplified code(s):
{"time": "2021-02-14 18:51:31.101992", "score": "0.9441", "loss": "0.2784", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + \" = ? \", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 270, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 18:51:33.810119", "score": "0.926", "loss": "0.3489", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 202, "n_pass": [10, 2, 2]}
{"time": "2021-02-14 18:51:36.637440", "score": "0.9909", "loss": "0.0146", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 193, "n_pass": [74, 3, 3]}
{"time": "2021-02-14 18:51:39.334050", "score": "0.9967", "loss": "0.0069", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 184, "n_pass": [80, 4, 4]}
{"time": "2021-02-14 18:51:42.051409", "score": "0.9959", "loss": "0.0078", "code": "@Override public Cursor query(@NonNull Uri uri,String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 176, "n_pass": [84, 5, 5]}
{"time": "2021-02-14 18:51:44.782259", "score": "0.9965", "loss": "0.0045", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 172, "n_pass": [148, 6, 6]}
{"time": "2021-02-14 18:51:47.485470", "score": "0.9972", "loss": "0.0049", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 168, "n_pass": [157, 7, 7]}
{"time": "2021-02-14 18:51:50.181683", "score": "0.9961", "loss": "0.0068", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 164, "n_pass": [161, 8, 8]}
{"time": "2021-02-14 18:51:52.883803", "score": "0.9989", "loss": "0.0017", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 160, "n_pass": [168, 9, 9]}
{"time": "2021-02-14 18:51:55.593387", "score": "0.997", "loss": "0.0051", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 156, "n_pass": [169, 10, 10]}
{"time": "2021-02-14 18:51:58.288252", "score": "0.9985", "loss": "0.002", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 152, "n_pass": [171, 11, 11]}
{"time": "2021-02-14 18:52:01.011524", "score": "0.9982", "loss": "0.0033", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 148, "n_pass": [172, 12, 12]}
{"time": "2021-02-14 18:52:03.695805", "score": "0.9987", "loss": "0.0016", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 144, "n_pass": [174, 13, 13]}
{"time": "2021-02-14 18:52:06.406901", "score": "0.9989", "loss": "0.0014", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 139, "n_pass": [177, 14, 14]}
{"time": "2021-02-14 18:52:09.098630", "score": "0.9944", "loss": "0.0095", "code": " Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 135, "n_pass": [185, 15, 15]}
{"time": "2021-02-14 18:52:11.787148", "score": "0.9985", "loss": "0.0019", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 131, "n_pass": [188, 16, 16]}
{"time": "2021-02-14 18:52:14.479268", "score": "0.998", "loss": "0.0033", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractprojection,null,sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 127, "n_pass": [200, 17, 17]}
{"time": "2021-02-14 18:52:17.191820", "score": "0.9984", "loss": "0.0023", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 123, "n_pass": [208, 18, 18]}
{"time": "2021-02-14 18:52:19.890047", "score": "0.998", "loss": "0.0028", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 119, "n_pass": [230, 19, 19]}
{"time": "2021-02-14 18:52:23.752272", "score": "0.9965", "loss": "0.0046", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 117, "n_pass": [315, 20, 20]}
{"time": "2021-02-14 18:52:26.448931", "score": "0.9983", "loss": "0.0026", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 115, "n_pass": [323, 21, 21]}
{"time": "2021-02-14 18:52:29.119377", "score": "0.9987", "loss": "0.0019", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 113, "n_pass": [326, 22, 22]}
{"time": "2021-02-14 18:52:31.791402", "score": "0.9986", "loss": "0.002", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 111, "n_pass": [330, 23, 23]}
{"time": "2021-02-14 18:52:34.464014", "score": "0.9978", "loss": "0.0034", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  } UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 109, "n_pass": [332, 24, 24]}
{"time": "2021-02-14 18:52:37.154530", "score": "0.9983", "loss": "0.0023", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 107, "n_pass": [333, 25, 25]}
{"time": "2021-02-14 18:52:39.819650", "score": "0.9983", "loss": "0.0024", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\"uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 105, "n_pass": [335, 26, 26]}
{"time": "2021-02-14 18:52:42.491777", "score": "0.9983", "loss": "0.0024", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 103, "n_pass": [336, 27, 27]}
{"time": "2021-02-14 18:52:45.159611", "score": "0.9963", "loss": "0.0064", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); return cursor; }", "n_tokens": 100, "n_pass": [341, 28, 28]}
{"time": "2021-02-14 18:52:47.822309", "score": "0.9961", "loss": "0.0055", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 97, "n_pass": [344, 29, 29]}
{"time": "2021-02-14 18:52:51.336527", "score": "0.9897", "loss": "0.0122", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 95, "n_pass": [351, 30, 30]}
{"time": "2021-02-14 18:52:54.022946", "score": "0.9904", "loss": "0.0115", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 93, "n_pass": [357, 31, 31]}
{"time": "2021-02-14 18:52:56.712852", "score": "0.9894", "loss": "0.0124", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 91, "n_pass": [358, 32, 32]}
{"time": "2021-02-14 18:52:59.375914", "score": "0.9894", "loss": "0.0124", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 89, "n_pass": [359, 33, 33]}
{"time": "2021-02-14 18:53:02.035126", "score": "0.9962", "loss": "0.0064", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 87, "n_pass": [361, 34, 34]}
{"time": "2021-02-14 18:53:04.703782", "score": "0.9961", "loss": "0.0069", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { }; cursor(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 85, "n_pass": [367, 35, 35]}
{"time": "2021-02-14 18:53:07.405758", "score": "0.9966", "loss": "0.0057", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 83, "n_pass": [379, 36, 36]}
{"time": "2021-02-14 18:53:21.481975", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 82, "n_pass": [498, 37, 37]}
{"time": "2021-02-14 18:53:24.158913", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder); }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 81, "n_pass": [502, 38, 38]}
{"time": "2021-02-14 18:53:26.817930", "score": "0.9968", "loss": "0.0055", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 80, "n_pass": [503, 39, 39]}
{"time": "2021-02-14 18:53:29.472293", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 79, "n_pass": [507, 40, 40]}
{"time": "2021-02-14 18:53:32.122995", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+ uri); }setNotificationUri(getContext); ; }", "n_tokens": 78, "n_pass": [509, 41, 41]}
{"time": "2021-02-14 18:53:34.775997", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri); }setNotificationUri(getContext); ; }", "n_tokens": 77, "n_pass": [511, 42, 42]}
{"time": "2021-02-14 18:53:37.461567", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); ; }", "n_tokens": 76, "n_pass": [515, 43, 43]}
{"time": "2021-02-14 18:53:40.128153", "score": "0.9967", "loss": "0.0056", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 74, "n_pass": [519, 44, 44]}
{"time": "2021-02-14 18:53:42.813846", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 73, "n_pass": [521, 45, 45]}
{"time": "2021-02-14 18:53:46.716807", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 72, "n_pass": [528, 46, 46]}
{"time": "2021-02-14 18:53:49.373894", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 71, "n_pass": [534, 47, 47]}
{"time": "2021-02-14 18:53:52.029611", "score": "0.9967", "loss": "0.0056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 70, "n_pass": [539, 48, 48]}
{"time": "2021-02-14 18:53:54.686938", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)) { case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 69, "n_pass": [543, 49, 49]}
{"time": "2021-02-14 18:53:57.341400", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){ case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 68, "n_pass": [548, 50, 50]}
{"time": "2021-02-14 18:54:00.014506", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE: {String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 67, "n_pass": [550, 51, 51]}
{"time": "2021-02-14 18:54:02.697061", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[] selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 66, "n_pass": [555, 52, 52]}
{"time": "2021-02-14 18:54:05.355586", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments = new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 65, "n_pass": [560, 53, 53]}
{"time": "2021-02-14 18:54:08.020246", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments= new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 64, "n_pass": [562, 54, 54]}
{"time": "2021-02-14 18:54:10.675454", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[] { };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 63, "n_pass": [564, 55, 55]}
{"time": "2021-02-14 18:54:13.332002", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{ };(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 62, "n_pass": [570, 56, 56]}
{"time": "2021-02-14 18:54:15.988008", "score": "0.9948", "loss": "0.0088", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 61, "n_pass": [572, 57, 57]}
{"time": "2021-02-14 18:54:20.680657", "score": "0.7655", "loss": "0.326", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}(getContext); }", "n_tokens": 60, "n_pass": [639, 58, 58]}
{"time": "2021-02-14 18:54:23.362094", "score": "0.7655", "loss": "0.326", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(\"\"+uri);}(getContext);}", "n_tokens": 59, "n_pass": [644, 59, 59]}

Minimal simplified code:
Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};(sortOrder);}(""+uri);}(getContext);}

