
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/XiaoMi__linden/linden-core/src/main/java/com/xiaomi/linden/lucene/query/flexiblequery/FlexibleWeight_explain.java
method_name = explain
method_body = @Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, "no matching term"); }
predict, score, loss = explain, 0.9999980926513672, 2.0265558760002023e-06

Trace of simplified code(s):
{"time": "2021-02-14 17:37:18.783229", "score": "1.0", "loss": "0.0", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 165, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 17:37:21.516751", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 160, "n_pass": [92, 2, 2]}
{"time": "2021-02-14 17:37:24.186934", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 155, "n_pass": [93, 3, 3]}
{"time": "2021-02-14 17:37:27.281755", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 150, "n_pass": [97, 4, 4]}
{"time": "2021-02-14 17:37:29.970918", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 145, "n_pass": [102, 5, 5]}
{"time": "2021-02-14 17:37:32.640530", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 140, "n_pass": [104, 6, 6]}
{"time": "2021-02-14 17:37:35.321934", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 135, "n_pass": [111, 7, 7]}
{"time": "2021-02-14 17:37:37.990727", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 130, "n_pass": [116, 8, 8]}
{"time": "2021-02-14 17:37:40.649889", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 124, "n_pass": [120, 9, 9]}
{"time": "2021-02-14 17:37:43.347284", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 119, "n_pass": [126, 10, 10]}
{"time": "2021-02-14 17:37:46.423739", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextcontext.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 117, "n_pass": [199, 11, 11]}
{"time": "2021-02-14 17:37:49.111579", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 115, "n_pass": [200, 12, 12]}
{"time": "2021-02-14 17:37:51.795608", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  (doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 112, "n_pass": [210, 13, 13]}
{"time": "2021-02-14 17:37:54.469683", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 109, "n_pass": [211, 14, 14]}
{"time": "2021-02-14 17:37:57.127749", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 106, "n_pass": [221, 15, 15]}
{"time": "2021-02-14 17:37:59.776124", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 103, "n_pass": [222, 16, 16]}
{"time": "2021-02-14 17:38:02.442673", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 100, "n_pass": [224, 17, 17]}
{"time": "2021-02-14 17:38:05.094200", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 97, "n_pass": [225, 18, 18]}
{"time": "2021-02-14 17:38:07.754246", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 94, "n_pass": [229, 19, 19]}
{"time": "2021-02-14 17:38:10.409062", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 91, "n_pass": [233, 20, 20]}
{"time": "2021-02-14 17:38:13.467884", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 89, "n_pass": [243, 21, 21]}
{"time": "2021-02-14 17:38:23.699338", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 88, "n_pass": [350, 22, 22]}
{"time": "2021-02-14 17:38:26.351173", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 87, "n_pass": [360, 23, 23]}
{"time": "2021-02-14 17:38:29.034580", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 86, "n_pass": [362, 24, 24]}
{"time": "2021-02-14 17:38:31.692222", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 85, "n_pass": [366, 25, 25]}
{"time": "2021-02-14 17:38:34.343869", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){ ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 84, "n_pass": [368, 26, 26]}
{"time": "2021-02-14 17:38:36.983856", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 83, "n_pass": [369, 27, 27]}
{"time": "2021-02-14 17:38:39.636868", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){ if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 82, "n_pass": [370, 28, 28]}
{"time": "2021-02-14 17:38:42.292378", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 81, "n_pass": [371, 29, 29]}
{"time": "2021-02-14 17:38:44.952006", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 80, "n_pass": [373, 30, 30]}
{"time": "2021-02-14 17:38:47.615360", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc== doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 79, "n_pass": [376, 31, 31]}
{"time": "2021-02-14 17:38:50.293095", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc= doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 78, "n_pass": [377, 32, 32]}
{"time": "2021-02-14 17:38:52.938072", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 77, "n_pass": [379, 33, 33]}
{"time": "2021-02-14 17:38:55.620540", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){ FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 76, "n_pass": [382, 34, 34]}
{"time": "2021-02-14 17:38:58.266770", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 75, "n_pass": [384, 35, 35]}
{"time": "2021-02-14 17:39:00.931685", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){ strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 74, "n_pass": [385, 36, 36]}
{"time": "2021-02-14 17:39:03.579272", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){ strategy = scorer.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 72, "n_pass": [389, 37, 37]}
{"time": "2021-02-14 17:39:06.212047", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){ strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 70, "n_pass": [390, 38, 38]}
{"time": "2021-02-14 17:39:10.101785", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException {(reader().getLiveDocs());if(null){if(newDoc=doc){ strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 69, "n_pass": [413, 39, 39]}
{"time": "2021-02-14 17:39:12.747240", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc=doc){ strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 68, "n_pass": [417, 40, 40]}
{"time": "2021-02-14 17:39:15.504092", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDocdoc){ strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 67, "n_pass": [437, 41, 41]}
{"time": "2021-02-14 17:39:18.144637", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){ strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 66, "n_pass": [438, 42, 42]}
{"time": "2021-02-14 17:39:20.787790", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){ strategy =(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 64, "n_pass": [443, 43, 43]}
{"time": "2021-02-14 17:39:24.677981", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){ strategy(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 62, "n_pass": [491, 44, 44]}
{"time": "2021-02-14 17:39:28.577377", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 60, "n_pass": [538, 45, 45]}
{"time": "2021-02-14 17:39:35.864378", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);} }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 59, "n_pass": [613, 46, 46]}
{"time": "2021-02-14 17:39:38.497973", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 58, "n_pass": [615, 47, 47]}
{"time": "2021-02-14 17:39:41.136895", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}} ComplexExplanation(false, \"noterm\"); }", "n_tokens": 57, "n_pass": [617, 48, 48]}
{"time": "2021-02-14 17:39:43.771985", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}ComplexExplanation(false, \"noterm\"); }", "n_tokens": 56, "n_pass": [618, 49, 49]}
{"time": "2021-02-14 17:39:46.414091", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}ComplexExplanation(false,\"noterm\"); }", "n_tokens": 55, "n_pass": [623, 50, 50]}
{"time": "2021-02-14 17:39:49.049755", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}ComplexExplanation(false,\"term\"); }", "n_tokens": 54, "n_pass": [625, 51, 51]}
{"time": "2021-02-14 17:39:51.688787", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}ComplexExplanation(false,\"\"); }", "n_tokens": 53, "n_pass": [626, 52, 52]}
{"time": "2021-02-14 17:39:54.356127", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);( doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 52, "n_pass": [630, 53, 53]}
{"time": "2021-02-14 17:39:58.247098", "score": "1.0", "loss": "0.0", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);(doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 51, "n_pass": [669, 54, 54]}

Minimal simplified code:
Explanation explain(AtomicReaderContext doc)throws IOException{(reader().getLiveDocs());if(null){if(newDoc){(true);(doc);}}ComplexExplanation(false,"");}

