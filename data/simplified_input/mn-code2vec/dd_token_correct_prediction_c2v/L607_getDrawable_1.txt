
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/AndroidAlliance__EdgeEffectOverride/EdgeEffectOverride/src/main/java/uk/co/androidalliance/edgeeffectoverride/ContextWrapperEdgeEffect_getDrawable.java
method_name = getDrawable
method_body = @Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } else return super.getDrawable(resId); if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }
predict, score, loss = getDrawable, 0.9953039884567261, 0.01178976334631443

Trace of simplified code(s):
{"time": "2021-02-15 00:22:53.872549", "score": "0.9987", "loss": "0.0024", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } else return super.getDrawable(resId); if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 189, "n_pass": [1, 1, 1]}
{"time": "2021-02-15 00:22:56.610276", "score": "0.9853", "loss": "0.0564", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } else return super.getDrawable(resId); if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 177, "n_pass": [53, 2, 2]}
{"time": "2021-02-15 00:22:59.486296", "score": "0.8472", "loss": "0.7823", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 165, "n_pass": [56, 3, 3]}
{"time": "2021-02-15 00:23:02.284439", "score": "0.9398", "loss": "0.4264", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 159, "n_pass": [102, 4, 4]}
{"time": "2021-02-15 00:23:04.998780", "score": "0.9141", "loss": "0.6045", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 154, "n_pass": [105, 5, 5]}
{"time": "2021-02-15 00:23:07.804554", "score": "0.9449", "loss": "0.3986", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 148, "n_pass": [109, 6, 6]}
{"time": "2021-02-15 00:23:10.666479", "score": "0.9213", "loss": "0.5045", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 142, "n_pass": [115, 7, 7]}
{"time": "2021-02-15 00:23:13.385596", "score": "0.9271", "loss": "0.5291", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 136, "n_pass": [118, 8, 8]}
{"time": "2021-02-15 00:23:16.456441", "score": "0.9491", "loss": "0.2701", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 130, "n_pass": [121, 9, 9]}
{"time": "2021-02-15 00:23:19.158040", "score": "0.8956", "loss": "0.1795", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 124, "n_pass": [124, 10, 10]}
{"time": "2021-02-15 00:23:21.895876", "score": "0.8958", "loss": "0.1774", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 121, "n_pass": [189, 11, 11]}
{"time": "2021-02-15 00:23:24.643139", "score": "0.8973", "loss": "0.1751", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 118, "n_pass": [190, 12, 12]}
{"time": "2021-02-15 00:23:27.374229", "score": "0.9227", "loss": "0.1248", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 115, "n_pass": [196, 13, 13]}
{"time": "2021-02-15 00:23:30.144322", "score": "0.9233", "loss": "0.1224", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 112, "n_pass": [200, 14, 14]}
{"time": "2021-02-15 00:23:34.080708", "score": "0.9156", "loss": "0.1737", "code": "Drawable getDrawable() throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 109, "n_pass": [204, 15, 15]}
{"time": "2021-02-15 00:23:36.755385", "score": "0.9146", "loss": "0.1741", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 106, "n_pass": [208, 16, 16]}
{"time": "2021-02-15 00:23:39.429469", "score": "0.3858", "loss": "2.5344", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 103, "n_pass": [212, 17, 17]}
{"time": "2021-02-15 00:23:42.133695", "score": "0.7427", "loss": "0.7618", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) {  ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 100, "n_pass": [215, 18, 18]}
{"time": "2021-02-15 00:23:44.813655", "score": "0.7462", "loss": "0.8304", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 97, "n_pass": [216, 19, 19]}
{"time": "2021-02-15 00:23:47.462571", "score": "0.7163", "loss": "0.8819", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(R.drawableedge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 94, "n_pass": [220, 20, 20]}
{"time": "2021-02-15 00:23:50.248751", "score": "0.5808", "loss": "1.1815", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(R.drawableedge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 91, "n_pass": [223, 21, 21]}
{"time": "2021-02-15 00:23:58.705151", "score": "0.4138", "loss": "1.5938", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 88, "n_pass": [252, 24, 22]}
{"time": "2021-02-15 00:24:12.164592", "score": "0.4138", "loss": "1.5938", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){ this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 87, "n_pass": [344, 27, 23]}
{"time": "2021-02-15 00:24:14.849960", "score": "0.4138", "loss": "1.5938", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 86, "n_pass": [346, 28, 24]}
{"time": "2021-02-15 00:24:28.334766", "score": "0.4138", "loss": "1.5938", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 84, "n_pass": [365, 33, 25]}
{"time": "2021-02-15 00:24:31.139607", "score": "0.7135", "loss": "0.9706", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 82, "n_pass": [369, 34, 26]}
{"time": "2021-02-15 00:24:36.580693", "score": "0.7797", "loss": "0.7677", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } ; }", "n_tokens": 80, "n_pass": [374, 36, 27]}
{"time": "2021-02-15 00:24:39.247863", "score": "0.7797", "loss": "0.7677", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 78, "n_pass": [377, 37, 28]}
{"time": "2021-02-15 00:24:43.140656", "score": "0.7797", "loss": "0.7677", "code": "Drawable getDrawable()throws Resources.NotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 77, "n_pass": [384, 38, 29]}
{"time": "2021-02-15 00:24:46.227993", "score": "0.7475", "loss": "1.0512", "code": "Drawable getDrawable()throws ResourcesNotFoundException { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 76, "n_pass": [388, 39, 30]}
{"time": "2021-02-15 00:24:48.860699", "score": "0.5555", "loss": "1.1544", "code": "Drawable getDrawable()throws Resources { if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 75, "n_pass": [389, 40, 31]}
{"time": "2021-02-15 00:24:51.506634", "score": "0.5555", "loss": "1.1544", "code": "Drawable getDrawable()throws Resources{ if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 74, "n_pass": [390, 41, 32]}
{"time": "2021-02-15 00:24:54.173999", "score": "0.5555", "loss": "1.1544", "code": "Drawable getDrawable()throws Resources{if (resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 73, "n_pass": [392, 42, 33]}
{"time": "2021-02-15 00:24:56.809731", "score": "0.5555", "loss": "1.1544", "code": "Drawable getDrawable()throws Resources{if(resId == _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 72, "n_pass": [394, 43, 34]}
{"time": "2021-02-15 00:24:59.486511", "score": "0.5555", "loss": "1.1544", "code": "Drawable getDrawable()throws Resources{if(resId== _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 71, "n_pass": [397, 44, 35]}
{"time": "2021-02-15 00:25:02.124513", "score": "0.6478", "loss": "0.8026", "code": "Drawable getDrawable()throws Resources{if(resId= _edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 70, "n_pass": [398, 45, 36]}
{"time": "2021-02-15 00:25:04.794191", "score": "0.6478", "loss": "0.8026", "code": "Drawable getDrawable()throws Resources{if(resId=_edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 69, "n_pass": [400, 46, 37]}
{"time": "2021-02-15 00:25:07.473474", "score": "0.6478", "loss": "0.8026", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 68, "n_pass": [401, 47, 38]}
{"time": "2021-02-15 00:25:10.129337", "score": "0.6353", "loss": "0.7205", "code": "Drawable getDrawable()throws Resources{if(resId=edge){thisgetBaseContext.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 67, "n_pass": [406, 48, 39]}
{"time": "2021-02-15 00:25:12.843247", "score": "0.6588", "loss": "0.658", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resId =glow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 66, "n_pass": [407, 49, 40]}
{"time": "2021-02-15 00:25:18.162391", "score": "0.4516", "loss": "1.1123", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) { mGlowDrawable().getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 64, "n_pass": [415, 51, 41]}
{"time": "2021-02-15 00:25:20.820740", "score": "0.4725", "loss": "0.9734", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) { mGlowDrawable.getDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 62, "n_pass": [419, 52, 42]}
{"time": "2021-02-15 00:25:23.445673", "score": "0.3459", "loss": "1.3674", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) { mGlowDrawable(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 60, "n_pass": [420, 53, 43]}
{"time": "2021-02-15 00:25:35.248517", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);} if (ret= null) {setColorFilter(); } }", "n_tokens": 58, "n_pass": [459, 57, 44]}
{"time": "2021-02-15 00:25:52.246594", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if (ret= null) {setColorFilter(); } }", "n_tokens": 57, "n_pass": [538, 61, 45]}
{"time": "2021-02-15 00:25:54.907931", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if(ret= null) {setColorFilter(); } }", "n_tokens": 56, "n_pass": [540, 62, 46]}
{"time": "2021-02-15 00:25:57.542523", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if(ret=null) {setColorFilter(); } }", "n_tokens": 55, "n_pass": [544, 63, 47]}
{"time": "2021-02-15 00:26:00.194997", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if(ret=null){setColorFilter(); } }", "n_tokens": 54, "n_pass": [547, 64, 48]}
{"time": "2021-02-15 00:26:02.877012", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if(ret=null){setColorFilter();} }", "n_tokens": 53, "n_pass": [553, 65, 49]}
{"time": "2021-02-15 00:26:05.523394", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (resIdglow) {(R);}if(ret=null){setColorFilter();}}", "n_tokens": 52, "n_pass": [555, 66, 50]}
{"time": "2021-02-15 00:26:17.415842", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge); }if (resIdglow) {(R);}if(ret=null){setColorFilter();}}", "n_tokens": 51, "n_pass": [579, 70, 51]}
{"time": "2021-02-15 00:26:20.075735", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);}if (resIdglow) {(R);}if(ret=null){setColorFilter();}}", "n_tokens": 50, "n_pass": [581, 71, 52]}
{"time": "2021-02-15 00:26:22.721059", "score": "0.3987", "loss": "1.1481", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);}if(resIdglow) {(R);}if(ret=null){setColorFilter();}}", "n_tokens": 49, "n_pass": [584, 72, 53]}
{"time": "2021-02-15 00:26:25.392133", "score": "0.3904", "loss": "1.159", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);}if(glow) {(R);}if(ret=null){setColorFilter();}}", "n_tokens": 48, "n_pass": [586, 73, 54]}
{"time": "2021-02-15 00:26:28.053462", "score": "0.3904", "loss": "1.159", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);}if(glow){(R);}if(ret=null){setColorFilter();}}", "n_tokens": 47, "n_pass": [589, 74, 55]}

Minimal simplified code:
Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);}if(glow){(R);}if(ret=null){setColorFilter();}}

