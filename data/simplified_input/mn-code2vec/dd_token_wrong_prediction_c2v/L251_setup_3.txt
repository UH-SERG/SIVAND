
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rakam-io__rakam/rakam-postgresql/src/main/java/org/rakam/postgresql/PostgresqlApiKeyService_setup.java
method_name = setup
method_body = @Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute("CREATE TABLE IF NOT EXISTS api_key (" + " id SERIAL NOT NULL,\n" + " project VARCHAR(255) NOT NULL,\n" + " read_key VARCHAR(255) NOT NULL,\n" + " write_key VARCHAR(255) NOT NULL,\n" + " master_key VARCHAR(255) NOT NULL,\n" + " created_at TIMESTAMP default current_timestamp NOT NULL," + "PRIMARY KEY (id)\n" + " )"); } catch (SQLException e) { throw new RuntimeException(e); } }
predict, score, loss = createTable, 0.4023587107658386, 8.067578315734863

Trace of simplified code(s):
{"time": "2021-02-24 06:48:30.116167", "score": "0.4024", "loss": "8.0676", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOT EXISTS api_key (\" + \" id SERIAL NOT NULL,\\n\" + \" project VARCHAR(255) NOT NULL,\\n\" + \" read_key VARCHAR(255) NOT NULL,\\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 242, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 06:48:38.057054", "score": "0.3382", "loss": "7.9045", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOT EXISTS api255) NOT NULL,\\n\" + \" read_key VARCHAR(255) NOT NULL,\\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 212, "n_pass": [22, 4, 2]}
{"time": "2021-02-24 06:48:51.497274", "score": "0.3382", "loss": "7.9045", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOT) NOT NULL,\\n\" + \" read_key VARCHAR(255) NOT NULL,\\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 205, "n_pass": [85, 9, 3]}
{"time": "2021-02-24 06:48:54.142760", "score": "0.3382", "loss": "7.9045", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" read_key VARCHAR(255) NOT NULL,\\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 198, "n_pass": [86, 10, 4]}
{"time": "2021-02-24 06:48:59.414204", "score": "0.3187", "loss": "8.1453", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" 55) NOT NULL,\\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 191, "n_pass": [88, 12, 5]}
{"time": "2021-02-24 06:49:02.076772", "score": "0.3312", "loss": "7.98", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(255) NOT NULL,\\n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 183, "n_pass": [89, 13, 6]}
{"time": "2021-02-24 06:49:09.995701", "score": "0.3312", "loss": "7.98", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(25n\" + \" master_key VARCHAR(255) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 175, "n_pass": [92, 16, 7]}
{"time": "2021-02-24 06:49:15.289229", "score": "0.3312", "loss": "7.98", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(25n\" + \" master) NOT NULL,\\n\" + \" created_at TIMESTAMP default current_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 167, "n_pass": [94, 18, 8]}
{"time": "2021-02-24 06:49:23.215149", "score": "0.3312", "loss": "7.98", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(25n\" + \" master) NOT NULL,\\n\" + \" created_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } catch (SQLException e) { throw new RuntimeException(e); } }", "n_tokens": 159, "n_pass": [97, 21, 9]}
{"time": "2021-02-24 06:49:25.851439", "score": "0.3757", "loss": "8.7767", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement = connection.createStatement(); statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(25n\" + \" master) NOT NULL,\\n\" + \" created_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw new RuntimeException(e); } }", "n_tokens": 151, "n_pass": [102, 22, 10]}
{"time": "2021-02-24 06:49:28.879417", "score": "0.3739", "loss": "9.0207", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" write_key VARCHAR(25n\" + \" master) NOT NULL,\\n\" + \" created_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw new RuntimeException(e); } }", "n_tokens": 144, "n_pass": [110, 23, 11]}
{"time": "2021-02-24 06:49:39.416414", "score": "0.3321", "loss": "8.8639", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" master) NOT NULL,\\n\" + \" created_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw new RuntimeException(e); } }", "n_tokens": 136, "n_pass": [115, 27, 12]}
{"time": "2021-02-24 06:49:58.271894", "score": "0.3321", "loss": "8.8639", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_timestamp NOT NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw new RuntimeException(e); } }", "n_tokens": 132, "n_pass": [172, 34, 13]}
{"time": "2021-02-24 06:50:00.928272", "score": "0.3321", "loss": "8.8639", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw new RuntimeException(e); } }", "n_tokens": 128, "n_pass": [175, 35, 14]}
{"time": "2021-02-24 06:50:08.860286", "score": "0.3344", "loss": "8.8951", "code": "@Override public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 124, "n_pass": [184, 38, 15]}
{"time": "2021-02-24 06:50:11.550885", "score": "0.8246", "loss": "10.1536", "code": "public void setup() { try (Connection connection = connectionPool.getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 121, "n_pass": [187, 39, 16]}
{"time": "2021-02-24 06:50:14.617723", "score": "0.5896", "loss": "10.7759", "code": "public void setup() { try (Connection connection =getConnection()) { Statement statement ; statement.execute(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 118, "n_pass": [194, 40, 17]}
{"time": "2021-02-24 06:50:17.242009", "score": "0.5672", "loss": "12.3667", "code": "public void setup() { try (Connection connection =getConnection()) { Statement statement ;(\"CREATE TABLE IF NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 114, "n_pass": [198, 41, 18]}
{"time": "2021-02-24 06:50:19.879096", "score": "0.5672", "loss": "12.3667", "code": "public void setup() { try (Connection connection =getConnection()) { Statement statement ;(\"CREATE NOTn\" + \" \\n\" + \" n\" + \" masterNULL,\\n\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 110, "n_pass": [200, 42, 19]}
{"time": "2021-02-24 06:50:22.507290", "score": "0.5604", "loss": "12.3666", "code": "public void setup() { try (Connection connection =getConnection()) { Statement statement ;(\"CREATE NOTn\" + \" \\n\" + \" n\" + \" master\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 106, "n_pass": [207, 43, 20]}
{"time": "2021-02-24 06:50:30.820065", "score": "0.473", "loss": "11.349", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"CREATE NOTn\" + \" \\n\" + \" n\" + \" master\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 102, "n_pass": [228, 46, 21]}
{"time": "2021-02-24 06:50:39.784262", "score": "0.473", "loss": "11.349", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"NOTn\" + \" \\n\" + \" n\" + \" master\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 100, "n_pass": [311, 49, 22]}
{"time": "2021-02-24 06:50:42.400759", "score": "0.5853", "loss": "10.7793", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \\n\" + \" n\" + \" master\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 98, "n_pass": [312, 50, 23]}
{"time": "2021-02-24 06:50:45.024955", "score": "0.5853", "loss": "10.7793", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \" master\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 96, "n_pass": [316, 51, 24]}
{"time": "2021-02-24 06:50:47.645009", "score": "0.6429", "loss": "10.7051", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" created_NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 94, "n_pass": [323, 52, 25]}
{"time": "2021-02-24 06:50:50.277364", "score": "0.4405", "loss": "11.6529", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" NULL,\" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 92, "n_pass": [327, 53, 26]}
{"time": "2021-02-24 06:50:52.968760", "score": "0.622", "loss": "10.9321", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEY (id)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 90, "n_pass": [328, 54, 27]}
{"time": "2021-02-24 06:50:58.222996", "score": "0.622", "loss": "10.9321", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\\n\" + \" )\"); } { throw(e); } }", "n_tokens": 88, "n_pass": [333, 56, 28]}
{"time": "2021-02-24 06:51:03.458367", "score": "0.622", "loss": "10.9321", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\" + \" )\"); } { throw(e); } }", "n_tokens": 86, "n_pass": [335, 58, 29]}
{"time": "2021-02-24 06:51:06.084299", "score": "0.622", "loss": "10.9321", "code": "public void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\" + \" )\"); } {(e); } }", "n_tokens": 84, "n_pass": [343, 59, 30]}
{"time": "2021-02-24 06:51:08.715632", "score": "0.622", "loss": "10.9321", "code": " void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\" + \" )\"); } {(e); } }", "n_tokens": 83, "n_pass": [348, 60, 31]}
{"time": "2021-02-24 06:51:11.345286", "score": "0.622", "loss": "10.9321", "code": "void setup() { try (Connection connection =getConnection()) { Statement(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\" + \" )\"); } {(e); } }", "n_tokens": 82, "n_pass": [349, 61, 32]}
{"time": "2021-02-24 06:51:14.736183", "score": "0.7171", "loss": "12.0746", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEYid)\" + \" )\"); } {(e); } }", "n_tokens": 80, "n_pass": [363, 62, 33]}
{"time": "2021-02-24 06:51:19.993130", "score": "0.3514", "loss": "11.7241", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY KEY\" + \" )\"); } {(e); } }", "n_tokens": 78, "n_pass": [381, 64, 34]}
{"time": "2021-02-24 06:51:23.403258", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\" + \" )\"); } {(e); } }", "n_tokens": 76, "n_pass": [422, 65, 35]}
{"time": "2021-02-24 06:51:36.769556", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+ \" )\"); } {(e); } }", "n_tokens": 75, "n_pass": [535, 66, 36]}
{"time": "2021-02-24 06:51:39.406598", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\"); } {(e); } }", "n_tokens": 74, "n_pass": [537, 67, 37]}
{"time": "2021-02-24 06:51:47.309166", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");} {(e); } }", "n_tokens": 73, "n_pass": [544, 70, 38]}
{"time": "2021-02-24 06:51:49.922200", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e); } }", "n_tokens": 72, "n_pass": [546, 71, 39]}
{"time": "2021-02-24 06:51:52.541249", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);} }", "n_tokens": 71, "n_pass": [552, 72, 40]}
{"time": "2021-02-24 06:51:55.184956", "score": "0.2853", "loss": "10.5118", "code": "void setup() { try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 70, "n_pass": [554, 73, 41]}
{"time": "2021-02-24 06:51:58.589755", "score": "0.2853", "loss": "10.5118", "code": "void setup(){ try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 69, "n_pass": [561, 74, 42]}
{"time": "2021-02-24 06:52:01.193702", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try (Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 68, "n_pass": [563, 75, 43]}
{"time": "2021-02-24 06:52:03.843142", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try(Connection connection =getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 67, "n_pass": [565, 76, 44]}
{"time": "2021-02-24 06:52:06.450140", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try(Connection connection=getConnection()) {(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 66, "n_pass": [570, 77, 45]}
{"time": "2021-02-24 06:52:09.067140", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try(Connection connection=getConnection()){(\"\" + \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 65, "n_pass": [576, 78, 46]}
{"time": "2021-02-24 06:52:11.697438", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+ \" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 64, "n_pass": [581, 79, 47]}
{"time": "2021-02-24 06:52:14.307098", "score": "0.2853", "loss": "10.5118", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\" \" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 63, "n_pass": [583, 80, 48]}
{"time": "2021-02-24 06:52:16.950233", "score": "0.3298", "loss": "10.0279", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\" + \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 62, "n_pass": [585, 81, 49]}
{"time": "2021-02-24 06:52:19.566312", "score": "0.3298", "loss": "10.0279", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+ \" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 61, "n_pass": [587, 82, 50]}
{"time": "2021-02-24 06:52:22.168219", "score": "0.3298", "loss": "10.0279", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\" n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 60, "n_pass": [589, 83, 51]}
{"time": "2021-02-24 06:52:24.799616", "score": "0.3298", "loss": "10.0279", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"n\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 59, "n_pass": [591, 84, 52]}
{"time": "2021-02-24 06:52:27.447643", "score": "0.4716", "loss": "10.0425", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\" + \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 58, "n_pass": [592, 85, 53]}
{"time": "2021-02-24 06:52:30.084800", "score": "0.4716", "loss": "10.0425", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+ \"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 57, "n_pass": [594, 86, 54]}
{"time": "2021-02-24 06:52:32.713702", "score": "0.4716", "loss": "10.0425", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\" + \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 56, "n_pass": [596, 87, 55]}
{"time": "2021-02-24 06:52:35.349024", "score": "0.4716", "loss": "10.0425", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+ \" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 55, "n_pass": [599, 88, 56]}
{"time": "2021-02-24 06:52:37.976928", "score": "0.4716", "loss": "10.0425", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+\" \" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 54, "n_pass": [601, 89, 57]}
{"time": "2021-02-24 06:52:40.607583", "score": "0.5201", "loss": "9.7548", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+\"\" + \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 53, "n_pass": [603, 90, 58]}
{"time": "2021-02-24 06:52:43.221270", "score": "0.5201", "loss": "9.7548", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+\"\"+ \"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 52, "n_pass": [605, 91, 59]}
{"time": "2021-02-24 06:52:45.855507", "score": "0.5201", "loss": "9.7548", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+\"\"+\"PRIMARY\"+\" )\");}{(e);}}", "n_tokens": 51, "n_pass": [607, 92, 60]}
{"time": "2021-02-24 06:52:48.492812", "score": "0.2587", "loss": "7.5458", "code": "void setup(){try(Connection connection=getConnection()){(\"\"+\"\"+\"\"+\"\"+\"\"+\"\"+\" )\");}{(e);}}", "n_tokens": 50, "n_pass": [609, 93, 61]}

Minimal simplified code:
void setup(){try(Connection connection=getConnection()){(""+""+""+""+""+""+" )");}{(e);}}

