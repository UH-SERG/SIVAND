
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/timols__jenkins-gitlab-merge-request-builder-plugin/src/main/java/org/jenkinsci/plugins/gitlab/GitlabWebhookCrumbExclusion_process.java
method_name = process
method_body = @Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith("/" + GitlabWebhooks.URLNAME + "/")) { chain.doFilter(request, response); return true; } return false; }
predict, score, loss = doFilterInternal, 0.9977689981460571, 8.095863342285156

Trace of simplified code(s):
{"time": "2021-02-24 09:50:35.402220", "score": "0.9978", "loss": "8.0959", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:50:38.727779", "score": "0.8399", "loss": "4.9441", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 101, "n_pass": [48, 2, 2]}
{"time": "2021-02-24 09:50:41.502396", "score": "0.9066", "loss": "5.7916", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 94, "n_pass": [50, 3, 3]}
{"time": "2021-02-24 09:50:45.161925", "score": "0.9285", "loss": "5.9683", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 91, "n_pass": [98, 4, 4]}
{"time": "2021-02-24 09:50:47.942385", "score": "0.9689", "loss": "6.7845", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 87, "n_pass": [106, 5, 5]}
{"time": "2021-02-24 09:50:50.725196", "score": "0.9825", "loss": "7.6469", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 84, "n_pass": [111, 6, 6]}
{"time": "2021-02-24 09:50:53.935253", "score": "0.9879", "loss": "7.8719", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  {  ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 81, "n_pass": [120, 7, 7]}
{"time": "2021-02-24 09:50:56.689721", "score": "0.9879", "loss": "7.8719", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 78, "n_pass": [121, 8, 8]}
{"time": "2021-02-24 09:50:59.459663", "score": "0.9876", "loss": "7.8378", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo != nullstartsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 75, "n_pass": [125, 9, 9]}
{"time": "2021-02-24 09:51:05.223665", "score": "0.9861", "loss": "7.7196", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 73, "n_pass": [192, 10, 10]}
{"time": "2021-02-24 09:51:07.991240", "score": "0.9861", "loss": "7.7298", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 71, "n_pass": [197, 11, 11]}
{"time": "2021-02-24 09:51:10.724541", "score": "0.9865", "loss": "7.7789", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 69, "n_pass": [198, 12, 12]}
{"time": "2021-02-24 09:51:13.457767", "score": "0.9855", "loss": "7.6701", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 67, "n_pass": [199, 13, 13]}
{"time": "2021-02-24 09:51:16.257230", "score": "0.9951", "loss": "8.759", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter(); return true; } return false; }", "n_tokens": 65, "n_pass": [204, 14, 14]}
{"time": "2021-02-24 09:51:19.068861", "score": "0.9969", "loss": "9.3521", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter(); true; } return false; }", "n_tokens": 63, "n_pass": [207, 15, 15]}
{"time": "2021-02-24 09:51:21.806084", "score": "0.997", "loss": "9.4002", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();; } return false; }", "n_tokens": 61, "n_pass": [208, 16, 16]}
{"time": "2021-02-24 09:51:24.552443", "score": "0.997", "loss": "9.4002", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();} return false; }", "n_tokens": 59, "n_pass": [209, 17, 17]}
{"time": "2021-02-24 09:51:27.312136", "score": "0.9994", "loss": "10.7887", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();} false; }", "n_tokens": 57, "n_pass": [211, 18, 18]}
{"time": "2021-02-24 09:51:30.062352", "score": "0.9994", "loss": "10.8339", "code": "public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 55, "n_pass": [212, 19, 19]}
{"time": "2021-02-24 09:51:32.783386", "score": "0.9994", "loss": "10.8339", "code": " boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 54, "n_pass": [214, 20, 20]}
{"time": "2021-02-24 09:51:35.503763", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 53, "n_pass": [215, 21, 21]}
{"time": "2021-02-24 09:51:39.144353", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 52, "n_pass": [224, 22, 22]}
{"time": "2021-02-24 09:51:48.733711", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain) { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 51, "n_pass": [302, 23, 23]}
{"time": "2021-02-24 09:51:51.459476", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){ if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 50, "n_pass": [303, 24, 24]}
{"time": "2021-02-24 09:51:54.198470", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 49, "n_pass": [305, 25, 25]}
{"time": "2021-02-24 09:51:56.945081", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 48, "n_pass": [307, 26, 26]}
{"time": "2021-02-24 09:51:59.675139", "score": "0.9994", "loss": "10.8339", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo!=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 47, "n_pass": [310, 27, 27]}
{"time": "2021-02-24 09:52:02.461583", "score": "0.9997", "loss": "11.5504", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 46, "n_pass": [311, 28, 28]}
{"time": "2021-02-24 09:52:05.221108", "score": "0.9996", "loss": "10.7916", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfostartsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 45, "n_pass": [312, 29, 29]}
{"time": "2021-02-24 09:52:07.959982", "score": "0.9994", "loss": "10.5471", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 44, "n_pass": [313, 30, 30]}
{"time": "2021-02-24 09:52:10.674023", "score": "0.9995", "loss": "10.8823", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\" + \"/\")) { doFilter();}  }", "n_tokens": 43, "n_pass": [316, 31, 31]}
{"time": "2021-02-24 09:52:13.394791", "score": "0.9995", "loss": "10.8823", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+ \"/\")) { doFilter();}  }", "n_tokens": 42, "n_pass": [318, 32, 32]}
{"time": "2021-02-24 09:52:16.113415", "score": "0.9995", "loss": "10.8823", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"/\")) { doFilter();}  }", "n_tokens": 41, "n_pass": [320, 33, 33]}
{"time": "2021-02-24 09:52:18.833587", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")) { doFilter();}  }", "n_tokens": 40, "n_pass": [322, 34, 34]}
{"time": "2021-02-24 09:52:21.556098", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){ doFilter();}  }", "n_tokens": 39, "n_pass": [326, 35, 35]}
{"time": "2021-02-24 09:52:24.293869", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}  }", "n_tokens": 38, "n_pass": [328, 36, 36]}
{"time": "2021-02-24 09:52:27.003303", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();} }", "n_tokens": 37, "n_pass": [334, 37, 37]}
{"time": "2021-02-24 09:52:29.733053", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}}", "n_tokens": 36, "n_pass": [335, 38, 38]}
{"time": "2021-02-24 09:52:33.366461", "score": "0.9996", "loss": "11.5177", "code": "boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}}", "n_tokens": 35, "n_pass": [349, 39, 39]}
{"time": "2021-02-24 09:52:36.096264", "score": "0.9998", "loss": "12.1397", "code": "boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if((\"\"+\"\")){doFilter();}}", "n_tokens": 34, "n_pass": [357, 40, 40]}

Minimal simplified code:
boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if((""+"")){doFilter();}}

