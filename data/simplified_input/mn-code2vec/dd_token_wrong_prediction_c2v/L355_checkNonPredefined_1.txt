
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/asn1/test/TypeOfBiometricDataUnitTest_checkNonPredefined.java
method_name = checkNonPredefined
method_body = private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail("predefined type found when not expected."); } if (!type.getBiometricDataOid().equals(value)) { fail("data oid does not match."); } }
predict, score, loss = verify, 0.4481631815433502, 16.54022979736328

Trace of simplified code(s):
{"time": "2021-02-23 18:20:59.834207", "score": "0.4482", "loss": "16.5402", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined type found when not expected.\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 91, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 18:21:02.508739", "score": "0.4482", "loss": "16.5402", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined not expected.\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 85, "n_pass": [51, 2, 2]}
{"time": "2021-02-23 18:21:05.185117", "score": "0.2748", "loss": "16.3841", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 82, "n_pass": [97, 3, 3]}
{"time": "2021-02-23 18:21:07.848905", "score": "0.1742", "loss": "16.5302", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 79, "n_pass": [103, 4, 4]}
{"time": "2021-02-23 18:21:10.526623", "score": "0.1742", "loss": "16.5302", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 76, "n_pass": [107, 5, 5]}
{"time": "2021-02-23 18:21:15.820083", "score": "0.1742", "loss": "16.5302", "code": "void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 74, "n_pass": [112, 7, 6]}
{"time": "2021-02-23 18:21:28.919839", "score": "0.1742", "loss": "16.5302", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 73, "n_pass": [199, 10, 7]}
{"time": "2021-02-23 18:21:31.572663", "score": "0.1742", "loss": "16.5302", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 72, "n_pass": [201, 11, 8]}
{"time": "2021-02-23 18:21:34.263275", "score": "0.5776", "loss": "17.3348", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 71, "n_pass": [202, 12, 9]}
{"time": "2021-02-23 18:21:36.917405", "score": "0.5776", "loss": "17.3348", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){ if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 70, "n_pass": [206, 13, 10]}
{"time": "2021-02-23 18:21:39.598148", "score": "0.5776", "loss": "17.3348", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 69, "n_pass": [208, 14, 11]}
{"time": "2021-02-23 18:21:42.272420", "score": "0.5776", "loss": "17.3348", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 68, "n_pass": [210, 15, 12]}
{"time": "2021-02-23 18:21:44.927515", "score": "0.3439", "loss": "16.7275", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(typeisPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 67, "n_pass": [213, 16, 13]}
{"time": "2021-02-23 18:21:47.586523", "score": "0.3538", "loss": "16.7082", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 66, "n_pass": [214, 17, 14]}
{"time": "2021-02-23 18:21:50.258783", "score": "0.3538", "loss": "16.7082", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){ fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 65, "n_pass": [218, 18, 15]}
{"time": "2021-02-23 18:21:52.913066", "score": "0.3538", "loss": "16.7082", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 64, "n_pass": [220, 19, 16]}
{"time": "2021-02-23 18:21:55.563614", "score": "0.3538", "loss": "16.7082", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!type.getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 62, "n_pass": [223, 20, 17]}
{"time": "2021-02-23 18:21:58.240640", "score": "0.3489", "loss": "16.7319", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\"data  not match.\"); } }", "n_tokens": 60, "n_pass": [229, 21, 18]}
{"time": "2021-02-23 18:22:08.853110", "score": "0.3489", "loss": "16.7319", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\"data  not.\"); } }", "n_tokens": 58, "n_pass": [238, 25, 19]}
{"time": "2021-02-23 18:22:15.001435", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\" not.\"); } }", "n_tokens": 56, "n_pass": [276, 27, 20]}
{"time": "2021-02-23 18:22:27.661858", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\" not\"); } }", "n_tokens": 55, "n_pass": [351, 30, 21]}
{"time": "2021-02-23 18:22:30.309021", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\" not\");} }", "n_tokens": 54, "n_pass": [354, 31, 22]}
{"time": "2021-02-23 18:22:32.988020", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\"); } if (!getBiometricDataOid().equals) { fail(\" not\");}}", "n_tokens": 53, "n_pass": [356, 32, 23]}
{"time": "2021-02-23 18:22:41.791832", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");} if (!getBiometricDataOid().equals) { fail(\" not\");}}", "n_tokens": 52, "n_pass": [385, 35, 24]}
{"time": "2021-02-23 18:22:44.435603", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if (!getBiometricDataOid().equals) { fail(\" not\");}}", "n_tokens": 51, "n_pass": [387, 36, 25]}
{"time": "2021-02-23 18:22:47.078787", "score": "0.3343", "loss": "16.6734", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if(!getBiometricDataOid().equals) { fail(\" not\");}}", "n_tokens": 50, "n_pass": [389, 37, 26]}
{"time": "2021-02-23 18:22:49.739776", "score": "0.3418", "loss": "16.5391", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if(getBiometricDataOid().equals) { fail(\" not\");}}", "n_tokens": 49, "n_pass": [391, 38, 27]}
{"time": "2021-02-23 18:22:52.414102", "score": "0.3418", "loss": "16.5391", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if(getBiometricDataOid().equals){ fail(\" not\");}}", "n_tokens": 48, "n_pass": [398, 39, 28]}
{"time": "2021-02-23 18:22:55.054965", "score": "0.3418", "loss": "16.5391", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if(getBiometricDataOid().equals){fail(\" not\");}}", "n_tokens": 47, "n_pass": [400, 40, 29]}
{"time": "2021-02-23 18:23:00.366457", "score": "0.3418", "loss": "16.5391", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail(\"predefined\");}if(getBiometricDataOid().equals){fail(\"not\");}}", "n_tokens": 46, "n_pass": [404, 42, 30]}

Minimal simplified code:
void checkNonPredefined(TypeOfBiometricData type,ASN value){if(type()){fail("predefined");}if(getBiometricDataOid().equals){fail("not");}}

