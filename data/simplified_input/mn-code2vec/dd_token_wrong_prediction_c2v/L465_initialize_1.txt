
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-federation/openam-federation-library/src/main/java/com/sun/identity/saml/xmlsig/AMSignatureProvider_initialize.java
method_name = initialize
method_body = public void initialize(KeyProvider keyProvider) { if (keyProvider == null) { SAMLUtilsCommon.debug.error("Key Provider is null"); } else { keystore = keyProvider; if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }
predict, score, loss = getKeyProvider, 0.9647435545921326, 3.4225847721099854

Trace of simplified code(s):
{"time": "2021-02-23 03:50:40.019627", "score": "0.9647", "loss": "3.4226", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) { SAMLUtilsCommon.debug.error(\"Key Provider is null\"); } else { keystore = keyProvider; if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 81, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 03:50:43.149929", "score": "0.9891", "loss": "4.6605", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key Provider is null\"); } else { keystore = keyProvider; if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 76, "n_pass": [49, 2, 2]}
{"time": "2021-02-23 03:50:45.851170", "score": "0.9898", "loss": "4.8737", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else { keystore = keyProvider; if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 71, "n_pass": [51, 3, 3]}
{"time": "2021-02-23 03:50:48.542059", "score": "0.9378", "loss": "5.4303", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else { ; if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 66, "n_pass": [54, 4, 4]}
{"time": "2021-02-23 03:50:51.647023", "score": "0.9378", "loss": "5.4303", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else {if (keystore instanceof JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 63, "n_pass": [95, 5, 5]}
{"time": "2021-02-23 03:50:54.323428", "score": "0.9455", "loss": "5.6414", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) { isJKSKeyStore = true; } } }", "n_tokens": 60, "n_pass": [97, 6, 6]}
{"time": "2021-02-23 03:50:57.027417", "score": "0.9513", "loss": "5.7098", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  true; } } }", "n_tokens": 57, "n_pass": [100, 7, 7]}
{"time": "2021-02-23 03:50:59.709739", "score": "0.9498", "loss": "5.7681", "code": "public void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 54, "n_pass": [101, 8, 8]}
{"time": "2021-02-23 03:51:02.387552", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider) { if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 52, "n_pass": [104, 9, 9]}
{"time": "2021-02-23 03:51:10.728109", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){ if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 51, "n_pass": [176, 10, 10]}
{"time": "2021-02-23 03:51:13.407127", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){if (keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 50, "n_pass": [177, 11, 11]}
{"time": "2021-02-23 03:51:16.092205", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){if(keyProvider == null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 49, "n_pass": [179, 12, 12]}
{"time": "2021-02-23 03:51:18.774671", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){if(keyProvider== null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 48, "n_pass": [182, 13, 13]}
{"time": "2021-02-23 03:51:26.831845", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null) {error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 47, "n_pass": [185, 16, 14]}
{"time": "2021-02-23 03:51:29.517678", "score": "0.9498", "loss": "5.7681", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){error(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 46, "n_pass": [188, 17, 15]}
{"time": "2021-02-23 03:51:32.220788", "score": "0.9999", "loss": "10.4812", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){(\"Key \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 45, "n_pass": [190, 18, 16]}
{"time": "2021-02-23 03:51:34.897473", "score": "0.9999", "loss": "10.5205", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){(\" \"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 44, "n_pass": [193, 19, 17]}
{"time": "2021-02-23 03:51:37.570777", "score": "0.9999", "loss": "10.4642", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){(\"\"); } else {if ( JKSKeyProvider) {  } } }", "n_tokens": 43, "n_pass": [194, 20, 18]}
{"time": "2021-02-23 03:51:40.258469", "score": "0.9999", "loss": "10.4642", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){(\"\");} else {if ( JKSKeyProvider) {  } } }", "n_tokens": 42, "n_pass": [198, 21, 19]}
{"time": "2021-02-23 03:51:42.935423", "score": "1.0", "loss": "12.4134", "code": "void initialize(KeyProvider keyProvider){if(keyProvider==null){(\"\");} {if ( JKSKeyProvider) {  } } }", "n_tokens": 40, "n_pass": [200, 22, 20]}
{"time": "2021-02-23 03:51:46.486869", "score": "0.9993", "loss": "8.6176", "code": "void initialize(KeyProvider keyProvider){if(keyProvider=null){(\"\");} {if ( JKSKeyProvider) {  } } }", "n_tokens": 39, "n_pass": [221, 23, 21]}
{"time": "2021-02-23 03:51:49.158050", "score": "0.9998", "loss": "9.301", "code": "void initialize(KeyProvider keyProvider){if(keyProvidernull){(\"\");} {if ( JKSKeyProvider) {  } } }", "n_tokens": 38, "n_pass": [222, 24, 22]}
{"time": "2021-02-23 03:51:51.858780", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");} {if ( JKSKeyProvider) {  } } }", "n_tokens": 37, "n_pass": [223, 25, 23]}
{"time": "2021-02-23 03:51:58.560437", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if ( JKSKeyProvider) {  } } }", "n_tokens": 36, "n_pass": [271, 26, 24]}
{"time": "2021-02-23 03:52:01.252244", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if( JKSKeyProvider) {  } } }", "n_tokens": 35, "n_pass": [274, 27, 25]}
{"time": "2021-02-23 03:52:03.923293", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider) {  } } }", "n_tokens": 34, "n_pass": [276, 28, 26]}
{"time": "2021-02-23 03:52:06.629098", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider){  } } }", "n_tokens": 33, "n_pass": [279, 29, 27]}
{"time": "2021-02-23 03:52:09.302755", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider){ } } }", "n_tokens": 32, "n_pass": [281, 30, 28]}
{"time": "2021-02-23 03:52:11.966020", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider){} } }", "n_tokens": 31, "n_pass": [282, 31, 29]}
{"time": "2021-02-23 03:52:14.652267", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider){}} }", "n_tokens": 30, "n_pass": [284, 32, 30]}
{"time": "2021-02-23 03:52:17.345873", "score": "1.0", "loss": "13.4769", "code": "void initialize(KeyProvider keyProvider){if(keyProvider){(\"\");}{if(JKSKeyProvider){}}}", "n_tokens": 29, "n_pass": [286, 33, 31]}

Minimal simplified code:
void initialize(KeyProvider keyProvider){if(keyProvider){("");}{if(JKSKeyProvider){}}}

