
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wnameless__json-flattener/src/test/java/com/github/wnameless/json/flattener/JsonFlattenerTest_testWithKeyTransformer.java
method_name = testWithKeyTransformer
method_body = @Test public void testWithKeyTransformer() { String json = "{\"abc\":{\"de.f\":123}}"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals("{\"abc.de_f\":123}", jf.flatten()); }
predict, score, loss = escape, 0.16888849437236786, 14.346601486206055

Trace of simplified code(s):
{"time": "2021-02-24 04:13:36.923142", "score": "0.1689", "loss": "14.3466", "code": "@Test public void testWithKeyTransformer() { String json = \"{\\\"abc\\\":{\\\"de.f\\\":123}}\"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 143, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:13:47.561083", "score": "0.2331", "loss": "14.2903", "code": " void testWithKeyTransformer() { String json = \"{\\\"abc\\\":{\\\"de.f\\\":123}}\"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 139, "n_pass": [92, 5, 2]}
{"time": "2021-02-24 04:13:52.864312", "score": "0.2331", "loss": "14.2903", "code": " void testWithKeyTransformer() { String json = \"{\\\"abc\\\"de.f\\\":123}}\"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 135, "n_pass": [97, 7, 3]}
{"time": "2021-02-24 04:13:55.592458", "score": "0.1773", "loss": "14.3282", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":123}}\"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 131, "n_pass": [98, 8, 4]}
{"time": "2021-02-24 04:14:00.896771", "score": "0.1773", "loss": "14.3282", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; JsonFlattener jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 127, "n_pass": [100, 10, 5]}
{"time": "2021-02-24 04:14:20.029096", "score": "0.1815", "loss": "14.0865", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = new JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 125, "n_pass": [187, 17, 6]}
{"time": "2021-02-24 04:14:22.736853", "score": "0.1804", "loss": "14.0676", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 123, "n_pass": [189, 18, 7]}
{"time": "2021-02-24 04:14:25.410257", "score": "0.2029", "loss": "13.9927", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() { @Override public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 121, "n_pass": [194, 19, 8]}
{"time": "2021-02-24 04:14:28.109901", "score": "0.2497", "loss": "14.0092", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  public String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 119, "n_pass": [201, 20, 9]}
{"time": "2021-02-24 04:14:30.751396", "score": "0.2497", "loss": "14.0092", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"{\\\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 117, "n_pass": [202, 21, 10]}
{"time": "2021-02-24 04:14:44.095010", "score": "0.2497", "loss": "14.0092", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\\":123}\", jf.flatten()); }", "n_tokens": 114, "n_pass": [219, 26, 11]}
{"time": "2021-02-24 04:14:49.412189", "score": "0.2497", "loss": "14.0092", "code": " void testWithKeyTransformer() { String json = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 111, "n_pass": [222, 28, 12]}
{"time": "2021-02-24 04:14:55.158624", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String = \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 109, "n_pass": [233, 30, 13]}
{"time": "2021-02-24 04:15:25.391633", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String= \"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 108, "n_pass": [378, 38, 14]}
{"time": "2021-02-24 04:15:28.056200", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"{\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 107, "n_pass": [379, 39, 15]}
{"time": "2021-02-24 04:15:30.702947", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\":}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 106, "n_pass": [381, 40, 16]}
{"time": "2021-02-24 04:15:38.640877", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"}\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 105, "n_pass": [388, 43, 17]}
{"time": "2021-02-24 04:15:41.264232", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\"; jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 104, "n_pass": [389, 44, 18]}
{"time": "2021-02-24 04:15:43.914610", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf = JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 103, "n_pass": [392, 45, 19]}
{"time": "2021-02-24 04:15:46.552450", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf= JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 102, "n_pass": [394, 46, 20]}
{"time": "2021-02-24 04:15:49.207112", "score": "0.1965", "loss": "14.049", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=JsonFlattener(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 101, "n_pass": [396, 47, 21]}
{"time": "2021-02-24 04:15:51.866160", "score": "0.2134", "loss": "14.1067", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode(FlattenMode).withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 100, "n_pass": [397, 48, 22]}
{"time": "2021-02-24 04:15:57.178952", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer() {  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 99, "n_pass": [404, 50, 23]}
{"time": "2021-02-24 04:15:59.801839", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){  String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 98, "n_pass": [414, 51, 24]}
{"time": "2021-02-24 04:16:02.443042", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){ String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 97, "n_pass": [416, 52, 25]}
{"time": "2021-02-24 04:16:05.081883", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key) { return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 96, "n_pass": [417, 53, 26]}
{"time": "2021-02-24 04:16:15.582066", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){ return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 95, "n_pass": [426, 57, 27]}
{"time": "2021-02-24 04:16:18.225818", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.', '_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 94, "n_pass": [428, 58, 28]}
{"time": "2021-02-24 04:16:29.126036", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_'); } }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 93, "n_pass": [439, 62, 29]}
{"time": "2021-02-24 04:16:32.105023", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');} }); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 92, "n_pass": [445, 63, 30]}
{"time": "2021-02-24 04:16:34.733542", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\\23}\", jf.flatten()); }", "n_tokens": 91, "n_pass": [447, 64, 31]}
{"time": "2021-02-24 04:16:42.680071", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f3}\", jf.flatten()); }", "n_tokens": 89, "n_pass": [455, 67, 32]}
{"time": "2021-02-24 04:16:45.307951", "score": "0.2178", "loss": "14.1355", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten()); }", "n_tokens": 87, "n_pass": [456, 68, 33]}
{"time": "2021-02-24 04:16:50.619227", "score": "0.2057", "loss": "14.1857", "code": " void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 85, "n_pass": [460, 70, 34]}
{"time": "2021-02-24 04:16:53.256602", "score": "0.2057", "loss": "14.1857", "code": "void testWithKeyTransformer() { String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 84, "n_pass": [463, 71, 35]}
{"time": "2021-02-24 04:16:56.702819", "score": "0.2057", "loss": "14.1857", "code": "void testWithKeyTransformer(){ String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 83, "n_pass": [469, 72, 36]}
{"time": "2021-02-24 04:16:59.351758", "score": "0.2057", "loss": "14.1857", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json).withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 82, "n_pass": [471, 73, 37]}
{"time": "2021-02-24 04:17:09.931173", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}}); assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 81, "n_pass": [488, 77, 38]}
{"time": "2021-02-24 04:17:45.133509", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals(\"abc.de_f\", jf.flatten); }", "n_tokens": 80, "n_pass": [581, 89, 39]}
{"time": "2021-02-24 04:17:50.413783", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals(\"abcde_f\", jf.flatten); }", "n_tokens": 79, "n_pass": [586, 91, 40]}
{"time": "2021-02-24 04:17:55.677957", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals(\"abcdef\", jf.flatten); }", "n_tokens": 78, "n_pass": [588, 93, 41]}
{"time": "2021-02-24 04:18:00.948304", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals(\"abcdef\",jf.flatten); }", "n_tokens": 77, "n_pass": [592, 95, 42]}
{"time": "2021-02-24 04:18:06.275729", "score": "0.1338", "loss": "14.1577", "code": "void testWithKeyTransformer(){String=\"\\\"abcf\\\"\";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals(\"abcdef\",jf.flatten);}", "n_tokens": 76, "n_pass": [598, 97, 43]}

Minimal simplified code:
void testWithKeyTransformer(){String="\"abcf\"";jf=(json)withFlattenMode().withKeyTransformer(new KeyTransformer(){String transform(String key){return key.replace('.','_');}});assertEquals("abcdef",jf.flatten);}

