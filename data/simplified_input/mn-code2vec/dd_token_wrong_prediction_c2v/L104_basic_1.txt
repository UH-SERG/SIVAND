
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-projects__spring-ws/spring-ws-test/src/test/java/org/springframework/ws/test/server/integration/ServerIntegrationTest_basic.java
method_name = basic
method_body = @Test public void basic() throws Exception { Source requestPayload = new StringSource("<customerCountRequest xmlns='http://springframework.org/spring-ws'>" + "<customerName>John Doe</customerName>" + "</customerCountRequest>"); Source expectedResponsePayload = new StringSource("<customerCountResponse xmlns='http://springframework.org/spring-ws'>" + "<customerCount>42</customerCount>" + "</customerCountResponse>"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }
predict, score, loss = sendMessage, 0.37242844700813293, 9.964201927185059

Trace of simplified code(s):
{"time": "2021-02-24 02:08:03.649596", "score": "0.3724", "loss": "9.9642", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://springframework.org/spring-ws'>\" + \"<customerName>John Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='http://springframework.org/spring-ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 152, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:08:06.306818", "score": "0.3276", "loss": "9.8299", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='http://springframework.org/spring-ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 133, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 02:08:09.351728", "score": "0.2838", "loss": "9.7242", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='http:/2</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 114, "n_pass": [24, 3, 3]}
{"time": "2021-02-24 02:08:14.678317", "score": "0.2838", "loss": "9.7242", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='httpcustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 109, "n_pass": [79, 5, 4]}
{"time": "2021-02-24 02:08:20.050430", "score": "0.2838", "loss": "9.7242", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='httpcustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 104, "n_pass": [93, 7, 5]}
{"time": "2021-02-24 02:08:22.708854", "score": "0.3078", "loss": "9.6042", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='httpcustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 99, "n_pass": [94, 8, 6]}
{"time": "2021-02-24 02:08:25.923600", "score": "0.3078", "loss": "9.6042", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 94, "n_pass": [101, 9, 7]}
{"time": "2021-02-24 02:08:28.626825", "score": "0.427", "loss": "10.7972", "code": " void basic() throws Exception { Source requestPayload = new StringSource(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 90, "n_pass": [109, 10, 8]}
{"time": "2021-02-24 02:08:32.458115", "score": "0.4618", "loss": "10.2656", "code": " void basic() throws Exception { requestPayload = new StringSource(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 88, "n_pass": [173, 11, 9]}
{"time": "2021-02-24 02:08:35.107400", "score": "0.4619", "loss": "10.6715", "code": " void basic() throws Exception { requestPayload = StringSource(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 86, "n_pass": [175, 12, 10]}
{"time": "2021-02-24 02:08:37.853535", "score": "0.4596", "loss": "11.3918", "code": " void basic() throws Exception { requestPayload =(\"<</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 84, "n_pass": [176, 13, 11]}
{"time": "2021-02-24 02:08:40.567929", "score": "0.4596", "loss": "11.3918", "code": " void basic() throws Exception { requestPayload =(\"/customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 82, "n_pass": [178, 14, 12]}
{"time": "2021-02-24 02:08:43.242755", "score": "0.4496", "loss": "11.4153", "code": " void basic() throws Exception { requestPayload =(\">\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 80, "n_pass": [179, 15, 13]}
{"time": "2021-02-24 02:08:45.870825", "score": "0.4496", "loss": "11.4153", "code": " void basic() throws Exception { requestPayload =(\">\" + \"customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 78, "n_pass": [183, 16, 14]}
{"time": "2021-02-24 02:08:48.673013", "score": "0.4499", "loss": "11.4185", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 76, "n_pass": [184, 17, 15]}
{"time": "2021-02-24 02:08:51.328899", "score": "0.3387", "loss": "10.5002", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = new StringSource(\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 74, "n_pass": [187, 18, 16]}
{"time": "2021-02-24 02:08:53.953605", "score": "0.4041", "loss": "11.5168", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = (\"<customerCountResponsecustomerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 71, "n_pass": [190, 19, 17]}
{"time": "2021-02-24 02:08:56.638866", "score": "0.3948", "loss": "11.4428", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = (\"<\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 68, "n_pass": [192, 20, 18]}
{"time": "2021-02-24 02:08:59.260250", "score": "0.3852", "loss": "11.3791", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = (\"<\" + \"<\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 65, "n_pass": [195, 21, 19]}
{"time": "2021-02-24 02:09:01.895926", "score": "0.4873", "loss": "10.3959", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = (\"<\" + \"<\");sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 62, "n_pass": [197, 22, 20]}
{"time": "2021-02-24 02:09:04.505817", "score": "0.5695", "loss": "11.8507", "code": " void basic() throws Exception { requestPayload =(\">\" + \"\"); expectedResponsePayload = (\"<\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 59, "n_pass": [199, 23, 21]}
{"time": "2021-02-24 02:09:07.554905", "score": "0.3863", "loss": "10.1234", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload = (\"<\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 57, "n_pass": [211, 24, 22]}
{"time": "2021-02-24 02:09:10.227329", "score": "0.2271", "loss": "9.1428", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"<\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 55, "n_pass": [219, 25, 23]}
{"time": "2021-02-24 02:09:23.468095", "score": "0.3275", "loss": "9.081", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 54, "n_pass": [291, 28, 24]}
{"time": "2021-02-24 02:09:26.115417", "score": "0.3275", "loss": "9.081", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 53, "n_pass": [293, 29, 25]}
{"time": "2021-02-24 02:09:28.757559", "score": "0.3275", "loss": "9.081", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 52, "n_pass": [295, 30, 26]}
{"time": "2021-02-24 02:09:31.360641", "score": "0.4465", "loss": "9.8285", "code": " void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 51, "n_pass": [297, 31, 27]}
{"time": "2021-02-24 02:09:33.997250", "score": "0.4465", "loss": "9.8285", "code": "void basic() throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 50, "n_pass": [307, 32, 28]}
{"time": "2021-02-24 02:09:37.514118", "score": "0.4465", "loss": "9.8285", "code": "void basic()throws Exception { requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 49, "n_pass": [313, 33, 29]}
{"time": "2021-02-24 02:09:40.122859", "score": "0.4465", "loss": "9.8285", "code": "void basic()throws Exception{ requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 48, "n_pass": [317, 34, 30]}
{"time": "2021-02-24 02:09:42.721906", "score": "0.4465", "loss": "9.8285", "code": "void basic()throws Exception{requestPayload(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 47, "n_pass": [319, 35, 31]}
{"time": "2021-02-24 02:09:45.356120", "score": "0.4218", "loss": "10.4352", "code": "void basic()throws Exception{(\">\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 46, "n_pass": [320, 36, 32]}
{"time": "2021-02-24 02:09:47.989930", "score": "0.4885", "loss": "10.4587", "code": "void basic()throws Exception{(\"\" + \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 45, "n_pass": [323, 37, 33]}
{"time": "2021-02-24 02:09:50.758670", "score": "0.4885", "loss": "10.4587", "code": "void basic()throws Exception{(\"\"+ \"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 44, "n_pass": [325, 38, 34]}
{"time": "2021-02-24 02:09:53.374313", "score": "0.4885", "loss": "10.4587", "code": "void basic()throws Exception{(\"\"+\"\"); expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 43, "n_pass": [327, 39, 35]}
{"time": "2021-02-24 02:09:55.979777", "score": "0.4885", "loss": "10.4587", "code": "void basic()throws Exception{(\"\"+\"\");expectedResponsePayload (\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 42, "n_pass": [332, 40, 36]}
{"time": "2021-02-24 02:10:01.219865", "score": "0.4885", "loss": "10.4587", "code": "void basic()throws Exception{(\"\"+\"\");expectedResponsePayload(\"\"+\"\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 41, "n_pass": [334, 42, 37]}
{"time": "2021-02-24 02:10:16.314979", "score": "0.6079", "loss": "11.3736", "code": "void basic()throws Exception{(\"\"+\"\");expectedResponsePayload(\"\"+\"\");sendRequest(withPayload).andExpect(payload()); }", "n_tokens": 40, "n_pass": [397, 47, 38]}
{"time": "2021-02-24 02:10:18.920404", "score": "0.6079", "loss": "11.3736", "code": "void basic()throws Exception{(\"\"+\"\");expectedResponsePayload(\"\"+\"\");sendRequest(withPayload).andExpect(payload());}", "n_tokens": 39, "n_pass": [400, 48, 39]}

Minimal simplified code:
void basic()throws Exception{(""+"");expectedResponsePayload(""+"");sendRequest(withPayload).andExpect(payload());}

