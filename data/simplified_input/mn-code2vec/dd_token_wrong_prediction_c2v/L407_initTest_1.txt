
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wso2-attic__product-emm/modules/integration/tests-integration/src/test/java/org/wso2/mdm/integration/mobileDevice/OracleMobileDeviceManagement_initTest.java
method_name = initTest
method_body = @BeforeClass(alwaysRun = true, groups = { Constants.MobileDeviceManagement.MOBILE_DEVICE_MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = "Bearer " + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }
predict, score, loss = setUp, 0.49033957719802856, 9.305059432983398

Trace of simplified code(s):
{"time": "2021-02-24 14:32:41.692645", "score": "0.4903", "loss": "9.3051", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MobileDeviceManagement.MOBILE_DEVICE_MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 108, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 14:32:47.079929", "score": "0.3952", "loss": "8.9429", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 102, "n_pass": [47, 3, 2]}
{"time": "2021-02-24 14:32:52.417636", "score": "0.3952", "loss": "8.9429", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 99, "n_pass": [95, 5, 3]}
{"time": "2021-02-24 14:33:00.372922", "score": "0.3708", "loss": "8.9852", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { super.init(TestUserMode._ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 96, "n_pass": [102, 8, 4]}
{"time": "2021-02-24 14:33:03.001288", "score": "0.4534", "loss": "8.7546", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { super.init(TestUserMode._ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 92, "n_pass": [109, 9, 5]}
{"time": "2021-02-24 14:33:05.629224", "score": "0.4899", "loss": "8.7281", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { super.init(TestUserMode._ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, JSON, accessTokenString); }", "n_tokens": 88, "n_pass": [114, 10, 6]}
{"time": "2021-02-24 14:33:13.630734", "score": "0.3472", "loss": "9.392", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (TestUserMode._ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, JSON, accessTokenString); }", "n_tokens": 85, "n_pass": [129, 13, 7]}
{"time": "2021-02-24 14:33:23.698844", "score": "0.3549", "loss": "9.384", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, JSON, accessTokenString); }", "n_tokens": 83, "n_pass": [207, 16, 8]}
{"time": "2021-02-24 14:33:26.387598", "score": "0.5654", "loss": "9.3974", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, JSON, accessTokenString); }", "n_tokens": 81, "n_pass": [210, 17, 9]}
{"time": "2021-02-24 14:33:29.023166", "score": "0.5805", "loss": "9.5225", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURL, JSON, accessTokenString); }", "n_tokens": 79, "n_pass": [214, 18, 10]}
{"time": "2021-02-24 14:33:37.362169", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 77, "n_pass": [226, 21, 11]}
{"time": "2021-02-24 14:33:39.988387", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun= true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 76, "n_pass": [235, 22, 12]}
{"time": "2021-02-24 14:33:42.610750", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun=true, groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 75, "n_pass": [237, 23, 13]}
{"time": "2021-02-24 14:33:45.234018", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun=true,groups = { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 74, "n_pass": [240, 24, 14]}
{"time": "2021-02-24 14:33:47.879463", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun=true,groups= { Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 73, "n_pass": [242, 25, 15]}
{"time": "2021-02-24 14:33:50.502610", "score": "0.3468", "loss": "9.4836", "code": "@BeforeClass(alwaysRun=true,groups={ Constants.MANAGEMENT_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 72, "n_pass": [244, 26, 16]}
{"time": "2021-02-24 14:33:53.147102", "score": "0.4631", "loss": "9.9728", "code": "@BeforeClass(alwaysRun=true,groups={ Constants_GROUP })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 70, "n_pass": [247, 27, 17]}
{"time": "2021-02-24 14:33:55.766992", "score": "0.4869", "loss": "10.0745", "code": "@BeforeClass(alwaysRun=true,groups={ Constants })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = new MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 68, "n_pass": [248, 28, 18]}
{"time": "2021-02-24 14:34:01.437378", "score": "0.4144", "loss": "10.7194", "code": "@BeforeClass(alwaysRun=true,groups={ Constants })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 66, "n_pass": [270, 30, 19]}
{"time": "2021-02-24 14:34:04.065772", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest() throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 64, "n_pass": [287, 31, 20]}
{"time": "2021-02-24 14:34:16.491531", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception { (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 63, "n_pass": [380, 33, 21]}
{"time": "2021-02-24 14:34:19.104646", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{ (_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 62, "n_pass": [383, 34, 22]}
{"time": "2021-02-24 14:34:21.715800", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(_ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 61, "n_pass": [385, 35, 23]}
{"time": "2021-02-24 14:34:24.354600", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN); accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 60, "n_pass": [387, 36, 24]}
{"time": "2021-02-24 14:34:27.363079", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString = \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 59, "n_pass": [391, 37, 25]}
{"time": "2021-02-24 14:34:29.986532", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString= \"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 58, "n_pass": [393, 38, 26]}
{"time": "2021-02-24 14:34:32.615751", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\" + OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 57, "n_pass": [395, 39, 27]}
{"time": "2021-02-24 14:34:35.239136", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+ OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 56, "n_pass": [398, 40, 28]}
{"time": "2021-02-24 14:34:37.855779", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken(); this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 55, "n_pass": [400, 41, 29]}
{"time": "2021-02-24 14:34:43.121352", "score": "0.4266", "loss": "10.7609", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();this.client = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 54, "n_pass": [407, 43, 30]}
{"time": "2021-02-24 14:34:45.800863", "score": "0.4943", "loss": "10.5533", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient = MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 53, "n_pass": [409, 44, 31]}
{"time": "2021-02-24 14:34:48.810338", "score": "0.4943", "loss": "10.5533", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient= MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 52, "n_pass": [411, 45, 32]}
{"time": "2021-02-24 14:34:51.434333", "score": "0.4943", "loss": "10.5533", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient=MDMHttpClient(backendHTTPSURLJSON, accessTokenString); }", "n_tokens": 51, "n_pass": [413, 46, 33]}
{"time": "2021-02-24 14:34:54.070631", "score": "0.5371", "loss": "10.4179", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient=MDMHttpClient(JSON, accessTokenString); }", "n_tokens": 50, "n_pass": [416, 47, 34]}
{"time": "2021-02-24 14:34:56.717391", "score": "0.5371", "loss": "10.4179", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient=MDMHttpClient(JSON,accessTokenString); }", "n_tokens": 49, "n_pass": [419, 48, 35]}
{"time": "2021-02-24 14:34:59.331552", "score": "0.5371", "loss": "10.4179", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient=MDMHttpClient(JSON,accessTokenString);}", "n_tokens": 48, "n_pass": [423, 49, 36]}
{"time": "2021-02-24 14:35:01.961488", "score": "0.5371", "loss": "10.4179", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil.getOAuthToken();thisclient=MDMHttpClient(JSON,accessTokenString);}", "n_tokens": 47, "n_pass": [435, 50, 37]}
{"time": "2021-02-24 14:35:05.737089", "score": "0.4864", "loss": "11.2379", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtilgetOAuthToken();thisclient=MDMHttpClient(JSON,accessTokenString);}", "n_tokens": 46, "n_pass": [457, 51, 38]}
{"time": "2021-02-24 14:35:08.363981", "score": "0.3919", "loss": "10.0988", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest()throws Exception{(ADMIN);accessTokenString=\"\"+OAuthUtil();thisclient=MDMHttpClient(JSON,accessTokenString);}", "n_tokens": 45, "n_pass": [458, 52, 39]}

Minimal simplified code:
@BeforeClass(alwaysRun=true,groups={})void initTest()throws Exception{(ADMIN);accessTokenString=""+OAuthUtil();thisclient=MDMHttpClient(JSON,accessTokenString);}

