
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Piasy__AppRTC-Android/libjingle_peerconnection/src/main/java/org/webrtc/HardwareVideoEncoderFactory_getCodecProperties.java
method_name = getCodecProperties
method_body = private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9: return new HashMap<String, String>(); case H264: Map<String, String> properties = new HashMap<>(); properties.put(VideoCodecInfo.H264_FMTP_LEVEL_ASYMMETRY_ALLOWED, "1"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, "1"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException("Unsupported codec: " + type); } }
predict, score, loss = prepare, 0.5207353234291077, 14.405251502990723

Trace of simplified code(s):
{"time": "2021-02-23 17:34:26.297943", "score": "0.5239", "loss": "14.4428", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9: return new HashMap<String, String>(); case H264: Map<String, String> properties = new HashMap<>(); properties.put(VideoCodecInfo.H264_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\"Unsupported codec: \" + type); } }", "n_tokens": 226, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 17:34:29.038092", "score": "0.684", "loss": "14.9307", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9:; case H264: Map<String, String> properties = new HashMap<>(); properties.put(VideoCodecInfo.H264_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\"Unsupported codec: \" + type); } }", "n_tokens": 212, "n_pass": [47, 2, 2]}
{"time": "2021-02-23 17:35:01.973600", "score": "0.6735", "loss": "15.6295", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo.H264_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\"Unsupported codec: \" + type); } }", "n_tokens": 209, "n_pass": [194, 14, 3]}
{"time": "2021-02-23 17:35:04.669073", "score": "0.5986", "loss": "15.3286", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\"Unsupported codec: \" + type); } }", "n_tokens": 206, "n_pass": [196, 15, 4]}
{"time": "2021-02-23 17:35:47.930657", "score": "0.4337", "loss": "14.306", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8: case VP9:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 202, "n_pass": [226, 31, 5]}
{"time": "2021-02-23 17:35:51.094900", "score": "0.4601", "loss": "15.3762", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:VP9:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 199, "n_pass": [242, 32, 6]}
{"time": "2021-02-23 17:35:53.794554", "score": "0.5583", "loss": "15.3824", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_FMTP_LEVEL_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 196, "n_pass": [243, 33, 7]}
{"time": "2021-02-23 17:36:01.910188", "score": "0.391", "loss": "14.7969", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_BASELINE_3_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 192, "n_pass": [256, 36, 8]}
{"time": "2021-02-23 17:36:31.583511", "score": "0.4056", "loss": "14.6642", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PROFILE_LEVEL_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 188, "n_pass": [278, 47, 9]}
{"time": "2021-02-23 17:36:56.391150", "score": "0.4638", "loss": "15.3418", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo.H264_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 184, "n_pass": [323, 56, 10]}
{"time": "2021-02-23 17:37:01.775524", "score": "0.5617", "loss": "16.8158", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo4_CONSTRAINED_HIGH_3_1 : VideoCodecInfo.H264_CONSTRAINED_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 180, "n_pass": [326, 58, 11]}
{"time": "2021-02-23 17:37:07.188327", "score": "0.4325", "loss": "16.1973", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo4_CONSTRAINED_1 : VideoCodecInfo.H264_CONSTRAINED_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 176, "n_pass": [328, 60, 12]}
{"time": "2021-02-23 17:37:37.355087", "score": "0.9339", "loss": "17.3738", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); return properties; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 172, "n_pass": [378, 71, 13]}
{"time": "2021-02-23 17:37:42.771578", "score": "0.9702", "loss": "20.4849", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1);; default: throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 168, "n_pass": [383, 73, 14]}
{"time": "2021-02-23 17:37:45.476157", "score": "0.9671", "loss": "19.7506", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); throw new IllegalArgumentException(\" \" + type); } }", "n_tokens": 164, "n_pass": [384, 74, 15]}
{"time": "2021-02-23 17:37:48.180348", "score": "0.6708", "loss": "16.041", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String, String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 160, "n_pass": [385, 75, 16]}
{"time": "2021-02-23 17:37:51.311858", "score": "0.9541", "loss": "19.5964", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfo64_ASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 157, "n_pass": [406, 76, 17]}
{"time": "2021-02-23 17:37:54.878153", "score": "0.9404", "loss": "17.8351", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 154, "n_pass": [413, 77, 18]}
{"time": "2021-02-23 17:37:57.579468", "score": "0.9174", "loss": "18.3908", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo4_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo.H264_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 150, "n_pass": [418, 78, 19]}
{"time": "2021-02-23 17:38:02.968535", "score": "0.7007", "loss": "15.2687", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo4_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfo4_FMTP_ID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 146, "n_pass": [424, 80, 20]}
{"time": "2021-02-23 17:38:05.671132", "score": "0.6085", "loss": "15.1518", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfo4_FMTP_PACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 142, "n_pass": [425, 81, 21]}
{"time": "2021-02-23 17:38:16.395349", "score": "0.4817", "loss": "15.5644", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoPACKETIZATION_MODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 138, "n_pass": [462, 84, 22]}
{"time": "2021-02-23 17:38:30.124896", "score": "0.6898", "loss": "15.7308", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo1 : VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 136, "n_pass": [583, 87, 23]}
{"time": "2021-02-23 17:38:38.223521", "score": "0.6001", "loss": "15.3499", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H264_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 134, "n_pass": [594, 90, 24]}
{"time": "2021-02-23 17:38:43.607986", "score": "0.5254", "loss": "16.2544", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2_CONSTRAINED_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 132, "n_pass": [598, 92, 25]}
{"time": "2021-02-23 17:38:46.313831", "score": "0.587", "loss": "15.0145", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2_1); IllegalArgumentException(\" \" + type); } }", "n_tokens": 130, "n_pass": [599, 93, 26]}
{"time": "2021-02-23 17:38:49.001420", "score": "0.6933", "loss": "15.3052", "code": "private Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 128, "n_pass": [600, 94, 27]}
{"time": "2021-02-23 17:38:54.380997", "score": "0.4766", "loss": "15.0132", "code": " Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 127, "n_pass": [610, 96, 28]}
{"time": "2021-02-23 17:38:57.080348", "score": "0.4774", "loss": "15.6895", "code": "Map<String, String> getCodecProperties(VideoCodecType type, boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 126, "n_pass": [611, 97, 29]}
{"time": "2021-02-23 17:39:05.589053", "score": "0.8789", "loss": "17.1658", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile) { switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 125, "n_pass": [626, 100, 30]}
{"time": "2021-02-23 17:39:08.308898", "score": "0.7844", "loss": "15.9809", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case H264: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 124, "n_pass": [631, 101, 31]}
{"time": "2021-02-23 17:39:14.139198", "score": "0.6528", "loss": "15.5531", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap<>();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 122, "n_pass": [641, 103, 32]}
{"time": "2021-02-23 17:39:17.672405", "score": "0.5639", "loss": "15.1434", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap();put(VideoCodecInfoASYMMETRY_ALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 120, "n_pass": [650, 104, 33]}
{"time": "2021-02-23 17:39:20.372511", "score": "0.5854", "loss": "15.155", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2); IllegalArgumentException(\" \" + type); } }", "n_tokens": 118, "n_pass": [654, 105, 34]}
{"time": "2021-02-23 17:39:31.114476", "score": "0.6042", "loss": "15.22", "code": "Map<String, String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 116, "n_pass": [677, 109, 35]}
{"time": "2021-02-23 17:39:34.248488", "score": "0.5794", "loss": "15.1322", "code": "Map<String,String> getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 115, "n_pass": [689, 110, 36]}
{"time": "2021-02-23 17:39:36.932991", "score": "0.9029", "loss": "18.107", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:; case 64: Map<String> properties = new HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 114, "n_pass": [692, 111, 37]}
{"time": "2021-02-23 17:39:39.609990", "score": "0.5823", "loss": "15.103", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = new HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 112, "n_pass": [710, 112, 38]}
{"time": "2021-02-23 17:39:43.143139", "score": "0.6088", "loss": "15.2207", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap();put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 110, "n_pass": [718, 113, 39]}
{"time": "2021-02-23 17:39:45.843797", "score": "0.7673", "loss": "16.0715", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap;put(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 108, "n_pass": [720, 114, 40]}
{"time": "2021-02-23 17:39:48.543693", "score": "0.6587", "loss": "15.253", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties.put(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 106, "n_pass": [721, 115, 41]}
{"time": "2021-02-23 17:39:51.245186", "score": "0.6926", "loss": "15.5983", "code": "Map<String,String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 104, "n_pass": [728, 116, 42]}
{"time": "2021-02-23 17:39:59.740263", "score": "0.4241", "loss": "14.9149", "code": "Map<StringString>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 103, "n_pass": [755, 119, 43]}
{"time": "2021-02-23 17:40:02.424321", "score": "0.7152", "loss": "15.6483", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){ switch(type) { case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 102, "n_pass": [756, 120, 44]}
{"time": "2021-02-23 17:40:21.826225", "score": "0.7152", "loss": "15.6483", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type) { case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 101, "n_pass": [904, 123, 45]}
{"time": "2021-02-23 17:40:24.500957", "score": "0.7152", "loss": "15.6483", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){ case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 100, "n_pass": [909, 124, 46]}
{"time": "2021-02-23 17:40:27.178486", "score": "0.7152", "loss": "15.6483", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case VP8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 99, "n_pass": [911, 125, 47]}
{"time": "2021-02-23 17:40:29.860152", "score": "0.6295", "loss": "15.3829", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 64: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 98, "n_pass": [914, 126, 48]}
{"time": "2021-02-23 17:40:32.972933", "score": "0.6273", "loss": "15.3817", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4: Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 97, "n_pass": [919, 127, 49]}
{"time": "2021-02-23 17:40:35.651726", "score": "0.6273", "loss": "15.3817", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String> properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 96, "n_pass": [922, 128, 50]}
{"time": "2021-02-23 17:40:38.745342", "score": "0.6273", "loss": "15.3817", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties = HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 95, "n_pass": [927, 129, 51]}
{"time": "2021-02-23 17:40:41.424613", "score": "0.6273", "loss": "15.3817", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties= HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 94, "n_pass": [929, 130, 52]}
{"time": "2021-02-23 17:40:44.105186", "score": "0.6273", "loss": "15.3817", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(VideoCodecInfoALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 93, "n_pass": [931, 131, 53]}
{"time": "2021-02-23 17:40:46.794511", "score": "0.6339", "loss": "15.3103", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED, \"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 92, "n_pass": [934, 132, 54]}
{"time": "2021-02-23 17:40:49.473353", "score": "0.6339", "loss": "15.3103", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"1\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 91, "n_pass": [937, 133, 55]}
{"time": "2021-02-23 17:40:52.148072", "score": "0.6435", "loss": "15.3696", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\"); properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 90, "n_pass": [939, 134, 56]}
{"time": "2021-02-23 17:40:54.828405", "score": "0.6435", "loss": "15.3696", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(VideoCodecInfoMODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 89, "n_pass": [943, 135, 57]}
{"time": "2021-02-23 17:40:57.521684", "score": "0.6748", "loss": "15.4296", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE, \"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 88, "n_pass": [946, 136, 58]}
{"time": "2021-02-23 17:41:00.201930", "score": "0.6748", "loss": "15.4296", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"1\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 87, "n_pass": [949, 137, 59]}
{"time": "2021-02-23 17:41:02.903296", "score": "0.7357", "loss": "15.7276", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\"); properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 86, "n_pass": [951, 138, 60]}
{"time": "2021-02-23 17:41:05.586915", "score": "0.7357", "loss": "15.7276", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(VideoCodecInfoID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 85, "n_pass": [955, 139, 61]}
{"time": "2021-02-23 17:41:10.976806", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID, highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 84, "n_pass": [960, 141, 62]}
{"time": "2021-02-23 17:41:13.663834", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile ? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 83, "n_pass": [963, 142, 63]}
{"time": "2021-02-23 17:41:16.342004", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile? VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 82, "n_pass": [965, 143, 64]}
{"time": "2021-02-23 17:41:19.020855", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo: VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 81, "n_pass": [967, 144, 65]}
{"time": "2021-02-23 17:41:21.706149", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H2);(\" \" + type); } }", "n_tokens": 80, "n_pass": [970, 145, 66]}
{"time": "2021-02-23 17:41:27.056518", "score": "0.6986", "loss": "15.5099", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\" \" + type); } }", "n_tokens": 79, "n_pass": [974, 147, 67]}
{"time": "2021-02-23 17:41:29.735586", "score": "0.699", "loss": "15.5085", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\"\" + type); } }", "n_tokens": 78, "n_pass": [979, 148, 68]}
{"time": "2021-02-23 17:41:32.424835", "score": "0.699", "loss": "15.5085", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\"\"+ type); } }", "n_tokens": 77, "n_pass": [981, 149, 69]}
{"time": "2021-02-23 17:41:35.108764", "score": "0.699", "loss": "15.5085", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\"\"+type); } }", "n_tokens": 76, "n_pass": [983, 150, 70]}
{"time": "2021-02-23 17:41:37.785292", "score": "0.699", "loss": "15.5085", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\"\"+type);} }", "n_tokens": 75, "n_pass": [987, 151, 71]}
{"time": "2021-02-23 17:41:40.459633", "score": "0.699", "loss": "15.5085", "code": "Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,\"\");properties(MODE,\"\");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(\"\"+type);}}", "n_tokens": 74, "n_pass": [989, 152, 72]}

Minimal simplified code:
Map<String>getCodecProperties(VideoCodecType type,boolean highProfile){switch(type){case 8:case 4:Map<String>properties=HashMap(ALLOWED,"");properties(MODE,"");properties.put(ID,highProfile?VideoCodecInfo:VideoCodecInfo.H);(""+type);}}

