
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-uma/src/test/java/org/forgerock/openam/uma/rest/UmaEnabledFilterTest_checkResult.java
method_name = checkResult
method_body = private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).failedWithException().isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }
predict, score, loss = expectFailure, 0.4811057448387146, 13.170665740966797

Trace of simplified code(s):
{"time": "2021-02-23 21:47:57.169966", "score": "0.4811", "loss": "13.1707", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).failedWithException().isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }", "n_tokens": 68, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:48:02.946574", "score": "0.572", "loss": "13.4148", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }", "n_tokens": 64, "n_pass": [53, 3, 2]}
{"time": "2021-02-23 21:48:06.045824", "score": "0.5013", "loss": "13.7382", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } else { assertThat(promise).succeeded(); } }", "n_tokens": 62, "n_pass": [101, 4, 3]}
{"time": "2021-02-23 21:48:08.701612", "score": "0.4937", "loss": "13.0829", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } { assertThat(promise).succeeded(); } }", "n_tokens": 60, "n_pass": [103, 5, 4]}
{"time": "2021-02-23 21:48:11.392148", "score": "0.4494", "loss": "13.274", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 58, "n_pass": [105, 6, 5]}
{"time": "2021-02-23 21:48:14.067261", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 56, "n_pass": [110, 7, 6]}
{"time": "2021-02-23 21:48:23.041522", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 55, "n_pass": [197, 8, 7]}
{"time": "2021-02-23 21:48:25.707577", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException> promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 54, "n_pass": [201, 9, 8]}
{"time": "2021-02-23 21:48:28.365703", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise) { if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 53, "n_pass": [204, 10, 9]}
{"time": "2021-02-23 21:48:31.032643", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){ if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 52, "n_pass": [207, 11, 10]}
{"time": "2021-02-23 21:48:33.691384", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if (expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 51, "n_pass": [209, 12, 11]}
{"time": "2021-02-23 21:48:36.337268", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure) { assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 50, "n_pass": [211, 13, 12]}
{"time": "2021-02-23 21:48:38.994420", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){ assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 49, "n_pass": [215, 14, 13]}
{"time": "2021-02-23 21:48:41.652956", "score": "0.4494", "loss": "13.274", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){assertThat(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 48, "n_pass": [217, 15, 14]}
{"time": "2021-02-23 21:48:44.296810", "score": "0.4425", "loss": "13.0072", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf(NotSupportedException); } {(promise).succeeded(); } }", "n_tokens": 47, "n_pass": [218, 16, 15]}
{"time": "2021-02-23 21:48:47.374576", "score": "0.4373", "loss": "12.5626", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf(); } {(promise).succeeded(); } }", "n_tokens": 46, "n_pass": [225, 17, 16]}
{"time": "2021-02-23 21:48:50.021596", "score": "0.4373", "loss": "12.5626", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf();} {(promise).succeeded(); } }", "n_tokens": 45, "n_pass": [228, 18, 17]}
{"time": "2021-02-23 21:48:52.662950", "score": "0.4373", "loss": "12.5626", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf();}{(promise).succeeded(); } }", "n_tokens": 44, "n_pass": [230, 19, 18]}
{"time": "2021-02-23 21:48:58.197992", "score": "0.4373", "loss": "12.5626", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf();}{(promise).succeeded();} }", "n_tokens": 43, "n_pass": [283, 20, 19]}
{"time": "2021-02-23 21:49:00.845467", "score": "0.4373", "loss": "12.5626", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf();}{(promise).succeeded();}}", "n_tokens": 42, "n_pass": [284, 21, 20]}

Minimal simplified code:
void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(promise).isInstanceOf();}{(promise).succeeded();}}

