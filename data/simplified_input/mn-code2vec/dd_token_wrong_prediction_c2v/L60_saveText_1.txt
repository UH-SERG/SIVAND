
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/main/java/zemberek/ner/PerceptronNer_saveText.java
method_name = saveText
method_body = public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id + ".ner.model"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format("%s %.3f", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }
predict, score, loss = setUp, 0.3361060619354248, 13.112585067749023

Trace of simplified code(s):
{"time": "2021-02-24 04:04:19.863957", "score": "0.4245", "loss": "13.4609", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id + \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:04:26.468068", "score": "0.9762", "loss": "22.0444", "code": "public void saveText() throws IOException { Path file = outRoot.resolve(id + \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 112, "n_pass": [94, 3, 2]}
{"time": "2021-02-24 04:04:29.158705", "score": "0.5998", "loss": "14.0899", "code": "public void saveText() throws IOException { Path= outRoot.resolve(id + \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 109, "n_pass": [98, 4, 3]}
{"time": "2021-02-24 04:04:31.795030", "score": "0.7247", "loss": "14.5197", "code": "public void saveText() throws IOException { Path.resolve(id + \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 106, "n_pass": [99, 5, 4]}
{"time": "2021-02-24 04:04:34.426634", "score": "0.7626", "loss": "15.3222", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 103, "n_pass": [101, 6, 5]}
{"time": "2021-02-24 04:04:40.092407", "score": "0.8817", "loss": "16.9634", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 99, "n_pass": [108, 8, 6]}
{"time": "2021-02-24 04:04:42.766880", "score": "0.8824", "loss": "17.1324", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 95, "n_pass": [109, 9, 7]}
{"time": "2021-02-24 04:04:45.440415", "score": "0.9095", "loss": "17.5428", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 91, "n_pass": [111, 10, 8]}
{"time": "2021-02-24 04:04:48.075019", "score": "0.9237", "loss": "17.5357", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 87, "n_pass": [113, 11, 9]}
{"time": "2021-02-24 04:04:50.694082", "score": "0.927", "loss": "17.6592", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 83, "n_pass": [116, 12, 10]}
{"time": "2021-02-24 04:04:53.322075", "score": "0.9343", "loss": "19.0312", "code": "public void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 79, "n_pass": [122, 13, 11]}
{"time": "2021-02-24 04:05:00.876918", "score": "0.9343", "loss": "19.0312", "code": " void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 78, "n_pass": [191, 15, 12]}
{"time": "2021-02-24 04:05:03.499461", "score": "0.9343", "loss": "19.0312", "code": "void saveText() throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 77, "n_pass": [192, 16, 13]}
{"time": "2021-02-24 04:05:06.513671", "score": "0.9343", "loss": "19.0312", "code": "void saveText()throws IOException { Path.resolve( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 76, "n_pass": [197, 17, 14]}
{"time": "2021-02-24 04:05:09.148252", "score": "0.5625", "loss": "15.1959", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = sparseWeights.map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 74, "n_pass": [202, 18, 15]}
{"time": "2021-02-24 04:05:15.231420", "score": "0.4524", "loss": "15.0628", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s .format(\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 72, "n_pass": [213, 20, 16]}
{"time": "2021-02-24 04:05:17.926894", "score": "0.4712", "loss": "15.4337", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\".3f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 70, "n_pass": [216, 21, 17]}
{"time": "2021-02-24 04:05:20.554206", "score": "0.4712", "loss": "15.4337", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\"f\", s,(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 68, "n_pass": [218, 22, 18]}
{"time": "2021-02-24 04:05:23.175070", "score": "0.5033", "loss": "15.2915", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 66, "n_pass": [221, 23, 19]}
{"time": "2021-02-24 04:05:25.852530", "score": "0.5241", "loss": "15.1483", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); Files.write(); }", "n_tokens": 64, "n_pass": [226, 24, 20]}
{"time": "2021-02-24 04:05:28.482237", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write(); }", "n_tokens": 62, "n_pass": [230, 25, 21]}
{"time": "2021-02-24 04:05:43.261564", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException { Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 61, "n_pass": [325, 28, 22]}
{"time": "2021-02-24 04:05:46.658868", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{ Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 60, "n_pass": [334, 29, 23]}
{"time": "2021-02-24 04:05:49.286801", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path( \".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 59, "n_pass": [336, 30, 24]}
{"time": "2021-02-24 04:05:54.558911", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\".ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 58, "n_pass": [339, 32, 25]}
{"time": "2021-02-24 04:05:57.206916", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"ner.model\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 57, "n_pass": [341, 33, 26]}
{"time": "2021-02-24 04:06:02.451160", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"nermodel\"); List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 56, "n_pass": [343, 35, 27]}
{"time": "2021-02-24 04:06:07.776753", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String> lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 55, "n_pass": [348, 37, 28]}
{"time": "2021-02-24 04:06:10.777475", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines = map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 54, "n_pass": [353, 38, 29]}
{"time": "2021-02-24 04:06:13.388618", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines= map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 53, "n_pass": [355, 39, 30]}
{"time": "2021-02-24 04:06:16.015661", "score": "0.5733", "loss": "15.0478", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=map(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 52, "n_pass": [357, 40, 31]}
{"time": "2021-02-24 04:06:18.627565", "score": "0.5774", "loss": "15.1685", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=(s (\"f\", (s))).collect(toList()); write();}", "n_tokens": 51, "n_pass": [358, 41, 32]}
{"time": "2021-02-24 04:06:21.259141", "score": "0.5774", "loss": "15.1685", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=(s(\"f\", (s))).collect(toList()); write();}", "n_tokens": 50, "n_pass": [361, 42, 33]}
{"time": "2021-02-24 04:06:23.871790", "score": "0.5778", "loss": "15.2102", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=(s(\"\", (s))).collect(toList()); write();}", "n_tokens": 49, "n_pass": [364, 43, 34]}
{"time": "2021-02-24 04:06:26.525022", "score": "0.5778", "loss": "15.2102", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=(s(\"\",(s))).collect(toList()); write();}", "n_tokens": 48, "n_pass": [367, 44, 35]}
{"time": "2021-02-24 04:06:29.147172", "score": "0.5778", "loss": "15.2102", "code": "void saveText()throws IOException{Path(\"nermodel\");List<String>lines=(s(\"\",(s))).collect(toList());write();}", "n_tokens": 47, "n_pass": [381, 45, 36]}

Minimal simplified code:
void saveText()throws IOException{Path("nermodel");List<String>lines=(s("",(s))).collect(toList());write();}

