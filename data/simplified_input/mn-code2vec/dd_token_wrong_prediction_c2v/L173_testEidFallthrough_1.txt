
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/entitybroker/core-providers/src/test/org/sakaiproject/entitybroker/providers/UserEntityProviderGetUserByIdEidTest_testEidFallthrough.java
method_name = testEidFallthrough
method_body = @Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser("1234")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting("user.explicit.id.only", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid("1234")); }
predict, score, loss = setUp, 0.27601903676986694, 19.760957717895508

Trace of simplified code(s):
{"time": "2021-02-24 05:05:16.879836", "score": "0.2642", "loss": "19.5672", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.explicit.id.only\", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:05:26.083480", "score": "0.224", "loss": "19.5038", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.explicit.id.only\", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 112, "n_pass": [99, 4, 2]}
{"time": "2021-02-24 05:05:31.479095", "score": "0.279", "loss": "19.4213", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 108, "n_pass": [114, 6, 3]}
{"time": "2021-02-24 05:05:34.170373", "score": "0.473", "loss": "19.4104", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"1234\")); }", "n_tokens": 104, "n_pass": [120, 7, 4]}
{"time": "2021-02-24 05:05:44.720392", "score": "0.3428", "loss": "18.9314", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 102, "n_pass": [209, 10, 5]}
{"time": "2021-02-24 05:05:50.002785", "score": "0.3722", "loss": "18.9037", "code": "@Testpublic void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 101, "n_pass": [216, 12, 6]}
{"time": "2021-02-24 05:05:56.488726", "score": "0.2002", "loss": "17.0209", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 100, "n_pass": [224, 14, 7]}
{"time": "2021-02-24 05:05:59.118581", "score": "0.3365", "loss": "18.5811", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 98, "n_pass": [229, 15, 8]}
{"time": "2021-02-24 05:06:01.752001", "score": "0.3478", "loss": "18.7163", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 96, "n_pass": [231, 16, 9]}
{"time": "2021-02-24 05:06:07.080180", "score": "0.224", "loss": "15.7989", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 94, "n_pass": [241, 18, 10]}
{"time": "2021-02-24 05:06:17.741972", "score": "0.3243", "loss": "15.9072", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); Assert.assertEquals(user,(\"34\")); }", "n_tokens": 92, "n_pass": [255, 22, 11]}
{"time": "2021-02-24 05:06:20.374235", "score": "0.3153", "loss": "15.8751", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals(user,(\"34\")); }", "n_tokens": 90, "n_pass": [263, 23, 12]}
{"time": "2021-02-24 05:06:22.997133", "score": "0.3108", "loss": "16.0207", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"34\")); }", "n_tokens": 88, "n_pass": [265, 24, 13]}
{"time": "2021-02-24 05:06:25.625845", "score": "0.2563", "loss": "16.0832", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException { Mockito((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 86, "n_pass": [267, 25, 14]}
{"time": "2021-02-24 05:06:32.081120", "score": "0.2541", "loss": "16.0592", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 84, "n_pass": [283, 27, 15]}
{"time": "2021-02-24 05:06:55.852970", "score": "0.2541", "loss": "16.0592", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 83, "n_pass": [413, 34, 16]}
{"time": "2021-02-24 05:07:03.716247", "score": "0.3269", "loss": "17.9416", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 82, "n_pass": [421, 37, 17]}
{"time": "2021-02-24 05:07:14.247395", "score": "0.3274", "loss": "17.9992", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn(); Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 81, "n_pass": [431, 41, 18]}
{"time": "2021-02-24 05:07:16.874855", "score": "0.3274", "loss": "17.9992", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito.when(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 80, "n_pass": [434, 42, 19]}
{"time": "2021-02-24 05:07:19.502782", "score": "0.3777", "loss": "16.901", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockitowhen(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 79, "n_pass": [436, 43, 20]}
{"time": "2021-02-24 05:07:22.125898", "score": "0.3681", "loss": "16.9668", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs.getConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 78, "n_pass": [437, 44, 21]}
{"time": "2021-02-24 05:07:24.799232", "score": "0.3015", "loss": "16.3025", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhsgetConfigurationSetting(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 77, "n_pass": [440, 45, 22]}
{"time": "2021-02-24 05:07:27.427593", "score": "0.3015", "loss": "16.3025", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"only\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 76, "n_pass": [441, 46, 23]}
{"time": "2021-02-24 05:07:30.047973", "score": "0.2667", "loss": "17.6857", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\", false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 75, "n_pass": [444, 47, 24]}
{"time": "2021-02-24 05:07:32.663335", "score": "0.2667", "loss": "17.6857", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false); assertEquals((\"\")); }", "n_tokens": 74, "n_pass": [447, 48, 25]}
{"time": "2021-02-24 05:07:37.984013", "score": "0.2667", "loss": "17.6857", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);assertEquals((\"\")); }", "n_tokens": 73, "n_pass": [457, 50, 26]}
{"time": "2021-02-24 05:07:40.599765", "score": "0.2823", "loss": "17.7579", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\")); }", "n_tokens": 72, "n_pass": [458, 51, 27]}
{"time": "2021-02-24 05:07:43.223118", "score": "0.2823", "loss": "17.7579", "code": "@Testpublic void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\"));}", "n_tokens": 71, "n_pass": [466, 52, 28]}
{"time": "2021-02-24 05:07:45.837901", "score": "0.2387", "loss": "18.078", "code": "@Test void testEidFallthrough()throws UserNotDefinedException {((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\"));}", "n_tokens": 70, "n_pass": [470, 53, 29]}
{"time": "2021-02-24 05:07:49.598649", "score": "0.2387", "loss": "18.078", "code": "@Test void testEidFallthrough()throws UserNotDefinedException{((anyString())).thenThrow(UserNotDefinedException.class);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\"));}", "n_tokens": 69, "n_pass": [480, 54, 30]}
{"time": "2021-02-24 05:07:52.243495", "score": "0.2159", "loss": "17.9637", "code": "@Test void testEidFallthrough()throws UserNotDefinedException{((anyString())).thenThrow(UserNotDefinedExceptionclass);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\"));}", "n_tokens": 68, "n_pass": [493, 55, 31]}
{"time": "2021-02-24 05:07:54.854682", "score": "0.2159", "loss": "17.9637", "code": "@Test void testEidFallthrough()throws UserNotDefinedException{((anyString())).thenThrow(UserNotDefinedException);Mockito.when(getUser(\"234\")).thenReturn();Mockito(dhs(\"\",false)).thenReturn(false);((\"\"));}", "n_tokens": 67, "n_pass": [494, 56, 32]}

Minimal simplified code:
@Test void testEidFallthrough()throws UserNotDefinedException{((anyString())).thenThrow(UserNotDefinedException);Mockito.when(getUser("234")).thenReturn();Mockito(dhs("",false)).thenReturn(false);((""));}

