
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_646_findLongestChain.java
method_name = findLongestChain
method_body = public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); int result = 0; int n = pairs.length; int i = -1; while (++i < n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }
predict, score, loss = sort, 0.4923049211502075, 16.46900177001953

Trace of simplified code(s):
{"time": "2021-02-23 03:11:45.893479", "score": "0.6452", "loss": "17.6311", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); int result = 0; int n = pairs.length; int i = -1; while (++i < n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 167, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 03:11:49.207340", "score": "0.83", "loss": "17.4521", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); int result = 0;; int i = -1; while (++i < n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 157, "n_pass": [50, 2, 2]}
{"time": "2021-02-23 03:11:52.043724", "score": "0.7181", "loss": "17.1338", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); int result = 0;; while (++i < n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 147, "n_pass": [51, 3, 3]}
{"time": "2021-02-23 03:11:54.908865", "score": "0.8947", "loss": "17.9226", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while (++i < n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 137, "n_pass": [65, 4, 4]}
{"time": "2021-02-23 03:11:57.773162", "score": "0.9746", "loss": "20.2333", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { result++; int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 132, "n_pass": [106, 5, 5]}
{"time": "2021-02-23 03:12:00.615387", "score": "0.9865", "loss": "20.671", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i + 1 < n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 127, "n_pass": [108, 6, 6]}
{"time": "2021-02-23 03:12:03.348611", "score": "0.984", "loss": "20.4954", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i< n && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 122, "n_pass": [113, 7, 7]}
{"time": "2021-02-23 03:12:06.585185", "score": "0.9891", "loss": "21.2894", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[i + 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 119, "n_pass": [183, 8, 8]}
{"time": "2021-02-23 03:12:09.387459", "score": "0.9905", "loss": "21.7224", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1][0] <= curEnd) { i++; } } return result; }", "n_tokens": 116, "n_pass": [185, 9, 9]}
{"time": "2021-02-23 03:12:12.276131", "score": "0.9856", "loss": "21.5467", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { i++; } } return result; }", "n_tokens": 113, "n_pass": [187, 10, 10]}
{"time": "2021-02-23 03:12:15.146790", "score": "0.9856", "loss": "21.5564", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } return result; }", "n_tokens": 110, "n_pass": [191, 11, 11]}
{"time": "2021-02-23 03:12:17.958115", "score": "0.9885", "loss": "22.1663", "code": "public int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 107, "n_pass": [194, 12, 12]}
{"time": "2021-02-23 03:12:20.699628", "score": "0.9885", "loss": "22.1663", "code": "int findLongestChain(int[][] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 105, "n_pass": [196, 13, 13]}
{"time": "2021-02-23 03:12:23.876218", "score": "0.9672", "loss": "21.452", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o1, o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 103, "n_pass": [200, 14, 14]}
{"time": "2021-02-23 03:12:29.790453", "score": "0.9954", "loss": "23.8579", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 101, "n_pass": [209, 16, 15]}
{"time": "2021-02-23 03:12:32.634088", "score": "0.9577", "loss": "21.2704", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2) -> o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 99, "n_pass": [210, 17, 16]}
{"time": "2021-02-23 03:12:35.356175", "score": "0.9485", "loss": "21.1473", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2) o1[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 96, "n_pass": [212, 18, 17]}
{"time": "2021-02-23 03:12:38.083489", "score": "0.9305", "loss": "20.8531", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)[1] - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 93, "n_pass": [213, 19, 18]}
{"time": "2021-02-23 03:12:40.868745", "score": "0.9372", "loss": "21.1058", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2) - o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 90, "n_pass": [214, 20, 19]}
{"time": "2021-02-23 03:12:43.656096", "score": "0.9612", "loss": "21.0266", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n) { int curEnd = pairs[i][1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 87, "n_pass": [215, 21, 20]}
{"time": "2021-02-23 03:12:46.414216", "score": "0.9622", "loss": "21.2102", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n) { int curEnd = pairs[1]; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 84, "n_pass": [224, 22, 21]}
{"time": "2021-02-23 03:12:49.144374", "score": "0.9597", "loss": "21.2936", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n) { int curEnd = pairs; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 81, "n_pass": [225, 23, 22]}
{"time": "2021-02-23 03:12:55.089458", "score": "0.9636", "loss": "21.2926", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n) { int curEnd ; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 78, "n_pass": [256, 25, 23]}
{"time": "2021-02-23 03:13:06.680928", "score": "0.9636", "loss": "21.2926", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ int curEnd ; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 77, "n_pass": [347, 27, 24]}
{"time": "2021-02-23 03:13:09.518696", "score": "0.9636", "loss": "21.2926", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){int curEnd ; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 76, "n_pass": [349, 28, 25]}
{"time": "2021-02-23 03:13:12.243472", "score": "0.9731", "loss": "21.0232", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ curEnd ; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 75, "n_pass": [350, 29, 26]}
{"time": "2021-02-23 03:13:14.955144", "score": "0.9865", "loss": "21.5751", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ ; while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 73, "n_pass": [351, 30, 27]}
{"time": "2021-02-23 03:13:17.724434", "score": "0.9865", "loss": "21.5751", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <= curEnd) { ; } } ; }", "n_tokens": 71, "n_pass": [352, 31, 28]}
{"time": "2021-02-23 03:13:20.929486", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { ; } } ; }", "n_tokens": 69, "n_pass": [361, 32, 29]}
{"time": "2021-02-23 03:13:23.652010", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } ; }", "n_tokens": 67, "n_pass": [364, 33, 30]}
{"time": "2021-02-23 03:13:26.343597", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[] pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 65, "n_pass": [367, 34, 31]}
{"time": "2021-02-23 03:13:29.978865", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[]pairs) { Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 64, "n_pass": [376, 35, 32]}
{"time": "2021-02-23 03:13:32.684510", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[]pairs){ Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 63, "n_pass": [379, 36, 33]}
{"time": "2021-02-23 03:13:35.410453", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs, (o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 62, "n_pass": [381, 37, 34]}
{"time": "2021-02-23 03:13:40.925780", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o2)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 61, "n_pass": [388, 39, 35]}
{"time": "2021-02-23 03:13:43.640401", "score": "0.985", "loss": "21.6665", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)o2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 60, "n_pass": [391, 40, 36]}
{"time": "2021-02-23 03:13:46.356403", "score": "0.9839", "loss": "21.7073", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)2[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 59, "n_pass": [393, 41, 37]}
{"time": "2021-02-23 03:13:49.046856", "score": "0.9766", "loss": "22.2939", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)[1]); while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 58, "n_pass": [394, 42, 38]}
{"time": "2021-02-23 03:13:51.884351", "score": "0.9766", "loss": "22.2939", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)[1]);while ( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 57, "n_pass": [400, 43, 39]}
{"time": "2021-02-23 03:13:54.584519", "score": "0.9766", "loss": "22.2939", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)[1]);while( n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 56, "n_pass": [402, 44, 40]}
{"time": "2021-02-23 03:13:57.295420", "score": "0.9766", "loss": "22.2939", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs,(o)[1]);while(n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 55, "n_pass": [404, 45, 41]}
{"time": "2021-02-23 03:14:03.606269", "score": "0.9699", "loss": "21.7256", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs(o)[1]);while(n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 54, "n_pass": [436, 47, 42]}
{"time": "2021-02-23 03:14:06.316821", "score": "0.9486", "loss": "21.4681", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){ while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 53, "n_pass": [438, 48, 43]}
{"time": "2021-02-23 03:14:16.516745", "score": "0.9486", "loss": "21.4681", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while (i && pairs[ 1] <curEnd) { } } }", "n_tokens": 52, "n_pass": [505, 50, 44]}
{"time": "2021-02-23 03:14:19.230234", "score": "0.9486", "loss": "21.4681", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i && pairs[ 1] <curEnd) { } } }", "n_tokens": 51, "n_pass": [506, 51, 45]}
{"time": "2021-02-23 03:14:21.940727", "score": "0.9486", "loss": "21.4681", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&& pairs[ 1] <curEnd) { } } }", "n_tokens": 50, "n_pass": [509, 52, 46]}
{"time": "2021-02-23 03:14:24.633387", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i& pairs[ 1] <curEnd) { } } }", "n_tokens": 49, "n_pass": [510, 53, 47]}
{"time": "2021-02-23 03:14:27.463583", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[ 1] <curEnd) { } } }", "n_tokens": 48, "n_pass": [512, 54, 48]}
{"time": "2021-02-23 03:14:30.301028", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1] <curEnd) { } } }", "n_tokens": 47, "n_pass": [515, 55, 49]}
{"time": "2021-02-23 03:14:33.122937", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd) { } } }", "n_tokens": 46, "n_pass": [518, 56, 50]}
{"time": "2021-02-23 03:14:35.924086", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd){ } } }", "n_tokens": 45, "n_pass": [522, 57, 51]}
{"time": "2021-02-23 03:14:38.757170", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd){} } }", "n_tokens": 44, "n_pass": [524, 58, 52]}
{"time": "2021-02-23 03:14:41.584269", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd){}} }", "n_tokens": 43, "n_pass": [526, 59, 53]}
{"time": "2021-02-23 03:14:44.341306", "score": "0.9385", "loss": "21.3628", "code": "int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd){}}}", "n_tokens": 42, "n_pass": [528, 60, 54]}

Minimal simplified code:
int findLongestChain(int[]pairs){Arrays.sort(pairs()[1]);while(n){while(i&pairs[1]<curEnd){}}}

