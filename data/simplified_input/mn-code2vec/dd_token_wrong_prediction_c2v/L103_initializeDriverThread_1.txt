
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/com/o3dr/services/android/lib/util/googleApi/GoogleApiClientManager_initializeDriverThread.java
method_name = initializeDriverThread
method_body = private void initializeDriverThread() { if (mDriverThread == null || mDriverThread.isInterrupted()) { mDriverThread = new Thread(mDriverRunnable, "GAC Manager Driver Thread"); mDriverThread.start(); } }
predict, score, loss = start, 0.8895788788795471, 20.97825813293457

Trace of simplified code(s):
{"time": "2021-02-24 09:10:32.502874", "score": "0.8896", "loss": "20.9783", "code": "private void initializeDriverThread() { if (mDriverThread == null || mDriverThread.isInterrupted()) { mDriverThread = new Thread(mDriverRunnable, \"GAC Manager Driver Thread\"); mDriverThread.start(); } }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:10:36.148350", "score": "0.976", "loss": "22.3295", "code": "private void initializeDriverThread() { if (mDriverThread == null .isInterrupted()) { mDriverThread = new Thread(mDriverRunnable, \"GAC Manager Driver Thread\"); mDriverThread.start(); } }", "n_tokens": 61, "n_pass": [49, 2, 2]}
{"time": "2021-02-24 09:10:38.878540", "score": "0.9768", "loss": "23.3624", "code": "private void initializeDriverThread() { if (mDriverThread == null ) { mDriverThread = new Thread(mDriverRunnable, \"GAC Manager Driver Thread\"); mDriverThread.start(); } }", "n_tokens": 57, "n_pass": [50, 3, 3]}
{"time": "2021-02-24 09:10:41.658106", "score": "0.9793", "loss": "22.4287", "code": "private void initializeDriverThread() { if (mDriverThread == null ) { new Thread(mDriverRunnable, \"GAC Manager Driver Thread\"); mDriverThread.start(); } }", "n_tokens": 53, "n_pass": [52, 4, 4]}
{"time": "2021-02-24 09:10:44.456902", "score": "0.6961", "loss": "20.4257", "code": "private void initializeDriverThread() { if (mDriverThread == null ) { new Thread(mDriverRunnable, \"Driver Thread\"); mDriverThread.start(); } }", "n_tokens": 49, "n_pass": [55, 5, 5]}
{"time": "2021-02-24 09:10:50.803052", "score": "0.9721", "loss": "22.4838", "code": "private void initializeDriverThread() { if (mDriverThread == null ) { new Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 47, "n_pass": [92, 7, 6]}
{"time": "2021-02-24 09:10:58.991350", "score": "0.9721", "loss": "22.4838", "code": "void initializeDriverThread() { if (mDriverThread == null ) { new Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 45, "n_pass": [99, 10, 7]}
{"time": "2021-02-24 09:11:02.199370", "score": "0.9988", "loss": "26.6324", "code": "void initializeDriverThread() { if (mDriverThread= null ) { new Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 43, "n_pass": [106, 11, 8]}
{"time": "2021-02-24 09:11:04.916873", "score": "0.9924", "loss": "23.4891", "code": "void initializeDriverThread() { if (mDriverThreadnull ) { new Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 41, "n_pass": [107, 12, 9]}
{"time": "2021-02-24 09:11:07.651649", "score": "0.9924", "loss": "23.4891", "code": "void initializeDriverThread() { if (mDriverThread) { new Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 39, "n_pass": [108, 13, 10]}
{"time": "2021-02-24 09:11:10.367354", "score": "0.9752", "loss": "22.5851", "code": "void initializeDriverThread() { if (mDriverThread) { Thread(mDriverRunnable, \"Thread\"); mDriverThread.start(); } }", "n_tokens": 37, "n_pass": [111, 14, 11]}
{"time": "2021-02-24 09:11:13.070420", "score": "0.9784", "loss": "24.2337", "code": "void initializeDriverThread() { if (mDriverThread) { Thread( \"Thread\"); mDriverThread.start(); } }", "n_tokens": 35, "n_pass": [113, 15, 12]}
{"time": "2021-02-24 09:11:26.339392", "score": "0.9784", "loss": "24.2337", "code": "void initializeDriverThread() { if (mDriverThread) { Thread(\"Thread\"); mDriverThread.start(); } }", "n_tokens": 34, "n_pass": [165, 18, 13]}
{"time": "2021-02-24 09:11:29.041420", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread() { if (mDriverThread) { Thread(\"\"); mDriverThread.start(); } }", "n_tokens": 33, "n_pass": [166, 19, 14]}
{"time": "2021-02-24 09:11:31.740208", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread() { if (mDriverThread) { Thread(\"\");mDriverThread.start(); } }", "n_tokens": 32, "n_pass": [170, 20, 15]}
{"time": "2021-02-24 09:11:37.162430", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread() { if (mDriverThread) { Thread(\"\");mDriverThread.start();} }", "n_tokens": 31, "n_pass": [177, 22, 16]}
{"time": "2021-02-24 09:11:40.763108", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread(){ if (mDriverThread) { Thread(\"\");mDriverThread.start();} }", "n_tokens": 30, "n_pass": [185, 23, 17]}
{"time": "2021-02-24 09:11:43.467062", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread(){if (mDriverThread) { Thread(\"\");mDriverThread.start();} }", "n_tokens": 29, "n_pass": [187, 24, 18]}
{"time": "2021-02-24 09:11:46.169966", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread(){if(mDriverThread) { Thread(\"\");mDriverThread.start();} }", "n_tokens": 28, "n_pass": [189, 25, 19]}
{"time": "2021-02-24 09:11:48.915763", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread(){if(mDriverThread){ Thread(\"\");mDriverThread.start();} }", "n_tokens": 27, "n_pass": [193, 26, 20]}
{"time": "2021-02-24 09:11:51.633737", "score": "0.9338", "loss": "21.4181", "code": "void initializeDriverThread(){if(mDriverThread){Thread(\"\");mDriverThread.start();} }", "n_tokens": 26, "n_pass": [195, 27, 21]}
{"time": "2021-02-24 09:11:54.353265", "score": "0.9295", "loss": "21.9612", "code": "void initializeDriverThread(){if(mDriverThread){(\"\");mDriverThread.start();} }", "n_tokens": 25, "n_pass": [196, 28, 22]}
{"time": "2021-02-24 09:12:01.082332", "score": "0.9295", "loss": "21.9612", "code": "void initializeDriverThread(){if(mDriverThread){(\"\");mDriverThread.start();}}", "n_tokens": 24, "n_pass": [223, 30, 23]}

Minimal simplified code:
void initializeDriverThread(){if(mDriverThread){("");mDriverThread.start();}}

