
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceTlsMAC_setKey.java
method_name = setKey
method_body = public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }
predict, score, loss = initCipher, 0.2903245985507965, 13.56755256652832

Trace of simplified code(s):
{"time": "2021-02-24 04:36:59.622804", "score": "0.2903", "loss": "13.5676", "code": "public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 73, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:37:05.302822", "score": "0.2111", "loss": "13.666", "code": "public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 68, "n_pass": [53, 3, 2]}
{"time": "2021-02-24 04:37:07.932100", "score": "0.2109", "loss": "13.6705", "code": "public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { ; } }", "n_tokens": 63, "n_pass": [58, 4, 3]}
{"time": "2021-02-24 04:37:13.917261", "score": "0.2109", "loss": "13.6705", "code": "public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 60, "n_pass": [101, 6, 4]}
{"time": "2021-02-24 04:37:16.534666", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 58, "n_pass": [103, 7, 5]}
{"time": "2021-02-24 04:37:28.781809", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 57, "n_pass": [189, 9, 6]}
{"time": "2021-02-24 04:37:31.399854", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 56, "n_pass": [192, 10, 7]}
{"time": "2021-02-24 04:37:34.024427", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff,int keyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 55, "n_pass": [197, 11, 8]}
{"time": "2021-02-24 04:37:36.635246", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff,int keyLen){ try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 54, "n_pass": [202, 12, 9]}
{"time": "2021-02-24 04:37:39.268815", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff,int keyLen){try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 53, "n_pass": [204, 13, 10]}
{"time": "2021-02-24 04:37:41.898042", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{ mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 52, "n_pass": [206, 14, 11]}
{"time": "2021-02-24 04:37:44.507917", "score": "0.2109", "loss": "13.6705", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 51, "n_pass": [208, 15, 12]}
{"time": "2021-02-24 04:37:49.802368", "score": "0.2766", "loss": "12.9076", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init( SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 50, "n_pass": [213, 17, 13]}
{"time": "2021-02-24 04:37:52.432542", "score": "0.2766", "loss": "12.9076", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 49, "n_pass": [214, 18, 14]}
{"time": "2021-02-24 04:37:55.082394", "score": "0.2433", "loss": "12.6139", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLen, algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 48, "n_pass": [217, 19, 15]}
{"time": "2021-02-24 04:37:57.705146", "score": "0.2433", "loss": "12.6139", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLen,algorithm)); } catch (InvalidKeyException e) {} }", "n_tokens": 47, "n_pass": [220, 20, 16]}
{"time": "2021-02-24 04:38:00.334348", "score": "0.2433", "loss": "12.6139", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLen,algorithm));} catch (InvalidKeyException e) {} }", "n_tokens": 46, "n_pass": [225, 21, 17]}
{"time": "2021-02-24 04:38:02.951416", "score": "0.2433", "loss": "12.6139", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLen,algorithm));}catch (InvalidKeyException e) {} }", "n_tokens": 45, "n_pass": [227, 22, 18]}
{"time": "2021-02-24 04:38:09.034712", "score": "0.2445", "loss": "13.0609", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLenalgorithm));}catch (InvalidKeyException e) {} }", "n_tokens": 44, "n_pass": [261, 24, 19]}
{"time": "2021-02-24 04:38:11.654728", "score": "0.228", "loss": "12.8733", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init(SecretKeySpec(keyLen));}catch (InvalidKeyException e) {} }", "n_tokens": 43, "n_pass": [262, 25, 20]}
{"time": "2021-02-24 04:38:17.653691", "score": "0.3741", "loss": "13.8286", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init((keyLen));}catch (InvalidKeyException e) {} }", "n_tokens": 42, "n_pass": [297, 27, 21]}
{"time": "2021-02-24 04:38:25.127966", "score": "0.3741", "loss": "13.8286", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init((keyLen));}catch(InvalidKeyException e) {} }", "n_tokens": 41, "n_pass": [347, 29, 22]}
{"time": "2021-02-24 04:38:27.786349", "score": "0.3741", "loss": "13.8286", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init((keyLen));}catch(InvalidKeyException e){} }", "n_tokens": 40, "n_pass": [353, 30, 23]}
{"time": "2021-02-24 04:38:30.406477", "score": "0.3741", "loss": "13.8286", "code": "void setKey(byte[]key,int keyOff,int keyLen){try{mac.init((keyLen));}catch(InvalidKeyException e){}}", "n_tokens": 39, "n_pass": [356, 31, 24]}

Minimal simplified code:
void setKey(byte[]key,int keyOff,int keyLen){try{mac.init((keyLen));}catch(InvalidKeyException e){}}

