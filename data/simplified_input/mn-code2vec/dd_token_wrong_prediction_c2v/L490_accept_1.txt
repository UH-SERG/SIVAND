
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-connectors/spring-cloud-core/src/main/java/org/springframework/cloud/service/UriBasedServiceInfoCreator_accept.java
method_name = accept
method_body = @Override public boolean accept(UriBasedServiceData serviceData) { String uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith(uriScheme + "://")) { return true; } } return false; }
predict, score, loss = setServiceData, 0.8202940821647644, 8.310907363891602

Trace of simplified code(s):
{"time": "2021-02-23 02:28:43.754597", "score": "0.8203", "loss": "8.3109", "code": "@Override public boolean accept(UriBasedServiceData serviceData) { String uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith(uriScheme + \"://\")) { return true; } } return false; }", "n_tokens": 79, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 02:28:46.489442", "score": "0.5878", "loss": "8.3482", "code": " boolean accept(UriBasedServiceData serviceData) { String uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith(uriScheme + \"://\")) { return true; } } return false; }", "n_tokens": 75, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 02:28:49.822539", "score": "0.6823", "loss": "8.7894", "code": " boolean accept(UriBasedServiceData serviceData) { String uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith(uriScheme + \"://\")) { } } return false; }", "n_tokens": 70, "n_pass": [56, 3, 3]}
{"time": "2021-02-23 02:28:56.074760", "score": "0.8934", "loss": "8.4364", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith(uriScheme + \"://\")) { } } return false; }", "n_tokens": 68, "n_pass": [109, 5, 4]}
{"time": "2021-02-23 02:29:01.491413", "score": "0.9719", "loss": "8.7196", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith( \"://\")) { } } return false; }", "n_tokens": 65, "n_pass": [123, 7, 5]}
{"time": "2021-02-23 02:29:04.197796", "score": "0.9945", "loss": "12.2602", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = serviceData.getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 62, "n_pass": [129, 8, 6]}
{"time": "2021-02-23 02:29:07.321130", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri(); for (String uriScheme : uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 60, "n_pass": [139, 9, 7]}
{"time": "2021-02-23 02:29:16.937120", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for (String uriScheme : uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 59, "n_pass": [216, 10, 8]}
{"time": "2021-02-23 02:29:19.637447", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme : uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 58, "n_pass": [217, 11, 9]}
{"time": "2021-02-23 02:29:22.351439", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme: uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 57, "n_pass": [222, 12, 10]}
{"time": "2021-02-23 02:29:25.070043", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes) { if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 56, "n_pass": [224, 13, 11]}
{"time": "2021-02-23 02:29:27.792961", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){ if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 55, "n_pass": [227, 14, 12]}
{"time": "2021-02-23 02:29:30.478424", "score": "0.4078", "loss": "7.997", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){if (uriString.startsWith( \"://\")) { } } ; }", "n_tokens": 54, "n_pass": [229, 15, 13]}
{"time": "2021-02-23 02:29:33.154537", "score": "0.9415", "loss": "7.2434", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"://\")) { } } ; }", "n_tokens": 52, "n_pass": [232, 16, 14]}
{"time": "2021-02-23 02:29:35.823947", "score": "0.9652", "loss": "7.5665", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } ; }", "n_tokens": 50, "n_pass": [235, 17, 15]}
{"time": "2021-02-23 02:29:38.533786", "score": "0.9652", "loss": "7.5665", "code": " boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 48, "n_pass": [241, 18, 16]}
{"time": "2021-02-23 02:29:41.215704", "score": "0.9652", "loss": "7.5665", "code": "boolean accept(UriBasedServiceData serviceData) { uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 47, "n_pass": [243, 19, 17]}
{"time": "2021-02-23 02:29:44.781689", "score": "0.9652", "loss": "7.5665", "code": "boolean accept(UriBasedServiceData serviceData){ uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 46, "n_pass": [252, 20, 18]}
{"time": "2021-02-23 02:29:47.468984", "score": "0.9652", "loss": "7.5665", "code": "boolean accept(UriBasedServiceData serviceData){uriString = getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 45, "n_pass": [254, 21, 19]}
{"time": "2021-02-23 02:29:50.144651", "score": "0.9652", "loss": "7.5665", "code": "boolean accept(UriBasedServiceData serviceData){uriString= getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 44, "n_pass": [256, 22, 20]}
{"time": "2021-02-23 02:29:52.853787", "score": "0.9652", "loss": "7.5665", "code": "boolean accept(UriBasedServiceData serviceData){uriString=getUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 43, "n_pass": [258, 23, 21]}
{"time": "2021-02-23 02:29:56.427785", "score": "0.9116", "loss": "8.1787", "code": "boolean accept(UriBasedServiceData serviceData){uriStringgetUri();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 42, "n_pass": [292, 24, 22]}
{"time": "2021-02-23 02:29:59.098858", "score": "0.7779", "loss": "6.3658", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if (startsWith( \"/\")) { } } }", "n_tokens": 41, "n_pass": [293, 25, 23]}
{"time": "2021-02-23 02:30:05.161488", "score": "0.7779", "loss": "6.3658", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if(startsWith( \"/\")) { } } }", "n_tokens": 40, "n_pass": [344, 26, 24]}
{"time": "2021-02-23 02:30:07.867474", "score": "0.8811", "loss": "8.2967", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if(( \"/\")) { } } }", "n_tokens": 39, "n_pass": [345, 27, 25]}
{"time": "2021-02-23 02:30:10.708028", "score": "0.8811", "loss": "8.2967", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"/\")) { } } }", "n_tokens": 38, "n_pass": [347, 28, 26]}
{"time": "2021-02-23 02:30:13.417725", "score": "0.8956", "loss": "8.5722", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"\")) { } } }", "n_tokens": 37, "n_pass": [349, 29, 27]}
{"time": "2021-02-23 02:30:16.091695", "score": "0.8956", "loss": "8.5722", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"\")){ } } }", "n_tokens": 36, "n_pass": [353, 30, 28]}
{"time": "2021-02-23 02:30:18.796871", "score": "0.8956", "loss": "8.5722", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"\")){} } }", "n_tokens": 35, "n_pass": [355, 31, 29]}
{"time": "2021-02-23 02:30:21.477377", "score": "0.8956", "loss": "8.5722", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"\")){}} }", "n_tokens": 34, "n_pass": [357, 32, 30]}
{"time": "2021-02-23 02:30:24.179582", "score": "0.8956", "loss": "8.5722", "code": "boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if((\"\")){}}}", "n_tokens": 33, "n_pass": [359, 33, 31]}

Minimal simplified code:
boolean accept(UriBasedServiceData serviceData){uriString();for(String uriScheme:uriSchemes){if(("")){}}}

