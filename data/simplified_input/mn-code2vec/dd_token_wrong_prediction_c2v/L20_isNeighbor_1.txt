
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/dataless-classifier/src/main/java/edu/illinois/cs/cogcomp/datalessclassification/hierarchy/UnorderedTree_isNeighbor.java
method_name = isNeighbor
method_body = @Override public boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }
predict, score, loss = contains, 0.8878330588340759, 13.113825798034668

Trace of simplified code(s):
{"time": "2021-02-24 11:40:53.889155", "score": "0.8878", "loss": "13.1138", "code": "@Override public boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:40:56.631249", "score": "0.9223", "loss": "13.6918", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 61, "n_pass": [44, 2, 2]}
{"time": "2021-02-24 11:40:59.442540", "score": "0.7911", "loss": "12.4958", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 57, "n_pass": [50, 3, 3]}
{"time": "2021-02-24 11:41:02.225667", "score": "0.8785", "loss": "16.0007", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2))  return getNeighbors(v1).contains(v2); }", "n_tokens": 53, "n_pass": [54, 4, 4]}
{"time": "2021-02-24 11:41:07.742946", "score": "0.7659", "loss": "15.0416", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2))  return getNeighbors.contains(v2); }", "n_tokens": 49, "n_pass": [56, 6, 5]}
{"time": "2021-02-24 11:41:13.723630", "score": "0.9754", "loss": "17.9234", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex| !containsVertex(v2))  return getNeighbors.contains(v2); }", "n_tokens": 47, "n_pass": [109, 8, 6]}
{"time": "2021-02-24 11:41:16.466035", "score": "0.9775", "loss": "18.176", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex| (v2))  return getNeighbors.contains(v2); }", "n_tokens": 45, "n_pass": [110, 9, 7]}
{"time": "2021-02-24 11:41:25.181899", "score": "0.9333", "loss": "16.8671", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex(v2))  return getNeighbors.contains(v2); }", "n_tokens": 43, "n_pass": [132, 12, 8]}
{"time": "2021-02-24 11:41:33.811778", "score": "0.9771", "loss": "18.262", "code": " boolean isNeighbor(V v1, V v2) { if ((v2))  return getNeighbors.contains(v2); }", "n_tokens": 41, "n_pass": [153, 15, 9]}
{"time": "2021-02-24 11:41:47.531239", "score": "0.9777", "loss": "18.2995", "code": " boolean isNeighbor(V v1, V v2) { if ((2))  return getNeighbors.contains(v2); }", "n_tokens": 40, "n_pass": [215, 18, 10]}
{"time": "2021-02-24 11:41:50.273594", "score": "0.9777", "loss": "18.2995", "code": " boolean isNeighbor(V v1, V v2) { if ((2)) return getNeighbors.contains(v2); }", "n_tokens": 39, "n_pass": [219, 19, 11]}
{"time": "2021-02-24 11:41:52.995883", "score": "0.9777", "loss": "18.2995", "code": " boolean isNeighbor(V v1, V v2) { if ((2))return getNeighbors.contains(v2); }", "n_tokens": 38, "n_pass": [220, 20, 12]}
{"time": "2021-02-24 11:42:03.963425", "score": "0.4213", "loss": "16.1901", "code": " boolean isNeighbor(V v1, V v2) { if ((2))return getNeighbors.contains(2); }", "n_tokens": 37, "n_pass": [227, 24, 13]}
{"time": "2021-02-24 11:42:09.402777", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v1, V v2) { if ((2))return getNeighbors.contains(2); }", "n_tokens": 36, "n_pass": [232, 26, 14]}
{"time": "2021-02-24 11:42:13.019148", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v, V v2) { if ((2))return getNeighbors.contains(2); }", "n_tokens": 35, "n_pass": [240, 27, 15]}
{"time": "2021-02-24 11:42:15.734393", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v2) { if ((2))return getNeighbors.contains(2); }", "n_tokens": 34, "n_pass": [242, 28, 16]}
{"time": "2021-02-24 11:42:18.441475", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v) { if ((2))return getNeighbors.contains(2); }", "n_tokens": 33, "n_pass": [246, 29, 17]}
{"time": "2021-02-24 11:42:21.188399", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v){ if ((2))return getNeighbors.contains(2); }", "n_tokens": 32, "n_pass": [248, 30, 18]}
{"time": "2021-02-24 11:42:23.901898", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v){if ((2))return getNeighbors.contains(2); }", "n_tokens": 31, "n_pass": [250, 31, 19]}
{"time": "2021-02-24 11:42:26.633722", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v){if((2))return getNeighbors.contains(2); }", "n_tokens": 30, "n_pass": [252, 32, 20]}
{"time": "2021-02-24 11:42:41.650443", "score": "0.4213", "loss": "16.1901", "code": "boolean isNeighbor(V v,V v){if((2))return getNeighbors.contains(2);}", "n_tokens": 29, "n_pass": [284, 37, 21]}

Minimal simplified code:
boolean isNeighbor(V v,V v){if((2))return getNeighbors.contains(2);}

