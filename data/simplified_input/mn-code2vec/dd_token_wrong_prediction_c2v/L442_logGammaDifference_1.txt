
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/Dirichlet_logGammaDifference.java
method_name = logGammaDifference
method_body = public static double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }
predict, score, loss = score, 0.13444428145885468, 16.360370635986328

Trace of simplified code(s):
{"time": "2021-02-24 12:28:14.169204", "score": "0.1344", "loss": "16.3604", "code": "public static double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 82, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 12:28:29.356107", "score": "0.1344", "loss": "16.3604", "code": "static double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 80, "n_pass": [92, 6, 2]}
{"time": "2021-02-24 12:28:32.086478", "score": "0.1344", "loss": "16.3604", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 78, "n_pass": [93, 7, 3]}
{"time": "2021-02-24 12:28:40.816129", "score": "0.1593", "loss": "16.3452", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 75, "n_pass": [109, 10, 4]}
{"time": "2021-02-24 12:28:43.559334", "score": "0.1773", "loss": "16.3401", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i0;  n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 72, "n_pass": [111, 11, 5]}
{"time": "2021-02-24 12:28:49.110023", "score": "0.2341", "loss": "16.1012", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } return result; }", "n_tokens": 69, "n_pass": [119, 13, 6]}
{"time": "2021-02-24 12:28:51.861146", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } ; }", "n_tokens": 66, "n_pass": [122, 14, 7]}
{"time": "2021-02-24 12:29:13.760633", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z, int n) { double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 64, "n_pass": [201, 19, 8]}
{"time": "2021-02-24 12:29:17.405488", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z,int n) { double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 63, "n_pass": [211, 20, 9]}
{"time": "2021-02-24 12:29:20.149275", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z,int n){ double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 62, "n_pass": [216, 21, 10]}
{"time": "2021-02-24 12:29:22.883410", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z,int n){double result = 0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 61, "n_pass": [218, 22, 11]}
{"time": "2021-02-24 12:29:31.107027", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z,int n){double result= 0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 60, "n_pass": [222, 25, 12]}
{"time": "2021-02-24 12:29:33.847485", "score": "0.1839", "loss": "16.1917", "code": "double logGammaDifference(double z,int n){double result=0.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 59, "n_pass": [224, 26, 13]}
{"time": "2021-02-24 12:29:36.608154", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0; for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 58, "n_pass": [225, 27, 14]}
{"time": "2021-02-24 12:29:42.140465", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0;for (int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 57, "n_pass": [229, 29, 15]}
{"time": "2021-02-24 12:29:44.920755", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i0;  n; i++) { result += Math.log(zi); } }", "n_tokens": 56, "n_pass": [231, 30, 16]}
{"time": "2021-02-24 12:29:53.217145", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;  n; i++) { result += Math.log(zi); } }", "n_tokens": 55, "n_pass": [236, 33, 17]}
{"time": "2021-02-24 12:29:55.957526", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i; n; i++) { result += Math.log(zi); } }", "n_tokens": 54, "n_pass": [238, 34, 18]}
{"time": "2021-02-24 12:29:58.704709", "score": "0.3244", "loss": "16.5278", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;n; i++) { result += Math.log(zi); } }", "n_tokens": 53, "n_pass": [239, 35, 19]}
{"time": "2021-02-24 12:30:01.464129", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) { result += Math.log(zi); } }", "n_tokens": 52, "n_pass": [240, 36, 20]}
{"time": "2021-02-24 12:30:31.374314", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) {result += Math.log(zi); } }", "n_tokens": 51, "n_pass": [306, 45, 21]}
{"time": "2021-02-24 12:30:34.138970", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) {result+= Math.log(zi); } }", "n_tokens": 50, "n_pass": [307, 46, 22]}
{"time": "2021-02-24 12:30:40.062532", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) {result+=Math.log(zi); } }", "n_tokens": 49, "n_pass": [310, 48, 23]}
{"time": "2021-02-24 12:30:51.092073", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) {result+=Math.log(zi);} }", "n_tokens": 48, "n_pass": [319, 52, 24]}
{"time": "2021-02-24 12:30:53.830711", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;; i++) {result+=Math.log(zi);}}", "n_tokens": 47, "n_pass": [321, 53, 25]}
{"time": "2021-02-24 12:31:11.221331", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;;i++) {result+=Math.log(zi);}}", "n_tokens": 46, "n_pass": [350, 59, 26]}
{"time": "2021-02-24 12:31:13.984413", "score": "0.3159", "loss": "16.5376", "code": "double logGammaDifference(double z,int n){double result=.0;for(int i;;i++){result+=Math.log(zi);}}", "n_tokens": 45, "n_pass": [355, 60, 27]}

Minimal simplified code:
double logGammaDifference(double z,int n){double result=.0;for(int i;;i++){result+=Math.log(zi);}}

