
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/test/java/com/questdb/ql/analytic/PrevAnalyticFunctionTest_testVirtualColumn.java
method_name = testVirtualColumn
method_body = @Test public void testVirtualColumn() throws Exception { final String expected = "str\tboo\tcol0\tf\td\tcol1\n" + "BZ\ttrue\t1.673692762852\t0.6235\t1.050231933594\tfalse\n" + "XX\tfalse\t567.512389898300\t0.7780\t566.734375000000\tfalse\n" + "KK\tfalse\t0.550908231392\t0.5509\t0.000013792171\tfalse\n" + "AX\tfalse\t0.020375759351\t0.0204\t0.000000567185\tfalse\n" + "AX\ttrue\t-511.515212714672\t0.4848\t-512.000000000000\tfalse\n" + "AX\ttrue\t0.972335502505\t0.2969\t0.675451681018\ttrue\n" + "BZ\tfalse\t0.904826603830\t0.5725\t0.332301996648\ttrue\n" + "BZ\ttrue\t0.596724832495\t0.5967\t0.000001752813\tfalse\n" + "AX\tfalse\t0.161007094177\t0.1609\t0.000076281818\ttrue\n" + "BZ\tfalse\t0.350913291764\t0.3509\t0.000000005555\ttrue\n" + "XX\tfalse\t0.727417677178\t0.7274\t0.000002473130\tfalse\n" + "KK\tfalse\t633.483788669109\t0.5619\t632.921875000000\tfalse\n" + "AX\tfalse\t0.543259224330\t0.5433\t0.000000020896\tfalse\n" + "BZ\tfalse\t0.551534552826\t0.5442\t0.007371325744\tfalse\n" + "XX\ttrue\t0.674562766890\t0.6746\t0.000000014643\tfalse\n" + "AX\ttrue\t512.821699082851\t0.8217\t512.000000000000\tfalse\n" + "XX\ttrue\t864.359103977680\t0.3591\t864.000000000000\ttrue\n" + "AX\ttrue\t0.682714500508\t0.6827\t0.000000157437\ttrue\n" + "BZ\tfalse\t-841.883159995079\t0.1168\t-842.000000000000\tfalse\n" + "BZ\tfalse\t0.496688359286\t0.4967\t0.000032060649\tfalse\n"; assertThat(expected, "select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc", true); assertThat(expected, "select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'", true); }
predict, score, loss = alterAddTwoCol, 0.3455721437931061, 14.47645378112793

Trace of simplified code(s):
{"time": "2021-02-24 13:40:00.116221", "score": "0.3456", "loss": "14.4765", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t0.0204\\t0.000000567185\\tfalse\\n\" + \"AX\\ttrue\\t-511.515212714672\\t0.4848\\t-512.000000000000\\tfalse\\n\" + \"AX\\ttrue\\t0.972335502505\\t0.2969\\t0.675451681018\\ttrue\\n\" + \"BZ\\tfalse\\t0.904826603830\\t0.5725\\t0.332301996648\\ttrue\\n\" + \"BZ\\ttrue\\t0.596724832495\\t0.5967\\t0.000001752813\\tfalse\\n\" + \"AX\\tfalse\\t0.161007094177\\t0.1609\\t0.000076281818\\ttrue\\n\" + \"BZ\\tfalse\\t0.350913291764\\t0.3509\\t0.000000005555\\ttrue\\n\" + \"XX\\tfalse\\t0.727417677178\\t0.7274\\t0.000002473130\\tfalse\\n\" + \"KK\\tfalse\\t633.483788669109\\t0.5619\\t632.921875000000\\tfalse\\n\" + \"AX\\tfalse\\t0.543259224330\\t0.5433\\t0.000000020896\\tfalse\\n\" + \"BZ\\tfalse\\t0.551534552826\\t0.5442\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.359103977680\\t0.3591\\t864.000000000000\\ttrue\\n\" + \"AX\\ttrue\\t0.682714500508\\t0.6827\\t0.000000157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse\\t0.496688359286\\t0.4967\\t0.000032060649\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 1220, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 13:40:02.951996", "score": "0.2926", "loss": "14.4083", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t0.0204\\t0.000000567185\\tfalse\\n\" + \"AX\\ttrue\\t-511.515212714672\\t0.4848\\t-512.0000000000002473130\\tfalse\\n\" + \"KK\\tfalse\\t633.483788669109\\t0.5619\\t632.921875000000\\tfalse\\n\" + \"AX\\tfalse\\t0.543259224330\\t0.5433\\t0.000000020896\\tfalse\\n\" + \"BZ\\tfalse\\t0.551534552826\\t0.5442\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.359103977680\\t0.3591\\t864.000000000000\\ttrue\\n\" + \"AX\\ttrue\\t0.682714500508\\t0.6827\\t0.000000157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse\\t0.496688359286\\t0.4967\\t0.000032060649\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 915, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 13:40:08.592360", "score": "0.2541", "loss": "14.4017", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t0.0204\\t0.000000567185\\tfalse\\n\" + \"AX\\ttrue\\t-511.515212714672\\t0.4848\\t-512.00000000042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.359103977680\\t0.3591\\t864.000000000000\\ttrue\\n\" + \"AX\\ttrue\\t0.682714500508\\t0.6827\\t0.000000157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse\\t0.496688359286\\t0.4967\\t0.000032060649\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 763, "n_pass": [18, 4, 3]}
{"time": "2021-02-24 13:40:17.036706", "score": "0.2391", "loss": "14.4054", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t0.0204\\t0.000000567185\\tfalse\\n\" + \"AX\\ttrue\\t-511.515212714672\\t0.4848\\t-512.00000000042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse\\t0.496688359286\\t0.4967\\t0.000032060649\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 687, "n_pass": [36, 7, 4]}
{"time": "2021-02-24 13:40:22.637285", "score": "0.2235", "loss": "14.4125", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse\\t0.496688359286\\t0.4967\\t0.000032060649\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 611, "n_pass": [43, 9, 5]}
{"time": "2021-02-24 13:40:39.482219", "score": "0.2235", "loss": "14.4125", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from abc\", true); assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 573, "n_pass": [74, 15, 6]}
{"time": "2021-02-24 13:40:42.295267", "score": "0.4088", "loss": "14.4925", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol1\\n\" + \"BZ\\ttrue\\t1.673692762852\\t0.6235\\t1.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 534, "n_pass": [76, 16, 7]}
{"time": "2021-02-24 13:40:45.115429", "score": "0.3908", "loss": "14.4843", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol.050231933594\\tfalse\\n\" + \"XX\\tfalse\\t567.512389898300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 496, "n_pass": [79, 17, 8]}
{"time": "2021-02-24 13:40:47.946142", "score": "0.3693", "loss": "14.4818", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.000013792171\\tfalse\\n\" + \"AX\\tfalse\\t0.020375759351\\t042\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 458, "n_pass": [80, 18, 9]}
{"time": "2021-02-24 13:40:50.739093", "score": "0.3149", "loss": "14.5508", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000142\\t0.007371325744\\tfalse\\n\" + \"XX\\ttrue\\t0.674562766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 420, "n_pass": [83, 19, 10]}
{"time": "2021-02-24 13:40:53.548076", "score": "0.265", "loss": "14.4384", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.000000000000\\tfalse\\n\" + \"XX\\ttrue\\t864.35910397157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 382, "n_pass": [84, 20, 11]}
{"time": "2021-02-24 13:40:56.390822", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\t-841.883159995079\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 344, "n_pass": [87, 21, 12]}
{"time": "2021-02-24 13:41:07.592436", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\t0.1168\\t-842.000000000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 325, "n_pass": [116, 25, 13]}
{"time": "2021-02-24 13:41:10.375399", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, boo, f+d, f, d , prev(boo) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 306, "n_pass": [117, 26, 14]}
{"time": "2021-02-24 13:41:15.939402", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,) f, d , prev(boo) over (partition by str) from '*!*abc'\", true); }", "n_tokens": 287, "n_pass": [120, 28, 15]}
{"time": "2021-02-24 13:41:18.726220", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol98300\\t0.7780\\t566.734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 267, "n_pass": [121, 29, 16]}
{"time": "2021-02-24 13:41:21.514204", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231392\\t0.5509\\t0.0000162766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 248, "n_pass": [125, 30, 17]}
{"time": "2021-02-24 13:41:24.298775", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.550908231362766890\\t0.6746\\t0.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 229, "n_pass": [128, 31, 18]}
{"time": "2021-02-24 13:41:27.080950", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.821699082851\\t0.8217\\t512.157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 210, "n_pass": [129, 32, 19]}
{"time": "2021-02-24 13:41:29.874409", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216990157437\\ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 191, "n_pass": [132, 33, 20]}
{"time": "2021-02-24 13:41:38.266018", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\0000000\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 181, "n_pass": [163, 36, 21]}
{"time": "2021-02-24 13:41:43.847136", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str, str) from '*!*abc'\", true); }", "n_tokens": 171, "n_pass": [165, 38, 22]}
{"time": "2021-02-24 13:41:49.441138", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tboo\\tcol0\\tf\\td\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 161, "n_pass": [169, 40, 23]}
{"time": "2021-02-24 13:41:52.224164", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\\tcol734375000000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 152, "n_pass": [174, 41, 24]}
{"time": "2021-02-24 13:41:55.021134", "score": "0.2528", "loss": "14.4284", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str00000\\tfalse\\n\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 143, "n_pass": [175, 42, 25]}
{"time": "2021-02-24 13:41:57.798172", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\t0.5509082313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 134, "n_pass": [176, 43, 26]}
{"time": "2021-02-24 13:42:03.381713", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\2313.000000014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 125, "n_pass": [178, 45, 27]}
{"time": "2021-02-24 13:42:06.159169", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\00014643\\tfalse\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 116, "n_pass": [179, 46, 28]}
{"time": "2021-02-24 13:42:08.947988", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AX\\ttrue\\t512.8216ttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 106, "n_pass": [180, 47, 29]}
{"time": "2021-02-24 13:42:14.507195", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AX\\ttruettrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 96, "n_pass": [182, 49, 30]}
{"time": "2021-02-24 13:42:36.891152", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AXttrue\\n\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 94, "n_pass": [275, 57, 31]}
{"time": "2021-02-24 13:42:39.647032", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\tfalse49\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 92, "n_pass": [276, 58, 32]}
{"time": "2021-02-24 13:42:45.204836", "score": "0.1941", "loss": "14.49", "code": "@Test public void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 89, "n_pass": [283, 60, 33]}
{"time": "2021-02-24 13:42:59.069742", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { final String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 87, "n_pass": [294, 65, 34]}
{"time": "2021-02-24 13:43:02.326173", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"KK\\tfalse\\\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 85, "n_pass": [301, 66, 35]}
{"time": "2021-02-24 13:43:10.641182", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\\\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 83, "n_pass": [309, 69, 36]}
{"time": "2021-02-24 13:43:46.557129", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\\n\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 82, "n_pass": [413, 79, 37]}
{"time": "2021-02-24 13:43:49.333533", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalsen\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 81, "n_pass": [414, 80, 38]}
{"time": "2021-02-24 13:43:52.125260", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\" + \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 80, "n_pass": [415, 81, 39]}
{"time": "2021-02-24 13:43:54.902450", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+ \"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 79, "n_pass": [417, 82, 40]}
{"time": "2021-02-24 13:43:57.673220", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\" + \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 78, "n_pass": [419, 83, 41]}
{"time": "2021-02-24 13:44:05.984174", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+ \"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 77, "n_pass": [424, 86, 42]}
{"time": "2021-02-24 13:44:08.789198", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"BZ\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 76, "n_pass": [426, 87, 43]}
{"time": "2021-02-24 13:44:11.597979", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"\\tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 75, "n_pass": [428, 88, 44]}
{"time": "2021-02-24 13:44:14.383729", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\\n\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 74, "n_pass": [429, 89, 45]}
{"time": "2021-02-24 13:44:19.981550", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalsen\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 73, "n_pass": [431, 91, 46]}
{"time": "2021-02-24 13:44:22.755430", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\" + \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 72, "n_pass": [432, 92, 47]}
{"time": "2021-02-24 13:44:25.541063", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+ \"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 71, "n_pass": [434, 93, 48]}
{"time": "2021-02-24 13:44:28.342154", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZ\\\\tfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 70, "n_pass": [436, 94, 49]}
{"time": "2021-02-24 13:44:31.141614", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZtfalse\\n\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 68, "n_pass": [438, 95, 50]}
{"time": "2021-02-24 13:44:33.904107", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"select str,abc'\", true); }", "n_tokens": 66, "n_pass": [439, 96, 51]}
{"time": "2021-02-24 13:44:39.464819", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn() throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 64, "n_pass": [445, 98, 52]}
{"time": "2021-02-24 13:44:49.204955", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn()throws Exception { String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 63, "n_pass": [460, 101, 53]}
{"time": "2021-02-24 13:44:51.998492", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn()throws Exception{ String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 62, "n_pass": [464, 102, 54]}
{"time": "2021-02-24 13:44:54.779927", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn()throws Exception{String expected = \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 61, "n_pass": [466, 103, 55]}
{"time": "2021-02-24 13:45:05.876897", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn()throws Exception{String expected= \"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 60, "n_pass": [470, 107, 56]}
{"time": "2021-02-24 13:45:08.651370", "score": "0.1941", "loss": "14.49", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"str\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 59, "n_pass": [472, 108, 57]}
{"time": "2021-02-24 13:45:11.433844", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\" + \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 58, "n_pass": [474, 109, 58]}
{"time": "2021-02-24 13:45:14.217183", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+ \"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 57, "n_pass": [476, 110, 59]}
{"time": "2021-02-24 13:45:16.991589", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\"; assertThat(expected, \"str,abc'\", true); }", "n_tokens": 56, "n_pass": [478, 111, 60]}
{"time": "2021-02-24 13:45:57.189194", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected, \"str,abc'\", true); }", "n_tokens": 55, "n_pass": [552, 124, 61]}
{"time": "2021-02-24 13:45:59.958750", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected,\"str,abc'\", true); }", "n_tokens": 54, "n_pass": [557, 125, 62]}
{"time": "2021-02-24 13:46:05.518727", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected,\"strabc'\", true); }", "n_tokens": 53, "n_pass": [560, 127, 63]}
{"time": "2021-02-24 13:46:11.098971", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected,\"strabc\", true); }", "n_tokens": 52, "n_pass": [562, 129, 64]}
{"time": "2021-02-24 13:46:13.900023", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected,\"strabc\",true); }", "n_tokens": 51, "n_pass": [565, 130, 65]}
{"time": "2021-02-24 13:46:16.665097", "score": "0.2111", "loss": "14.4529", "code": "@Test void testVirtualColumn()throws Exception{String expected=\"\"+\"tfalse\"+\"AXn\"+\"tfalse\"+\"BZn\";assertThat(expected,\"strabc\",true);}", "n_tokens": 50, "n_pass": [569, 131, 66]}

Minimal simplified code:
@Test void testVirtualColumn()throws Exception{String expected=""+"tfalse"+"AXn"+"tfalse"+"BZn";assertThat(expected,"strabc",true);}

