
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-compiler/src/test/java/org/springframework/cloud/function/core/FunctionFactoryUtilsTests_isFluxConsumer.java
method_name = isFluxConsumer
method_body = @Test public void isFluxConsumer() { Method method = ReflectionUtils.findMethod(FunctionFactoryUtilsTests.class, "fluxConsumer"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }
predict, score, loss = issue, 0.21768788993358612, 15.39956283569336

Trace of simplified code(s):
{"time": "2021-02-23 20:14:23.548087", "score": "0.2177", "loss": "15.3996", "code": "@Test public void isFluxConsumer() { Method method = ReflectionUtils.findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 80, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:14:42.748010", "score": "0.2177", "loss": "15.3996", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils.findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 78, "n_pass": [93, 8, 2]}
{"time": "2021-02-23 20:14:51.194001", "score": "0.3885", "loss": "15.3744", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 76, "n_pass": [102, 11, 3]}
{"time": "2021-02-23 20:14:53.844984", "score": "0.3515", "loss": "15.4907", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 74, "n_pass": [104, 12, 4]}
{"time": "2021-02-23 20:15:09.661790", "score": "0.3515", "loss": "15.4907", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 73, "n_pass": [193, 16, 5]}
{"time": "2021-02-23 20:15:12.341248", "score": "0.3253", "loss": "15.5102", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 72, "n_pass": [195, 17, 6]}
{"time": "2021-02-23 20:15:15.022021", "score": "0.3253", "loss": "15.5102", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 71, "n_pass": [199, 18, 7]}
{"time": "2021-02-23 20:15:23.047352", "score": "0.3652", "loss": "15.4763", "code": "@Test void isFluxConsumer() { Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 70, "n_pass": [206, 21, 8]}
{"time": "2021-02-23 20:15:37.687301", "score": "0.3652", "loss": "15.4763", "code": "@Test void isFluxConsumer(){ Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 69, "n_pass": [238, 26, 9]}
{"time": "2021-02-23 20:15:40.362640", "score": "0.3652", "loss": "15.4763", "code": "@Test void isFluxConsumer(){Method method = ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 68, "n_pass": [240, 27, 10]}
{"time": "2021-02-23 20:15:51.012151", "score": "0.3652", "loss": "15.4763", "code": "@Test void isFluxConsumer(){Method method= ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 67, "n_pass": [244, 31, 11]}
{"time": "2021-02-23 20:15:53.696217", "score": "0.3652", "loss": "15.4763", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 66, "n_pass": [246, 32, 12]}
{"time": "2021-02-23 20:15:56.377105", "score": "0.3818", "loss": "14.5351", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils.isFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 65, "n_pass": [255, 33, 13]}
{"time": "2021-02-23 20:15:59.078254", "score": "0.3437", "loss": "15.3077", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtilsisFluxConsumer()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 64, "n_pass": [258, 34, 14]}
{"time": "2021-02-23 20:16:01.753388", "score": "0.3437", "loss": "15.3077", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 63, "n_pass": [259, 35, 15]}
{"time": "2021-02-23 20:16:26.360238", "score": "0.3437", "loss": "15.3077", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 62, "n_pass": [339, 43, 16]}
{"time": "2021-02-23 20:16:31.716627", "score": "0.3548", "loss": "15.2885", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();assertThat(FunctionFactoryUtils.isFluxSupplier()).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 61, "n_pass": [345, 45, 17]}
{"time": "2021-02-23 20:16:34.406858", "score": "0.3548", "loss": "15.2885", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();assertThat(FunctionFactoryUtils.isFluxSupplier()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 60, "n_pass": [353, 46, 18]}
{"time": "2021-02-23 20:16:45.089915", "score": "0.3548", "loss": "15.2885", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();assertThat(FunctionFactoryUtils.isFluxSupplier()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse();}", "n_tokens": 59, "n_pass": [368, 50, 19]}
{"time": "2021-02-23 20:16:57.003355", "score": "0.4117", "loss": "14.2207", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();(FunctionFactoryUtils.isFluxSupplier()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse();}", "n_tokens": 58, "n_pass": [401, 54, 20]}
{"time": "2021-02-23 20:16:59.668093", "score": "0.3303", "loss": "15.0377", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();(FunctionFactoryUtilsisFluxSupplier()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse();}", "n_tokens": 57, "n_pass": [404, 55, 21]}
{"time": "2021-02-23 20:17:02.351078", "score": "0.3303", "loss": "15.0377", "code": "@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,\"\");(FunctionFactoryUtils()).isTrue();(FunctionFactoryUtils()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse();}", "n_tokens": 56, "n_pass": [405, 56, 22]}

Minimal simplified code:
@Test void isFluxConsumer(){Method method=ReflectionUtils(FunctionFactoryUtilsTests,"");(FunctionFactoryUtils()).isTrue();(FunctionFactoryUtils()).isFalse();assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse();}

