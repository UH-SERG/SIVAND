
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/util/RainbowUtil_convertIntArray.java
method_name = convertIntArray
method_body = public static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }
predict, score, loss = encode, 0.22403749823570251, 19.508745193481445

Trace of simplified code(s):
{"time": "2021-02-24 14:00:29.070516", "score": "0.224", "loss": "19.5087", "code": "public static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 90, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 14:00:34.699016", "score": "0.224", "loss": "19.5087", "code": "static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 88, "n_pass": [92, 3, 2]}
{"time": "2021-02-24 14:00:37.516008", "score": "0.224", "loss": "19.5087", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 86, "n_pass": [93, 4, 3]}
{"time": "2021-02-24 14:00:40.310936", "score": "0.2194", "loss": "19.5016", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 83, "n_pass": [111, 5, 4]}
{"time": "2021-02-24 14:00:43.108774", "score": "0.2686", "loss": "19.4338", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out = (byte) in[i]; } return out; }", "n_tokens": 80, "n_pass": [116, 6, 5]}
{"time": "2021-02-24 14:00:45.941356", "score": "0.2341", "loss": "18.9939", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =  in[i]; } return out; }", "n_tokens": 77, "n_pass": [118, 7, 6]}
{"time": "2021-02-24 14:00:57.116432", "score": "0.2341", "loss": "18.9939", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 75, "n_pass": [202, 9, 7]}
{"time": "2021-02-24 14:01:02.707913", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 74, "n_pass": [213, 11, 8]}
{"time": "2021-02-24 14:01:05.524915", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 73, "n_pass": [219, 12, 9]}
{"time": "2021-02-24 14:01:08.342037", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in){ byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 72, "n_pass": [222, 13, 10]}
{"time": "2021-02-24 14:01:11.120633", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in){byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 71, "n_pass": [224, 14, 11]}
{"time": "2021-02-24 14:01:13.912114", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in){byte[]out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 70, "n_pass": [228, 15, 12]}
{"time": "2021-02-24 14:01:16.688723", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in){byte[]out= new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 69, "n_pass": [230, 16, 13]}
{"time": "2021-02-24 14:01:19.487764", "score": "0.2341", "loss": "18.9939", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 68, "n_pass": [232, 17, 14]}
{"time": "2021-02-24 14:01:22.305409", "score": "0.3396", "loss": "17.5279", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 67, "n_pass": [234, 18, 15]}
{"time": "2021-02-24 14:01:27.947710", "score": "0.3412", "loss": "17.5634", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; i ; i++) { out =in[i]; } return out; }", "n_tokens": 65, "n_pass": [249, 20, 16]}
{"time": "2021-02-24 14:01:30.786229", "score": "0.301", "loss": "16.7915", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; i ; i++) { outin[i]; } return out; }", "n_tokens": 63, "n_pass": [255, 21, 17]}
{"time": "2021-02-24 14:01:39.255195", "score": "0.3065", "loss": "16.7859", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; ; i++) { outin[i]; } return out; }", "n_tokens": 61, "n_pass": [293, 24, 18]}
{"time": "2021-02-24 14:01:42.061425", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; ; i++) {in[i]; } return out; }", "n_tokens": 59, "n_pass": [298, 25, 19]}
{"time": "2021-02-24 14:01:57.771744", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; ; i++) {in[i];} return out; }", "n_tokens": 58, "n_pass": [378, 28, 20]}
{"time": "2021-02-24 14:02:00.562395", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; ; i++) {in[i];}return out; }", "n_tokens": 57, "n_pass": [380, 29, 21]}
{"time": "2021-02-24 14:02:11.738873", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length]; for (int i = 0; ; i++) {in[i];}return out;}", "n_tokens": 56, "n_pass": [385, 33, 22]}
{"time": "2021-02-24 14:02:17.320455", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for (int i = 0; ; i++) {in[i];}return out;}", "n_tokens": 55, "n_pass": [411, 35, 23]}
{"time": "2021-02-24 14:02:20.108171", "score": "0.3879", "loss": "17.523", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(int i = 0; ; i++) {in[i];}return out;}", "n_tokens": 54, "n_pass": [413, 36, 24]}
{"time": "2021-02-24 14:02:22.897894", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for( i = 0; ; i++) {in[i];}return out;}", "n_tokens": 53, "n_pass": [415, 37, 25]}
{"time": "2021-02-24 14:02:25.690640", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i = 0; ; i++) {in[i];}return out;}", "n_tokens": 52, "n_pass": [416, 38, 26]}
{"time": "2021-02-24 14:02:28.500295", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i= 0; ; i++) {in[i];}return out;}", "n_tokens": 51, "n_pass": [418, 39, 27]}
{"time": "2021-02-24 14:02:31.288060", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i=0; ; i++) {in[i];}return out;}", "n_tokens": 50, "n_pass": [420, 40, 28]}
{"time": "2021-02-24 14:02:34.077632", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i=0;; i++) {in[i];}return out;}", "n_tokens": 49, "n_pass": [423, 41, 29]}
{"time": "2021-02-24 14:02:36.881074", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i=0;;i++) {in[i];}return out;}", "n_tokens": 48, "n_pass": [425, 42, 30]}
{"time": "2021-02-24 14:02:39.685574", "score": "0.3785", "loss": "17.5178", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i=0;;i++){in[i];}return out;}", "n_tokens": 47, "n_pass": [430, 43, 31]}
{"time": "2021-02-24 14:02:53.645637", "score": "0.3804", "loss": "17.5506", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i0;;i++){in[i];}return out;}", "n_tokens": 46, "n_pass": [470, 48, 32]}
{"time": "2021-02-24 14:02:56.424459", "score": "0.3804", "loss": "17.5506", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(i;;i++){in[i];}return out;}", "n_tokens": 45, "n_pass": [471, 49, 33]}
{"time": "2021-02-24 14:03:10.384378", "score": "0.3878", "loss": "17.5536", "code": "byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(;;i++){in[i];}return out;}", "n_tokens": 44, "n_pass": [516, 54, 34]}

Minimal simplified code:
byte[]convertIntArray(int[]in){byte[]out=newbyte[in.length];for(;;i++){in[i];}return out;}

