
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/semanticvectors__semanticvectors/src-ext/qut/beagle/BeagleUtils_ensureSize.java
method_name = ensureSize
method_body = public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }
predict, score, loss = addAll, 0.7143835425376892, 3.129483699798584

Trace of simplified code(s):
{"time": "2021-02-24 01:17:09.629071", "score": "0.7144", "loss": "3.1295", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 83, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:17:12.879258", "score": "0.8896", "loss": "3.4446", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 78, "n_pass": [52, 2, 2]}
{"time": "2021-02-24 01:17:15.657216", "score": "0.7643", "loss": "3.764", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 75, "n_pass": [99, 3, 3]}
{"time": "2021-02-24 01:17:18.392202", "score": "0.8012", "loss": "4.0272", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int ilSize; i < size; i++) list.add(null); }", "n_tokens": 72, "n_pass": [102, 4, 4]}
{"time": "2021-02-24 01:17:21.142149", "score": "0.8147", "loss": "4.7755", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int ilSize;  size; i++) list.add(null); }", "n_tokens": 69, "n_pass": [104, 5, 5]}
{"time": "2021-02-24 01:17:23.926059", "score": "0.4654", "loss": "1.7316", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int ilSize;  size; i++) (null); }", "n_tokens": 66, "n_pass": [108, 6, 6]}
{"time": "2021-02-24 01:17:26.667173", "score": "0.5026", "loss": "1.7855", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int ilSize;  size; i++) ; }", "n_tokens": 63, "n_pass": [109, 7, 7]}
{"time": "2021-02-24 01:17:29.407021", "score": "0.5026", "loss": "1.7855", "code": "void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size) for (int ilSize;  size; i++) ; }", "n_tokens": 61, "n_pass": [111, 8, 8]}
{"time": "2021-02-24 01:17:32.594624", "score": "0.6256", "loss": "2.0859", "code": "void ensureSize(ArrayList<D> list, int size) { int lSize = list.size(); if (size) for (int ilSize;  size; i++) ; }", "n_tokens": 59, "n_pass": [115, 9, 9]}
{"time": "2021-02-24 01:17:35.340742", "score": "0.3747", "loss": "3.934", "code": "void ensureSize(ArrayList<D> list, int size) { lSize = list.size(); if (size) for (int ilSize;  size; i++) ; }", "n_tokens": 57, "n_pass": [122, 10, 10]}
{"time": "2021-02-24 01:17:38.071893", "score": "0.5876", "loss": "3.5561", "code": "void ensureSize(ArrayList<D> list, int size) { lSize .size(); if (size) for (int ilSize;  size; i++) ; }", "n_tokens": 54, "n_pass": [124, 11, 11]}
{"time": "2021-02-24 01:17:40.790751", "score": "0.6328", "loss": "3.6513", "code": "void ensureSize(ArrayList<D> list, int size) { lSize .size(); if (size) for (lSize;  size; i++) ; }", "n_tokens": 51, "n_pass": [130, 12, 12]}
{"time": "2021-02-24 01:17:49.386976", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D> list, int size) { lSize .size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 49, "n_pass": [195, 13, 13]}
{"time": "2021-02-24 01:17:53.013099", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list, int size) { lSize .size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 48, "n_pass": [209, 14, 14]}
{"time": "2021-02-24 01:17:55.749244", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size) { lSize .size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 47, "n_pass": [212, 15, 15]}
{"time": "2021-02-24 01:17:58.493187", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size){ lSize .size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 46, "n_pass": [217, 16, 16]}
{"time": "2021-02-24 01:18:01.235977", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size){lSize .size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 45, "n_pass": [219, 17, 17]}
{"time": "2021-02-24 01:18:03.959064", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size(); if (size) for (lSize; ; i++) ; }", "n_tokens": 44, "n_pass": [221, 18, 18]}
{"time": "2021-02-24 01:18:09.412255", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if (size) for (lSize; ; i++) ; }", "n_tokens": 43, "n_pass": [227, 20, 19]}
{"time": "2021-02-24 01:18:12.140042", "score": "0.6617", "loss": "3.7833", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (lSize; ; i++) ; }", "n_tokens": 42, "n_pass": [229, 21, 20]}
{"time": "2021-02-24 01:18:22.488698", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (; ; i++) ; }", "n_tokens": 41, "n_pass": [283, 23, 21]}
{"time": "2021-02-24 01:18:25.315758", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (;; i++) ; }", "n_tokens": 40, "n_pass": [285, 24, 22]}
{"time": "2021-02-24 01:18:28.042011", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (;;i++) ; }", "n_tokens": 39, "n_pass": [287, 25, 23]}
{"time": "2021-02-24 01:18:30.799825", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (;;i++); }", "n_tokens": 38, "n_pass": [292, 26, 24]}
{"time": "2021-02-24 01:18:33.563585", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size) for (;;i++);}", "n_tokens": 37, "n_pass": [294, 27, 25]}
{"time": "2021-02-24 01:18:39.907750", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size)for (;;i++);}", "n_tokens": 36, "n_pass": [321, 29, 26]}
{"time": "2021-02-24 01:18:42.659019", "score": "0.6713", "loss": "3.9869", "code": "void ensureSize(ArrayList<D>list,int size){lSize.size();if(size)for(;;i++);}", "n_tokens": 35, "n_pass": [323, 30, 27]}

Minimal simplified code:
void ensureSize(ArrayList<D>list,int size){lSize.size();if(size)for(;;i++);}

