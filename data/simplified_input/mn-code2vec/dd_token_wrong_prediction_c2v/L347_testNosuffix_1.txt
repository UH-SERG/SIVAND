
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/test/java/zemberek/morphology/old_lexicon/TurkishSuffixesTest_testNosuffix.java
method_name = testNosuffix
method_body = @Test public void testNosuffix() { Tester tester = new Tester("göbek"); tester.assertHasParses("göbek"); tester.assertUnParseable("göbeğ"); }
predict, score, loss = load, 0.9937233328819275, 21.686254501342773

Trace of simplified code(s):
{"time": "2021-02-24 15:36:25.444916", "score": "0.9937", "loss": "21.6863", "code": "@Test public void testNosuffix() { Tester tester = new Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 50, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 15:36:28.447169", "score": "0.9676", "loss": "19.3678", "code": "@Test public void testNosuffix() { new Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 44, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 15:36:31.465958", "score": "0.9887", "loss": "21.6451", "code": "@Test public void testNosuffix() {Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 41, "n_pass": [43, 3, 3]}
{"time": "2021-02-24 15:36:34.078676", "score": "0.9887", "loss": "20.4476", "code": "@Test public void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 38, "n_pass": [45, 4, 4]}
{"time": "2021-02-24 15:36:36.721795", "score": "0.985", "loss": "20.2077", "code": "@Test public void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 35, "n_pass": [47, 5, 5]}
{"time": "2021-02-24 15:36:41.975436", "score": "0.9888", "loss": "19.5982", "code": "public void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 32, "n_pass": [52, 7, 6]}
{"time": "2021-02-24 15:36:48.614297", "score": "0.9888", "loss": "19.5982", "code": " void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 31, "n_pass": [83, 9, 7]}
{"time": "2021-02-24 15:36:51.228907", "score": "0.9888", "loss": "19.5982", "code": "void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 30, "n_pass": [84, 10, 8]}
{"time": "2021-02-24 15:36:54.223717", "score": "0.9888", "loss": "19.5982", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 29, "n_pass": [89, 11, 9]}
{"time": "2021-02-24 15:36:56.881658", "score": "0.4447", "loss": "15.0102", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(); tester(\"g\u00f6be\u011f\"); }", "n_tokens": 27, "n_pass": [97, 12, 10]}
{"time": "2021-02-24 15:37:06.851598", "score": "0.4447", "loss": "15.0102", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(); tester(\"g\u00f6be\u011f\");}", "n_tokens": 26, "n_pass": [141, 15, 11]}
{"time": "2021-02-24 15:37:15.415575", "score": "0.4447", "loss": "15.0102", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses();tester(\"g\u00f6be\u011f\");}", "n_tokens": 25, "n_pass": [159, 18, 12]}

Minimal simplified code:
void testNosuffix(){Tester("göbek").assertHasParses();tester("göbeğ");}

