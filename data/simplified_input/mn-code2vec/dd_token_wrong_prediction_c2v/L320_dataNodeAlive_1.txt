
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-core/src/main/java/com/bj58/oceanus/core/loadbalance/ha/DataNodeChecker_dataNodeAlive.java
method_name = dataNodeAlive
method_body = public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error("DataNode [" + dataNode.getId() + "] is not in the check list !!"); return true; } return dataNodeAliveMap.get(dataNode.getId()).get(); }
predict, score, loss = isEnabled, 0.4536026418209076, 16.781782150268555

Trace of simplified code(s):
{"time": "2021-02-23 16:36:57.075383", "score": "0.4536", "loss": "16.7818", "code": "public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + dataNode.getId() + \"] is not in the check list !!\"); return true; } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 130, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 16:36:59.789267", "score": "0.4189", "loss": "16.7348", "code": "public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"] is not in the check list !!\"); return true; } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 122, "n_pass": [53, 2, 2]}
{"time": "2021-02-23 16:37:02.465065", "score": "0.3805", "loss": "16.4987", "code": "public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"] is list !!\"); return true; } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 114, "n_pass": [55, 3, 3]}
{"time": "2021-02-23 16:37:05.186451", "score": "0.4151", "loss": "16.6398", "code": "public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"] is \"); return true; } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 110, "n_pass": [98, 4, 4]}
{"time": "2021-02-23 16:37:07.881212", "score": "0.2579", "loss": "16.4818", "code": "public static boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"] is \");  } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 106, "n_pass": [99, 5, 5]}
{"time": "2021-02-23 16:37:13.209711", "score": "0.2579", "loss": "16.4818", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"] is \");  } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 102, "n_pass": [105, 7, 6]}
{"time": "2021-02-23 16:37:26.613867", "score": "0.2663", "loss": "16.6212", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"\");  } return dataNodeAliveMap.get(dataNode.getId()).get(); }", "n_tokens": 98, "n_pass": [124, 12, 7]}
{"time": "2021-02-23 16:37:48.362452", "score": "0.3068", "loss": "16.7607", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || dataNode.getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 96, "n_pass": [204, 20, 8]}
{"time": "2021-02-23 16:37:59.452168", "score": "0.3084", "loss": "16.5864", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId())) { logger.error(\"DataNode [\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 94, "n_pass": [221, 24, 9]}
{"time": "2021-02-23 16:38:10.136429", "score": "0.2715", "loss": "16.2795", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId)) { logger.error(\"DataNode [\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 92, "n_pass": [235, 28, 10]}
{"time": "2021-02-23 16:38:15.446162", "score": "0.2904", "loss": "16.0803", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null || getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId)) { logger.error(\"[\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 90, "n_pass": [241, 30, 11]}
{"time": "2021-02-23 16:38:26.568933", "score": "0.3399", "loss": "16.449", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == null| getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId)) { logger.error(\"[\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 88, "n_pass": [266, 34, 12]}
{"time": "2021-02-23 16:38:29.227850", "score": "0.305", "loss": "16.3814", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode.getId)) { logger.error(\"[\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 86, "n_pass": [267, 35, 13]}
{"time": "2021-02-23 16:38:37.190646", "score": "0.3869", "loss": "16.9169", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger.error(\"[\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 84, "n_pass": [280, 38, 14]}
{"time": "2021-02-23 16:38:39.844039", "score": "0.3101", "loss": "16.9971", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"[\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 82, "n_pass": [284, 39, 15]}
{"time": "2021-02-23 16:39:10.515672", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\" + \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 81, "n_pass": [407, 47, 16]}
{"time": "2021-02-23 16:39:13.195428", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+ \"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 80, "n_pass": [408, 48, 17]}
{"time": "2021-02-23 16:39:15.858537", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");  } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 79, "n_pass": [410, 49, 18]}
{"time": "2021-02-23 16:39:18.512068", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\"); } return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 78, "n_pass": [415, 50, 19]}
{"time": "2021-02-23 16:39:21.181355", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");} return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 77, "n_pass": [416, 51, 20]}
{"time": "2021-02-23 16:39:23.871187", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode) { if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 76, "n_pass": [418, 52, 21]}
{"time": "2021-02-23 16:39:35.399042", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode){ if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 75, "n_pass": [442, 56, 22]}
{"time": "2021-02-23 16:39:38.060483", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode){if (dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 74, "n_pass": [444, 57, 23]}
{"time": "2021-02-23 16:39:40.720282", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode == nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 73, "n_pass": [446, 58, 24]}
{"time": "2021-02-23 16:39:43.391079", "score": "0.3882", "loss": "17.4853", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode== nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 72, "n_pass": [449, 59, 25]}
{"time": "2021-02-23 16:39:46.070209", "score": "0.3935", "loss": "17.4965", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode= nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 71, "n_pass": [450, 60, 26]}
{"time": "2021-02-23 16:39:48.731384", "score": "0.3935", "loss": "17.4965", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=nullgetId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 70, "n_pass": [452, 61, 27]}
{"time": "2021-02-23 16:39:51.392040", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId() == null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 69, "n_pass": [453, 62, 28]}
{"time": "2021-02-23 16:39:54.069958", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()== null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 68, "n_pass": [457, 63, 29]}
{"time": "2021-02-23 16:39:57.599412", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null) return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 67, "n_pass": [460, 64, 30]}
{"time": "2021-02-23 16:40:00.289939", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true; if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 66, "n_pass": [463, 65, 31]}
{"time": "2021-02-23 16:40:10.978541", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if (!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 65, "n_pass": [468, 69, 32]}
{"time": "2021-02-23 16:40:13.651186", "score": "0.3761", "loss": "17.4302", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if(!dataNodeAliveMap.containsKey(dataNode)) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 64, "n_pass": [470, 70, 33]}
{"time": "2021-02-23 16:40:21.621337", "score": "0.5338", "loss": "17.6819", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if(!dataNodeAliveMap.containsKey()) { logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 63, "n_pass": [477, 73, 34]}
{"time": "2021-02-23 16:40:24.287981", "score": "0.5338", "loss": "17.6819", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if(!dataNodeAliveMap.containsKey()){ logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 62, "n_pass": [480, 74, 35]}
{"time": "2021-02-23 16:40:26.941297", "score": "0.5338", "loss": "17.6819", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if(!dataNodeAliveMap.containsKey()){logger(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 61, "n_pass": [482, 75, 36]}
{"time": "2021-02-23 16:40:29.597738", "score": "0.4077", "loss": "17.9727", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode=getId()==null)return true;if(!dataNodeAliveMap.containsKey()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 60, "n_pass": [483, 76, 37]}
{"time": "2021-02-23 16:40:41.117585", "score": "0.4412", "loss": "17.8986", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNodegetId()==null)return true;if(!dataNodeAliveMap.containsKey()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 59, "n_pass": [520, 80, 38]}
{"time": "2021-02-23 16:40:43.764930", "score": "0.393", "loss": "17.9213", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(!dataNodeAliveMap.containsKey()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 58, "n_pass": [521, 81, 39]}
{"time": "2021-02-23 16:40:55.283786", "score": "0.3151", "loss": "18.1808", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(dataNodeAliveMap.containsKey()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 57, "n_pass": [534, 85, 40]}
{"time": "2021-02-23 16:40:57.958619", "score": "0.4364", "loss": "18.3506", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(dataNodeAliveMapcontainsKey()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 56, "n_pass": [536, 86, 41]}
{"time": "2021-02-23 16:41:00.604078", "score": "0.4364", "loss": "18.3506", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(dataNodeAliveMap()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get(); }", "n_tokens": 55, "n_pass": [537, 87, 42]}
{"time": "2021-02-23 16:41:21.676018", "score": "0.4364", "loss": "18.3506", "code": "boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(dataNodeAliveMap()){(\"\"+\"\");}return dataNodeAliveMap.get(dataNode()).get();}", "n_tokens": 54, "n_pass": [597, 94, 43]}

Minimal simplified code:
boolean dataNodeAlive(DataNode dataNode){if(dataNode()==null)return true;if(dataNodeAliveMap()){(""+"");}return dataNodeAliveMap.get(dataNode()).get();}

