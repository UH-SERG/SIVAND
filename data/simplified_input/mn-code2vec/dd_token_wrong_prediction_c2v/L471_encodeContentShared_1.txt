
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/http/src/test/java/org/kaazing/gateway/transport/http/bridge/filter/HttpResponseEncoderTest_encodeContentShared.java
method_name = encodeContentShared
method_body = @Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionEx(); IoBufferAllocatorEx<?> allocator = session.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); HttpBufferAllocator httpAllocator = new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap("Hello, world".getBytes()), FLAG_SHARED); HttpContentMessage httpContent = new HttpContentMessage(data, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx buf = (IoBufferEx) session.getEncoderOutputQueue().poll(); assertEquals("Hello, world", buf.getString(Charset.forName("UTF-8").newDecoder())); assertSame(data.array(), buf.array()); }
predict, score, loss = run, 0.5579162836074829, 16.3381404876709

Trace of simplified code(s):
{"time": "2021-02-23 05:45:41.955308", "score": "0.6792", "loss": "16.5307", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionEx(); IoBufferAllocatorEx<?> allocator = session.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); HttpBufferAllocator httpAllocator = new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(\"Hello, world\".getBytes()), FLAG_SHARED); HttpContentMessage httpContent = new HttpContentMessage(data, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx buf = (IoBufferEx) session.getEncoderOutputQueue().poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 213, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 05:45:55.775883", "score": "0.4178", "loss": "15.9747", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionEx(); IoBufferAllocatorEx<?> allocator = session.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); HttpBufferAllocator httpAllocator = new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(\"Hello, world\".getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx buf = (IoBufferEx) session.getEncoderOutputQueue().poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 200, "n_pass": [52, 6, 2]}
{"time": "2021-02-23 05:45:58.515061", "score": "0.9252", "loss": "16.579", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionEx(); IoBufferAllocatorEx<?> allocator = session.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); HttpBufferAllocator httpAllocator = new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(\"Hello, world\".getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 186, "n_pass": [55, 7, 3]}
{"time": "2021-02-23 05:46:01.261066", "score": "0.3152", "loss": "16.9521", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); HttpBufferAllocator httpAllocator = new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(\"Hello, world\".getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 173, "n_pass": [62, 8, 4]}
{"time": "2021-02-23 05:46:03.979703", "score": "0.2866", "loss": "16.1968", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(\"Hello, world\".getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 160, "n_pass": [64, 9, 5]}
{"time": "2021-02-23 05:46:06.757547", "score": "0.3311", "loss": "16.9916", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, httpContent, session.getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 153, "n_pass": [105, 10, 6]}
{"time": "2021-02-23 05:46:23.632637", "score": "0.1688", "loss": "15.9327", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session, session.getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 150, "n_pass": [183, 16, 7]}
{"time": "2021-02-23 05:46:26.351880", "score": "0.3122", "loss": "15.8255", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 147, "n_pass": [184, 17, 8]}
{"time": "2021-02-23 05:47:47.121002", "score": "0.237", "loss": "15.5095", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession = new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 146, "n_pass": [367, 44, 9]}
{"time": "2021-02-23 05:47:52.605026", "score": "0.2513", "loss": "15.5678", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession= new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 145, "n_pass": [369, 46, 10]}
{"time": "2021-02-23 05:47:55.337218", "score": "0.2247", "loss": "15.4745", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=new ProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 144, "n_pass": [371, 47, 11]}
{"time": "2021-02-23 05:48:00.789145", "score": "0.8298", "loss": "15.8042", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer.wrap(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 143, "n_pass": [373, 49, 12]}
{"time": "2021-02-23 05:48:30.840269", "score": "0.5732", "loss": "15.3686", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()), FLAG_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 141, "n_pass": [393, 60, 13]}
{"time": "2021-02-23 05:48:36.324615", "score": "0.6209", "loss": "16.0772", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder.encode(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 139, "n_pass": [397, 62, 14]}
{"time": "2021-02-23 05:48:41.774967", "score": "0.4795", "loss": "15.6978", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session,getEncoderOutput()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 137, "n_pass": [403, 64, 15]}
{"time": "2021-02-23 05:48:44.519298", "score": "0.2979", "loss": "15.712", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session()); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 135, "n_pass": [405, 65, 16]}
{"time": "2021-02-23 05:48:47.256352", "score": "0.3709", "loss": "15.7126", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll(); assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 133, "n_pass": [406, 66, 17]}
{"time": "2021-02-23 05:48:52.723195", "score": "0.2847", "loss": "15.573", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", buf.getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 131, "n_pass": [410, 68, 18]}
{"time": "2021-02-23 05:49:00.920739", "score": "0.3018", "loss": "15.792", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(Charset.forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 129, "n_pass": [417, 71, 19]}
{"time": "2021-02-23 05:49:03.640957", "score": "0.2711", "loss": "16.0275", "code": "@Test public void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 127, "n_pass": [419, 72, 20]}
{"time": "2021-02-23 05:49:22.803946", "score": "0.2007", "loss": "15.8644", "code": "@Test  void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 126, "n_pass": [440, 79, 21]}
{"time": "2021-02-23 05:49:25.535854", "score": "0.2411", "loss": "16.2733", "code": "@Test void encodeContentShared() throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 125, "n_pass": [441, 80, 22]}
{"time": "2021-02-23 05:49:29.138408", "score": "0.3077", "loss": "16.1596", "code": "@Test void encodeContentShared()throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); ProtocolEncoder encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 124, "n_pass": [447, 81, 23]}
{"time": "2021-02-23 05:49:59.174463", "score": "0.3134", "loss": "15.9599", "code": "@Test void encodeContentShared()throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes()),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 122, "n_pass": [464, 92, 24]}
{"time": "2021-02-23 05:50:12.797655", "score": "0.4044", "loss": "15.7009", "code": "@Test void encodeContentShared()throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf.array()); }", "n_tokens": 120, "n_pass": [478, 97, 25]}
{"time": "2021-02-23 05:50:37.327693", "score": "0.3073", "loss": "15.8855", "code": "@Test void encodeContentShared()throws Exception { ProtocolCodecSessionExsession=newProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 118, "n_pass": [509, 106, 26]}
{"time": "2021-02-23 05:50:52.281223", "score": "0.3531", "loss": "16.4772", "code": "@Test void encodeContentShared()throws Exception { ProtocolCodecSessionEx=newProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 117, "n_pass": [528, 111, 27]}
{"time": "2021-02-23 05:51:48.205287", "score": "0.2923", "loss": "16.468", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionEx=newProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 116, "n_pass": [594, 131, 28]}
{"time": "2021-02-23 05:51:53.659140", "score": "0.3188", "loss": "15.5465", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF-8\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 115, "n_pass": [598, 133, 29]}
{"time": "2021-02-23 05:52:34.506306", "score": "0.3131", "loss": "15.6184", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewProtocolCodecSessionExsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 113, "n_pass": [638, 148, 30]}
{"time": "2021-02-23 05:52:54.912251", "score": "0.3102", "loss": "15.522", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString(forName(\"UTF\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 112, "n_pass": [667, 155, 31]}
{"time": "2021-02-23 05:55:19.710863", "score": "0.3079", "loss": "15.58", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"UTF\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 111, "n_pass": [884, 204, 32]}
{"time": "2021-02-23 05:55:22.440580", "score": "0.3116", "loss": "15.5882", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder())); assertSame(data.array(), buf()); }", "n_tokens": 110, "n_pass": [886, 205, 33]}
{"time": "2021-02-23 05:55:25.184653", "score": "0.3103", "loss": "15.6004", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data.array(), buf()); }", "n_tokens": 109, "n_pass": [896, 206, 34]}
{"time": "2021-02-23 05:55:27.914659", "score": "0.3893", "loss": "15.486", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(dataarray(), buf()); }", "n_tokens": 108, "n_pass": [900, 207, 35]}
{"time": "2021-02-23 05:55:30.639448", "score": "0.3492", "loss": "15.6396", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(), buf()); }", "n_tokens": 107, "n_pass": [901, 208, 36]}
{"time": "2021-02-23 05:55:33.366769", "score": "0.3492", "loss": "15.6396", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf()); }", "n_tokens": 106, "n_pass": [905, 209, 37]}
{"time": "2021-02-23 05:55:36.091543", "score": "0.3492", "loss": "15.6396", "code": "@Test void encodeContentShared()throws Exception{ ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 105, "n_pass": [911, 210, 38]}
{"time": "2021-02-23 05:55:40.139332", "score": "0.3492", "loss": "15.6396", "code": "@Test void encodeContentShared()throws Exception{ProtocolCodecSessionExnewsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 104, "n_pass": [925, 211, 39]}
{"time": "2021-02-23 05:55:42.881285", "score": "0.229", "loss": "15.2905", "code": "@Test void encodeContentShared()throws Exception{newsession.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 103, "n_pass": [926, 212, 40]}
{"time": "2021-02-23 05:55:45.596497", "score": "0.3973", "loss": "15.722", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator(); encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 102, "n_pass": [927, 213, 41]}
{"time": "2021-02-23 05:55:51.077029", "score": "0.3973", "loss": "15.722", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder =  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 101, "n_pass": [934, 215, 42]}
{"time": "2021-02-23 05:55:53.793465", "score": "0.3973", "loss": "15.722", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=  new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 100, "n_pass": [936, 216, 43]}
{"time": "2021-02-23 05:55:56.509676", "score": "0.3973", "loss": "15.722", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder= new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 99, "n_pass": [938, 217, 44]}
{"time": "2021-02-23 05:55:59.229910", "score": "0.3973", "loss": "15.722", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=new HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 98, "n_pass": [939, 218, 45]}
{"time": "2021-02-23 05:56:01.951296", "score": "0.3698", "loss": "15.9026", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder= HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 97, "n_pass": [940, 219, 46]}
{"time": "2021-02-23 05:56:04.672087", "score": "0.3698", "loss": "15.9026", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=HttpBufferAllocator(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 96, "n_pass": [941, 220, 47]}
{"time": "2021-02-23 05:56:07.389213", "score": "0.4488", "loss": "16.0476", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator); IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 95, "n_pass": [942, 221, 48]}
{"time": "2021-02-23 05:56:10.110012", "score": "0.4488", "loss": "16.0476", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);IoBufferEx data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 94, "n_pass": [947, 222, 49]}
{"time": "2021-02-23 05:56:12.837100", "score": "0.4248", "loss": "15.791", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator); data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 93, "n_pass": [948, 223, 50]}
{"time": "2021-02-23 05:56:15.539827", "score": "0.4248", "loss": "15.791", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data = httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 92, "n_pass": [949, 224, 51]}
{"time": "2021-02-23 05:56:18.247445", "score": "0.4248", "loss": "15.791", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data= httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 91, "n_pass": [951, 225, 52]}
{"time": "2021-02-23 05:56:20.955021", "score": "0.4248", "loss": "15.791", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator.wrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 90, "n_pass": [953, 226, 53]}
{"time": "2021-02-23 05:56:23.662819", "score": "0.4773", "loss": "15.6431", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocatorwrap(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 89, "n_pass": [955, 227, 54]}
{"time": "2021-02-23 05:56:26.377169", "score": "0.4773", "loss": "15.6431", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator(ByteBuffer(getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 88, "n_pass": [956, 228, 55]}
{"time": "2021-02-23 05:56:29.104484", "score": "0.4946", "loss": "15.8144", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),_SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 87, "n_pass": [958, 229, 56]}
{"time": "2021-02-23 05:56:34.515990", "score": "0.4946", "loss": "15.8144", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),SHAREDdata, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 86, "n_pass": [963, 231, 57]}
{"time": "2021-02-23 05:56:37.242925", "score": "0.6342", "loss": "16.8736", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data, true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 85, "n_pass": [964, 232, 58]}
{"time": "2021-02-23 05:56:39.962618", "score": "0.6342", "loss": "16.8736", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true); encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 84, "n_pass": [967, 233, 59]}
{"time": "2021-02-23 05:56:42.667826", "score": "0.6342", "loss": "16.8736", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);encoder(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 83, "n_pass": [971, 234, 60]}
{"time": "2021-02-23 05:56:45.389674", "score": "0.7416", "loss": "16.9906", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session); IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 82, "n_pass": [972, 235, 61]}
{"time": "2021-02-23 05:56:48.555318", "score": "0.7416", "loss": "16.9906", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx.poll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 81, "n_pass": [977, 236, 62]}
{"time": "2021-02-23 05:56:51.276786", "score": "0.6082", "loss": "16.9895", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferExpoll; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 80, "n_pass": [979, 237, 63]}
{"time": "2021-02-23 05:56:53.976546", "score": "0.6082", "loss": "16.9895", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx; assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 79, "n_pass": [980, 238, 64]}
{"time": "2021-02-23 05:56:56.700961", "score": "0.6082", "loss": "16.9895", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"Hello, world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 78, "n_pass": [982, 239, 65]}
{"time": "2021-02-23 05:56:59.404615", "score": "0.332", "loss": "15.962", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\", world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 77, "n_pass": [986, 240, 66]}
{"time": "2021-02-23 05:57:02.108213", "score": "0.332", "loss": "15.962", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\" world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 76, "n_pass": [987, 241, 67]}
{"time": "2021-02-23 05:57:04.823645", "score": "0.332", "loss": "15.962", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\", getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 75, "n_pass": [988, 242, 68]}
{"time": "2021-02-23 05:57:10.226252", "score": "0.332", "loss": "15.962", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder=(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 74, "n_pass": [992, 244, 69]}
{"time": "2021-02-23 05:57:19.616518", "score": "0.3463", "loss": "16.0293", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder(allocator);data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 73, "n_pass": [1037, 247, 70]}
{"time": "2021-02-23 05:57:22.321573", "score": "0.3507", "loss": "16.0041", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data=httpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 72, "n_pass": [1039, 248, 71]}
{"time": "2021-02-23 05:57:25.053892", "score": "0.3386", "loss": "15.1581", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();datahttpAllocator((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 71, "n_pass": [1043, 249, 72]}
{"time": "2021-02-23 05:57:27.752712", "score": "0.3465", "loss": "15.2125", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes),data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 70, "n_pass": [1044, 250, 73]}
{"time": "2021-02-23 05:57:30.461272", "score": "0.3288", "loss": "16.02", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes)data,true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 69, "n_pass": [1049, 251, 74]}
{"time": "2021-02-23 05:57:33.161785", "score": "0.3448", "loss": "15.218", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes),true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 68, "n_pass": [1050, 252, 75]}
{"time": "2021-02-23 05:57:35.848590", "score": "0.371", "loss": "16.3345", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes)true);(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 67, "n_pass": [1051, 253, 76]}
{"time": "2021-02-23 05:57:38.560384", "score": "0.3138", "loss": "15.1924", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes));(session);IoBufferEx;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 66, "n_pass": [1052, 254, 77]}
{"time": "2021-02-23 05:57:41.700773", "score": "0.313", "loss": "15.2166", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes));(session);;assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 65, "n_pass": [1059, 255, 78]}
{"time": "2021-02-23 05:57:44.423192", "score": "0.3266", "loss": "15.1912", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();data((getBytes));(session);assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 64, "n_pass": [1060, 256, 79]}
{"time": "2021-02-23 05:57:56.490998", "score": "0.2413", "loss": "16.2255", "code": "@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();((getBytes));(session);assertEquals(\"world\",getString((\"\").newDecoder()));assertSame(data(),buf());}", "n_tokens": 63, "n_pass": [1114, 260, 80]}

Minimal simplified code:
@Test void encodeContentShared()throws Exception{session.getBufferAllocator();encoder();((getBytes));(session);assertEquals("world",getString(("").newDecoder()));assertSame(data(),buf());}

