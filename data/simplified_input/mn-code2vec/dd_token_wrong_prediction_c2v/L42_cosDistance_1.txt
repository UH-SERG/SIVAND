
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/main/java/zemberek/embedding/WordVectorLookup_cosDistance.java
method_name = cosDistance
method_body = float cosDistance(Vector v1, Vector v2) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }
predict, score, loss = mean, 0.660986065864563, 20.12046241760254

Trace of simplified code(s):
{"time": "2021-02-23 19:33:38.548595", "score": "0.661", "loss": "20.1205", "code": "float cosDistance(Vector v1, Vector v2) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 118, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:33:41.241353", "score": "0.7169", "loss": "19.9041", "code": "float cosDistance(Vector v) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 111, "n_pass": [45, 2, 2]}
{"time": "2021-02-23 19:33:43.935217", "score": "0.8452", "loss": "18.2957", "code": "float cosDistance(Vector v) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap * cMap.get(v1.wordIndex)); }", "n_tokens": 103, "n_pass": [57, 3, 3]}
{"time": "2021-02-23 19:33:46.665015", "score": "0.7077", "loss": "20.6972", "code": "float cosDistance(Vector v) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 99, "n_pass": [100, 4, 4]}
{"time": "2021-02-23 19:33:49.360749", "score": "0.7465", "loss": "20.8745", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 96, "n_pass": [108, 5, 5]}
{"time": "2021-02-23 19:33:52.033178", "score": "0.692", "loss": "20.2687", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 92, "n_pass": [113, 6, 6]}
{"time": "2021-02-23 19:33:54.724942", "score": "0.7003", "loss": "20.2821", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 88, "n_pass": [114, 7, 7]}
{"time": "2021-02-23 19:33:57.404978", "score": "0.7187", "loss": "19.9088", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 84, "n_pass": [116, 8, 8]}
{"time": "2021-02-23 19:34:00.069035", "score": "0.7854", "loss": "19.5544", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) {  (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 80, "n_pass": [118, 9, 9]}
{"time": "2021-02-23 19:34:04.337613", "score": "0.7723", "loss": "19.4487", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) {  (v1[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 78, "n_pass": [187, 10, 10]}
{"time": "2021-02-23 19:34:07.004350", "score": "0.8314", "loss": "20.9606", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap.get(v1.wordIndex)); }", "n_tokens": 76, "n_pass": [191, 11, 11]}
{"time": "2021-02-23 19:34:12.790592", "score": "0.8459", "loss": "20.857", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(v1.wordIndex)); }", "n_tokens": 74, "n_pass": [200, 13, 12]}
{"time": "2021-02-23 19:34:15.446323", "score": "0.8784", "loss": "22.1412", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 72, "n_pass": [202, 14, 13]}
{"time": "2021-02-23 19:34:18.957155", "score": "0.8949", "loss": "21.867", "code": "float cosDistance(Vector v) { sum ; for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 70, "n_pass": [215, 15, 14]}
{"time": "2021-02-23 19:34:21.620863", "score": "0.9073", "loss": "21.8642", "code": "float cosDistance(Vector v) { ; for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 68, "n_pass": [216, 16, 15]}
{"time": "2021-02-23 19:34:24.305971", "score": "0.9073", "loss": "21.8642", "code": "float cosDistance(Vector v) { for (int i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 66, "n_pass": [217, 17, 16]}
{"time": "2021-02-23 19:34:26.967770", "score": "0.6917", "loss": "18.5503", "code": "float cosDistance(Vector v) { for (i = 0;data.length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 64, "n_pass": [220, 18, 17]}
{"time": "2021-02-23 19:34:29.638531", "score": "0.6849", "loss": "18.5673", "code": "float cosDistance(Vector v) { for (i = 0;length;) {  (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 62, "n_pass": [224, 19, 18]}
{"time": "2021-02-23 19:34:43.939581", "score": "0.6849", "loss": "18.5673", "code": "float cosDistance(Vector v) { for (i = 0;length;) { (v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 61, "n_pass": [315, 21, 19]}
{"time": "2021-02-23 19:34:46.604304", "score": "0.6849", "loss": "18.5673", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(v1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 60, "n_pass": [316, 22, 20]}
{"time": "2021-02-23 19:34:49.291564", "score": "0.7226", "loss": "18.7538", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i] * v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 59, "n_pass": [318, 23, 21]}
{"time": "2021-02-23 19:34:51.944701", "score": "0.7226", "loss": "18.7538", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]* v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 58, "n_pass": [323, 24, 22]}
{"time": "2021-02-23 19:34:54.604233", "score": "0.7226", "loss": "18.7538", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*v2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 57, "n_pass": [325, 25, 23]}
{"time": "2021-02-23 19:34:57.250933", "score": "0.7254", "loss": "18.7444", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]); } return sum / (cMap(vwordIndex)); }", "n_tokens": 56, "n_pass": [326, 26, 24]}
{"time": "2021-02-23 19:34:59.909789", "score": "0.7254", "loss": "18.7444", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);} return sum / (cMap(vwordIndex)); }", "n_tokens": 55, "n_pass": [333, 27, 25]}
{"time": "2021-02-23 19:35:02.566539", "score": "0.7254", "loss": "18.7444", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum / (cMap(vwordIndex)); }", "n_tokens": 54, "n_pass": [335, 28, 26]}
{"time": "2021-02-23 19:35:06.061150", "score": "0.7254", "loss": "18.7444", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum/ (cMap(vwordIndex)); }", "n_tokens": 53, "n_pass": [339, 29, 27]}
{"time": "2021-02-23 19:35:11.352268", "score": "0.7254", "loss": "18.7444", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum/(cMap(vwordIndex)); }", "n_tokens": 52, "n_pass": [341, 31, 28]}
{"time": "2021-02-23 19:35:13.995762", "score": "0.558", "loss": "19.397", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum/((vwordIndex)); }", "n_tokens": 51, "n_pass": [343, 32, 29]}
{"time": "2021-02-23 19:35:16.649067", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum/((wordIndex)); }", "n_tokens": 50, "n_pass": [345, 33, 30]}
{"time": "2021-02-23 19:35:19.324076", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v) { for (i = 0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 49, "n_pass": [350, 34, 31]}
{"time": "2021-02-23 19:35:22.806636", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v){ for (i = 0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 48, "n_pass": [360, 35, 32]}
{"time": "2021-02-23 19:35:25.445817", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v){for (i = 0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 47, "n_pass": [362, 36, 33]}
{"time": "2021-02-23 19:35:28.110006", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v){for(i = 0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 46, "n_pass": [364, 37, 34]}
{"time": "2021-02-23 19:35:30.749153", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v){for(i= 0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 45, "n_pass": [367, 38, 35]}
{"time": "2021-02-23 19:35:33.414747", "score": "0.5414", "loss": "18.9451", "code": "float cosDistance(Vector v){for(i=0;length;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 44, "n_pass": [369, 39, 36]}
{"time": "2021-02-23 19:35:36.067485", "score": "0.4707", "loss": "18.6677", "code": "float cosDistance(Vector v){for(i=0;;) {(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 43, "n_pass": [372, 40, 37]}
{"time": "2021-02-23 19:35:38.730797", "score": "0.4707", "loss": "18.6677", "code": "float cosDistance(Vector v){for(i=0;;){(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 42, "n_pass": [375, 41, 38]}
{"time": "2021-02-23 19:35:45.705395", "score": "0.524", "loss": "19.1958", "code": "float cosDistance(Vector v){for(i0;;){(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 41, "n_pass": [413, 43, 39]}
{"time": "2021-02-23 19:35:48.372069", "score": "0.524", "loss": "19.1958", "code": "float cosDistance(Vector v){for(i;;){(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 40, "n_pass": [414, 44, 40]}
{"time": "2021-02-23 19:35:55.317906", "score": "0.5269", "loss": "19.2657", "code": "float cosDistance(Vector v){for(;;){(1[i]*2[i]);}return sum/((wordIndex));}", "n_tokens": 39, "n_pass": [454, 46, 41]}

Minimal simplified code:
float cosDistance(Vector v){for(;;){(1[i]*2[i]);}return sum/((wordIndex));}

