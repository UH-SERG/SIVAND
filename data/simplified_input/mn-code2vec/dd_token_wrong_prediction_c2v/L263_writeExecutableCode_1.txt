
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jmockit__jmockit1/main/src/mockit/coverage/reporting/lineCoverage/LineCoverageOutput_writeExecutableCode.java
method_name = writeExecutableCode
method_body = private void writeExecutableCode(@Nonnull LineParser lineParser) { String formattedLine = lineCoverageFormatter.format(lineParser, lineCoverageData); output.write(" <td>"); output.write(formattedLine); output.println("</td>"); }
predict, score, loss = process, 0.5534399747848511, 19.326812744140625

Trace of simplified code(s):
{"time": "2021-02-24 02:41:13.896387", "score": "0.5534", "loss": "19.3268", "code": "private void writeExecutableCode(@Nonnull LineParser lineParser) { String formattedLine = lineCoverageFormatter.format(lineParser, lineCoverageData); output.write(\" <td>\"); output.write(formattedLine); output.println(\"</td>\"); }", "n_tokens": 68, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:41:16.543621", "score": "0.4868", "loss": "18.4762", "code": "private void writeExecutableCode(@Nonnull LineParser lineParser) { String.write(\" <td>\"); output.write(formattedLine); output.println(\"</td>\"); }", "n_tokens": 51, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 02:41:19.190685", "score": "0.591", "loss": "17.3947", "code": "private void writeExecutableCode(@Nonnull LineParser lineParser) { String.write(\" <td>\");(formattedLine); output.println(\"</td>\"); }", "n_tokens": 47, "n_pass": [39, 3, 3]}
{"time": "2021-02-24 02:41:21.833936", "score": "0.6254", "loss": "17.4081", "code": "private void writeExecutableCode(@Nonnull LineParser lineParser) { String.write(\" <td>\"); output.println(\"</td>\"); }", "n_tokens": 43, "n_pass": [40, 4, 4]}
{"time": "2021-02-24 02:41:27.449288", "score": "0.7239", "loss": "17.305", "code": "private void writeExecutableCode(@Nonnull LineParser lineParser) { String.write(\" <td>\"); output.println(\">\"); }", "n_tokens": 40, "n_pass": [74, 6, 5]}
{"time": "2021-02-24 02:41:30.056721", "score": "0.7239", "loss": "17.305", "code": "void writeExecutableCode(@Nonnull LineParser lineParser) { String.write(\" <td>\"); output.println(\">\"); }", "n_tokens": 38, "n_pass": [77, 7, 6]}
{"time": "2021-02-24 02:41:33.077689", "score": "0.363", "loss": "17.1101", "code": "void writeExecutableCode( LineParser lineParser) { String.write(\" <td>\"); output.println(\">\"); }", "n_tokens": 36, "n_pass": [80, 8, 7]}
{"time": "2021-02-24 02:41:35.682149", "score": "0.7322", "loss": "18.0227", "code": "void writeExecutableCode( LineParser lineParser) { write(\" <td>\"); output.println(\">\"); }", "n_tokens": 34, "n_pass": [85, 9, 8]}
{"time": "2021-02-24 02:41:40.891403", "score": "0.7449", "loss": "17.6222", "code": "void writeExecutableCode( LineParser lineParser) { write(\" <td>\"); output(\">\"); }", "n_tokens": 32, "n_pass": [92, 11, 9]}
{"time": "2021-02-24 02:41:46.465038", "score": "0.7754", "loss": "19.2477", "code": "void writeExecutableCode( LineParser lineParser) { write(\" <td>\");(\">\"); }", "n_tokens": 30, "n_pass": [107, 13, 10]}
{"time": "2021-02-24 02:41:54.625867", "score": "0.7805", "loss": "19.3295", "code": "void writeExecutableCode( LineParser lineParser) { write(\" <td>\");(\"\"); }", "n_tokens": 29, "n_pass": [152, 15, 11]}
{"time": "2021-02-24 02:41:58.360642", "score": "0.7805", "loss": "19.3295", "code": "void writeExecutableCode(LineParser lineParser) { write(\" <td>\");(\"\"); }", "n_tokens": 28, "n_pass": [160, 16, 12]}
{"time": "2021-02-24 02:42:00.990497", "score": "0.7805", "loss": "19.3295", "code": "void writeExecutableCode(LineParser lineParser){ write(\" <td>\");(\"\"); }", "n_tokens": 27, "n_pass": [165, 17, 13]}
{"time": "2021-02-24 02:42:03.620421", "score": "0.7805", "loss": "19.3295", "code": "void writeExecutableCode(LineParser lineParser){write(\" <td>\");(\"\"); }", "n_tokens": 26, "n_pass": [167, 18, 14]}
{"time": "2021-02-24 02:42:06.210881", "score": "0.8693", "loss": "21.4459", "code": "void writeExecutableCode(LineParser lineParser){(\" <td>\");(\"\"); }", "n_tokens": 25, "n_pass": [168, 19, 15]}
{"time": "2021-02-24 02:42:08.797211", "score": "0.8693", "loss": "21.4459", "code": "void writeExecutableCode(LineParser lineParser){(\"<td>\");(\"\"); }", "n_tokens": 24, "n_pass": [171, 20, 16]}
{"time": "2021-02-24 02:42:11.399565", "score": "0.8693", "loss": "21.4459", "code": "void writeExecutableCode(LineParser lineParser){(\"td>\");(\"\"); }", "n_tokens": 23, "n_pass": [172, 21, 17]}
{"time": "2021-02-24 02:42:13.998426", "score": "0.867", "loss": "21.3729", "code": "void writeExecutableCode(LineParser lineParser){(\">\");(\"\"); }", "n_tokens": 22, "n_pass": [173, 22, 18]}
{"time": "2021-02-24 02:42:16.600632", "score": "0.871", "loss": "21.4938", "code": "void writeExecutableCode(LineParser lineParser){(\"\");(\"\"); }", "n_tokens": 21, "n_pass": [174, 23, 19]}
{"time": "2021-02-24 02:42:20.654005", "score": "0.871", "loss": "21.4938", "code": "void writeExecutableCode(LineParser lineParser){(\"\");(\"\");}", "n_tokens": 20, "n_pass": [200, 24, 20]}

Minimal simplified code:
void writeExecutableCode(LineParser lineParser){("");("");}

