
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jamesdbloom__mockserver/mockserver-core/src/test/java/org/mockserver/client/serialization/model/BinaryBodyDTOTest_shouldBuildCorrectObject.java
method_name = shouldBuildCorrectObject
method_body = @Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary("some_body"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue(), is(body)); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }
predict, score, loss = testSerialization, 0.6196093559265137, 16.352834701538086

Trace of simplified code(s):
{"time": "2021-02-23 20:09:13.365926", "score": "0.6196", "loss": "16.3528", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue(), is(body)); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:09:16.485029", "score": "0.3964", "loss": "14.8281", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue(), is(body)); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 90, "n_pass": [50, 2, 2]}
{"time": "2021-02-23 20:09:19.178636", "score": "0.3284", "loss": "14.8064", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue()); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 84, "n_pass": [54, 3, 3]}
{"time": "2021-02-23 20:09:21.845348", "score": "0.5374", "loss": "15.8631", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(Body.Type.BINARY)); }", "n_tokens": 78, "n_pass": [55, 4, 4]}
{"time": "2021-02-23 20:09:24.957083", "score": "0.6901", "loss": "16.3518", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 75, "n_pass": [98, 5, 5]}
{"time": "2021-02-23 20:09:27.641952", "score": "0.5458", "loss": "15.0999", "code": "public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 72, "n_pass": [101, 6, 6]}
{"time": "2021-02-23 20:09:30.740175", "score": "0.2118", "loss": "14.2276", "code": "public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase(\"some_body\"); new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 69, "n_pass": [109, 7, 7]}
{"time": "2021-02-23 20:09:33.411434", "score": "0.3437", "loss": "14.4256", "code": "public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase(\"some_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 66, "n_pass": [113, 8, 8]}
{"time": "2021-02-23 20:09:36.499335", "score": "0.8704", "loss": "17.0097", "code": "public void shouldBuildCorrectObject() { byte[] body = (\"some_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 63, "n_pass": [132, 9, 9]}
{"time": "2021-02-23 20:09:43.073939", "score": "0.8704", "loss": "17.0097", "code": "public void shouldBuildCorrectObject() { byte[]body = (\"some_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 62, "n_pass": [197, 10, 10]}
{"time": "2021-02-23 20:09:45.739577", "score": "0.8704", "loss": "17.0097", "code": "public void shouldBuildCorrectObject() { byte[]body= (\"some_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 61, "n_pass": [199, 11, 11]}
{"time": "2021-02-23 20:09:48.427802", "score": "0.8704", "loss": "17.0097", "code": "public void shouldBuildCorrectObject() { byte[]body=(\"some_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 60, "n_pass": [201, 12, 12]}
{"time": "2021-02-23 20:09:51.102232", "score": "0.8846", "loss": "17.3808", "code": "public void shouldBuildCorrectObject() { byte[]body=(\"_body\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 59, "n_pass": [204, 13, 13]}
{"time": "2021-02-23 20:09:53.766497", "score": "0.8853", "loss": "17.419", "code": "public void shouldBuildCorrectObject() { byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue().getType(), is(BodyBINARY)); }", "n_tokens": 57, "n_pass": [205, 14, 14]}
{"time": "2021-02-23 20:09:59.119396", "score": "0.8873", "loss": "17.53", "code": "public void shouldBuildCorrectObject() { byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(), is(BodyBINARY)); }", "n_tokens": 55, "n_pass": [216, 16, 15]}
{"time": "2021-02-23 20:10:01.797417", "score": "0.856", "loss": "17.9824", "code": "public void shouldBuildCorrectObject() { byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 53, "n_pass": [221, 17, 16]}
{"time": "2021-02-23 20:10:04.488300", "score": "0.856", "loss": "17.9824", "code": " void shouldBuildCorrectObject() { byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 52, "n_pass": [226, 18, 17]}
{"time": "2021-02-23 20:10:07.142353", "score": "0.856", "loss": "17.9824", "code": "void shouldBuildCorrectObject() { byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 51, "n_pass": [227, 19, 18]}
{"time": "2021-02-23 20:10:10.639076", "score": "0.856", "loss": "17.9824", "code": "void shouldBuildCorrectObject(){ byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 50, "n_pass": [233, 20, 19]}
{"time": "2021-02-23 20:10:13.292925", "score": "0.856", "loss": "17.9824", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\"); (new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 49, "n_pass": [235, 21, 20]}
{"time": "2021-02-23 20:10:22.175755", "score": "0.856", "loss": "17.9824", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");(new BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 48, "n_pass": [306, 23, 21]}
{"time": "2021-02-23 20:10:24.848087", "score": "0.418", "loss": "17.9884", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");( BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 47, "n_pass": [308, 24, 22]}
{"time": "2021-02-23 20:10:27.493932", "score": "0.418", "loss": "17.9884", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");(BinaryBody(body)).buildObject(); assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 46, "n_pass": [309, 25, 23]}
{"time": "2021-02-23 20:10:35.457189", "score": "0.418", "loss": "17.9884", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");(BinaryBody(body)).buildObject();assertThat(getValue().getType(),(BodyBINARY)); }", "n_tokens": 45, "n_pass": [320, 28, 24]}
{"time": "2021-02-23 20:10:38.105114", "score": "0.4023", "loss": "17.8425", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");(BinaryBody(body)).buildObject();assertThat(getValue().getType(),(BINARY)); }", "n_tokens": 44, "n_pass": [332, 29, 25]}
{"time": "2021-02-23 20:10:40.770174", "score": "0.4023", "loss": "17.8425", "code": "void shouldBuildCorrectObject(){byte[]body=(\"\");(BinaryBody(body)).buildObject();assertThat(getValue().getType(),(BINARY));}", "n_tokens": 43, "n_pass": [337, 30, 26]}

Minimal simplified code:
void shouldBuildCorrectObject(){byte[]body=("");(BinaryBody(body)).buildObject();assertThat(getValue().getType(),(BINARY));}

