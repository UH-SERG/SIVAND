
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/georgewfraser__vscode-javac/src/main/java/org/javacs/pubapi/PubApi_mergeTypes.java
method_name = mergeTypes
method_body = public static PubApi mergeTypes(PubApi api1, PubApi api2) { Assert.check(api1.methods.isEmpty(), "Can only merge types."); Assert.check(api2.methods.isEmpty(), "Can only merge types."); Assert.check(api1.variables.isEmpty(), "Can only merge types."); Assert.check(api2.variables.isEmpty(), "Can only merge types."); PubApi merged = new PubApi(); merged.types.putAll(api1.types); merged.types.putAll(api2.types); return merged; }
predict, score, loss = diff, 0.8698513507843018, 3.5959434509277344

Trace of simplified code(s):
{"time": "2021-02-24 12:13:36.351197", "score": "0.9838", "loss": "6.5146", "code": "public static PubApi mergeTypes(PubApi api1, PubApi api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge types.\"); Assert.check(api2.methods.isEmpty(), \"Can only merge types.\"); Assert.check(api1.variables.isEmpty(), \"Can only merge types.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types); merged.types.putAll(api2.types); return merged; }", "n_tokens": 175, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 12:13:39.144670", "score": "0.993", "loss": "6.0058", "code": "public static PubApi mergeTypes(PubApi api1, PubApi api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge  only merge types.\"); Assert.check(api1.variables.isEmpty(), \"Can only merge types.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types); merged.types.putAll(api2.types); return merged; }", "n_tokens": 153, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 12:13:41.982729", "score": "0.9977", "loss": "7.4339", "code": "public static PubApi mergeTypes(PubApi api1, PubApi api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge  only merge types.\"); Assert.check(api1.variables.isEmpty(), \"Can only merge types.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 142, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 12:13:45.221517", "score": "0.9978", "loss": "7.2456", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge  only merge types.\"); Assert.check(api1.variables.isEmpty(), \"Can only merge types.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 137, "n_pass": [94, 4, 4]}
{"time": "2021-02-24 12:13:50.818039", "score": "0.9933", "loss": "5.9105", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge  only\"); Assert.check(api1.variables.isEmpty(), \"Can only merge types.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 132, "n_pass": [101, 6, 5]}
{"time": "2021-02-24 12:13:53.625450", "score": "0.8659", "loss": "5.2629", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only merge  only\"); Assert.check(api1.variables.isEmpty(), \"Can.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 126, "n_pass": [106, 7, 6]}
{"time": "2021-02-24 12:13:57.366537", "score": "0.9414", "loss": "5.5081", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\"); Assert.check(api1.variables.isEmpty(), \"Can.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 121, "n_pass": [125, 8, 7]}
{"time": "2021-02-24 12:14:01.126302", "score": "0.885", "loss": "4.6745", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(api1.variables.isEmpty(), \"Can.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 118, "n_pass": [194, 9, 8]}
{"time": "2021-02-24 12:14:03.897610", "score": "0.994", "loss": "6.5676", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\"); Assert.check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 115, "n_pass": [196, 10, 9]}
{"time": "2021-02-24 12:14:06.708655", "score": "0.9955", "loss": "7.4167", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(api2.variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 112, "n_pass": [201, 11, 10]}
{"time": "2021-02-24 12:14:09.514858", "score": "0.9962", "loss": "7.1734", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can only merge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 109, "n_pass": [203, 12, 11]}
{"time": "2021-02-24 12:14:12.291794", "score": "0.995", "loss": "7.0798", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Canmerge types.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 106, "n_pass": [207, 13, 12]}
{"time": "2021-02-24 12:14:15.045546", "score": "0.9912", "loss": "7.091", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi merged = new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 103, "n_pass": [208, 14, 13]}
{"time": "2021-02-24 12:14:17.864044", "score": "0.9797", "loss": "5.0628", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(api1.types.types); return merged; }", "n_tokens": 100, "n_pass": [211, 15, 14]}
{"time": "2021-02-24 12:14:20.688775", "score": "0.984", "loss": "5.1507", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(types.types); return merged; }", "n_tokens": 97, "n_pass": [217, 16, 15]}
{"time": "2021-02-24 12:14:23.451419", "score": "0.9904", "loss": "6.12", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); return merged; }", "n_tokens": 94, "n_pass": [218, 17, 16]}
{"time": "2021-02-24 12:14:26.205419", "score": "0.9936", "loss": "6.5984", "code": "public static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 91, "n_pass": [220, 18, 17]}
{"time": "2021-02-24 12:14:28.961292", "score": "0.9936", "loss": "6.5984", "code": "static PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 89, "n_pass": [222, 19, 18]}
{"time": "2021-02-24 12:14:31.703391", "score": "0.9936", "loss": "6.5984", "code": "PubApi mergeTypes(PubApi  api2) { Assert.check(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 87, "n_pass": [223, 20, 19]}
{"time": "2021-02-24 12:14:34.950614", "score": "0.994", "loss": "6.5235", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api1.methods.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 85, "n_pass": [231, 21, 20]}
{"time": "2021-02-24 12:14:37.710573", "score": "0.9931", "loss": "6.4289", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api.isEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 82, "n_pass": [233, 22, 21]}
{"time": "2021-02-24 12:14:46.060465", "score": "0.9941", "loss": "6.545", "code": "PubApi mergeTypes(PubApi  api2) { Assert(apiisEmpty(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 81, "n_pass": [324, 23, 22]}
{"time": "2021-02-24 12:14:48.820903", "score": "0.9939", "loss": "6.5381", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(), \"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 80, "n_pass": [325, 24, 23]}
{"time": "2021-02-24 12:14:51.584868", "score": "0.9939", "loss": "6.5381", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"Can only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 79, "n_pass": [328, 25, 24]}
{"time": "2021-02-24 12:14:54.326915", "score": "0.9882", "loss": "5.8272", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\" only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 78, "n_pass": [330, 26, 25]}
{"time": "2021-02-24 12:14:57.064454", "score": "0.9882", "loss": "5.8272", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"only\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 77, "n_pass": [331, 27, 26]}
{"time": "2021-02-24 12:14:59.807182", "score": "0.994", "loss": "6.5653", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables.isEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 76, "n_pass": [332, 28, 27]}
{"time": "2021-02-24 12:15:02.554669", "score": "0.9948", "loss": "6.7136", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variablesisEmpty(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 75, "n_pass": [339, 29, 28]}
{"time": "2021-02-24 12:15:05.292583", "score": "0.9939", "loss": "6.6086", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(), \"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 74, "n_pass": [340, 30, 29]}
{"time": "2021-02-24 12:15:08.039289", "score": "0.9939", "loss": "6.6086", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(variables.isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 73, "n_pass": [344, 31, 30]}
{"time": "2021-02-24 12:15:10.828991", "score": "0.9946", "loss": "6.6697", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"Can.\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 71, "n_pass": [349, 32, 31]}
{"time": "2021-02-24 12:15:13.569762", "score": "0.9939", "loss": "6.0084", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\"); PubApi= new PubApi(); merged.types.putAll(); ; }", "n_tokens": 69, "n_pass": [353, 33, 32]}
{"time": "2021-02-24 12:15:16.369009", "score": "0.9619", "loss": "6.2167", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  new PubApi(); merged.types.putAll(); ; }", "n_tokens": 67, "n_pass": [356, 34, 33]}
{"time": "2021-02-24 12:15:19.166441", "score": "0.9795", "loss": "6.0629", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApi(); merged.types.putAll(); ; }", "n_tokens": 65, "n_pass": [357, 35, 34]}
{"time": "2021-02-24 12:15:21.923436", "score": "0.9619", "loss": "5.7312", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApi; merged.types.putAll(); ; }", "n_tokens": 63, "n_pass": [359, 36, 35]}
{"time": "2021-02-24 12:15:24.663112", "score": "0.9789", "loss": "6.3735", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApimerged.types.putAll(); ; }", "n_tokens": 61, "n_pass": [360, 37, 36]}
{"time": "2021-02-24 12:15:27.398137", "score": "0.9837", "loss": "7.6324", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApitypes.putAll(); ; }", "n_tokens": 59, "n_pass": [361, 38, 37]}
{"time": "2021-02-24 12:15:30.126540", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); ; }", "n_tokens": 57, "n_pass": [362, 39, 38]}
{"time": "2021-02-24 12:15:32.884820", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi  api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); }", "n_tokens": 55, "n_pass": [365, 40, 39]}
{"time": "2021-02-24 12:15:36.963658", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi api2) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); }", "n_tokens": 54, "n_pass": [372, 41, 40]}
{"time": "2021-02-24 12:15:39.688307", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi api) { Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); }", "n_tokens": 53, "n_pass": [375, 42, 41]}
{"time": "2021-02-24 12:15:42.417640", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi api){ Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); }", "n_tokens": 52, "n_pass": [377, 43, 42]}
{"time": "2021-02-24 12:15:45.148003", "score": "0.9806", "loss": "7.5196", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\");  PubApiputAll(); }", "n_tokens": 51, "n_pass": [379, 44, 43]}
{"time": "2021-02-24 12:15:47.878368", "score": "0.9807", "loss": "7.6941", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\"); putAll(); }", "n_tokens": 49, "n_pass": [405, 45, 44]}
{"time": "2021-02-24 12:15:54.080504", "score": "0.9807", "loss": "7.6941", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"Can.\").check(isEmpty(), \"\"); putAll();}", "n_tokens": 48, "n_pass": [469, 46, 45]}
{"time": "2021-02-24 12:15:58.149139", "score": "0.9847", "loss": "6.7032", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\".\").check(isEmpty(), \"\"); putAll();}", "n_tokens": 47, "n_pass": [496, 47, 46]}
{"time": "2021-02-24 12:16:00.859549", "score": "0.9887", "loss": "6.9367", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"\").check(isEmpty(), \"\"); putAll();}", "n_tokens": 46, "n_pass": [497, 48, 47]}
{"time": "2021-02-24 12:16:03.582484", "score": "0.9887", "loss": "6.9367", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"\").check(isEmpty(),\"\"); putAll();}", "n_tokens": 45, "n_pass": [507, 49, 48]}
{"time": "2021-02-24 12:16:06.309569", "score": "0.9887", "loss": "6.9367", "code": "PubApi mergeTypes(PubApi api){Assert(api(),\"\").check(variables(),\"\").check(isEmpty(),\"\");putAll();}", "n_tokens": 44, "n_pass": [512, 50, 49]}

Minimal simplified code:
PubApi mergeTypes(PubApi api){Assert(api(),"").check(variables(),"").check(isEmpty(),"");putAll();}

