
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/ws/src/test/java/org/kaazing/gateway/transport/ws/bridge/extensions/idletimeout/IdleTimeouExtensionTest_shouldAddTimeoutParameter.java
method_name = shouldAddTimeoutParameter
method_body = @Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested, extensionHelper, 1234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }
predict, score, loss = testTrim, 0.15460170805454254, 14.317676544189453

Trace of simplified code(s):
{"time": "2021-02-24 01:49:18.507668", "score": "0.1546", "loss": "14.3177", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested, extensionHelper, 1234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 94, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:49:26.622702", "score": "0.194", "loss": "14.6918", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 88, "n_pass": [49, 4, 2]}
{"time": "2021-02-24 01:49:37.593139", "score": "0.194", "loss": "14.6918", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 85, "n_pass": [94, 8, 3]}
{"time": "2021-02-24 01:49:42.944526", "score": "0.172", "loss": "14.7218", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeadergetExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 82, "n_pass": [98, 10, 4]}
{"time": "2021-02-24 01:49:45.639047", "score": "0.186", "loss": "14.6456", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 79, "n_pass": [99, 11, 5]}
{"time": "2021-02-24 01:49:48.320697", "score": "0.186", "loss": "14.6456", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 76, "n_pass": [103, 12, 6]}
{"time": "2021-02-24 01:49:58.947580", "score": "0.186", "loss": "14.6456", "code": "@Test void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 74, "n_pass": [114, 16, 7]}
{"time": "2021-02-24 01:50:04.286218", "score": "0.1926", "loss": "14.6243", "code": "@Test void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension =IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 71, "n_pass": [121, 18, 8]}
{"time": "2021-02-24 01:50:23.755498", "score": "0.1926", "loss": "14.6243", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension extension =IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 70, "n_pass": [194, 24, 9]}
{"time": "2021-02-24 01:50:29.125481", "score": "0.1725", "loss": "14.634", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtensionextension =IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 69, "n_pass": [196, 26, 10]}
{"time": "2021-02-24 01:50:31.799474", "score": "0.1725", "loss": "14.634", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension =IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 68, "n_pass": [197, 27, 11]}
{"time": "2021-02-24 01:50:34.457617", "score": "0.1725", "loss": "14.634", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension=IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 67, "n_pass": [198, 28, 12]}
{"time": "2021-02-24 01:50:37.111103", "score": "0.1751", "loss": "14.5778", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtensionIdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 66, "n_pass": [199, 29, 13]}
{"time": "2021-02-24 01:50:39.842307", "score": "0.1751", "loss": "14.5778", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension(requestedL); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 65, "n_pass": [200, 30, 14]}
{"time": "2021-02-24 01:50:42.549033", "score": "0.2119", "loss": "14.6481", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension(L); assertEquals(extensionName, extension.getExtensionHeader); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 64, "n_pass": [202, 31, 15]}
{"time": "2021-02-24 01:50:50.506913", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter() throws Exception {IdleTimeoutExtension(L); assertEquals(extensionName, extension); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 62, "n_pass": [209, 34, 16]}
{"time": "2021-02-24 01:51:02.263586", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception {IdleTimeoutExtension(L); assertEquals(extensionName, extension); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 61, "n_pass": [236, 38, 17]}
{"time": "2021-02-24 01:51:04.890052", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L); assertEquals(extensionName, extension); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 60, "n_pass": [240, 39, 18]}
{"time": "2021-02-24 01:51:27.842856", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName, extension); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 59, "n_pass": [323, 46, 19]}
{"time": "2021-02-24 01:51:30.530362", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName,extension); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 58, "n_pass": [328, 47, 20]}
{"time": "2021-02-24 01:51:33.166876", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName,extension);assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 57, "n_pass": [332, 48, 21]}
{"time": "2021-02-24 01:51:43.683817", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName,extension);assertEquals(Long.toString(4L),extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 56, "n_pass": [343, 52, 22]}
{"time": "2021-02-24 01:51:51.716905", "score": "0.1559", "loss": "14.688", "code": "@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName,extension);assertEquals(Long.toString(4L),extension.getExtensionHeader().getParameters().get(0).getValue());}", "n_tokens": 55, "n_pass": [364, 55, 23]}

Minimal simplified code:
@Test void shouldAddTimeoutParameter()throws Exception{IdleTimeoutExtension(L);assertEquals(extensionName,extension);assertEquals(Long.toString(4L),extension.getExtensionHeader().getParameters().get(0).getValue());}

