
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/math/FloatArrays_addToFirstScaled.java
method_name = addToFirstScaled
method_body = public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i < first.length; i++) { first[i] = first[i] + second[i] * scale; } }
predict, score, loss = combine, 0.2559993863105774, 17.363956451416016

Trace of simplified code(s):
{"time": "2021-02-24 14:25:05.138904", "score": "0.256", "loss": "17.364", "code": "public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i < first.length; i++) { first[i] = first[i] + second[i] * scale; } }", "n_tokens": 93, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 14:25:11.249315", "score": "0.2269", "loss": "17.4519", "code": "public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second[i] * scale; } }", "n_tokens": 87, "n_pass": [53, 3, 2]}
{"time": "2021-02-24 14:25:23.554809", "score": "0.2561", "loss": "17.3267", "code": "public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 84, "n_pass": [106, 7, 3]}
{"time": "2021-02-24 14:25:26.377731", "score": "0.2561", "loss": "17.3267", "code": "static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 82, "n_pass": [109, 8, 4]}
{"time": "2021-02-24 14:25:29.204937", "score": "0.2561", "loss": "17.3267", "code": "void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 80, "n_pass": [110, 9, 5]}
{"time": "2021-02-24 14:25:32.479231", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 77, "n_pass": [125, 10, 6]}
{"time": "2021-02-24 14:25:57.257676", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first, float[] second, float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 76, "n_pass": [235, 15, 7]}
{"time": "2021-02-24 14:25:59.905788", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[] second, float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 75, "n_pass": [238, 16, 8]}
{"time": "2021-02-24 14:26:02.527847", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second, float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 74, "n_pass": [242, 17, 9]}
{"time": "2021-02-24 14:26:05.151046", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 73, "n_pass": [245, 18, 10]}
{"time": "2021-02-24 14:26:07.776581", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale){ validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 72, "n_pass": [250, 19, 11]}
{"time": "2021-02-24 14:26:10.408443", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 71, "n_pass": [252, 20, 12]}
{"time": "2021-02-24 14:26:29.229769", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 70, "n_pass": [349, 24, 13]}
{"time": "2021-02-24 14:26:37.143535", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 69, "n_pass": [353, 27, 14]}
{"time": "2021-02-24 14:26:39.771706", "score": "0.2553", "loss": "17.3332", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 68, "n_pass": [355, 28, 15]}
{"time": "2021-02-24 14:26:42.416135", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 67, "n_pass": [356, 29, 16]}
{"time": "2021-02-24 14:26:45.062440", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 66, "n_pass": [358, 30, 17]}
{"time": "2021-02-24 14:26:47.698644", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){ first[i] = first[i] + second * scale; } }", "n_tokens": 65, "n_pass": [363, 31, 18]}
{"time": "2021-02-24 14:26:50.332900", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i] = first[i] + second * scale; } }", "n_tokens": 64, "n_pass": [365, 32, 19]}
{"time": "2021-02-24 14:26:52.966443", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]= first[i] + second * scale; } }", "n_tokens": 63, "n_pass": [370, 33, 20]}
{"time": "2021-02-24 14:26:55.630690", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i] + second * scale; } }", "n_tokens": 62, "n_pass": [372, 34, 21]}
{"time": "2021-02-24 14:26:58.268896", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+ second * scale; } }", "n_tokens": 61, "n_pass": [377, 35, 22]}
{"time": "2021-02-24 14:27:00.892798", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+second * scale; } }", "n_tokens": 60, "n_pass": [379, 36, 23]}
{"time": "2021-02-24 14:27:03.520202", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+second* scale; } }", "n_tokens": 59, "n_pass": [381, 37, 24]}
{"time": "2021-02-24 14:27:06.145171", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+second*scale; } }", "n_tokens": 58, "n_pass": [383, 38, 25]}
{"time": "2021-02-24 14:27:08.788662", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+second*scale;} }", "n_tokens": 57, "n_pass": [386, 39, 26]}
{"time": "2021-02-24 14:27:11.414562", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first, second); for(int i;;i++){first[i]=first[i]+second*scale;}}", "n_tokens": 56, "n_pass": [388, 40, 27]}
{"time": "2021-02-24 14:27:14.835944", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first,second); for(int i;;i++){first[i]=first[i]+second*scale;}}", "n_tokens": 55, "n_pass": [413, 41, 28]}
{"time": "2021-02-24 14:27:17.466990", "score": "0.2563", "loss": "17.3425", "code": "void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first,second);for(int i;;i++){first[i]=first[i]+second*scale;}}", "n_tokens": 54, "n_pass": [417, 42, 29]}

Minimal simplified code:
void addToFirstScaled(float[]first,float[]second,float scale){validateArrays(first,second);for(int i;;i++){first[i]=first[i]+second*scale;}}

