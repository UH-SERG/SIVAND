
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/coreos__jetcd/jetcd-core/src/main/java/com/coreos/jetcd/lease/LeaseTimeToLiveResponse_getKeys.java
method_name = getKeys
method_body = public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys = getResponse().getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }
predict, score, loss = keySet, 0.18801531195640564, 3.4056265354156494

Trace of simplified code(s):
{"time": "2021-02-24 03:43:13.648316", "score": "0.188", "loss": "3.4056", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys = getResponse().getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }", "n_tokens": 81, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:43:17.078332", "score": "0.1898", "loss": "2.9607", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }", "n_tokens": 76, "n_pass": [50, 2, 2]}
{"time": "2021-02-24 03:43:22.378641", "score": "0.168", "loss": "3.269", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } return keys; }", "n_tokens": 71, "n_pass": [56, 4, 3]}
{"time": "2021-02-24 03:43:28.459255", "score": "0.1456", "loss": "3.6425", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 68, "n_pass": [101, 6, 4]}
{"time": "2021-02-24 03:43:31.105244", "score": "0.1456", "loss": "3.6425", "code": "synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 66, "n_pass": [102, 7, 5]}
{"time": "2021-02-24 03:43:33.748527", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 64, "n_pass": [103, 8, 6]}
{"time": "2021-02-24 03:43:45.715082", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence>getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 63, "n_pass": [183, 11, 7]}
{"time": "2021-02-24 03:43:48.371330", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence>getKeys(){ if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 62, "n_pass": [186, 12, 8]}
{"time": "2021-02-24 03:43:51.052687", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence>getKeys(){if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 61, "n_pass": [188, 13, 9]}
{"time": "2021-02-24 03:43:53.696423", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence>getKeys(){if(keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 60, "n_pass": [190, 14, 10]}
{"time": "2021-02-24 03:43:56.336045", "score": "0.1456", "loss": "3.6425", "code": "List<ByteSequence>getKeys(){if(keys== null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 59, "n_pass": [193, 15, 11]}
{"time": "2021-02-24 03:43:58.967475", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys= null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 58, "n_pass": [194, 16, 12]}
{"time": "2021-02-24 03:44:01.586388", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys=null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 57, "n_pass": [196, 17, 13]}
{"time": "2021-02-24 03:44:04.239414", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys=null){ keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 56, "n_pass": [199, 18, 14]}
{"time": "2021-02-24 03:44:06.870754", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys=null){keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 55, "n_pass": [201, 19, 15]}
{"time": "2021-02-24 03:44:09.483014", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } ; }", "n_tokens": 54, "n_pass": [203, 20, 16]}
{"time": "2021-02-24 03:44:25.341045", "score": "0.1428", "loss": "3.7418", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } }", "n_tokens": 52, "n_pass": [226, 26, 17]}
{"time": "2021-02-24 03:44:28.336420", "score": "0.1361", "loss": "3.8563", "code": "List<ByteSequence>getKeys(){if(keysnull){keys.getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } }", "n_tokens": 51, "n_pass": [239, 27, 18]}
{"time": "2021-02-24 03:44:31.024229", "score": "0.1524", "loss": "3.6301", "code": "List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } }", "n_tokens": 50, "n_pass": [240, 28, 19]}
{"time": "2021-02-24 03:44:48.927248", "score": "0.1524", "loss": "3.6301", "code": "List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings-> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } }", "n_tokens": 49, "n_pass": [306, 34, 20]}
{"time": "2021-02-24 03:44:54.205641", "score": "0.1524", "loss": "3.6301", "code": "List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings->ByteSequence.fromBytes(byteStrings.toByteArray())).collect(); } }", "n_tokens": 48, "n_pass": [308, 36, 21]}
{"time": "2021-02-24 03:45:02.174327", "score": "0.1524", "loss": "3.6301", "code": "List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings->ByteSequence.fromBytes(byteStrings.toByteArray())).collect();} }", "n_tokens": 47, "n_pass": [325, 39, 22]}
{"time": "2021-02-24 03:45:04.774360", "score": "0.1524", "loss": "3.6301", "code": "List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings->ByteSequence.fromBytes(byteStrings.toByteArray())).collect();}}", "n_tokens": 46, "n_pass": [327, 40, 23]}

Minimal simplified code:
List<ByteSequence>getKeys(){if(keys){keys.getKeysList().stream().map(byteStrings->ByteSequence.fromBytes(byteStrings.toByteArray())).collect();}}

