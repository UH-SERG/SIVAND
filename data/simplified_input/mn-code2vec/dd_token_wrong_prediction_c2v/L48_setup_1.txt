
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-rest/src/test/java/org/forgerock/openam/rest/RealmContextFilterTest_setup.java
method_name = setup
method_body = @SuppressWarnings("unchecked") @BeforeMethod public void setup() throws Exception { initMocks(this); filter = new RealmContextFilter(coreWrapper, realmValidator); given(coreWrapper.getOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }
predict, score, loss = setUp, 0.8239553570747375, 1.7724764347076416

Trace of simplified code(s):
{"time": "2021-02-23 16:48:35.378266", "score": "0.824", "loss": "1.7725", "code": "@SuppressWarnings(\"unchecked\") @BeforeMethod public void setup() throws Exception { initMocks(this); filter = new RealmContextFilter(coreWrapper, realmValidator); given(coreWrapper.getOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 80, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 16:48:38.070926", "score": "0.663", "loss": "1.1106", "code": " public void setup() throws Exception { initMocks(this); filter = new RealmContextFilter(coreWrapper, realmValidator); given(coreWrapper.getOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 70, "n_pass": [20, 2, 2]}
{"time": "2021-02-23 16:48:40.726392", "score": "0.9519", "loss": "3.67", "code": " public void setup() throws Exception { initMocks(this); filter = new RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 60, "n_pass": [23, 3, 3]}
{"time": "2021-02-23 16:48:46.478150", "score": "0.6774", "loss": "4.3681", "code": " public void setup() throws Exception { initMocks(this);new RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 55, "n_pass": [52, 5, 4]}
{"time": "2021-02-23 16:48:52.232156", "score": "0.9291", "loss": "2.9568", "code": " public void setup() throws Exception { initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(ENDPOINT_PATH_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 53, "n_pass": [87, 7, 5]}
{"time": "2021-02-23 16:48:54.886378", "score": "0.9441", "loss": "3.244", "code": " public void setup() throws Exception { initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 50, "n_pass": [92, 8, 6]}
{"time": "2021-02-23 16:48:57.536220", "score": "0.9441", "loss": "3.244", "code": " void setup() throws Exception { initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 48, "n_pass": [98, 9, 7]}
{"time": "2021-02-23 16:49:05.963049", "score": "0.9441", "loss": "3.244", "code": "void setup() throws Exception { initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 47, "n_pass": [156, 11, 8]}
{"time": "2021-02-23 16:49:09.017474", "score": "0.9441", "loss": "3.244", "code": "void setup()throws Exception { initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 46, "n_pass": [161, 12, 9]}
{"time": "2021-02-23 16:49:11.658330", "score": "0.9441", "loss": "3.244", "code": "void setup()throws Exception{ initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 45, "n_pass": [165, 13, 10]}
{"time": "2021-02-23 16:49:14.325551", "score": "0.9441", "loss": "3.244", "code": "void setup()throws Exception{initMocks(this);RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 44, "n_pass": [167, 14, 11]}
{"time": "2021-02-23 16:49:19.600596", "score": "0.6917", "loss": "4.451", "code": "void setup()throws Exception{initMocks();RealmContextFilter(coreWrappergetOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 43, "n_pass": [170, 16, 12]}
{"time": "2021-02-23 16:49:24.860142", "score": "0.4398", "loss": "3.0836", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization(any(SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 42, "n_pass": [175, 18, 13]}
{"time": "2021-02-23 16:49:27.509793", "score": "0.443", "loss": "3.1391", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization((SSOToken.class), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 41, "n_pass": [178, 19, 14]}
{"time": "2021-02-23 16:49:30.136041", "score": "0.4474", "loss": "3.1367", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization((SSOTokenclass), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 40, "n_pass": [181, 20, 15]}
{"time": "2021-02-23 16:49:32.788434", "score": "0.4395", "loss": "3.1406", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization((SSOToken), eq(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 39, "n_pass": [182, 21, 16]}
{"time": "2021-02-23 16:49:35.424977", "score": "0.4031", "loss": "2.624", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization((SSOToken),(_ELEMENT))).willThrow(IdRepoException.class); }", "n_tokens": 37, "n_pass": [184, 22, 17]}
{"time": "2021-02-23 16:49:38.068468", "score": "0.4717", "loss": "2.2845", "code": "void setup()throws Exception{initMocks();RealmContextFilter(getOrganization((SSOToken),(_ELEMENT))).willThrow(IdRepoException); }", "n_tokens": 35, "n_pass": [190, 23, 18]}
{"time": "2021-02-23 16:49:41.513240", "score": "0.5083", "loss": "3.5774", "code": "void setup()throws Exception{initMocks();(getOrganization((SSOToken),(_ELEMENT))).willThrow(IdRepoException); }", "n_tokens": 34, "n_pass": [206, 24, 19]}
{"time": "2021-02-23 16:49:45.760285", "score": "0.6203", "loss": "2.6958", "code": "void setup()throws Exception{initMocks();(getOrganization((SSOToken)(_ELEMENT))).willThrow(IdRepoException); }", "n_tokens": 33, "n_pass": [250, 25, 20]}
{"time": "2021-02-23 16:49:48.421289", "score": "0.6203", "loss": "2.6958", "code": "void setup()throws Exception{initMocks();(getOrganization((SSOToken)(ELEMENT))).willThrow(IdRepoException); }", "n_tokens": 32, "n_pass": [252, 26, 21]}
{"time": "2021-02-23 16:49:53.700837", "score": "0.6203", "loss": "2.6958", "code": "void setup()throws Exception{initMocks();(getOrganization((SSOToken)(ELEMENT))).willThrow(IdRepoException);}", "n_tokens": 31, "n_pass": [263, 28, 22]}
{"time": "2021-02-23 16:49:57.144643", "score": "0.4164", "loss": "3.8754", "code": "void setup()throws Exception{initMocks();(((SSOToken)(ELEMENT))).willThrow(IdRepoException);}", "n_tokens": 30, "n_pass": [279, 29, 23]}

Minimal simplified code:
void setup()throws Exception{initMocks();(((SSOToken)(ELEMENT))).willThrow(IdRepoException);}

