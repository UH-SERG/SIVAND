
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/InstanceList_subList.java
method_name = subList
method_body = public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException("proportion must by <= 1.0"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportion *= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }
predict, score, loss = subset, 0.44525662064552307, 12.954523086547852

Trace of simplified code(s):
{"time": "2021-02-23 19:07:48.303872", "score": "0.4727", "loss": "12.9862", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"proportion must by <= 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportion *= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 132, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:07:53.685846", "score": "0.487", "loss": "12.9743", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\" 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportion *= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 124, "n_pass": [48, 3, 2]}
{"time": "2021-02-23 19:08:01.822818", "score": "0.4778", "loss": "12.7286", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\" 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportionother.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 120, "n_pass": [103, 6, 3]}
{"time": "2021-02-23 19:08:04.528426", "score": "0.3892", "loss": "12.519", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\" 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportionother.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 116, "n_pass": [108, 7, 4]}
{"time": "2021-02-23 19:08:10.308103", "score": "0.2878", "loss": "12.4714", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\" 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportionother.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 112, "n_pass": [120, 9, 5]}
{"time": "2021-02-23 19:08:12.987668", "score": "0.3621", "loss": "12.5547", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportionother.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 108, "n_pass": [122, 10, 6]}
{"time": "2021-02-23 19:08:30.275325", "score": "0.3583", "loss": "12.669", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.Random()); proportionother.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 106, "n_pass": [214, 16, 7]}
{"time": "2021-02-23 19:08:32.953406", "score": "0.3142", "loss": "12.7154", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java()); proportionother.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 104, "n_pass": [215, 17, 8]}
{"time": "2021-02-23 19:08:35.626956", "score": "0.366", "loss": "12.9508", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());other.size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 102, "n_pass": [218, 18, 9]}
{"time": "2021-02-23 19:08:38.301378", "score": "0.3549", "loss": "12.6714", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (int i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 100, "n_pass": [219, 19, 10]}
{"time": "2021-02-23 19:08:40.982467", "score": "0.3304", "loss": "12.6101", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0; i; i++) other.add(get(i)); return other; }", "n_tokens": 98, "n_pass": [224, 20, 11]}
{"time": "2021-02-23 19:08:43.659866", "score": "0.377", "loss": "12.4349", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other.add(get(i)); return other; }", "n_tokens": 96, "n_pass": [228, 21, 12]}
{"time": "2021-02-23 19:08:46.337275", "score": "0.6535", "loss": "13.4074", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get(i)); return other; }", "n_tokens": 94, "n_pass": [233, 22, 13]}
{"time": "2021-02-23 19:08:48.999382", "score": "0.6505", "loss": "13.5088", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get); return other; }", "n_tokens": 91, "n_pass": [235, 23, 14]}
{"time": "2021-02-23 19:08:51.675185", "score": "0.5371", "loss": "14.1042", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get); ; }", "n_tokens": 88, "n_pass": [237, 24, 15]}
{"time": "2021-02-23 19:08:54.339426", "score": "0.5371", "loss": "14.1042", "code": "InstanceList subList(double proportion) { if (proportion > 1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get); ; }", "n_tokens": 86, "n_pass": [239, 25, 16]}
{"time": "2021-02-23 19:08:57.433459", "score": "0.5264", "loss": "14.0673", "code": "InstanceList subList(double proportion) { if (proportion > 0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get); ; }", "n_tokens": 84, "n_pass": [249, 26, 17]}
{"time": "2021-02-23 19:09:00.095675", "score": "0.5242", "loss": "14.3487", "code": "InstanceList subList(double proportion) { if (proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++) other(get); ; }", "n_tokens": 82, "n_pass": [251, 27, 18]}
{"time": "2021-02-23 19:09:10.773774", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion) { if (proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get); ; }", "n_tokens": 80, "n_pass": [278, 31, 19]}
{"time": "2021-02-23 19:09:32.407165", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion) { if (proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 79, "n_pass": [399, 35, 20]}
{"time": "2021-02-23 19:09:36.363105", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){ if (proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 78, "n_pass": [410, 36, 21]}
{"time": "2021-02-23 19:09:39.023205", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if (proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 77, "n_pass": [412, 37, 22]}
{"time": "2021-02-23 19:09:41.680405", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion > 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 76, "n_pass": [414, 38, 23]}
{"time": "2021-02-23 19:09:44.338137", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion> 0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 75, "n_pass": [417, 39, 24]}
{"time": "2021-02-23 19:09:46.996886", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 74, "n_pass": [419, 40, 25]}
{"time": "2021-02-23 19:09:49.658221", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other = (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 73, "n_pass": [427, 41, 26]}
{"time": "2021-02-23 19:10:00.336829", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other= (InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 72, "n_pass": [431, 45, 27]}
{"time": "2021-02-23 19:10:03.019396", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList) clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 71, "n_pass": [433, 46, 28]}
{"time": "2021-02-23 19:10:05.681750", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone(); other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 70, "n_pass": [437, 47, 29]}
{"time": "2021-02-23 19:10:08.345680", "score": "0.3769", "loss": "14.7321", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(new java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 69, "n_pass": [442, 48, 30]}
{"time": "2021-02-23 19:10:13.683848", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle( java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 68, "n_pass": [447, 50, 31]}
{"time": "2021-02-23 19:10:16.341885", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size(); for (i = 0;; i++)(get) ; }", "n_tokens": 67, "n_pass": [448, 51, 32]}
{"time": "2021-02-23 19:10:19.038376", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for (i = 0;; i++)(get) ; }", "n_tokens": 66, "n_pass": [458, 52, 33]}
{"time": "2021-02-23 19:10:21.699244", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i = 0;; i++)(get) ; }", "n_tokens": 65, "n_pass": [460, 53, 34]}
{"time": "2021-02-23 19:10:24.448216", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i= 0;; i++)(get) ; }", "n_tokens": 64, "n_pass": [463, 54, 35]}
{"time": "2021-02-23 19:10:27.116585", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i=0;; i++)(get) ; }", "n_tokens": 63, "n_pass": [465, 55, 36]}
{"time": "2021-02-23 19:10:29.777749", "score": "0.4027", "loss": "14.7639", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i=0;;i++)(get) ; }", "n_tokens": 62, "n_pass": [469, 56, 37]}
{"time": "2021-02-23 19:10:47.104291", "score": "0.2884", "loss": "15.3276", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i0;;i++)(get) ; }", "n_tokens": 61, "n_pass": [526, 62, 38]}
{"time": "2021-02-23 19:10:49.759894", "score": "0.2884", "loss": "15.3276", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(i;;i++)(get) ; }", "n_tokens": 60, "n_pass": [527, 63, 39]}
{"time": "2021-02-23 19:11:07.082065", "score": "0.2856", "loss": "15.3586", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(;;i++)(get) ; }", "n_tokens": 59, "n_pass": [585, 69, 40]}
{"time": "2021-02-23 19:11:25.559570", "score": "0.2856", "loss": "15.3586", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(;;i++)(get); }", "n_tokens": 58, "n_pass": [647, 75, 41]}
{"time": "2021-02-23 19:11:28.217156", "score": "0.2856", "loss": "15.3586", "code": "InstanceList subList(double proportion){if(proportion>0)(\"\");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(;;i++)(get);}", "n_tokens": 57, "n_pass": [648, 76, 42]}

Minimal simplified code:
InstanceList subList(double proportion){if(proportion>0)("");InstanceList other=(InstanceList)clone();other.shuffle(java());size();for(;;i++)(get);}

