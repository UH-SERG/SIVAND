
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/main/java/edu/illinois/cs/cogcomp/core/datastructures/vectors/DVector2D_max.java
method_name = max
method_body = public double max(int i) { if (i < 0 || i >= sizes.size()) throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of DVector2D."); double result = -Double.MAX_VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }
predict, score, loss = get, 0.8143328428268433, 3.174720048904419

Trace of simplified code(s):
{"time": "2021-02-24 00:54:58.842007", "score": "0.7311", "loss": "2.8087", "code": "public double max(int i) { if (i < 0 || i >= sizes.size()) throw new ArrayIndexOutOfBoundsException(\"Attempted to access negative index of DVector2D.\"); double result = -Double.MAX_VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 151, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 00:55:01.709308", "score": "0.7081", "loss": "3.5176", "code": "public double max(int i) { if (i < 0 || i >= sizes.size()) VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 113, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 00:55:07.242659", "score": "0.4718", "loss": "3.1669", "code": "public double max(int i) { if (i >= sizes.size()) VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 104, "n_pass": [46, 4, 3]}
{"time": "2021-02-24 00:55:09.984942", "score": "0.4119", "loss": "3.7956", "code": "public double max(int i) { if (i >= sizes.size()) sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 95, "n_pass": [48, 5, 4]}
{"time": "2021-02-24 00:55:12.728794", "score": "0.4993", "loss": "2.5241", "code": "public double max(int i) { if (i >= sizes.size())for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 86, "n_pass": [49, 6, 5]}
{"time": "2021-02-24 00:55:15.480175", "score": "0.6924", "loss": "2.9493", "code": "public double max(int i) { if (i >= sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 81, "n_pass": [78, 7, 6]}
{"time": "2021-02-24 00:55:18.228448", "score": "0.7123", "loss": "6.8985", "code": "public double max(int i) { if (i >= sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i][j]; return result; }", "n_tokens": 76, "n_pass": [85, 8, 7]}
{"time": "2021-02-24 00:55:21.442353", "score": "0.576", "loss": "7.3175", "code": "public double max(int i) { if (sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i][j]; return result; }", "n_tokens": 71, "n_pass": [93, 9, 8]}
{"time": "2021-02-24 00:55:25.086866", "score": "0.7139", "loss": "7.4508", "code": "public double max(int i) { if (size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i][j]; return result; }", "n_tokens": 69, "n_pass": [139, 10, 9]}
{"time": "2021-02-24 00:55:27.873029", "score": "0.7131", "loss": "7.4504", "code": "public double max(int i) { if (size())for (int0; j < size; j) if (vector[i][j] > result)vector[i][j]; return result; }", "n_tokens": 67, "n_pass": [149, 11, 10]}
{"time": "2021-02-24 00:55:30.780688", "score": "0.6924", "loss": "7.5273", "code": "public double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i][j]; return result; }", "n_tokens": 64, "n_pass": [153, 12, 11]}
{"time": "2021-02-24 00:55:33.550178", "score": "0.6144", "loss": "7.4387", "code": "public double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; return result; }", "n_tokens": 61, "n_pass": [157, 13, 12]}
{"time": "2021-02-24 00:55:36.281925", "score": "0.2539", "loss": "7.577", "code": "public double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 58, "n_pass": [159, 14, 13]}
{"time": "2021-02-24 00:55:39.009677", "score": "0.2539", "loss": "7.577", "code": "double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 56, "n_pass": [161, 15, 14]}
{"time": "2021-02-24 00:55:49.475654", "score": "0.2539", "loss": "7.577", "code": "double max(int i){ if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 55, "n_pass": [242, 16, 15]}
{"time": "2021-02-24 00:55:52.209933", "score": "0.2539", "loss": "7.577", "code": "double max(int i){if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 54, "n_pass": [243, 17, 16]}
{"time": "2021-02-24 00:55:55.108334", "score": "0.2539", "loss": "7.577", "code": "double max(int i){if(size())for (int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 53, "n_pass": [245, 18, 17]}
{"time": "2021-02-24 00:55:57.873999", "score": "0.2539", "loss": "7.577", "code": "double max(int i){if(size())for(int0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 52, "n_pass": [252, 19, 18]}
{"time": "2021-02-24 00:56:00.601496", "score": "0.2171", "loss": "7.5118", "code": "double max(int i){if(size())for(0; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 51, "n_pass": [254, 20, 19]}
{"time": "2021-02-24 00:56:03.364088", "score": "0.2313", "loss": "7.4982", "code": "double max(int i){if(size())for(; j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 50, "n_pass": [255, 21, 20]}
{"time": "2021-02-24 00:56:06.113553", "score": "0.2313", "loss": "7.4982", "code": "double max(int i){if(size())for(;j < size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 49, "n_pass": [257, 22, 21]}
{"time": "2021-02-24 00:56:08.885157", "score": "0.2313", "loss": "7.4982", "code": "double max(int i){if(size())for(;j< size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 48, "n_pass": [259, 23, 22]}
{"time": "2021-02-24 00:56:11.614924", "score": "0.2313", "loss": "7.4982", "code": "double max(int i){if(size())for(;j<size; j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 47, "n_pass": [261, 24, 23]}
{"time": "2021-02-24 00:56:14.348308", "score": "0.2313", "loss": "7.4982", "code": "double max(int i){if(size())for(;j<size;j) if (vector[i] > result)vector[i]; ; }", "n_tokens": 46, "n_pass": [264, 25, 24]}
{"time": "2021-02-24 00:56:17.073743", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;) if (vector[i] > result)vector[i]; ; }", "n_tokens": 45, "n_pass": [265, 26, 25]}
{"time": "2021-02-24 00:56:19.797801", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if (vector[i] > result)vector[i]; ; }", "n_tokens": 44, "n_pass": [267, 27, 26]}
{"time": "2021-02-24 00:56:22.521648", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i]; ; }", "n_tokens": 43, "n_pass": [269, 28, 27]}
{"time": "2021-02-24 00:56:25.287318", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i]; }", "n_tokens": 41, "n_pass": [279, 29, 28]}
{"time": "2021-02-24 00:56:33.512527", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i];}", "n_tokens": 40, "n_pass": [328, 31, 29]}
{"time": "2021-02-24 00:56:39.964267", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if(vector[i]> result)vector[i];}", "n_tokens": 39, "n_pass": [358, 33, 30]}
{"time": "2021-02-24 00:56:42.715949", "score": "0.2154", "loss": "7.6016", "code": "double max(int i){if(size())for(;j<size;)if(vector[i]>result)vector[i];}", "n_tokens": 38, "n_pass": [360, 34, 31]}

Minimal simplified code:
double max(int i){if(size())for(;j<size;)if(vector[i]>result)vector[i];}

