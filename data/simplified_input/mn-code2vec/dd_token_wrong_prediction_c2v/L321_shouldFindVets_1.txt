
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jenkinsci__docker-workflow-plugin/demo/repo/app/src/test/java/org/springframework/samples/petclinic/service/AbstractClinicServiceTests_shouldFindVets.java
method_name = shouldFindVets
method_body = @Test public void shouldFindVets() { Collection<Vet> vets = this.clinicService.findVets(); Vet vet = EntityUtils.getById(vets, Vet.class, 3); assertThat(vet.getLastName()).isEqualTo("Douglas"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getSpecialties().get(0).getName()).isEqualTo("dentistry"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo("surgery"); }
predict, score, loss = testNormal, 0.39804592728614807, 13.895294189453125

Trace of simplified code(s):
{"time": "2021-02-23 19:31:29.573694", "score": "0.4635", "loss": "14.0203", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.clinicService.findVets(); Vet vet = EntityUtils.getById(vets, Vet.class, 3); assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getSpecialties().get(0).getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 138, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:31:35.020427", "score": "0.7326", "loss": "15.0088", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.clinicService.findVets(); Vet vet; assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getSpecialties().get(0).getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 121, "n_pass": [22, 3, 2]}
{"time": "2021-02-23 19:31:38.172011", "score": "0.2076", "loss": "13.2222", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this. vet; assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getSpecialties().get(0).getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 113, "n_pass": [56, 4, 3]}
{"time": "2021-02-23 19:31:40.875366", "score": "0.6086", "loss": "14.7594", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getSpecialties().get(0).getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 109, "n_pass": [96, 5, 4]}
{"time": "2021-02-23 19:31:46.236517", "score": "0.6159", "loss": "14.5285", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.get(0).getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 105, "n_pass": [105, 7, 5]}
{"time": "2021-02-23 19:31:48.919771", "score": "0.6059", "loss": "14.9405", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().get(1).getName()).isEqualTo(\"surgery\"); }", "n_tokens": 100, "n_pass": [106, 8, 6]}
{"time": "2021-02-23 19:31:51.583775", "score": "0.6217", "loss": "14.2111", "code": "@Test public void shouldFindVets() { Collection<Vet> vets = this.assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 95, "n_pass": [111, 9, 7]}
{"time": "2021-02-23 19:31:54.255330", "score": "0.5434", "loss": "14.3", "code": " void shouldFindVets() { Collection<Vet> vets = this.assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 91, "n_pass": [115, 10, 8]}
{"time": "2021-02-23 19:32:01.671237", "score": "0.4744", "loss": "13.885", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(vet.getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 89, "n_pass": [188, 12, 9]}
{"time": "2021-02-23 19:32:04.349638", "score": "0.6746", "loss": "14.7432", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\"); assertThat(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 87, "n_pass": [190, 13, 10]}
{"time": "2021-02-23 19:32:07.055171", "score": "0.3212", "loss": "14.162", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet.getNrOfSpecialties()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 85, "n_pass": [197, 14, 11]}
{"time": "2021-02-23 19:32:09.727671", "score": "0.4842", "loss": "14.3269", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet()).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 83, "n_pass": [199, 15, 12]}
{"time": "2021-02-23 19:32:12.402844", "score": "0.4561", "loss": "14.3518", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\"); assertThat(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 81, "n_pass": [200, 16, 13]}
{"time": "2021-02-23 19:32:17.757336", "score": "0.3166", "loss": "13.9861", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet.getSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 79, "n_pass": [213, 18, 14]}
{"time": "2021-02-23 19:32:28.642746", "score": "0.3156", "loss": "14.0303", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vetgetSpecialties().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 78, "n_pass": [324, 20, 15]}
{"time": "2021-02-23 19:32:31.310755", "score": "0.3168", "loss": "13.9725", "code": " void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 77, "n_pass": [325, 21, 16]}
{"time": "2021-02-23 19:32:33.992847", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets() { Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 76, "n_pass": [336, 22, 17]}
{"time": "2021-02-23 19:32:37.492514", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets(){ Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 75, "n_pass": [342, 23, 18]}
{"time": "2021-02-23 19:32:40.163598", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets(){Collection<Vet> vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 74, "n_pass": [344, 24, 19]}
{"time": "2021-02-23 19:32:43.257362", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets(){Collection<Vet>vets = assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 73, "n_pass": [349, 25, 20]}
{"time": "2021-02-23 19:32:45.943667", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets(){Collection<Vet>vets= assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 72, "n_pass": [351, 26, 21]}
{"time": "2021-02-23 19:32:48.615611", "score": "0.3168", "loss": "13.9725", "code": "void shouldFindVets(){Collection<Vet>vets=assertThat(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 71, "n_pass": [353, 27, 22]}
{"time": "2021-02-23 19:32:51.285930", "score": "0.3172", "loss": "13.997", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"Douglas\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 70, "n_pass": [354, 28, 23]}
{"time": "2021-02-23 19:32:53.967973", "score": "0.3397", "loss": "14.2928", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"\");(vet).isEqualTo(2); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 69, "n_pass": [364, 29, 24]}
{"time": "2021-02-23 19:32:57.065152", "score": "0.395", "loss": "14.4275", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"\");(vet).isEqualTo(); assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 68, "n_pass": [374, 30, 25]}
{"time": "2021-02-23 19:32:59.748568", "score": "0.395", "loss": "14.4275", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"\");(vet).isEqualTo();assertThat(vet.getName()).isEqualTo(\"dentistry\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 67, "n_pass": [377, 31, 26]}
{"time": "2021-02-23 19:33:07.748773", "score": "0.3741", "loss": "14.4727", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"\");(vet).isEqualTo();assertThat(vet.getName()).isEqualTo(\"\");(vet().getName()).isEqualTo(\"surgery\"); }", "n_tokens": 66, "n_pass": [390, 34, 27]}
{"time": "2021-02-23 19:33:22.214220", "score": "0.3741", "loss": "14.4727", "code": "void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo(\"\");(vet).isEqualTo();assertThat(vet.getName()).isEqualTo(\"\");(vet().getName()).isEqualTo(\"surgery\");}", "n_tokens": 65, "n_pass": [476, 38, 28]}

Minimal simplified code:
void shouldFindVets(){Collection<Vet>vets=(getLastName()).isEqualTo("");(vet).isEqualTo();assertThat(vet.getName()).isEqualTo("");(vet().getName()).isEqualTo("surgery");}

