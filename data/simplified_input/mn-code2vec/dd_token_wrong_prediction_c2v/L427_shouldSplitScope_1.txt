
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-oauth2-common/oauth2-core/src/test/java/org/forgerock/oauth2/core/UtilsTest_shouldSplitScope.java
method_name = shouldSplitScope
method_body = @Test public void shouldSplitScope() { Set<String> expectedScope = new HashSet<String>(); expectedScope.add("a"); expectedScope.add("b"); expectedScope.add("c"); assertEquals(Utils.splitScope("a b c"), expectedScope); }
predict, score, loss = testConstructor, 0.8553602695465088, 17.62199592590332

Trace of simplified code(s):
{"time": "2021-02-24 01:06:23.254872", "score": "0.8554", "loss": "17.622", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope = new HashSet<String>(); expectedScope.add(\"a\"); expectedScope.add(\"b\"); expectedScope.add(\"c\"); assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 83, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:06:25.982338", "score": "0.8618", "loss": "16.8311", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope = new HashSet<String>(); expectedScope.add(\"a\");assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 62, "n_pass": [10, 2, 2]}
{"time": "2021-02-24 01:06:29.188317", "score": "0.8586", "loss": "16.8686", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add(\"a\");assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 52, "n_pass": [23, 3, 3]}
{"time": "2021-02-24 01:06:31.951176", "score": "0.6005", "loss": "16.648", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ;assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 42, "n_pass": [24, 4, 4]}
{"time": "2021-02-24 01:06:35.136607", "score": "0.8984", "loss": "15.9703", "code": "void shouldSplitScope() { Set<String> expectedScope ;assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 37, "n_pass": [41, 5, 5]}
{"time": "2021-02-24 01:06:39.643972", "score": "0.9399", "loss": "16.1042", "code": "void shouldSplitScope() { Set<String> expectedScope ;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 34, "n_pass": [72, 6, 6]}
{"time": "2021-02-24 01:06:47.873707", "score": "0.9399", "loss": "16.1042", "code": "void shouldSplitScope(){ Set<String> expectedScope ;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 33, "n_pass": [122, 7, 7]}
{"time": "2021-02-24 01:06:50.586740", "score": "0.9399", "loss": "16.1042", "code": "void shouldSplitScope(){Set<String> expectedScope ;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 32, "n_pass": [124, 8, 8]}
{"time": "2021-02-24 01:06:53.733653", "score": "0.9399", "loss": "16.1042", "code": "void shouldSplitScope(){Set<String>expectedScope ;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 31, "n_pass": [129, 9, 9]}
{"time": "2021-02-24 01:06:56.473801", "score": "0.9399", "loss": "16.1042", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 30, "n_pass": [131, 10, 10]}
{"time": "2021-02-24 01:06:59.642887", "score": "0.9605", "loss": "16.8332", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals(splitScope(\"a \"), expectedScope); }", "n_tokens": 28, "n_pass": [135, 11, 11]}
{"time": "2021-02-24 01:07:06.360942", "score": "0.9605", "loss": "16.8332", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals(splitScope(\"a\"), expectedScope); }", "n_tokens": 27, "n_pass": [171, 12, 12]}
{"time": "2021-02-24 01:07:09.104165", "score": "0.9605", "loss": "16.8332", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals(splitScope(\"a\"),expectedScope); }", "n_tokens": 26, "n_pass": [174, 13, 13]}
{"time": "2021-02-24 01:07:11.860878", "score": "0.9605", "loss": "16.8332", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals(splitScope(\"a\"),expectedScope);}", "n_tokens": 25, "n_pass": [178, 14, 14]}
{"time": "2021-02-24 01:07:16.774001", "score": "0.9576", "loss": "18.2607", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals((\"a\"),expectedScope);}", "n_tokens": 24, "n_pass": [194, 15, 15]}
{"time": "2021-02-24 01:07:19.523741", "score": "0.9568", "loss": "18.2674", "code": "void shouldSplitScope(){Set<String>expectedScope;assertEquals((\"\"),expectedScope);}", "n_tokens": 23, "n_pass": [197, 16, 16]}

Minimal simplified code:
void shouldSplitScope(){Set<String>expectedScope;assertEquals((""),expectedScope);}

