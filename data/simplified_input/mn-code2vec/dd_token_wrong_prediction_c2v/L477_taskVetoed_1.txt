
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/TaskVars_taskVetoed.java
method_name = taskVetoed
method_body = public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup = Veto.identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO_GROUPS_TO_COUNTERS.get(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_TYPE_TO_COUNTERS.get(veto.getVetoType())).increment(); } }
predict, score, loss = incrementAll, 0.18035414814949036, 15.655821800231934

Trace of simplified code(s):
{"time": "2021-02-23 03:01:40.141432", "score": "0.1804", "loss": "15.6558", "code": "public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup = Veto.identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO_GROUPS_TO_COUNTERS.get(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_TYPE_TO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 114, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 03:01:46.492308", "score": "0.2766", "loss": "15.6184", "code": "public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup =identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO_GROUPS_TO_COUNTERS.get(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_TYPE_TO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 111, "n_pass": [99, 3, 2]}
{"time": "2021-02-23 03:01:49.243640", "score": "0.2766", "loss": "15.6184", "code": "public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup =identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO_COUNTERS.get(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_TYPE_TO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 107, "n_pass": [108, 4, 3]}
{"time": "2021-02-23 03:01:51.984689", "score": "0.2086", "loss": "15.5821", "code": "public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup =identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_TYPE_TO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 103, "n_pass": [109, 5, 4]}
{"time": "2021-02-23 03:01:57.485606", "score": "0.2086", "loss": "15.5821", "code": "public void taskVetoed(Set<Veto> vetoes) { VetoGroup vetoGroup =identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 99, "n_pass": [118, 7, 5]}
{"time": "2021-02-23 03:02:00.632737", "score": "0.1932", "loss": "15.2293", "code": "public void taskVetoed(Set<Veto> vetoes) {vetoGroup =identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 96, "n_pass": [129, 8, 6]}
{"time": "2021-02-23 03:02:03.367493", "score": "0.2419", "loss": "15.5566", "code": "public void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)).increment(); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 93, "n_pass": [130, 9, 7]}
{"time": "2021-02-23 03:02:06.085572", "score": "0.1756", "loss": "15.8254", "code": "public void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(VETO_COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 89, "n_pass": [140, 10, 8]}
{"time": "2021-02-23 03:02:13.993189", "score": "0.1967", "loss": "15.8292", "code": "public void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(veto.getVetoType())).increment(); } }", "n_tokens": 87, "n_pass": [227, 12, 9]}
{"time": "2021-02-23 03:02:19.443958", "score": "0.192", "loss": "15.8113", "code": "public void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 85, "n_pass": [230, 14, 10]}
{"time": "2021-02-23 03:02:22.156048", "score": "0.192", "loss": "15.8113", "code": " void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 84, "n_pass": [238, 15, 11]}
{"time": "2021-02-23 03:02:24.858301", "score": "0.192", "loss": "15.8113", "code": "void taskVetoed(Set<Veto> vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 83, "n_pass": [239, 16, 12]}
{"time": "2021-02-23 03:02:28.493929", "score": "0.192", "loss": "15.8113", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup != VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 82, "n_pass": [248, 17, 13]}
{"time": "2021-02-23 03:02:31.272225", "score": "0.1729", "loss": "15.7786", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= VetoGroup.EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 80, "n_pass": [256, 18, 14]}
{"time": "2021-02-23 03:02:36.832866", "score": "0.1812", "loss": "15.7983", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) { counters.getUnchecked(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 78, "n_pass": [258, 20, 15]}
{"time": "2021-02-23 03:02:39.625580", "score": "0.3747", "loss": "16.3453", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) { counters(VETO(vetoGroup)); } for (Veto veto : vetoes) { counters.getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 76, "n_pass": [262, 21, 16]}
{"time": "2021-02-23 03:02:42.397028", "score": "0.4159", "loss": "16.3125", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) { counters(VETO(vetoGroup)); } for (Veto veto : vetoes) { getUnchecked(COUNTERS.get(getVetoType())).increment(); } }", "n_tokens": 74, "n_pass": [275, 22, 17]}
{"time": "2021-02-23 03:02:45.124556", "score": "0.3697", "loss": "16.331", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) { counters(VETO(vetoGroup)); } for (Veto veto : vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 72, "n_pass": [277, 23, 18]}
{"time": "2021-02-23 03:02:51.568064", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup)); } for (Veto veto : vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 70, "n_pass": [304, 25, 19]}
{"time": "2021-02-23 03:03:04.975254", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));} for (Veto veto : vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 69, "n_pass": [409, 27, 20]}
{"time": "2021-02-23 03:03:07.706844", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for (Veto veto : vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 68, "n_pass": [411, 28, 21]}
{"time": "2021-02-23 03:03:10.423891", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto : vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 67, "n_pass": [413, 29, 22]}
{"time": "2021-02-23 03:03:13.147341", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto: vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 66, "n_pass": [418, 30, 23]}
{"time": "2021-02-23 03:03:15.840478", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes) { getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 65, "n_pass": [420, 31, 24]}
{"time": "2021-02-23 03:03:18.562956", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){ getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 64, "n_pass": [423, 32, 25]}
{"time": "2021-02-23 03:03:21.278808", "score": "0.329", "loss": "16.0486", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){getUnchecked(get(getVetoType())).increment(); } }", "n_tokens": 63, "n_pass": [425, 33, 26]}
{"time": "2021-02-23 03:03:23.998839", "score": "0.4409", "loss": "16.6549", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){(get(getVetoType())).increment(); } }", "n_tokens": 62, "n_pass": [426, 34, 27]}
{"time": "2021-02-23 03:03:26.712132", "score": "0.4536", "loss": "16.7609", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment(); } }", "n_tokens": 61, "n_pass": [428, 35, 28]}
{"time": "2021-02-23 03:03:29.423674", "score": "0.4536", "loss": "16.7609", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();} }", "n_tokens": 60, "n_pass": [440, 36, 29]}
{"time": "2021-02-23 03:03:32.152043", "score": "0.4536", "loss": "16.7609", "code": "void taskVetoed(Set<Veto>vetoes) {identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 59, "n_pass": [442, 37, 30]}
{"time": "2021-02-23 03:03:35.699820", "score": "0.4536", "loss": "16.7609", "code": "void taskVetoed(Set<Veto>vetoes){identifyGroup(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 58, "n_pass": [454, 38, 31]}
{"time": "2021-02-23 03:03:38.493794", "score": "0.4446", "loss": "17.6435", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes); if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 57, "n_pass": [456, 39, 32]}
{"time": "2021-02-23 03:03:41.301654", "score": "0.4446", "loss": "17.6435", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if (vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 56, "n_pass": [461, 40, 33]}
{"time": "2021-02-23 03:03:43.991338", "score": "0.4446", "loss": "17.6435", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup= EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 55, "n_pass": [463, 41, 34]}
{"time": "2021-02-23 03:03:46.680943", "score": "0.4446", "loss": "17.6435", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup=EMPTY) {(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 54, "n_pass": [467, 42, 35]}
{"time": "2021-02-23 03:03:49.426163", "score": "0.4446", "loss": "17.6435", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup=EMPTY){(VETO(vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 53, "n_pass": [470, 43, 36]}
{"time": "2021-02-23 03:03:52.178312", "score": "0.6178", "loss": "17.8817", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup=EMPTY){((vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 52, "n_pass": [473, 44, 37]}
{"time": "2021-02-23 03:03:55.881348", "score": "0.6476", "loss": "17.6127", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroupEMPTY){((vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 51, "n_pass": [521, 45, 38]}
{"time": "2021-02-23 03:03:58.623845", "score": "0.6476", "loss": "17.6127", "code": "void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup){((vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}", "n_tokens": 50, "n_pass": [522, 46, 39]}

Minimal simplified code:
void taskVetoed(Set<Veto>vetoes){(vetoes);if(vetoGroup){((vetoGroup));}for(Veto veto:vetoes){((getVetoType())).increment();}}

