
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorControlRod_setControlRodInsertion.java
method_name = setControlRodInsertion
method_body = public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion || newInsertion == controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }
predict, score, loss = update, 0.9190255403518677, 23.045005798339844

Trace of simplified code(s):
{"time": "2021-02-24 03:10:00.902742", "score": "0.919", "loss": "23.045", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion || newInsertion == controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:10:03.910128", "score": "0.9292", "loss": "19.0028", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 96, "n_pass": [49, 2, 2]}
{"time": "2021-02-24 03:10:06.554510", "score": "0.9107", "loss": "19.3446", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 90, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 03:10:09.209575", "score": "0.991", "loss": "24.2781", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { return; } this. Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 83, "n_pass": [55, 4, 4]}
{"time": "2021-02-24 03:10:11.990210", "score": "0.9897", "loss": "24.2267", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { return; } this.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 80, "n_pass": [95, 5, 5]}
{"time": "2021-02-24 03:10:15.039813", "score": "0.9694", "loss": "25.9092", "code": "public void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { return; } this.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 77, "n_pass": [105, 6, 6]}
{"time": "2021-02-24 03:10:20.582369", "score": "0.9677", "loss": "25.5699", "code": "public void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { return; } this.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 74, "n_pass": [112, 8, 7]}
{"time": "2021-02-24 03:10:23.212674", "score": "0.9677", "loss": "25.5699", "code": "public void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 71, "n_pass": [119, 9, 8]}
{"time": "2021-02-24 03:10:35.098890", "score": "0.9594", "loss": "24.0141", "code": "public void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 69, "n_pass": [193, 12, 9]}
{"time": "2021-02-24 03:10:37.780755", "score": "0.9467", "loss": "24.3096", "code": "public void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 67, "n_pass": [198, 13, 10]}
{"time": "2021-02-24 03:10:40.393383", "score": "0.9467", "loss": "24.3096", "code": " void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 66, "n_pass": [202, 14, 11]}
{"time": "2021-02-24 03:10:43.032769", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion() { if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 65, "n_pass": [203, 15, 12]}
{"time": "2021-02-24 03:10:46.434529", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){ if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 64, "n_pass": [209, 16, 13]}
{"time": "2021-02-24 03:10:49.121222", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){if (newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 63, "n_pass": [211, 17, 14]}
{"time": "2021-02-24 03:10:51.784356", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){if(newInsertion > maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 62, "n_pass": [213, 18, 15]}
{"time": "2021-02-24 03:10:54.420622", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){if(newInsertion> maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 61, "n_pass": [216, 19, 16]}
{"time": "2021-02-24 03:10:57.065809", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){if(newInsertion>maxInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 60, "n_pass": [218, 20, 17]}
{"time": "2021-02-24 03:11:00.483189", "score": "0.9467", "loss": "24.3096", "code": "void setControlRodInsertion(){if(newInsertion>maxInsertion || newInsertion == controlRodInsertion)if (!isConnected()) { } this.max(Math.min(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 58, "n_pass": [225, 21, 18]}
{"time": "2021-02-24 03:11:03.562618", "score": "0.9337", "loss": "25.0791", "code": "void setControlRodInsertion(){if(newInsertion>maxInsertion || newInsertion == controlRodInsertion)if (!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 56, "n_pass": [235, 22, 19]}
{"time": "2021-02-24 03:11:06.974224", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(newInsertionmaxInsertion || newInsertion == controlRodInsertion)if (!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 55, "n_pass": [253, 23, 20]}
{"time": "2021-02-24 03:11:14.112974", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion == controlRodInsertion)if (!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 54, "n_pass": [285, 25, 21]}
{"time": "2021-02-24 03:11:23.487104", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion== controlRodInsertion)if (!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 53, "n_pass": [364, 26, 22]}
{"time": "2021-02-24 03:11:26.547484", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if (!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 52, "n_pass": [366, 27, 23]}
{"time": "2021-02-24 03:11:29.181290", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()) { } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 51, "n_pass": [370, 28, 24]}
{"time": "2021-02-24 03:11:34.500074", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){ } this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 50, "n_pass": [377, 30, 25]}
{"time": "2021-02-24 03:11:37.137197", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){} this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 49, "n_pass": [379, 31, 26]}
{"time": "2021-02-24 03:11:39.782633", "score": "0.5392", "loss": "22.4489", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max(Math(newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 48, "n_pass": [381, 32, 27]}
{"time": "2021-02-24 03:11:45.046722", "score": "0.6752", "loss": "19.8896", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((newInsertionmaxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 47, "n_pass": [386, 34, 28]}
{"time": "2021-02-24 03:11:47.666412", "score": "0.6752", "loss": "19.8896", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion), minInsertion); sendControlRodUpdate(); }", "n_tokens": 46, "n_pass": [388, 35, 29]}
{"time": "2021-02-24 03:11:50.430243", "score": "0.7038", "loss": "18.3594", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion) minInsertion); sendControlRodUpdate(); }", "n_tokens": 45, "n_pass": [391, 36, 30]}
{"time": "2021-02-24 03:11:53.149256", "score": "0.7038", "loss": "18.3594", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion)minInsertion); sendControlRodUpdate(); }", "n_tokens": 44, "n_pass": [392, 37, 31]}
{"time": "2021-02-24 03:11:56.238456", "score": "0.7177", "loss": "20.4923", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion)); sendControlRodUpdate(); }", "n_tokens": 43, "n_pass": [393, 38, 32]}
{"time": "2021-02-24 03:11:59.008496", "score": "0.7177", "loss": "20.4923", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate(); }", "n_tokens": 42, "n_pass": [396, 39, 33]}
{"time": "2021-02-24 03:12:01.669681", "score": "0.7177", "loss": "20.4923", "code": "void setControlRodInsertion(){if(maxInsertion || newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate();}", "n_tokens": 41, "n_pass": [401, 40, 34]}
{"time": "2021-02-24 03:12:05.040522", "score": "0.7177", "loss": "20.4923", "code": "void setControlRodInsertion(){if(maxInsertion|| newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate();}", "n_tokens": 40, "n_pass": [412, 41, 35]}
{"time": "2021-02-24 03:12:07.652689", "score": "0.5402", "loss": "16.4355", "code": "void setControlRodInsertion(){if(maxInsertion| newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate();}", "n_tokens": 39, "n_pass": [413, 42, 36]}
{"time": "2021-02-24 03:12:10.242543", "score": "0.5402", "loss": "16.4355", "code": "void setControlRodInsertion(){if(maxInsertion|newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate();}", "n_tokens": 38, "n_pass": [415, 43, 37]}

Minimal simplified code:
void setControlRodInsertion(){if(maxInsertion|newInsertion==controlRodInsertion)if(!isConnected()){}this.max((maxInsertion));sendControlRodUpdate();}

