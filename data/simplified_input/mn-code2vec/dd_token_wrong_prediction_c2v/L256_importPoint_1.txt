
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/math/ec/ECCurve_importPoint.java
method_name = importPoint
method_body = public ECPoint importPoint(ECPoint p) { if (this != p.getCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve.COORD_JACOBIAN: case ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.x.toBigInteger()), fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } } return super.importPoint(p); }
predict, score, loss = createPoint, 0.6107520461082458, 21.9962158203125

Trace of simplified code(s):
{"time": "2021-02-24 06:15:55.600084", "score": "0.7141", "loss": "21.8622", "code": "public ECPoint importPoint(ECPoint p) { if (this != p.getCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve.COORD_JACOBIAN: case ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.x.toBigInteger()), fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } } return super.importPoint(p); }", "n_tokens": 191, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 06:15:58.702735", "score": "0.7977", "loss": "22.1543", "code": "public ECPoint importPoint(ECPoint p) { if (this != p.getCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve.COORD_JACOBIAN: case ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } } return super.importPoint(p); }", "n_tokens": 179, "n_pass": [54, 2, 2]}
{"time": "2021-02-24 06:16:01.812286", "score": "0.673", "loss": "21.6614", "code": "public ECPoint importPoint(ECPoint p) { if (this != p.getCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve.COORD_JACOBIAN: case ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 173, "n_pass": [107, 3, 3]}
{"time": "2021-02-24 06:16:04.516586", "score": "0.8949", "loss": "22.4019", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve.COORD_JACOBIAN: case ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 167, "n_pass": [111, 4, 4]}
{"time": "2021-02-24 06:16:07.276499", "score": "0.6923", "loss": "22.6124", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve. ECCurve.COORD_JACOBIAN_CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 161, "n_pass": [121, 5, 5]}
{"time": "2021-02-24 06:16:09.922546", "score": "0.8706", "loss": "22.8333", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case ECCurve.COORD_JACOBIAN_MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 155, "n_pass": [122, 6, 6]}
{"time": "2021-02-24 06:16:15.291695", "score": "0.7527", "loss": "22.4867", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs[0].toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 149, "n_pass": [124, 8, 7]}
{"time": "2021-02-24 06:16:26.442955", "score": "0.7591", "loss": "22.4383", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); default: break; } }(p); }", "n_tokens": 146, "n_pass": [213, 12, 8]}
{"time": "2021-02-24 06:16:29.092045", "score": "0.7591", "loss": "22.4383", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); break; } }(p); }", "n_tokens": 143, "n_pass": [219, 13, 9]}
{"time": "2021-02-24 06:16:31.732696", "score": "0.7591", "loss": "22.4383", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }(p); }", "n_tokens": 140, "n_pass": [220, 14, 10]}
{"time": "2021-02-24 06:16:34.389082", "score": "0.7591", "loss": "22.4395", "code": "public ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 137, "n_pass": [222, 15, 11]}
{"time": "2021-02-24 06:16:37.049162", "score": "0.7591", "loss": "22.4395", "code": "ECPoint importPoint(ECPoint p) { if (thisgetCurve() && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 135, "n_pass": [224, 16, 12]}
{"time": "2021-02-24 06:16:39.718220", "score": "0.7619", "loss": "22.4828", "code": "ECPoint importPoint(ECPoint p) { if (this && this.getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 132, "n_pass": [230, 17, 13]}
{"time": "2021-02-24 06:16:42.362186", "score": "0.7644", "loss": "22.6013", "code": "ECPoint importPoint(ECPoint p) { if (this &&getCoordinateSystem() == ECCurve.COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 129, "n_pass": [232, 18, 14]}
{"time": "2021-02-24 06:16:45.058235", "score": "0.767", "loss": "22.6872", "code": "ECPoint importPoint(ECPoint p) { if (this &&getCoordinateSystem() ==COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 126, "n_pass": [235, 19, 15]}
{"time": "2021-02-24 06:16:56.144503", "score": "0.7644", "loss": "22.6758", "code": "ECPoint importPoint(ECPoint p) { if (thisgetCoordinateSystem() ==COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 123, "n_pass": [275, 23, 16]}
{"time": "2021-02-24 06:16:58.788611", "score": "0.7672", "loss": "22.6979", "code": "ECPoint importPoint(ECPoint p) { if (this ==COORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 120, "n_pass": [276, 24, 17]}
{"time": "2021-02-24 06:17:01.506671", "score": "0.7675", "loss": "22.7074", "code": "ECPoint importPoint(ECPoint p) { if (thisCOORD_JACOBIAN && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 117, "n_pass": [277, 25, 18]}
{"time": "2021-02-24 06:17:04.164128", "score": "0.7681", "loss": "22.7208", "code": "ECPoint importPoint(ECPoint p) { if (this && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 114, "n_pass": [278, 26, 19]}
{"time": "2021-02-24 06:17:18.696991", "score": "0.7681", "loss": "22.7208", "code": "ECPoint importPoint(ECPoint p) {if (this && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 113, "n_pass": [393, 30, 20]}
{"time": "2021-02-24 06:17:21.332477", "score": "0.7681", "loss": "22.7208", "code": "ECPoint importPoint(ECPoint p) {if(this && !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 112, "n_pass": [395, 31, 21]}
{"time": "2021-02-24 06:17:23.965356", "score": "0.7681", "loss": "22.7208", "code": "ECPoint importPoint(ECPoint p) {if(this&& !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 111, "n_pass": [398, 32, 22]}
{"time": "2021-02-24 06:17:26.612286", "score": "0.7821", "loss": "22.87", "code": "ECPoint importPoint(ECPoint p) {if(this& !p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 110, "n_pass": [399, 33, 23]}
{"time": "2021-02-24 06:17:29.248782", "score": "0.7821", "loss": "22.87", "code": "ECPoint importPoint(ECPoint p) {if(this&!p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 109, "n_pass": [401, 34, 24]}
{"time": "2021-02-24 06:17:31.886050", "score": "0.7812", "loss": "22.8358", "code": "ECPoint importPoint(ECPoint p) {if(this&p.isInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 108, "n_pass": [402, 35, 25]}
{"time": "2021-02-24 06:17:34.545767", "score": "0.7847", "loss": "22.9036", "code": "ECPoint importPoint(ECPoint p) {if(this&pisInfinity()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 107, "n_pass": [404, 36, 26]}
{"time": "2021-02-24 06:17:37.224406", "score": "0.7848", "loss": "22.9055", "code": "ECPoint importPoint(ECPoint p) {if(this&p()) { switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 106, "n_pass": [405, 37, 27]}
{"time": "2021-02-24 06:17:39.870702", "score": "0.7848", "loss": "22.9055", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){ switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 105, "n_pass": [409, 38, 28]}
{"time": "2021-02-24 06:17:42.508649", "score": "0.7848", "loss": "22.9055", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p.getCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 104, "n_pass": [411, 39, 29]}
{"time": "2021-02-24 06:17:45.161353", "score": "0.7816", "loss": "22.8882", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(pgetCurve().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 103, "n_pass": [415, 40, 30]}
{"time": "2021-02-24 06:17:47.798474", "score": "0.7847", "loss": "22.9038", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem()) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 102, "n_pass": [416, 41, 31]}
{"time": "2021-02-24 06:17:50.513680", "score": "0.704", "loss": "22.3542", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint.Fp(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 100, "n_pass": [421, 42, 32]}
{"time": "2021-02-24 06:18:03.778906", "score": "0.6272", "loss": "22.602", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(p.y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 98, "n_pass": [433, 47, 33]}
{"time": "2021-02-24 06:18:09.137698", "score": "0.6075", "loss": "22.2684", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(y.toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 96, "n_pass": [437, 49, 34]}
{"time": "2021-02-24 06:18:11.768063", "score": "0.6124", "loss": "22.0801", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(p.zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 94, "n_pass": [438, 50, 35]}
{"time": "2021-02-24 06:18:14.425831", "score": "0.5993", "loss": "22.0496", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(zs.toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 92, "n_pass": [447, 51, 36]}
{"time": "2021-02-24 06:18:17.086104", "score": "0.6215", "loss": "22.1274", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, p.withCompression); } }; }", "n_tokens": 90, "n_pass": [448, 52, 37]}
{"time": "2021-02-24 06:18:19.765843", "score": "0.6245", "loss": "22.1872", "code": "ECPoint importPoint(ECPoint p) {if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 88, "n_pass": [453, 53, 38]}
{"time": "2021-02-24 06:18:23.595474", "score": "0.6245", "loss": "22.1872", "code": "ECPoint importPoint(ECPoint p){if(this&p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 87, "n_pass": [467, 54, 39]}
{"time": "2021-02-24 06:18:26.274066", "score": "0.5937", "loss": "21.8831", "code": "ECPoint importPoint(ECPoint p){if(thisp()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 86, "n_pass": [472, 55, 40]}
{"time": "2021-02-24 06:18:43.704085", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem) { case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 85, "n_pass": [527, 61, 41]}
{"time": "2021-02-24 06:19:07.875832", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){ case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 84, "n_pass": [645, 67, 42]}
{"time": "2021-02-24 06:19:10.500422", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve._CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 83, "n_pass": [647, 68, 43]}
{"time": "2021-02-24 06:19:15.740684", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY: case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 82, "n_pass": [652, 70, 44]}
{"time": "2021-02-24 06:19:18.372498", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED: return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 81, "n_pass": [655, 71, 45]}
{"time": "2021-02-24 06:19:26.231381", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this, fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 80, "n_pass": [660, 74, 46]}
{"time": "2021-02-24 06:19:36.741331", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()), new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 79, "n_pass": [669, 78, 47]}
{"time": "2021-02-24 06:19:41.989599", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[] { fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 78, "n_pass": [677, 80, 48]}
{"time": "2021-02-24 06:19:44.666132", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{ fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 77, "n_pass": [683, 81, 49]}
{"time": "2021-02-24 06:19:47.308953", "score": "0.6254", "loss": "22.1826", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{fromBigInteger(toBigInteger()) }, withCompression); } }; }", "n_tokens": 76, "n_pass": [685, 82, 50]}
{"time": "2021-02-24 06:19:49.936965", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger()) }, withCompression); } }; }", "n_tokens": 75, "n_pass": [686, 83, 51]}
{"time": "2021-02-24 06:19:52.582809", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())}, withCompression); } }; }", "n_tokens": 74, "n_pass": [692, 84, 52]}
{"time": "2021-02-24 06:19:55.207574", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression); } }; }", "n_tokens": 73, "n_pass": [695, 85, 53]}
{"time": "2021-02-24 06:19:57.851105", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);} }; }", "n_tokens": 72, "n_pass": [699, 86, 54]}
{"time": "2021-02-24 06:20:00.487315", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}}; }", "n_tokens": 71, "n_pass": [701, 87, 55]}
{"time": "2021-02-24 06:20:03.121434", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}} }", "n_tokens": 70, "n_pass": [703, 88, 56]}
{"time": "2021-02-24 06:20:05.773989", "score": "0.9049", "loss": "23.0042", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return new ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}}}", "n_tokens": 69, "n_pass": [704, 89, 57]}
{"time": "2021-02-24 06:20:20.116738", "score": "0.7616", "loss": "17.2746", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return  ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}}}", "n_tokens": 68, "n_pass": [743, 94, 58]}
{"time": "2021-02-24 06:20:22.735377", "score": "0.7616", "loss": "17.2746", "code": "ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}}}", "n_tokens": 67, "n_pass": [744, 95, 59]}

Minimal simplified code:
ECPoint importPoint(ECPoint p){if(p()){switch(p().getCoordinateSystem){case ECCurve.CHUDNOVSKY:case MODIFIED:return ECPoint(this,fromBigInteger(toBigInteger()),new ECFieldElement[]{(toBigInteger())},withCompression);}}}

