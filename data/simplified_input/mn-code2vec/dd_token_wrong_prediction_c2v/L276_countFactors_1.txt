
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/nayuki__Project-Euler-solutions/java/p429_countFactors.java
method_name = countFactors
method_body = private static int countFactors(int n, int p) { if (n == 0) return 0; else return n / p + countFactors(n / p, p); }
predict, score, loss = skipBytes, 0.22720205783843994, 17.456544876098633

Trace of simplified code(s):
{"time": "2021-02-23 17:51:47.211928", "score": "0.2272", "loss": "17.4565", "code": "private static int countFactors(int n, int p) { if (n == 0) return 0; else return n / p + countFactors(n / p, p); }", "n_tokens": 62, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 17:51:50.279613", "score": "0.2539", "loss": "17.5037", "code": "private static int countFactors(int n, int p) { if (n == 0)return n / p + countFactors(n / p, p); }", "n_tokens": 54, "n_pass": [24, 2, 2]}
{"time": "2021-02-23 17:51:52.926722", "score": "0.2971", "loss": "17.6742", "code": "private static int countFactors(int n, int p) { if (n == 0)return n + countFactors(n / p, p); }", "n_tokens": 50, "n_pass": [46, 3, 3]}
{"time": "2021-02-23 17:51:58.219928", "score": "0.2971", "loss": "17.6742", "code": " int countFactors(int n, int p) { if (n == 0)return n + countFactors(n / p, p); }", "n_tokens": 47, "n_pass": [51, 5, 4]}
{"time": "2021-02-23 17:52:01.277395", "score": "0.3902", "loss": "16.3128", "code": " int countFactors(int  p) { if (n == 0)return n + countFactors(n / p, p); }", "n_tokens": 43, "n_pass": [54, 6, 5]}
{"time": "2021-02-23 17:52:07.805900", "score": "0.3714", "loss": "15.8142", "code": " int countFactors(int  p) { if (n= 0)return n + countFactors(n / p, p); }", "n_tokens": 41, "n_pass": [93, 8, 6]}
{"time": "2021-02-23 17:52:10.451411", "score": "0.3883", "loss": "15.8913", "code": " int countFactors(int  p) { if (n0)return n + countFactors(n / p, p); }", "n_tokens": 39, "n_pass": [94, 9, 7]}
{"time": "2021-02-23 17:52:18.839673", "score": "0.3883", "loss": "15.8913", "code": "int countFactors(int  p) { if (n0)return n + countFactors(n / p, p); }", "n_tokens": 38, "n_pass": [106, 12, 8]}
{"time": "2021-02-23 17:52:33.791529", "score": "0.3883", "loss": "15.8913", "code": "int countFactors(int p) { if (n0)return n + countFactors(n / p, p); }", "n_tokens": 37, "n_pass": [169, 15, 9]}
{"time": "2021-02-23 17:52:36.459545", "score": "0.3883", "loss": "15.8913", "code": "int countFactors(int p){ if (n0)return n + countFactors(n / p, p); }", "n_tokens": 36, "n_pass": [173, 16, 10]}
{"time": "2021-02-23 17:52:39.101311", "score": "0.3883", "loss": "15.8913", "code": "int countFactors(int p){if (n0)return n + countFactors(n / p, p); }", "n_tokens": 35, "n_pass": [175, 17, 11]}
{"time": "2021-02-23 17:52:41.736895", "score": "0.3883", "loss": "15.8913", "code": "int countFactors(int p){if(n0)return n + countFactors(n / p, p); }", "n_tokens": 34, "n_pass": [177, 18, 12]}
{"time": "2021-02-23 17:52:44.398921", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n + countFactors(n / p, p); }", "n_tokens": 33, "n_pass": [179, 19, 13]}
{"time": "2021-02-23 17:52:50.486424", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+ countFactors(n / p, p); }", "n_tokens": 32, "n_pass": [185, 21, 14]}
{"time": "2021-02-23 17:52:53.130768", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+countFactors(n / p, p); }", "n_tokens": 31, "n_pass": [187, 22, 15]}
{"time": "2021-02-23 17:52:55.788351", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+countFactors(n/ p, p); }", "n_tokens": 30, "n_pass": [191, 23, 16]}
{"time": "2021-02-23 17:52:58.450388", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+countFactors(n/p, p); }", "n_tokens": 29, "n_pass": [193, 24, 17]}
{"time": "2021-02-23 17:53:01.093574", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+countFactors(n/p,p); }", "n_tokens": 28, "n_pass": [196, 25, 18]}
{"time": "2021-02-23 17:53:03.737171", "score": "0.3631", "loss": "15.7416", "code": "int countFactors(int p){if(0)return n+countFactors(n/p,p);}", "n_tokens": 27, "n_pass": [200, 26, 19]}

Minimal simplified code:
int countFactors(int p){if(0)return n+countFactors(n/p,p);}

