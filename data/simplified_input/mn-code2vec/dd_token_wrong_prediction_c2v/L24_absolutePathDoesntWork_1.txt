
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/diffplug__spotless/plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FileTreeTest_absolutePathDoesntWork.java
method_name = absolutePathDoesntWork
method_body = @Test public void absolutePathDoesntWork() throws IOException { File someFile = setFile("someFolder/someFile").toContent(""); File someFolder = someFile.getParentFile(); fileTree.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(fileTree).containsExactlyInAnyOrder(someFile); }
predict, score, loss = test, 0.18855874240398407, 15.798426628112793

Trace of simplified code(s):
{"time": "2021-02-24 02:03:30.142007", "score": "0.1886", "loss": "15.7984", "code": "@Test public void absolutePathDoesntWork() throws IOException { File someFile = setFile(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile(); fileTree.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(fileTree).containsExactlyInAnyOrder(someFile); }", "n_tokens": 78, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:03:40.928934", "score": "0.7803", "loss": "16.1329", "code": "@Test public void absolutePathDoesntWork() throws IOException { File someFile = setFile(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(fileTree).containsExactlyInAnyOrder(someFile); }", "n_tokens": 73, "n_pass": [54, 5, 2]}
{"time": "2021-02-24 02:03:43.652201", "score": "0.9862", "loss": "22.9665", "code": "@Test public void absolutePathDoesntWork() throws IOException { File someFile = setFile(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(someFile); }", "n_tokens": 68, "n_pass": [57, 6, 3]}
{"time": "2021-02-24 02:03:46.279666", "score": "0.9035", "loss": "21.967", "code": " void absolutePathDoesntWork() throws IOException { File someFile = setFile(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(someFile); }", "n_tokens": 64, "n_pass": [59, 7, 4]}
{"time": "2021-02-24 02:03:51.992819", "score": "0.7815", "loss": "24.2341", "code": " void absolutePathDoesntWork() throws IOException { someFile = setFile(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(someFile); }", "n_tokens": 62, "n_pass": [105, 9, 5]}
{"time": "2021-02-24 02:03:54.641092", "score": "0.838", "loss": "24.8437", "code": " void absolutePathDoesntWork() throws IOException { someFile =(\"someFolder/someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(someFile); }", "n_tokens": 60, "n_pass": [108, 10, 6]}
{"time": "2021-02-24 02:03:57.272262", "score": "0.8558", "loss": "24.8187", "code": " void absolutePathDoesntWork() throws IOException { someFile =(\"someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); Assertions.assertThat(someFile); }", "n_tokens": 58, "n_pass": [110, 11, 7]}
{"time": "2021-02-24 02:04:05.144113", "score": "0.7298", "loss": "25.4265", "code": " void absolutePathDoesntWork() throws IOException { someFile =(\"someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); (someFile); }", "n_tokens": 55, "n_pass": [122, 14, 8]}
{"time": "2021-02-24 02:04:07.778066", "score": "0.6821", "loss": "25.6028", "code": " void absolutePathDoesntWork() throws IOException { someFile =(\"someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 52, "n_pass": [123, 15, 9]}
{"time": "2021-02-24 02:04:10.811240", "score": "0.5959", "loss": "22.3762", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File someFolder = someFile.getParentFile.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 50, "n_pass": [132, 16, 10]}
{"time": "2021-02-24 02:04:16.050429", "score": "0.3047", "loss": "21.1825", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File someFolder =getParentFile.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 47, "n_pass": [140, 18, 11]}
{"time": "2021-02-24 02:04:30.520001", "score": "0.9076", "loss": "19.1887", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); FilesomeFolder =getParentFile.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 46, "n_pass": [198, 22, 12]}
{"time": "2021-02-24 02:04:33.146981", "score": "0.9043", "loss": "19.1579", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File=getParentFile.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 44, "n_pass": [199, 23, 13]}
{"time": "2021-02-24 02:04:35.938984", "score": "0.2703", "loss": "17.1279", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder.getAbsolutePath()); ; }", "n_tokens": 42, "n_pass": [200, 24, 14]}
{"time": "2021-02-24 02:04:41.195932", "score": "0.309", "loss": "18.855", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder()); ; }", "n_tokens": 40, "n_pass": [203, 26, 15]}
{"time": "2021-02-24 02:04:43.831897", "score": "0.848", "loss": "22.3569", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); ; }", "n_tokens": 38, "n_pass": [204, 27, 16]}
{"time": "2021-02-24 02:04:46.463104", "score": "0.848", "loss": "22.3569", "code": " void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); }", "n_tokens": 36, "n_pass": [206, 28, 17]}
{"time": "2021-02-24 02:04:49.123373", "score": "0.848", "loss": "22.3569", "code": "void absolutePathDoesntWork() throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); }", "n_tokens": 35, "n_pass": [208, 29, 18]}
{"time": "2021-02-24 02:04:52.509855", "score": "0.848", "loss": "22.3569", "code": "void absolutePathDoesntWork()throws IOException { someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); }", "n_tokens": 34, "n_pass": [214, 30, 19]}
{"time": "2021-02-24 02:04:55.232105", "score": "0.848", "loss": "22.3569", "code": "void absolutePathDoesntWork()throws IOException{ someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); }", "n_tokens": 33, "n_pass": [218, 31, 20]}
{"time": "2021-02-24 02:04:57.839018", "score": "0.848", "loss": "22.3569", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\"); File.exclude(someFolder); }", "n_tokens": 32, "n_pass": [220, 32, 21]}
{"time": "2021-02-24 02:05:05.676931", "score": "0.848", "loss": "22.3569", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\");File.exclude(someFolder); }", "n_tokens": 31, "n_pass": [234, 35, 22]}
{"time": "2021-02-24 02:05:17.628683", "score": "0.8193", "loss": "17.5028", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\");File.exclude(); }", "n_tokens": 30, "n_pass": [271, 39, 23]}
{"time": "2021-02-24 02:05:20.249508", "score": "0.8193", "loss": "17.5028", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\");File.exclude();}", "n_tokens": 29, "n_pass": [274, 40, 24]}
{"time": "2021-02-24 02:05:28.828715", "score": "0.4299", "loss": "17.3074", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\");Fileexclude();}", "n_tokens": 28, "n_pass": [299, 43, 25]}
{"time": "2021-02-24 02:05:31.490900", "score": "0.2443", "loss": "17.3963", "code": "void absolutePathDoesntWork()throws IOException{someFile(\"someFile\").toContent(\"\");File();}", "n_tokens": 27, "n_pass": [300, 44, 26]}

Minimal simplified code:
void absolutePathDoesntWork()throws IOException{someFile("someFile").toContent("");File();}

