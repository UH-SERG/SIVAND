
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/json/JacksonMapper_toList.java
method_name = toList
method_body = @Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException("Cannot convert JSON", e); } }
predict, score, loss = fromJson, 0.6181186437606812, 10.08220386505127

Trace of simplified code(s):
{"time": "2021-02-23 20:41:13.542684", "score": "0.6181", "loss": "10.0822", "code": "@Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:41:16.279757", "score": "0.6427", "loss": "9.9289", "code": "public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 93, "n_pass": [92, 2, 2]}
{"time": "2021-02-23 20:41:18.948081", "score": "0.671", "loss": "7.8708", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 90, "n_pass": [103, 3, 3]}
{"time": "2021-02-23 20:41:21.605038", "score": "0.4132", "loss": "7.5294", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 87, "n_pass": [105, 4, 4]}
{"time": "2021-02-23 20:41:24.263208", "score": "0.4664", "loss": "8.1053", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 84, "n_pass": [109, 5, 5]}
{"time": "2021-02-23 20:41:26.928680", "score": "0.2905", "loss": "10.1194", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 81, "n_pass": [116, 6, 6]}
{"time": "2021-02-23 20:41:29.593685", "score": "0.323", "loss": "11.2702", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\", e); } }", "n_tokens": 78, "n_pass": [118, 7, 7]}
{"time": "2021-02-23 20:41:32.250491", "score": "0.2948", "loss": "10.6701", "code": "public <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 75, "n_pass": [120, 8, 8]}
{"time": "2021-02-23 20:41:37.265777", "score": "0.2948", "loss": "10.6701", "code": " <T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 74, "n_pass": [200, 9, 9]}
{"time": "2021-02-23 20:41:39.920211", "score": "0.2948", "loss": "10.6701", "code": "<T> List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 73, "n_pass": [201, 10, 10]}
{"time": "2021-02-23 20:41:42.590697", "score": "0.2948", "loss": "10.6701", "code": "<T>List<T> toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 72, "n_pass": [204, 11, 11]}
{"time": "2021-02-23 20:41:45.247561", "score": "0.2948", "loss": "10.6701", "code": "<T>List<T>toList(String json, Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 71, "n_pass": [209, 12, 12]}
{"time": "2021-02-23 20:41:47.905864", "score": "0.2948", "loss": "10.6701", "code": "<T>List<T>toList(String json,Class<T> type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 70, "n_pass": [216, 13, 13]}
{"time": "2021-02-23 20:41:50.555981", "score": "0.2948", "loss": "10.6701", "code": "<T>List<T>toList(String json,Class<T>type) { try { returnreadValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 69, "n_pass": [221, 14, 14]}
{"time": "2021-02-23 20:41:53.209953", "score": "0.6549", "loss": "11.2645", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 67, "n_pass": [227, 15, 15]}
{"time": "2021-02-23 20:41:55.863993", "score": "0.5935", "loss": "10.5594", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(ArrayList.type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 65, "n_pass": [229, 16, 16]}
{"time": "2021-02-23 20:41:58.538398", "score": "0.5943", "loss": "10.5339", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) { throwIllegalArgumentException(\" JSON\"); } }", "n_tokens": 63, "n_pass": [233, 17, 17]}
{"time": "2021-02-23 20:42:01.210263", "score": "0.8237", "loss": "9.0986", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\" JSON\"); } }", "n_tokens": 61, "n_pass": [242, 18, 18]}
{"time": "2021-02-23 20:42:08.919793", "score": "0.8237", "loss": "9.0986", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"JSON\"); } }", "n_tokens": 60, "n_pass": [326, 19, 19]}
{"time": "2021-02-23 20:42:11.576738", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\"); } }", "n_tokens": 59, "n_pass": [327, 20, 20]}
{"time": "2021-02-23 20:42:14.249380", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\");} }", "n_tokens": 58, "n_pass": [331, 21, 21]}
{"time": "2021-02-23 20:42:16.900448", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type) { try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 57, "n_pass": [333, 22, 22]}
{"time": "2021-02-23 20:42:19.561376", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type){ try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 56, "n_pass": [354, 23, 23]}
{"time": "2021-02-23 20:42:22.235353", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type){try {readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 55, "n_pass": [356, 24, 24]}
{"time": "2021-02-23 20:42:24.907488", "score": "0.8306", "loss": "9.3616", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType(type)); } catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 54, "n_pass": [358, 25, 25]}
{"time": "2021-02-23 20:42:30.249045", "score": "0.8505", "loss": "8.626", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType()); } catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 53, "n_pass": [368, 27, 26]}
{"time": "2021-02-23 20:42:32.921812", "score": "0.8505", "loss": "8.626", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());} catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 52, "n_pass": [372, 28, 27]}
{"time": "2021-02-23 20:42:35.596619", "score": "0.8505", "loss": "8.626", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());}catch (Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 51, "n_pass": [374, 29, 28]}
{"time": "2021-02-23 20:42:38.255609", "score": "0.8505", "loss": "8.626", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());}catch(Exception e) {IllegalArgumentException(\"\");}}", "n_tokens": 50, "n_pass": [376, 30, 29]}
{"time": "2021-02-23 20:42:40.925801", "score": "0.8505", "loss": "8.626", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());}catch(Exception e){IllegalArgumentException(\"\");}}", "n_tokens": 49, "n_pass": [382, 31, 30]}
{"time": "2021-02-23 20:42:43.581799", "score": "0.8667", "loss": "8.7725", "code": "<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());}catch(Exception e){(\"\");}}", "n_tokens": 48, "n_pass": [384, 32, 31]}

Minimal simplified code:
<T>List<T>toList(String json,Class<T>type){try{readValue(getTypeFactory().constructCollectionLikeType());}catch(Exception e){("");}}

