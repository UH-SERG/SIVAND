
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-web/src/test/java/org/springframework/cloud/function/mvc/MvcRestApplicationTests_sentencesAcceptJson.java
method_name = sentencesAcceptJson
method_body = @Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI("/sentences")).accept(MediaType.APPLICATION_JSON).build(), String.class); assertThat(result.getBody()).isEqualTo("[[\"go\",\"home\"],[\"come\",\"back\"]]"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }
predict, score, loss = getHeaders, 0.3528287708759308, 15.407090187072754

Trace of simplified code(s):
{"time": "2021-02-24 03:16:58.159859", "score": "0.3528", "loss": "15.4071", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType.APPLICATION_JSON).build(), String.class); assertThat(result.getBody()).isEqualTo(\"[[\\\"go\\\",\\\"home\\\"],[\\\"come\\\",\\\"back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 134, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:17:03.637267", "score": "0.3065", "loss": "15.246", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result.getBody()).isEqualTo(\"[[\\\"go\\\",\\\"home\\\"],[\\\"come\\\",\\\"back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 126, "n_pass": [50, 3, 2]}
{"time": "2021-02-24 03:17:06.397963", "score": "0.3065", "loss": "15.246", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result.getBody()).isEqualTo(\"[[\\\"],[\\\"come\\\",\\\"back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 117, "n_pass": [54, 4, 3]}
{"time": "2021-02-24 03:17:09.197755", "score": "0.3065", "loss": "15.246", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result.getBody()).isEqualTo(\"[[\\\"],[\\\"come\\back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 113, "n_pass": [99, 5, 4]}
{"time": "2021-02-24 03:17:15.034831", "score": "0.2801", "loss": "15.361", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"[[\\\"],[\\\"come\\back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 109, "n_pass": [122, 7, 5]}
{"time": "2021-02-24 03:17:17.694417", "score": "0.2801", "loss": "15.361", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[\\\"come\\back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 105, "n_pass": [124, 8, 6]}
{"time": "2021-02-24 03:17:20.406812", "score": "0.2169", "loss": "15.2937", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[back\\\"]]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 101, "n_pass": [126, 9, 7]}
{"time": "2021-02-24 03:17:23.090157", "score": "0.2801", "loss": "15.361", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(MediaType.APPLICATION_JSON); }", "n_tokens": 97, "n_pass": [127, 10, 8]}
{"time": "2021-02-24 03:17:37.088751", "score": "0.2945", "loss": "15.0968", "code": "@Test public void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 94, "n_pass": [206, 15, 9]}
{"time": "2021-02-24 03:17:42.492700", "score": "0.2945", "loss": "15.0968", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(RequestEntity.get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 92, "n_pass": [210, 17, 10]}
{"time": "2021-02-24 03:17:49.336475", "score": "0.1742", "loss": "15.0452", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(new URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 90, "n_pass": [224, 19, 11]}
{"time": "2021-02-24 03:17:52.144681", "score": "0.1541", "loss": "14.9548", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String.class); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 88, "n_pass": [226, 20, 12]}
{"time": "2021-02-24 03:17:54.898045", "score": "0.1549", "loss": "14.9228", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String); assertThat(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 86, "n_pass": [235, 21, 13]}
{"time": "2021-02-24 03:17:57.594972", "score": "0.162", "loss": "14.8459", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"],[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 84, "n_pass": [237, 22, 14]}
{"time": "2021-02-24 03:18:23.111313", "score": "0.2436", "loss": "14.9294", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\",[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 83, "n_pass": [365, 29, 15]}
{"time": "2021-02-24 03:18:25.769707", "score": "0.2436", "loss": "14.9294", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\"); assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 82, "n_pass": [366, 30, 16]}
{"time": "2021-02-24 03:18:33.983962", "score": "0.2436", "loss": "14.9294", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(_JSON); }", "n_tokens": 81, "n_pass": [372, 33, 17]}
{"time": "2021-02-24 03:18:42.109154", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson() throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 79, "n_pass": [387, 36, 18]}
{"time": "2021-02-24 03:18:45.912172", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception { ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 78, "n_pass": [398, 37, 19]}
{"time": "2021-02-24 03:18:48.552030", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception{ ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 77, "n_pass": [402, 38, 20]}
{"time": "2021-02-24 03:18:51.184114", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String> result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 76, "n_pass": [404, 39, 21]}
{"time": "2021-02-24 03:18:54.228670", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result = rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 75, "n_pass": [409, 40, 22]}
{"time": "2021-02-24 03:18:56.980777", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result= rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 74, "n_pass": [411, 41, 23]}
{"time": "2021-02-24 03:18:59.658203", "score": "0.2806", "loss": "14.7624", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(get(URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 73, "n_pass": [413, 42, 24]}
{"time": "2021-02-24 03:19:04.990955", "score": "0.2894", "loss": "14.8537", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange((URI(\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 72, "n_pass": [418, 44, 25]}
{"time": "2021-02-24 03:19:08.081545", "score": "0.2827", "loss": "14.9369", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"/sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 71, "n_pass": [420, 45, 26]}
{"time": "2021-02-24 03:19:10.773685", "score": "0.2827", "loss": "14.9369", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"sentences\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 70, "n_pass": [423, 46, 27]}
{"time": "2021-02-24 03:19:13.477016", "score": "0.2712", "loss": "14.9695", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"\")).accept(MediaType), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 69, "n_pass": [424, 47, 28]}
{"time": "2021-02-24 03:19:16.263446", "score": "0.2813", "loss": "15.0538", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"\")).accept(), String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 68, "n_pass": [431, 48, 29]}
{"time": "2021-02-24 03:19:19.110879", "score": "0.2813", "loss": "15.0538", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"\")).accept(),String);(result).isEqualTo(\"[]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 67, "n_pass": [434, 49, 30]}
{"time": "2021-02-24 03:19:22.290768", "score": "0.1788", "loss": "15.0138", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"\")).accept(),String);(result).isEqualTo(\"]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo(); }", "n_tokens": 66, "n_pass": [445, 50, 31]}
{"time": "2021-02-24 03:19:40.328923", "score": "0.1788", "loss": "15.0138", "code": "@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange(((\"\")).accept(),String);(result).isEqualTo(\"]\");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo();}", "n_tokens": 65, "n_pass": [519, 55, 32]}

Minimal simplified code:
@Test void sentencesAcceptJson()throws Exception{ResponseEntity<String>result=rest.exchange((("")).accept(),String);(result).isEqualTo("]");assertThat(result.getHeaders().getContentType()).isGreaterThanOrEqualTo();}

