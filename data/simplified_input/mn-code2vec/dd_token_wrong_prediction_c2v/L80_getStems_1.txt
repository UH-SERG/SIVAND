
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/similarity/src/main/java/edu/illinois/cs/cogcomp/wsim/wordnet/WNWrapper_getStems.java
method_name = getStems
method_body = public void getStems(String word) { List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }
predict, score, loss = a, 0.26788344979286194, 20.14117431640625

Trace of simplified code(s):
{"time": "2021-02-24 13:32:14.965467", "score": "0.2679", "loss": "20.1412", "code": "public void getStems(String word) { List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 60, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 13:32:25.173392", "score": "0.2679", "loss": "20.1412", "code": " void getStems(String word) { List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 59, "n_pass": [92, 4, 2]}
{"time": "2021-02-24 13:32:27.970708", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word) { List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 58, "n_pass": [93, 5, 3]}
{"time": "2021-02-24 13:32:51.109914", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){ List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 57, "n_pass": [185, 10, 4]}
{"time": "2021-02-24 13:32:53.891233", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String> stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 56, "n_pass": [186, 11, 5]}
{"time": "2021-02-24 13:32:57.123745", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems = wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 55, "n_pass": [191, 12, 6]}
{"time": "2021-02-24 13:32:59.906612", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems= wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 54, "n_pass": [193, 13, 7]}
{"time": "2021-02-24 13:33:02.704764", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word, null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 53, "n_pass": [195, 14, 8]}
{"time": "2021-02-24 13:33:08.304514", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null); for (String s : stems) { System.out.println(s); } }", "n_tokens": 52, "n_pass": [202, 16, 9]}
{"time": "2021-02-24 13:33:11.127320", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for (String s : stems) { System.out.println(s); } }", "n_tokens": 51, "n_pass": [206, 17, 10]}
{"time": "2021-02-24 13:33:13.927145", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s : stems) { System.out.println(s); } }", "n_tokens": 50, "n_pass": [208, 18, 11]}
{"time": "2021-02-24 13:33:16.716608", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s: stems) { System.out.println(s); } }", "n_tokens": 49, "n_pass": [213, 19, 12]}
{"time": "2021-02-24 13:33:19.529630", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems) { System.out.println(s); } }", "n_tokens": 48, "n_pass": [215, 20, 13]}
{"time": "2021-02-24 13:33:22.315123", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){ System.out.println(s); } }", "n_tokens": 47, "n_pass": [218, 21, 14]}
{"time": "2021-02-24 13:33:25.106180", "score": "0.2679", "loss": "20.1412", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){System.out.println(s); } }", "n_tokens": 46, "n_pass": [220, 22, 15]}
{"time": "2021-02-24 13:33:33.567020", "score": "0.2859", "loss": "19.9054", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){System.out.println(); } }", "n_tokens": 45, "n_pass": [227, 25, 16]}
{"time": "2021-02-24 13:33:36.363376", "score": "0.2859", "loss": "19.9054", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){System.out.println();} }", "n_tokens": 44, "n_pass": [230, 26, 17]}
{"time": "2021-02-24 13:33:39.156127", "score": "0.2859", "loss": "19.9054", "code": "void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){System.out.println();}}", "n_tokens": 43, "n_pass": [232, 27, 18]}

Minimal simplified code:
void getStems(String word){List<String>stems=wstem.findStems(word,null);for(String s:stems){System.out.println();}}

