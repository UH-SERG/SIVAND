
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/sm/ServiceConfigQueryFilterVisitorTest_shouldMatchEqualsSearch.java
method_name = shouldMatchEqualsSearch
method_body = @Test public void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo("param1", "value1"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }
predict, score, loss = accept, 0.9819548726081848, 20.695446014404297

Trace of simplified code(s):
{"time": "2021-02-24 15:29:51.713328", "score": "0.982", "loss": "20.6954", "code": "@Test public void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 15:29:56.982653", "score": "0.9024", "loss": "17.8192", "code": " void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 61, "n_pass": [44, 3, 2]}
{"time": "2021-02-24 15:30:01.519245", "score": "0.5741", "loss": "18.6003", "code": " void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 59, "n_pass": [105, 4, 3]}
{"time": "2021-02-24 15:30:09.413300", "score": "0.6229", "loss": "18.9983", "code": " void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue; }", "n_tokens": 57, "n_pass": [116, 7, 4]}
{"time": "2021-02-24 15:30:18.456815", "score": "0.6094", "loss": "18.949", "code": " void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 55, "n_pass": [144, 10, 5]}
{"time": "2021-02-24 15:30:33.281736", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 54, "n_pass": [228, 13, 6]}
{"time": "2021-02-24 15:30:36.303446", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){ QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 53, "n_pass": [233, 14, 7]}
{"time": "2021-02-24 15:30:38.925239", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 52, "n_pass": [235, 15, 8]}
{"time": "2021-02-24 15:30:41.947499", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter = equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 51, "n_pass": [240, 16, 9]}
{"time": "2021-02-24 15:30:44.559424", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter= equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 50, "n_pass": [242, 17, 10]}
{"time": "2021-02-24 15:30:47.184245", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param1\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 49, "n_pass": [244, 18, 11]}
{"time": "2021-02-24 15:30:52.441546", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\", \"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 48, "n_pass": [249, 20, 12]}
{"time": "2021-02-24 15:30:55.057299", "score": "0.6094", "loss": "18.949", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"value1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 47, "n_pass": [252, 21, 13]}
{"time": "2021-02-24 15:30:57.680440", "score": "0.5127", "loss": "17.8676", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"1\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 46, "n_pass": [254, 22, 14]}
{"time": "2021-02-24 15:31:00.307643", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\"); result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 45, "n_pass": [255, 23, 15]}
{"time": "2021-02-24 15:31:02.934365", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 44, "n_pass": [259, 24, 16]}
{"time": "2021-02-24 15:31:05.575429", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result= queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 43, "n_pass": [261, 25, 17]}
{"time": "2021-02-24 15:31:08.193384", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result=queryFilter.accept(filterVisitor, serviceConfig); assertThat(result); }", "n_tokens": 42, "n_pass": [263, 26, 18]}
{"time": "2021-02-24 15:31:13.460000", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result=queryFilter.accept(filterVisitor,serviceConfig); assertThat(result); }", "n_tokens": 41, "n_pass": [270, 28, 19]}
{"time": "2021-02-24 15:31:16.121396", "score": "0.6088", "loss": "18.9279", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result=queryFilter.accept(filterVisitor,serviceConfig);assertThat(result); }", "n_tokens": 40, "n_pass": [274, 29, 20]}
{"time": "2021-02-24 15:31:18.747272", "score": "0.629", "loss": "19.2321", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param\",\"\");result=queryFilter.accept(filterVisitor,serviceConfig);(result); }", "n_tokens": 39, "n_pass": [275, 30, 21]}
{"time": "2021-02-24 15:31:23.687588", "score": "0.5996", "loss": "19.578", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"\");result=queryFilter.accept(filterVisitor,serviceConfig);(result); }", "n_tokens": 38, "n_pass": [296, 31, 22]}
{"time": "2021-02-24 15:31:26.319804", "score": "0.4091", "loss": "15.8193", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"\");resultqueryFilter.accept(filterVisitor,serviceConfig);(result); }", "n_tokens": 37, "n_pass": [304, 32, 23]}
{"time": "2021-02-24 15:31:28.931033", "score": "0.5888", "loss": "16.4819", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"\");result.accept(filterVisitor,serviceConfig);(result); }", "n_tokens": 36, "n_pass": [305, 33, 24]}
{"time": "2021-02-24 15:31:39.471036", "score": "0.5888", "loss": "16.4819", "code": "void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"\");result.accept(filterVisitor,serviceConfig);(result);}", "n_tokens": 35, "n_pass": [343, 36, 25]}

Minimal simplified code:
void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo("","");result.accept(filterVisitor,serviceConfig);(result);}

