
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/mina.core/core/src/test/java/org/apache/mina/filter/reqres/RequestResponseFilterTest_setUp.java
method_name = setUp
method_body = @Override @Before public void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl.createControl(NextFilter.class); nextFilter = (NextFilter) nextFilterControl.getMock(); filter.onPreAdd(chain, "reqres", nextFilter); filter.onPostAdd(chain, "reqres", nextFilter); Assert.assertFalse(session.getAttributeKeys().isEmpty()); }
predict, score, loss = getAttributeKeys, 0.3848671615123749, 11.413824081420898

Trace of simplified code(s):
{"time": "2021-02-23 06:00:51.493153", "score": "0.2914", "loss": "9.8839", "code": "@Override @Before public void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl.createControl(NextFilter.class); nextFilter = (NextFilter) nextFilterControl.getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert.assertFalse(session.getAttributeKeys().isEmpty()); }", "n_tokens": 151, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 06:01:46.712882", "score": "0.2867", "loss": "8.5317", "code": "@Override @Before public void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl.createControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert.assertFalse(session.getAttributeKeys().isEmpty()); }", "n_tokens": 148, "n_pass": [233, 20, 2]}
{"time": "2021-02-23 06:02:25.520044", "score": "0.372", "loss": "11.634", "code": "@Override @Before public void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert.assertFalse(session.getAttributeKeys().isEmpty()); }", "n_tokens": 146, "n_pass": [291, 34, 3]}
{"time": "2021-02-23 06:03:43.635135", "score": "0.2368", "loss": "10.4621", "code": "@Override @Before public void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 144, "n_pass": [516, 57, 4]}
{"time": "2021-02-23 06:03:57.364701", "score": "0.2022", "loss": "8.6312", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler = Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 143, "n_pass": [529, 62, 5]}
{"time": "2021-02-23 06:04:12.272807", "score": "0.3218", "loss": "10.2117", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler= Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 142, "n_pass": [545, 67, 6]}
{"time": "2021-02-23 06:04:14.999407", "score": "0.2689", "loss": "9.972", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors.newScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 141, "n_pass": [547, 68, 7]}
{"time": "2021-02-23 06:04:17.729861", "score": "0.2215", "loss": "10.3267", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=ExecutorsnewScheduledThreadPool(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 140, "n_pass": [549, 69, 8]}
{"time": "2021-02-23 06:04:20.452888", "score": "0.2211", "loss": "9.5565", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session = new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 139, "n_pass": [550, 70, 9]}
{"time": "2021-02-23 06:04:50.417395", "score": "0.2513", "loss": "10.3", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session= new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 138, "n_pass": [576, 81, 10]}
{"time": "2021-02-23 06:04:53.145014", "score": "0.2192", "loss": "10.1895", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = MockControl(NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 137, "n_pass": [578, 82, 11]}
{"time": "2021-02-23 06:05:20.411075", "score": "0.2516", "loss": "12.5453", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter.class); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 136, "n_pass": [601, 92, 12]}
{"time": "2021-02-23 06:05:23.151850", "score": "0.5223", "loss": "12.99", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilterclass); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 135, "n_pass": [604, 93, 13]}
{"time": "2021-02-23 06:05:25.887961", "score": "0.6592", "loss": "13.9033", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter); nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 134, "n_pass": [605, 94, 14]}
{"time": "2021-02-23 06:05:29.036734", "score": "0.5124", "loss": "12.709", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter = (NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 133, "n_pass": [608, 95, 15]}
{"time": "2021-02-23 06:05:34.506550", "score": "0.5563", "loss": "13.4045", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys().isEmpty()); }", "n_tokens": 132, "n_pass": [612, 97, 16]}
{"time": "2021-02-23 06:05:51.051114", "score": "0.4494", "loss": "11.5612", "code": "@Override @Beforepublic void setUp() throws Exception { scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 130, "n_pass": [642, 103, 17]}
{"time": "2021-02-23 06:06:08.731502", "score": "0.1751", "loss": "10.3456", "code": "@Override @Beforepublic void setUp() throws Exception{ scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 129, "n_pass": [663, 109, 18]}
{"time": "2021-02-23 06:06:11.459567", "score": "0.2503", "loss": "10.4825", "code": "@Override @Beforepublic void setUp() throws Exception{scheduler=Executors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 128, "n_pass": [665, 110, 19]}
{"time": "2021-02-23 06:06:14.187782", "score": "0.2454", "loss": "11.5393", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(1); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 127, "n_pass": [667, 111, 20]}
{"time": "2021-02-23 06:06:19.631823", "score": "0.5316", "loss": "12.2533", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter = new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 126, "n_pass": [670, 113, 21]}
{"time": "2021-02-23 06:06:25.077115", "score": "0.5434", "loss": "12.0451", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter= new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 125, "n_pass": [675, 115, 22]}
{"time": "2021-02-23 06:06:27.835451", "score": "0.2975", "loss": "10.8191", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(), scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 124, "n_pass": [677, 116, 23]}
{"time": "2021-02-23 06:06:41.473363", "score": "0.2205", "loss": "11.06", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler); session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 123, "n_pass": [688, 121, 24]}
{"time": "2021-02-23 06:06:44.232135", "score": "0.2899", "loss": "11.036", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session=new DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 122, "n_pass": [692, 122, 25]}
{"time": "2021-02-23 06:06:46.955047", "score": "0.3821", "loss": "12.6703", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain = session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 121, "n_pass": [695, 123, 26]}
{"time": "2021-02-23 06:06:55.099715", "score": "0.2271", "loss": "11.6272", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain= session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 120, "n_pass": [703, 126, 27]}
{"time": "2021-02-23 06:06:57.801970", "score": "0.2928", "loss": "12.607", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain(); nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 119, "n_pass": [705, 127, 28]}
{"time": "2021-02-23 06:07:03.258003", "score": "0.3201", "loss": "11.5453", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter =(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 118, "n_pass": [712, 129, 29]}
{"time": "2021-02-23 06:07:14.552367", "score": "0.2023", "loss": "11.7542", "code": "@Override @Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 117, "n_pass": [722, 133, 30]}
{"time": "2021-02-23 06:07:36.380248", "score": "0.2448", "loss": "11.5223", "code": "@Override@Beforepublic void setUp() throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 116, "n_pass": [759, 141, 31]}
{"time": "2021-02-23 06:07:45.846615", "score": "0.6263", "loss": "13.5147", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors(); filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 115, "n_pass": [769, 144, 32]}
{"time": "2021-02-23 06:07:54.013364", "score": "0.241", "loss": "11.3026", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=new RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 114, "n_pass": [779, 147, 33]}
{"time": "2021-02-23 06:07:56.740053", "score": "0.3955", "loss": "12.0115", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter= RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 113, "n_pass": [782, 148, 34]}
{"time": "2021-02-23 06:07:59.458711", "score": "0.3813", "loss": "12.3883", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(new MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 112, "n_pass": [783, 149, 35]}
{"time": "2021-02-23 06:08:02.177796", "score": "0.2688", "loss": "11.5757", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter( MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 111, "n_pass": [786, 150, 36]}
{"time": "2021-02-23 06:08:04.934914", "score": "0.5164", "loss": "13.4368", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession(); chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 110, "n_pass": [787, 151, 37]}
{"time": "2021-02-23 06:08:10.395113", "score": "0.2392", "loss": "12.257", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain=session.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 109, "n_pass": [802, 153, 38]}
{"time": "2021-02-23 06:08:13.130015", "score": "0.2649", "loss": "12.1706", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chainsession.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 108, "n_pass": [804, 154, 39]}
{"time": "2021-02-23 06:08:15.877265", "score": "0.2612", "loss": "11.1199", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock(); filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 107, "n_pass": [805, 155, 40]}
{"time": "2021-02-23 06:08:29.894167", "score": "0.3518", "loss": "11.8662", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys.isEmpty()); }", "n_tokens": 106, "n_pass": [828, 160, 41]}
{"time": "2021-02-23 06:08:43.531113", "score": "0.2718", "loss": "9.6367", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys()); }", "n_tokens": 104, "n_pass": [850, 165, 42]}
{"time": "2021-02-23 06:08:46.251036", "score": "0.7961", "loss": "12.3711", "code": "@Override@Beforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 102, "n_pass": [851, 166, 43]}
{"time": "2021-02-23 06:08:48.973336", "score": "0.8224", "loss": "12.4486", "code": "@OverrideBeforepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 101, "n_pass": [856, 167, 44]}
{"time": "2021-02-23 06:08:51.686557", "score": "0.7656", "loss": "11.6915", "code": "@Overridepublic void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 100, "n_pass": [857, 168, 45]}
{"time": "2021-02-23 06:08:54.404903", "score": "0.8373", "loss": "11.9491", "code": "@Override void setUp()throws Exception{schedulerExecutors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 99, "n_pass": [858, 169, 46]}
{"time": "2021-02-23 06:08:58.403591", "score": "0.7463", "loss": "11.5575", "code": "@Override void setUp()throws Exception{Executors();filter=RequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 98, "n_pass": [869, 170, 47]}
{"time": "2021-02-23 06:09:01.128308", "score": "0.7873", "loss": "11.7059", "code": "@Override void setUp()throws Exception{Executors();filterRequestResponseFilter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 97, "n_pass": [875, 171, 48]}
{"time": "2021-02-23 06:09:03.849423", "score": "0.7851", "loss": "11.6049", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session= DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 96, "n_pass": [876, 172, 49]}
{"time": "2021-02-23 06:09:06.568221", "score": "0.783", "loss": "12.1504", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain.getFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 95, "n_pass": [887, 173, 50]}
{"time": "2021-02-23 06:09:09.315430", "score": "0.7456", "loss": "12.2474", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chaingetFilterChain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 94, "n_pass": [893, 174, 51]}
{"time": "2021-02-23 06:09:12.024217", "score": "0.7436", "loss": "12.1908", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain();nextFilterControl = (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 93, "n_pass": [894, 175, 52]}
{"time": "2021-02-23 06:09:14.738212", "score": "0.7463", "loss": "12.2199", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain();nextFilterControl= (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 92, "n_pass": [899, 176, 53]}
{"time": "2021-02-23 06:09:17.450499", "score": "0.555", "loss": "11.5719", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain();nextFilterControl (NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 91, "n_pass": [900, 177, 54]}
{"time": "2021-02-23 06:09:20.158616", "score": "0.5546", "loss": "11.5398", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain();nextFilterControl(NextFilter);nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 90, "n_pass": [901, 178, 55]}
{"time": "2021-02-23 06:09:22.876663", "score": "0.7355", "loss": "12.0422", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session=DummySession();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 89, "n_pass": [903, 179, 56]}
{"time": "2021-02-23 06:09:37.768034", "score": "0.7849", "loss": "12.7497", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);sessionDummySession();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 88, "n_pass": [964, 184, 57]}
{"time": "2021-02-23 06:09:40.506202", "score": "0.7884", "loss": "12.771", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain, \"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 87, "n_pass": [965, 185, 58]}
{"time": "2021-02-23 06:09:59.332436", "score": "0.7884", "loss": "12.771", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"reqres\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 86, "n_pass": [1072, 190, 59]}
{"time": "2021-02-23 06:10:02.067476", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\", nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 85, "n_pass": [1074, 191, 60]}
{"time": "2021-02-23 06:10:04.788787", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter); filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 84, "n_pass": [1077, 192, 61]}
{"time": "2021-02-23 06:10:07.521605", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain, \"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 83, "n_pass": [1081, 193, 62]}
{"time": "2021-02-23 06:10:12.970866", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\", nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 82, "n_pass": [1088, 195, 63]}
{"time": "2021-02-23 06:10:18.407455", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\",nextFilter); Assert(session.getAttributeKeys); }", "n_tokens": 81, "n_pass": [1093, 197, 64]}
{"time": "2021-02-23 06:10:21.122684", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\",nextFilter);Assert(session.getAttributeKeys); }", "n_tokens": 80, "n_pass": [1097, 198, 65]}
{"time": "2021-02-23 06:10:29.313168", "score": "0.7187", "loss": "11.017", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter.onPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\",nextFilter);Assert(session.getAttributeKeys);}", "n_tokens": 79, "n_pass": [1105, 201, 66]}
{"time": "2021-02-23 06:10:33.456772", "score": "0.6499", "loss": "11.8127", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filteronPreAdd(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\",nextFilter);Assert(session.getAttributeKeys);}", "n_tokens": 78, "n_pass": [1154, 202, 67]}
{"time": "2021-02-23 06:10:36.174441", "score": "0.6543", "loss": "11.7876", "code": "@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter(chain,\"\",nextFilter);filter.onPostAdd(chain,\"reqres\",nextFilter);Assert(session.getAttributeKeys);}", "n_tokens": 77, "n_pass": [1155, 203, 68]}

Minimal simplified code:
@Override void setUp()throws Exception{Executors();filter(MessageInspector(),scheduler);session();chain();nextFilterControl();nextFilter=(NextFilter)getMock();filter(chain,"",nextFilter);filter.onPostAdd(chain,"reqres",nextFilter);Assert(session.getAttributeKeys);}

