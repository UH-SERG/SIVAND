
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__incubator-heron/heron/schedulers/tests/java/org/apache/heron/scheduler/kubernetes/KubernetesSchedulerTest_testFetchCommand.java
method_name = testFetchCommand
method_body = @Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = "/opt/heron/heron-core/bin/heron-downloader https://heron/topology.tar.gz ."; Config mockConfig = Mockito.mock(Config.class); Mockito.when(mockConfig.getStringValue(Key.DOWNLOADER_BINARY)).thenReturn("/opt/heron/heron-core/bin/heron-downloader"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE_URI)).thenReturn(new URI("https://heron/topology.tar.gz")); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }
predict, score, loss = mock, 0.9418631196022034, 20.430517196655273

Trace of simplified code(s):
{"time": "2021-02-24 14:38:03.277564", "score": "0.9012", "loss": "20.2902", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-core/bin/heron-downloader https://heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(Config.class); Mockito.when(mockConfig.getStringValue(Key.DOWNLOADER_BINARY)).thenReturn(\"/opt/heron/heron-core/bin/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE_URI)).thenReturn(new URI(\"https://heron/topology.tar.gz\")); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 187, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 14:38:05.934002", "score": "0.6495", "loss": "18.8199", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-core/bin/heron-downloader https://heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(Config.class); Mockito.when(mockConfig.getStringValue(Key.DOWNLOADER_BINARY)).thenReturn(\"/opt/heron/heron-core/bin/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 163, "n_pass": [26, 2, 2]}
{"time": "2021-02-24 14:38:08.612210", "score": "0.4619", "loss": "18.328", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(Config.class); Mockito.when(mockConfig.getStringValue(Key.DOWNLOADER_BINARY)).thenReturn(\"/opt/heron/heron-core/bin/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 152, "n_pass": [53, 3, 3]}
{"time": "2021-02-24 14:38:11.333838", "score": "0.5167", "loss": "18.1421", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(getStringValue(Key.DOWNLOADER_BINARY)).thenReturn(\"/opt/heron/heron-core/bin/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 140, "n_pass": [56, 4, 4]}
{"time": "2021-02-24 14:38:13.972852", "score": "0.8201", "loss": "19.2017", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-core/bin/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 128, "n_pass": [57, 5, 5]}
{"time": "2021-02-24 14:38:16.632496", "score": "0.8926", "loss": "20.3044", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Config mockRuntimeConfig = Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 122, "n_pass": [92, 6, 6]}
{"time": "2021-02-24 14:38:19.273199", "score": "0.6529", "loss": "19.6204", "code": "@Test public void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 116, "n_pass": [94, 7, 7]}
{"time": "2021-02-24 14:38:21.920859", "score": "0.8374", "loss": "19.8605", "code": "void testFetchCommand() throws URISyntaxException { final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 111, "n_pass": [103, 8, 8]}
{"time": "2021-02-24 14:38:24.561554", "score": "0.9197", "loss": "20.3585", "code": "void testFetchCommand(){ final String expectedFetchCommand = \"/opt/heron/heron-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 106, "n_pass": [105, 9, 9]}
{"time": "2021-02-24 14:38:27.196885", "score": "0.9088", "loss": "20.5097", "code": "void testFetchCommand(){ final String expectedFetchCommand = \"-/heron/topology.tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 100, "n_pass": [108, 10, 10]}
{"time": "2021-02-24 14:38:29.880926", "score": "0.7946", "loss": "19.4716", "code": "void testFetchCommand(){ final String expectedFetchCommand = \"tar.gz .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 94, "n_pass": [109, 11, 11]}
{"time": "2021-02-24 14:38:33.358057", "score": "0.3334", "loss": "17.8238", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/opt/heron/heron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 91, "n_pass": [158, 12, 12]}
{"time": "2021-02-24 14:38:38.680661", "score": "0.3777", "loss": "18.0579", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\"); Mockito.mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 88, "n_pass": [164, 14, 13]}
{"time": "2021-02-24 14:38:44.018092", "score": "0.3129", "loss": "17.4105", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when(mockRuntimeConfig.get(Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 85, "n_pass": [167, 16, 14]}
{"time": "2021-02-24 14:38:49.333641", "score": "0.4036", "loss": "17.6309", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE)); Assert.assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 82, "n_pass": [172, 18, 15]}
{"time": "2021-02-24 14:38:51.981343", "score": "0.5803", "loss": "17.6217", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand, KubernetesUtils.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 79, "n_pass": [176, 19, 16]}
{"time": "2021-02-24 14:38:54.618543", "score": "0.8252", "loss": "19.8675", "code": "void testFetchCommand(){ final String expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 76, "n_pass": [178, 20, 17]}
{"time": "2021-02-24 14:39:00.288757", "score": "0.8482", "loss": "19.5228", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\"; Config mockConfig = Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 73, "n_pass": [186, 22, 18]}
{"time": "2021-02-24 14:39:03.016896", "score": "0.7336", "loss": "18.424", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\"; Config= Mockito.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 70, "n_pass": [191, 23, 19]}
{"time": "2021-02-24 14:39:05.643941", "score": "0.7793", "loss": "18.5779", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\"; Config.mock(\"/optheron-downloader\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 67, "n_pass": [192, 24, 20]}
{"time": "2021-02-24 14:39:08.257773", "score": "0.6928", "loss": "18.0122", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\"; Config.mock(\"/opt\");mock(Config.class); Mockito.when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 64, "n_pass": [195, 25, 21]}
{"time": "2021-02-24 14:39:10.925723", "score": "0.5953", "loss": "16.7552", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\"; Config.mock(\"/opt\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 61, "n_pass": [199, 26, 22]}
{"time": "2021-02-24 14:39:16.607899", "score": "0.9328", "loss": "19.5981", "code": "void testFetchCommand(){  expectedFetchCommand = \" .\".mock(\"/opt\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 58, "n_pass": [215, 28, 23]}
{"time": "2021-02-24 14:39:24.433005", "score": "0.9393", "loss": "20.2722", "code": "void testFetchCommand(){  expectedFetchCommand = \".\".mock(\"/opt\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 57, "n_pass": [277, 30, 24]}
{"time": "2021-02-24 14:39:27.049311", "score": "0.935", "loss": "20.2813", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"/opt\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 56, "n_pass": [278, 31, 25]}
{"time": "2021-02-24 14:39:29.665215", "score": "0.935", "loss": "20.2813", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"opt\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 55, "n_pass": [283, 32, 26]}
{"time": "2021-02-24 14:39:32.302177", "score": "0.9648", "loss": "21.6263", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"\");mock(Config.class).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 54, "n_pass": [284, 33, 27]}
{"time": "2021-02-24 14:39:34.962153", "score": "0.9629", "loss": "21.5543", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key.TOPOLOGY_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 52, "n_pass": [288, 34, 28]}
{"time": "2021-02-24 14:39:37.629438", "score": "0.6296", "loss": "19.895", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key_PACKAGE));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 50, "n_pass": [292, 35, 29]}
{"time": "2021-02-24 14:39:40.269325", "score": "0.9519", "loss": "21.1714", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand.getFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 48, "n_pass": [293, 36, 30]}
{"time": "2021-02-24 14:39:42.886044", "score": "0.94", "loss": "24.2373", "code": "void testFetchCommand(){  expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 46, "n_pass": [297, 37, 31]}
{"time": "2021-02-24 14:39:48.873939", "score": "0.94", "loss": "24.2373", "code": "void testFetchCommand(){ expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 45, "n_pass": [309, 39, 32]}
{"time": "2021-02-24 14:39:51.485804", "score": "0.94", "loss": "24.2373", "code": "void testFetchCommand(){expectedFetchCommand = \"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 44, "n_pass": [310, 40, 33]}
{"time": "2021-02-24 14:39:54.083660", "score": "0.94", "loss": "24.2373", "code": "void testFetchCommand(){expectedFetchCommand= \"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 43, "n_pass": [312, 41, 34]}
{"time": "2021-02-24 14:39:56.696320", "score": "0.94", "loss": "24.2373", "code": "void testFetchCommand(){expectedFetchCommand=\"\".mock(\"\");mock(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 42, "n_pass": [314, 42, 35]}
{"time": "2021-02-24 14:40:04.507988", "score": "0.9379", "loss": "23.5876", "code": "void testFetchCommand(){expectedFetchCommand=\"\".mock(\"\");(Config).when((Key));assertEquals(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 41, "n_pass": [374, 44, 36]}
{"time": "2021-02-24 14:40:07.518222", "score": "0.886", "loss": "20.9139", "code": "void testFetchCommand(){expectedFetchCommand=\"\".mock(\"\");(Config).when((Key));(expectedFetchCommand(mockConfig, mockRuntimeConfig)); }", "n_tokens": 40, "n_pass": [386, 45, 37]}
{"time": "2021-02-24 14:40:10.132613", "score": "0.886", "loss": "20.9139", "code": "void testFetchCommand(){expectedFetchCommand=\"\".mock(\"\");(Config).when((Key));(expectedFetchCommand(mockConfig,mockRuntimeConfig)); }", "n_tokens": 39, "n_pass": [392, 46, 38]}
{"time": "2021-02-24 14:40:12.741489", "score": "0.886", "loss": "20.9139", "code": "void testFetchCommand(){expectedFetchCommand=\"\".mock(\"\");(Config).when((Key));(expectedFetchCommand(mockConfig,mockRuntimeConfig));}", "n_tokens": 38, "n_pass": [397, 47, 39]}

Minimal simplified code:
void testFetchCommand(){expectedFetchCommand="".mock("");(Config).when((Key));(expectedFetchCommand(mockConfig,mockRuntimeConfig));}

