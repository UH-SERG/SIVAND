
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jamesdbloom__mockserver/mockserver-core/src/main/java/org/mockserver/logging/LoggingHandler_addLoggingHandler.java
method_name = addLoggingHandler
method_body = public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline().get(LoggingHandler.class) != null) { ctx.pipeline().remove(LoggingHandler.class); } if (ctx.pipeline().get(SslHandler.class) != null) { ctx.pipeline().addAfter("SslHandler#0", "LoggingHandler#0", this); } else { ctx.pipeline().addFirst(this); } }
predict, score, loss = channelActive, 0.3668788969516754, 18.77414321899414

Trace of simplified code(s):
{"time": "2021-02-24 04:41:08.996289", "score": "0.3669", "loss": "18.7741", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline().get(LoggingHandler.class) != null) { ctx.pipeline().remove(LoggingHandler.class); } if (ctx.pipeline().get(SslHandler.class) != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { ctx.pipeline().addFirst(this); } }", "n_tokens": 124, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:41:11.700843", "score": "0.7105", "loss": "20.3018", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline().get(LoggingHandler.class) !=get(SslHandler.class) != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { ctx.pipeline().addFirst(this); } }", "n_tokens": 93, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 04:41:14.330640", "score": "0.6771", "loss": "19.6533", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline().get(LoggingHandler.class)  != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { ctx.pipeline().addFirst(this); } }", "n_tokens": 85, "n_pass": [36, 3, 3]}
{"time": "2021-02-24 04:41:17.022918", "score": "0.5949", "loss": "20.0439", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline().get(LoggingHandler.class)  != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else {(this); } }", "n_tokens": 77, "n_pass": [42, 4, 4]}
{"time": "2021-02-24 04:41:19.697573", "score": "0.554", "loss": "20.9602", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline() != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else {(this); } }", "n_tokens": 69, "n_pass": [47, 5, 5]}
{"time": "2021-02-24 04:41:24.971726", "score": "0.5553", "loss": "20.997", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx.pipeline() != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 65, "n_pass": [85, 7, 6]}
{"time": "2021-02-24 04:41:30.633460", "score": "0.5446", "loss": "21.1303", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctx != null) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 61, "n_pass": [91, 9, 7]}
{"time": "2021-02-24 04:41:33.275423", "score": "0.5502", "loss": "20.7587", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.pipeline().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 57, "n_pass": [92, 10, 8]}
{"time": "2021-02-24 04:41:41.897678", "score": "0.5479", "loss": "20.7128", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx().addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 55, "n_pass": [141, 13, 9]}
{"time": "2021-02-24 04:41:44.514406", "score": "0.5321", "loss": "20.7927", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"SslHandler#0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 53, "n_pass": [142, 14, 10]}
{"time": "2021-02-24 04:41:49.855967", "score": "0.5712", "loss": "19.0415", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler#0\", this); } else { } }", "n_tokens": 51, "n_pass": [145, 16, 11]}
{"time": "2021-02-24 04:41:52.482536", "score": "0.5712", "loss": "19.0415", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } else { } }", "n_tokens": 49, "n_pass": [149, 17, 12]}
{"time": "2021-02-24 04:41:55.115398", "score": "0.5712", "loss": "19.0415", "code": "public void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 47, "n_pass": [154, 18, 13]}
{"time": "2021-02-24 04:41:57.725894", "score": "0.5712", "loss": "19.0415", "code": " void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 46, "n_pass": [158, 19, 14]}
{"time": "2021-02-24 04:42:00.351802", "score": "0.5712", "loss": "19.0415", "code": "void addLoggingHandler(ChannelHandlerContext ctx) { if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 45, "n_pass": [159, 20, 15]}
{"time": "2021-02-24 04:42:11.380302", "score": "0.5712", "loss": "19.0415", "code": "void addLoggingHandler(ChannelHandlerContext ctx){ if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 44, "n_pass": [234, 22, 16]}
{"time": "2021-02-24 04:42:13.982378", "score": "0.5712", "loss": "19.0415", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if (ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 43, "n_pass": [236, 23, 17]}
{"time": "2021-02-24 04:42:16.583402", "score": "0.5712", "loss": "19.0415", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(ctxnull) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 42, "n_pass": [238, 24, 18]}
{"time": "2021-02-24 04:42:19.197469", "score": "0.5954", "loss": "19.5617", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null) { ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 41, "n_pass": [240, 25, 19]}
{"time": "2021-02-24 04:42:21.795403", "score": "0.5954", "loss": "19.5617", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 40, "n_pass": [243, 26, 20]}
{"time": "2021-02-24 04:42:24.409087", "score": "0.5954", "loss": "19.5617", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"0\", \"LoggingHandler\", this); } { } }", "n_tokens": 39, "n_pass": [245, 27, 21]}
{"time": "2021-02-24 04:42:29.638324", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\", \"LoggingHandler\", this); } { } }", "n_tokens": 38, "n_pass": [251, 29, 22]}
{"time": "2021-02-24 04:42:32.275519", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\", this); } { } }", "n_tokens": 37, "n_pass": [254, 30, 23]}
{"time": "2021-02-24 04:42:37.515719", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\",this); } { } }", "n_tokens": 36, "n_pass": [259, 32, 24]}
{"time": "2021-02-24 04:42:40.136351", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\",this);} { } }", "n_tokens": 35, "n_pass": [263, 33, 25]}
{"time": "2021-02-24 04:42:42.746832", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\",this);}{ } }", "n_tokens": 34, "n_pass": [265, 34, 26]}
{"time": "2021-02-24 04:42:45.365117", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\",this);}{} }", "n_tokens": 33, "n_pass": [267, 35, 27]}
{"time": "2021-02-24 04:42:47.974643", "score": "0.5875", "loss": "19.3675", "code": "void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter(\"\",\"LoggingHandler\",this);}{}}", "n_tokens": 32, "n_pass": [269, 36, 28]}

Minimal simplified code:
void addLoggingHandler(ChannelHandlerContext ctx){if(null){ctx.addAfter("","LoggingHandler",this);}{}}

