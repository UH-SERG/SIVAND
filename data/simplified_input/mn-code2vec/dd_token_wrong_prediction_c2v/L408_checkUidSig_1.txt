
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/pg/src/test/java/org/bouncycastle/openpgp/test/BcPGPKeyRingTest_checkUidSig.java
method_name = checkUidSig
method_body = private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig = (PGPSignature) sigit.next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail("Bad self-signature found for '" + uid + "'"); } } }
predict, score, loss = verify, 0.9308466911315918, 19.608383178710938

Trace of simplified code(s):
{"time": "2021-02-23 23:53:39.534343", "score": "0.9308", "loss": "19.6084", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig = (PGPSignature) sigit.next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad self-signature found for '\" + uid + \"'\"); } } }", "n_tokens": 119, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:53:42.355332", "score": "0.9294", "loss": "19.644", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad self-signature found for '\" + uid + \"'\"); } } }", "n_tokens": 112, "n_pass": [52, 2, 2]}
{"time": "2021-02-23 23:53:45.197491", "score": "0.9294", "loss": "19.644", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad found for '\" + uid + \"'\"); } } }", "n_tokens": 108, "n_pass": [105, 3, 3]}
{"time": "2021-02-23 23:53:47.993528", "score": "0.9275", "loss": "19.5912", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + uid + \"'\"); } } }", "n_tokens": 104, "n_pass": [106, 4, 4]}
{"time": "2021-02-23 23:53:50.790270", "score": "0.9304", "loss": "18.8889", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 100, "n_pass": [108, 5, 5]}
{"time": "2021-02-23 23:53:55.023397", "score": "0.8831", "loss": "16.6765", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 96, "n_pass": [127, 6, 6]}
{"time": "2021-02-23 23:54:00.605214", "score": "0.8024", "loss": "16.9188", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 94, "n_pass": [212, 7, 7]}
{"time": "2021-02-23 23:54:03.419916", "score": "0.7828", "loss": "17.498", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"Bad '\" + \"'\"); } } }", "n_tokens": 92, "n_pass": [216, 8, 8]}
{"time": "2021-02-23 23:54:06.201996", "score": "0.7807", "loss": "17.5664", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 90, "n_pass": [218, 9, 9]}
{"time": "2021-02-23 23:54:09.168404", "score": "0.7807", "loss": "17.5664", "code": " void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 89, "n_pass": [227, 10, 10]}
{"time": "2021-02-23 23:54:12.021088", "score": "0.7807", "loss": "17.5664", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 88, "n_pass": [228, 11, 11]}
{"time": "2021-02-23 23:54:16.680944", "score": "0.7655", "loss": "17.5643", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 86, "n_pass": [247, 12, 12]}
{"time": "2021-02-23 23:54:19.488622", "score": "0.7791", "loss": "17.2735", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk(uid); while (hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 84, "n_pass": [252, 13, 13]}
{"time": "2021-02-23 23:54:22.254919", "score": "0.7873", "loss": "17.3197", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk(uid); while (hasNext()) {next(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 82, "n_pass": [256, 14, 14]}
{"time": "2021-02-23 23:54:26.941722", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid); while (hasNext()) {next(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 80, "n_pass": [293, 15, 15]}
{"time": "2021-02-23 23:54:42.147648", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while (hasNext()) {next(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 79, "n_pass": [412, 16, 16]}
{"time": "2021-02-23 23:54:44.941261", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()) {next(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 78, "n_pass": [413, 17, 17]}
{"time": "2021-02-23 23:54:47.745798", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next(); if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 77, "n_pass": [419, 18, 18]}
{"time": "2021-02-23 23:54:50.544263", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if (!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 76, "n_pass": [425, 19, 19]}
{"time": "2021-02-23 23:54:53.353063", "score": "0.8042", "loss": "17.5155", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(!isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 75, "n_pass": [427, 20, 20]}
{"time": "2021-02-23 23:54:56.152971", "score": "0.7471", "loss": "16.9433", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(sigpk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 74, "n_pass": [429, 21, 21]}
{"time": "2021-02-23 23:54:58.949376", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk, uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 73, "n_pass": [432, 22, 22]}
{"time": "2021-02-23 23:55:01.749266", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)) {(\"'\" + \"'\"); } } }", "n_tokens": 72, "n_pass": [435, 23, 23]}
{"time": "2021-02-23 23:55:04.535362", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"'\" + \"'\"); } } }", "n_tokens": 71, "n_pass": [439, 24, 24]}
{"time": "2021-02-23 23:55:07.313111", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\" + \"'\"); } } }", "n_tokens": 70, "n_pass": [443, 25, 25]}
{"time": "2021-02-23 23:55:10.131369", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+ \"'\"); } } }", "n_tokens": 69, "n_pass": [445, 26, 26]}
{"time": "2021-02-23 23:55:12.933834", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"'\"); } } }", "n_tokens": 68, "n_pass": [447, 27, 27]}
{"time": "2021-02-23 23:55:15.718997", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\"); } } }", "n_tokens": 67, "n_pass": [449, 28, 28]}
{"time": "2021-02-23 23:55:18.512590", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");} } }", "n_tokens": 66, "n_pass": [453, 29, 29]}
{"time": "2021-02-23 23:55:21.299328", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}} }", "n_tokens": 65, "n_pass": [455, 30, 30]}
{"time": "2021-02-23 23:55:24.107955", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 64, "n_pass": [457, 31, 31]}
{"time": "2021-02-23 23:55:27.825473", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid) throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 63, "n_pass": [467, 32, 32]}
{"time": "2021-02-23 23:55:30.604938", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception { Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 62, "n_pass": [472, 33, 33]}
{"time": "2021-02-23 23:55:33.423430", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{ Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 61, "n_pass": [476, 34, 34]}
{"time": "2021-02-23 23:55:36.221112", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature> sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 60, "n_pass": [478, 35, 35]}
{"time": "2021-02-23 23:55:39.483299", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit =(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 59, "n_pass": [483, 36, 36]}
{"time": "2021-02-23 23:55:42.263372", "score": "0.6762", "loss": "17.0911", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=(uid);while(hasNext()){next();if(isGoodUIDSignature(pk,uid)){(\"\"+\"\");}}}", "n_tokens": 58, "n_pass": [485, 37, 37]}
{"time": "2021-02-23 23:55:45.544290", "score": "0.8374", "loss": "17.484", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=(uid);while(hasNext()){next();if(isGoodUIDSignature(pkuid)){(\"\"+\"\");}}}", "n_tokens": 57, "n_pass": [507, 38, 38]}
{"time": "2021-02-23 23:55:48.402372", "score": "0.7874", "loss": "17.6006", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=(uid);while(hasNext()){next();if(isGoodUIDSignature(pk)){(\"\"+\"\");}}}", "n_tokens": 56, "n_pass": [508, 39, 39]}
{"time": "2021-02-23 23:55:54.162253", "score": "0.7956", "loss": "18.0858", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=(uid);while(hasNext()){next();if((pk)){(\"\"+\"\");}}}", "n_tokens": 55, "n_pass": [562, 40, 40]}

Minimal simplified code:
void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=(uid);while(hasNext()){next();if((pk)){(""+"");}}}

