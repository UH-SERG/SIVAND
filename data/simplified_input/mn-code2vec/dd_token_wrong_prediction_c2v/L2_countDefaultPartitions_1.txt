
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/cairo/TableReader_countDefaultPartitions.java
method_name = countDefaultPartitions
method_body = private void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else { Path path = pathGenDefault(); partitionCount = ff.exists(path) ? 1 : 0; path.trimTo(rootLen); } }
predict, score, loss = trim, 0.8141008019447327, 22.337474822998047

Trace of simplified code(s):
{"time": "2021-02-24 02:13:46.802853", "score": "0.8141", "loss": "22.3375", "code": "private void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else { Path path = pathGenDefault(); partitionCount = ff.exists(path) ? 1 : 0; path.trimTo(rootLen); } }", "n_tokens": 82, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:13:49.925765", "score": "0.7296", "loss": "22.3803", "code": "private void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = ff.exists(path) ? 1 : 0; path.trimTo(rootLen); } }", "n_tokens": 72, "n_pass": [24, 2, 2]}
{"time": "2021-02-24 02:13:55.991268", "score": "0.7053", "loss": "21.9269", "code": "private void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : 0; path.trimTo(rootLen); } }", "n_tokens": 69, "n_pass": [91, 4, 3]}
{"time": "2021-02-24 02:13:58.757273", "score": "0.5418", "loss": "20.867", "code": "private void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 66, "n_pass": [95, 5, 4]}
{"time": "2021-02-24 02:14:04.124561", "score": "0.5418", "loss": "20.867", "code": "void countDefaultPartitions() { if (maxTimestamp == Numbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 64, "n_pass": [100, 7, 5]}
{"time": "2021-02-24 02:14:07.209678", "score": "0.5743", "loss": "23.0101", "code": "void countDefaultPartitions() { if (maxTimestamp= Numbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 62, "n_pass": [107, 8, 6]}
{"time": "2021-02-24 02:14:09.833760", "score": "0.6202", "loss": "23.0527", "code": "void countDefaultPartitions() { if (maxTimestampNumbers.LONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 60, "n_pass": [108, 9, 7]}
{"time": "2021-02-24 02:14:12.487140", "score": "0.6198", "loss": "23.1007", "code": "void countDefaultPartitions() { if (maxTimestampLONG_NaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 58, "n_pass": [109, 10, 8]}
{"time": "2021-02-24 02:14:15.128521", "score": "0.6198", "loss": "23.1007", "code": "void countDefaultPartitions() { if (maxTimestampNaN) { partitionCount = 0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 56, "n_pass": [110, 11, 9]}
{"time": "2021-02-24 02:14:17.768853", "score": "0.6242", "loss": "23.5004", "code": "void countDefaultPartitions() { if (maxTimestampNaN) {  0; } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 53, "n_pass": [113, 12, 10]}
{"time": "2021-02-24 02:14:20.376754", "score": "0.6234", "loss": "23.5431", "code": "void countDefaultPartitions() { if (maxTimestampNaN) {  } else {  partitionCount = (path) ? 1 : path.trimTo(rootLen); } }", "n_tokens": 50, "n_pass": [114, 13, 11]}
{"time": "2021-02-24 02:14:23.646845", "score": "0.779", "loss": "23.4446", "code": "void countDefaultPartitions() { if (maxTimestampNaN) {  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 47, "n_pass": [122, 14, 12]}
{"time": "2021-02-24 02:14:32.290565", "score": "0.779", "loss": "23.4446", "code": "void countDefaultPartitions(){ if (maxTimestampNaN) {  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 46, "n_pass": [188, 15, 13]}
{"time": "2021-02-24 02:14:34.952239", "score": "0.779", "loss": "23.4446", "code": "void countDefaultPartitions(){if (maxTimestampNaN) {  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 45, "n_pass": [190, 16, 14]}
{"time": "2021-02-24 02:14:37.601960", "score": "0.779", "loss": "23.4446", "code": "void countDefaultPartitions(){if(maxTimestampNaN) {  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 44, "n_pass": [192, 17, 15]}
{"time": "2021-02-24 02:14:40.290300", "score": "0.8008", "loss": "23.7917", "code": "void countDefaultPartitions(){if(NaN) {  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 43, "n_pass": [194, 18, 16]}
{"time": "2021-02-24 02:14:42.913104", "score": "0.8008", "loss": "23.7917", "code": "void countDefaultPartitions(){if(NaN){  } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 42, "n_pass": [197, 19, 17]}
{"time": "2021-02-24 02:14:45.542327", "score": "0.8008", "loss": "23.7917", "code": "void countDefaultPartitions(){if(NaN){ } else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 41, "n_pass": [199, 20, 18]}
{"time": "2021-02-24 02:14:48.135828", "score": "0.8008", "loss": "23.7917", "code": "void countDefaultPartitions(){if(NaN){} else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 40, "n_pass": [200, 21, 19]}
{"time": "2021-02-24 02:14:50.737667", "score": "0.8008", "loss": "23.7917", "code": "void countDefaultPartitions(){if(NaN){}else {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 39, "n_pass": [202, 22, 20]}
{"time": "2021-02-24 02:14:53.372805", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){} {  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 38, "n_pass": [203, 23, 21]}
{"time": "2021-02-24 02:14:56.016481", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{  partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 37, "n_pass": [204, 24, 22]}
{"time": "2021-02-24 02:14:58.635695", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{ partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 36, "n_pass": [206, 25, 23]}
{"time": "2021-02-24 02:15:01.288236", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path) ? 1 :trimTo(rootLen); } }", "n_tokens": 35, "n_pass": [207, 26, 24]}
{"time": "2021-02-24 02:15:08.132596", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path)? 1 :trimTo(rootLen); } }", "n_tokens": 34, "n_pass": [256, 27, 25]}
{"time": "2021-02-24 02:15:10.811566", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path)?1 :trimTo(rootLen); } }", "n_tokens": 33, "n_pass": [258, 28, 26]}
{"time": "2021-02-24 02:15:13.412956", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path)?1:trimTo(rootLen); } }", "n_tokens": 32, "n_pass": [260, 29, 27]}
{"time": "2021-02-24 02:15:21.451662", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path)?1:trimTo(rootLen);} }", "n_tokens": 31, "n_pass": [267, 32, 28]}
{"time": "2021-02-24 02:15:24.065629", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount = (path)?1:trimTo(rootLen);}}", "n_tokens": 30, "n_pass": [269, 33, 29]}
{"time": "2021-02-24 02:15:27.411607", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount= (path)?1:trimTo(rootLen);}}", "n_tokens": 29, "n_pass": [285, 34, 30]}
{"time": "2021-02-24 02:15:30.466031", "score": "0.6825", "loss": "23.4618", "code": "void countDefaultPartitions(){if(NaN){}{partitionCount=(path)?1:trimTo(rootLen);}}", "n_tokens": 28, "n_pass": [287, 35, 31]}

Minimal simplified code:
void countDefaultPartitions(){if(NaN){}{partitionCount=(path)?1:trimTo(rootLen);}}

