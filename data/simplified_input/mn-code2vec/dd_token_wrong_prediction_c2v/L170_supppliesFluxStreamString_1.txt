
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-compiler/src/test/java/org/springframework/cloud/function/compiler/SupplierCompilerTests_supppliesFluxStreamString.java
method_name = supppliesFluxStreamString
method_body = @Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile("foos", "() -> Flux.interval(Duration.ofMillis(1000)).map(Object::toString)", "Flux<String>"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo("0"); }
predict, score, loss = regex, 0.6649681329727173, 13.837100982666016

Trace of simplified code(s):
{"time": "2021-02-24 00:16:33.635344", "score": "0.665", "loss": "13.8371", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos\", \"() -> Flux.interval(Duration.ofMillis(1000)).map(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 140, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 00:16:37.165444", "score": "0.5752", "loss": "14.0985", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos(1000)).map(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 123, "n_pass": [23, 2, 2]}
{"time": "2021-02-24 00:16:40.412506", "score": "0.5752", "loss": "14.0985", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 114, "n_pass": [45, 3, 3]}
{"time": "2021-02-24 00:16:43.690681", "score": "0.6736", "loss": "14.0231", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos()\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 110, "n_pass": [85, 4, 4]}
{"time": "2021-02-24 00:16:56.158643", "score": "0.6964", "loss": "13.9717", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"foos()\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 106, "n_pass": [106, 8, 5]}
{"time": "2021-02-24 00:17:05.845411", "score": "0.6486", "loss": "14.0578", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\"foos()\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 104, "n_pass": [181, 11, 6]}
{"time": "2021-02-24 00:17:08.629788", "score": "0.4509", "loss": "14.1604", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 102, "n_pass": [185, 12, 7]}
{"time": "2021-02-24 00:17:11.422413", "score": "0.4632", "loss": "14.1556", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 100, "n_pass": [189, 13, 8]}
{"time": "2021-02-24 00:17:14.210351", "score": "0.4492", "loss": "14.2845", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 98, "n_pass": [192, 14, 9]}
{"time": "2021-02-24 00:17:17.116580", "score": "0.4749", "loss": "13.7466", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 96, "n_pass": [194, 15, 10]}
{"time": "2021-02-24 00:17:19.901489", "score": "0.4769", "loss": "13.7735", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 94, "n_pass": [196, 16, 11]}
{"time": "2021-02-24 00:17:22.685481", "score": "0.4693", "loss": "13.7595", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 92, "n_pass": [197, 17, 12]}
{"time": "2021-02-24 00:17:25.454565", "score": "0.484", "loss": "13.8568", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 89, "n_pass": [203, 18, 13]}
{"time": "2021-02-24 00:17:33.802008", "score": "0.484", "loss": "13.8568", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 87, "n_pass": [211, 21, 14]}
{"time": "2021-02-24 00:17:39.289069", "score": "0.4585", "loss": "14.001", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\")\", \"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 85, "n_pass": [227, 22, 15]}
{"time": "2021-02-24 00:17:58.385541", "score": "0.4556", "loss": "14.0351", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\", \"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 84, "n_pass": [350, 26, 16]}
{"time": "2021-02-24 00:18:01.163670", "score": "0.4556", "loss": "14.0351", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"Flux>\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 83, "n_pass": [352, 27, 17]}
{"time": "2021-02-24 00:18:03.920067", "score": "0.4662", "loss": "13.9852", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\">\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 82, "n_pass": [354, 28, 18]}
{"time": "2021-02-24 00:18:06.692017", "score": "0.4161", "loss": "14.0483", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 81, "n_pass": [355, 29, 19]}
{"time": "2021-02-24 00:18:15.000238", "score": "0.4161", "loss": "14.0483", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 80, "n_pass": [370, 32, 20]}
{"time": "2021-02-24 00:18:23.320595", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 79, "n_pass": [375, 35, 21]}
{"time": "2021-02-24 00:18:27.474113", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){ CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 78, "n_pass": [393, 36, 22]}
{"time": "2021-02-24 00:18:30.242150", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 77, "n_pass": [395, 37, 23]}
{"time": "2021-02-24 00:18:36.621872", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled = new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 76, "n_pass": [406, 38, 24]}
{"time": "2021-02-24 00:18:39.379437", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled= new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 75, "n_pass": [408, 39, 25]}
{"time": "2021-02-24 00:18:42.179172", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 74, "n_pass": [410, 40, 26]}
{"time": "2021-02-24 00:19:05.265078", "score": "0.3721", "loss": "14.0607", "code": "@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(getName()).compile(\"\",\"\");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\");}", "n_tokens": 73, "n_pass": [510, 46, 27]}

Minimal simplified code:
@Test void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(getName()).compile("","");(FunctionFactoryUtils(compiled)).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo("0");}

