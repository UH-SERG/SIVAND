
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/util/SettingsHelper_hasDuplicates.java
method_name = hasDuplicates
method_body = public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect(Collectors.toSet()).isEmpty(); }
predict, score, loss = shouldTransform, 0.1969834715127945, 8.90552043914795

Trace of simplified code(s):
{"time": "2021-02-24 05:18:29.335008", "score": "0.197", "loss": "8.9055", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect(Collectors.toSet()).isEmpty(); }", "n_tokens": 101, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:18:35.176498", "score": "0.2076", "loss": "9.2325", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades, i) > 1).collect(Collectors.toSet()).isEmpty(); }", "n_tokens": 94, "n_pass": [55, 3, 2]}
{"time": "2021-02-24 05:18:43.526129", "score": "0.1883", "loss": "9.1681", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors.toSet()).isEmpty(); }", "n_tokens": 91, "n_pass": [102, 6, 3]}
{"time": "2021-02-24 05:18:46.210084", "score": "0.4146", "loss": "9.8395", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors).isEmpty(); }", "n_tokens": 87, "n_pass": [106, 7, 4]}
{"time": "2021-02-24 05:18:48.893176", "score": "0.465", "loss": "10.5079", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 83, "n_pass": [107, 8, 5]}
{"time": "2021-02-24 05:18:51.522766", "score": "0.465", "loss": "10.5079", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 80, "n_pass": [109, 9, 6]}
{"time": "2021-02-24 05:18:54.929213", "score": "0.4489", "loss": "10.4643", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 77, "n_pass": [119, 10, 7]}
{"time": "2021-02-24 05:18:57.607725", "score": "0.4208", "loss": "10.3672", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 74, "n_pass": [122, 11, 8]}
{"time": "2021-02-24 05:19:00.672741", "score": "0.2184", "loss": "13.8109", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 71, "n_pass": [128, 12, 9]}
{"time": "2021-02-24 05:19:14.508757", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 70, "n_pass": [212, 16, 10]}
{"time": "2021-02-24 05:19:17.909074", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates( List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 69, "n_pass": [217, 17, 11]}
{"time": "2021-02-24 05:19:20.564900", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 68, "n_pass": [218, 18, 12]}
{"time": "2021-02-24 05:19:23.211118", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList) { final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 67, "n_pass": [223, 19, 13]}
{"time": "2021-02-24 05:19:25.831479", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){ final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 66, "n_pass": [226, 20, 14]}
{"time": "2021-02-24 05:19:28.451836", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){final List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 65, "n_pass": [228, 21, 15]}
{"time": "2021-02-24 05:19:31.106283", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){ List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 64, "n_pass": [229, 22, 16]}
{"time": "2021-02-24 05:19:33.737144", "score": "0.2184", "loss": "13.8109", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors.toList()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 63, "n_pass": [230, 23, 17]}
{"time": "2021-02-24 05:19:37.524632", "score": "0.2236", "loss": "13.877", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); return stream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 61, "n_pass": [242, 24, 18]}
{"time": "2021-02-24 05:19:55.921529", "score": "0.263", "loss": "13.6827", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter(frequency(letterGrades) > 1).collect(Collectors); }", "n_tokens": 60, "n_pass": [329, 29, 19]}
{"time": "2021-02-24 05:19:58.583142", "score": "0.2271", "loss": "13.7774", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades) > 1).collect(Collectors); }", "n_tokens": 59, "n_pass": [335, 30, 20]}
{"time": "2021-02-24 05:20:01.219109", "score": "0.2271", "loss": "13.7774", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)> 1).collect(Collectors); }", "n_tokens": 58, "n_pass": [339, 31, 21]}
{"time": "2021-02-24 05:20:03.849488", "score": "0.2444", "loss": "13.7561", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades) 1).collect(Collectors); }", "n_tokens": 57, "n_pass": [340, 32, 22]}
{"time": "2021-02-24 05:20:06.478652", "score": "0.2444", "loss": "13.7561", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)1).collect(Collectors); }", "n_tokens": 56, "n_pass": [341, 33, 23]}
{"time": "2021-02-24 05:20:09.129959", "score": "0.2249", "loss": "13.8387", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)).collect(Collectors); }", "n_tokens": 55, "n_pass": [342, 34, 24]}
{"time": "2021-02-24 05:20:11.805887", "score": "0.2426", "loss": "13.2845", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)).collect(); }", "n_tokens": 54, "n_pass": [347, 35, 25]}
{"time": "2021-02-24 05:20:14.427461", "score": "0.2426", "loss": "13.2845", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String> letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)).collect();}", "n_tokens": 53, "n_pass": [350, 36, 26]}
{"time": "2021-02-24 05:20:18.219030", "score": "0.2426", "loss": "13.2845", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)).collect();}", "n_tokens": 52, "n_pass": [367, 37, 27]}
{"time": "2021-02-24 05:20:20.838662", "score": "0.2426", "loss": "13.2845", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=stream().map(getGrade).collect(Collectors()); returnstream().filter((letterGrades)).collect();}", "n_tokens": 51, "n_pass": [369, 38, 28]}
{"time": "2021-02-24 05:20:23.847196", "score": "0.2671", "loss": "13.4322", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=stream().map().collect(Collectors()); returnstream().filter((letterGrades)).collect();}", "n_tokens": 50, "n_pass": [377, 39, 29]}
{"time": "2021-02-24 05:20:26.497355", "score": "0.2671", "loss": "13.4322", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=stream().map().collect(Collectors());returnstream().filter((letterGrades)).collect();}", "n_tokens": 49, "n_pass": [387, 40, 30]}

Minimal simplified code:
boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=stream().map().collect(Collectors());returnstream().filter((letterGrades)).collect();}

