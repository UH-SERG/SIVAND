
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/tls/TlsStreamCipher_encodePlaintext.java
method_name = encodePlaintext
method_body = public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); encryptCipher.processBytes(mac, 0, mac.length, outBuf, len); return outBuf; }
predict, score, loss = encrypt, 0.9873599410057068, 22.90924835205078

Trace of simplified code(s):
{"time": "2021-02-24 12:16:13.391516", "score": "0.954", "loss": "20.3766", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); encryptCipher.processBytes(mac, 0, mac.length, outBuf, len); return outBuf; }", "n_tokens": 159, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 12:16:16.226051", "score": "0.9924", "loss": "23.0369", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, mac.length, outBuf, len); return outBuf; }", "n_tokens": 139, "n_pass": [26, 2, 2]}
{"time": "2021-02-24 12:16:19.040414", "score": "0.965", "loss": "19.7687", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 129, "n_pass": [47, 3, 3]}
{"time": "2021-02-24 12:16:21.873426", "score": "0.9813", "loss": "20.3343", "code": "public byte[] encodePlaintext(long[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 119, "n_pass": [49, 4, 4]}
{"time": "2021-02-24 12:16:24.691965", "score": "0.9458", "loss": "18.2086", "code": "public byte[] encodePlaintext(long[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 109, "n_pass": [57, 5, 5]}
{"time": "2021-02-24 12:16:27.518731", "score": "0.9666", "loss": "19.7081", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 104, "n_pass": [100, 6, 6]}
{"time": "2021-02-24 12:16:30.777948", "score": "0.8664", "loss": "17.6405", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 102, "n_pass": [173, 7, 7]}
{"time": "2021-02-24 12:16:33.582660", "score": "0.9276", "loss": "18.7247", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 100, "n_pass": [175, 8, 8]}
{"time": "2021-02-24 12:16:36.408623", "score": "0.9442", "loss": "19.1852", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 97, "n_pass": [179, 9, 9]}
{"time": "2021-02-24 12:16:39.172161", "score": "0.9433", "loss": "19.1611", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[ writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 94, "n_pass": [183, 10, 10]}
{"time": "2021-02-24 12:16:41.927491", "score": "0.9439", "loss": "19.1923", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 91, "n_pass": [184, 11, 11]}
{"time": "2021-02-24 12:16:44.702945", "score": "0.9567", "loss": "19.7698", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 88, "n_pass": [197, 12, 12]}
{"time": "2021-02-24 12:16:47.447180", "score": "0.9567", "loss": "19.7698", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 86, "n_pass": [199, 13, 13]}
{"time": "2021-02-24 12:16:50.202801", "score": "0.9562", "loss": "19.7073", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(seqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 84, "n_pass": [215, 14, 14]}
{"time": "2021-02-24 12:17:01.039078", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 83, "n_pass": [318, 15, 15]}
{"time": "2021-02-24 12:17:03.784970", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 82, "n_pass": [320, 16, 16]}
{"time": "2021-02-24 12:17:06.562679", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();} outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 81, "n_pass": [322, 17, 17]}
{"time": "2021-02-24 12:17:09.303058", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 80, "n_pass": [323, 18, 18]}
{"time": "2021-02-24 12:17:12.047587", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf= new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 79, "n_pass": [325, 19, 19]}
{"time": "2021-02-24 12:17:14.789144", "score": "0.957", "loss": "19.7856", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 78, "n_pass": [327, 20, 20]}
{"time": "2021-02-24 12:17:17.588860", "score": "0.9647", "loss": "19.9869", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 77, "n_pass": [329, 21, 21]}
{"time": "2021-02-24 12:17:20.337819", "score": "0.9647", "loss": "19.9869", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 76, "n_pass": [337, 22, 22]}
{"time": "2021-02-24 12:17:23.131883", "score": "0.9632", "loss": "20.364", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 74, "n_pass": [339, 23, 23]}
{"time": "2021-02-24 12:17:25.886473", "score": "0.9751", "loss": "20.7424", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 72, "n_pass": [341, 24, 24]}
{"time": "2021-02-24 12:17:28.638211", "score": "0.9751", "loss": "20.7636", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 70, "n_pass": [344, 25, 25]}
{"time": "2021-02-24 12:17:31.391051", "score": "0.9473", "loss": "18.4531", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo, typelen); ; }", "n_tokens": 68, "n_pass": [348, 26, 26]}
{"time": "2021-02-24 12:17:34.167759", "score": "0.9809", "loss": "20.2555", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNotypelen); ; }", "n_tokens": 66, "n_pass": [350, 27, 27]}
{"time": "2021-02-24 12:17:36.916271", "score": "0.9799", "loss": "20.0583", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); ; }", "n_tokens": 64, "n_pass": [351, 28, 28]}
{"time": "2021-02-24 12:17:39.669183", "score": "0.9799", "loss": "20.0583", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 62, "n_pass": [353, 29, 29]}
{"time": "2021-02-24 12:17:42.446171", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 61, "n_pass": [358, 30, 30]}
{"time": "2021-02-24 12:17:45.188266", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 60, "n_pass": [364, 31, 31]}
{"time": "2021-02-24 12:17:47.928735", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 59, "n_pass": [367, 32, 32]}
{"time": "2021-02-24 12:17:50.667999", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len){ if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 58, "n_pass": [372, 33, 33]}
{"time": "2021-02-24 12:17:53.439764", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len){if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 57, "n_pass": [374, 34, 34]}
{"time": "2021-02-24 12:17:56.178432", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 56, "n_pass": [376, 35, 35]}
{"time": "2021-02-24 12:17:58.924680", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){ updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 55, "n_pass": [380, 36, 36]}
{"time": "2021-02-24 12:18:01.678859", "score": "0.9799", "loss": "20.0583", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 54, "n_pass": [382, 37, 37]}
{"time": "2021-02-24 12:18:04.435048", "score": "0.9814", "loss": "20.4779", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBufnewbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 53, "n_pass": [389, 38, 38]}
{"time": "2021-02-24 12:18:07.173119", "score": "0.9814", "loss": "20.4779", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBufbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 52, "n_pass": [390, 39, 39]}
{"time": "2021-02-24 12:18:09.931733", "score": "0.9822", "loss": "20.5371", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 51, "n_pass": [391, 40, 40]}
{"time": "2021-02-24 12:18:15.548138", "score": "0.9905", "loss": "21.1322", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac = writeMac(seqNo); }", "n_tokens": 49, "n_pass": [401, 42, 41]}
{"time": "2021-02-24 12:18:18.287473", "score": "0.9912", "loss": "23.7794", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac =(seqNo); }", "n_tokens": 47, "n_pass": [404, 43, 42]}
{"time": "2021-02-24 12:18:23.784830", "score": "0.9923", "loss": "23.7004", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac(seqNo); }", "n_tokens": 45, "n_pass": [444, 45, 43]}
{"time": "2021-02-24 12:18:29.262163", "score": "0.9929", "loss": "24.3877", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext);(seqNo); }", "n_tokens": 43, "n_pass": [483, 47, 44]}
{"time": "2021-02-24 12:18:35.999440", "score": "0.9929", "loss": "24.3877", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext);(seqNo);}", "n_tokens": 42, "n_pass": [534, 49, 45]}
{"time": "2021-02-24 12:18:41.522929", "score": "0.9262", "loss": "20.9406", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher();(seqNo);}", "n_tokens": 41, "n_pass": [569, 51, 46]}

Minimal simplified code:
byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher();(seqNo);}

