
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/classify/evaluate/ConfusionMatrix_getClassPrior.java
method_name = getClassPrior
method_body = public double getClassPrior(int classIndex) { double sum = 0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }
predict, score, loss = mean, 0.6713129281997681, 17.096010208129883

Trace of simplified code(s):
{"time": "2021-02-24 02:25:54.119924", "score": "0.6713", "loss": "17.096", "code": "public double getClassPrior(int classIndex) { double sum = 0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 78, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:25:57.161941", "score": "0.5453", "loss": "16.311", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 73, "n_pass": [47, 2, 2]}
{"time": "2021-02-24 02:25:59.883082", "score": "0.4341", "loss": "15.7485", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 68, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 02:26:02.514913", "score": "0.7097", "loss": "15.9802", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 63, "n_pass": [54, 4, 4]}
{"time": "2021-02-24 02:26:08.559768", "score": "0.7301", "loss": "16.171", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values[i]; } return sum / classifications.size(); }", "n_tokens": 60, "n_pass": [96, 6, 5]}
{"time": "2021-02-24 02:26:11.221823", "score": "0.7311", "loss": "16.1829", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values; } return sum / classifications.size(); }", "n_tokens": 57, "n_pass": [97, 7, 6]}
{"time": "2021-02-24 02:26:16.833007", "score": "0.787", "loss": "21.3653", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 54, "n_pass": [101, 9, 7]}
{"time": "2021-02-24 02:26:19.498955", "score": "0.787", "loss": "21.3653", "code": "double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 52, "n_pass": [104, 10, 8]}
{"time": "2021-02-24 02:26:22.609258", "score": "0.787", "loss": "21.3653", "code": "double getClassPrior(int classIndex) {0; for (int i = 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 50, "n_pass": [110, 11, 9]}
{"time": "2021-02-24 02:26:25.305779", "score": "0.7931", "loss": "21.4972", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 48, "n_pass": [111, 12, 10]}
{"time": "2021-02-24 02:26:27.916149", "score": "0.5777", "loss": "17.6287", "code": "double getClassPrior(int classIndex) { for (i = 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 46, "n_pass": [114, 13, 11]}
{"time": "2021-02-24 02:26:38.425263", "score": "0.5777", "loss": "17.6287", "code": "double getClassPrior(int classIndex) { for (i= 0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 45, "n_pass": [173, 15, 12]}
{"time": "2021-02-24 02:26:41.066844", "score": "0.5777", "loss": "17.6287", "code": "double getClassPrior(int classIndex) { for (i=0;numClasses; i++) { values; } return sum /size(); }", "n_tokens": 44, "n_pass": [175, 16, 13]}
{"time": "2021-02-24 02:26:43.692112", "score": "0.5987", "loss": "18.2401", "code": "double getClassPrior(int classIndex) { for (i=0;; i++) { values; } return sum /size(); }", "n_tokens": 43, "n_pass": [178, 17, 14]}
{"time": "2021-02-24 02:26:46.354408", "score": "0.5987", "loss": "18.2401", "code": "double getClassPrior(int classIndex) { for (i=0;;i++) { values; } return sum /size(); }", "n_tokens": 42, "n_pass": [180, 18, 15]}
{"time": "2021-02-24 02:26:49.079498", "score": "0.5987", "loss": "18.2401", "code": "double getClassPrior(int classIndex) { for (i=0;;i++){ values; } return sum /size(); }", "n_tokens": 41, "n_pass": [185, 19, 16]}
{"time": "2021-02-24 02:26:51.686775", "score": "0.5987", "loss": "18.2401", "code": "double getClassPrior(int classIndex) { for (i=0;;i++){values; } return sum /size(); }", "n_tokens": 40, "n_pass": [187, 20, 17]}
{"time": "2021-02-24 02:26:54.344965", "score": "0.611", "loss": "18.261", "code": "double getClassPrior(int classIndex) { for (i=0;;i++){ } return sum /size(); }", "n_tokens": 38, "n_pass": [188, 21, 18]}
{"time": "2021-02-24 02:27:00.792042", "score": "0.611", "loss": "18.261", "code": "double getClassPrior(int classIndex){ for (i=0;;i++){ } return sum /size(); }", "n_tokens": 37, "n_pass": [204, 23, 19]}
{"time": "2021-02-24 02:27:03.452499", "score": "0.611", "loss": "18.261", "code": "double getClassPrior(int classIndex){for (i=0;;i++){ } return sum /size(); }", "n_tokens": 36, "n_pass": [206, 24, 20]}
{"time": "2021-02-24 02:27:06.078394", "score": "0.611", "loss": "18.261", "code": "double getClassPrior(int classIndex){for(i=0;;i++){ } return sum /size(); }", "n_tokens": 35, "n_pass": [208, 25, 21]}
{"time": "2021-02-24 02:27:08.699009", "score": "0.6277", "loss": "18.3445", "code": "double getClassPrior(int classIndex){for(i0;;i++){ } return sum /size(); }", "n_tokens": 34, "n_pass": [211, 26, 22]}
{"time": "2021-02-24 02:27:11.338368", "score": "0.6277", "loss": "18.3445", "code": "double getClassPrior(int classIndex){for(i;;i++){ } return sum /size(); }", "n_tokens": 33, "n_pass": [212, 27, 23]}
{"time": "2021-02-24 02:27:17.750625", "score": "0.6335", "loss": "18.3684", "code": "double getClassPrior(int classIndex){for(;;i++){ } return sum /size(); }", "n_tokens": 32, "n_pass": [238, 29, 24]}
{"time": "2021-02-24 02:27:26.357314", "score": "0.6335", "loss": "18.3684", "code": "double getClassPrior(int classIndex){for(;;i++){} return sum /size(); }", "n_tokens": 31, "n_pass": [278, 31, 25]}
{"time": "2021-02-24 02:27:29.112976", "score": "0.6335", "loss": "18.3684", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum /size(); }", "n_tokens": 30, "n_pass": [279, 32, 26]}
{"time": "2021-02-24 02:27:32.553231", "score": "0.6335", "loss": "18.3684", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum/size(); }", "n_tokens": 29, "n_pass": [283, 33, 27]}
{"time": "2021-02-24 02:27:38.148704", "score": "0.6335", "loss": "18.3684", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum/size();}", "n_tokens": 28, "n_pass": [289, 35, 28]}

Minimal simplified code:
double getClassPrior(int classIndex){for(;;i++){}return sum/size();}

