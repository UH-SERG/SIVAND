
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/quantifier/src/main/java/edu/illinois/cs/cogcomp/quant/lbj/QuantitiesClassifier_realValue.java
method_name = realValue
method_body = public double realValue(int[] a0, double[] a1) { if (isClone) { loadInstance(); return instance.realValue(a0, a1); } return super.realValue(a0, a1); }
predict, score, loss = add, 0.48876601457595825, 17.66597557067871

Trace of simplified code(s):
{"time": "2021-02-24 15:37:31.832784", "score": "0.4888", "loss": "17.666", "code": "public double realValue(int[] a0, double[] a1) { if (isClone) { loadInstance(); return instance.realValue(a0, a1); } return super.realValue(a0, a1); }", "n_tokens": 70, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 15:37:34.464499", "score": "0.4496", "loss": "17.2793", "code": "public double realValue(int[] a1) { if (isClone) { loadInstance(); return instance.realValue(a0, a1); } return super.realValue(a0, a1); }", "n_tokens": 62, "n_pass": [21, 2, 2]}
{"time": "2021-02-24 15:37:37.097794", "score": "0.7714", "loss": "16.9088", "code": "public double realValue(int[] a1) { if (isClone) { loadInstance(a0, a1); } return super.realValue(a0, a1); }", "n_tokens": 53, "n_pass": [24, 3, 3]}
{"time": "2021-02-24 15:37:39.738265", "score": "0.7849", "loss": "17.1063", "code": "public double realValue(int[] a1) { if (isClone) { loadInstance(a0, a1); } return super.realValue(1); }", "n_tokens": 48, "n_pass": [47, 4, 4]}
{"time": "2021-02-24 15:37:45.440869", "score": "0.7849", "loss": "17.1063", "code": "double realValue(int[] a1) { if (isClone) { loadInstance(a0, a1); } return super.realValue(1); }", "n_tokens": 46, "n_pass": [83, 6, 5]}
{"time": "2021-02-24 15:37:48.085986", "score": "0.8364", "loss": "17.2455", "code": "double realValue(int[] a1) { if (isClone) { loadInstance(a0a1); } return super.realValue(1); }", "n_tokens": 44, "n_pass": [96, 7, 6]}
{"time": "2021-02-24 15:37:50.700267", "score": "0.8337", "loss": "17.25", "code": "double realValue(int[] a1) { if (isClone) { loadInstance(a0); } return super.realValue(1); }", "n_tokens": 42, "n_pass": [97, 8, 7]}
{"time": "2021-02-24 15:37:53.324379", "score": "0.6103", "loss": "16.1781", "code": "double realValue(int[] a1) { if (isClone) { loadInstance(a0); }super.realValue(1); }", "n_tokens": 39, "n_pass": [100, 9, 8]}
{"time": "2021-02-24 15:38:01.643521", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[] a1) { if (isClone) { loadInstance(); }super.realValue(1); }", "n_tokens": 37, "n_pass": [116, 12, 9]}
{"time": "2021-02-24 15:38:13.137882", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[] a1) { if (isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 36, "n_pass": [170, 15, 10]}
{"time": "2021-02-24 15:38:19.136802", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a1) { if (isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 35, "n_pass": [184, 17, 11]}
{"time": "2021-02-24 15:38:21.749091", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a) { if (isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 34, "n_pass": [186, 18, 12]}
{"time": "2021-02-24 15:38:24.398694", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a){ if (isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 33, "n_pass": [188, 19, 13]}
{"time": "2021-02-24 15:38:27.012904", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a){if (isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 32, "n_pass": [190, 20, 14]}
{"time": "2021-02-24 15:38:29.625700", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a){if(isClone) { loadInstance();}super.realValue(1); }", "n_tokens": 31, "n_pass": [192, 21, 15]}
{"time": "2021-02-24 15:38:32.237668", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a){if(isClone){ loadInstance();}super.realValue(1); }", "n_tokens": 30, "n_pass": [196, 22, 16]}
{"time": "2021-02-24 15:38:34.859287", "score": "0.5623", "loss": "14.9354", "code": "double realValue(int[]a){if(isClone){loadInstance();}super.realValue(1); }", "n_tokens": 29, "n_pass": [198, 23, 17]}
{"time": "2021-02-24 15:38:41.689411", "score": "0.6602", "loss": "16.3393", "code": "double realValue(int[]a){if(isClone){loadInstance();}super.realValue(); }", "n_tokens": 28, "n_pass": [232, 25, 18]}
{"time": "2021-02-24 15:38:44.291650", "score": "0.6602", "loss": "16.3393", "code": "double realValue(int[]a){if(isClone){loadInstance();}super.realValue();}", "n_tokens": 27, "n_pass": [235, 26, 19]}

Minimal simplified code:
double realValue(int[]a){if(isClone){loadInstance();}super.realValue();}

