
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/cts/utils/blob/TokenStrategyFactoryTest_shouldReturnMultipleStrategies.java
method_name = shouldReturnMultipleStrategies
method_body = @Test public void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }
predict, score, loss = setUp, 0.33572208881378174, 16.379159927368164

Trace of simplified code(s):
{"time": "2021-02-24 07:21:59.457661", "score": "0.3357", "loss": "16.3792", "code": "@Test public void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 89, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:22:05.184088", "score": "0.438", "loss": "15.4311", "code": "void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 84, "n_pass": [44, 3, 2]}
{"time": "2021-02-24 07:22:08.206893", "score": "0.4732", "loss": "15.3835", "code": "void shouldReturnMultipleStrategies() { CoreTokenConfig (CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 79, "n_pass": [47, 4, 3]}
{"time": "2021-02-24 07:22:10.861350", "score": "0.4085", "loss": "15.4744", "code": "void shouldReturnMultipleStrategies() { CoreTokenConfig ; given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 74, "n_pass": [48, 5, 4]}
{"time": "2021-02-24 07:22:13.502081", "score": "0.1756", "loss": "16.0375", "code": "void shouldReturnMultipleStrategies() { CoreTokenConfig ; given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 68, "n_pass": [53, 6, 5]}
{"time": "2021-02-24 07:22:16.519545", "score": "0.2592", "loss": "15.6925", "code": "void shouldReturnMultipleStrategies() { CoreTokenConfig ; given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies = factory.getStrategies(config).contains(compression, encryption); }", "n_tokens": 62, "n_pass": [57, 7, 6]}
{"time": "2021-02-24 07:22:20.330735", "score": "0.2583", "loss": "15.7067", "code": "void shouldReturnMultipleStrategies() {  given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies = factory.getStrategies(config).contains(compression, encryption); }", "n_tokens": 59, "n_pass": [99, 8, 7]}
{"time": "2021-02-24 07:22:26.786205", "score": "0.251", "loss": "15.2787", "code": "void shouldReturnMultipleStrategies() {  given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains(compression, encryption); }", "n_tokens": 56, "n_pass": [111, 10, 8]}
{"time": "2021-02-24 07:22:36.473487", "score": "0.3494", "loss": "15.1416", "code": "void shouldReturnMultipleStrategies() {  given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 54, "n_pass": [178, 12, 9]}
{"time": "2021-02-24 07:22:42.490047", "score": "0.3494", "loss": "15.1416", "code": "void shouldReturnMultipleStrategies(){  given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 53, "n_pass": [187, 14, 10]}
{"time": "2021-02-24 07:22:45.125698", "score": "0.3494", "loss": "15.1416", "code": "void shouldReturnMultipleStrategies(){ given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 52, "n_pass": [189, 15, 11]}
{"time": "2021-02-24 07:22:47.747761", "score": "0.3494", "loss": "15.1416", "code": "void shouldReturnMultipleStrategies(){given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 51, "n_pass": [190, 16, 12]}
{"time": "2021-02-24 07:22:50.389979", "score": "0.3154", "loss": "15.3199", "code": "void shouldReturnMultipleStrategies(){(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 50, "n_pass": [191, 17, 13]}
{"time": "2021-02-24 07:22:53.014381", "score": "0.3185", "loss": "15.3825", "code": "void shouldReturnMultipleStrategies(){(configisTokenEncrypted()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 49, "n_pass": [194, 18, 14]}
{"time": "2021-02-24 07:22:55.644376", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true); given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 48, "n_pass": [195, 19, 15]}
{"time": "2021-02-24 07:23:00.914168", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue); Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 47, "n_pass": [205, 21, 16]}
{"time": "2021-02-24 07:23:15.860441", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue);Collection<BlobStrategy> strategies =getStrategies(config).contains( encryption); }", "n_tokens": 46, "n_pass": [269, 25, 17]}
{"time": "2021-02-24 07:23:18.856428", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue);Collection<BlobStrategy>strategies =getStrategies(config).contains( encryption); }", "n_tokens": 45, "n_pass": [273, 26, 18]}
{"time": "2021-02-24 07:23:21.493649", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains( encryption); }", "n_tokens": 44, "n_pass": [275, 27, 19]}
{"time": "2021-02-24 07:23:29.754886", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption); }", "n_tokens": 43, "n_pass": [284, 30, 20]}
{"time": "2021-02-24 07:23:34.999304", "score": "0.3195", "loss": "15.3913", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);given(config.isTokenCompressedtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 42, "n_pass": [288, 32, 21]}
{"time": "2021-02-24 07:23:41.013773", "score": "0.2804", "loss": "14.7916", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);(config.isTokenCompressedtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 41, "n_pass": [307, 34, 22]}
{"time": "2021-02-24 07:23:43.639112", "score": "0.284", "loss": "14.7674", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);(configisTokenCompressedtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 40, "n_pass": [310, 35, 23]}
{"time": "2021-02-24 07:23:46.259166", "score": "0.284", "loss": "14.7674", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);(configtrue);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 39, "n_pass": [311, 36, 24]}
{"time": "2021-02-24 07:23:48.870309", "score": "0.2812", "loss": "14.8362", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn(true);(config);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 38, "n_pass": [312, 37, 25]}
{"time": "2021-02-24 07:24:02.024833", "score": "0.3429", "loss": "15.2579", "code": "void shouldReturnMultipleStrategies(){(config()).willReturn();(config);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}", "n_tokens": 37, "n_pass": [346, 41, 26]}

Minimal simplified code:
void shouldReturnMultipleStrategies(){(config()).willReturn();(config);Collection<BlobStrategy>strategies=getStrategies(config).contains(encryption);}

