
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/rwiki/rwiki-util/jrcs/src/completejava/org/apache/commons/jrcs/diff/myers/PathNode_previousSnake.java
method_name = previousSnake
method_body = public final PathNode previousSnake() { if (isBootstrap()) return null; if (!isSnake() && prev != null) return prev.previousSnake(); return this; }
predict, score, loss = firstChild, 0.20715974271297455, 16.94266128540039

Trace of simplified code(s):
{"time": "2021-02-24 01:02:43.648471", "score": "0.2072", "loss": "16.9427", "code": "public final PathNode previousSnake() { if (isBootstrap()) return null; if (!isSnake() && prev != null) return prev.previousSnake(); return this; }", "n_tokens": 59, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:02:46.459502", "score": "0.3061", "loss": "16.7292", "code": "public final PathNode previousSnake() { if (isBootstrap()) return null; if ( prev != null) return prev.previousSnake(); return this; }", "n_tokens": 52, "n_pass": [24, 2, 2]}
{"time": "2021-02-24 01:02:49.213378", "score": "0.3477", "loss": "18.872", "code": "public final PathNode previousSnake() { if (isBootstrap()) return null; if ( prev != null); return this; }", "n_tokens": 44, "n_pass": [26, 3, 3]}
{"time": "2021-02-24 01:02:51.941514", "score": "0.2868", "loss": "19.5262", "code": "public final PathNode previousSnake() { if (isBootstrap()) return null; if ( prev != null)this; }", "n_tokens": 40, "n_pass": [45, 4, 4]}
{"time": "2021-02-24 01:02:54.667096", "score": "0.2868", "loss": "19.5262", "code": " PathNode previousSnake() { if (isBootstrap()) return null; if ( prev != null)this; }", "n_tokens": 37, "n_pass": [46, 5, 5]}
{"time": "2021-02-24 01:03:01.504357", "score": "0.2868", "loss": "19.5262", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if ( prev != null)this; }", "n_tokens": 36, "n_pass": [77, 7, 6]}
{"time": "2021-02-24 01:03:10.586562", "score": "0.3016", "loss": "19.4463", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if ( prev= null)this; }", "n_tokens": 34, "n_pass": [92, 10, 7]}
{"time": "2021-02-24 01:03:13.331676", "score": "0.2533", "loss": "19.4956", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if ( prevnull)this; }", "n_tokens": 32, "n_pass": [93, 11, 8]}
{"time": "2021-02-24 01:03:22.990951", "score": "0.2882", "loss": "19.5347", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if (null)this; }", "n_tokens": 30, "n_pass": [110, 14, 9]}
{"time": "2021-02-24 01:03:36.333878", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if (null); }", "n_tokens": 29, "n_pass": [157, 17, 10]}
{"time": "2021-02-24 01:03:39.122309", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake() { if (isBootstrap()) return null; if (null);}", "n_tokens": 28, "n_pass": [158, 18, 11]}
{"time": "2021-02-24 01:03:43.242214", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){ if (isBootstrap()) return null; if (null);}", "n_tokens": 27, "n_pass": [165, 19, 12]}
{"time": "2021-02-24 01:03:45.958935", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if (isBootstrap()) return null; if (null);}", "n_tokens": 26, "n_pass": [167, 20, 13]}
{"time": "2021-02-24 01:03:48.666889", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if(isBootstrap()) return null; if (null);}", "n_tokens": 25, "n_pass": [169, 21, 14]}
{"time": "2021-02-24 01:03:51.448147", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if(isBootstrap())return null; if (null);}", "n_tokens": 24, "n_pass": [175, 22, 15]}
{"time": "2021-02-24 01:04:02.441995", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if(isBootstrap())return null;if (null);}", "n_tokens": 23, "n_pass": [180, 26, 16]}
{"time": "2021-02-24 01:04:05.189470", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if(isBootstrap())return null; (null);}", "n_tokens": 22, "n_pass": [181, 27, 17]}
{"time": "2021-02-24 01:04:07.894652", "score": "0.2861", "loss": "19.5593", "code": "PathNode previousSnake(){if(isBootstrap())return null;(null);}", "n_tokens": 21, "n_pass": [182, 28, 18]}

Minimal simplified code:
PathNode previousSnake(){if(isBootstrap())return null;(null);}

