
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/baasbox__baasbox/app/com/baasbox/commands/CollectionsResource_checkPreconditions.java
method_name = checkPreconditions
method_body = private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, "non authorized"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, "cannot alter collections during transaction"); } }
predict, score, loss = nonTransactional, 0.99803227186203, 20.07390785217285

Trace of simplified code(s):
{"time": "2021-02-23 22:13:59.248293", "score": "0.998", "loss": "20.0739", "code": "private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot alter collections during transaction\"); } }", "n_tokens": 100, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 22:14:02.052345", "score": "0.9985", "loss": "21.3143", "code": "private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot alter collections during transaction\"); } }", "n_tokens": 88, "n_pass": [22, 2, 2]}
{"time": "2021-02-23 22:14:04.850147", "score": "0.9989", "loss": "20.8451", "code": "private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 81, "n_pass": [52, 3, 3]}
{"time": "2021-02-23 22:14:08.106890", "score": "0.9989", "loss": "20.8451", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 78, "n_pass": [94, 4, 4]}
{"time": "2021-02-23 22:14:10.912738", "score": "0.9994", "loss": "20.1336", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 75, "n_pass": [99, 5, 5]}
{"time": "2021-02-23 22:14:13.703457", "score": "0.9984", "loss": "19.0846", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { { throwCommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 72, "n_pass": [102, 6, 6]}
{"time": "2021-02-23 22:14:16.515451", "score": "0.9985", "loss": "19.157", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 69, "n_pass": [105, 7, 7]}
{"time": "2021-02-23 22:14:19.307219", "score": "0.9999", "loss": "22.1451", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 66, "n_pass": [114, 8, 8]}
{"time": "2021-02-23 22:14:25.808815", "score": "0.9999", "loss": "22.1451", "code": "void checkPreconditions(JsonNode command, boolean nonTransactional)  { { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 65, "n_pass": [186, 9, 9]}
{"time": "2021-02-23 22:14:29.480999", "score": "0.9999", "loss": "22.1451", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional)  { { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 64, "n_pass": [195, 10, 10]}
{"time": "2021-02-23 22:14:32.275593", "score": "0.9999", "loss": "22.1451", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional) { { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 63, "n_pass": [200, 11, 11]}
{"time": "2021-02-23 22:14:35.044933", "score": "0.9999", "loss": "22.1451", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){ { throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 62, "n_pass": [201, 12, 12]}
{"time": "2021-02-23 22:14:37.847221", "score": "0.9999", "loss": "22.1451", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 61, "n_pass": [203, 13, 13]}
{"time": "2021-02-23 22:14:40.628702", "score": "0.9999", "loss": "22.4218", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 59, "n_pass": [216, 14, 14]}
{"time": "2021-02-23 22:14:43.451706", "score": "0.9999", "loss": "22.605", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 57, "n_pass": [217, 15, 15]}
{"time": "2021-02-23 22:14:53.105802", "score": "0.9999", "loss": "22.605", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 56, "n_pass": [297, 16, 16]}
{"time": "2021-02-23 22:14:55.924962", "score": "0.9996", "loss": "21.409", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 55, "n_pass": [298, 17, 17]}
{"time": "2021-02-23 22:14:58.694588", "score": "0.9996", "loss": "21.409", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"cannot \"); } }", "n_tokens": 54, "n_pass": [303, 18, 18]}
{"time": "2021-02-23 22:15:01.481608", "score": "0.9998", "loss": "22.1652", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\" \"); } }", "n_tokens": 53, "n_pass": [305, 19, 19]}
{"time": "2021-02-23 22:15:04.340192", "score": "0.9998", "loss": "22.2412", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\"); } }", "n_tokens": 52, "n_pass": [306, 20, 20]}
{"time": "2021-02-23 22:15:07.148591", "score": "0.9998", "loss": "22.2412", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");} }", "n_tokens": 51, "n_pass": [310, 21, 21]}
{"time": "2021-02-23 22:15:09.908519", "score": "0.9998", "loss": "22.2412", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{ throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 50, "n_pass": [312, 22, 22]}
{"time": "2021-02-23 22:15:13.576221", "score": "0.9998", "loss": "22.2412", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{throwCommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 49, "n_pass": [328, 23, 23]}
{"time": "2021-02-23 22:15:16.370408", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command, \"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 48, "n_pass": [329, 24, 24]}
{"time": "2021-02-23 22:15:19.141635", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\"); } if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 47, "n_pass": [334, 25, 25]}
{"time": "2021-02-23 22:15:21.954095", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");} if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 46, "n_pass": [339, 26, 26]}
{"time": "2021-02-23 22:15:24.757477", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if (nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 45, "n_pass": [341, 27, 27]}
{"time": "2021-02-23 22:15:27.618704", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if(nonTransactional && DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 44, "n_pass": [343, 28, 28]}
{"time": "2021-02-23 22:15:30.426421", "score": "0.9984", "loss": "20.6809", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if(nonTransactional&& DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 43, "n_pass": [346, 29, 29]}
{"time": "2021-02-23 22:15:33.243264", "score": "0.7921", "loss": "17.7114", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if(nonTransactional& DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 42, "n_pass": [347, 30, 30]}
{"time": "2021-02-23 22:15:36.080646", "score": "0.7921", "loss": "17.7114", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if(nonTransactional&DbHelper) {CommandExecutionException(command,\"\");}}", "n_tokens": 41, "n_pass": [349, 31, 31]}
{"time": "2021-02-23 22:15:38.925761", "score": "0.7921", "loss": "17.7114", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,\"\");}if(nonTransactional&DbHelper){CommandExecutionException(command,\"\");}}", "n_tokens": 40, "n_pass": [352, 32, 32]}

Minimal simplified code:
void checkPreconditions(JsonNode command,boolean nonTransactional){{CommandExecutionException(command,"");}if(nonTransactional&DbHelper){CommandExecutionException(command,"");}}

