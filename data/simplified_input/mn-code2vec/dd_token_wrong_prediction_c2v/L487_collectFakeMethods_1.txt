
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jmockit__jmockit1/main/src/mockit/internal/faking/FakeMethodCollector_collectFakeMethods.java
method_name = collectFakeMethods
method_body = void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad.registerLoadedClass(fakeClass); fakeMethods.setFakeClassInternalName(JavaType.getInternalName(fakeClass)); Class<?> classToCollectFakesFrom = fakeClass; do { byte[] classfileBytes = ClassFile.readBytesFromClassFile(classToCollectFakesFrom); ClassMetadataReader cmr = new ClassMetadataReader(classfileBytes, ANNOTATIONS); List<MethodInfo> methods = cmr.getMethods(); addFakeMethods(methods); classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass(); collectingFromSuperClass = true; } while (classToCollectFakesFrom != MockUp.class); }
predict, score, loss = run, 0.8812969923019409, 15.896492958068848

Trace of simplified code(s):
{"time": "2021-02-23 02:18:47.541570", "score": "0.9368", "loss": "16.8874", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad.registerLoadedClass(fakeClass); fakeMethods.setFakeClassInternalName(JavaType.getInternalName(fakeClass)); Class<?> classToCollectFakesFrom = fakeClass; do { byte[] classfileBytes = ClassFile.readBytesFromClassFile(classToCollectFakesFrom); ClassMetadataReader cmr = new ClassMetadataReader(classfileBytes, ANNOTATIONS); List<MethodInfo> methods = cmr.getMethods(); addFakeMethods(methods); classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass(); collectingFromSuperClass = true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 144, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 02:18:50.440737", "score": "0.7818", "loss": "16.2462", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad.registerLoadedClass(fakeClass); fakeMethods.setFakeClassInternalName(JavaType.getInternalName(fakeClass)); Class<?> classToCollectFakesFrom = fakeClass; do { byte[] classfileBytes = ClassFile.readBytesFromClassFile(classToCollectFakesFrom); ClassMetadataReader  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass(); collectingFromSuperClass = true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 108, "n_pass": [10, 2, 2]}
{"time": "2021-02-23 02:18:53.164584", "score": "0.3338", "loss": "14.0496", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad; Class<?> classToCollectFakesFrom = fakeClass; do { byte[] classfileBytes = ClassFile.readBytesFromClassFile(classToCollectFakesFrom); ClassMetadataReader  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass(); collectingFromSuperClass = true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 90, "n_pass": [22, 3, 3]}
{"time": "2021-02-23 02:18:55.851416", "score": "0.5056", "loss": "13.9259", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad; Class<?> classToCollectFakesFrom = fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass(); collectingFromSuperClass = true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 72, "n_pass": [24, 4, 4]}
{"time": "2021-02-23 02:19:04.096106", "score": "0.4522", "loss": "13.8905", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { ClassLoad; Class<?> classToCollectFakesFrom = fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass();true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 67, "n_pass": [64, 7, 5]}
{"time": "2021-02-23 02:19:06.805303", "score": "0.4359", "loss": "14.0018", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) {Class<?> classToCollectFakesFrom = fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass();true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 63, "n_pass": [73, 8, 6]}
{"time": "2021-02-23 02:19:12.174079", "score": "0.6138", "loss": "15.3732", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) {Class<?> fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFrom.getSuperclass();true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 59, "n_pass": [75, 10, 7]}
{"time": "2021-02-23 02:19:14.873901", "score": "0.2511", "loss": "16.7359", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) {Class<?> fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFromtrue; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 54, "n_pass": [79, 11, 8]}
{"time": "2021-02-23 02:19:17.594784", "score": "0.2681", "loss": "15.0035", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { fakeClass; do {  classToCollectFakesFrom = classToCollectFakesFromtrue; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 50, "n_pass": [88, 12, 9]}
{"time": "2021-02-23 02:19:34.168403", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { fakeClass; do {  classToCollectFakesFrom =true; } while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 48, "n_pass": [128, 18, 10]}
{"time": "2021-02-23 02:19:54.013807", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { fakeClass; do {  classToCollectFakesFrom =true;} while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 47, "n_pass": [194, 23, 11]}
{"time": "2021-02-23 02:19:56.726651", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { fakeClass; do {  classToCollectFakesFrom =true;}while (classToCollectFakesFrom != MockUp.class); }", "n_tokens": 46, "n_pass": [196, 24, 12]}
{"time": "2021-02-23 02:19:59.406023", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?> fakeClass) { fakeClass; do {  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 45, "n_pass": [198, 25, 13]}
{"time": "2021-02-23 02:20:05.679342", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass) { fakeClass; do {  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 44, "n_pass": [217, 27, 14]}
{"time": "2021-02-23 02:20:08.364620", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){ fakeClass; do {  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 43, "n_pass": [220, 28, 15]}
{"time": "2021-02-23 02:20:11.072400", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass; do {  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 42, "n_pass": [222, 29, 16]}
{"time": "2021-02-23 02:20:16.683673", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do {  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 41, "n_pass": [225, 31, 17]}
{"time": "2021-02-23 02:20:22.039954", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{  classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 40, "n_pass": [227, 33, 18]}
{"time": "2021-02-23 02:20:24.721447", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{ classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 39, "n_pass": [229, 34, 19]}
{"time": "2021-02-23 02:20:27.435432", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom =true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 38, "n_pass": [230, 35, 20]}
{"time": "2021-02-23 02:20:30.134086", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom != MockUp.class); }", "n_tokens": 37, "n_pass": [232, 36, 21]}
{"time": "2021-02-23 02:20:46.013118", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom!= MockUp.class); }", "n_tokens": 36, "n_pass": [277, 41, 22]}
{"time": "2021-02-23 02:20:51.353626", "score": "0.2861", "loss": "15.0139", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom!=MockUp.class); }", "n_tokens": 35, "n_pass": [280, 43, 23]}
{"time": "2021-02-23 02:20:54.025287", "score": "0.2011", "loss": "14.2197", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom!=MockUpclass); }", "n_tokens": 34, "n_pass": [282, 44, 24]}
{"time": "2021-02-23 02:20:59.505031", "score": "0.2011", "loss": "14.2197", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom!=MockUpclass);}", "n_tokens": 33, "n_pass": [286, 46, 25]}
{"time": "2021-02-23 02:21:11.069130", "score": "0.1918", "loss": "14.184", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom=MockUpclass);}", "n_tokens": 32, "n_pass": [314, 50, 26]}
{"time": "2021-02-23 02:21:13.753778", "score": "0.2443", "loss": "14.2643", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFromMockUpclass);}", "n_tokens": 31, "n_pass": [315, 51, 27]}
{"time": "2021-02-23 02:21:16.609884", "score": "0.2443", "loss": "14.2643", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFromclass);}", "n_tokens": 30, "n_pass": [316, 52, 28]}
{"time": "2021-02-23 02:21:19.322991", "score": "0.2443", "loss": "14.2643", "code": "void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom);}", "n_tokens": 29, "n_pass": [317, 53, 29]}

Minimal simplified code:
void collectFakeMethods(@Nonnull Class<?>fakeClass){fakeClass;do{classToCollectFakesFrom=true;}while(classToCollectFakesFrom);}

