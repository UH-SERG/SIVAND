
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/test/java/edu/illinois/cs/cogcomp/core/algorithms/TreeGrepTest_testGetMatchPositions.java
method_name = testGetMatchPositions
method_body = @Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }
predict, score, loss = run, 0.9026681780815125, 19.643678665161133

Trace of simplified code(s):
{"time": "2021-02-23 16:30:56.876736", "score": "0.9027", "loss": "19.6437", "code": "@Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 75, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 16:31:08.012566", "score": "0.9715", "loss": "22.2836", "code": "@Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(treetrue, result); } }", "n_tokens": 70, "n_pass": [57, 5, 2]}
{"time": "2021-02-23 16:31:13.335939", "score": "0.581", "loss": "18.6495", "code": "@Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = matcher.matches(treetrue, result); } }", "n_tokens": 65, "n_pass": [67, 7, 3]}
{"time": "2021-02-23 16:31:21.299817", "score": "0.7105", "loss": "17.7203", "code": "@Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = matcher.matches(treetrue); } }", "n_tokens": 62, "n_pass": [121, 10, 4]}
{"time": "2021-02-23 16:31:26.606612", "score": "0.7105", "loss": "17.7203", "code": "@Test void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = matcher.matches(treetrue); } }", "n_tokens": 60, "n_pass": [125, 12, 5]}
{"time": "2021-02-23 16:31:29.696846", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 57, "n_pass": [147, 13, 6]}
{"time": "2021-02-23 16:31:42.489898", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){ for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 56, "n_pass": [237, 15, 7]}
{"time": "2021-02-23 16:31:45.130384", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 55, "n_pass": [238, 16, 8]}
{"time": "2021-02-23 16:31:47.777339", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 54, "n_pass": [240, 17, 9]}
{"time": "2021-02-23 16:31:50.420413", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 53, "n_pass": [246, 18, 10]}
{"time": "2021-02-23 16:31:53.093244", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p: foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 52, "n_pass": [248, 19, 11]}
{"time": "2021-02-23 16:31:55.740292", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns) { matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 51, "n_pass": [250, 20, 12]}
{"time": "2021-02-23 16:31:58.400102", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){ matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 50, "n_pass": [253, 21, 13]}
{"time": "2021-02-23 16:32:01.062894", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher = new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 49, "n_pass": [255, 22, 14]}
{"time": "2021-02-23 16:32:03.730166", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher= new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 48, "n_pass": [257, 23, 15]}
{"time": "2021-02-23 16:32:06.386023", "score": "0.9361", "loss": "19.1959", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>(p); boolean result = (treetrue); } }", "n_tokens": 47, "n_pass": [259, 24, 16]}
{"time": "2021-02-23 16:32:09.041025", "score": "0.9689", "loss": "20.9386", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>(); boolean result = (treetrue); } }", "n_tokens": 46, "n_pass": [266, 25, 17]}
{"time": "2021-02-23 16:32:11.675474", "score": "0.9689", "loss": "20.9386", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result = (treetrue); } }", "n_tokens": 45, "n_pass": [269, 26, 18]}
{"time": "2021-02-23 16:32:20.530425", "score": "0.9689", "loss": "20.9386", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result =(treetrue); } }", "n_tokens": 44, "n_pass": [322, 28, 19]}
{"time": "2021-02-23 16:32:23.163662", "score": "0.9653", "loss": "20.7857", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result =(true); } }", "n_tokens": 43, "n_pass": [323, 29, 20]}
{"time": "2021-02-23 16:32:25.808882", "score": "0.9653", "loss": "20.7857", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result =(true);} }", "n_tokens": 42, "n_pass": [327, 30, 21]}
{"time": "2021-02-23 16:32:28.478186", "score": "0.9653", "loss": "20.7857", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result =(true);}}", "n_tokens": 41, "n_pass": [329, 31, 22]}
{"time": "2021-02-23 16:32:37.685836", "score": "0.9653", "loss": "20.7857", "code": "@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result=(true);}}", "n_tokens": 40, "n_pass": [364, 34, 23]}

Minimal simplified code:
@Test void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();boolean result=(true);}}

