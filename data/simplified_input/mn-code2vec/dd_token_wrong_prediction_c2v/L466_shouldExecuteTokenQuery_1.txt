
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/sm/datalayer/impl/tasks/QueryTaskTest_shouldExecuteTokenQuery.java
method_name = shouldExecuteTokenQuery
method_body = @Test public void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection, mockAdapter); verify(mockResultHandler).processResults(any(ArrayList.class)); }
predict, score, loss = test, 0.8273380398750305, 19.524877548217773

Trace of simplified code(s):
{"time": "2021-02-23 05:42:14.851846", "score": "0.8273", "loss": "19.5249", "code": "@Test public void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection, mockAdapter); verify(mockResultHandler).processResults(any(ArrayList.class)); }", "n_tokens": 71, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 05:42:17.567426", "score": "0.7765", "loss": "18.4121", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection, mockAdapter); verify(mockResultHandler).processResults(any(ArrayList.class)); }", "n_tokens": 67, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 05:42:20.280207", "score": "0.3472", "loss": "16.7615", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection, mockAdaptermockResultHandler).processResults(any(ArrayList.class)); }", "n_tokens": 62, "n_pass": [55, 3, 3]}
{"time": "2021-02-23 05:42:22.972441", "score": "0.5397", "loss": "17.5494", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection, mockAdapterany(ArrayList.class)); }", "n_tokens": 57, "n_pass": [56, 4, 4]}
{"time": "2021-02-23 05:42:25.683984", "score": "0.5528", "loss": "17.618", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task.execute(mockConnection,(ArrayList.class)); }", "n_tokens": 54, "n_pass": [96, 5, 5]}
{"time": "2021-02-23 05:42:36.851842", "score": "0.3805", "loss": "16.5903", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter.query(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task(mockConnection,(ArrayList.class)); }", "n_tokens": 52, "n_pass": [120, 9, 6]}
{"time": "2021-02-23 05:42:42.661757", "score": "0.431", "loss": "16.4285", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter(mockConnection, mockTokenFilter)).willReturn(new ArrayList<Token>()); task(mockConnection,(ArrayList.class)); }", "n_tokens": 50, "n_pass": [133, 11, 7]}
{"time": "2021-02-23 05:42:55.066666", "score": "0.431", "loss": "16.4285", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<Token>()); task(mockConnection,(ArrayList.class)); }", "n_tokens": 49, "n_pass": [206, 14, 8]}
{"time": "2021-02-23 05:42:57.758901", "score": "0.3838", "loss": "16.4425", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>()); task(mockConnection,(ArrayList.class)); }", "n_tokens": 48, "n_pass": [217, 15, 9]}
{"time": "2021-02-23 05:43:00.461898", "score": "0.3838", "loss": "16.4425", "code": " void shouldExecuteTokenQuery() throws Exception { given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList.class)); }", "n_tokens": 47, "n_pass": [223, 16, 10]}
{"time": "2021-02-23 05:43:05.832402", "score": "0.3838", "loss": "16.4425", "code": "void shouldExecuteTokenQuery() throws Exception { given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList.class)); }", "n_tokens": 46, "n_pass": [233, 18, 11]}
{"time": "2021-02-23 05:43:09.351525", "score": "0.3838", "loss": "16.4425", "code": "void shouldExecuteTokenQuery()throws Exception { given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList.class)); }", "n_tokens": 45, "n_pass": [239, 19, 12]}
{"time": "2021-02-23 05:43:12.049747", "score": "0.3838", "loss": "16.4425", "code": "void shouldExecuteTokenQuery()throws Exception{ given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList.class)); }", "n_tokens": 44, "n_pass": [243, 20, 13]}
{"time": "2021-02-23 05:43:14.725117", "score": "0.3838", "loss": "16.4425", "code": "void shouldExecuteTokenQuery()throws Exception{given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList.class)); }", "n_tokens": 43, "n_pass": [245, 21, 14]}
{"time": "2021-02-23 05:43:27.105394", "score": "0.2751", "loss": "16.0197", "code": "void shouldExecuteTokenQuery()throws Exception{given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayListclass)); }", "n_tokens": 42, "n_pass": [294, 25, 15]}
{"time": "2021-02-23 05:43:29.792306", "score": "0.3785", "loss": "16.4179", "code": "void shouldExecuteTokenQuery()throws Exception{given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList)); }", "n_tokens": 41, "n_pass": [295, 26, 16]}
{"time": "2021-02-23 05:43:32.503294", "score": "0.3785", "loss": "16.4179", "code": "void shouldExecuteTokenQuery()throws Exception{given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList));}", "n_tokens": 40, "n_pass": [299, 27, 17]}

Minimal simplified code:
void shouldExecuteTokenQuery()throws Exception{given(mockAdapter(mockConnection,mockTokenFilter)).willReturn(new ArrayList<>());task(mockConnection,(ArrayList));}

