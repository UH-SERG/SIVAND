
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/dataless-classifier/src/main/java/edu/illinois/cs/cogcomp/datalessclassification/hierarchy/UnorderedTree_getOpposite.java
method_name = getOpposite
method_body = @Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return null; Pair<V> endpoints = edge_vpairs.get(edge); V v1 = endpoints.getFirst(); V v2 = endpoints.getSecond(); return v1.equals(vertex) ? v2 : v1; }
predict, score, loss = addEdge, 0.9403808116912842, 12.407940864562988

Trace of simplified code(s):
{"time": "2021-02-24 14:44:04.992527", "score": "0.9201", "loss": "12.1426", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return null; Pair<V> endpoints = edge_vpairs.get(edge); V v1 = endpoints.getFirst(); V v2 = endpoints.getSecond(); return v1.equals(vertex) ? v2 : v1; }", "n_tokens": 114, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 14:44:07.631389", "score": "0.899", "loss": "12.8635", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return null; Pair<V> endpoints = edge_endpoints.getSecond(); return v1.equals(vertex) ? v2 : v1; }", "n_tokens": 85, "n_pass": [10, 2, 2]}
{"time": "2021-02-24 14:44:10.259410", "score": "0.8468", "loss": "13.8989", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpoints.getSecond(); return v1.equals(vertex) ? v2 : v1; }", "n_tokens": 71, "n_pass": [25, 3, 3]}
{"time": "2021-02-24 14:44:13.321260", "score": "0.5208", "loss": "11.1042", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpoints; return v1.equals(vertex) ? v2 : v1; }", "n_tokens": 67, "n_pass": [71, 4, 4]}
{"time": "2021-02-24 14:44:15.999020", "score": "0.9494", "loss": "15.1671", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpointsv1.equals(vertex) ? v2 : v1; }", "n_tokens": 63, "n_pass": [72, 5, 5]}
{"time": "2021-02-24 14:44:18.614945", "score": "0.9442", "loss": "13.9271", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpoints(vertex) ? v2 : v1; }", "n_tokens": 59, "n_pass": [73, 6, 6]}
{"time": "2021-02-24 14:44:21.226482", "score": "0.9765", "loss": "16.0594", "code": "@Override public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpoints? v2 : v1; }", "n_tokens": 55, "n_pass": [74, 7, 7]}
{"time": "2021-02-24 14:44:23.840167", "score": "0.9715", "loss": "16.478", "code": "public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) || !containsEdge(edge)) return endpoints? v2 : v1; }", "n_tokens": 52, "n_pass": [78, 8, 8]}
{"time": "2021-02-24 14:44:26.838887", "score": "0.5452", "loss": "10.6198", "code": "public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) |(edge)) return endpoints? v2 : v1; }", "n_tokens": 48, "n_pass": [88, 9, 9]}
{"time": "2021-02-24 14:44:31.358193", "score": "0.3232", "loss": "10.1717", "code": "public V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 46, "n_pass": [138, 10, 10]}
{"time": "2021-02-24 14:44:33.978976", "score": "0.3232", "loss": "10.1717", "code": " V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 45, "n_pass": [141, 11, 11]}
{"time": "2021-02-24 14:44:36.616459", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex, E edge) { if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 44, "n_pass": [142, 12, 12]}
{"time": "2021-02-24 14:44:45.068755", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge) { if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 43, "n_pass": [208, 13, 13]}
{"time": "2021-02-24 14:44:47.674145", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){ if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 42, "n_pass": [212, 14, 14]}
{"time": "2021-02-24 14:44:50.280827", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if (!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 41, "n_pass": [214, 15, 15]}
{"time": "2021-02-24 14:44:52.901538", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(!containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 40, "n_pass": [216, 16, 16]}
{"time": "2021-02-24 14:44:55.505078", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex) |(edge)) return endpoints? v2 :1; }", "n_tokens": 39, "n_pass": [218, 17, 17]}
{"time": "2021-02-24 14:45:03.322635", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge)) return endpoints? v2 :1; }", "n_tokens": 38, "n_pass": [223, 20, 18]}
{"time": "2021-02-24 14:45:05.924458", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints? v2 :1; }", "n_tokens": 37, "n_pass": [229, 21, 19]}
{"time": "2021-02-24 14:45:09.304189", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints?v2 :1; }", "n_tokens": 36, "n_pass": [234, 22, 20]}
{"time": "2021-02-24 14:45:14.557779", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints?v :1; }", "n_tokens": 35, "n_pass": [236, 24, 21]}
{"time": "2021-02-24 14:45:17.183157", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints?v:1; }", "n_tokens": 34, "n_pass": [237, 25, 22]}
{"time": "2021-02-24 14:45:19.809509", "score": "0.3232", "loss": "10.1717", "code": "V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints?v:1;}", "n_tokens": 33, "n_pass": [241, 26, 23]}

Minimal simplified code:
V getOpposite(V vertex,E edge){if(containsVertex(vertex)|(edge))return endpoints?v:1;}

