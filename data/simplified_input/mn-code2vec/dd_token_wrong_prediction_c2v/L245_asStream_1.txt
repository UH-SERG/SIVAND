
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/log/SnapshotterImpl_asStream.java
method_name = asStream
method_body = @Timed("snapshot_apply") @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info("Restoring snapshot."); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }
predict, score, loss = snapshot, 0.9339113831520081, 13.985929489135742

Trace of simplified code(s):
{"time": "2021-02-24 03:47:26.814078", "score": "0.9339", "loss": "13.9859", "code": "@Timed(\"snapshot_apply\") @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\"); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 73, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:47:29.498404", "score": "0.9766", "loss": "16.0331", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\"); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 64, "n_pass": [20, 2, 2]}
{"time": "2021-02-24 03:47:32.139877", "score": "0.9928", "loss": "18.6986", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 55, "n_pass": [24, 3, 3]}
{"time": "2021-02-24 03:47:34.785882", "score": "0.9919", "loss": "18.5445", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 50, "n_pass": [44, 4, 4]}
{"time": "2021-02-24 03:47:37.401255", "score": "0.9895", "loss": "17.8291", "code": "public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 46, "n_pass": [47, 5, 5]}
{"time": "2021-02-24 03:47:40.016864", "score": "0.975", "loss": "17.9967", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 41, "n_pass": [52, 6, 6]}
{"time": "2021-02-24 03:47:42.632867", "score": "0.9138", "loss": "15.7079", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 39, "n_pass": [81, 7, 7]}
{"time": "2021-02-24 03:47:45.310193", "score": "0.9949", "loss": "21.1727", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG(\"snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 37, "n_pass": [83, 8, 8]}
{"time": "2021-02-24 03:47:47.921191", "score": "0.9714", "loss": "17.0289", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG(\"\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 35, "n_pass": [84, 9, 9]}
{"time": "2021-02-24 03:47:50.521570", "score": "0.9714", "loss": "17.0289", "code": "Stream<Op> asStream(Snapshot snapshot) {  LOG(\"\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 33, "n_pass": [90, 10, 10]}
{"time": "2021-02-24 03:47:53.137704", "score": "0.9678", "loss": "18.258", "code": "Stream<Op> asStream(Snapshot snapshot) { (\"\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 31, "n_pass": [98, 11, 11]}
{"time": "2021-02-24 03:47:57.179923", "score": "0.9678", "loss": "18.6627", "code": "Stream<Op> asStream(Snapshot snapshot) { (\"\").flatMap(streamFrom(snapshot)); }", "n_tokens": 29, "n_pass": [145, 12, 12]}
{"time": "2021-02-24 03:48:00.181000", "score": "0.9678", "loss": "18.6627", "code": "Stream<Op>asStream(Snapshot snapshot) { (\"\").flatMap(streamFrom(snapshot)); }", "n_tokens": 28, "n_pass": [154, 13, 13]}
{"time": "2021-02-24 03:48:02.785790", "score": "0.9678", "loss": "18.6627", "code": "Stream<Op>asStream(Snapshot snapshot){ (\"\").flatMap(streamFrom(snapshot)); }", "n_tokens": 27, "n_pass": [161, 14, 14]}
{"time": "2021-02-24 03:48:05.392049", "score": "0.9678", "loss": "18.6627", "code": "Stream<Op>asStream(Snapshot snapshot){(\"\").flatMap(streamFrom(snapshot)); }", "n_tokens": 26, "n_pass": [163, 15, 15]}
{"time": "2021-02-24 03:48:09.161767", "score": "0.9949", "loss": "18.9931", "code": "Stream<Op>asStream(Snapshot snapshot){(\"\").flatMap((snapshot)); }", "n_tokens": 25, "n_pass": [194, 16, 16]}
{"time": "2021-02-24 03:48:11.769800", "score": "0.9949", "loss": "18.9931", "code": "Stream<Op>asStream(Snapshot snapshot){(\"\").flatMap((snapshot));}", "n_tokens": 24, "n_pass": [199, 17, 17]}

Minimal simplified code:
Stream<Op>asStream(Snapshot snapshot){("").flatMap((snapshot));}

