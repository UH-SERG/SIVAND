
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__apex-core/engine/src/test/java/com/datatorrent/stram/engine/RecoverableInputOperator_beforeCheckpoint.java
method_name = beforeCheckpoint
method_body = @Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId == 0) { checkpointedWindowId = windowId; } logger.debug("{}, windowId={}", this, Codec.getStringWindowId(windowId)); }
predict, score, loss = beginWindow, 0.4560132920742035, 2.6605305671691895

Trace of simplified code(s):
{"time": "2021-02-23 19:45:01.751702", "score": "0.456", "loss": "2.6605", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId == 0) { checkpointedWindowId = windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 67, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:45:07.059619", "score": "0.5469", "loss": "2.8362", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { checkpointedWindowId = windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 63, "n_pass": [49, 3, 2]}
{"time": "2021-02-23 19:45:09.707826", "score": "0.5227", "loss": "2.811", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 59, "n_pass": [51, 4, 3]}
{"time": "2021-02-23 19:45:12.336455", "score": "0.5613", "loss": "2.7727", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 55, "n_pass": [52, 5, 4]}
{"time": "2021-02-23 19:45:14.972684", "score": "0.8283", "loss": "2.5501", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} logger.debug(\"{={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 51, "n_pass": [55, 6, 5]}
{"time": "2021-02-23 19:45:17.618556", "score": "0.5377", "loss": "2.9981", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} logger.debug(\"{={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 47, "n_pass": [60, 7, 6]}
{"time": "2021-02-23 19:45:20.675265", "score": "0.4325", "loss": "2.3987", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 45, "n_pass": [105, 8, 7]}
{"time": "2021-02-23 19:45:23.316605", "score": "0.6266", "loss": "2.4619", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 43, "n_pass": [108, 9, 8]}
{"time": "2021-02-23 19:45:25.955698", "score": "0.7007", "loss": "1.9775", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\",  Codec.getStringWindowId(windowId)); }", "n_tokens": 41, "n_pass": [111, 10, 9]}
{"time": "2021-02-23 19:45:32.885729", "score": "0.7007", "loss": "1.9775", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 40, "n_pass": [169, 11, 10]}
{"time": "2021-02-23 19:45:35.543316", "score": "0.6757", "loss": "2.3391", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\", CodecgetStringWindowId(windowId)); }", "n_tokens": 39, "n_pass": [170, 12, 11]}
{"time": "2021-02-23 19:45:38.183795", "score": "0.6632", "loss": "2.104", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 38, "n_pass": [171, 13, 12]}
{"time": "2021-02-23 19:45:40.824935", "score": "0.6632", "loss": "2.104", "code": "void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 37, "n_pass": [176, 14, 13]}
{"time": "2021-02-23 19:45:44.294248", "score": "0.6632", "loss": "2.104", "code": "void beforeCheckpoint(long windowId){ if (checkpointedWindowId0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 36, "n_pass": [185, 15, 14]}
{"time": "2021-02-23 19:45:46.938851", "score": "0.6632", "loss": "2.104", "code": "void beforeCheckpoint(long windowId){if (checkpointedWindowId0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 35, "n_pass": [187, 16, 15]}
{"time": "2021-02-23 19:45:49.576236", "score": "0.6632", "loss": "2.104", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 34, "n_pass": [189, 17, 16]}
{"time": "2021-02-23 19:45:52.251142", "score": "0.6754", "loss": "2.0586", "code": "void beforeCheckpoint(long windowId){if(0) {} debug(\"{}\", Codec(windowId)); }", "n_tokens": 33, "n_pass": [191, 18, 17]}
{"time": "2021-02-23 19:45:54.912040", "score": "0.6754", "loss": "2.0586", "code": "void beforeCheckpoint(long windowId){if(0){} debug(\"{}\", Codec(windowId)); }", "n_tokens": 32, "n_pass": [194, 19, 18]}
{"time": "2021-02-23 19:45:57.549705", "score": "0.6754", "loss": "2.0586", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"{}\", Codec(windowId)); }", "n_tokens": 31, "n_pass": [197, 20, 19]}
{"time": "2021-02-23 19:46:00.198466", "score": "0.7763", "loss": "3.9384", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"}\", Codec(windowId)); }", "n_tokens": 30, "n_pass": [201, 21, 20]}
{"time": "2021-02-23 19:46:02.861375", "score": "0.4839", "loss": "1.8876", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"\", Codec(windowId)); }", "n_tokens": 29, "n_pass": [202, 22, 21]}
{"time": "2021-02-23 19:46:05.515171", "score": "0.4839", "loss": "1.8876", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"\",Codec(windowId)); }", "n_tokens": 28, "n_pass": [205, 23, 22]}
{"time": "2021-02-23 19:46:08.164027", "score": "0.4173", "loss": "2.4771", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"\",(windowId)); }", "n_tokens": 27, "n_pass": [206, 24, 23]}
{"time": "2021-02-23 19:46:12.404822", "score": "0.4173", "loss": "2.4771", "code": "void beforeCheckpoint(long windowId){if(0){}debug(\"\",(windowId));}", "n_tokens": 26, "n_pass": [240, 25, 24]}

Minimal simplified code:
void beforeCheckpoint(long windowId){if(0){}debug("",(windowId));}

