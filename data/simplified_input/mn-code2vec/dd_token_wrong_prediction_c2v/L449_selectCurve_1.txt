
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer_selectCurve.java
method_name = selectCurve
method_body = @Override protected int selectCurve(int minimumCurveBits) { if (clientSupportedGroups == null) { return selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFips, minimumCurveBits, clientSupportedGroups); }
predict, score, loss = getMode, 0.18105874955654144, 15.788052558898926

Trace of simplified code(s):
{"time": "2021-02-24 06:37:41.456296", "score": "0.1811", "loss": "15.7881", "code": "@Override protected int selectCurve(int minimumCurveBits) { if (clientSupportedGroups == null) { return selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFips, minimumCurveBits, clientSupportedGroups); }", "n_tokens": 73, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 06:37:44.167777", "score": "0.1903", "loss": "15.9385", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroups == null) { return selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFips, minimumCurveBits, clientSupportedGroups); }", "n_tokens": 69, "n_pass": [44, 2, 2]}
{"time": "2021-02-24 06:37:46.850483", "score": "0.1817", "loss": "15.8171", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) { return selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFips, minimumCurveBits, clientSupportedGroups); }", "n_tokens": 65, "n_pass": [49, 3, 3]}
{"time": "2021-02-24 06:37:49.542990", "score": "0.2707", "loss": "15.0644", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) { return selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFipsclientSupportedGroups); }", "n_tokens": 60, "n_pass": [58, 4, 4]}
{"time": "2021-02-24 06:37:52.586498", "score": "0.2492", "loss": "15.1295", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) { selectDefaultCurve(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFipsclientSupportedGroups); }", "n_tokens": 58, "n_pass": [110, 5, 5]}
{"time": "2021-02-24 06:37:55.288717", "score": "0.2703", "loss": "15.1013", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips = manager.getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFipsclientSupportedGroups); }", "n_tokens": 56, "n_pass": [111, 6, 6]}
{"time": "2021-02-24 06:38:00.659371", "score": "0.2719", "loss": "15.072", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return SupportedGroups.getServerSelectedCurve(isFipsclientSupportedGroups); }", "n_tokens": 53, "n_pass": [118, 8, 7]}
{"time": "2021-02-24 06:38:13.559504", "score": "0.3365", "loss": "14.8689", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(isFipsclientSupportedGroups); }", "n_tokens": 51, "n_pass": [197, 11, 8]}
{"time": "2021-02-24 06:38:16.158469", "score": "0.3253", "loss": "15.0454", "code": " int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 49, "n_pass": [199, 12, 9]}
{"time": "2021-02-24 06:38:18.763161", "score": "0.3253", "loss": "15.0454", "code": "int selectCurve(int minimumCurveBits) { if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 48, "n_pass": [202, 13, 10]}
{"time": "2021-02-24 06:38:22.155148", "score": "0.3253", "loss": "15.0454", "code": "int selectCurve(int minimumCurveBits){ if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 47, "n_pass": [211, 14, 11]}
{"time": "2021-02-24 06:38:24.770397", "score": "0.3253", "loss": "15.0454", "code": "int selectCurve(int minimumCurveBits){if (clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 46, "n_pass": [213, 15, 12]}
{"time": "2021-02-24 06:38:27.396173", "score": "0.3253", "loss": "15.0454", "code": "int selectCurve(int minimumCurveBits){if(clientSupportedGroupsnull) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 45, "n_pass": [215, 16, 13]}
{"time": "2021-02-24 06:38:30.052333", "score": "0.2871", "loss": "14.697", "code": "int selectCurve(int minimumCurveBits){if(null) {(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 44, "n_pass": [217, 17, 14]}
{"time": "2021-02-24 06:38:32.657163", "score": "0.2871", "loss": "14.697", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits); } boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 43, "n_pass": [220, 18, 15]}
{"time": "2021-02-24 06:38:35.262283", "score": "0.2871", "loss": "14.697", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);} boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 42, "n_pass": [226, 19, 16]}
{"time": "2021-02-24 06:38:37.865259", "score": "0.2871", "loss": "14.697", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips =getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 41, "n_pass": [228, 20, 17]}
{"time": "2021-02-24 06:38:45.722190", "score": "0.2871", "loss": "14.697", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips=getContext().isFips(); return getServerSelectedCurve(); }", "n_tokens": 40, "n_pass": [232, 23, 18]}
{"time": "2021-02-24 06:38:48.336572", "score": "0.1803", "loss": "14.6493", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips=getContext().isFips(); getServerSelectedCurve(); }", "n_tokens": 38, "n_pass": [242, 24, 19]}
{"time": "2021-02-24 06:38:58.375520", "score": "0.1803", "loss": "14.6493", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips=getContext().isFips(); getServerSelectedCurve();}", "n_tokens": 37, "n_pass": [287, 27, 20]}
{"time": "2021-02-24 06:39:06.984520", "score": "0.1803", "loss": "14.6493", "code": "int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips=getContext().isFips();getServerSelectedCurve();}", "n_tokens": 36, "n_pass": [319, 30, 21]}

Minimal simplified code:
int selectCurve(int minimumCurveBits){if(null){(minimumCurveBits);}boolean isFips=getContext().isFips();getServerSelectedCurve();}

