
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/pkix/src/test/java/org/bouncycastle/cert/test/BcCertTest_checkKeyUsage.java
method_name = checkKeyUsage
method_body = public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail("error generating cert - key usage wrong."); } }
predict, score, loss = deserialize, 0.2368423193693161, 18.9990234375

Trace of simplified code(s):
{"time": "2021-02-24 03:36:23.047863", "score": "0.2368", "loss": "18.999", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert - key usage wrong.\"); } }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:36:28.310208", "score": "0.3468", "loss": "21.8142", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert - key usage wrong.\"); } }", "n_tokens": 108, "n_pass": [52, 3, 2]}
{"time": "2021-02-24 03:36:30.918436", "score": "0.3468", "loss": "21.8142", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 100, "n_pass": [57, 4, 3]}
{"time": "2021-02-24 03:36:47.046068", "score": "0.3933", "loss": "22.221", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())[0] & 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 96, "n_pass": [120, 10, 4]}
{"time": "2021-02-24 03:36:49.666431", "score": "0.4054", "loss": "20.6564", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 92, "n_pass": [121, 11, 5]}
{"time": "2021-02-24 03:36:52.286623", "score": "0.366", "loss": "20.171", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error generating cert.\"); } }", "n_tokens": 88, "n_pass": [124, 12, 6]}
{"time": "2021-02-24 03:36:54.906504", "score": "0.2854", "loss": "19.695", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 84, "n_pass": [127, 13, 7]}
{"time": "2021-02-24 03:37:10.292969", "score": "0.2854", "loss": "19.695", "code": " void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 83, "n_pass": [204, 18, 8]}
{"time": "2021-02-24 03:37:12.922437", "score": "0.2854", "loss": "19.695", "code": "void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 82, "n_pass": [205, 19, 9]}
{"time": "2021-02-24 03:37:15.923727", "score": "0.2854", "loss": "19.695", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 81, "n_pass": [213, 20, 10]}
{"time": "2021-02-24 03:37:21.155744", "score": "0.2854", "loss": "19.695", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 79, "n_pass": [222, 22, 11]}
{"time": "2021-02-24 03:37:31.631065", "score": "0.2854", "loss": "19.695", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 0x01) ) { fail(\"error.\"); } }", "n_tokens": 77, "n_pass": [228, 26, 12]}
{"time": "2021-02-24 03:37:39.484314", "score": "0.2893", "loss": "19.6562", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getParsedValue())& 01) ) { fail(\"error.\"); } }", "n_tokens": 75, "n_pass": [240, 29, 13]}
{"time": "2021-02-24 03:38:01.337139", "score": "0.2387", "loss": "19.8402", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())& 01) ) { fail(\"error.\"); } }", "n_tokens": 73, "n_pass": [279, 37, 14]}
{"time": "2021-02-24 03:38:29.854421", "score": "0.2387", "loss": "19.8402", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&01) ) { fail(\"error.\"); } }", "n_tokens": 72, "n_pass": [388, 45, 15]}
{"time": "2021-02-24 03:38:32.488943", "score": "0.2344", "loss": "19.789", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1) ) { fail(\"error.\"); } }", "n_tokens": 71, "n_pass": [389, 46, 16]}
{"time": "2021-02-24 03:38:35.096653", "score": "0.2344", "loss": "19.789", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)) { fail(\"error.\"); } }", "n_tokens": 70, "n_pass": [392, 47, 17]}
{"time": "2021-02-24 03:38:37.728194", "score": "0.2344", "loss": "19.789", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){ fail(\"error.\"); } }", "n_tokens": 69, "n_pass": [394, 48, 18]}
{"time": "2021-02-24 03:38:40.355806", "score": "0.2344", "loss": "19.789", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){fail(\"error.\"); } }", "n_tokens": 68, "n_pass": [396, 49, 19]}
{"time": "2021-02-24 03:38:42.987864", "score": "0.2308", "loss": "21.1751", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"error.\"); } }", "n_tokens": 67, "n_pass": [397, 50, 20]}
{"time": "2021-02-24 03:38:45.631921", "score": "0.235", "loss": "21.1266", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\".\"); } }", "n_tokens": 66, "n_pass": [400, 51, 21]}
{"time": "2021-02-24 03:38:48.249475", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\"); } }", "n_tokens": 65, "n_pass": [401, 52, 22]}
{"time": "2021-02-24 03:38:50.858363", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");} }", "n_tokens": 64, "n_pass": [405, 53, 23]}
{"time": "2021-02-24 03:38:53.494570", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[] bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 63, "n_pass": [407, 54, 24]}
{"time": "2021-02-24 03:38:56.888819", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[]bytes) throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 62, "n_pass": [420, 55, 25]}
{"time": "2021-02-24 03:38:59.513076", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException { X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 61, "n_pass": [423, 56, 26]}
{"time": "2021-02-24 03:39:02.131993", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{ X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 60, "n_pass": [427, 57, 27]}
{"time": "2021-02-24 03:39:04.740113", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X5CertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 59, "n_pass": [429, 58, 28]}
{"time": "2021-02-24 03:39:07.355712", "score": "0.2417", "loss": "21.2517", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{XCertificateHolder certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 58, "n_pass": [431, 59, 29]}
{"time": "2021-02-24 03:39:09.982566", "score": "0.2677", "loss": "20.8198", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld = new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 57, "n_pass": [432, 60, 30]}
{"time": "2021-02-24 03:39:17.809564", "score": "0.2677", "loss": "20.8198", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld= new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 56, "n_pass": [435, 63, 31]}
{"time": "2021-02-24 03:39:20.468597", "score": "0.2677", "loss": "20.8198", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new X5CertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 55, "n_pass": [437, 64, 32]}
{"time": "2021-02-24 03:39:28.302211", "score": "0.2677", "loss": "20.8198", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new XCertificateHolder(bytes); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 54, "n_pass": [441, 67, 33]}
{"time": "2021-02-24 03:39:33.544789", "score": "0.2148", "loss": "20.6254", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new XCertificateHolder(); if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 53, "n_pass": [444, 69, 34]}
{"time": "2021-02-24 03:39:36.163516", "score": "0.2148", "loss": "20.6254", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new XCertificateHolder();if ((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 52, "n_pass": [447, 70, 35]}
{"time": "2021-02-24 03:39:38.776334", "score": "0.2148", "loss": "20.6254", "code": "void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new XCertificateHolder();if((DERBitString.getInstance(getParsedValue())&1)){(\"\");}}", "n_tokens": 51, "n_pass": [449, 71, 36]}

Minimal simplified code:
void checkKeyUsage(int id,byte[]bytes)throws IOException{X certHld=new XCertificateHolder();if((DERBitString.getInstance(getParsedValue())&1)){("");}}

