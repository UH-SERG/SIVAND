
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-tools/build-helper-plugin/src/main/java/org/forgerock/maven/plugins/inject/content/InjectContent_getContentsMap.java
method_name = getContentsMap
method_body = private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(".*\\Q${inject.content." + content.getId() + "}\\E.*"), content.getFile()); } return contentsMap; }
predict, score, loss = fromCollection, 0.3943651020526886, 19.041688919067383

Trace of simplified code(s):
{"time": "2021-02-24 02:46:28.452752", "score": "0.3944", "loss": "19.0417", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*\\\\Q${inject.content.\" + content.getId() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 120, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:46:31.166464", "score": "0.3944", "loss": "19.0417", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content.getId() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 112, "n_pass": [54, 2, 2]}
{"time": "2021-02-24 02:46:35.403527", "score": "0.4033", "loss": "19.1008", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 110, "n_pass": [193, 3, 3]}
{"time": "2021-02-24 02:46:38.070269", "score": "0.4005", "loss": "19.0025", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 108, "n_pass": [194, 4, 4]}
{"time": "2021-02-24 02:46:40.797313", "score": "0.4005", "loss": "19.0025", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), content.getFile()); } return contentsMap; }", "n_tokens": 106, "n_pass": [199, 5, 5]}
{"time": "2021-02-24 02:46:43.441722", "score": "0.4003", "loss": "19.0872", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 104, "n_pass": [202, 6, 6]}
{"time": "2021-02-24 02:46:49.180466", "score": "0.4003", "loss": "19.0872", "code": " Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 103, "n_pass": [210, 8, 7]}
{"time": "2021-02-24 02:46:51.871656", "score": "0.4003", "loss": "19.0872", "code": "Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 102, "n_pass": [211, 9, 8]}
{"time": "2021-02-24 02:46:54.917220", "score": "0.4003", "loss": "19.0872", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 101, "n_pass": [216, 10, 9]}
{"time": "2021-02-24 02:46:57.666871", "score": "0.3356", "loss": "19.0105", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 99, "n_pass": [226, 11, 10]}
{"time": "2021-02-24 02:47:06.040767", "score": "0.4484", "loss": "19.4802", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 97, "n_pass": [247, 14, 11]}
{"time": "2021-02-24 02:47:08.680284", "score": "0.4459", "loss": "19.4589", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 95, "n_pass": [249, 15, 12]}
{"time": "2021-02-24 02:47:11.307507", "score": "0.4359", "loss": "19.4283", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 93, "n_pass": [252, 16, 13]}
{"time": "2021-02-24 02:47:13.932297", "score": "0.4348", "loss": "19.4073", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 91, "n_pass": [253, 17, 14]}
{"time": "2021-02-24 02:47:19.650677", "score": "0.4299", "loss": "19.1507", "code": "Map<PatternFile> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 90, "n_pass": [269, 19, 15]}
{"time": "2021-02-24 02:47:22.332635", "score": "0.4314", "loss": "19.4193", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 89, "n_pass": [270, 20, 16]}
{"time": "2021-02-24 02:47:25.773535", "score": "0.3772", "loss": "19.349", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap< File>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 87, "n_pass": [285, 21, 17]}
{"time": "2021-02-24 02:47:28.392811", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 85, "n_pass": [286, 22, 18]}
{"time": "2021-02-24 02:47:47.054704", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for (Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 84, "n_pass": [416, 25, 19]}
{"time": "2021-02-24 02:47:50.010037", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content : contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 83, "n_pass": [417, 26, 20]}
{"time": "2021-02-24 02:47:52.614817", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content: contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 82, "n_pass": [422, 27, 21]}
{"time": "2021-02-24 02:47:55.248732", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents) { contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 81, "n_pass": [424, 28, 22]}
{"time": "2021-02-24 02:47:57.882057", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){ contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 80, "n_pass": [427, 29, 23]}
{"time": "2021-02-24 02:48:00.523118", "score": "0.3826", "loss": "19.3065", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 79, "n_pass": [429, 30, 24]}
{"time": "2021-02-24 02:48:08.455770", "score": "0.3959", "loss": "19.4089", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 78, "n_pass": [437, 33, 25]}
{"time": "2021-02-24 02:48:11.155675", "score": "0.3959", "loss": "19.4089", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+ \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 77, "n_pass": [439, 34, 26]}
{"time": "2021-02-24 02:48:13.781167", "score": "0.3959", "loss": "19.4089", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 76, "n_pass": [441, 35, 27]}
{"time": "2021-02-24 02:48:16.433226", "score": "0.3959", "loss": "19.4089", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 75, "n_pass": [443, 36, 28]}
{"time": "2021-02-24 02:48:19.055722", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"), getFile()); } return contentsMap; }", "n_tokens": 74, "n_pass": [446, 37, 29]}
{"time": "2021-02-24 02:48:21.744219", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile()); } return contentsMap; }", "n_tokens": 73, "n_pass": [450, 38, 30]}
{"time": "2021-02-24 02:48:24.416314", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());} return contentsMap; }", "n_tokens": 72, "n_pass": [456, 39, 31]}
{"time": "2021-02-24 02:48:27.040628", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap; }", "n_tokens": 71, "n_pass": [458, 40, 32]}
{"time": "2021-02-24 02:48:37.720946", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 70, "n_pass": [463, 44, 33]}
{"time": "2021-02-24 02:48:40.768797", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 69, "n_pass": [469, 45, 34]}
{"time": "2021-02-24 02:48:43.648252", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents) { Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 68, "n_pass": [476, 46, 35]}
{"time": "2021-02-24 02:48:46.302423", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){ Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 67, "n_pass": [479, 47, 36]}
{"time": "2021-02-24 02:48:48.918247", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map< File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 66, "n_pass": [481, 48, 37]}
{"time": "2021-02-24 02:48:51.563828", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map<File> contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 65, "n_pass": [484, 49, 38]}
{"time": "2021-02-24 02:48:54.202375", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap = new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 64, "n_pass": [487, 50, 39]}
{"time": "2021-02-24 02:48:56.834633", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap= new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 63, "n_pass": [489, 51, 40]}
{"time": "2021-02-24 02:48:59.502378", "score": "0.3903", "loss": "19.32", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 62, "n_pass": [491, 52, 41]}

Minimal simplified code:
Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap.put(Pattern(""+"\\"),getFile());}return contentsMap;}

