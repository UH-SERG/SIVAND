
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/calendar/calendar-summary-tool/tool/src/java/org/sakaiproject/tool/summarycalendar/ui/PrefsBean_getValidatedColorValue.java
method_name = getValidatedColorValue
method_body = private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if ("".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception("Invalid hex color code."); } return value; }
predict, score, loss = map, 0.3889649212360382, 20.490720748901367

Trace of simplified code(s):
{"time": "2021-02-23 20:50:24.140195", "score": "0.389", "loss": "20.4907", "code": "private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if (\"\".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 103, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:50:26.807996", "score": "0.4828", "loss": "18.979", "code": "private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if (\"\".equals(value)) { return value; new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 77, "n_pass": [10, 2, 2]}
{"time": "2021-02-23 20:50:29.506390", "score": "0.6202", "loss": "20.1375", "code": "private String getValidatedColorValue(String componentId) throws Exception { String(componentId).trim(); if (\"\".equals(value)) { return value; new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 71, "n_pass": [44, 3, 3]}
{"time": "2021-02-23 20:50:32.161649", "score": "0.6089", "loss": "19.745", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (\"\".equals(value)) { return value; new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 68, "n_pass": [78, 4, 4]}
{"time": "2021-02-23 20:50:34.808229", "score": "0.5169", "loss": "19.8283", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return value; new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 65, "n_pass": [81, 5, 5]}
{"time": "2021-02-23 20:50:37.459223", "score": "0.8408", "loss": "21.4607", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 62, "n_pass": [85, 6, 6]}
{"time": "2021-02-23 20:50:42.744061", "score": "0.5205", "loss": "18.6205", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"color code.\"); } return value; }", "n_tokens": 58, "n_pass": [88, 8, 7]}
{"time": "2021-02-23 20:50:45.391625", "score": "0.8381", "loss": "21.9026", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); } return value; }", "n_tokens": 54, "n_pass": [89, 9, 8]}
{"time": "2021-02-23 20:50:56.508451", "score": "0.6034", "loss": "20.2243", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); } value; }", "n_tokens": 52, "n_pass": [144, 12, 9]}
{"time": "2021-02-23 20:50:59.173154", "score": "0.596", "loss": "20.2377", "code": "private String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 50, "n_pass": [145, 13, 10]}
{"time": "2021-02-23 20:51:01.836660", "score": "0.596", "loss": "20.2377", "code": " String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 49, "n_pass": [147, 14, 11]}
{"time": "2021-02-23 20:51:04.481741", "score": "0.596", "loss": "20.2377", "code": "String getValidatedColorValue(String componentId) throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 48, "n_pass": [148, 15, 12]}
{"time": "2021-02-23 20:51:08.377222", "score": "0.596", "loss": "20.2377", "code": "String getValidatedColorValue(String componentId)throws Exception { String.trim(); if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 47, "n_pass": [157, 16, 13]}
{"time": "2021-02-23 20:51:11.047395", "score": "0.5472", "loss": "20.0522", "code": "String getValidatedColorValue(String componentId)throws Exception { String(); if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 45, "n_pass": [163, 17, 14]}
{"time": "2021-02-23 20:51:13.707433", "score": "0.4393", "loss": "20.2151", "code": "String getValidatedColorValue(String componentId)throws Exception { String; if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 43, "n_pass": [164, 18, 15]}
{"time": "2021-02-23 20:51:22.907316", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {; if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 41, "n_pass": [191, 21, 16]}
{"time": "2021-02-23 20:51:25.562799", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)) { return new Exception(\"\"); }  }", "n_tokens": 39, "n_pass": [192, 22, 17]}
{"time": "2021-02-23 20:51:41.313770", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)){ return new Exception(\"\"); }  }", "n_tokens": 38, "n_pass": [249, 26, 18]}
{"time": "2021-02-23 20:51:43.971961", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)){return new Exception(\"\"); }  }", "n_tokens": 37, "n_pass": [250, 27, 19]}
{"time": "2021-02-23 20:51:54.543302", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)){return new Exception(\"\");}  }", "n_tokens": 36, "n_pass": [261, 31, 20]}
{"time": "2021-02-23 20:51:57.207137", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)){return new Exception(\"\");} }", "n_tokens": 35, "n_pass": [263, 32, 21]}
{"time": "2021-02-23 20:51:59.871346", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception {if (equals(value)){return new Exception(\"\");}}", "n_tokens": 34, "n_pass": [264, 33, 22]}
{"time": "2021-02-23 20:52:03.760354", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception{if (equals(value)){return new Exception(\"\");}}", "n_tokens": 33, "n_pass": [277, 34, 23]}
{"time": "2021-02-23 20:52:06.400369", "score": "0.4374", "loss": "20.2519", "code": "String getValidatedColorValue(String componentId)throws Exception{if(equals(value)){return new Exception(\"\");}}", "n_tokens": 32, "n_pass": [280, 35, 24]}

Minimal simplified code:
String getValidatedColorValue(String componentId)throws Exception{if(equals(value)){return new Exception("");}}

