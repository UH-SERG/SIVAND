
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/cairo/TableWriter_openTxnFile.java
method_name = openTxnFile
method_body = private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ff, path, ff.getPageSize()); } throw CairoException.instance(ff.errno()).put("Cannot append. File does not exist: ").put(path); } finally { path.trimTo(rootLen); } }
predict, score, loss = trim, 0.5787023901939392, 21.99658966064453

Trace of simplified code(s):
{"time": "2021-02-23 17:17:52.275226", "score": "0.5787", "loss": "21.9966", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ff, path, ff.getPageSize()); } throw CairoException.instance(ff.errno()).put(\"Cannot append. File does not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 120, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 17:17:55.392708", "score": "0.6183", "loss": "22.4013", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\"Cannot append. File does not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 113, "n_pass": [51, 2, 2]}
{"time": "2021-02-23 17:17:58.074125", "score": "0.6274", "loss": "22.2476", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\" not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 105, "n_pass": [55, 3, 3]}
{"time": "2021-02-23 17:18:01.229534", "score": "0.6148", "loss": "22.3306", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 101, "n_pass": [98, 4, 4]}
{"time": "2021-02-23 17:18:07.012157", "score": "0.6323", "loss": "22.4367", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 97, "n_pass": [113, 6, 5]}
{"time": "2021-02-23 17:18:09.684538", "score": "0.5306", "loss": "21.4382", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 93, "n_pass": [115, 7, 6]}
{"time": "2021-02-23 17:18:12.364720", "score": "0.6362", "loss": "22.287", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 89, "n_pass": [117, 8, 7]}
{"time": "2021-02-23 17:18:15.051474", "score": "0.5491", "loss": "21.4027", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 85, "n_pass": [121, 9, 8]}
{"time": "2021-02-23 17:18:21.988001", "score": "0.5397", "loss": "20.155", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\": \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 83, "n_pass": [192, 11, 9]}
{"time": "2021-02-23 17:18:24.688383", "score": "0.5783", "loss": "20.5335", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 81, "n_pass": [197, 12, 10]}
{"time": "2021-02-23 17:18:30.035333", "score": "0.5783", "loss": "20.5335", "code": " ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 80, "n_pass": [211, 14, 11]}
{"time": "2021-02-23 17:18:32.707728", "score": "0.5783", "loss": "20.5335", "code": "ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 79, "n_pass": [212, 15, 12]}
{"time": "2021-02-23 17:18:36.596528", "score": "0.559", "loss": "20.0544", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 77, "n_pass": [223, 16, 13]}
{"time": "2021-02-23 17:18:39.254820", "score": "0.6308", "loss": "20.8522", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(FILE_NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 75, "n_pass": [225, 17, 14]}
{"time": "2021-02-23 17:18:41.894856", "score": "0.631", "loss": "20.9917", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) { ReadWriteMemory(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 73, "n_pass": [227, 18, 15]}
{"time": "2021-02-23 17:18:44.575891", "score": "0.636", "loss": "21.0724", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize()); } instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 71, "n_pass": [231, 19, 16]}
{"time": "2021-02-23 17:18:57.751391", "score": "0.636", "loss": "21.0724", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());} instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 70, "n_pass": [340, 21, 17]}
{"time": "2021-02-23 17:19:00.404290", "score": "0.636", "loss": "21.0724", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}instance(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 69, "n_pass": [342, 22, 18]}
{"time": "2021-02-23 17:19:03.070153", "score": "0.6479", "loss": "22.6253", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 68, "n_pass": [343, 23, 19]}
{"time": "2021-02-23 17:19:05.720776", "score": "0.6699", "loss": "22.9723", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put(); } finally { path.trimTo(rootLen); } }", "n_tokens": 67, "n_pass": [358, 24, 20]}
{"time": "2021-02-23 17:19:08.397954", "score": "0.6699", "loss": "22.9723", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();} finally { path.trimTo(rootLen); } }", "n_tokens": 66, "n_pass": [361, 25, 21]}
{"time": "2021-02-23 17:19:11.045465", "score": "0.6699", "loss": "22.9723", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally { path.trimTo(rootLen); } }", "n_tokens": 65, "n_pass": [363, 26, 22]}
{"time": "2021-02-23 17:19:13.690982", "score": "0.6699", "loss": "22.9723", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{ path.trimTo(rootLen); } }", "n_tokens": 64, "n_pass": [365, 27, 23]}
{"time": "2021-02-23 17:19:16.329447", "score": "0.6699", "loss": "22.9723", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo(rootLen); } }", "n_tokens": 63, "n_pass": [367, 28, 24]}
{"time": "2021-02-23 17:19:21.613170", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo(); } }", "n_tokens": 62, "n_pass": [372, 30, 25]}
{"time": "2021-02-23 17:19:24.273068", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();} }", "n_tokens": 61, "n_pass": [375, 31, 26]}
{"time": "2021-02-23 17:19:26.941389", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile() { try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 60, "n_pass": [377, 32, 27]}
{"time": "2021-02-23 17:19:30.825079", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile(){ try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 59, "n_pass": [384, 33, 28]}
{"time": "2021-02-23 17:19:33.495347", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile(){try { if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 58, "n_pass": [386, 34, 29]}
{"time": "2021-02-23 17:19:36.133738", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile(){try{ if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 57, "n_pass": [388, 35, 30]}
{"time": "2021-02-23 17:19:38.779234", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile(){try{if (exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 56, "n_pass": [390, 36, 31]}
{"time": "2021-02-23 17:19:41.420555", "score": "0.5482", "loss": "18.3603", "code": "ReadWriteMemory openTxnFile(){try{if(exists(concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 55, "n_pass": [392, 37, 32]}
{"time": "2021-02-23 17:19:44.057385", "score": "0.4053", "loss": "20.6162", "code": "ReadWriteMemory openTxnFile(){try{if((concat(NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 54, "n_pass": [394, 38, 33]}
{"time": "2021-02-23 17:19:46.784076", "score": "0.3997", "loss": "21.1159", "code": "ReadWriteMemory openTxnFile(){try{if(((NAME))) {(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 53, "n_pass": [396, 39, 34]}
{"time": "2021-02-23 17:19:49.457312", "score": "0.3997", "loss": "21.1159", "code": "ReadWriteMemory openTxnFile(){try{if(((NAME))){(ffgetPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 52, "n_pass": [402, 40, 35]}
{"time": "2021-02-23 17:19:52.126693", "score": "0.3991", "loss": "21.064", "code": "ReadWriteMemory openTxnFile(){try{if(((NAME))){(getPageSize());}(errno()).put(\"\").put();}finally{path.trimTo();}}", "n_tokens": 51, "n_pass": [405, 41, 36]}

Minimal simplified code:
ReadWriteMemory openTxnFile(){try{if(((NAME))){(getPageSize());}(errno()).put("").put();}finally{path.trimTo();}}

