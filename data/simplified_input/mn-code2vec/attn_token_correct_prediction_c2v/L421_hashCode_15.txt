
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/com/o3dr/services/android/lib/drone/companion/solo/tlv/mpcc/SoloSplineDurations_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + (minTime != +0.0f ? Float.floatToIntBits(minTime) : 0); result = 31 * result + (maxTime != +0.0f ? Float.floatToIntBits(maxTime) : 0); return result; }

topk path-contexts:
[0.0781] super,(SuperExpr0)^(MethodCallExpr)_(NameExpr2),hashcode
[0.0663] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0663] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0519] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0505] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0505] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0465] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0465] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0456] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0456] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0338] mintime,(NameExpr2)^(MethodCallExpr)_(NameExpr3),floattointbits
[0.0238] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0238] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0224] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0224] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0214] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0214] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0189] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0168] mintime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),mintime
[0.0155] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0155] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0127] mintime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0112] result,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0101] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0101] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0101] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),mintime
[0.0089] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(SuperExpr0),super
[0.0089] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),mintime
[0.0082] maxtime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr3),floattointbits
[0.0071] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),mintime
[0.0071] maxtime,(NameExpr2)^(MethodCallExpr)_(NameExpr3),floattointbits
[0.0070] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),maxtime
[0.0066] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),maxtime
[0.0064] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0064] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0064] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),maxtime
[0.0054] float,(NameExpr0)^(MethodCallExpr)_(NameExpr2),mintime
[0.0051] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),mintime
[0.0048] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),maxtime
[0.0047] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0047] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0032] maxtime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),maxtime
[0.0027] floattointbits,(NameExpr3)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0027] floattointbits,(NameExpr3)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0026] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0026] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0024] float,(NameExpr0)^(MethodCallExpr)_(NameExpr2),maxtime
[0.0024] float,(NameExpr0)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0024] float,(NameExpr0)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0021] int,(PrimitiveType1)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0019] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0019] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0019] mintime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0019] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0019] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0018] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0018] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0017] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),mintime
[0.0017] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0017] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),maxtime
[0.0014] mintime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0014] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0014] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0014] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(PrimitiveType1),int
[0.0013] maxtime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0012] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0012] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0012] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0010] mintime,(NameExpr2)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0009] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0009] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0007] maxtime,(NameExpr0)^(BinaryExpr:notEquals)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0006] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0006] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0005] maxtime,(NameExpr2)^(MethodCallExpr)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0005] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0004] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0004] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0004] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),mintime
[0.0003] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0003] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)_(NameExpr1),result
[0.0003] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)_(NameExpr1),result
[0.0003] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),mintime
[0.0003] mintime,(NameExpr0)^(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0003] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0002] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0002] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0002] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr2),maxtime
[0.0002] maxtime,(NameExpr0)^(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0002] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0002] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0002] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(NameExpr0),maxtime
[0.0002] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0002] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0002] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0002] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0002] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result
[0.0001] result,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0001] hashcode,(NameExpr2)^(MethodCallExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0001] hashcode,(NameExpr2)^(MethodCallExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0001] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0001] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0001] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0001] f,(DoubleLiteralExpr0)^(UnaryExpr:positive)^(BinaryExpr:notEquals)^(ConditionalExpr)_(MethodCallExpr1)_(NameExpr0),float
[0.0001] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0001] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0001] result,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0001] 0,(IntegerLiteralExpr2)^(ConditionalExpr)^(EnclosedExpr)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0001] 0,(IntegerLiteralExpr2)^(ConditionalExpr)^(EnclosedExpr)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0001] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0001] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0001] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0001] result,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(BinaryExpr:notEquals)_(UnaryExpr:positive)_(DoubleLiteralExpr0),f
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(SuperExpr0),super
[0.0000] result,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0000] result,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0000] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0000] result,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),result
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(SuperExpr0),super
[0.0000] super,(SuperExpr0)^(MethodCallExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0000] super,(SuperExpr0)^(MethodCallExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)_(MethodCallExpr1)_(SuperExpr0),super
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),result

topk terminals:
[['super', 'hashcode'], ['31', 'floattointbits'], ['31', 'floattointbits'], ['int', 'hashcode'], ['int', '31'], ['int', '31'], ['result', 'floattointbits'], ['result', 'floattointbits'], ['f', 'floattointbits'], ['f', 'floattointbits'], ['mintime', 'floattointbits'], ['result', 'floattointbits'], ['result', 'floattointbits'], ['result', '31'], ['result', '31'], ['31', 'float'], ['31', 'float'], ['METHOD_NAME', 'hashcode'], ['mintime', 'mintime'], ['int', '0'], ['int', '0'], ['mintime', 'floattointbits'], ['result', '31'], ['METHOD_NAME', '31'], ['METHOD_NAME', '31'], ['31', 'mintime'], ['int', 'super'], ['31', 'mintime'], ['maxtime', 'floattointbits'], ['result', 'mintime'], ['maxtime', 'floattointbits'], ['31', 'maxtime'], ['31', 'maxtime'], ['result', 'float'], ['result', 'float'], ['result', 'maxtime'], ['float', 'mintime'], ['result', 'mintime'], ['result', 'maxtime'], ['result', 'result'], ['result', 'result'], ['maxtime', 'maxtime'], ['floattointbits', '0'], ['floattointbits', '0'], ['int', '31'], ['int', '31'], ['float', 'maxtime'], ['float', '0'], ['float', '0'], ['int', 'METHOD_NAME'], ['31', 'result'], ['int', 'result'], ['mintime', 'float'], ['int', 'result'], ['int', 'result'], ['int', 'result'], ['int', 'result'], ['result', 'mintime'], ['override', 'METHOD_NAME'], ['result', 'maxtime'], ['mintime', '0'], ['METHOD_NAME', '0'], ['METHOD_NAME', '0'], ['override', 'int'], ['maxtime', 'float'], ['METHOD_NAME', 'result'], ['result', 'float'], ['result', 'float'], ['mintime', '0'], ['31', 'result'], ['31', 'result'], ['maxtime', '0'], ['31', '0'], ['31', '0'], ['maxtime', '0'], ['int', 'int'], ['METHOD_NAME', 'result'], ['METHOD_NAME', 'result'], ['f', 'mintime'], ['int', 'hashcode'], ['31', 'result'], ['31', 'result'], ['result', 'mintime'], ['mintime', 'f'], ['result', 'result'], ['f', '0'], ['f', '0'], ['f', 'maxtime'], ['maxtime', 'f'], ['int', 'result'], ['int', 'result'], ['result', 'maxtime'], ['METHOD_NAME', 'result'], ['METHOD_NAME', 'result'], ['result', '0'], ['result', '0'], ['int', 'result'], ['result', 'result'], ['hashcode', 'result'], ['hashcode', 'result'], ['31', 'f'], ['31', 'f'], ['f', 'float'], ['f', 'float'], ['result', '0'], ['result', '0'], ['result', 'result'], ['0', 'result'], ['0', 'result'], ['result', 'f'], ['result', 'f'], ['result', 'f'], ['result', 'f'], ['int', 'super'], ['result', 'result'], ['result', 'result'], ['result', 'result'], ['result', 'result'], ['METHOD_NAME', 'super'], ['super', 'result'], ['super', 'result'], ['METHOD_NAME', 'int'], ['result', 'hashcode'], ['result', 'super'], ['METHOD_NAME', 'result'], ['int', 'result'], ['int', 'result'], ['int', 'result'], ['result', 'result'], ['result', 'result']]

