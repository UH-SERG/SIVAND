
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wildfly__jandex/src/main/java/org/jboss/jandex/WildcardType_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int hash = this.hash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }

topk path-contexts:
[0.0799] super,(SuperExpr0)^(MethodCallExpr1)_(NameExpr2),hashcode
[0.0752] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0545] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(NameExpr0),isextends
[0.0518] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0471] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0471] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0342] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(NameExpr0),isextends
[0.0300] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0252] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(NameExpr0),isextends
[0.0244] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(MethodCallExpr1)_(NameExpr0),bound
[0.0239] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0239] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0211] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0211] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0203] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0195] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(NameExpr0),isextends
[0.0194] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0175] hash,(NameExpr0)^(ReturnStmt)^(BlockStmt)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0166] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0161] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(NameExpr0),isextends
[0.0154] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0144] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0118] isextends,(NameExpr0)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0110] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0110] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0110] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0109] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(ThisExpr0),this
[0.0096] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(MethodCallExpr1)_(NameExpr0),bound
[0.0095] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),bound
[0.0094] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0094] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0094] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0090] hash,(NameExpr0)^(ReturnStmt)^(BlockStmt)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0090] hash,(NameExpr0)^(ReturnStmt)^(BlockStmt)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0088] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0085] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0085] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0080] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0080] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0080] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0078] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0072] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0072] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),hash
[0.0069] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0069] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0069] isextends,(NameExpr0)^(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0052] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0048] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0046] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0040] hash,(NameExpr2)^(FieldAccessExpr0)^(AssignExpr:assign)_(NameExpr1),hash
[0.0038] hash,(NameExpr2)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0034] this,(ThisExpr0)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0030] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0030] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0030] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0025] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0023] bound,(NameExpr0)^(MethodCallExpr)_(NameExpr2),hashcode
[0.0022] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)_(NameExpr1),hash
[0.0022] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)_(NameExpr1),hash
[0.0022] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),bound
[0.0022] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),bound
[0.0021] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),hash
[0.0019] int,(PrimitiveType1)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0018] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0018] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0016] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0015] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),bound
[0.0015] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0014] this,(ThisExpr0)^(FieldAccessExpr)_(NameExpr2),hash
[0.0013] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0013] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(PrimitiveType1),int
[0.0013] this,(ThisExpr0)^(FieldAccessExpr0)^(AssignExpr:assign)_(NameExpr1),hash
[0.0012] hash,(NameExpr0)^(AssignExpr:assign)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0011] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0011] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0011] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0008] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0008] this,(ThisExpr0)^(FieldAccessExpr0)_(NameExpr2),hash
[0.0008] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0007] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0007] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0007] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0007] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0006] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0006] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0005] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0005] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0005] hashcode,(NameExpr2)^(MethodCallExpr)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0005] 31,(IntegerLiteralExpr0)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0005] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0005] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0005] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0004] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(IntegerLiteralExpr0),31
[0.0004] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0003] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(NameExpr2),hash
[0.0003] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0003] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(NameExpr2),hash
[0.0003] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0003] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0002] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0002] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0002] this,(ThisExpr0)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0002] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(NameExpr2),hash
[0.0002] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0002] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(NameExpr2),hash
[0.0002] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0002] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0002] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0002] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ReturnStmt)_(NameExpr0),hash
[0.0002] bound,(NameExpr0)^(MethodCallExpr)^(BinaryExpr:plus1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(NameExpr1),hash
[0.0002] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0001] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0001] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0001] hash,(NameExpr1)^(BinaryExpr:times)^(BinaryExpr:plus1)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0001] hash,(NameExpr0)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0001] hash,(NameExpr0)^(ReturnStmt)^(BlockStmt)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0001] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(ThisExpr0),this
[0.0001] 0,(IntegerLiteralExpr1)^(BinaryExpr:notEquals)^(IfStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0001] super,(SuperExpr0)^(MethodCallExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] super,(SuperExpr0)^(MethodCallExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(ThisExpr0),this
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(ThisExpr0),this
[0.0001] 1,(IntegerLiteralExpr1)^(ConditionalExpr)_(IntegerLiteralExpr2),0
[0.0001] int,(PrimitiveType1)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(AssignExpr:assign0)_(FieldAccessExpr0)_(ThisExpr0),this
[0.0001] hashcode,(NameExpr2)^(MethodCallExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] hashcode,(NameExpr2)^(MethodCallExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(BinaryExpr:times)_(NameExpr1),hash
[0.0001] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(EnclosedExpr)_(ConditionalExpr)_(IntegerLiteralExpr1),1
[0.0000] this,(ThisExpr0)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0000] hash,(NameExpr0)^(AssignExpr:assign)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),bound
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),hash
[0.0000] hash,(NameExpr2)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(SuperExpr0),super
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(ThisExpr0),this
[0.0000] hash,(NameExpr0)^(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0000] hash,(NameExpr2)^(FieldAccessExpr)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),hashcode
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0000] hash,(NameExpr0)^(AssignExpr:assign)_(MethodCallExpr1)_(SuperExpr0),super
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),hash
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(ThisExpr0),this
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),hash
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),hash
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),hash
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),hash
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),hash
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0000] hash,(VariableDeclaratorId0)^(VariableDeclarator)_(FieldAccessExpr1)_(ThisExpr0),this
[0.0000] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0

topk terminals:
[['super', 'hashcode'], ['int', 'hashcode'], ['31', 'isextends'], ['int', '1'], ['int', '31'], ['int', '31'], ['hash', 'isextends'], ['31', 'hashcode'], ['int', 'isextends'], ['31', 'bound'], ['hash', '31'], ['hash', '31'], ['int', 'hash'], ['int', 'hash'], ['METHOD_NAME', 'hashcode'], ['METHOD_NAME', 'isextends'], ['31', 'hash'], ['hash', 'hashcode'], ['0', 'hash'], ['hash', 'isextends'], ['int', 'hash'], ['int', '0'], ['isextends', '0'], ['int', 'hash'], ['int', 'hash'], ['int', 'hash'], ['int', 'this'], ['hash', 'bound'], ['int', 'bound'], ['METHOD_NAME', '31'], ['METHOD_NAME', '31'], ['int', 'hashcode'], ['hash', 'hash'], ['hash', 'hash'], ['31', '1'], ['hash', 'hash'], ['hash', 'hash'], ['hash', '31'], ['hash', '31'], ['hash', '31'], ['METHOD_NAME', 'hashcode'], ['int', 'hash'], ['int', 'hash'], ['hash', 'hashcode'], ['hash', 'hashcode'], ['isextends', '1'], ['hash', 'hashcode'], ['hash', 'hashcode'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['this', 'hash'], ['METHOD_NAME', 'hash'], ['METHOD_NAME', 'hash'], ['METHOD_NAME', 'hash'], ['int', '0'], ['bound', 'hashcode'], ['31', 'hash'], ['31', 'hash'], ['hash', 'bound'], ['hash', 'bound'], ['int', 'hash'], ['int', 'METHOD_NAME'], ['hash', 'hash'], ['hash', 'hash'], ['override', 'METHOD_NAME'], ['METHOD_NAME', 'bound'], ['int', 'hash'], ['this', 'hash'], ['METHOD_NAME', '0'], ['override', 'int'], ['this', 'hash'], ['hash', 'hashcode'], ['0', 'hashcode'], ['METHOD_NAME', 'hash'], ['METHOD_NAME', 'hash'], ['METHOD_NAME', 'hash'], ['this', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['METHOD_NAME', 'hash'], ['hash', 'hash'], ['hash', '31'], ['31', 'hash'], ['31', 'hash'], ['hashcode', 'hash'], ['31', '0'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['0', '31'], ['int', 'int'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['METHOD_NAME', '1'], ['hash', '0'], ['int', 'super'], ['this', 'hash'], ['METHOD_NAME', 'hash'], ['METHOD_NAME', 'hash'], ['int', 'hash'], ['int', 'hash'], ['hash', 'hashcode'], ['METHOD_NAME', 'super'], ['hash', 'hash'], ['bound', 'hash'], ['int', 'super'], ['0', 'hash'], ['int', 'hashcode'], ['hash', '0'], ['hash', '1'], ['hash', 'super'], ['hash', 'super'], ['0', 'hash'], ['0', 'hash'], ['METHOD_NAME', 'this'], ['0', 'super'], ['super', 'hash'], ['super', 'hash'], ['hash', 'this'], ['hash', 'this'], ['1', '0'], ['int', 'this'], ['hashcode', 'hash'], ['hashcode', 'hash'], ['hash', 'hash'], ['hash', 'hash'], ['hash', '1'], ['this', '0'], ['hash', 'bound'], ['METHOD_NAME', 'hash'], ['hash', '0'], ['hash', 'super'], ['METHOD_NAME', 'this'], ['hash', '0'], ['hash', 'hash'], ['hash', 'hashcode'], ['METHOD_NAME', 'int'], ['METHOD_NAME', '0'], ['hash', 'super'], ['hash', 'hash'], ['int', 'this'], ['int', 'hash'], ['int', 'hash'], ['hash', 'hash'], ['int', 'hash'], ['METHOD_NAME', 'hash'], ['hash', 'hash'], ['int', 'hash'], ['hash', '0'], ['hash', 'this'], ['int', '0']]

