
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/shamanland__floating-action-button/lib/src/main/java/com/shamanland/fab/FloatingActionButton_setShadow.java
method_name = setShadow
method_body = public void setShadow(boolean shadow) { boolean changed = mShadow != shadow; mShadow = shadow; if (changed) { updateBackground(); } }

topk path-contexts:
[0.3184] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.1077] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0788] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr0),mshadow
[0.0641] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.0626] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0580] shadow,(NameExpr1)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0294] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0291] boolean,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.0264] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr0),mshadow
[0.0243] shadow,(NameExpr1)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0231] mshadow,(NameExpr0)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0207] mshadow,(NameExpr0)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0201] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr0),mshadow
[0.0183] shadow,(NameExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0159] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0148] shadow,(NameExpr1)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0097] mshadow,(NameExpr0)^(AssignExpr:assign)_(NameExpr1),shadow
[0.0087] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),changed
[0.0087] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0065] changed,(VariableDeclaratorId0)^(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.0062] void,(VoidType0)^(MethodDeclaration)_(Parameter)_(VariableDeclaratorId0),shadow
[0.0059] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0050] shadow,(NameExpr1)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0045] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0041] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0037] mshadow,(NameExpr0)^(BinaryExpr:notEquals)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0034] changed,(NameExpr0)^(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0029] mshadow,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0029] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0027] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.0023] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0020] mshadow,(NameExpr0)^(BinaryExpr:notEquals)_(NameExpr1),shadow
[0.0020] boolean,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr0),mshadow
[0.0020] void,(VoidType0)^(MethodDeclaration)_(NameExpr1),METHOD_NAME
[0.0013] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0011] shadow,(VariableDeclaratorId0)^(Parameter)_(PrimitiveType1),boolean
[0.0006] void,(VoidType0)^(MethodDeclaration)_(Parameter)_(PrimitiveType1),boolean
[0.0006] changed,(VariableDeclaratorId0)^(VariableDeclarator)_(BinaryExpr:notEquals)_(NameExpr0),mshadow
[0.0006] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0003] mshadow,(NameExpr0)^(AssignExpr:assign)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0002] boolean,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr1),updatebackground
[0.0001] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(Parameter)_(VariableDeclaratorId0),shadow
[0.0001] boolean,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0000] boolean,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0000] changed,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr1),shadow
[0.0000] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(Parameter)_(PrimitiveType1),boolean
[0.0000] changed,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0000] boolean,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(NameExpr0),changed
[0.0000] shadow,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),boolean
[0.0000] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),boolean
[0.0000] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),changed
[0.0000] changed,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mshadow
[0.0000] boolean,(PrimitiveType1)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),changed
[0.0000] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),boolean
[0.0000] boolean,(PrimitiveType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),changed

topk terminals:
[['shadow', 'shadow'], ['shadow', 'mshadow'], ['shadow', 'mshadow'], ['boolean', 'shadow'], ['boolean', 'mshadow'], ['shadow', 'mshadow'], ['METHOD_NAME', 'mshadow'], ['boolean', 'shadow'], ['METHOD_NAME', 'mshadow'], ['shadow', 'shadow'], ['mshadow', 'mshadow'], ['mshadow', 'changed'], ['boolean', 'mshadow'], ['shadow', 'changed'], ['boolean', 'shadow'], ['shadow', 'updatebackground'], ['mshadow', 'shadow'], ['shadow', 'changed'], ['shadow', 'updatebackground'], ['changed', 'shadow'], ['void', 'shadow'], ['shadow', 'shadow'], ['shadow', 'changed'], ['METHOD_NAME', 'shadow'], ['shadow', 'changed'], ['mshadow', 'shadow'], ['changed', 'updatebackground'], ['mshadow', 'updatebackground'], ['boolean', 'updatebackground'], ['METHOD_NAME', 'shadow'], ['METHOD_NAME', 'changed'], ['mshadow', 'shadow'], ['boolean', 'mshadow'], ['void', 'METHOD_NAME'], ['boolean', 'changed'], ['shadow', 'boolean'], ['void', 'boolean'], ['changed', 'mshadow'], ['METHOD_NAME', 'updatebackground'], ['mshadow', 'changed'], ['boolean', 'updatebackground'], ['METHOD_NAME', 'shadow'], ['boolean', 'shadow'], ['boolean', 'mshadow'], ['changed', 'shadow'], ['METHOD_NAME', 'boolean'], ['changed', 'changed'], ['boolean', 'changed'], ['shadow', 'boolean'], ['boolean', 'boolean'], ['METHOD_NAME', 'changed'], ['changed', 'mshadow'], ['boolean', 'changed'], ['METHOD_NAME', 'boolean'], ['boolean', 'changed']]

