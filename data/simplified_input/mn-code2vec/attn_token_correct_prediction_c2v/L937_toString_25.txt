
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/demilich1__metastone/game/src/main/java/net/demilich/metastone/game/spells/desc/SpellDesc_toString.java
method_name = toString
method_body = @Override public String toString() { String result = "[SpellDesc arguments= {\n"; for (SpellArg spellArg : arguments.keySet()) { result += "\t" + spellArg + ": " + arguments.get(spellArg) + "\n"; } result += "}"; return result; }

topk path-contexts:
[0.3821] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.1171] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0759] keyset,(NameExpr2)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0691] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0296] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(StringLiteralExpr1),spelldescarguments
[0.0237] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0167] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0166] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0155] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),string
[0.0148] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(StringLiteralExpr0),t
[0.0141] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0139] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0134] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0128] arguments,(NameExpr0)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0121] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),spellarg
[0.0112] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0090] arguments,(NameExpr0)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0087] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(StringLiteralExpr1),:_
[0.0082] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0081] },(StringLiteralExpr1)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0078] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0077] arguments,(NameExpr0)^(MethodCallExpr)_(NameExpr2),keyset
[0.0072] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(NameExpr2),METHOD_NAME
[0.0063] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0057] arguments,(NameExpr0)^(MethodCallExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0054] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(StringLiteralExpr1),spelldescarguments
[0.0054] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0049] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0042] BLANK,(StringLiteralExpr1)^(BinaryExpr:plus1)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0042] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0041] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0040] result,(NameExpr0)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0038] get,(NameExpr3)^(MethodCallExpr)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0037] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result
[0.0036] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0036] override,(NameExpr0)^(MarkerAnnotationExpr)^(MethodDeclaration)_(ClassOrInterfaceType1),string
[0.0031] t,(StringLiteralExpr0)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0029] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0025] keyset,(NameExpr2)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0025] arguments,(NameExpr0)^(MethodCallExpr)_(NameExpr2),spellarg
[0.0024] arguments,(NameExpr0)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0024] t,(StringLiteralExpr0)^(BinaryExpr:plus)^(BinaryExpr:plus)_(StringLiteralExpr1),:_
[0.0021] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0018] t,(StringLiteralExpr0)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0018] keyset,(NameExpr2)^(MethodCallExpr)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0017] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),spellarg
[0.0016] keyset,(NameExpr2)^(MethodCallExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0015] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0014] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),spellarg
[0.0013] arguments,(NameExpr0)^(MethodCallExpr)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0013] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(StringLiteralExpr1),spelldescarguments
[0.0013] result,(NameExpr0)^(AssignExpr:plus)_(StringLiteralExpr1),}
[0.0012] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(NameExpr1),spellarg
[0.0012] result,(VariableDeclaratorId0)^(VariableDeclarator)_(StringLiteralExpr1),spelldescarguments
[0.0011] spellarg,(NameExpr2)^(MethodCallExpr)_(NameExpr3),get
[0.0010] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0010] result,(NameExpr0)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0009] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0008] spelldescarguments,(StringLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0006] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0006] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(StringLiteralExpr1),}
[0.0006] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr3),get
[0.0005] arguments,(NameExpr0)^(MethodCallExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0005] spellarg,(NameExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)_(StringLiteralExpr1),:_
[0.0004] result,(NameExpr0)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0004] spellarg,(NameExpr2)^(MethodCallExpr)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0004] t,(StringLiteralExpr0)^(BinaryExpr:plus)_(NameExpr1),spellarg
[0.0003] t,(StringLiteralExpr0)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),spellarg
[0.0003] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0003] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0002] result,(NameExpr0)^(AssignExpr:plus)^(ExpressionStmt)^(BlockStmt)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0002] spellarg,(NameExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0002] string,(ClassOrInterfaceType1)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0002] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0002] t,(StringLiteralExpr0)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr3),get
[0.0002] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0001] result,(NameExpr0)^(AssignExpr:plus)_(BinaryExpr:plus)_(StringLiteralExpr1),BLANK
[0.0001] :_,(StringLiteralExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0001] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0001] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)^(BlockStmt)_(ReturnStmt)_(NameExpr0),result
[0.0001] spellarg,(NameExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr3),get
[0.0001] spellarg,(NameExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus1)_(StringLiteralExpr1),BLANK
[0.0001] keyset,(NameExpr2)^(MethodCallExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0001] :_,(StringLiteralExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0000] :_,(StringLiteralExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr3),get
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0000] spellarg,(NameExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),spellarg
[0.0000] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0000] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),spellarg
[0.0000] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)_(MethodCallExpr1)_(NameExpr0),arguments
[0.0000] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0000] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0000] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0000] spellarg,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0000] :_,(StringLiteralExpr1)^(BinaryExpr:plus)^(BinaryExpr:plus)_(MethodCallExpr1)_(NameExpr2),spellarg
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),string
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0000] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)_(MethodCallExpr1)_(NameExpr2),keyset
[0.0000] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),spellarg
[0.0000] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0000] spellarg,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:plus0)_(NameExpr0),result
[0.0000] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),spellarg
[0.0000] result,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ForeachStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),spellarg
[0.0000] string,(ClassOrInterfaceType0)^(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),result

topk terminals:
[['string', '}'], ['string', 'arguments'], ['keyset', '}'], ['string', 'keyset'], ['string', 'spelldescarguments'], ['string', 'result'], ['result', '}'], ['METHOD_NAME', '}'], ['string', 'string'], ['result', 't'], ['string', 'spellarg'], ['string', '}'], ['spelldescarguments', 'keyset'], ['arguments', 'result'], ['string', 'spellarg'], ['string', 'result'], ['arguments', 'result'], ['result', ':_'], ['string', 'METHOD_NAME'], ['}', 'result'], ['spellarg', '}'], ['arguments', 'keyset'], ['override', 'METHOD_NAME'], ['string', 'result'], ['arguments', 'BLANK'], ['METHOD_NAME', 'spelldescarguments'], ['METHOD_NAME', 'result'], ['spelldescarguments', 'arguments'], ['BLANK', 'result'], ['METHOD_NAME', 'arguments'], ['spelldescarguments', 'result'], ['result', 'result'], ['get', 'BLANK'], ['string', 'result'], ['METHOD_NAME', 'keyset'], ['override', 'string'], ['t', 'arguments'], ['result', 'arguments'], ['keyset', 'result'], ['arguments', 'spellarg'], ['arguments', '}'], ['t', ':_'], ['METHOD_NAME', 'BLANK'], ['t', 'BLANK'], ['keyset', 'result'], ['spelldescarguments', 'spellarg'], ['keyset', 'BLANK'], ['METHOD_NAME', 'result'], ['result', 'spellarg'], ['arguments', 'BLANK'], ['string', 'spelldescarguments'], ['result', '}'], ['result', 'spellarg'], ['result', 'spelldescarguments'], ['spellarg', 'get'], ['string', 'result'], ['result', '}'], ['spelldescarguments', 'spellarg'], ['spelldescarguments', '}'], ['spellarg', 'result'], ['spellarg', '}'], ['result', 'get'], ['arguments', 'result'], ['spellarg', ':_'], ['result', 'result'], ['spellarg', 'BLANK'], ['t', 'spellarg'], ['t', 'spellarg'], ['spellarg', 'result'], ['spellarg', 'BLANK'], ['result', 'result'], ['spellarg', 'arguments'], ['string', 'BLANK'], ['spellarg', 'BLANK'], ['t', 'get'], ['spellarg', 'result'], ['result', 'BLANK'], [':_', 'BLANK'], ['string', 'arguments'], ['spellarg', 'result'], ['spellarg', 'get'], ['spellarg', 'BLANK'], ['keyset', 'result'], [':_', 'arguments'], [':_', 'get'], ['result', 'arguments'], ['spellarg', 'spellarg'], ['spellarg', 'arguments'], ['string', 'result'], ['METHOD_NAME', 'spellarg'], ['spellarg', 'arguments'], ['spellarg', 'result'], ['METHOD_NAME', 'spellarg'], ['METHOD_NAME', 'result'], ['spellarg', 'spellarg'], ['string', 'keyset'], ['spellarg', 'keyset'], [':_', 'spellarg'], ['METHOD_NAME', 'string'], ['result', 'keyset'], ['spellarg', 'keyset'], ['string', 'spellarg'], ['string', 'spellarg'], ['result', 'result'], ['spellarg', 'result'], ['METHOD_NAME', 'result'], ['result', 'spellarg'], ['result', 'spellarg'], ['string', 'result']]

