
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/mem/MemStorageModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }
predict, score, loss = configure, 0.8836069107055664, 0.18744376301765442

Trace of simplified code(s):
{"time": "2021-02-19 18:34:55.930516", "score": "0.8593", "loss": "0.2275", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 790, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 18:34:57.334902", "score": "0.8335", "loss": "0.269", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutMemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 593, "n_pass": [9, 2, 2]}
{"time": "2021-02-19 18:34:58.803973", "score": "0.8321", "loss": "0.3115", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mut, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 395, "n_pass": [10, 3, 3]}
{"time": "2021-02-19 18:35:00.178567", "score": "0.9345", "loss": "0.1184", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutstorageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 296, "n_pass": [15, 4, 4]}
{"time": "2021-02-19 18:35:01.540594", "score": "0.9074", "loss": "0.1712", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mu.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 246, "n_pass": [24, 5, 5]}
{"time": "2021-02-19 18:35:02.897831", "score": "0.9644", "loss": "0.0635", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 197, "n_pass": [29, 6, 6]}
{"time": "2021-02-19 18:35:04.256385", "score": "0.8523", "loss": "0.2829", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.ofs); expose(storageKey); }", "n_tokens": 172, "n_pass": [42, 7, 7]}
{"time": "2021-02-19 18:35:05.956071", "score": "0.6999", "loss": "0.5652", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.cls); expose(storageKey); }", "n_tokens": 147, "n_pass": [48, 8, 8]}
{"time": "2021-02-19 18:35:10.339051", "score": "0.7439", "loss": "0.4506", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQuels); expose(storageKey); }", "n_tokens": 134, "n_pass": [78, 11, 9]}
{"time": "2021-02-19 18:35:11.682937", "score": "0.5506", "loss": "0.6263", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQuetorageKey); }", "n_tokens": 121, "n_pass": [79, 12, 10]}
{"time": "2021-02-19 18:35:14.324868", "score": "0.5036", "loss": "0.7902", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueKey); }", "n_tokens": 115, "n_pass": [110, 14, 11]}
{"time": "2021-02-19 18:35:18.647156", "score": "0.5036", "loss": "0.7902", "code": "@Override protected void configure() { bind(new teral<Amount<Long, Time>>() { }).annotatedWith(SlowQueKey); }", "n_tokens": 109, "n_pass": [119, 17, 12]}
{"time": "2021-02-19 18:35:19.984461", "score": "0.6238", "loss": "0.5713", "code": "@Override protected void configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SlowQueKey); }", "n_tokens": 103, "n_pass": [126, 18, 13]}
{"time": "2021-02-19 18:35:21.306232", "score": "0.516", "loss": "0.6674", "code": "@Override protected void configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 97, "n_pass": [128, 19, 14]}
{"time": "2021-02-19 18:35:22.626163", "score": "0.5031", "loss": "0.7397", "code": "@Overrotected void configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 91, "n_pass": [131, 20, 15]}
{"time": "2021-02-19 18:35:23.943621", "score": "0.73", "loss": "0.387", "code": "@Overrd void configure() { bind(new teral<Amount<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 85, "n_pass": [132, 21, 16]}
{"time": "2021-02-19 18:35:30.127159", "score": "0.73", "loss": "0.387", "code": "@Overrd void configure() { bind(new al<Amount<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 82, "n_pass": [185, 24, 17]}
{"time": "2021-02-19 18:35:31.454674", "score": "0.73", "loss": "0.387", "code": "@Overrd void configure() { bind(new al<unt<Long, Time>>() { }).annWith(SKey); }", "n_tokens": 79, "n_pass": [186, 25, 18]}
{"time": "2021-02-19 18:35:32.770710", "score": "0.6953", "loss": "0.4487", "code": "@Overrd void configure() { bind(new al<unt<Long,me>>() { }).annWith(SKey); }", "n_tokens": 76, "n_pass": [190, 26, 19]}
{"time": "2021-02-19 18:35:34.089533", "score": "0.6522", "loss": "0.5633", "code": "@Overrd void configure() { bind(new al<unt<Long,me>>() { }).With(SKey); }", "n_tokens": 73, "n_pass": [195, 27, 20]}
{"time": "2021-02-19 18:35:35.402695", "score": "0.5989", "loss": "0.6636", "code": "@Overrd void configure() { bind(new al<unt<Long,me>>() { }).h(SKey); }", "n_tokens": 70, "n_pass": [196, 28, 21]}
{"time": "2021-02-19 18:35:36.715233", "score": "0.7123", "loss": "0.4412", "code": "@Overrd void configure() { bind(new al<unt<Long,me>>() { }).h(S); }", "n_tokens": 67, "n_pass": [198, 29, 22]}
{"time": "2021-02-19 18:35:43.419333", "score": "0.853", "loss": "0.2067", "code": "@Overrd void configure() { bind(new al<unt<Lome>>() { }).h(S); }", "n_tokens": 64, "n_pass": [215, 33, 23]}
{"time": "2021-02-19 18:35:44.730121", "score": "0.7289", "loss": "0.371", "code": "@Ovd void configure() { bind(new al<unt<Lome>>() { }).h(S); }", "n_tokens": 61, "n_pass": [223, 34, 24]}
{"time": "2021-02-19 18:35:46.427499", "score": "0.3284", "loss": "1.5828", "code": "@Ovd v configure() { bind(new al<unt<Lome>>() { }).h(S); }", "n_tokens": 58, "n_pass": [225, 35, 25]}
{"time": "2021-02-19 18:35:58.422221", "score": "0.3284", "loss": "1.5828", "code": "@Ovd v configure() { bind(new al<u<Lome>>() { }).h(S); }", "n_tokens": 56, "n_pass": [305, 39, 26]}
{"time": "2021-02-19 18:35:59.753239", "score": "0.2725", "loss": "1.787", "code": "@Ovd v configure() { bind(new al<u<Le>>() { }).h(S); }", "n_tokens": 54, "n_pass": [307, 40, 27]}
{"time": "2021-02-19 18:36:01.081679", "score": "0.5757", "loss": "0.7874", "code": "@vd v configure() { bind(new al<u<Le>>() { }).h(S); }", "n_tokens": 53, "n_pass": [318, 41, 28]}
{"time": "2021-02-19 18:36:14.504046", "score": "0.5757", "loss": "0.7874", "code": "@vd v configure(){ bind(new al<u<Le>>() { }).h(S); }", "n_tokens": 52, "n_pass": [390, 46, 29]}
{"time": "2021-02-19 18:36:15.863553", "score": "0.5757", "loss": "0.7874", "code": "@vd v configure(){bind(new al<u<Le>>() { }).h(S); }", "n_tokens": 51, "n_pass": [391, 47, 30]}
{"time": "2021-02-19 18:36:22.550293", "score": "0.5757", "loss": "0.7874", "code": "@vd v configure(){bind(new l<u<Le>>() { }).h(S); }", "n_tokens": 50, "n_pass": [401, 52, 31]}
{"time": "2021-02-19 18:36:23.885565", "score": "0.5699", "loss": "0.7887", "code": "@vd v configure(){bind(new l<u<e>>() { }).h(S); }", "n_tokens": 49, "n_pass": [406, 53, 32]}
{"time": "2021-02-19 18:36:25.229297", "score": "0.5699", "loss": "0.7887", "code": "@vd v configure(){bind(new l<u<e>>(){ }).h(S); }", "n_tokens": 48, "n_pass": [412, 54, 33]}
{"time": "2021-02-19 18:36:26.541877", "score": "0.5699", "loss": "0.7887", "code": "@vd v configure(){bind(new l<u<e>>(){}).h(S); }", "n_tokens": 47, "n_pass": [414, 55, 34]}
{"time": "2021-02-19 18:36:27.876610", "score": "0.6369", "loss": "0.5231", "code": "@vd v configure(){bind(new l<u<e>>(){}).h(); }", "n_tokens": 46, "n_pass": [420, 56, 35]}
{"time": "2021-02-19 18:36:29.240980", "score": "0.6369", "loss": "0.5231", "code": "@vd v configure(){bind(new l<u<e>>(){}).h();}", "n_tokens": 45, "n_pass": [423, 57, 36]}

Minimal simplified code:
@vd v configure(){bind(new l<u<e>>(){}).h();}

