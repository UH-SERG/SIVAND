
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_298_dfs.java
method_name = dfs
method_body = private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }
predict, score, loss = dfs, 0.9999228715896606, 0.013014751486480236

Trace of simplified code(s):
{"time": "2021-02-20 12:03:17.485981", "score": "0.9999", "loss": "0.0114", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 242, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 12:03:18.860443", "score": "0.9999", "loss": "0.0093", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 212, "n_pass": [22, 2, 2]}
{"time": "2021-02-20 12:03:20.281132", "score": "0.9999", "loss": "0.0097", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left.right, curr, root.val + 1); }", "n_tokens": 181, "n_pass": [25, 3, 3]}
{"time": "2021-02-20 12:03:21.628334", "score": "0.9926", "loss": "0.1174", "code": "private void dfs(TreeNode root, int curr, int target) { if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 166, "n_pass": [44, 4, 4]}
{"time": "2021-02-20 12:03:23.317986", "score": "0.9516", "loss": "0.2501", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 151, "n_pass": [49, 5, 5]}
{"time": "2021-02-20 12:03:24.685664", "score": "0.8737", "loss": "0.5143", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; } max = Math.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 136, "n_pass": [51, 6, 6]}
{"time": "2021-02-20 12:03:27.743216", "score": "0.9679", "loss": "0.1453", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; }ath.max(max, curr); dfs(root.lefroot.val + 1); }", "n_tokens": 128, "n_pass": [80, 8, 7]}
{"time": "2021-02-20 12:03:29.073957", "score": "0.9879", "loss": "0.0984", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; }ath.max(r); dfs(root.lefroot.val + 1); }", "n_tokens": 120, "n_pass": [82, 9, 8]}
{"time": "2021-02-20 12:03:31.723990", "score": "0.9938", "loss": "0.0722", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; }ath.max(r); dfs(root.val + 1); }", "n_tokens": 112, "n_pass": [84, 11, 9]}
{"time": "2021-02-20 12:03:33.059439", "score": "0.9879", "loss": "0.0907", "code": "private void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; }ath.max(r); dfs( + 1); }", "n_tokens": 104, "n_pass": [85, 12, 10]}
{"time": "2021-02-20 12:03:34.373575", "score": "0.9879", "loss": "0.0907", "code": " void dfs(TreeNode root, int curr, int target) { if (get) { curr++;  1; }ath.max(r); dfs( + 1); }", "n_tokens": 97, "n_pass": [87, 13, 11]}
{"time": "2021-02-20 12:03:36.058968", "score": "0.9848", "loss": "0.0866", "code": " void dfs(TreeNode root, intint target) { if (get) { curr++;  1; }ath.max(r); dfs( + 1); }", "n_tokens": 90, "n_pass": [92, 14, 12]}
{"time": "2021-02-20 12:03:37.354569", "score": "0.9753", "loss": "0.1315", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; }ath.max(r); dfs( + 1); }", "n_tokens": 82, "n_pass": [95, 15, 13]}
{"time": "2021-02-20 12:03:40.686611", "score": "0.9885", "loss": "0.0788", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; }max(r); dfs( + 1); }", "n_tokens": 78, "n_pass": [133, 17, 14]}
{"time": "2021-02-20 12:03:42.020872", "score": "0.6328", "loss": "1.2232", "code": " void dfs(TreeNode root, intint target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 74, "n_pass": [136, 18, 15]}
{"time": "2021-02-20 12:03:43.362405", "score": "0.5854", "loss": "1.3051", "code": "id dfs(TreeNode root, intint target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 71, "n_pass": [138, 19, 16]}
{"time": "2021-02-20 12:03:46.720041", "score": "0.369", "loss": "1.9954", "code": "id dfs(TreeN root, intint target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 68, "n_pass": [143, 21, 17]}
{"time": "2021-02-20 12:03:48.025805", "score": "0.3293", "loss": "2.2689", "code": "id dfs(TreeN root, it target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 64, "n_pass": [146, 22, 18]}
{"time": "2021-02-20 12:03:51.754098", "score": "0.2596", "loss": "2.4871", "code": "id dfs(Tr root, it target) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 61, "n_pass": [161, 24, 19]}
{"time": "2021-02-20 12:03:53.086356", "score": "0.2224", "loss": "2.6577", "code": "id dfs(Tr root, it ta) {  { curr++;  1; }max(r); dfs(); }", "n_tokens": 57, "n_pass": [165, 25, 20]}
{"time": "2021-02-20 12:03:59.438920", "score": "0.2224", "loss": "2.6577", "code": "id dfs(Tr root, it ta) {  { curr++;1; }max(r); dfs(); }", "n_tokens": 55, "n_pass": [218, 28, 21]}
{"time": "2021-02-20 12:04:00.744969", "score": "0.5243", "loss": "1.4858", "code": "id dfs(Tr root, it ta) {  { curr++; }max(r); dfs(); }", "n_tokens": 53, "n_pass": [219, 29, 22]}
{"time": "2021-02-20 12:04:02.038823", "score": "0.7596", "loss": "0.9089", "code": "id dfs(Tr root, it ta) {  { curr++; }x(r); dfs(); }", "n_tokens": 51, "n_pass": [221, 30, 23]}
{"time": "2021-02-20 12:04:04.624261", "score": "0.7557", "loss": "0.8888", "code": "d dfs(Tr root, it ta) {  { curr++; }x(r); dfs(); }", "n_tokens": 50, "n_pass": [229, 32, 24]}
{"time": "2021-02-20 12:04:08.336159", "score": "0.824", "loss": "0.6578", "code": "d dfs(Tr root,t ta) {  { curr++; }x(r); dfs(); }", "n_tokens": 48, "n_pass": [238, 34, 25]}
{"time": "2021-02-20 12:04:09.655205", "score": "0.4315", "loss": "1.8828", "code": "d dfs(Tr root,t ta) {  {urr++; }x(r); dfs(); }", "n_tokens": 46, "n_pass": [244, 35, 26]}
{"time": "2021-02-20 12:04:10.948605", "score": "0.4408", "loss": "1.3443", "code": "d dfs(Tr root,t ta) {  {r++; }x(r); dfs(); }", "n_tokens": 44, "n_pass": [245, 36, 27]}
{"time": "2021-02-20 12:04:19.553585", "score": "0.4408", "loss": "1.3443", "code": "d dfs(Tr root,t ta) {  {r++;}x(r); dfs(); }", "n_tokens": 43, "n_pass": [315, 39, 28]}
{"time": "2021-02-20 12:04:20.845238", "score": "0.441", "loss": "1.5858", "code": "d dfs(Tr root,t ta) {  {r++;}(r); dfs(); }", "n_tokens": 42, "n_pass": [316, 40, 29]}
{"time": "2021-02-20 12:04:22.491626", "score": "0.441", "loss": "1.5858", "code": "d dfs(Tr root,t ta) {  {r++;}(r);dfs(); }", "n_tokens": 41, "n_pass": [321, 41, 30]}
{"time": "2021-02-20 12:04:27.688745", "score": "0.441", "loss": "1.5858", "code": "d dfs(Tr root,t ta) {  {r++;}(r);dfs();}", "n_tokens": 40, "n_pass": [328, 45, 31]}
{"time": "2021-02-20 12:04:30.789222", "score": "0.6201", "loss": "1.0365", "code": "d dfs(r root,t ta) {  {r++;}(r);dfs();}", "n_tokens": 39, "n_pass": [336, 46, 32]}
{"time": "2021-02-20 12:04:37.274511", "score": "0.4631", "loss": "1.3747", "code": "d dfs(r root,t a) {  {r++;}(r);dfs();}", "n_tokens": 38, "n_pass": [346, 51, 33]}
{"time": "2021-02-20 12:04:38.556353", "score": "0.4631", "loss": "1.3747", "code": "d dfs(r root,t a){  {r++;}(r);dfs();}", "n_tokens": 37, "n_pass": [349, 52, 34]}
{"time": "2021-02-20 12:04:39.851043", "score": "0.4631", "loss": "1.3747", "code": "d dfs(r root,t a){ {r++;}(r);dfs();}", "n_tokens": 36, "n_pass": [351, 53, 35]}
{"time": "2021-02-20 12:04:41.157914", "score": "0.4631", "loss": "1.3747", "code": "d dfs(r root,t a){{r++;}(r);dfs();}", "n_tokens": 35, "n_pass": [352, 54, 36]}

Minimal simplified code:
d dfs(r root,t a){{r++;}(r);dfs();}

