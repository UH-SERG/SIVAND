
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/novoda__merlin/demo/src/main/java/com/novoda/merlin/demo/presentation/RxJavaDemoActivity_onResume.java
method_name = onResume
method_body = @Override protected void onResume() { super.onResume(); Subscription merlinSubscription = MerlinObservable.from(this).distinctUntilChanged().subscribe(new NetworkAction(networkStatusDisplayer, viewToAttachDisplayerTo)); subscriptions.add(merlinSubscription); }
predict, score, loss = onResume, 0.9996922016143799, 0.0006708896835334599

Trace of simplified code(s):
{"time": "2021-02-20 11:49:48.914133", "score": "0.9997", "loss": "0.0007", "code": "@Override protected void onResume() { super.onResume(); Subscription merlinSubscription = MerlinObservable.from(this).distinctUntilChanged().subscribe(new NetworkAction(networkStatusDisplayer, viewToAttachDisplayerTo)); subscriptions.add(merlinSubscription); }", "n_tokens": 260, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 11:49:50.246674", "score": "0.9998", "loss": "0.0004", "code": "@Override protected void onResume() { super.onResume(); SubscriptlChanged().subscribe(new NetworkAction(networkStatusDisplayer, viewToAttachDisplayerTo)); subscriptions.add(merlinSubscription); }", "n_tokens": 195, "n_pass": [9, 2, 2]}
{"time": "2021-02-20 11:49:51.927208", "score": "0.9998", "loss": "0.0005", "code": "@Override protected void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkStatusDisplayer, viewToAttachDisplayerTo)); subscriptions.add(merlinSubscription); }", "n_tokens": 179, "n_pass": [36, 3, 3]}
{"time": "2021-02-20 11:49:53.291321", "score": "0.9998", "loss": "0.0005", "code": "@Override protected void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkSviewToAttachDisplayerTo)); subscriptions.add(merlinSubscription); }", "n_tokens": 163, "n_pass": [38, 4, 4]}
{"time": "2021-02-20 11:49:54.651433", "score": "0.9996", "loss": "0.0008", "code": "@Override protected void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkSlayerTo)); subscriptions.add(merlinSubscription); }", "n_tokens": 147, "n_pass": [39, 5, 5]}
{"time": "2021-02-20 11:49:57.627219", "score": "0.9995", "loss": "0.001", "code": "@Override protected void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkSlayerTo)); subsc.add(merlinSubscription); }", "n_tokens": 139, "n_pass": [69, 7, 6]}
{"time": "2021-02-20 11:49:58.969240", "score": "0.9994", "loss": "0.0012", "code": "@Override protected void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkSlayerTo)); subsc.add(merlption); }", "n_tokens": 130, "n_pass": [71, 8, 7]}
{"time": "2021-02-20 11:50:00.302857", "score": "0.9992", "loss": "0.0018", "code": "@Overridted void onResume() { super.onResume(); Subscripcribe(new NetworkAction(networkSlayerTo)); subsc.add(merlption); }", "n_tokens": 122, "n_pass": [74, 9, 8]}
{"time": "2021-02-20 11:50:04.911084", "score": "0.9992", "loss": "0.0018", "code": "@Overridted void onResume() { super.onResume(); cribe(new NetworkAction(networkSlayerTo)); subsc.add(merlption); }", "n_tokens": 114, "n_pass": [80, 12, 9]}
{"time": "2021-02-20 11:50:06.250282", "score": "0.9987", "loss": "0.0028", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(networkSlayerTo)); subsc.add(merlption); }", "n_tokens": 106, "n_pass": [82, 13, 10]}
{"time": "2021-02-20 11:50:07.575726", "score": "0.9991", "loss": "0.002", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(layerTo)); subsc.add(merlption); }", "n_tokens": 98, "n_pass": [84, 14, 11]}
{"time": "2021-02-20 11:50:12.229403", "score": "0.9988", "loss": "0.0026", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(rTo)); subsc.add(merlption); }", "n_tokens": 94, "n_pass": [121, 17, 12]}
{"time": "2021-02-20 11:50:13.549160", "score": "0.9989", "loss": "0.0024", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(rTo)); s.add(merlption); }", "n_tokens": 90, "n_pass": [123, 18, 13]}
{"time": "2021-02-20 11:50:14.857834", "score": "0.9969", "loss": "0.0074", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(rTo)); s(merlption); }", "n_tokens": 86, "n_pass": [124, 19, 14]}
{"time": "2021-02-20 11:50:16.173490", "score": "0.9969", "loss": "0.0074", "code": "@Overridted void onResume() { super.onResume(); cribe(nekAction(rTo)); s(mern); }", "n_tokens": 81, "n_pass": [126, 20, 15]}
{"time": "2021-02-20 11:50:17.482620", "score": "0.9969", "loss": "0.0074", "code": "@Oveted void onResume() { super.onResume(); cribe(nekAction(rTo)); s(mern); }", "n_tokens": 77, "n_pass": [129, 21, 16]}
{"time": "2021-02-20 11:50:25.369148", "score": "0.9979", "loss": "0.0052", "code": "@Oveted void onResume() { super.onResume(); e(nekAction(rTo)); s(mern); }", "n_tokens": 73, "n_pass": [140, 26, 17]}
{"time": "2021-02-20 11:50:26.675893", "score": "0.9932", "loss": "0.02", "code": "@Oveted void onResume() { super.onResume(); e(neion(rTo)); s(mern); }", "n_tokens": 69, "n_pass": [142, 27, 18]}
{"time": "2021-02-20 11:50:34.980723", "score": "0.9959", "loss": "0.0131", "code": "@Oveted void onResume() { super.onResume(); e(nen(rTo)); s(mern); }", "n_tokens": 67, "n_pass": [194, 32, 19]}
{"time": "2021-02-20 11:50:36.279013", "score": "0.9899", "loss": "0.0365", "code": "@Oveted void onResume() { super.onResume(); e(nen(o)); s(mern); }", "n_tokens": 65, "n_pass": [195, 33, 20]}
{"time": "2021-02-20 11:50:37.589511", "score": "0.9983", "loss": "0.0038", "code": "@Oveted void onResume() { super.onResume(); e(nen(o));(mern); }", "n_tokens": 63, "n_pass": [198, 34, 21]}
{"time": "2021-02-20 11:50:38.877599", "score": "0.9986", "loss": "0.0035", "code": "@Oveted void onResume() { super.onResume(); e(nen(o));(mn); }", "n_tokens": 61, "n_pass": [200, 35, 22]}
{"time": "2021-02-20 11:50:40.197491", "score": "0.9986", "loss": "0.0035", "code": "@Oted void onResume() { super.onResume(); e(nen(o));(mn); }", "n_tokens": 59, "n_pass": [204, 36, 23]}
{"time": "2021-02-20 11:50:41.483045", "score": "0.9987", "loss": "0.0032", "code": "@Od void onResume() { super.onResume(); e(nen(o));(mn); }", "n_tokens": 57, "n_pass": [205, 37, 24]}
{"time": "2021-02-20 11:50:43.118124", "score": "0.996", "loss": "0.0108", "code": "@Od id onResume() { super.onResume(); e(nen(o));(mn); }", "n_tokens": 55, "n_pass": [207, 38, 25]}
{"time": "2021-02-20 11:50:56.699424", "score": "0.9951", "loss": "0.0138", "code": "@Od id onResume() { super.onResume(); e(n(o));(mn); }", "n_tokens": 53, "n_pass": [226, 47, 26]}
{"time": "2021-02-20 11:51:13.202116", "score": "0.9987", "loss": "0.0027", "code": "@Od id onResume() { super.onResume(); e((o));(mn); }", "n_tokens": 52, "n_pass": [305, 56, 27]}
{"time": "2021-02-20 11:51:14.501073", "score": "0.998", "loss": "0.0042", "code": "@Od id onResume() { super.onResume(); e((o));(n); }", "n_tokens": 51, "n_pass": [311, 57, 28]}
{"time": "2021-02-20 11:51:15.800002", "score": "0.9983", "loss": "0.0035", "code": "@d id onResume() { super.onResume(); e((o));(n); }", "n_tokens": 50, "n_pass": [317, 58, 29]}
{"time": "2021-02-20 11:51:17.812306", "score": "0.9989", "loss": "0.0023", "code": "@d d onResume() { super.onResume(); e((o));(n); }", "n_tokens": 49, "n_pass": [320, 59, 30]}
{"time": "2021-02-20 11:51:22.709070", "score": "0.9989", "loss": "0.0023", "code": "@d d onResume(){ super.onResume(); e((o));(n); }", "n_tokens": 48, "n_pass": [333, 60, 31]}
{"time": "2021-02-20 11:51:24.012103", "score": "0.9989", "loss": "0.0023", "code": "@d d onResume(){super.onResume(); e((o));(n); }", "n_tokens": 47, "n_pass": [335, 61, 32]}
{"time": "2021-02-20 11:51:43.538313", "score": "0.9989", "loss": "0.0023", "code": "@d d onResume(){super.onResume();e((o));(n); }", "n_tokens": 46, "n_pass": [353, 76, 33]}
{"time": "2021-02-20 11:51:44.836790", "score": "0.9992", "loss": "0.0016", "code": "@d d onResume(){super.onResume();((o));(n); }", "n_tokens": 45, "n_pass": [354, 77, 34]}
{"time": "2021-02-20 11:52:09.015569", "score": "0.9992", "loss": "0.0016", "code": "@d d onResume(){super.onResume();((o));(n);}", "n_tokens": 44, "n_pass": [401, 92, 35]}

Minimal simplified code:
@d d onResume(){super.onResume();((o));(n);}

