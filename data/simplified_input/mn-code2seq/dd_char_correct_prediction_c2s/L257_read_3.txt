
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/simplemagic/src/main/java/com/j256/simplemagic/ContentInfoInputStreamWrapper_read.java
method_name = read
method_body = @Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }
predict, score, loss = read, 0.9736566543579102, 0.07410338521003723

Trace of simplified code(s):
{"time": "2021-02-20 00:59:53.580675", "score": "0.9803", "loss": "0.0429", "code": "@Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 291, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 00:59:55.352952", "score": "0.9714", "loss": "0.1215", "code": "nt read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 273, "n_pass": [44, 2, 2]}
{"time": "2021-02-20 00:59:56.721636", "score": "0.9533", "loss": "0.1755", "code": "nt read(byte[] b, int off, int len)  { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 255, "n_pass": [46, 3, 3]}
{"time": "2021-02-20 00:59:58.113769", "score": "0.659", "loss": "0.9516", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 246, "n_pass": [91, 4, 4]}
{"time": "2021-02-20 00:59:59.587443", "score": "0.5271", "loss": "1.2204", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByh - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 237, "n_pass": [95, 5, 5]}
{"time": "2021-02-20 01:00:00.970456", "score": "0.5573", "loss": "1.2827", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 228, "n_pass": [96, 6, 6]}
{"time": "2021-02-20 01:00:02.336394", "score": "0.5899", "loss": "1.3429", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 219, "n_pass": [100, 7, 7]}
{"time": "2021-02-20 01:00:03.684335", "score": "0.5954", "loss": "1.1994", "code": "nt read(byte[] b, int off, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 210, "n_pass": [104, 8, 8]}
{"time": "2021-02-20 01:00:06.379539", "score": "0.562", "loss": "1.1873", "code": "nt read(byte[] b, int len)  { int numRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 201, "n_pass": [114, 10, 9]}
{"time": "2021-02-20 01:00:09.097070", "score": "0.7724", "loss": "0.7943", "code": "nt read(byte[] b, int len)  { inmRead = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 197, "n_pass": [185, 12, 10]}
{"time": "2021-02-20 01:00:10.434673", "score": "0.7208", "loss": "0.9736", "code": "nt read(byte[] b, int len)  { ind = dead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 193, "n_pass": [186, 13, 11]}
{"time": "2021-02-20 01:00:11.792998", "score": "0.5596", "loss": "1.4074", "code": "nt read(byte[] b, int len)  { indead(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 189, "n_pass": [187, 14, 12]}
{"time": "2021-02-20 01:00:13.129919", "score": "0.7046", "loss": "0.9446", "code": "nt read(byte[] b, int len)  { in(b, off, len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 185, "n_pass": [188, 15, 13]}
{"time": "2021-02-20 01:00:14.497612", "score": "0.6518", "loss": "1.1038", "code": "nt read(byte[] b, int len)  { in(b,  len); int left = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 181, "n_pass": [190, 16, 14]}
{"time": "2021-02-20 01:00:15.834863", "score": "0.6362", "loss": "1.1199", "code": "nt read(byte[] b, int len)  { in(b,  len); ieft = firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 177, "n_pass": [193, 17, 15]}
{"time": "2021-02-20 01:00:17.175744", "score": "0.6509", "loss": "1.0467", "code": "nt read(byte[] b, int len)  { in(b,  len); i= firstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 173, "n_pass": [194, 18, 16]}
{"time": "2021-02-20 01:00:18.518697", "score": "0.578", "loss": "1.4001", "code": "nt read(byte[] b, int len)  { in(b,  len); irstByount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 169, "n_pass": [195, 19, 17]}
{"time": "2021-02-20 01:00:19.865550", "score": "0.6256", "loss": "1.1978", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (int i = off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 164, "n_pass": [196, 20, 18]}
{"time": "2021-02-20 01:00:21.229464", "score": "0.4985", "loss": "1.761", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 159, "n_pass": [206, 21, 19]}
{"time": "2021-02-20 01:00:22.576045", "score": "0.4518", "loss": "1.8684", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 154, "n_pass": [211, 22, 20]}
{"time": "2021-02-20 01:00:23.916888", "score": "0.3656", "loss": "2.0885", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } return numRead; }", "n_tokens": 149, "n_pass": [213, 23, 21]}
{"time": "2021-02-20 01:00:25.310809", "score": "0.4359", "loss": "1.9626", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } renumRead; }", "n_tokens": 144, "n_pass": [218, 24, 22]}
{"time": "2021-02-20 01:00:26.678366", "score": "0.3889", "loss": "2.1439", "code": "nt read(byte[] b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 139, "n_pass": [219, 25, 23]}
{"time": "2021-02-20 01:00:34.264288", "score": "0.3189", "loss": "2.4285", "code": "nt read(byte b, int len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 137, "n_pass": [318, 29, 24]}
{"time": "2021-02-20 01:00:35.603475", "score": "0.2888", "loss": "2.6563", "code": "nt read(byte b, t len)  { in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 135, "n_pass": [320, 30, 25]}
{"time": "2021-02-20 01:00:38.303061", "score": "0.2888", "loss": "2.6563", "code": "nt read(byte b, t len){ in(b,  len); iount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 133, "n_pass": [324, 32, 26]}
{"time": "2021-02-20 01:00:42.349608", "score": "0.2888", "loss": "2.6563", "code": "nt read(byte b, t len){ in(b,  len);ount; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 131, "n_pass": [332, 35, 27]}
{"time": "2021-02-20 01:00:43.679453", "score": "0.2974", "loss": "2.6458", "code": "nt read(byte b, t len){ in(b,  len);nt; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 129, "n_pass": [333, 36, 28]}
{"time": "2021-02-20 01:00:45.030541", "score": "0.3036", "loss": "2.5439", "code": "nt read(byte b, t len){ in(b,  len);; if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 127, "n_pass": [334, 37, 29]}
{"time": "2021-02-20 01:00:46.379173", "score": "0.2737", "loss": "2.7362", "code": "nt read(byte b, t len){ in(b,  len);if (left > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 125, "n_pass": [335, 38, 30]}
{"time": "2021-02-20 01:00:47.700399", "score": "0.3269", "loss": "2.6285", "code": "nt read(byte b, t len){ in(b,  len);if (ft > numRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 123, "n_pass": [338, 39, 31]}
{"time": "2021-02-20 01:00:49.216942", "score": "0.2502", "loss": "2.8894", "code": "nt read(byte b, t len){ in(b,  len);if (ft >umRead) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 121, "n_pass": [341, 40, 32]}
{"time": "2021-02-20 01:00:50.563679", "score": "0.3109", "loss": "2.6742", "code": "nt read(byte b, t len){ in(b,  len);if (ft >Read) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 119, "n_pass": [342, 41, 33]}
{"time": "2021-02-20 01:00:51.882479", "score": "0.302", "loss": "2.6767", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRead; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 117, "n_pass": [343, 42, 34]}
{"time": "2021-02-20 01:00:54.699443", "score": "0.2861", "loss": "2.6528", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRd; } for (intoff;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 115, "n_pass": [348, 44, 35]}
{"time": "2021-02-20 01:00:56.065303", "score": "0.3299", "loss": "2.4364", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ left; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 112, "n_pass": [354, 45, 36]}
{"time": "2021-02-20 01:00:57.387055", "score": "0.3398", "loss": "2.4724", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ft; i++) { fytes[ount++] = b[i]; } read; }", "n_tokens": 109, "n_pass": [356, 46, 37]}
{"time": "2021-02-20 01:00:58.750529", "score": "0.3939", "loss": "2.222", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ft; i++) { fs[ount++] = b[i]; } read; }", "n_tokens": 106, "n_pass": [361, 47, 38]}
{"time": "2021-02-20 01:01:00.076968", "score": "0.3998", "loss": "2.2197", "code": "nt read(byte b, t len){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 103, "n_pass": [363, 48, 39]}
{"time": "2021-02-20 01:01:04.001296", "score": "0.3538", "loss": "2.4822", "code": "nt read(te b, t len){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 101, "n_pass": [375, 50, 40]}
{"time": "2021-02-20 01:01:05.430382", "score": "0.3009", "loss": "2.843", "code": "nt read(te b, t n){ in(b,  len);if (ft >ad) {umRd; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 99, "n_pass": [380, 51, 41]}
{"time": "2021-02-20 01:01:06.772845", "score": "0.2787", "loss": "2.8603", "code": "nt read(te b, t n){ in(b, en);if (ft >ad) {umRd; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 97, "n_pass": [386, 52, 42]}
{"time": "2021-02-20 01:01:08.101338", "score": "0.1875", "loss": "3.2671", "code": "nt read(te b, t n){ in(b, en);if (ftad) {umRd; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 95, "n_pass": [392, 53, 43]}
{"time": "2021-02-20 01:01:11.005868", "score": "0.2487", "loss": "2.9474", "code": "nt read(te b, t n){ in(b, en);if (ftad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 93, "n_pass": [396, 55, 44]}
{"time": "2021-02-20 01:01:14.848498", "score": "0.3275", "loss": "3.0724", "code": "nt read(te b, t n){ in(ben);if (ftad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 91, "n_pass": [427, 57, 45]}
{"time": "2021-02-20 01:01:16.162936", "score": "0.3216", "loss": "2.7872", "code": "nt read(te b, t n){ in(b);if (ftad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 89, "n_pass": [428, 58, 46]}
{"time": "2021-02-20 01:01:17.500415", "score": "0.4032", "loss": "2.3149", "code": "nt read(te b, t n){ in(b);if (ad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 87, "n_pass": [432, 59, 47]}
{"time": "2021-02-20 01:01:21.331164", "score": "0.2425", "loss": "3.0502", "code": "nt read(te b, t n){ (b);if (ad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 85, "n_pass": [464, 61, 48]}
{"time": "2021-02-20 01:01:30.342508", "score": "0.2425", "loss": "3.0502", "code": "nt read(te b, t n){ (b);if(ad) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 84, "n_pass": [576, 63, 49]}
{"time": "2021-02-20 01:01:31.680065", "score": "0.1848", "loss": "3.6574", "code": "nt read(te b, t n){ (b);if(d) {ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 83, "n_pass": [577, 64, 50]}
{"time": "2021-02-20 01:01:33.008669", "score": "0.1848", "loss": "3.6574", "code": "nt read(te b, t n){ (b);if(d){ud; } for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 82, "n_pass": [580, 65, 51]}
{"time": "2021-02-20 01:01:36.948036", "score": "0.1848", "loss": "3.6574", "code": "nt read(te b, t n){ (b);if(d){ud;} for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 81, "n_pass": [585, 68, 52]}
{"time": "2021-02-20 01:01:38.262424", "score": "0.1848", "loss": "3.6574", "code": "nt read(te b, t n){ (b);if(d){ud;}for (inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 80, "n_pass": [587, 69, 53]}
{"time": "2021-02-20 01:01:39.578328", "score": "0.1848", "loss": "3.6574", "code": "nt read(te b, t n){ (b);if(d){ud;}for(inf;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 79, "n_pass": [591, 70, 54]}
{"time": "2021-02-20 01:01:42.420442", "score": "0.1798", "loss": "4.1277", "code": "nt read(te b, t n){ (b);if(d){ud;}for(in;+ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 78, "n_pass": [595, 72, 55]}
{"time": "2021-02-20 01:01:43.743248", "score": "0.1879", "loss": "3.9358", "code": "nt read(te b, t n){ (b);if(d){ud;}for(in;ft; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 77, "n_pass": [597, 73, 56]}
{"time": "2021-02-20 01:01:45.035612", "score": "0.1762", "loss": "3.8879", "code": "nt read(te b, t n){ (b);if(d){ud;}for(in;t; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 76, "n_pass": [598, 74, 57]}
{"time": "2021-02-20 01:01:46.360658", "score": "0.2089", "loss": "3.8113", "code": "nt read(te b, t n){ (b);if(d){ud;}for(in;; i++) { fs[o++] = b[i]; } read; }", "n_tokens": 75, "n_pass": [599, 75, 58]}
{"time": "2021-02-20 01:01:47.691538", "score": "0.2089", "loss": "3.8113", "code": "nt read(te b, t n){ (b);if(d){ud;}for(in;;i++) { fs[o++] = b[i]; } read; }", "n_tokens": 74, "n_pass": [601, 76, 59]}
{"time": "2021-02-20 01:01:53.019462", "score": "0.1885", "loss": "4.2251", "code": "t read(te b, t n){ (b);if(d){ud;}for(in;;i++) { fs[o++] = b[i]; } read; }", "n_tokens": 73, "n_pass": [619, 80, 60]}
{"time": "2021-02-20 01:01:59.142292", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){ (b);if(d){ud;}for(in;;i++) { fs[o++] = b[i]; } read; }", "n_tokens": 72, "n_pass": [632, 83, 61]}
{"time": "2021-02-20 01:02:00.475076", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++) { fs[o++] = b[i]; } read; }", "n_tokens": 71, "n_pass": [638, 84, 62]}
{"time": "2021-02-20 01:02:19.362126", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){ fs[o++] = b[i]; } read; }", "n_tokens": 70, "n_pass": [727, 94, 63]}
{"time": "2021-02-20 01:02:20.695229", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++] = b[i]; } read; }", "n_tokens": 69, "n_pass": [728, 95, 64]}
{"time": "2021-02-20 01:02:24.644600", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]= b[i]; } read; }", "n_tokens": 68, "n_pass": [736, 98, 65]}
{"time": "2021-02-20 01:02:25.980443", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]=b[i]; } read; }", "n_tokens": 67, "n_pass": [738, 99, 66]}
{"time": "2021-02-20 01:02:27.390054", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]=b[i];} read; }", "n_tokens": 66, "n_pass": [744, 100, 67]}
{"time": "2021-02-20 01:02:28.713246", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]=b[i];}read; }", "n_tokens": 65, "n_pass": [746, 101, 68]}
{"time": "2021-02-20 01:02:35.233483", "score": "0.1885", "loss": "4.2251", "code": "t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]=b[i];}read;}", "n_tokens": 64, "n_pass": [752, 106, 69]}

Minimal simplified code:
t read(te b,t n){(b);if(d){ud;}for(in;;i++){fs[o++]=b[i];}read;}

