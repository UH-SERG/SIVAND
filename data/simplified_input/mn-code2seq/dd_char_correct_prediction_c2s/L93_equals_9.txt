
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/diffplug__spotless/lib/src/main/java/com/diffplug/spotless/LazyForwardingEquality_equals.java
method_name = equals
method_body = @Override public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForwardingEquality<?> otherCast = (LazyForwardingEquality<?>) other; return Arrays.equals(otherCast.toBytes(), toBytes()); } else { return false; } }
predict, score, loss = equals, 0.9950692653656006, 0.00896188709884882

Trace of simplified code(s):
{"time": "2021-02-19 14:18:57.108519", "score": "0.9951", "loss": "0.009", "code": "@Override public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForwardingEquality<?> otherCast = (LazyForwardingEquality<?>) other; return Arrays.equals(otherCast.toBytes(), toBytes()); } else { return false; } }", "n_tokens": 292, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 14:18:58.456297", "score": "0.9777", "loss": "0.0366", "code": "@Override public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForArrays.equals(otherCast.toBytes(), toBytes()); } else { return false; } }", "n_tokens": 219, "n_pass": [10, 2, 2]}
{"time": "2021-02-19 14:19:00.518852", "score": "0.9396", "loss": "0.0906", "code": "@Override public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForArrays.equals(ottoBytes()); } else { return false; } }", "n_tokens": 200, "n_pass": [38, 3, 3]}
{"time": "2021-02-19 14:19:02.269960", "score": "0.9306", "loss": "0.1053", "code": "@Override public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 191, "n_pass": [72, 4, 4]}
{"time": "2021-02-19 14:19:03.607447", "score": "0.6019", "loss": "0.7076", "code": " public final boolean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 182, "n_pass": [76, 5, 5]}
{"time": "2021-02-19 14:19:04.942878", "score": "0.5336", "loss": "1.0611", "code": " public fean equals(Object other) { if (other == null) { return false; } else if (getClass().equals(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 173, "n_pass": [78, 6, 6]}
{"time": "2021-02-19 14:19:06.688681", "score": "0.4026", "loss": "1.4792", "code": " public fean equals(Object other) { if (other == null) { return false; } else if (getClass(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 164, "n_pass": [88, 7, 7]}
{"time": "2021-02-19 14:19:09.355054", "score": "0.4025", "loss": "1.5641", "code": "ean equals(Object other) { if (other == null) { return false; } else if (getClass(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 155, "n_pass": [97, 9, 8]}
{"time": "2021-02-19 14:19:14.519988", "score": "0.3578", "loss": "1.8464", "code": "ean equals(Object other) { if (o == null) { return false; } else if (getClass(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 151, "n_pass": [157, 12, 9]}
{"time": "2021-02-19 14:19:15.842040", "score": "0.199", "loss": "2.8081", "code": "ean equals(Object other) { if (onull) { return false; } else if (getClass(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 147, "n_pass": [158, 13, 10]}
{"time": "2021-02-19 14:19:17.165733", "score": "0.2684", "loss": "2.342", "code": "ean equals(Object other) { if (o) { return false; } else if (getClass(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 143, "n_pass": [159, 14, 11]}
{"time": "2021-02-19 14:19:21.175873", "score": "0.251", "loss": "2.4911", "code": "ean equals(Object other) { if (o) { return false; } else if (ges(other.getClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 138, "n_pass": [167, 17, 12]}
{"time": "2021-02-19 14:19:22.500850", "score": "0.1776", "loss": "3.0185", "code": "ean equals(Object other) { if (o) { return false; } else if (ges(othtClass())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 133, "n_pass": [169, 18, 13]}
{"time": "2021-02-19 14:19:23.821056", "score": "0.1712", "loss": "2.9139", "code": "ean equals(Object other) { if (o) { return false; } else if (ges(oths())) { LazyForArrays.equals(ot); } else { return false; } }", "n_tokens": 128, "n_pass": [170, 19, 14]}
{"time": "2021-02-19 14:19:29.151135", "score": "0.2105", "loss": "2.6963", "code": "ean equals(Object other) { if (o) { return false; } else if (ges(oths())) { LazyForArrays.equals(ot); } { return false; } }", "n_tokens": 123, "n_pass": [178, 23, 15]}
{"time": "2021-02-19 14:19:42.257171", "score": "0.1782", "loss": "2.8606", "code": "ean equals(Object other) { if (o) { return false; } else if (ges(oths())) { LazyForArrays.equals(ot);  return false; } }", "n_tokens": 120, "n_pass": [261, 32, 16]}
{"time": "2021-02-19 14:19:46.250032", "score": "0.2437", "loss": "2.4473", "code": "n equals(Object other) { if (o) { return false; } else if (ges(oths())) { LazyForArrays.equals(ot);  return false; } }", "n_tokens": 118, "n_pass": [268, 35, 17]}
{"time": "2021-02-19 14:19:58.394297", "score": "0.232", "loss": "2.5787", "code": "n equals(Object other) { if (o) { return false; } else if (g(oths())) { LazyForArrays.equals(ot);  return false; } }", "n_tokens": 116, "n_pass": [299, 43, 18]}
{"time": "2021-02-19 14:19:59.740916", "score": "0.2567", "loss": "2.5143", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { LazyForArrays.equals(ot);  return false; } }", "n_tokens": 114, "n_pass": [301, 44, 19]}
{"time": "2021-02-19 14:20:01.066019", "score": "0.3095", "loss": "2.1093", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { zyForArrays.equals(ot);  return false; } }", "n_tokens": 112, "n_pass": [306, 45, 20]}
{"time": "2021-02-19 14:20:02.388261", "score": "0.2321", "loss": "2.6346", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { orArrays.equals(ot);  return false; } }", "n_tokens": 109, "n_pass": [307, 46, 21]}
{"time": "2021-02-19 14:20:29.442892", "score": "0.2781", "loss": "2.3891", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { rArrays.equals(ot);  return false; } }", "n_tokens": 108, "n_pass": [452, 61, 22]}
{"time": "2021-02-19 14:20:30.787120", "score": "0.2612", "loss": "2.4241", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { Arrays.equals(ot);  return false; } }", "n_tokens": 107, "n_pass": [453, 62, 23]}
{"time": "2021-02-19 14:20:36.064920", "score": "0.2828", "loss": "2.2174", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { Arras.equals(ot);  return false; } }", "n_tokens": 106, "n_pass": [457, 66, 24]}
{"time": "2021-02-19 14:20:37.390318", "score": "0.2992", "loss": "2.2429", "code": "n equals(Object other) { if (o) { return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 105, "n_pass": [458, 67, 25]}
{"time": "2021-02-19 14:20:54.933837", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other) { if (o) { return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 104, "n_pass": [487, 78, 26]}
{"time": "2021-02-19 14:21:08.225706", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){ if (o) { return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 103, "n_pass": [499, 88, 27]}
{"time": "2021-02-19 14:21:09.556691", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if (o) { return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 102, "n_pass": [501, 89, 28]}
{"time": "2021-02-19 14:21:10.878688", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o) { return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 101, "n_pass": [504, 90, 29]}
{"time": "2021-02-19 14:21:12.224243", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o){ return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 100, "n_pass": [508, 91, 30]}
{"time": "2021-02-19 14:21:13.555081", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o){return false; } else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 99, "n_pass": [510, 92, 31]}
{"time": "2021-02-19 14:21:22.920560", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o){return false;} else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 98, "n_pass": [524, 99, 32]}
{"time": "2021-02-19 14:21:24.263401", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o){return false;}else if (g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 97, "n_pass": [526, 100, 33]}
{"time": "2021-02-19 14:21:25.596315", "score": "0.1587", "loss": "3.1079", "code": "n equals(Oject other){if(o){return false;}else if(g(os())) { Arra.equals(ot);  return false; } }", "n_tokens": 96, "n_pass": [534, 101, 34]}
{"time": "2021-02-19 14:21:26.950561", "score": "0.2575", "loss": "2.4037", "code": "n equals(Oject other){if(o){return false;}else if((os())) { Arra.equals(ot);  return false; } }", "n_tokens": 95, "n_pass": [536, 102, 35]}
{"time": "2021-02-19 14:21:28.304800", "score": "0.3242", "loss": "2.048", "code": "n equals(Oject other){if(o){return false;}else if((s())) { Arra.equals(ot);  return false; } }", "n_tokens": 94, "n_pass": [538, 103, 36]}
{"time": "2021-02-19 14:21:29.648716", "score": "0.3242", "loss": "2.048", "code": "n equals(Oject other){if(o){return false;}else if((s())){ Arra.equals(ot);  return false; } }", "n_tokens": 93, "n_pass": [544, 104, 37]}
{"time": "2021-02-19 14:21:30.990213", "score": "0.3242", "loss": "2.048", "code": "n equals(Oject other){if(o){return false;}else if((s())){Arra.equals(ot);  return false; } }", "n_tokens": 92, "n_pass": [546, 105, 38]}
{"time": "2021-02-19 14:21:32.310898", "score": "0.33", "loss": "2.0238", "code": "n equals(Oject other){if(o){return false;}else if((s())){rra.equals(ot);  return false; } }", "n_tokens": 91, "n_pass": [547, 106, 39]}
{"time": "2021-02-19 14:21:33.632567", "score": "0.4304", "loss": "1.5792", "code": "n equals(Oject other){if(o){return false;}else if((s())){ra.equals(ot);  return false; } }", "n_tokens": 90, "n_pass": [548, 107, 40]}
{"time": "2021-02-19 14:21:34.978311", "score": "0.3346", "loss": "2.0193", "code": "n equals(Oject other){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 89, "n_pass": [549, 108, 41]}
{"time": "2021-02-19 14:21:51.250892", "score": "0.3934", "loss": "1.5997", "code": "n equals(ject other){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 88, "n_pass": [578, 118, 42]}
{"time": "2021-02-19 14:21:56.565219", "score": "0.4011", "loss": "1.6936", "code": "n equals(jec other){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 87, "n_pass": [582, 122, 43]}
{"time": "2021-02-19 14:21:57.886160", "score": "0.2683", "loss": "2.2375", "code": "n equals(jec ther){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 86, "n_pass": [584, 123, 44]}
{"time": "2021-02-19 14:21:59.228752", "score": "0.2036", "loss": "2.6848", "code": "n equals(jec her){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 85, "n_pass": [585, 124, 45]}
{"time": "2021-02-19 14:22:00.552120", "score": "0.5383", "loss": "1.3431", "code": "n equals(jec er){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 84, "n_pass": [586, 125, 46]}
{"time": "2021-02-19 14:22:01.894933", "score": "0.2518", "loss": "2.3547", "code": "n equals(jec r){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 83, "n_pass": [587, 126, 47]}
{"time": "2021-02-19 14:22:26.058029", "score": "0.2023", "loss": "2.7136", "code": "n equals(ec r){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 82, "n_pass": [654, 142, 48]}
{"time": "2021-02-19 14:22:27.379912", "score": "0.2475", "loss": "2.4081", "code": "n equals(c r){if(o){return false;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 81, "n_pass": [655, 143, 49]}
{"time": "2021-02-19 14:22:30.065052", "score": "0.1827", "loss": "2.9641", "code": "n equals(c r){if(o){return alse;}else if((s())){a.equals(ot);  return false; } }", "n_tokens": 80, "n_pass": [674, 145, 50]}
{"time": "2021-02-19 14:23:08.775269", "score": "0.1827", "loss": "2.9641", "code": "n equals(c r){if(o){return alse;}else if((s())){a.equals(ot); return false; } }", "n_tokens": 79, "n_pass": [775, 170, 51]}
{"time": "2021-02-19 14:23:10.118683", "score": "0.1827", "loss": "2.9641", "code": "n equals(c r){if(o){return alse;}else if((s())){a.equals(ot);return false; } }", "n_tokens": 78, "n_pass": [776, 171, 52]}
{"time": "2021-02-19 14:23:19.483938", "score": "0.1827", "loss": "2.9641", "code": "n equals(c r){if(o){return alse;}else if((s())){a.equals(ot);return false;} }", "n_tokens": 77, "n_pass": [790, 178, 53]}
{"time": "2021-02-19 14:23:20.808794", "score": "0.1827", "loss": "2.9641", "code": "n equals(c r){if(o){return alse;}else if((s())){a.equals(ot);return false;}}", "n_tokens": 76, "n_pass": [792, 179, 54]}

Minimal simplified code:
n equals(c r){if(o){return alse;}else if((s())){a.equals(ot);return false;}}

