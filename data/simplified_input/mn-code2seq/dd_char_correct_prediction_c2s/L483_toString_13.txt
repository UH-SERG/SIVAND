
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/jdk1.1/java/security/cert/CertPath_toString.java
method_name = toString
method_body = public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); s.append('\n').append(getType()).append(" Cert Path: length = ").append(certs.size()).append("\n[\n"); while (iter.hasNext()) { s.append("=========================================================Certificate ").append(iter.nextIndex()).append('\n'); s.append(iter.next()).append('\n'); s.append("========================================================Certificate end\n\n\n"); } s.append("\n]"); return s.toString(); }
predict, score, loss = toString, 0.9750113487243652, 0.07318023592233658

Trace of simplified code(s):
{"time": "2021-02-20 16:47:16.386319", "score": "0.9082", "loss": "0.2659", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); s.append('\\n').append(getType()).append(\" Cert Path: length = \").append(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"=========================================================Certificate \").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 555, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 16:47:17.750985", "score": "0.9149", "loss": "0.2582", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"=========================================================Certificate \").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 486, "n_pass": [22, 2, 2]}
{"time": "2021-02-20 16:47:19.124451", "score": "0.9408", "loss": "0.2025", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"========================================================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 417, "n_pass": [24, 3, 3]}
{"time": "2021-02-20 16:47:20.854194", "score": "0.9764", "loss": "0.0722", "code": "public String toString() { StringBuffer s = new StringBuffer(); List certs = getCertificates(); ListIterator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 382, "n_pass": [46, 4, 4]}
{"time": "2021-02-20 16:47:22.216128", "score": "0.976", "loss": "0.0739", "code": "public String toString() { StringB certs = getCertificates(); ListIterator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 348, "n_pass": [50, 5, 5]}
{"time": "2021-02-20 16:47:23.591226", "score": "0.9764", "loss": "0.0829", "code": "public String toString() { StringBerator iter = certs.listIterator(); nd(certs.size()).append(\"\\n[\\n\"); while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 314, "n_pass": [51, 6, 6]}
{"time": "2021-02-20 16:47:24.938786", "score": "0.9844", "loss": "0.0572", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).append('\\n'); s.append(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 279, "n_pass": [53, 7, 7]}
{"time": "2021-02-20 16:47:26.296100", "score": "0.9534", "loss": "0.1713", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(iter.next()).append('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 262, "n_pass": [82, 8, 8]}
{"time": "2021-02-20 16:47:27.634242", "score": "0.9386", "loss": "0.2207", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).appeend('\\n'); s.append(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 244, "n_pass": [83, 9, 9]}
{"time": "2021-02-20 16:47:28.968711", "score": "0.9201", "loss": "0.2754", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"=====================Certificate end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 226, "n_pass": [84, 10, 10]}
{"time": "2021-02-20 16:47:30.324669", "score": "0.9292", "loss": "0.2747", "code": "public String toString() { StringBerator iter = certs.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 208, "n_pass": [86, 11, 11]}
{"time": "2021-02-20 16:47:32.011819", "score": "0.9667", "loss": "0.1384", "code": "public String toString() { StringBts.listIterator();while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 191, "n_pass": [92, 12, 12]}
{"time": "2021-02-20 16:47:33.363545", "score": "0.9751", "loss": "0.0992", "code": "public String toString() { StringB;while (iter.hasNext()) { s.append(\"\").append(iter.nextIndex()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 174, "n_pass": [93, 13, 13]}
{"time": "2021-02-20 16:47:35.073304", "score": "0.8866", "loss": "0.4881", "code": "public String toString() { StringB;while (iter.hasNext()) { s.appepend(iter.nextIndex()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 165, "n_pass": [128, 14, 14]}
{"time": "2021-02-20 16:47:36.395646", "score": "0.8486", "loss": "0.6913", "code": "public String toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"===============end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 156, "n_pass": [130, 15, 15]}
{"time": "2021-02-20 16:47:37.736953", "score": "0.8486", "loss": "0.6913", "code": "public String toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======end\\n\\n\\n\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 147, "n_pass": [133, 16, 16]}
{"time": "2021-02-20 16:47:39.054733", "score": "0.7294", "loss": "1.404", "code": "public String toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 138, "n_pass": [134, 17, 17]}
{"time": "2021-02-20 16:47:41.732985", "score": "0.6567", "loss": "1.8803", "code": "tring toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 130, "n_pass": [140, 19, 18]}
{"time": "2021-02-20 16:47:44.736779", "score": "0.6591", "loss": "1.8868", "code": "g toString() { StringB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 126, "n_pass": [186, 21, 19]}
{"time": "2021-02-20 16:47:46.410591", "score": "0.6376", "loss": "2.0593", "code": "g toString() { SgB;while (iter.hasNext()) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 122, "n_pass": [190, 22, 20]}
{"time": "2021-02-20 16:47:50.364644", "score": "0.6934", "loss": "1.7191", "code": "g toString() { SgB;while (iter.hasNe) { s.appepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 118, "n_pass": [196, 25, 21]}
{"time": "2021-02-20 16:47:51.696008", "score": "0.6463", "loss": "2.0849", "code": "g toString() { SgB;while (iter.hasNe) { pepend(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 114, "n_pass": [198, 26, 22]}
{"time": "2021-02-20 16:47:53.024187", "score": "0.8289", "loss": "0.9984", "code": "g toString() { SgB;while (iter.hasNe) { nd(iterx()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 110, "n_pass": [199, 27, 23]}
{"time": "2021-02-20 16:47:54.438074", "score": "0.8767", "loss": "0.7428", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).apped(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 106, "n_pass": [201, 28, 24]}
{"time": "2021-02-20 16:47:55.754494", "score": "0.938", "loss": "0.4138", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"======\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 102, "n_pass": [203, 29, 25]}
{"time": "2021-02-20 16:47:57.068869", "score": "0.9267", "loss": "0.3633", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"=\"); } s.append(\"\\n]\"); return s.toString(); }", "n_tokens": 97, "n_pass": [205, 30, 26]}
{"time": "2021-02-20 16:47:58.378624", "score": "0.8179", "loss": "0.9606", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"=\"); }pend(\"\\n]\"); return s.toString(); }", "n_tokens": 92, "n_pass": [207, 31, 27]}
{"time": "2021-02-20 16:47:59.687255", "score": "0.7084", "loss": "1.6419", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"=\"); }pend(); return s.toString(); }", "n_tokens": 87, "n_pass": [209, 32, 28]}
{"time": "2021-02-20 16:48:01.006814", "score": "0.8124", "loss": "0.9952", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"=\"); }pend(); res.toString(); }", "n_tokens": 82, "n_pass": [211, 33, 29]}
{"time": "2021-02-20 16:48:03.626900", "score": "0.3931", "loss": "3.815", "code": "g toString() { SgB;while (iter.hasNe) { nd(i()).d(\"=\"); }pend(); res.toS(); }", "n_tokens": 77, "n_pass": [213, 35, 30]}
{"time": "2021-02-20 16:48:15.730307", "score": "0.4622", "loss": "3.3579", "code": "g toString() { SgB;while (er.hasNe) { nd(i()).d(\"=\"); }pend(); res.toS(); }", "n_tokens": 75, "n_pass": [283, 42, 31]}
{"time": "2021-02-20 16:48:19.663474", "score": "0.411", "loss": "3.5453", "code": "g toString() { SgB;while (er.has) { nd(i()).d(\"=\"); }pend(); res.toS(); }", "n_tokens": 73, "n_pass": [287, 45, 32]}
{"time": "2021-02-20 16:48:20.986493", "score": "0.531", "loss": "2.7385", "code": "g toString() { SgB;while (er.has) { (i()).d(\"=\"); }pend(); res.toS(); }", "n_tokens": 71, "n_pass": [290, 46, 33]}
{"time": "2021-02-20 16:48:22.311479", "score": "0.5834", "loss": "2.4507", "code": "g toString() { SgB;while (er.has) { (i).d(\"=\"); }pend(); res.toS(); }", "n_tokens": 69, "n_pass": [292, 47, 34]}
{"time": "2021-02-20 16:48:23.646000", "score": "0.6011", "loss": "2.2513", "code": "g toString() { SgB;while (er.has) { (i).d(\"=\"); }pd(); res.toS(); }", "n_tokens": 67, "n_pass": [299, 48, 35]}
{"time": "2021-02-20 16:48:26.281067", "score": "0.4121", "loss": "3.3246", "code": "g toString() { SgB;while (er.has) { (i).d(\"=\"); }pd(); res.to; }", "n_tokens": 64, "n_pass": [304, 50, 36]}
{"time": "2021-02-20 16:48:29.382772", "score": "0.4004", "loss": "3.1661", "code": "g toString() {gB;while (er.has) { (i).d(\"=\"); }pd(); res.to; }", "n_tokens": 62, "n_pass": [313, 51, 37]}
{"time": "2021-02-20 16:48:30.689172", "score": "0.3529", "loss": "3.507", "code": "g toString() {;while (er.has) { (i).d(\"=\"); }pd(); res.to; }", "n_tokens": 60, "n_pass": [314, 52, 38]}
{"time": "2021-02-20 16:48:34.636388", "score": "0.3786", "loss": "3.3494", "code": "g toString() {;while (er.has) { (i).d(\"=\"); }pd(); res; }", "n_tokens": 57, "n_pass": [334, 55, 39]}
{"time": "2021-02-20 16:48:48.570896", "score": "0.3786", "loss": "3.3494", "code": "g toString(){;while (er.has) { (i).d(\"=\"); }pd(); res; }", "n_tokens": 56, "n_pass": [430, 59, 40]}
{"time": "2021-02-20 16:48:49.876313", "score": "0.3786", "loss": "3.3494", "code": "g toString(){while (er.has) { (i).d(\"=\"); }pd(); res; }", "n_tokens": 55, "n_pass": [431, 60, 41]}
{"time": "2021-02-20 16:48:51.181737", "score": "0.3786", "loss": "3.3494", "code": "g toString(){while(er.has) { (i).d(\"=\"); }pd(); res; }", "n_tokens": 54, "n_pass": [437, 61, 42]}
{"time": "2021-02-20 16:48:52.501900", "score": "0.2844", "loss": "4.1514", "code": "g toString(){while(r.has) { (i).d(\"=\"); }pd(); res; }", "n_tokens": 53, "n_pass": [439, 62, 43]}
{"time": "2021-02-20 16:48:59.037471", "score": "0.2844", "loss": "4.1514", "code": "g toString(){while(r.has){ (i).d(\"=\"); }pd(); res; }", "n_tokens": 52, "n_pass": [446, 67, 44]}
{"time": "2021-02-20 16:49:00.351170", "score": "0.2844", "loss": "4.1514", "code": "g toString(){while(r.has){(i).d(\"=\"); }pd(); res; }", "n_tokens": 51, "n_pass": [448, 68, 45]}
{"time": "2021-02-20 16:49:02.014161", "score": "0.4871", "loss": "2.841", "code": "g toString(){while(r.has){(i).d(\"\"); }pd(); res; }", "n_tokens": 50, "n_pass": [456, 69, 46]}
{"time": "2021-02-20 16:49:03.346994", "score": "0.4871", "loss": "2.841", "code": "g toString(){while(r.has){(i).d(\"\");}pd(); res; }", "n_tokens": 49, "n_pass": [460, 70, 47]}
{"time": "2021-02-20 16:49:04.666514", "score": "0.5787", "loss": "2.0594", "code": "g toString(){while(r.has){(i).d(\"\");}d(); res; }", "n_tokens": 48, "n_pass": [462, 71, 48]}
{"time": "2021-02-20 16:49:05.988825", "score": "0.5787", "loss": "2.0594", "code": "g toString(){while(r.has){(i).d(\"\");}d();res; }", "n_tokens": 47, "n_pass": [467, 72, 49]}
{"time": "2021-02-20 16:49:07.322310", "score": "0.667", "loss": "1.7289", "code": "g toString(){while(r.has){(i).d(\"\");}d();s; }", "n_tokens": 45, "n_pass": [468, 73, 50]}
{"time": "2021-02-20 16:49:08.618661", "score": "0.4697", "loss": "2.9277", "code": "g toString(){while(r.has){(i).d(\"\");}d(); }", "n_tokens": 43, "n_pass": [469, 74, 51]}
{"time": "2021-02-20 16:49:14.806626", "score": "0.483", "loss": "2.8408", "code": "g toString(){while(r.as){(i).d(\"\");}d(); }", "n_tokens": 42, "n_pass": [492, 76, 52]}
{"time": "2021-02-20 16:49:16.122850", "score": "0.5699", "loss": "2.4765", "code": "g toString(){while(r.s){(i).d(\"\");}d(); }", "n_tokens": 41, "n_pass": [493, 77, 53]}
{"time": "2021-02-20 16:49:23.002873", "score": "0.5699", "loss": "2.4765", "code": "g toString(){while(r.s){(i).d(\"\");}d();}", "n_tokens": 40, "n_pass": [536, 79, 54]}

Minimal simplified code:
g toString(){while(r.s){(i).d("");}d();}

