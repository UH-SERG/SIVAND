
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wso2-attic__product-emm/modules/mobile-agents/android/app-catalog/volley/src/test/java/com/android/volley/mock/WaitableQueue_take.java
method_name = take
method_body = @Override public Request<?> take() throws InterruptedException { Request<?> item = super.take(); if (item == mStopRequest) { mStopEvent.release(); return take(); } return item; }
predict, score, loss = take, 0.9995989203453064, 0.000614990247413516

Trace of simplified code(s):
{"time": "2021-02-20 08:18:32.189118", "score": "0.9996", "loss": "0.0006", "code": "@Override public Request<?> take() throws InterruptedException { Request<?> item = super.take(); if (item == mStopRequest) { mStopEvent.release(); return take(); } return item; }", "n_tokens": 178, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 08:18:33.531058", "score": "0.9996", "loss": "0.0015", "code": "st<?> take() throws InterruptedException { Request<?> item = super.take(); if (item == mStopRequest) { mStopEvent.release(); return take(); } return item; }", "n_tokens": 156, "n_pass": [20, 2, 2]}
{"time": "2021-02-20 08:18:34.858879", "score": "0.9272", "loss": "0.1607", "code": "st<?> take() throws InterruptedException { R.take(); if (item == mStopRequest) { mStopEvent.release(); return take(); } return item; }", "n_tokens": 134, "n_pass": [22, 3, 3]}
{"time": "2021-02-20 08:18:36.189194", "score": "0.7627", "loss": "0.5043", "code": "st<?> take() throws InterruptedException { R.take(); if (item == mStopRequest) { mStopEvake(); } return item; }", "n_tokens": 111, "n_pass": [25, 4, 4]}
{"time": "2021-02-20 08:18:38.870409", "score": "0.8636", "loss": "0.2882", "code": "st<?> take() throws InterruptedException { R.take(); if (item == m) { mStopEvake(); } return item; }", "n_tokens": 100, "n_pass": [49, 6, 5]}
{"time": "2021-02-20 08:18:41.490934", "score": "0.8409", "loss": "0.2932", "code": "st<?> take() throws InterruptedException { R.take(); if (item == m) { vake(); } return item; }", "n_tokens": 94, "n_pass": [77, 8, 6]}
{"time": "2021-02-20 08:18:42.783130", "score": "0.8342", "loss": "0.2816", "code": "st<?> take() throws InterruptedException { R.take(); if (item == m) { ; } return item; }", "n_tokens": 88, "n_pass": [78, 9, 7]}
{"time": "2021-02-20 08:18:44.088978", "score": "0.9116", "loss": "0.2005", "code": "st<?> take() throws InterruptedException { R.take(); if (item == m) { ; } retem; }", "n_tokens": 82, "n_pass": [80, 10, 8]}
{"time": "2021-02-20 08:18:45.746994", "score": "0.4391", "loss": "1.3249", "code": "st<?> take() throws ruptedException { R.take(); if (item == m) { ; } retem; }", "n_tokens": 77, "n_pass": [86, 11, 9]}
{"time": "2021-02-20 08:18:47.058163", "score": "0.6396", "loss": "0.7262", "code": "st<?> take() throws dException { R.take(); if (item == m) { ; } retem; }", "n_tokens": 72, "n_pass": [87, 12, 10]}
{"time": "2021-02-20 08:18:48.347567", "score": "0.5241", "loss": "0.9646", "code": "st<?> take() throws ption { R.take(); if (item == m) { ; } retem; }", "n_tokens": 67, "n_pass": [88, 13, 11]}
{"time": "2021-02-20 08:18:50.006425", "score": "0.6915", "loss": "0.5549", "code": "st<?> take() throws pt { R.take(); if (item == m) { ; } retem; }", "n_tokens": 64, "n_pass": [126, 14, 12]}
{"time": "2021-02-20 08:18:53.921383", "score": "0.6258", "loss": "0.657", "code": "st<?> take() throws pt { R.take(); if (i == m) { ; } retem; }", "n_tokens": 61, "n_pass": [133, 17, 13]}
{"time": "2021-02-20 08:18:55.238003", "score": "0.4721", "loss": "1.0356", "code": "st<?> take() throws pt { R.take(); if (i == m) { ; }tem; }", "n_tokens": 58, "n_pass": [138, 18, 14]}
{"time": "2021-02-20 08:18:56.529790", "score": "0.7931", "loss": "0.4426", "code": "st<?> take() throws pt { R.take(); if (i == m) { ; }; }", "n_tokens": 55, "n_pass": [139, 19, 15]}
{"time": "2021-02-20 08:19:03.425220", "score": "0.7931", "loss": "0.4426", "code": "t<?> take() throws pt { R.take(); if (i == m) { ; }; }", "n_tokens": 54, "n_pass": [202, 22, 16]}
{"time": "2021-02-20 08:19:04.741150", "score": "0.7931", "loss": "0.4426", "code": "t<?>take() throws pt { R.take(); if (i == m) { ; }; }", "n_tokens": 53, "n_pass": [206, 23, 17]}
{"time": "2021-02-20 08:19:07.473686", "score": "0.7931", "loss": "0.4426", "code": "t<?>take()throws pt { R.take(); if (i == m) { ; }; }", "n_tokens": 52, "n_pass": [213, 24, 18]}
{"time": "2021-02-20 08:19:08.786453", "score": "0.678", "loss": "0.6357", "code": "t<?>take()throws t { R.take(); if (i == m) { ; }; }", "n_tokens": 51, "n_pass": [221, 25, 19]}
{"time": "2021-02-20 08:19:10.102904", "score": "0.678", "loss": "0.6357", "code": "t<?>take()throws t{ R.take(); if (i == m) { ; }; }", "n_tokens": 50, "n_pass": [223, 26, 20]}
{"time": "2021-02-20 08:19:11.392745", "score": "0.678", "loss": "0.6357", "code": "t<?>take()throws t{R.take(); if (i == m) { ; }; }", "n_tokens": 49, "n_pass": [225, 27, 21]}
{"time": "2021-02-20 08:19:12.686238", "score": "0.245", "loss": "2.2504", "code": "t<?>take()throws t{take(); if (i == m) { ; }; }", "n_tokens": 47, "n_pass": [226, 28, 22]}
{"time": "2021-02-20 08:19:16.572747", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take; if (i == m) { ; }; }", "n_tokens": 45, "n_pass": [229, 31, 23]}
{"time": "2021-02-20 08:19:17.891084", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take; if (i == m) { }; }", "n_tokens": 43, "n_pass": [238, 32, 24]}
{"time": "2021-02-20 08:19:26.187824", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take; if (i == m) { } }", "n_tokens": 42, "n_pass": [294, 35, 25]}
{"time": "2021-02-20 08:19:27.475716", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take; if (i == m) { }}", "n_tokens": 41, "n_pass": [295, 36, 26]}
{"time": "2021-02-20 08:19:35.512521", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take;if (i == m) { }}", "n_tokens": 40, "n_pass": [321, 41, 27]}
{"time": "2021-02-20 08:19:36.821955", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take;if(i == m) { }}", "n_tokens": 39, "n_pass": [324, 42, 28]}
{"time": "2021-02-20 08:19:38.106660", "score": "0.3762", "loss": "1.4427", "code": "t<?>take()throws t{take;if(i== m) { }}", "n_tokens": 38, "n_pass": [327, 43, 29]}
{"time": "2021-02-20 08:19:39.400240", "score": "0.58", "loss": "0.7687", "code": "t<?>take()throws t{take;if(i= m) { }}", "n_tokens": 37, "n_pass": [328, 44, 30]}
{"time": "2021-02-20 08:19:40.683005", "score": "0.58", "loss": "0.7687", "code": "t<?>take()throws t{take;if(i=m) { }}", "n_tokens": 36, "n_pass": [330, 45, 31]}
{"time": "2021-02-20 08:19:41.999360", "score": "0.58", "loss": "0.7687", "code": "t<?>take()throws t{take;if(i=m){ }}", "n_tokens": 35, "n_pass": [333, 46, 32]}
{"time": "2021-02-20 08:19:43.282202", "score": "0.58", "loss": "0.7687", "code": "t<?>take()throws t{take;if(i=m){}}", "n_tokens": 34, "n_pass": [335, 47, 33]}
{"time": "2021-02-20 08:19:51.179139", "score": "0.4697", "loss": "1.1628", "code": "t<?>take()throws t{take;if(im){}}", "n_tokens": 33, "n_pass": [366, 52, 34]}
{"time": "2021-02-20 08:19:52.489955", "score": "0.7542", "loss": "0.4597", "code": "t<?>take()throws t{take;if(i){}}", "n_tokens": 32, "n_pass": [367, 53, 35]}

Minimal simplified code:
t<?>take()throws t{take;if(i){}}

