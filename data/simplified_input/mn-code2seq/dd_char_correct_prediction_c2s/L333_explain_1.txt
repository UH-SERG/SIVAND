
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/XiaoMi__linden/linden-core/src/main/java/com/xiaomi/linden/lucene/query/flexiblequery/FlexibleWeight_explain.java
method_name = explain
method_body = @Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, "no matching term"); }
predict, score, loss = explain, 0.9936084747314453, 0.025649594143033028

Trace of simplified code(s):
{"time": "2021-02-20 05:53:13.036791", "score": "0.99", "loss": "0.0481", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 471, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 05:53:14.906929", "score": "0.995", "loss": "0.0207", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 442, "n_pass": [49, 2, 2]}
{"time": "2021-02-20 05:53:16.264926", "score": "0.9935", "loss": "0.0298", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 412, "n_pass": [54, 3, 3]}
{"time": "2021-02-20 05:53:17.630515", "score": "0.995", "loss": "0.0208", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 382, "n_pass": [55, 4, 4]}
{"time": "2021-02-20 05:53:19.379937", "score": "0.9917", "loss": "0.038", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(simidoc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 367, "n_pass": [97, 5, 5]}
{"time": "2021-02-20 05:53:20.720356", "score": "0.9873", "loss": "0.0615", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(simidoc); } } returplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 352, "n_pass": [98, 6, 6]}
{"time": "2021-02-20 05:53:22.065686", "score": "0.9176", "loss": "0.3274", "code": "@Override publ explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(simidoc); } } returplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 338, "n_pass": [103, 7, 7]}
{"time": "2021-02-20 05:53:23.402201", "score": "0.9224", "loss": "0.3091", "code": "@Override publ explain(Atomi context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(simidoc); } } returplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 324, "n_pass": [105, 8, 8]}
{"time": "2021-02-20 05:53:24.744618", "score": "0.9193", "loss": "0.293", "code": "@Override publ explain(Atomi context, int doc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy s; return strategy.explain(simidoc); } } returplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 310, "n_pass": [109, 9, 9]}
{"time": "2021-02-20 05:53:26.099352", "score": "0.8923", "loss": "0.3712", "code": "@Override publ explain(Atomi context, int doc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } returplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 295, "n_pass": [119, 10, 10]}
{"time": "2021-02-20 05:53:31.886083", "score": "0.8923", "loss": "0.3712", "code": "@Override publ explain(Atomi context, int doc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(false, 0.0f, \"no matching term\"); }", "n_tokens": 287, "n_pass": [186, 14, 11]}
{"time": "2021-02-20 05:53:33.253162", "score": "0.9773", "loss": "0.0924", "code": "@Override publ explain(Atomi context, int doc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no matching term\"); }", "n_tokens": 279, "n_pass": [188, 15, 12]}
{"time": "2021-02-20 05:53:34.628334", "score": "0.9572", "loss": "0.1644", "code": "@Override publ explain(Atomi context, int doc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 271, "n_pass": [190, 16, 13]}
{"time": "2021-02-20 05:53:36.729119", "score": "0.956", "loss": "0.1708", "code": "@Override publ explain(Atomi contexdoc) throws IOException { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 264, "n_pass": [197, 17, 14]}
{"time": "2021-02-20 05:53:38.130321", "score": "0.9007", "loss": "0.3512", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (FlexibleScorer) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 257, "n_pass": [200, 18, 15]}
{"time": "2021-02-20 05:53:39.466554", "score": "0.8605", "loss": "0.4734", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civeDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 250, "n_pass": [204, 19, 16]}
{"time": "2021-02-20 05:53:40.801390", "score": "0.9089", "loss": "0.3314", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 243, "n_pass": [207, 20, 17]}
{"time": "2021-02-20 05:53:42.157229", "score": "0.7286", "loss": "0.8777", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 236, "n_pass": [210, 21, 18]}
{"time": "2021-02-20 05:53:43.509062", "score": "0.809", "loss": "0.6791", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) { FlexibleScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 229, "n_pass": [214, 22, 19]}
{"time": "2021-02-20 05:53:44.873468", "score": "0.693", "loss": "1.0363", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {eScore; return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 221, "n_pass": [219, 23, 20]}
{"time": "2021-02-20 05:53:46.215050", "score": "0.5308", "loss": "1.5162", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return strategy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 213, "n_pass": [220, 24, 21]}
{"time": "2021-02-20 05:53:52.344348", "score": "0.5328", "loss": "1.4939", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(simidoc); } } retion(fal, \"no maerm\"); }", "n_tokens": 209, "n_pass": [310, 28, 22]}
{"time": "2021-02-20 05:53:55.055251", "score": "0.6098", "loss": "1.2753", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } retion(fal, \"no maerm\"); }", "n_tokens": 205, "n_pass": [313, 30, 23]}
{"time": "2021-02-20 05:53:56.388747", "score": "0.8193", "loss": "0.7693", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"no maerm\"); }", "n_tokens": 201, "n_pass": [317, 31, 24]}
{"time": "2021-02-20 05:53:57.767266", "score": "0.7672", "loss": "0.9128", "code": "@Override publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 197, "n_pass": [320, 32, 25]}
{"time": "2021-02-20 05:53:59.100091", "score": "0.593", "loss": "1.5168", "code": "@Ovide publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 194, "n_pass": [324, 33, 26]}
{"time": "2021-02-20 05:54:00.432247", "score": "0.428", "loss": "2.0654", "code": "@Ov publ explain(Atomi contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 191, "n_pass": [325, 34, 27]}
{"time": "2021-02-20 05:54:03.252976", "score": "0.4303", "loss": "2.0143", "code": "@Ov publ explain(Ai contexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 188, "n_pass": [331, 35, 28]}
{"time": "2021-02-20 05:54:04.603951", "score": "0.4303", "loss": "2.0143", "code": "@Ov publ explain(Ai cexdoc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 185, "n_pass": [333, 36, 29]}
{"time": "2021-02-20 05:54:05.980753", "score": "0.344", "loss": "2.1734", "code": "@Ov publ explain(Ai coc) throws IOon { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 182, "n_pass": [334, 37, 30]}
{"time": "2021-02-20 05:54:07.335626", "score": "0.5065", "loss": "1.5439", "code": "@Ov publ explain(Ai coc) throws I { Flcorer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 179, "n_pass": [339, 38, 31]}
{"time": "2021-02-20 05:54:08.664523", "score": "0.5065", "loss": "1.5439", "code": "@Ov publ explain(Ai coc) throws I { orer = (Flexier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 176, "n_pass": [341, 39, 32]}
{"time": "2021-02-20 05:54:10.145075", "score": "0.529", "loss": "1.4707", "code": "@Ov publ explain(Ai coc) throws I { orer = (ier) scorer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 172, "n_pass": [344, 40, 33]}
{"time": "2021-02-20 05:54:11.493107", "score": "0.4997", "loss": "1.4238", "code": "@Ov publ explain(Ai coc) throws I { orer = (ier)rer(civ); if (scorer ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 168, "n_pass": [346, 41, 34]}
{"time": "2021-02-20 05:54:12.892293", "score": "0.3042", "loss": "1.9474", "code": "@Ov publ explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { int newDoc = scornce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 164, "n_pass": [351, 42, 35]}
{"time": "2021-02-20 05:54:16.870819", "score": "0.2753", "loss": "2.0508", "code": "@Ov publ explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { int newDoc = sce(doc); if (newDoc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 160, "n_pass": [357, 45, 36]}
{"time": "2021-02-20 05:54:18.205731", "score": "0.4228", "loss": "1.6416", "code": "@Ov publ explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { int newDoc = sce(doc); if (oc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 156, "n_pass": [361, 46, 37]}
{"time": "2021-02-20 05:54:24.886100", "score": "0.874", "loss": "0.428", "code": " publ explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { int newDoc = sce(doc); if (oc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 153, "n_pass": [377, 51, 38]}
{"time": "2021-02-20 05:54:26.213106", "score": "0.9538", "loss": "0.1887", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { int newDoc = sce(doc); if (oc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 150, "n_pass": [378, 52, 39]}
{"time": "2021-02-20 05:54:28.644794", "score": "0.8477", "loss": "0.5285", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) { newDoc = sce(doc); if (oc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 146, "n_pass": [397, 53, 40]}
{"time": "2021-02-20 05:54:29.991039", "score": "0.913", "loss": "0.3231", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (oc == doc) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 142, "n_pass": [398, 54, 41]}
{"time": "2021-02-20 05:54:31.343982", "score": "0.6737", "loss": "1.0434", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (oc =c) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 138, "n_pass": [405, 55, 42]}
{"time": "2021-02-20 05:54:37.767342", "score": "0.4041", "loss": "1.8732", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return segy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 134, "n_pass": [442, 59, 43]}
{"time": "2021-02-20 05:54:46.822678", "score": "0.3456", "loss": "2.0688", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(doc); } } re(fal, \"nerm\"); }", "n_tokens": 132, "n_pass": [557, 64, 44]}
{"time": "2021-02-20 05:54:52.162427", "score": "0.2331", "loss": "2.5802", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(fal, \"nerm\"); }", "n_tokens": 130, "n_pass": [562, 68, 45]}
{"time": "2021-02-20 05:54:53.487754", "score": "0.2551", "loss": "2.4864", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nerm\"); }", "n_tokens": 128, "n_pass": [569, 69, 46]}
{"time": "2021-02-20 05:54:54.834869", "score": "0.6803", "loss": "1.0141", "code": "bl explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 126, "n_pass": [572, 70, 47]}
{"time": "2021-02-20 05:54:56.175951", "score": "0.6024", "loss": "1.2255", "code": "l explain(Ai coc) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 125, "n_pass": [576, 71, 48]}
{"time": "2021-02-20 05:55:00.757218", "score": "0.5709", "loss": "1.4128", "code": "l explain(Ai c) throws I { orer = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 123, "n_pass": [588, 72, 49]}
{"time": "2021-02-20 05:55:02.089111", "score": "0.4299", "loss": "1.7726", "code": "l explain(Ai c) throws I { er = (ier)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 121, "n_pass": [596, 73, 50]}
{"time": "2021-02-20 05:55:03.407943", "score": "0.365", "loss": "1.9847", "code": "l explain(Ai c) throws I { er = (r)rer(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 119, "n_pass": [600, 74, 51]}
{"time": "2021-02-20 05:55:04.729271", "score": "0.188", "loss": "2.8582", "code": "l explain(Ai c) throws I { er = (r)r(civ); if (sc ) {Doc = sce(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 117, "n_pass": [602, 75, 52]}
{"time": "2021-02-20 05:55:10.031671", "score": "0.3069", "loss": "2.3082", "code": "l explain(Ai c) throws I { er = (r)r(civ); if (sc ) {Doc = e(doc); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 115, "n_pass": [615, 79, 53]}
{"time": "2021-02-20 05:55:11.357404", "score": "0.2716", "loss": "2.4268", "code": "l explain(Ai c) throws I { er = (r)r(civ); if (sc ) {Doc = e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 113, "n_pass": [617, 80, 54]}
{"time": "2021-02-20 05:55:22.534768", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if (sc ) {Doc = e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 111, "n_pass": [667, 86, 55]}
{"time": "2021-02-20 05:55:44.952337", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc ) {Doc = e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 110, "n_pass": [831, 94, 56]}
{"time": "2021-02-20 05:55:48.971699", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc) {Doc = e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 109, "n_pass": [834, 97, 57]}
{"time": "2021-02-20 05:55:50.300483", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc = e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 108, "n_pass": [836, 98, 58]}
{"time": "2021-02-20 05:55:55.624003", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc= e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 107, "n_pass": [841, 102, 59]}
{"time": "2021-02-20 05:55:56.939324", "score": "0.2323", "loss": "2.6344", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=e(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 106, "n_pass": [843, 103, 60]}
{"time": "2021-02-20 05:55:58.281012", "score": "0.3709", "loss": "2.0208", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c); if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 105, "n_pass": [844, 104, 61]}
{"time": "2021-02-20 05:55:59.622945", "score": "0.3709", "loss": "2.0208", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if (c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 104, "n_pass": [849, 105, 62]}
{"time": "2021-02-20 05:56:00.946789", "score": "0.3709", "loss": "2.0208", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c) {return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 103, "n_pass": [852, 106, 63]}
{"time": "2021-02-20 05:56:02.301163", "score": "0.3709", "loss": "2.0208", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return sy.explain(c); } } re(f, \"nm\"); }", "n_tokens": 102, "n_pass": [856, 107, 64]}
{"time": "2021-02-20 05:56:05.018001", "score": "0.3808", "loss": "2.005", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c); } } re(f, \"nm\"); }", "n_tokens": 101, "n_pass": [865, 109, 65]}
{"time": "2021-02-20 05:56:18.337724", "score": "0.3808", "loss": "2.005", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);} } re(f, \"nm\"); }", "n_tokens": 100, "n_pass": [879, 119, 66]}
{"time": "2021-02-20 05:56:19.659829", "score": "0.3808", "loss": "2.005", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}} re(f, \"nm\"); }", "n_tokens": 99, "n_pass": [881, 120, 67]}
{"time": "2021-02-20 05:56:20.983324", "score": "0.3808", "loss": "2.005", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}re(f, \"nm\"); }", "n_tokens": 98, "n_pass": [883, 121, 68]}
{"time": "2021-02-20 05:56:22.303767", "score": "0.2104", "loss": "2.5043", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f, \"nm\"); }", "n_tokens": 97, "n_pass": [884, 122, 69]}
{"time": "2021-02-20 05:56:23.629704", "score": "0.2104", "loss": "2.5043", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\"); }", "n_tokens": 96, "n_pass": [889, 123, 70]}
{"time": "2021-02-20 05:56:27.619782", "score": "0.2104", "loss": "2.5043", "code": "l explain(Ai c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 95, "n_pass": [896, 126, 71]}
{"time": "2021-02-20 05:56:32.205977", "score": "0.2473", "loss": "2.391", "code": "l explain(i c) throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 94, "n_pass": [908, 127, 72]}
{"time": "2021-02-20 05:56:33.548430", "score": "0.2473", "loss": "2.391", "code": "l explain(i c)throws I { er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 93, "n_pass": [913, 128, 73]}
{"time": "2021-02-20 05:56:34.875532", "score": "0.2473", "loss": "2.391", "code": "l explain(i c)throws I{ er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 92, "n_pass": [922, 129, 74]}
{"time": "2021-02-20 05:56:36.210731", "score": "0.2473", "loss": "2.391", "code": "l explain(i c)throws I{er = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 91, "n_pass": [924, 130, 75]}
{"time": "2021-02-20 05:56:37.530404", "score": "0.2858", "loss": "2.3514", "code": "l explain(i c)throws I{r = (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 90, "n_pass": [925, 131, 76]}
{"time": "2021-02-20 05:56:38.849240", "score": "0.2858", "loss": "2.3514", "code": "l explain(i c)throws I{r= (r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 89, "n_pass": [927, 132, 77]}
{"time": "2021-02-20 05:56:40.180646", "score": "0.2858", "loss": "2.3514", "code": "l explain(i c)throws I{r=(r)r(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 88, "n_pass": [929, 133, 78]}
{"time": "2021-02-20 05:56:41.501390", "score": "0.6155", "loss": "1.1393", "code": "l explain(i c)throws I{r=(r)(v); if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 87, "n_pass": [933, 134, 79]}
{"time": "2021-02-20 05:56:42.823028", "score": "0.6155", "loss": "1.1393", "code": "l explain(i c)throws I{r=(r)(v);if(sc){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 86, "n_pass": [938, 135, 80]}
{"time": "2021-02-20 05:56:44.173354", "score": "0.2712", "loss": "2.3051", "code": "l explain(i c)throws I{r=(r)(v);if(c){Doc=(c);if(c){return y.explain(c);}}e(f,\"nm\");}", "n_tokens": 85, "n_pass": [942, 136, 81]}

Minimal simplified code:
l explain(i c)throws I{r=(r)(v);if(c){Doc=(c);if(c){return y.explain(c);}}e(f,"nm");}

