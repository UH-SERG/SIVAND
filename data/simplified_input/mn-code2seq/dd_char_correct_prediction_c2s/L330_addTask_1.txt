
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/batch/src/main/java/droidefense/batch/BatchManager_addTask.java
method_name = addTask
method_body = private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException("Task to be added is not constructed! Null object task found"); } this.taskList.add(task); }
predict, score, loss = addTask, 0.8822551965713501, 0.34056082367897034

Trace of simplified code(s):
{"time": "2021-02-20 05:43:01.696678", "score": "0.8823", "loss": "0.3406", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to be added is not constructed! Null object task found\"); } this.taskList.add(task); }", "n_tokens": 211, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 05:43:03.018900", "score": "0.8959", "loss": "0.339", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to beNull object task found\"); } this.taskList.add(task); }", "n_tokens": 184, "n_pass": [25, 2, 2]}
{"time": "2021-02-20 05:43:04.361094", "score": "0.8878", "loss": "0.3957", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 171, "n_pass": [47, 3, 3]}
{"time": "2021-02-20 05:43:06.033426", "score": "0.9107", "loss": "0.319", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { throw new InvalidTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 158, "n_pass": [55, 4, 4]}
{"time": "2021-02-20 05:43:07.351174", "score": "0.8877", "loss": "0.4373", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrdTaskException(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 145, "n_pass": [58, 5, 5]}
{"time": "2021-02-20 05:43:08.659121", "score": "0.8736", "loss": "0.5394", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Task to beask found\"); } this.taskList.add(task); }", "n_tokens": 132, "n_pass": [59, 6, 6]}
{"time": "2021-02-20 05:43:10.334473", "score": "0.8916", "loss": "0.4827", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taeask found\"); } this.taskList.add(task); }", "n_tokens": 125, "n_pass": [91, 7, 7]}
{"time": "2021-02-20 05:43:11.642532", "score": "0.9", "loss": "0.4171", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.taskList.add(task); }", "n_tokens": 118, "n_pass": [92, 8, 8]}
{"time": "2021-02-20 05:43:12.982234", "score": "0.8588", "loss": "0.5487", "code": "private void addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.t.add(task); }", "n_tokens": 111, "n_pass": [95, 9, 9]}
{"time": "2021-02-20 05:43:14.294775", "score": "0.8441", "loss": "0.6541", "code": "privat addTask(IBatchTask task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.t.add(task); }", "n_tokens": 105, "n_pass": [99, 10, 10]}
{"time": "2021-02-20 05:43:16.038350", "score": "0.6524", "loss": "1.5397", "code": "privat addTask(IBak task) throws Invalid { if (task == null) { thrn(\"Taund\"); } this.t.add(task); }", "n_tokens": 99, "n_pass": [102, 11, 11]}
{"time": "2021-02-20 05:43:17.347157", "score": "0.551", "loss": "2.1221", "code": "privat addTask(IBak task) throws Invalid { if (tasll) { thrn(\"Taund\"); } this.t.add(task); }", "n_tokens": 92, "n_pass": [108, 12, 12]}
{"time": "2021-02-20 05:43:19.381891", "score": "0.6536", "loss": "1.6821", "code": "privat addTask(IBak task) throws Invalid { if (tl) { thrn(\"Taund\"); } this.t.add(task); }", "n_tokens": 89, "n_pass": [151, 13, 13]}
{"time": "2021-02-20 05:43:20.707183", "score": "0.6681", "loss": "1.578", "code": "privat addTask(IBak task) throws Invalid { if (tl) { t(\"Taund\"); } this.t.add(task); }", "n_tokens": 86, "n_pass": [154, 14, 14]}
{"time": "2021-02-20 05:43:22.041621", "score": "0.5808", "loss": "2.2581", "code": "privat addTask(IBak task) throws Invalid { if (tl) { t(\"Taund\"); }s.t.add(task); }", "n_tokens": 82, "n_pass": [158, 15, 15]}
{"time": "2021-02-20 05:43:23.341646", "score": "0.5721", "loss": "2.169", "code": "privat addTask(IBak task) throws Invalid { if (tl) { t(\"Taund\"); }add(task); }", "n_tokens": 78, "n_pass": [159, 16, 16]}
{"time": "2021-02-20 05:43:26.021983", "score": "0.5244", "loss": "2.381", "code": "vat addTask(IBak task) throws Invalid { if (tl) { t(\"Taund\"); }add(task); }", "n_tokens": 75, "n_pass": [163, 18, 17]}
{"time": "2021-02-20 05:43:30.997560", "score": "0.4743", "loss": "2.5889", "code": "vat addTask(IBak task) throws alid { if (tl) { t(\"Taund\"); }add(task); }", "n_tokens": 72, "n_pass": [174, 21, 18]}
{"time": "2021-02-20 05:43:38.969742", "score": "0.5011", "loss": "2.6469", "code": "vat addTask(IBak task) throws id { if (tl) { t(\"Taund\"); }add(task); }", "n_tokens": 70, "n_pass": [244, 26, 19]}
{"time": "2021-02-20 05:43:40.295510", "score": "0.5453", "loss": "2.3423", "code": "vat addTask(IBak task) throws id { if (tl) {(\"Taund\"); }add(task); }", "n_tokens": 68, "n_pass": [252, 27, 20]}
{"time": "2021-02-20 05:43:42.958292", "score": "0.6004", "loss": "2.2878", "code": "vat addTask(IBak task) throws id { if (tl) {(\"Tad\"); }add(task); }", "n_tokens": 66, "n_pass": [255, 29, 21]}
{"time": "2021-02-20 05:43:45.663739", "score": "0.3741", "loss": "3.5411", "code": "vat addTask(IBak task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 64, "n_pass": [261, 31, 22]}
{"time": "2021-02-20 05:43:48.284048", "score": "0.3442", "loss": "4.1702", "code": "at addTask(IBak task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 63, "n_pass": [265, 33, 23]}
{"time": "2021-02-20 05:43:55.087416", "score": "0.4304", "loss": "3.1915", "code": "at addTask(Bak task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 62, "n_pass": [277, 36, 24]}
{"time": "2021-02-20 05:43:57.701571", "score": "0.5309", "loss": "2.5601", "code": "at addTask(Bk task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 61, "n_pass": [279, 38, 25]}
{"time": "2021-02-20 05:43:59.022882", "score": "0.4572", "loss": "3.1488", "code": "at addTask(B task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 60, "n_pass": [280, 39, 26]}
{"time": "2021-02-20 05:44:05.611256", "score": "0.3747", "loss": "3.4913", "code": "t addTask(B task) throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 59, "n_pass": [305, 44, 27]}
{"time": "2021-02-20 05:44:24.333154", "score": "0.3747", "loss": "3.4913", "code": "t addTask(B task)throws id { if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 58, "n_pass": [395, 53, 28]}
{"time": "2021-02-20 05:44:28.268121", "score": "0.3747", "loss": "3.4913", "code": "t addTask(B task)throws id{ if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 57, "n_pass": [404, 56, 29]}
{"time": "2021-02-20 05:44:29.564075", "score": "0.3747", "loss": "3.4913", "code": "t addTask(B task)throws id{if (tl) {(\"Tad\"); }add(sk); }", "n_tokens": 56, "n_pass": [406, 57, 30]}
{"time": "2021-02-20 05:44:30.881185", "score": "0.3747", "loss": "3.4913", "code": "t addTask(B task)throws id{if(tl) {(\"Tad\"); }add(sk); }", "n_tokens": 55, "n_pass": [409, 58, 31]}
{"time": "2021-02-20 05:44:32.209665", "score": "0.2797", "loss": "4.6971", "code": "t addTask(B task)throws id{if(l) {(\"Tad\"); }add(sk); }", "n_tokens": 54, "n_pass": [411, 59, 32]}
{"time": "2021-02-20 05:44:33.527166", "score": "0.2797", "loss": "4.6971", "code": "t addTask(B task)throws id{if(l){(\"Tad\"); }add(sk); }", "n_tokens": 53, "n_pass": [414, 60, 33]}
{"time": "2021-02-20 05:44:38.743746", "score": "0.2797", "loss": "4.6971", "code": "t addTask(B task)throws id{if(l){(\"Tad\");}add(sk); }", "n_tokens": 52, "n_pass": [424, 64, 34]}
{"time": "2021-02-20 05:44:46.532023", "score": "0.2797", "loss": "4.6971", "code": "t addTask(B task)throws id{if(l){(\"Tad\");}add(sk);}", "n_tokens": 51, "n_pass": [434, 70, 35]}

Minimal simplified code:
t addTask(B task)throws id{if(l){("Tad");}add(sk);}

