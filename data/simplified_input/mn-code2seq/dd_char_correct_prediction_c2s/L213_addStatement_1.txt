
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-federation/openam-federation-library/src/main/java/com/sun/identity/federation/message/FSAssertion_addStatement.java
method_name = addStatement
method_body = public boolean addStatement(Statement statement) { boolean addedStmt = false; if (statement != null) { super.addStatement(statement); addedStmt = true; } return addedStmt; }
predict, score, loss = addStatement, 0.9886206388473511, 0.03782893717288971

Trace of simplified code(s):
{"time": "2021-02-19 22:14:06.545686", "score": "0.9886", "loss": "0.0378", "code": "public boolean addStatement(Statement statement) { boolean addedStmt = false; if (statement != null) { super.addStatement(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 173, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 22:14:08.349231", "score": "0.9868", "loss": "0.0421", "code": "lean addStatement(Statement statement) { boolean addedStmt = false; if (statement != null) { super.addStatement(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 163, "n_pass": [44, 2, 2]}
{"time": "2021-02-19 22:14:10.137974", "score": "0.9853", "loss": "0.0401", "code": "lean addStatement(Statement statement) { bdStmt = false; if (statement != null) { super.addStatement(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 152, "n_pass": [49, 3, 3]}
{"time": "2021-02-19 22:14:11.528312", "score": "0.989", "loss": "0.0294", "code": "lean addStatement(Statement statement) { bse; if (statement != null) { super.addStatement(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 141, "n_pass": [50, 4, 4]}
{"time": "2021-02-19 22:14:12.856813", "score": "0.987", "loss": "0.0339", "code": "lean addStatement(Statement statement) { bse; if (staull) { super.addStatement(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 130, "n_pass": [52, 5, 5]}
{"time": "2021-02-19 22:14:14.240656", "score": "0.6795", "loss": "1.2551", "code": "lean addStatement(Statement statement) { bse; if (staull) { supeent(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 119, "n_pass": [54, 6, 6]}
{"time": "2021-02-19 22:14:16.017193", "score": "0.6543", "loss": "1.295", "code": "lean addStatement(Statement statement) { bse; if (staull) { nt(statement); addedStmt = true; } return addedStmt; }", "n_tokens": 114, "n_pass": [88, 7, 7]}
{"time": "2021-02-19 22:14:17.404594", "score": "0.6849", "loss": "1.1117", "code": "lean addStatement(Statement statement) { bse; if (staull) { nt(sta); addedStmt = true; } return addedStmt; }", "n_tokens": 108, "n_pass": [90, 8, 8]}
{"time": "2021-02-19 22:14:18.792162", "score": "0.7847", "loss": "0.7167", "code": "lean addStatement(Statement statement) { bse; if (staull) { nt(sta); add = true; } return addedStmt; }", "n_tokens": 102, "n_pass": [92, 9, 9]}
{"time": "2021-02-19 22:14:20.176497", "score": "0.57", "loss": "1.6112", "code": "lean addStatement(Statement statement) { bse; if (staull) { nt(sta); adde; } return addedStmt; }", "n_tokens": 96, "n_pass": [93, 10, 10]}
{"time": "2021-02-19 22:14:28.213350", "score": "0.5437", "loss": "1.7234", "code": "lean addStatement(Statement statement) { if (staull) { nt(sta); adde; } return addedStmt; }", "n_tokens": 91, "n_pass": [106, 15, 11]}
{"time": "2021-02-19 22:14:29.588708", "score": "0.5825", "loss": "1.4751", "code": "lean addStatement(Statement statement) { if (l) { nt(sta); adde; } return addedStmt; }", "n_tokens": 86, "n_pass": [108, 16, 12]}
{"time": "2021-02-19 22:14:37.535318", "score": "0.6558", "loss": "1.276", "code": "lean addStatement(Statement statement) { if (l) { nt(); adde; } return addedStmt; }", "n_tokens": 83, "n_pass": [160, 21, 13]}
{"time": "2021-02-19 22:14:38.882641", "score": "0.6168", "loss": "1.3671", "code": "lean addStatement(Statement statement) { if (l) { nt(); e; } return addedStmt; }", "n_tokens": 80, "n_pass": [162, 22, 14]}
{"time": "2021-02-19 22:14:40.258718", "score": "0.5475", "loss": "1.8155", "code": "lean addStatement(Statement statement) { if (l) { nt(); } return addedStmt; }", "n_tokens": 77, "n_pass": [163, 23, 15]}
{"time": "2021-02-19 22:14:47.091779", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement) { if (l) { nt(); } return addedS; }", "n_tokens": 74, "n_pass": [169, 28, 16]}
{"time": "2021-02-19 22:15:55.948161", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement) { if (l) { nt(); } return addedS;}", "n_tokens": 73, "n_pass": [347, 69, 17]}
{"time": "2021-02-19 22:16:32.303852", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement){ if (l) { nt(); } return addedS;}", "n_tokens": 72, "n_pass": [386, 92, 18]}
{"time": "2021-02-19 22:16:33.682102", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement){if (l) { nt(); } return addedS;}", "n_tokens": 71, "n_pass": [388, 93, 19]}
{"time": "2021-02-19 22:16:35.038056", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement){if(l) { nt(); } return addedS;}", "n_tokens": 70, "n_pass": [391, 94, 20]}
{"time": "2021-02-19 22:16:36.381055", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement){if(l){ nt(); } return addedS;}", "n_tokens": 69, "n_pass": [395, 95, 21]}
{"time": "2021-02-19 22:16:37.738735", "score": "0.5009", "loss": "3.3733", "code": "lean addStatement(Statement statement){if(l){nt(); } return addedS;}", "n_tokens": 68, "n_pass": [397, 96, 22]}
{"time": "2021-02-19 22:16:39.115964", "score": "0.6185", "loss": "3.7219", "code": "lean addStatement(Statement statement){if(l){t(); } return addedS;}", "n_tokens": 67, "n_pass": [398, 97, 23]}
{"time": "2021-02-19 22:16:40.483235", "score": "0.6185", "loss": "3.7219", "code": "lean addStatement(Statement statement){if(l){t();} return addedS;}", "n_tokens": 66, "n_pass": [403, 98, 24]}
{"time": "2021-02-19 22:16:41.841603", "score": "0.6185", "loss": "3.7219", "code": "lean addStatement(Statement statement){if(l){t();}return addedS;}", "n_tokens": 65, "n_pass": [405, 99, 25]}

Minimal simplified code:
lean addStatement(Statement statement){if(l){t();}return addedS;}

