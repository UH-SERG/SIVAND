
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/quantifier/src/main/java/edu/illinois/cs/cogcomp/quant/lbj/QuantitiesClassifier_readModel.java
method_name = readModel
method_body = public void readModel(java.net.URL a0) { if (isClone) { loadInstance(); instance.readModel(a0); return; } super.readModel(a0); }
predict, score, loss = readModel, 0.967424750328064, 0.06893736869096756

Trace of simplified code(s):
{"time": "2021-02-20 08:20:01.780341", "score": "0.9674", "loss": "0.0689", "code": "public void readModel(java.net.URL a0) { if (isClone) { loadInstance(); instance.readModel(a0); return; } super.readModel(a0); }", "n_tokens": 128, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 08:20:03.090402", "score": "0.9805", "loss": "0.0433", "code": "public void readModel(java.net.URL a0) { if (isClone) { loadInstreturn; } super.readModel(a0); }", "n_tokens": 96, "n_pass": [10, 2, 2]}
{"time": "2021-02-20 08:20:06.071476", "score": "0.9862", "loss": "0.0319", "code": "oid readModel(java.net.URL a0) { if (isClone) { loadInstreturn; } super.readModel(a0); }", "n_tokens": 88, "n_pass": [41, 4, 3]}
{"time": "2021-02-20 08:20:07.372864", "score": "0.9763", "loss": "0.0536", "code": "oid readModel(jaRL a0) { if (isClone) { loadInstreturn; } super.readModel(a0); }", "n_tokens": 80, "n_pass": [43, 5, 4]}
{"time": "2021-02-20 08:20:08.675687", "score": "0.9798", "loss": "0.047", "code": "oid readModel(jaRL a0) { if (isClone) { return; } super.readModel(a0); }", "n_tokens": 72, "n_pass": [47, 6, 5]}
{"time": "2021-02-20 08:20:10.009801", "score": "0.9798", "loss": "0.047", "code": "oid readModel(jaRL a0) { if (isClone) { } super.readModel(a0); }", "n_tokens": 64, "n_pass": [48, 7, 6]}
{"time": "2021-02-20 08:20:17.982656", "score": "0.9634", "loss": "0.0863", "code": "oid readModel(jaRL a0) { if (isC) { } super.readModel(a0); }", "n_tokens": 60, "n_pass": [87, 12, 7]}
{"time": "2021-02-20 08:20:33.476023", "score": "0.6538", "loss": "1.5047", "code": "oid readModel(jaRL a0) { if (isC) { } super.readModel(); }", "n_tokens": 58, "n_pass": [143, 23, 8]}
{"time": "2021-02-20 08:20:34.778454", "score": "0.6661", "loss": "1.3675", "code": "d readModel(jaRL a0) { if (isC) { } super.readModel(); }", "n_tokens": 56, "n_pass": [146, 24, 9]}
{"time": "2021-02-20 08:20:37.862844", "score": "0.56", "loss": "1.919", "code": "d readModel(RL a0) { if (isC) { } super.readModel(); }", "n_tokens": 54, "n_pass": [153, 25, 10]}
{"time": "2021-02-20 08:20:39.199428", "score": "0.7091", "loss": "1.1469", "code": "d readModel(RL a0) { if (i) { } super.readModel(); }", "n_tokens": 52, "n_pass": [161, 26, 11]}
{"time": "2021-02-20 08:20:54.755450", "score": "0.7091", "loss": "1.1469", "code": "d readModel(RL a0) { if (i){ } super.readModel(); }", "n_tokens": 51, "n_pass": [241, 34, 12]}
{"time": "2021-02-20 08:20:56.074150", "score": "0.7091", "loss": "1.1469", "code": "d readModel(RL a0) { if (i){} super.readModel(); }", "n_tokens": 50, "n_pass": [243, 35, 13]}
{"time": "2021-02-20 08:20:57.403925", "score": "0.7091", "loss": "1.1469", "code": "d readModel(RL a0) { if (i){}super.readModel(); }", "n_tokens": 49, "n_pass": [245, 36, 14]}
{"time": "2021-02-20 08:21:18.274777", "score": "0.7091", "loss": "1.1469", "code": "d readModel(RL a0) { if (i){}super.readModel();}", "n_tokens": 48, "n_pass": [264, 52, 15]}
{"time": "2021-02-20 08:21:23.509996", "score": "0.8113", "loss": "0.8152", "code": "d readModel(L a0) { if (i){}super.readModel();}", "n_tokens": 47, "n_pass": [278, 53, 16]}
{"time": "2021-02-20 08:21:24.800619", "score": "0.8113", "loss": "0.8152", "code": "d readModel(L a) { if (i){}super.readModel();}", "n_tokens": 46, "n_pass": [282, 54, 17]}
{"time": "2021-02-20 08:21:26.099211", "score": "0.8113", "loss": "0.8152", "code": "d readModel(L a){ if (i){}super.readModel();}", "n_tokens": 45, "n_pass": [284, 55, 18]}
{"time": "2021-02-20 08:21:27.397447", "score": "0.8113", "loss": "0.8152", "code": "d readModel(L a){if (i){}super.readModel();}", "n_tokens": 44, "n_pass": [286, 56, 19]}
{"time": "2021-02-20 08:21:28.694244", "score": "0.8113", "loss": "0.8152", "code": "d readModel(L a){if(i){}super.readModel();}", "n_tokens": 43, "n_pass": [289, 57, 20]}

Minimal simplified code:
d readModel(L a){if(i){}super.readModel();}

