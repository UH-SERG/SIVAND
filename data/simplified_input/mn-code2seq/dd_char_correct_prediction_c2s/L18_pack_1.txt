
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/dependencyLibs/Mavlink/src/com/MAVLink/common/msg_home_position_pack.java
method_name = pack
method_body = public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_HOME_POSITION; packet.payload.putInt(latitude); packet.payload.putInt(longitude); packet.payload.putInt(altitude); packet.payload.putFloat(x); packet.payload.putFloat(y); packet.payload.putFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloat(approach_x); packet.payload.putFloat(approach_y); packet.payload.putFloat(approach_z); return packet; }
predict, score, loss = pack, 0.9822952747344971, 0.05103129893541336

Trace of simplified code(s):
{"time": "2021-02-19 01:38:58.552564", "score": "0.9797", "loss": "0.044", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_HOME_POSITION; packet.payload.putInt(latitude); packet.payload.putInt(longitude); packet.payload.putInt(altitude); packet.payload.putFloat(x); packet.payload.putFloat(y); packet.payload.putFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloat(approach_x); packet.payload.putFloat(approach_y); packet.payload.putFloat(approach_z); return packet; }", "n_tokens": 559, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 01:38:59.935496", "score": "0.9732", "loss": "0.0515", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packetacket.payload.putFloat(x); packet.payload.putFloat(y); packet.payload.putFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloat(approach_x); packet.payload.putFloat(approach_y); packet.payload.putFloat(approach_z); return packet; }", "n_tokens": 419, "n_pass": [9, 2, 2]}
{"time": "2021-02-19 01:39:01.335463", "score": "0.9574", "loss": "0.0966", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packetputFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloat(approach_x); packet.payload.putFloat(approach_y); packet.payload.putFloat(approach_z); return packet; }", "n_tokens": 349, "n_pass": [18, 3, 3]}
{"time": "2021-02-19 01:39:02.689682", "score": "0.9405", "loss": "0.127", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPackeputFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloat(approach_x); packet.payload.putFloat(approach_y); packet.payload.putFloat(approach_z); return packet; }", "n_tokens": 279, "n_pass": [22, 4, 4]}
{"time": "2021-02-19 01:39:04.051846", "score": "0.9366", "loss": "0.1089", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPackeputFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloaoat(approach_y); packet.payload.putFloat(approach_z); return packet; }", "n_tokens": 244, "n_pass": [38, 5, 5]}
{"time": "2021-02-19 01:39:05.397021", "score": "0.8988", "loss": "0.1718", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPackeputFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloaFloat(approach_z); return packet; }", "n_tokens": 209, "n_pass": [39, 6, 6]}
{"time": "2021-02-19 01:39:06.769006", "score": "0.8535", "loss": "0.2358", "code": "public MAVLinkPacket pack() { MAVLputFloat(z); for (int i = 0; i < q.length; i++) { packet.payload.putFloat(q[i]); } packet.payload.putFloaFloat(approach_z); return packet; }", "n_tokens": 174, "n_pass": [42, 7, 7]}
{"time": "2021-02-19 01:39:08.164959", "score": "0.816", "loss": "0.3768", "code": "public MAVLinkPacket pack() { MAVLputFloat(z); for (int i = 0; i < q.length; i++) { pFloat(q[i]); } packet.payload.putFloaFloat(approach_z); return packet; }", "n_tokens": 157, "n_pass": [61, 8, 8]}
{"time": "2021-02-19 01:39:09.540356", "score": "0.2338", "loss": "2.6673", "code": "public MAVLinkPacket pack() { MAVLputFloat(z); for (int i = 0; i < q.length; i++) { pFloat(q[i]); } pacaFloat(approach_z); return packet; }", "n_tokens": 139, "n_pass": [63, 9, 9]}
{"time": "2021-02-19 01:39:10.936481", "score": "0.3042", "loss": "1.7075", "code": "public MAVLinkPacket pack() { MAVLputFloat(z); for (int i = 0; i < q.length; i++) { pFloat(q[i]); } pac; return packet; }", "n_tokens": 121, "n_pass": [64, 10, 10]}
{"time": "2021-02-19 01:39:13.627416", "score": "0.3985", "loss": "1.4451", "code": "public MAVLinkPacket pack() { MAVLputFloat(z); for (int i = 0; i < q.length; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 112, "n_pass": [86, 12, 11]}
{"time": "2021-02-19 01:39:18.050439", "score": "0.2572", "loss": "2.1444", "code": "public MAVLinkPacket pack() { MAat(z); for (int i = 0; i < q.length; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 104, "n_pass": [91, 15, 12]}
{"time": "2021-02-19 01:39:22.556078", "score": "0.5916", "loss": "0.9313", "code": "public MAVLinkPacket pack() { MAat(z); for (i = 0; i < q.length; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 100, "n_pass": [131, 18, 13]}
{"time": "2021-02-19 01:39:23.878883", "score": "0.5514", "loss": "1.0394", "code": "public MAVLinkPacket pack() { MAat(z); for (0; i < q.length; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 96, "n_pass": [132, 19, 14]}
{"time": "2021-02-19 01:39:25.225817", "score": "0.6034", "loss": "0.874", "code": "public MAVLinkPacket pack() { MAat(z); for (0; i.length; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 92, "n_pass": [134, 20, 15]}
{"time": "2021-02-19 01:39:26.551545", "score": "0.7037", "loss": "0.5998", "code": "public MAVLinkPacket pack() { MAat(z); for (0; igth; i++) { pFloat(q[i]); } pacpacket; }", "n_tokens": 88, "n_pass": [135, 21, 16]}
{"time": "2021-02-19 01:39:27.880013", "score": "0.7037", "loss": "0.5998", "code": "public MAVLinkPacket pack() { MAat(z); for (0; igth; i++) { pFloat(q[i]); } paet; }", "n_tokens": 83, "n_pass": [142, 22, 17]}
{"time": "2021-02-19 01:39:34.980066", "score": "0.8101", "loss": "0.3243", "code": "public MAVLinkPacket pack() { MAat(z); for (0; igth; i++) { pFloat(q[i]); } p; }", "n_tokens": 80, "n_pass": [200, 27, 18]}
{"time": "2021-02-19 01:39:40.422932", "score": "0.6269", "loss": "0.7512", "code": "public MAVLiPacket pack() { MAat(z); for (0; igth; i++) { pFloat(q[i]); } p; }", "n_tokens": 78, "n_pass": [208, 31, 19]}
{"time": "2021-02-19 01:39:44.447341", "score": "0.8525", "loss": "0.2715", "code": "public MAVLiPack pack() { MAat(z); for (0; igth; i++) { pFloat(q[i]); } p; }", "n_tokens": 76, "n_pass": [211, 34, 20]}
{"time": "2021-02-19 01:39:46.493663", "score": "0.7817", "loss": "0.3966", "code": "public MAVLiPack pack() { at(z); for (0; igth; i++) { pFloat(q[i]); } p; }", "n_tokens": 74, "n_pass": [217, 35, 21]}
{"time": "2021-02-19 01:39:47.846066", "score": "0.4967", "loss": "1.0261", "code": "public MAVLiPack pack() { (z); for (0; igth; i++) { pFloat(q[i]); } p; }", "n_tokens": 72, "n_pass": [218, 36, 22]}
{"time": "2021-02-19 01:39:49.204651", "score": "0.4967", "loss": "1.0261", "code": "public MAVLiPack pack() { (z); for (0;gth; i++) { pFloat(q[i]); } p; }", "n_tokens": 70, "n_pass": [225, 37, 23]}
{"time": "2021-02-19 01:39:50.546978", "score": "0.5154", "loss": "0.957", "code": "public MAVLiPack pack() { (z); for (0;h; i++) { pFloat(q[i]); } p; }", "n_tokens": 68, "n_pass": [226, 38, 24]}
{"time": "2021-02-19 01:39:51.917756", "score": "0.7823", "loss": "0.3968", "code": "public MAVLiPack pack() { (z); for (0;h; i) { pFloat(q[i]); } p; }", "n_tokens": 66, "n_pass": [229, 39, 25]}
{"time": "2021-02-19 01:39:53.243014", "score": "0.8098", "loss": "0.3976", "code": "public MAVLiPack pack() { (z); for (0;h; i) { loat(q[i]); } p; }", "n_tokens": 64, "n_pass": [232, 40, 26]}
{"time": "2021-02-19 01:39:54.566729", "score": "0.7436", "loss": "0.4372", "code": "public MAVLiPack pack() { (z); for (0;h; i) { t(q[i]); } p; }", "n_tokens": 61, "n_pass": [233, 41, 27]}
{"time": "2021-02-19 01:39:55.897954", "score": "0.8808", "loss": "0.2376", "code": "public MAVLiPack pack() { (z); for (0;h; i) { t(q); } p; }", "n_tokens": 58, "n_pass": [235, 42, 28]}
{"time": "2021-02-19 01:39:59.880626", "score": "0.9651", "loss": "0.0823", "code": "public MAVPack pack() { (z); for (0;h; i) { t(q); } p; }", "n_tokens": 56, "n_pass": [244, 45, 29]}
{"time": "2021-02-19 01:40:02.562609", "score": "0.4293", "loss": "1.3068", "code": "public MAVPa pack() { (z); for (0;h; i) { t(q); } p; }", "n_tokens": 54, "n_pass": [246, 47, 30]}
{"time": "2021-02-19 01:40:04.611693", "score": "0.5063", "loss": "1.0814", "code": "public MAVPa pack() { (z); for (0;h;) { t(q); } p; }", "n_tokens": 52, "n_pass": [259, 48, 31]}
{"time": "2021-02-19 01:40:08.708820", "score": "0.5349", "loss": "0.9441", "code": "public MAV pack() { (z); for (0;h;) { t(q); } p; }", "n_tokens": 50, "n_pass": [271, 51, 32]}
{"time": "2021-02-19 01:40:19.289762", "score": "0.5349", "loss": "0.9441", "code": "public MAV pack(){ (z); for (0;h;) { t(q); } p; }", "n_tokens": 49, "n_pass": [348, 54, 33]}
{"time": "2021-02-19 01:40:20.611940", "score": "0.5349", "loss": "0.9441", "code": "public MAV pack(){(z); for (0;h;) { t(q); } p; }", "n_tokens": 48, "n_pass": [350, 55, 34]}
{"time": "2021-02-19 01:40:21.951151", "score": "0.5349", "loss": "0.9441", "code": "public MAV pack(){(z);for (0;h;) { t(q); } p; }", "n_tokens": 47, "n_pass": [355, 56, 35]}
{"time": "2021-02-19 01:40:23.299066", "score": "0.5349", "loss": "0.9441", "code": "public MAV pack(){(z);for(0;h;) { t(q); } p; }", "n_tokens": 46, "n_pass": [359, 57, 36]}
{"time": "2021-02-19 01:40:24.674791", "score": "0.6774", "loss": "0.528", "code": "public MAV pack(){(z);for(;h;) { t(q); } p; }", "n_tokens": 45, "n_pass": [361, 58, 37]}
{"time": "2021-02-19 01:40:26.016180", "score": "0.6621", "loss": "0.4827", "code": "public MAV pack(){(z);for(;;) { t(q); } p; }", "n_tokens": 44, "n_pass": [363, 59, 38]}
{"time": "2021-02-19 01:40:27.328441", "score": "0.6621", "loss": "0.4827", "code": "public MAV pack(){(z);for(;;){ t(q); } p; }", "n_tokens": 43, "n_pass": [366, 60, 39]}
{"time": "2021-02-19 01:40:28.691432", "score": "0.6621", "loss": "0.4827", "code": "public MAV pack(){(z);for(;;){t(q); } p; }", "n_tokens": 42, "n_pass": [368, 61, 40]}
{"time": "2021-02-19 01:40:30.012815", "score": "0.5441", "loss": "1.0455", "code": "public MAV pack(){(z);for(;;){(q); } p; }", "n_tokens": 41, "n_pass": [369, 62, 41]}
{"time": "2021-02-19 01:40:31.332569", "score": "0.4662", "loss": "1.2114", "code": "public MAV pack(){(z);for(;;){(q); }  }", "n_tokens": 39, "n_pass": [375, 63, 42]}
{"time": "2021-02-19 01:40:32.657763", "score": "0.4387", "loss": "1.2145", "code": "publicMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 38, "n_pass": [383, 64, 43]}
{"time": "2021-02-19 01:40:39.735060", "score": "0.2582", "loss": "2.1162", "code": "ublicMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 37, "n_pass": [413, 68, 44]}
{"time": "2021-02-19 01:40:41.064630", "score": "0.2582", "loss": "2.1162", "code": "blicMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 36, "n_pass": [414, 69, 45]}
{"time": "2021-02-19 01:40:43.703389", "score": "0.5448", "loss": "1.0968", "code": "bicMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 35, "n_pass": [416, 71, 46]}
{"time": "2021-02-19 01:40:46.346765", "score": "0.5118", "loss": "1.309", "code": "biMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 34, "n_pass": [418, 73, 47]}
{"time": "2021-02-19 01:40:54.747002", "score": "0.4616", "loss": "1.3019", "code": "bMAV pack(){(z);for(;;){(q); }  }", "n_tokens": 33, "n_pass": [449, 78, 48]}
{"time": "2021-02-19 01:41:01.891711", "score": "0.4662", "loss": "1.2114", "code": "MAV pack(){(z);for(;;){(q); }  }", "n_tokens": 32, "n_pass": [479, 82, 49]}
{"time": "2021-02-19 01:41:10.348526", "score": "0.4662", "loss": "1.2114", "code": "MAV pack(){(z);for(;;){(q);}  }", "n_tokens": 31, "n_pass": [516, 86, 50]}
{"time": "2021-02-19 01:41:11.675956", "score": "0.4662", "loss": "1.2114", "code": "MAV pack(){(z);for(;;){(q);} }", "n_tokens": 30, "n_pass": [518, 87, 51]}
{"time": "2021-02-19 01:41:13.008658", "score": "0.4662", "loss": "1.2114", "code": "MAV pack(){(z);for(;;){(q);}}", "n_tokens": 29, "n_pass": [519, 88, 52]}

Minimal simplified code:
MAV pack(){(z);for(;;){(q);}}

