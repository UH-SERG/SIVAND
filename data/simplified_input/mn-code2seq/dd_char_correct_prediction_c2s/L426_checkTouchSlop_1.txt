
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ppamorim__Dragger/dragger/src/main/java/com/github/ppamorim/dragger/ViewDragHelper_checkTouchSlop.java
method_name = checkTouchSlop
method_body = public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }
predict, score, loss = checkTouchSlop, 0.9512754082679749, 0.21504132449626923

Trace of simplified code(s):
{"time": "2021-02-20 12:29:16.773883", "score": "0.9552", "loss": "0.1922", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL; final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 669, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 12:29:18.154851", "score": "0.9656", "loss": "0.1519", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop; } else if (checkHorizontal) { return Math.abs(dx) > mTouchSlop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 586, "n_pass": [22, 2, 2]}
{"time": "2021-02-20 12:29:19.513064", "score": "0.757", "loss": "1.3861", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > lop; } else if (checkVertical) { return Math.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 502, "n_pass": [26, 3, 3]}
{"time": "2021-02-20 12:29:20.896507", "score": "0.8878", "loss": "0.4873", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (directions & DIRECTIODIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 460, "n_pass": [45, 4, 4]}
{"time": "2021-02-20 12:29:24.418544", "score": "0.8903", "loss": "0.4741", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 439, "n_pass": [87, 6, 5]}
{"time": "2021-02-20 12:29:26.137962", "score": "0.8961", "loss": "0.4508", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (checkHorizontal && checkVertical) { return dx * dx + dy * dy > th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 418, "n_pass": [91, 7, 6]}
{"time": "2021-02-20 12:29:27.516980", "score": "0.818", "loss": "0.9067", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx + dy * dy > th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 397, "n_pass": [97, 8, 7]}
{"time": "2021-02-20 12:29:31.700464", "score": "0.8116", "loss": "0.9582", "code": "public boolean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 386, "n_pass": [158, 10, 8]}
{"time": "2021-02-20 12:29:33.075838", "score": "0.8456", "loss": "0.8266", "code": "lean checkTouchSlop(int directions, int pointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 376, "n_pass": [163, 11, 9]}
{"time": "2021-02-20 12:29:34.815850", "score": "0.8038", "loss": "1.1456", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checkHorizontal = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 366, "n_pass": [167, 12, 10]}
{"time": "2021-02-20 12:29:37.522468", "score": "0.7923", "loss": "1.267", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECTION_VERTICAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 356, "n_pass": [176, 14, 11]}
{"time": "2021-02-20 12:29:38.884096", "score": "0.7964", "loss": "1.2365", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRECTION_VERTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 346, "n_pass": [178, 15, 12]}
{"time": "2021-02-20 12:29:40.243972", "score": "0.8048", "loss": "1.1774", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; final float dx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 336, "n_pass": [180, 16, 13]}
{"time": "2021-02-20 12:29:41.641209", "score": "0.8", "loss": "1.3805", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; fidx = mLa- mInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 326, "n_pass": [182, 17, 14]}
{"time": "2021-02-20 12:29:43.047253", "score": "0.7006", "loss": "1.8548", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; fimInitialMotionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 316, "n_pass": [183, 18, 15]}
{"time": "2021-02-20 12:29:44.389957", "score": "0.7909", "loss": "1.311", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; fiionX[pointerId]; final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 305, "n_pass": [184, 19, 16]}
{"time": "2021-02-20 12:29:45.772262", "score": "0.8041", "loss": "1.2382", "code": "lean checkTouchSlop(int directpointerId) { if (!isPointerDown(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; fiionX[pointerId]; final float dy =nY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 294, "n_pass": [188, 20, 17]}
{"time": "2021-02-20 12:29:47.885785", "score": "0.7195", "loss": "2.5457", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIRTICAL; fiionX[pointerId]; final float dy =nY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 284, "n_pass": [205, 21, 18]}
{"time": "2021-02-20 12:29:49.239409", "score": "0.7395", "loss": "2.0504", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; final float dy =nY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 274, "n_pass": [213, 22, 19]}
{"time": "2021-02-20 12:29:53.299387", "score": "0.7324", "loss": "2.1304", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finoat dy =nY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 269, "n_pass": [296, 24, 20]}
{"time": "2021-02-20 12:29:54.666611", "score": "0.7345", "loss": "2.2405", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[pointerId] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 264, "n_pass": [297, 25, 21]}
{"time": "2021-02-20 12:29:56.373152", "score": "0.714", "loss": "2.4803", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mInitialMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 259, "n_pass": [300, 26, 22]}
{"time": "2021-02-20 12:29:57.741194", "score": "0.7055", "loss": "2.5838", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - malMotionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 254, "n_pass": [302, 27, 23]}
{"time": "2021-02-20 12:29:59.080089", "score": "0.7245", "loss": "2.4602", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx> th.abs(dy) > mTouchSlop; } return false; }", "n_tokens": 249, "n_pass": [303, 28, 24]}
{"time": "2021-02-20 12:30:03.457309", "score": "0.7054", "loss": "2.7191", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx> (dy) > mTouchSlop; } return false; }", "n_tokens": 243, "n_pass": [313, 31, 25]}
{"time": "2021-02-20 12:30:04.805987", "score": "0.6844", "loss": "2.9437", "code": "lean checkTouchSlop(int directpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 237, "n_pass": [314, 32, 26]}
{"time": "2021-02-20 12:30:09.967396", "score": "0.6844", "loss": "2.9437", "code": "lean checkTouchSlop(int dpointerId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 232, "n_pass": [325, 35, 27]}
{"time": "2021-02-20 12:30:11.303782", "score": "0.5724", "loss": "3.9264", "code": "lean checkTouchSlop(int derId) { if (!isn(pointerId)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 227, "n_pass": [326, 36, 28]}
{"time": "2021-02-20 12:30:12.693679", "score": "0.5511", "loss": "4.0284", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (DIRECCAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 222, "n_pass": [331, 37, 29]}
{"time": "2021-02-20 12:30:18.103339", "score": "0.5529", "loss": "3.9932", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) == DIionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 217, "n_pass": [341, 41, 30]}
{"time": "2021-02-20 12:30:36.081394", "score": "0.5364", "loss": "4.166", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pointerId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 214, "n_pass": [471, 53, 31]}
{"time": "2021-02-20 12:30:38.754510", "score": "0.4917", "loss": "4.5186", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pterId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 211, "n_pass": [474, 55, 32]}
{"time": "2021-02-20 12:30:40.119934", "score": "0.4906", "loss": "4.5233", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; finy =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 208, "n_pass": [475, 56, 33]}
{"time": "2021-02-20 12:30:41.460160", "score": "0.4788", "loss": "4.6703", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[poin] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 205, "n_pass": [478, 57, 34]}
{"time": "2021-02-20 12:30:43.188076", "score": "0.4628", "loss": "4.8223", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] - mionY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 202, "n_pass": [481, 58, 35]}
{"time": "2021-02-20 12:30:44.547901", "score": "0.4642", "loss": "4.8224", "code": "lean checkTouchSlop(int derId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 199, "n_pass": [483, 59, 36]}
{"time": "2021-02-20 12:31:06.547069", "score": "0.6901", "loss": "2.8728", "code": "lean checkTouchSlop(int rId) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 197, "n_pass": [523, 73, 37]}
{"time": "2021-02-20 12:31:07.882307", "score": "0.6536", "loss": "3.2362", "code": "lean checkTouchSlop(int d) { if (!isn(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 195, "n_pass": [524, 74, 38]}
{"time": "2021-02-20 12:31:09.219471", "score": "0.7657", "loss": "1.765", "code": "lean checkTouchSlop(int d) { if (!n(poid)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 193, "n_pass": [530, 75, 39]}
{"time": "2021-02-20 12:31:10.570131", "score": "0.7588", "loss": "1.8643", "code": "lean checkTouchSlop(int d) { if (!n(id)) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 191, "n_pass": [532, 76, 40]}
{"time": "2021-02-20 12:31:11.924690", "score": "0.7928", "loss": "1.5182", "code": "lean checkTouchSlop(int d) { if (!n()) { return false; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 189, "n_pass": [533, 77, 41]}
{"time": "2021-02-20 12:31:13.280935", "score": "0.7966", "loss": "1.5289", "code": "lean checkTouchSlop(int d) { if (!n()) { returfalse; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 187, "n_pass": [539, 78, 42]}
{"time": "2021-02-20 12:31:14.613440", "score": "0.7966", "loss": "1.5289", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } final boolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 184, "n_pass": [540, 79, 43]}
{"time": "2021-02-20 12:31:15.945445", "score": "0.8152", "loss": "1.4499", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finboolean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 181, "n_pass": [544, 80, 44]}
{"time": "2021-02-20 12:31:17.276384", "score": "0.8152", "loss": "1.4499", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finlean checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 178, "n_pass": [545, 81, 45]}
{"time": "2021-02-20 12:31:18.604314", "score": "0.8152", "loss": "1.4499", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finn checl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 175, "n_pass": [546, 82, 46]}
{"time": "2021-02-20 12:31:19.986077", "score": "0.7064", "loss": "2.2949", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finhecl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 172, "n_pass": [547, 83, 47]}
{"time": "2021-02-20 12:31:21.400355", "score": "0.6872", "loss": "2.2546", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==ionX[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 169, "n_pass": [548, 84, 48]}
{"time": "2021-02-20 12:31:24.435784", "score": "0.691", "loss": "2.1881", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pointerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 166, "n_pass": [553, 86, 49]}
{"time": "2021-02-20 12:31:26.496964", "score": "0.6654", "loss": "2.4408", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[poerId]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 163, "n_pass": [562, 87, 50]}
{"time": "2021-02-20 12:31:27.821919", "score": "0.6342", "loss": "2.5997", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eckVertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 160, "n_pass": [563, 88, 51]}
{"time": "2021-02-20 12:31:29.152561", "score": "0.6704", "loss": "2.5826", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eertical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 157, "n_pass": [567, 89, 52]}
{"time": "2021-02-20 12:31:30.516239", "score": "0.6704", "loss": "2.5826", "code": "lean checkTouchSlop(int d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 154, "n_pass": [568, 90, 53]}
{"time": "2021-02-20 12:31:45.429841", "score": "0.6297", "loss": "3.1177", "code": "lean checkTouchSlop(t d) { if (!n()) { returse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 152, "n_pass": [597, 99, 54]}
{"time": "2021-02-20 12:31:46.780049", "score": "0.6297", "loss": "3.1177", "code": "lean checkTouchSlop(t d) { if (!n()) {eturse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 150, "n_pass": [607, 100, 55]}
{"time": "2021-02-20 12:31:48.105383", "score": "0.6297", "loss": "3.1177", "code": "lean checkTouchSlop(t d) { if (!n()) {urse; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 148, "n_pass": [608, 101, 56]}
{"time": "2021-02-20 12:31:49.435729", "score": "0.6564", "loss": "2.9231", "code": "lean checkTouchSlop(t d) { if (!n()) {se; } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 146, "n_pass": [609, 102, 57]}
{"time": "2021-02-20 12:31:50.764698", "score": "0.6631", "loss": "2.7951", "code": "lean checkTouchSlop(t d) { if (!n()) { } finl = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 143, "n_pass": [610, 103, 58]}
{"time": "2021-02-20 12:31:52.136151", "score": "0.6702", "loss": "2.7964", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (CAL) ==X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 140, "n_pass": [612, 104, 59]}
{"time": "2021-02-20 12:31:53.850398", "score": "0.5683", "loss": "3.6258", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (CAL)X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 137, "n_pass": [616, 105, 60]}
{"time": "2021-02-20 12:32:14.586929", "score": "0.6002", "loss": "3.4282", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (AL)X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 136, "n_pass": [773, 114, 61]}
{"time": "2021-02-20 12:32:15.931393", "score": "0.5673", "loss": "3.6688", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[pId]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 135, "n_pass": [774, 115, 62]}
{"time": "2021-02-20 12:32:18.583288", "score": "0.568", "loss": "3.6577", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[Id]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 134, "n_pass": [779, 117, 63]}
{"time": "2021-02-20 12:32:19.899990", "score": "0.5468", "loss": "3.7861", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d]; f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 133, "n_pass": [780, 118, 64]}
{"time": "2021-02-20 12:32:21.250027", "score": "0.5468", "loss": "3.7861", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f =nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 132, "n_pass": [784, 119, 65]}
{"time": "2021-02-20 12:32:22.598704", "score": "0.5468", "loss": "3.7861", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=nY[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 131, "n_pass": [786, 120, 66]}
{"time": "2021-02-20 12:32:24.287868", "score": "0.5476", "loss": "3.8202", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p] -onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 130, "n_pass": [788, 121, 67]}
{"time": "2021-02-20 12:32:25.620169", "score": "0.5476", "loss": "3.8202", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-onY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 129, "n_pass": [793, 122, 68]}
{"time": "2021-02-20 12:32:26.948152", "score": "0.5281", "loss": "3.9489", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-nY[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 128, "n_pass": [795, 123, 69]}
{"time": "2021-02-20 12:32:29.613096", "score": "0.5366", "loss": "3.8569", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[pod]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 127, "n_pass": [797, 125, 70]}
{"time": "2021-02-20 12:32:30.960521", "score": "0.5214", "loss": "3.9329", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (eical) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 125, "n_pass": [799, 126, 71]}
{"time": "2021-02-20 12:32:32.309177", "score": "0.5561", "loss": "3.457", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (eal) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 123, "n_pass": [804, 127, 72]}
{"time": "2021-02-20 12:32:33.635319", "score": "0.4879", "loss": "4.3113", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx>  mTouchSlop; } return false; }", "n_tokens": 121, "n_pass": [805, 128, 73]}
{"time": "2021-02-20 12:32:36.673070", "score": "0.5285", "loss": "3.8681", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return false; }", "n_tokens": 119, "n_pass": [816, 130, 74]}
{"time": "2021-02-20 12:32:45.991976", "score": "0.6332", "loss": "3.1607", "code": "lean checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 117, "n_pass": [828, 137, 75]}
{"time": "2021-02-20 12:32:49.992750", "score": "0.5428", "loss": "3.8004", "code": "len checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 116, "n_pass": [833, 140, 76]}
{"time": "2021-02-20 12:32:51.326441", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d) { if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 115, "n_pass": [834, 141, 77]}
{"time": "2021-02-20 12:32:58.152086", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){ if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 114, "n_pass": [855, 142, 78]}
{"time": "2021-02-20 12:32:59.498881", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if (!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 113, "n_pass": [857, 143, 79]}
{"time": "2021-02-20 12:33:00.844375", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()) { } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 112, "n_pass": [860, 144, 80]}
{"time": "2021-02-20 12:33:03.507049", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()){ } l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 111, "n_pass": [867, 146, 81]}
{"time": "2021-02-20 12:33:04.860753", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()){} l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 110, "n_pass": [869, 147, 82]}
{"time": "2021-02-20 12:33:06.185974", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()){}l = (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 109, "n_pass": [871, 148, 83]}
{"time": "2021-02-20 12:33:07.510239", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()){}l= (L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 108, "n_pass": [873, 149, 84]}
{"time": "2021-02-20 12:33:08.855401", "score": "0.5568", "loss": "3.7415", "code": "le checkTouchSlop(t d){if(!n()){}l=(L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 107, "n_pass": [875, 150, 85]}
{"time": "2021-02-20 12:33:28.274270", "score": "0.5715", "loss": "3.501", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)X[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 106, "n_pass": [921, 164, 86]}
{"time": "2021-02-20 12:33:36.429001", "score": "0.6356", "loss": "3.235", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p]; if (e) { return dx * dx> TouchSlop; } return fae; }", "n_tokens": 105, "n_pass": [958, 166, 87]}
{"time": "2021-02-20 12:33:38.494995", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p]; if (e) { return d* dx> TouchSlop; } return fae; }", "n_tokens": 103, "n_pass": [982, 167, 88]}
{"time": "2021-02-20 12:34:14.556744", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p]; if (e) { return d* dx> TouchSlop;} return fae; }", "n_tokens": 102, "n_pass": [1119, 186, 89]}
{"time": "2021-02-20 12:34:15.898922", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p]; if (e) { return d* dx> TouchSlop;}return fae; }", "n_tokens": 101, "n_pass": [1120, 187, 90]}
{"time": "2021-02-20 12:34:30.550245", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p]; if (e) { return d* dx> TouchSlop;}return fae;}", "n_tokens": 100, "n_pass": [1132, 198, 91]}
{"time": "2021-02-20 12:34:40.752163", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if (e) { return d* dx> TouchSlop;}return fae;}", "n_tokens": 99, "n_pass": [1187, 201, 92]}
{"time": "2021-02-20 12:34:42.079824", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e) { return d* dx> TouchSlop;}return fae;}", "n_tokens": 98, "n_pass": [1190, 202, 93]}
{"time": "2021-02-20 12:34:43.421340", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e){ return d* dx> TouchSlop;}return fae;}", "n_tokens": 97, "n_pass": [1194, 203, 94]}
{"time": "2021-02-20 12:34:44.735231", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e){return d* dx> TouchSlop;}return fae;}", "n_tokens": 96, "n_pass": [1196, 204, 95]}
{"time": "2021-02-20 12:34:46.432401", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e){return d*dx> TouchSlop;}return fae;}", "n_tokens": 95, "n_pass": [1206, 205, 96]}
{"time": "2021-02-20 12:34:50.414647", "score": "0.6499", "loss": "3.1884", "code": "l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e){return d*dx>TouchSlop;}return fae;}", "n_tokens": 94, "n_pass": [1210, 208, 97]}

Minimal simplified code:
l checkTouchSlop(t d){if(!n()){}l=(L)[d];f=Y[p]-n[p];if(e){return d*dx>TouchSlop;}return fae;}

