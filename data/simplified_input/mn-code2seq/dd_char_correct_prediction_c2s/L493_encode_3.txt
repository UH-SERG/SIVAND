
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence_encode.java
method_name = encode
method_body = void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERTags.CONSTRUCTED, encoded); } else { super.toDLObject().encode(out); } }
predict, score, loss = encode, 0.9824183583259583, 0.03908340632915497

Trace of simplified code(s):
{"time": "2021-02-20 17:38:21.218217", "score": "0.9824", "loss": "0.0391", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERTags.CONSTRUCTED, encoded); } else { super.toDLObject().encode(out); } }", "n_tokens": 189, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 17:38:22.537487", "score": "0.9649", "loss": "0.0885", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else { super.toDLObject().encode(out); } }", "n_tokens": 165, "n_pass": [25, 2, 2]}
{"time": "2021-02-20 17:38:23.854512", "score": "0.9273", "loss": "0.3935", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else {bject().encode(out); } }", "n_tokens": 153, "n_pass": [48, 3, 3]}
{"time": "2021-02-20 17:38:25.170043", "score": "0.7485", "loss": "0.5855", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { out.writeEncoded(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 141, "n_pass": [49, 4, 4]}
{"time": "2021-02-20 17:38:26.522146", "score": "0.3914", "loss": "1.5305", "code": "void encode(ASN1OutputStream out) throws IOException { if (encoded != null) { outd(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 129, "n_pass": [58, 5, 5]}
{"time": "2021-02-20 17:38:36.714670", "score": "0.3677", "loss": "1.6153", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded != null) { outd(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 123, "n_pass": [108, 12, 6]}
{"time": "2021-02-20 17:38:48.118537", "score": "0.4291", "loss": "1.5737", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { outd(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 120, "n_pass": [177, 20, 7]}
{"time": "2021-02-20 17:38:49.430790", "score": "0.3675", "loss": "1.9614", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { d(BERTags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 117, "n_pass": [179, 21, 8]}
{"time": "2021-02-20 17:38:50.793833", "score": "0.2937", "loss": "2.1014", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | BERd); } else {de(out); } }", "n_tokens": 114, "n_pass": [181, 22, 9]}
{"time": "2021-02-20 17:38:58.760765", "score": "0.4438", "loss": "1.3528", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(out); } }", "n_tokens": 111, "n_pass": [187, 28, 10]}
{"time": "2021-02-20 17:39:00.063050", "score": "0.5663", "loss": "1.0415", "code": "void encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 108, "n_pass": [193, 29, 11]}
{"time": "2021-02-20 17:39:01.402306", "score": "0.5946", "loss": "1.0059", "code": "id encode(ASN1OutputStream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 106, "n_pass": [196, 30, 12]}
{"time": "2021-02-20 17:39:05.112539", "score": "0.5278", "loss": "1.3066", "code": "id encode(ASN1OutStream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 103, "n_pass": [203, 32, 13]}
{"time": "2021-02-20 17:39:06.411712", "score": "0.3354", "loss": "2.415", "code": "id encode(ASN1Ouream out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 100, "n_pass": [204, 33, 14]}
{"time": "2021-02-20 17:39:07.742484", "score": "0.3354", "loss": "2.415", "code": "id encode(ASN1Oum out) throws IOExn { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 97, "n_pass": [205, 34, 15]}
{"time": "2021-02-20 17:39:09.056141", "score": "0.2778", "loss": "2.5157", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(Bags.SEQUENCE | d); } else {de(); } }", "n_tokens": 94, "n_pass": [211, 35, 16]}
{"time": "2021-02-20 17:39:14.286473", "score": "0.3171", "loss": "2.2889", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(B.SEQUENCE | d); } else {de(); } }", "n_tokens": 91, "n_pass": [221, 39, 17]}
{"time": "2021-02-20 17:39:19.509341", "score": "0.288", "loss": "2.4652", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(B.SEQUENCEd); } else {de(); } }", "n_tokens": 88, "n_pass": [225, 43, 18]}
{"time": "2021-02-20 17:39:27.151375", "score": "0.2817", "loss": "2.6133", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(BQUENCEd); } else {de(); } }", "n_tokens": 85, "n_pass": [253, 48, 19]}
{"time": "2021-02-20 17:39:28.508562", "score": "0.3095", "loss": "2.1814", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(BNCEd); } else {de(); } }", "n_tokens": 82, "n_pass": [254, 49, 20]}
{"time": "2021-02-20 17:39:40.053664", "score": "0.3288", "loss": "2.3817", "code": "id encode(ASN1Oum out) throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 80, "n_pass": [343, 56, 21]}
{"time": "2021-02-20 17:39:42.685853", "score": "0.3144", "loss": "2.4158", "code": "d encode(ASN1Oum out) throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 79, "n_pass": [355, 58, 22]}
{"time": "2021-02-20 17:39:50.798778", "score": "0.3144", "loss": "2.4158", "code": "d encode(ASNOum out) throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 78, "n_pass": [368, 62, 23]}
{"time": "2021-02-20 17:39:53.432378", "score": "0.2033", "loss": "3.0291", "code": "d encode(ASNOm out) throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 77, "n_pass": [370, 64, 24]}
{"time": "2021-02-20 17:39:57.371032", "score": "0.1775", "loss": "3.1886", "code": "d encode(ASNOm ot) throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 76, "n_pass": [374, 67, 25]}
{"time": "2021-02-20 17:40:00.010118", "score": "0.1775", "loss": "3.1886", "code": "d encode(ASNOm ot)throws In { if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 75, "n_pass": [377, 69, 26]}
{"time": "2021-02-20 17:40:25.497474", "score": "0.1775", "loss": "3.1886", "code": "d encode(ASNOm ot)throws In{ if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 74, "n_pass": [478, 83, 27]}
{"time": "2021-02-20 17:40:26.827836", "score": "0.1775", "loss": "3.1886", "code": "d encode(ASNOm ot)throws In{if (encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 73, "n_pass": [479, 84, 28]}
{"time": "2021-02-20 17:40:28.136557", "score": "0.1775", "loss": "3.1886", "code": "d encode(ASNOm ot)throws In{if(encoded !=ll) { d(BEd); } else {de(); } }", "n_tokens": 72, "n_pass": [482, 85, 29]}
{"time": "2021-02-20 17:40:37.334734", "score": "0.4149", "loss": "2.2466", "code": "d encode(ASNOm ot)throws In{if(encode !=ll) { d(BEd); } else {de(); } }", "n_tokens": 71, "n_pass": [490, 92, 30]}
{"time": "2021-02-20 17:40:38.631729", "score": "0.4149", "loss": "2.2466", "code": "d encode(ASNOm ot)throws In{if(encode!=ll) { d(BEd); } else {de(); } }", "n_tokens": 70, "n_pass": [491, 93, 31]}
{"time": "2021-02-20 17:40:41.249636", "score": "0.5192", "loss": "1.6495", "code": "d encode(ASNOm ot)throws In{if(encode!=l) { d(BEd); } else {de(); } }", "n_tokens": 69, "n_pass": [494, 95, 32]}
{"time": "2021-02-20 17:40:42.561910", "score": "0.5192", "loss": "1.6495", "code": "d encode(ASNOm ot)throws In{if(encode!=l){ d(BEd); } else {de(); } }", "n_tokens": 68, "n_pass": [497, 96, 33]}
{"time": "2021-02-20 17:40:43.889160", "score": "0.5192", "loss": "1.6495", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(BEd); } else {de(); } }", "n_tokens": 67, "n_pass": [499, 97, 34]}
{"time": "2021-02-20 17:40:46.530798", "score": "0.5728", "loss": "1.3172", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(Ed); } else {de(); } }", "n_tokens": 66, "n_pass": [502, 99, 35]}
{"time": "2021-02-20 17:40:47.851987", "score": "0.3735", "loss": "1.7446", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d); } else {de(); } }", "n_tokens": 65, "n_pass": [503, 100, 36]}
{"time": "2021-02-20 17:40:50.477735", "score": "0.3735", "loss": "1.7446", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);} else {de(); } }", "n_tokens": 64, "n_pass": [507, 102, 37]}
{"time": "2021-02-20 17:40:51.783914", "score": "0.3735", "loss": "1.7446", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);}else {de(); } }", "n_tokens": 63, "n_pass": [509, 103, 38]}
{"time": "2021-02-20 17:40:53.105266", "score": "0.3735", "loss": "1.7446", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);}else{de(); } }", "n_tokens": 62, "n_pass": [514, 104, 39]}
{"time": "2021-02-20 17:40:54.412653", "score": "0.4626", "loss": "2.2091", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);}else{e(); } }", "n_tokens": 61, "n_pass": [516, 105, 40]}
{"time": "2021-02-20 17:40:55.723020", "score": "0.4626", "loss": "2.2091", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);}else{e();} }", "n_tokens": 60, "n_pass": [521, 106, 41]}
{"time": "2021-02-20 17:40:57.062895", "score": "0.4626", "loss": "2.2091", "code": "d encode(ASNOm ot)throws In{if(encode!=l){d(d);}else{e();}}", "n_tokens": 59, "n_pass": [523, 107, 42]}
{"time": "2021-02-20 17:41:01.252612", "score": "0.3909", "loss": "2.4498", "code": "d encode(SNOm ot)throws In{if(encode!=l){d(d);}else{e();}}", "n_tokens": 58, "n_pass": [534, 108, 43]}
{"time": "2021-02-20 17:41:05.189942", "score": "0.3311", "loss": "2.5106", "code": "d encode(SNm ot)throws In{if(encode!=l){d(d);}else{e();}}", "n_tokens": 57, "n_pass": [537, 111, 44]}
{"time": "2021-02-20 17:41:06.498040", "score": "0.5829", "loss": "1.5084", "code": "d encode(SN ot)throws In{if(encode!=l){d(d);}else{e();}}", "n_tokens": 56, "n_pass": [538, 112, 45]}
{"time": "2021-02-20 17:41:07.805183", "score": "0.2915", "loss": "2.8565", "code": "d encode(SN t)throws In{if(encode!=l){d(d);}else{e();}}", "n_tokens": 55, "n_pass": [540, 113, 46]}
{"time": "2021-02-20 17:41:09.124792", "score": "0.2348", "loss": "3.1042", "code": "d encode(SN t)throws n{if(encode!=l){d(d);}else{e();}}", "n_tokens": 54, "n_pass": [550, 114, 47]}
{"time": "2021-02-20 17:41:19.669687", "score": "0.4834", "loss": "2.2062", "code": "d encode(SN t)throws n{if(encode!=l){(d);}else{e();}}", "n_tokens": 53, "n_pass": [567, 122, 48]}

Minimal simplified code:
d encode(SN t)throws n{if(encode!=l){(d);}else{e();}}

