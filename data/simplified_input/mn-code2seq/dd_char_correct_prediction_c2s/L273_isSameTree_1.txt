
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_572_isSameTree.java
method_name = isSameTree
method_body = private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }
predict, score, loss = isSameTree, 0.8817868232727051, 0.5125698447227478

Trace of simplified code(s):
{"time": "2021-02-20 02:07:33.114842", "score": "0.8818", "loss": "0.5126", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 186, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 02:07:34.814842", "score": "0.799", "loss": "1.0823", "code": "lean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 175, "n_pass": [44, 2, 2]}
{"time": "2021-02-20 02:07:36.502137", "score": "0.8924", "loss": "0.4955", "code": "lean isSameTree(TreeNoode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 164, "n_pass": [47, 3, 3]}
{"time": "2021-02-20 02:07:37.857510", "score": "0.8459", "loss": "0.7383", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 152, "n_pass": [50, 4, 4]}
{"time": "2021-02-20 02:07:42.576515", "score": "0.8321", "loss": "0.8802", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 146, "n_pass": [92, 7, 5]}
{"time": "2021-02-20 02:07:44.278654", "score": "0.7394", "loss": "2.1215", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return p= q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 140, "n_pass": [94, 8, 6]}
{"time": "2021-02-20 02:07:45.597564", "score": "0.8769", "loss": "0.7049", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return pl && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 134, "n_pass": [95, 9, 7]}
{"time": "2021-02-20 02:07:49.658101", "score": "0.87", "loss": "0.8336", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return pl && isSameTree(p.q.left) && isSameTree(p.right, q.right); }", "n_tokens": 128, "n_pass": [99, 12, 8]}
{"time": "2021-02-20 02:07:52.296194", "score": "0.8683", "loss": "0.9881", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return pl && isSameTree(p.q.left) && isSameTree(p. q.right); }", "n_tokens": 122, "n_pass": [104, 14, 9]}
{"time": "2021-02-20 02:07:53.606641", "score": "0.817", "loss": "1.26", "code": "lean isSameTree(TreeNoode q) { if (p == nulll) { return ; } return pl && isSameTree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 116, "n_pass": [105, 15, 10]}
{"time": "2021-02-20 02:07:55.983163", "score": "0.7642", "loss": "1.6176", "code": "lean isSameTree(TreeNoode q) { if (p =l) { return ; } return pl && isSameTree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 110, "n_pass": [114, 16, 11]}
{"time": "2021-02-20 02:07:57.304465", "score": "0.767", "loss": "1.5937", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } return pl && isSameTree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 104, "n_pass": [116, 17, 12]}
{"time": "2021-02-20 02:08:04.417925", "score": "0.7755", "loss": "1.3882", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } return p& isSameTree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 101, "n_pass": [175, 21, 13]}
{"time": "2021-02-20 02:08:07.081818", "score": "0.6361", "loss": "2.4689", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } return p& isSaree(p.q.left) && isSameTree(p.ht); }", "n_tokens": 98, "n_pass": [177, 23, 14]}
{"time": "2021-02-20 02:08:08.473289", "score": "0.7014", "loss": "1.9613", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } return p& isSa(p.q.left) && isSameTree(p.ht); }", "n_tokens": 95, "n_pass": [178, 24, 15]}
{"time": "2021-02-20 02:08:09.810141", "score": "0.6668", "loss": "2.1952", "code": "lean isSameTree(TreeNoode q) { if (p =l) { r; } return p& isSa(p.eft) && isSameTree(p.ht); }", "n_tokens": 92, "n_pass": [180, 25, 16]}
{"time": "2021-02-20 02:08:16.437133", "score": "0.6382", "loss": "2.3833", "code": "an isSameTree(TreeNoode q) { if (p =l) { r; } return p& isSa(p.eft) && isSameTree(p.ht); }", "n_tokens": 90, "n_pass": [190, 30, 17]}
{"time": "2021-02-20 02:08:19.533992", "score": "0.6003", "loss": "2.6163", "code": "an isSameTree(TNoode q) { if (p =l) { r; } return p& isSa(p.eft) && isSameTree(p.ht); }", "n_tokens": 87, "n_pass": [197, 31, 18]}
{"time": "2021-02-20 02:08:20.863097", "score": "0.6095", "loss": "2.3721", "code": "an isSameTree(Tde q) { if (p =l) { r; } return p& isSa(p.eft) && isSameTree(p.ht); }", "n_tokens": 84, "n_pass": [198, 32, 19]}
{"time": "2021-02-20 02:08:23.913926", "score": "0.5336", "loss": "3.3868", "code": "an isSameTree(Tde q) { if (p =l) { r; } return psSa(p.eft) && isSameTree(p.ht); }", "n_tokens": 81, "n_pass": [210, 34, 20]}
{"time": "2021-02-20 02:08:25.239547", "score": "0.803", "loss": "1.1108", "code": "an isSameTree(Tde q) { if (p =l) { r; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 78, "n_pass": [211, 35, 21]}
{"time": "2021-02-20 02:08:33.640800", "score": "0.8149", "loss": "1.1019", "code": "an isSameTree(Tde q) { if (l) { r; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 75, "n_pass": [232, 40, 22]}
{"time": "2021-02-20 02:08:44.383488", "score": "0.8149", "loss": "1.1019", "code": "an isSameTree(Tde q){ if (l) { r; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 74, "n_pass": [311, 45, 23]}
{"time": "2021-02-20 02:08:45.679575", "score": "0.8149", "loss": "1.1019", "code": "an isSameTree(Tde q){if (l) { r; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 73, "n_pass": [313, 46, 24]}
{"time": "2021-02-20 02:08:46.979636", "score": "0.8149", "loss": "1.1019", "code": "an isSameTree(Tde q){if(l) { r; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 72, "n_pass": [316, 47, 25]}
{"time": "2021-02-20 02:08:48.315298", "score": "0.8284", "loss": "1.001", "code": "an isSameTree(Tde q){if(l) {; } return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 70, "n_pass": [321, 48, 26]}
{"time": "2021-02-20 02:08:49.741677", "score": "0.8284", "loss": "1.001", "code": "an isSameTree(Tde q){if(l) {} return p(p.eft) && isSameTree(p.ht); }", "n_tokens": 68, "n_pass": [322, 49, 27]}
{"time": "2021-02-20 02:08:52.479050", "score": "0.7601", "loss": "1.324", "code": "an isSameTree(Tde q){if(l) {} return p(pft) && isSameTree(p.ht); }", "n_tokens": 66, "n_pass": [329, 51, 28]}
{"time": "2021-02-20 02:08:53.798965", "score": "0.7793", "loss": "1.3195", "code": "an isSameTree(Tde q){if(l) {} return p(p) && isSameTree(p.ht); }", "n_tokens": 64, "n_pass": [330, 52, 29]}
{"time": "2021-02-20 02:09:02.957189", "score": "0.8007", "loss": "1.2291", "code": "n isSameTree(Tde q){if(l) {} return p(p) && isSameTree(p.ht); }", "n_tokens": 63, "n_pass": [343, 59, 30]}
{"time": "2021-02-20 02:09:08.705450", "score": "0.7333", "loss": "1.666", "code": "n isSameTree(de q){if(l) {} return p(p) && isSameTree(p.ht); }", "n_tokens": 62, "n_pass": [357, 60, 31]}
{"time": "2021-02-20 02:09:10.043030", "score": "0.697", "loss": "2.0037", "code": "n isSameTree(e q){if(l) {} return p(p) && isSameTree(p.ht); }", "n_tokens": 61, "n_pass": [358, 61, 32]}
{"time": "2021-02-20 02:09:11.369403", "score": "0.6815", "loss": "2.1796", "code": "n isSameTree(e q){if(l) {} return(p) && isSameTree(p.ht); }", "n_tokens": 59, "n_pass": [374, 62, 33]}
{"time": "2021-02-20 02:09:12.705198", "score": "0.7742", "loss": "1.3501", "code": "n isSameTree(e q){if(l) {} return(p)  isSameTree(p.ht); }", "n_tokens": 57, "n_pass": [377, 63, 34]}
{"time": "2021-02-20 02:09:37.723366", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l) {} return(p)  isSameTree(p.t); }", "n_tokens": 56, "n_pass": [461, 77, 35]}
{"time": "2021-02-20 02:09:39.177954", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l) {} return(p)  isSameTree(p.t);}", "n_tokens": 55, "n_pass": [464, 78, 36]}
{"time": "2021-02-20 02:09:44.807286", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l){} return(p)  isSameTree(p.t);}", "n_tokens": 54, "n_pass": [489, 79, 37]}
{"time": "2021-02-20 02:09:46.139586", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l){}return(p)  isSameTree(p.t);}", "n_tokens": 53, "n_pass": [492, 80, 38]}
{"time": "2021-02-20 02:09:47.444873", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l){}return(p) isSameTree(p.t);}", "n_tokens": 52, "n_pass": [502, 81, 39]}
{"time": "2021-02-20 02:09:48.791369", "score": "0.8154", "loss": "1.1471", "code": "n isSameTree(e q){if(l){}return(p)isSameTree(p.t);}", "n_tokens": 51, "n_pass": [503, 82, 40]}

Minimal simplified code:
n isSameTree(e q){if(l){}return(p)isSameTree(p.t);}

