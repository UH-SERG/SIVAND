
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CursorNode_printSubNodes.java
method_name = printSubNodes
method_body = public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, "orderByList: "); orderByList.treePrint(depth + 1); } if (offset != null) { printLabel(depth, "offset: "); offset.treePrint(depth + 1); } if (fetchFirst != null) { printLabel(depth, "fetchFirst: "); fetchFirst.treePrint(depth + 1); } }
predict, score, loss = printSubNodes, 0.9970132112503052, 0.009994853287935257

Trace of simplified code(s):
{"time": "2021-02-19 14:49:56.414116", "score": "0.997", "loss": "0.0101", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null) { printLabel(depth, \"offset: \"); offset.treePrint(depth + 1); } if (fetchFirst != null) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 347, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 14:49:57.778660", "score": "0.9976", "loss": "0.0083", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != set != null) { printLabel(depth, \"offset: \"); offset.treePrint(depth + 1); } if (fetchFirst != null) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 260, "n_pass": [9, 2, 2]}
{"time": "2021-02-19 14:49:59.186763", "score": "0.9953", "loss": "0.016", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != irst != null) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 173, "n_pass": [10, 3, 3]}
{"time": "2021-02-19 14:50:00.914750", "score": "0.9929", "loss": "0.0232", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList !=ll) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 162, "n_pass": [51, 4, 4]}
{"time": "2021-02-19 14:50:02.260668", "score": "0.9872", "loss": "0.0407", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList !=ll) { printLabel(depth, \"fetchFirst: \"); fetePrint(depth + 1); } }", "n_tokens": 151, "n_pass": [55, 5, 5]}
{"time": "2021-02-19 14:50:03.616522", "score": "0.9817", "loss": "0.058", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList !=ll) { printLabel(depth, \"fetchFirst: \"); fetePrint(depth + 1); } }", "n_tokens": 141, "n_pass": [58, 6, 6]}
{"time": "2021-02-19 14:50:06.670176", "score": "0.9854", "loss": "0.0464", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (ordll) { printLabel(depth, \"fetchFirst: \"); fetePrint(depth + 1); } }", "n_tokens": 130, "n_pass": [65, 8, 7]}
{"time": "2021-02-19 14:50:09.693167", "score": "0.8958", "loss": "0.3767", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetchFirst: \"); fetePrint(depth + 1); } }", "n_tokens": 124, "n_pass": [104, 10, 8]}
{"time": "2021-02-19 14:50:11.058689", "score": "0.907", "loss": "0.3288", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetch \"); fetePrint(depth + 1); } }", "n_tokens": 118, "n_pass": [108, 11, 9]}
{"time": "2021-02-19 14:50:13.720957", "score": "0.8831", "loss": "0.4323", "code": "d printSubNodes(int depth) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 112, "n_pass": [112, 13, 10]}
{"time": "2021-02-19 14:50:24.054059", "score": "0.8955", "loss": "0.3773", "code": "d printSubNodes(t depth) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 110, "n_pass": [186, 18, 11]}
{"time": "2021-02-19 14:50:25.384790", "score": "0.9062", "loss": "0.3323", "code": "d printSubNodes(t pth) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 108, "n_pass": [188, 19, 12]}
{"time": "2021-02-19 14:50:26.707633", "score": "0.886", "loss": "0.4196", "code": "d printSubNodes(t h) { super.printSubNodes(depth); if (ordll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 106, "n_pass": [189, 20, 13]}
{"time": "2021-02-19 14:50:36.013273", "score": "0.8983", "loss": "0.3655", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ordll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 103, "n_pass": [199, 27, 14]}
{"time": "2021-02-19 14:50:37.381160", "score": "0.8803", "loss": "0.4461", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { abel(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 100, "n_pass": [203, 28, 15]}
{"time": "2021-02-19 14:50:38.705070", "score": "0.907", "loss": "0.3282", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { l(depth, \"fetch \"); fetePrint(dep); } }", "n_tokens": 97, "n_pass": [206, 29, 16]}
{"time": "2021-02-19 14:50:40.033404", "score": "0.9031", "loss": "0.3448", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { l(dh, \"fetch \"); fetePrint(dep); } }", "n_tokens": 94, "n_pass": [208, 30, 17]}
{"time": "2021-02-19 14:50:41.373898", "score": "0.9091", "loss": "0.3194", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { l(dh, \"fe \"); fetePrint(dep); } }", "n_tokens": 91, "n_pass": [211, 31, 18]}
{"time": "2021-02-19 14:50:42.696394", "score": "0.9013", "loss": "0.3521", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { l(dh, \"fe \"); fPrint(dep); } }", "n_tokens": 88, "n_pass": [214, 32, 19]}
{"time": "2021-02-19 14:50:45.388681", "score": "0.8903", "loss": "0.4002", "code": "d printSubNodes(t h) { super.printSubNodes(th); if (ll) { l(dh, \"fe \"); fPrint(); } }", "n_tokens": 85, "n_pass": [217, 34, 20]}
{"time": "2021-02-19 14:51:05.568506", "score": "0.8903", "loss": "0.4002", "code": "d printSubNodes(t h){ super.printSubNodes(th); if (ll) { l(dh, \"fe \"); fPrint(); } }", "n_tokens": 84, "n_pass": [338, 42, 21]}
{"time": "2021-02-19 14:51:06.891022", "score": "0.8903", "loss": "0.4002", "code": "d printSubNodes(t h){super.printSubNodes(th); if (ll) { l(dh, \"fe \"); fPrint(); } }", "n_tokens": 83, "n_pass": [339, 43, 22]}
{"time": "2021-02-19 14:51:33.491191", "score": "0.8592", "loss": "0.6733", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \"fe \"); fPrint(); } }", "n_tokens": 81, "n_pass": [360, 63, 23]}
{"time": "2021-02-19 14:51:34.916220", "score": "0.9154", "loss": "0.341", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \" \"); fPrint(); } }", "n_tokens": 79, "n_pass": [371, 64, 24]}
{"time": "2021-02-19 14:51:36.241135", "score": "0.9116", "loss": "0.3644", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \" \");Print(); } }", "n_tokens": 77, "n_pass": [374, 65, 25]}
{"time": "2021-02-19 14:52:13.439690", "score": "0.8393", "loss": "0.7277", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \" \");Prin(); } }", "n_tokens": 76, "n_pass": [470, 86, 26]}
{"time": "2021-02-19 14:52:14.762952", "score": "0.8393", "loss": "0.7277", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \" \");Prin();} }", "n_tokens": 75, "n_pass": [473, 87, 27]}
{"time": "2021-02-19 14:52:16.111419", "score": "0.8393", "loss": "0.7277", "code": "d printSubNodes(t h){super.printSubNodes(); if (ll) { l(dh, \" \");Prin();}}", "n_tokens": 74, "n_pass": [475, 88, 28]}
{"time": "2021-02-19 14:52:48.182310", "score": "0.8393", "loss": "0.7277", "code": "d printSubNodes(t h){super.printSubNodes();if (ll) { l(dh, \" \");Prin();}}", "n_tokens": 73, "n_pass": [520, 108, 29]}
{"time": "2021-02-19 14:52:49.541655", "score": "0.8393", "loss": "0.7277", "code": "d printSubNodes(t h){super.printSubNodes();if(ll) { l(dh, \" \");Prin();}}", "n_tokens": 72, "n_pass": [523, 109, 30]}
{"time": "2021-02-19 14:52:50.886161", "score": "0.8342", "loss": "0.734", "code": "d printSubNodes(t h){super.printSubNodes();if(l) { l(dh, \" \");Prin();}}", "n_tokens": 71, "n_pass": [525, 110, 31]}
{"time": "2021-02-19 14:52:52.208661", "score": "0.8342", "loss": "0.734", "code": "d printSubNodes(t h){super.printSubNodes();if(l){ l(dh, \" \");Prin();}}", "n_tokens": 70, "n_pass": [528, 111, 32]}
{"time": "2021-02-19 14:52:53.535955", "score": "0.8342", "loss": "0.734", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh, \" \");Prin();}}", "n_tokens": 69, "n_pass": [530, 112, 33]}
{"time": "2021-02-19 14:52:57.502667", "score": "0.8342", "loss": "0.734", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh,\" \");Prin();}}", "n_tokens": 68, "n_pass": [536, 115, 34]}
{"time": "2021-02-19 14:52:58.847585", "score": "0.8316", "loss": "0.7448", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh,\"\");Prin();}}", "n_tokens": 67, "n_pass": [538, 116, 35]}
{"time": "2021-02-19 14:53:00.189753", "score": "0.8236", "loss": "0.8091", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh,\"\");rin();}}", "n_tokens": 66, "n_pass": [542, 117, 36]}
{"time": "2021-02-19 14:53:01.516647", "score": "0.9021", "loss": "0.3989", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh,\"\");in();}}", "n_tokens": 65, "n_pass": [543, 118, 37]}
{"time": "2021-02-19 14:53:04.152654", "score": "0.8526", "loss": "0.6216", "code": "d printSubNodes(t h){super.printSubNodes();if(l){l(dh,\"\");i();}}", "n_tokens": 64, "n_pass": [545, 120, 38]}
{"time": "2021-02-19 14:53:11.009188", "score": "0.5582", "loss": "2.2632", "code": "d printSubNodes(t h){uper.printSubNodes();if(l){l(dh,\"\");i();}}", "n_tokens": 63, "n_pass": [572, 121, 39]}
{"time": "2021-02-19 14:53:12.355002", "score": "0.617", "loss": "2.0113", "code": "d printSubNodes(t h){per.printSubNodes();if(l){l(dh,\"\");i();}}", "n_tokens": 62, "n_pass": [573, 122, 40]}
{"time": "2021-02-19 14:53:14.990909", "score": "0.5868", "loss": "2.1568", "code": "d printSubNodes(t h){pr.printSubNodes();if(l){l(dh,\"\");i();}}", "n_tokens": 61, "n_pass": [575, 124, 41]}
{"time": "2021-02-19 14:53:16.315203", "score": "0.6331", "loss": "1.8863", "code": "d printSubNodes(t h){p.printSubNodes();if(l){l(dh,\"\");i();}}", "n_tokens": 60, "n_pass": [576, 125, 42]}
{"time": "2021-02-19 14:53:37.589297", "score": "0.6123", "loss": "2.0356", "code": "d printSubNodes(t h){p.printSubNodes();if(l){l(d,\"\");i();}}", "n_tokens": 59, "n_pass": [603, 141, 43]}

Minimal simplified code:
d printSubNodes(t h){p.printSubNodes();if(l){l(d,"");i();}}

