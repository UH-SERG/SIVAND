
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/ql/analytic/AnalyticRecordSource_hasNext.java
method_name = hasNext
method_body = @Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }
predict, score, loss = hasNext, 0.7887904644012451, 0.6899753212928772

Trace of simplified code(s):
{"time": "2021-02-20 02:32:12.534013", "score": "0.8097", "loss": "0.5993", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 213, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 02:32:14.654293", "score": "0.8021", "loss": "0.6326", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { func(i).prepareFor(record); } return true; } return false; }", "n_tokens": 199, "n_pass": [55, 2, 2]}
{"time": "2021-02-20 02:32:17.716887", "score": "0.8232", "loss": "0.5017", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 192, "n_pass": [101, 4, 3]}
{"time": "2021-02-20 02:32:21.702200", "score": "0.8436", "loss": "0.4703", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 186, "n_pass": [109, 7, 4]}
{"time": "2021-02-20 02:32:27.892832", "score": "0.8543", "loss": "0.4297", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 180, "n_pass": [118, 11, 5]}
{"time": "2021-02-20 02:32:29.221703", "score": "0.8883", "loss": "0.4076", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (int i = 0, n = functions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 173, "n_pass": [120, 12, 6]}
{"time": "2021-02-20 02:32:30.620829", "score": "0.8402", "loss": "0.5436", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (in, n = functions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 166, "n_pass": [123, 13, 7]}
{"time": "2021-02-20 02:32:31.964657", "score": "0.8184", "loss": "0.7239", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (inunctions.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 159, "n_pass": [124, 14, 8]}
{"time": "2021-02-20 02:32:33.292126", "score": "0.8143", "loss": "0.7988", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { funcpareFor(record); } return true; } return false; }", "n_tokens": 152, "n_pass": [125, 15, 9]}
{"time": "2021-02-20 02:32:34.660989", "score": "0.7391", "loss": "1.1555", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); } return true; } return false; }", "n_tokens": 145, "n_pass": [130, 16, 10]}
{"time": "2021-02-20 02:32:36.000951", "score": "0.7038", "loss": "1.4694", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); } reue; } return false; }", "n_tokens": 138, "n_pass": [133, 17, 11]}
{"time": "2021-02-20 02:32:43.394846", "score": "0.7237", "loss": "1.3325", "code": "@Overrblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); }e; } return false; }", "n_tokens": 134, "n_pass": [197, 22, 12]}
{"time": "2021-02-20 02:32:47.405702", "score": "0.7237", "loss": "1.3325", "code": "@Ovblic boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); }e; } return false; }", "n_tokens": 131, "n_pass": [204, 25, 13]}
{"time": "2021-02-20 02:32:48.722304", "score": "0.7052", "loss": "1.4236", "code": "@Ovc boolean hasNext() { if (cursor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); }e; } return false; }", "n_tokens": 128, "n_pass": [205, 26, 14]}
{"time": "2021-02-20 02:32:53.950138", "score": "0.65", "loss": "1.9737", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {d.of(cuxt()); for (ins.size(); i < n; i++) { func(record); }e; } return false; }", "n_tokens": 125, "n_pass": [215, 29, 15]}
{"time": "2021-02-20 02:33:05.990304", "score": "0.6268", "loss": "2.3343", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {d.of(cuxt()); for (ins.size(); i ; i++) { func(record); }e; } return false; }", "n_tokens": 122, "n_pass": [232, 38, 16]}
{"time": "2021-02-20 02:33:07.307604", "score": "0.6469", "loss": "2.1998", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {d.of(cuxt()); for (ins.size(); i ; i++) {c(record); }e; } return false; }", "n_tokens": 118, "n_pass": [235, 39, 17]}
{"time": "2021-02-20 02:33:08.648884", "score": "0.6198", "loss": "2.3523", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {d.of(cuxt()); for (ins.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 114, "n_pass": [237, 40, 18]}
{"time": "2021-02-20 02:33:22.884435", "score": "0.6261", "loss": "2.3229", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {d.of(c()); for (ins.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 111, "n_pass": [261, 50, 19]}
{"time": "2021-02-20 02:33:43.238173", "score": "0.6248", "loss": "2.4081", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {of(c()); for (ins.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 109, "n_pass": [365, 63, 20]}
{"time": "2021-02-20 02:33:44.557752", "score": "0.6454", "loss": "2.2167", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c()); for (ins.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 107, "n_pass": [366, 64, 21]}
{"time": "2021-02-20 02:33:45.886125", "score": "0.7049", "loss": "1.5396", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ins.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 105, "n_pass": [368, 65, 22]}
{"time": "2021-02-20 02:33:47.193429", "score": "0.7391", "loss": "1.0795", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (s.size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 103, "n_pass": [373, 66, 23]}
{"time": "2021-02-20 02:33:48.501960", "score": "0.7104", "loss": "1.2228", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (size(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 101, "n_pass": [374, 67, 24]}
{"time": "2021-02-20 02:33:49.821720", "score": "0.7145", "loss": "1.107", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze(); i ; i++) {c(re); }e; } return false; }", "n_tokens": 99, "n_pass": [375, 68, 25]}
{"time": "2021-02-20 02:33:51.135768", "score": "0.7151", "loss": "1.041", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(re); }e; } return false; }", "n_tokens": 97, "n_pass": [377, 69, 26]}
{"time": "2021-02-20 02:33:53.808272", "score": "0.9459", "loss": "0.1306", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); }e; } return false; }", "n_tokens": 95, "n_pass": [385, 71, 27]}
{"time": "2021-02-20 02:33:55.171012", "score": "0.9703", "loss": "0.0718", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } return false; }", "n_tokens": 93, "n_pass": [388, 72, 28]}
{"time": "2021-02-20 02:33:56.482108", "score": "0.7233", "loss": "0.9604", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } returfalse; }", "n_tokens": 91, "n_pass": [393, 73, 29]}
{"time": "2021-02-20 02:33:57.791931", "score": "0.7233", "loss": "0.9604", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } returlse; }", "n_tokens": 89, "n_pass": [394, 74, 30]}
{"time": "2021-02-20 02:33:59.117424", "score": "0.7233", "loss": "0.9604", "code": "@Ovc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 87, "n_pass": [395, 75, 31]}
{"time": "2021-02-20 02:34:00.454312", "score": "0.6952", "loss": "1.1821", "code": "@vc boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 86, "n_pass": [399, 76, 32]}
{"time": "2021-02-20 02:34:01.824683", "score": "0.7944", "loss": "0.6404", "code": "@c boolean hasNext() { if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 85, "n_pass": [400, 77, 33]}
{"time": "2021-02-20 02:34:15.737461", "score": "0.7944", "loss": "0.6404", "code": "@c boolean hasNext(){ if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 84, "n_pass": [420, 85, 34]}
{"time": "2021-02-20 02:34:17.043325", "score": "0.7944", "loss": "0.6404", "code": "@c boolean hasNext(){if (cor.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 83, "n_pass": [422, 86, 35]}
{"time": "2021-02-20 02:34:18.363446", "score": "0.811", "loss": "0.5661", "code": "@c boolean hasNext(){if (r.hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 81, "n_pass": [425, 87, 36]}
{"time": "2021-02-20 02:34:19.666068", "score": "0.7737", "loss": "0.7247", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (ze; i ; i++) {c(); } } reture; }", "n_tokens": 79, "n_pass": [426, 88, 37]}
{"time": "2021-02-20 02:34:24.920794", "score": "0.6879", "loss": "1.2313", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (; i ; i++) {c(); } } reture; }", "n_tokens": 77, "n_pass": [438, 92, 38]}
{"time": "2021-02-20 02:34:26.204652", "score": "0.7298", "loss": "0.9471", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (; ; i++) {c(); } } reture; }", "n_tokens": 75, "n_pass": [440, 93, 39]}
{"time": "2021-02-20 02:34:27.512488", "score": "0.7298", "loss": "0.9471", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (; ; i++) {c(); } }eture; }", "n_tokens": 73, "n_pass": [449, 94, 40]}
{"time": "2021-02-20 02:34:30.154157", "score": "0.7862", "loss": "0.6878", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (; ; i++) {c(); } }ete; }", "n_tokens": 71, "n_pass": [451, 96, 41]}
{"time": "2021-02-20 02:34:55.257734", "score": "0.7862", "loss": "0.6878", "code": "@c boolean hasNext(){if (hasNext()) {(c); for (; ; i++) {c(); } }ete;}", "n_tokens": 70, "n_pass": [550, 109, 42]}
{"time": "2021-02-20 02:35:09.252193", "score": "0.7862", "loss": "0.6878", "code": "@c boolean hasNext(){if(hasNext()) {(c); for (; ; i++) {c(); } }ete;}", "n_tokens": 69, "n_pass": [574, 117, 43]}
{"time": "2021-02-20 02:35:18.416517", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()) {(c); for (; ; i++) {c(); } }ete;}", "n_tokens": 68, "n_pass": [582, 124, 44]}
{"time": "2021-02-20 02:35:19.728386", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c); for (; ; i++) {c(); } }ete;}", "n_tokens": 67, "n_pass": [586, 125, 45]}
{"time": "2021-02-20 02:35:21.036833", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for (; ; i++) {c(); } }ete;}", "n_tokens": 66, "n_pass": [592, 126, 46]}
{"time": "2021-02-20 02:35:22.405384", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(; ; i++) {c(); } }ete;}", "n_tokens": 65, "n_pass": [596, 127, 47]}
{"time": "2021-02-20 02:35:23.727932", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;; i++) {c(); } }ete;}", "n_tokens": 64, "n_pass": [599, 128, 48]}
{"time": "2021-02-20 02:35:25.021366", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;;i++) {c(); } }ete;}", "n_tokens": 63, "n_pass": [601, 129, 49]}
{"time": "2021-02-20 02:35:26.342815", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;;i++){c(); } }ete;}", "n_tokens": 62, "n_pass": [606, 130, 50]}
{"time": "2021-02-20 02:35:27.639673", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;;i++){c();} }ete;}", "n_tokens": 61, "n_pass": [612, 131, 51]}
{"time": "2021-02-20 02:35:28.963579", "score": "0.3901", "loss": "3.745", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;;i++){c();}}ete;}", "n_tokens": 60, "n_pass": [614, 132, 52]}
{"time": "2021-02-20 02:35:31.597729", "score": "0.6099", "loss": "2.1161", "code": "@c boolean hasNext(){if(hasNex()){(c);for(;;i++){c();}}ee;}", "n_tokens": 59, "n_pass": [617, 134, 53]}

Minimal simplified code:
@c boolean hasNext(){if(hasNex()){(c);for(;;i++){c();}}ee;}

