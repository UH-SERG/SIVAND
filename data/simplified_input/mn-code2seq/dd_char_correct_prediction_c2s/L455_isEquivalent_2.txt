
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CastNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }
predict, score, loss = isEquivalent, 0.8389749526977539, 0.4130268096923828

Trace of simplified code(s):
{"time": "2021-02-20 15:01:51.151266", "score": "0.839", "loss": "0.413", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 233, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 15:01:52.871636", "score": "0.8919", "loss": "0.2604", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().etOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 204, "n_pass": [25, 2, 2]}
{"time": "2021-02-20 15:01:55.904103", "score": "0.844", "loss": "0.4211", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().etOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 190, "n_pass": [50, 4, 3]}
{"time": "2021-02-20 15:01:57.587493", "score": "0.6262", "loss": "1.6722", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; reetOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 175, "n_pass": [59, 5, 4]}
{"time": "2021-02-20 15:02:04.570398", "score": "0.6846", "loss": "1.3674", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; reetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 167, "n_pass": [100, 10, 5]}
{"time": "2021-02-20 15:02:09.256026", "score": "0.6311", "loss": "1.8333", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (iseType(o)) { CastNode other = (CastNode) o; reetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 160, "n_pass": [113, 13, 6]}
{"time": "2021-02-20 15:02:19.295178", "score": "0.6114", "loss": "1.8744", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNode other = (CastNode) o; reetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 156, "n_pass": [182, 20, 7]}
{"time": "2021-02-20 15:02:22.020357", "score": "0.6718", "loss": "1.6408", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNother = (CastNode) o; reetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 152, "n_pass": [186, 22, 8]}
{"time": "2021-02-20 15:02:23.324579", "score": "0.599", "loss": "2.2279", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) o; reetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 148, "n_pass": [187, 23, 9]}
{"time": "2021-02-20 15:02:25.945109", "score": "0.6961", "loss": "1.4102", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) oetOperand.isEquivalent(otherrand); } return false; }", "n_tokens": 144, "n_pass": [192, 25, 10]}
{"time": "2021-02-20 15:02:27.282135", "score": "0.6166", "loss": "2.0456", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) oerand.isEquivalent(otherrand); } return false; }", "n_tokens": 140, "n_pass": [193, 26, 11]}
{"time": "2021-02-20 15:02:28.592594", "score": "0.6506", "loss": "1.7939", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(otherrand); } return false; }", "n_tokens": 136, "n_pass": [194, 27, 12]}
{"time": "2021-02-20 15:02:33.894109", "score": "0.716", "loss": "1.2912", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(orand); } return false; }", "n_tokens": 132, "n_pass": [199, 31, 13]}
{"time": "2021-02-20 15:02:35.203679", "score": "0.6999", "loss": "1.3449", "code": "ean isEquivalent(ValueNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 128, "n_pass": [200, 32, 14]}
{"time": "2021-02-20 15:02:40.924497", "score": "0.653", "loss": "1.6613", "code": "ean isEquivalent(VeNode o) throws StandardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 125, "n_pass": [212, 35, 15]}
{"time": "2021-02-20 15:02:42.298416", "score": "0.7001", "loss": "1.3923", "code": "ean isEquivalent(Vde o) throws StandardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 122, "n_pass": [213, 36, 16]}
{"time": "2021-02-20 15:02:43.611964", "score": "0.6826", "loss": "1.5617", "code": "ean isEquivalent(Vde o) throws StardException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 119, "n_pass": [219, 37, 17]}
{"time": "2021-02-20 15:02:44.925424", "score": "0.7532", "loss": "1.1278", "code": "ean isEquivalent(Vde o) throws StException { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 116, "n_pass": [220, 38, 18]}
{"time": "2021-02-20 15:02:46.233959", "score": "0.6433", "loss": "1.8024", "code": "ean isEquivalent(Vde o) throws Steption { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 113, "n_pass": [221, 39, 19]}
{"time": "2021-02-20 15:02:47.537306", "score": "0.6433", "loss": "1.8024", "code": "ean isEquivalent(Vde o) throws Ston { if (ise(o)) { CastNr = (CastNode) od.isEquivalent(o); } return false; }", "n_tokens": 109, "n_pass": [222, 40, 20]}
{"time": "2021-02-20 15:02:50.162209", "score": "0.6008", "loss": "2.2104", "code": "ean isEquivalent(Vde o) throws Ston { if (ise(o)) { CastNr = (Case) od.isEquivalent(o); } return false; }", "n_tokens": 105, "n_pass": [231, 42, 21]}
{"time": "2021-02-20 15:03:01.520239", "score": "0.6288", "loss": "1.9012", "code": "ean isEquivalent(Vde o) throws Ston { if (ise(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 103, "n_pass": [320, 49, 22]}
{"time": "2021-02-20 15:03:16.164045", "score": "0.6673", "loss": "1.5727", "code": "an isEquivalent(Vde o) throws Ston { if (ise(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 102, "n_pass": [339, 60, 23]}
{"time": "2021-02-20 15:03:17.476439", "score": "0.728", "loss": "1.233", "code": "n isEquivalent(Vde o) throws Ston { if (ise(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 101, "n_pass": [340, 61, 24]}
{"time": "2021-02-20 15:03:22.780470", "score": "0.7401", "loss": "1.1177", "code": "n isEquivalent(e o) throws Ston { if (ise(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 99, "n_pass": [353, 62, 25]}
{"time": "2021-02-20 15:03:24.094756", "score": "0.7477", "loss": "1.0101", "code": "n isEquivalent(e o) throws on { if (ise(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 97, "n_pass": [360, 63, 26]}
{"time": "2021-02-20 15:03:25.409923", "score": "0.8211", "loss": "0.5686", "code": "n isEquivalent(e o) throws on { if (i(o)) { CastNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 95, "n_pass": [366, 64, 27]}
{"time": "2021-02-20 15:03:26.722016", "score": "0.8073", "loss": "0.6459", "code": "n isEquivalent(e o) throws on { if (i(o)) {astNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 93, "n_pass": [370, 65, 28]}
{"time": "2021-02-20 15:03:28.063065", "score": "0.7834", "loss": "0.7245", "code": "n isEquivalent(e o) throws on { if (i(o)) {tNr = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 91, "n_pass": [371, 66, 29]}
{"time": "2021-02-20 15:03:29.403507", "score": "0.7509", "loss": "0.8071", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Case)d.isEquivalent(o); } return false; }", "n_tokens": 89, "n_pass": [372, 67, 30]}
{"time": "2021-02-20 15:03:30.733550", "score": "0.7406", "loss": "0.8324", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Ce)d.isEquivalent(o); } return false; }", "n_tokens": 87, "n_pass": [376, 68, 31]}
{"time": "2021-02-20 15:03:32.044288", "score": "0.6417", "loss": "1.5138", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Ce)isEquivalent(o); } return false; }", "n_tokens": 85, "n_pass": [378, 69, 32]}
{"time": "2021-02-20 15:03:42.520052", "score": "0.6221", "loss": "1.8728", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Ce)isEquivalent(o); } return lse; }", "n_tokens": 83, "n_pass": [392, 77, 33]}
{"time": "2021-02-20 15:03:43.819494", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Ce)isEquivalent(o); } return e; }", "n_tokens": 81, "n_pass": [393, 78, 34]}
{"time": "2021-02-20 15:04:08.591667", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o) throws on { if (i(o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 80, "n_pass": [513, 90, 35]}
{"time": "2021-02-20 15:04:14.991036", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o)throws on { if (i(o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 79, "n_pass": [533, 91, 36]}
{"time": "2021-02-20 15:04:18.940236", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o)throws on{ if (i(o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 78, "n_pass": [543, 94, 37]}
{"time": "2021-02-20 15:04:20.239629", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o)throws on{if (i(o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 77, "n_pass": [545, 95, 38]}
{"time": "2021-02-20 15:04:21.562107", "score": "0.6488", "loss": "1.681", "code": "n isEquivalent(e o)throws on{if(i(o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 76, "n_pass": [548, 96, 39]}
{"time": "2021-02-20 15:04:22.869499", "score": "0.6679", "loss": "1.696", "code": "n isEquivalent(e o)throws on{if((o)) {r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 75, "n_pass": [550, 97, 40]}
{"time": "2021-02-20 15:04:24.195619", "score": "0.6679", "loss": "1.696", "code": "n isEquivalent(e o)throws on{if((o)){r = (Ce)isEquivalent(o); } return e;}", "n_tokens": 74, "n_pass": [555, 98, 41]}
{"time": "2021-02-20 15:04:25.522009", "score": "0.6679", "loss": "1.696", "code": "n isEquivalent(e o)throws on{if((o)){r= (Ce)isEquivalent(o); } return e;}", "n_tokens": 73, "n_pass": [558, 99, 42]}
{"time": "2021-02-20 15:04:26.830695", "score": "0.6679", "loss": "1.696", "code": "n isEquivalent(e o)throws on{if((o)){r=(Ce)isEquivalent(o); } return e;}", "n_tokens": 72, "n_pass": [560, 100, 43]}
{"time": "2021-02-20 15:04:28.162783", "score": "0.6914", "loss": "1.664", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o); } return e;}", "n_tokens": 71, "n_pass": [562, 101, 44]}
{"time": "2021-02-20 15:04:46.440115", "score": "0.6914", "loss": "1.664", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);} return e;}", "n_tokens": 70, "n_pass": [581, 115, 45]}
{"time": "2021-02-20 15:04:47.737043", "score": "0.6914", "loss": "1.664", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);}return e;}", "n_tokens": 69, "n_pass": [583, 116, 46]}
{"time": "2021-02-20 15:04:49.059060", "score": "0.6184", "loss": "2.039", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);}eturn e;}", "n_tokens": 68, "n_pass": [584, 117, 47]}
{"time": "2021-02-20 15:04:51.690839", "score": "0.6184", "loss": "2.039", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);}eurn e;}", "n_tokens": 67, "n_pass": [586, 119, 48]}
{"time": "2021-02-20 15:04:53.059530", "score": "0.6056", "loss": "2.179", "code": "n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);}ern e;}", "n_tokens": 66, "n_pass": [587, 120, 49]}

Minimal simplified code:
n isEquivalent(e o)throws on{if((o)){r=(e)isEquivalent(o);}ern e;}

