
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rakam-io__rakam/rakam-parser/src/main/java/com/facebook/presto/sql/RakamSqlFormatter_visitSingleColumn.java
method_name = visitSingleColumn
method_body = @Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }
predict, score, loss = visitSingleColumn, 0.9109412431716919, 0.3352660536766052

Trace of simplified code(s):
{"time": "2021-02-20 11:10:05.549634", "score": "0.9182", "loss": "0.3861", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 396, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 11:10:06.992649", "score": "0.9835", "loss": "0.0682", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapptifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 347, "n_pass": [23, 2, 2]}
{"time": "2021-02-20 11:10:08.325909", "score": "0.9889", "loss": "0.0517", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapptifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAliryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 297, "n_pass": [26, 3, 3]}
{"time": "2021-02-20 11:10:09.666414", "score": "0.9896", "loss": "0.0487", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapptifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAliifier)); } return null; }", "n_tokens": 272, "n_pass": [45, 4, 4]}
{"time": "2021-02-20 11:10:11.390271", "score": "0.9871", "loss": "0.058", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExtifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAliifier)); } return null; }", "n_tokens": 247, "n_pass": [51, 5, 5]}
{"time": "2021-02-20 11:10:13.090663", "score": "0.9858", "loss": "0.0642", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExtifier)); if (node.getesent()) { builder.append(' ').append(formatExpression(node.getAliifier)); } return null; }", "n_tokens": 235, "n_pass": [84, 6, 6]}
{"time": "2021-02-20 11:10:14.439855", "score": "0.9807", "loss": "0.0852", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExtifier)); if (node.getesent()) { builder.append(ormatExpression(node.getAliifier)); } return null; }", "n_tokens": 222, "n_pass": [87, 7, 7]}
{"time": "2021-02-20 11:10:15.764179", "score": "0.9827", "loss": "0.0721", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExtifier)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 209, "n_pass": [88, 8, 8]}
{"time": "2021-02-20 11:10:17.113802", "score": "0.9689", "loss": "0.145", "code": "@Override pr visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExtifier)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 197, "n_pass": [93, 9, 9]}
{"time": "2021-02-20 11:10:18.790767", "score": "0.9316", "loss": "0.3151", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(formatExpression(node.getExtifier)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 185, "n_pass": [97, 10, 10]}
{"time": "2021-02-20 11:10:20.110650", "score": "0.8681", "loss": "0.6068", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(node.getExtifier)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 173, "n_pass": [100, 11, 11]}
{"time": "2021-02-20 11:10:22.146351", "score": "0.8456", "loss": "0.7698", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noExtifier)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 167, "n_pass": [144, 12, 12]}
{"time": "2021-02-20 11:10:23.489543", "score": "0.8494", "loss": "0.728", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (node.getesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 161, "n_pass": [145, 13, 13]}
{"time": "2021-02-20 11:10:24.828610", "score": "0.7746", "loss": "1.1537", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { builder.append(on(node.getAliifier)); } return null; }", "n_tokens": 155, "n_pass": [148, 14, 14]}
{"time": "2021-02-20 11:10:26.146958", "score": "0.7362", "loss": "1.3272", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { b.append(on(node.getAliifier)); } return null; }", "n_tokens": 149, "n_pass": [151, 15, 15]}
{"time": "2021-02-20 11:10:27.460509", "score": "0.7159", "loss": "1.5782", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { bd(on(node.getAliifier)); } return null; }", "n_tokens": 143, "n_pass": [152, 16, 16]}
{"time": "2021-02-20 11:10:30.111607", "score": "0.7431", "loss": "1.5213", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { bd(on(node.getr)); } return null; }", "n_tokens": 136, "n_pass": [155, 18, 17]}
{"time": "2021-02-20 11:10:36.825259", "score": "0.6772", "loss": "2.2371", "code": "@Override pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 129, "n_pass": [177, 22, 18]}
{"time": "2021-02-20 11:10:46.171925", "score": "0.6694", "loss": "2.4705", "code": "@Overr pr visitSingleColumn(SingleColumn nodedent) { builder.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 126, "n_pass": [249, 28, 19]}
{"time": "2021-02-20 11:10:53.689676", "score": "0.6694", "loss": "2.4705", "code": "@Overr pr visitSingleColumn(SingleColumn ndent) { builder.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 123, "n_pass": [261, 32, 20]}
{"time": "2021-02-20 11:10:54.999063", "score": "0.8368", "loss": "0.8549", "code": "@Overr pr visitSingleColumn(SingleColumn nt) { builder.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 120, "n_pass": [262, 33, 21]}
{"time": "2021-02-20 11:10:56.312718", "score": "0.7307", "loss": "1.4681", "code": "@Overr pr visitSingleColumn(SingleColumn nt) { bder.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 117, "n_pass": [265, 34, 22]}
{"time": "2021-02-20 11:10:57.622998", "score": "0.7643", "loss": "1.2345", "code": "@Overr pr visitSingleColumn(SingleColumn nt) { b.append(fion(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 114, "n_pass": [266, 35, 23]}
{"time": "2021-02-20 11:11:01.577466", "score": "0.8739", "loss": "0.6673", "code": "@Overr pr visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (noesent()) { bd(on(nr)); } return null; }", "n_tokens": 111, "n_pass": [270, 38, 24]}
{"time": "2021-02-20 11:11:02.909639", "score": "0.8739", "loss": "0.6673", "code": "@Overr pr visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 108, "n_pass": [276, 39, 25]}
{"time": "2021-02-20 11:11:05.533392", "score": "0.7642", "loss": "1.3671", "code": "@Ov pr visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 105, "n_pass": [289, 41, 26]}
{"time": "2021-02-20 11:11:17.290126", "score": "0.6895", "loss": "2.1353", "code": " pr visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 102, "n_pass": [323, 48, 27]}
{"time": "2021-02-20 11:11:30.310428", "score": "0.6895", "loss": "2.1353", "code": "pr visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 101, "n_pass": [423, 55, 28]}
{"time": "2021-02-20 11:11:31.660891", "score": "0.6762", "loss": "2.0107", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f(noer)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 100, "n_pass": [424, 56, 29]}
{"time": "2021-02-20 11:11:56.878583", "score": "0.7165", "loss": "1.8304", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f(er)); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 98, "n_pass": [463, 70, 30]}
{"time": "2021-02-20 11:11:58.185807", "score": "0.7349", "loss": "1.7637", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nont()) { bd(on(nr)); } return null; }", "n_tokens": 96, "n_pass": [464, 71, 31]}
{"time": "2021-02-20 11:11:59.494539", "score": "0.7087", "loss": "1.567", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nt()) { bd(on(nr)); } return null; }", "n_tokens": 94, "n_pass": [469, 72, 32]}
{"time": "2021-02-20 11:12:00.802269", "score": "0.6716", "loss": "1.8265", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nt) { bd(on(nr)); } return null; }", "n_tokens": 92, "n_pass": [471, 73, 33]}
{"time": "2021-02-20 11:12:41.104811", "score": "0.6716", "loss": "1.8265", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nt) { bd(on(nr));} return null; }", "n_tokens": 91, "n_pass": [604, 95, 34]}
{"time": "2021-02-20 11:12:42.421696", "score": "0.6716", "loss": "1.8265", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nt) { bd(on(nr));}return null; }", "n_tokens": 90, "n_pass": [606, 96, 35]}
{"time": "2021-02-20 11:12:50.302450", "score": "0.6716", "loss": "1.8265", "code": "r visitSingleColumn(SingleColumn nt) { b.append(f()); if (nt) { bd(on(nr));}return null;}", "n_tokens": 89, "n_pass": [619, 102, 36]}
{"time": "2021-02-20 11:13:14.238012", "score": "0.7745", "loss": "1.5619", "code": "r visitSingleColumn(SingleColumn t) { b.append(f()); if (nt) { bd(on(nr));}return null;}", "n_tokens": 88, "n_pass": [654, 115, 37]}
{"time": "2021-02-20 11:13:15.568557", "score": "0.7745", "loss": "1.5619", "code": "r visitSingleColumn(SingleColumn t){ b.append(f()); if (nt) { bd(on(nr));}return null;}", "n_tokens": 87, "n_pass": [657, 116, 38]}
{"time": "2021-02-20 11:13:16.877136", "score": "0.7745", "loss": "1.5619", "code": "r visitSingleColumn(SingleColumn t){b.append(f()); if (nt) { bd(on(nr));}return null;}", "n_tokens": 86, "n_pass": [659, 117, 39]}
{"time": "2021-02-20 11:13:27.421972", "score": "0.7745", "loss": "1.5619", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if (nt) { bd(on(nr));}return null;}", "n_tokens": 85, "n_pass": [674, 125, 40]}
{"time": "2021-02-20 11:13:28.733821", "score": "0.7745", "loss": "1.5619", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(nt) { bd(on(nr));}return null;}", "n_tokens": 84, "n_pass": [677, 126, 41]}
{"time": "2021-02-20 11:13:30.047028", "score": "0.6816", "loss": "2.5342", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(t) { bd(on(nr));}return null;}", "n_tokens": 83, "n_pass": [679, 127, 42]}
{"time": "2021-02-20 11:13:31.357087", "score": "0.6816", "loss": "2.5342", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(t){ bd(on(nr));}return null;}", "n_tokens": 82, "n_pass": [682, 128, 43]}
{"time": "2021-02-20 11:13:32.666508", "score": "0.6816", "loss": "2.5342", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(t){bd(on(nr));}return null;}", "n_tokens": 81, "n_pass": [684, 129, 44]}
{"time": "2021-02-20 11:13:33.974312", "score": "0.5433", "loss": "3.2778", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(t){d(on(nr));}return null;}", "n_tokens": 80, "n_pass": [685, 130, 45]}
{"time": "2021-02-20 11:13:35.279947", "score": "0.6346", "loss": "2.7754", "code": "r visitSingleColumn(SingleColumn t){b.append(f());if(t){(on(nr));}return null;}", "n_tokens": 79, "n_pass": [686, 131, 46]}

Minimal simplified code:
r visitSingleColumn(SingleColumn t){b.append(f());if(t){(on(nr));}return null;}

