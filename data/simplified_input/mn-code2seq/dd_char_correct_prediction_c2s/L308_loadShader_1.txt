
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/gplibs__android-magic-surface-view/src/main/java/com/gplibs/magicsurfaceview/GLUtil_loadShader.java
method_name = loadShader
method_body = static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException("Could not compile shader " + shaderType + ":" + info); } } return shader; }
predict, score, loss = loadShader, 0.8592766523361206, 0.46240681409835815

Trace of simplified code(s):
{"time": "2021-02-20 04:12:33.500551", "score": "0.933", "loss": "0.2282", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 498, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 04:12:34.928512", "score": "0.8702", "loss": "0.4126", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shr, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 436, "n_pass": [23, 2, 2]}
{"time": "2021-02-20 04:12:36.348633", "score": "0.8992", "loss": "0.3076", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 405, "n_pass": [44, 3, 3]}
{"time": "2021-02-20 04:12:37.749814", "score": "0.8483", "loss": "0.45", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 374, "n_pass": [46, 4, 4]}
{"time": "2021-02-20 04:12:39.152171", "score": "0.8478", "loss": "0.4813", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shmpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not c:\" + info); } } return shader; }", "n_tokens": 342, "n_pass": [49, 5, 5]}
{"time": "2021-02-20 04:12:40.506434", "score": "0.7259", "loss": "0.9627", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw new RuntimeException(\"Could not c:\" + info); } } return shader; }", "n_tokens": 311, "n_pass": [56, 6, 6]}
{"time": "2021-02-20 04:12:41.894037", "score": "0.7089", "loss": "1.1179", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Could not c:\" + info); } } return shader; }", "n_tokens": 295, "n_pass": [93, 7, 7]}
{"time": "2021-02-20 04:12:45.045520", "score": "0.7493", "loss": "0.8927", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } return shader; }", "n_tokens": 287, "n_pass": [152, 9, 8]}
{"time": "2021-02-20 04:12:46.394703", "score": "0.7508", "loss": "1.1141", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 279, "n_pass": [155, 10, 9]}
{"time": "2021-02-20 04:12:47.741686", "score": "0.734", "loss": "1.1628", "code": "int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 272, "n_pass": [157, 11, 10]}
{"time": "2021-02-20 04:12:49.861583", "score": "0.6786", "loss": "1.3896", "code": "int loadShader(int she, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 265, "n_pass": [161, 12, 11]}
{"time": "2021-02-20 04:12:51.223851", "score": "0.6969", "loss": "1.2318", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 258, "n_pass": [165, 13, 12]}
{"time": "2021-02-20 04:12:58.054967", "score": "0.6378", "loss": "1.6126", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 250, "n_pass": [175, 18, 13]}
{"time": "2021-02-20 04:13:00.803115", "score": "0.6211", "loss": "1.7435", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { String info = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 242, "n_pass": [180, 20, 14]}
{"time": "2021-02-20 04:13:02.212742", "score": "0.6666", "loss": "1.3309", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { nfo = GLES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 234, "n_pass": [182, 21, 15]}
{"time": "2021-02-20 04:13:03.542690", "score": "0.6465", "loss": "1.5303", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { ES20.glGetlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 226, "n_pass": [183, 22, 16]}
{"time": "2021-02-20 04:13:04.873908", "score": "0.6547", "loss": "1.5471", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { etlDeleteShader(shader); throw nion(\"Cou:\" + info); } } hader; }", "n_tokens": 218, "n_pass": [184, 23, 17]}
{"time": "2021-02-20 04:13:07.556435", "score": "0.6478", "loss": "1.6487", "code": "int loadShader(int she, String source) { ier = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { etlDeleteShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 210, "n_pass": [188, 25, 18]}
{"time": "2021-02-20 04:13:11.004512", "score": "0.6152", "loss": "2.1622", "code": "int loadShader(int she, String source) { ier = GLEeateShader(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { etlDeleteShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 202, "n_pass": [200, 27, 19]}
{"time": "2021-02-20 04:13:12.332055", "score": "0.6109", "loss": "2.3879", "code": "int loadShader(int she, String source) { ier = GLEer(shaderType); if (shader != 0) { GLES20.glShad(shader, soumpiled, 0); if (comp== 0) { etlDeleteShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 194, "n_pass": [201, 28, 20]}
{"time": "2021-02-20 04:13:13.651997", "score": "0.6273", "loss": "2.1166", "code": "int loadShader(int she, String source) { ier = GLEer(shaderType); if (shader != 0) { GLES2(shader, soumpiled, 0); if (comp== 0) { etlDeleteShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 186, "n_pass": [207, 29, 21]}
{"time": "2021-02-20 04:13:14.981517", "score": "0.5523", "loss": "2.5299", "code": "int loadShader(int she, String source) { ier = GLEer(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { etlDeleteShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 178, "n_pass": [209, 30, 22]}
{"time": "2021-02-20 04:13:16.323470", "score": "0.5287", "loss": "4.4604", "code": "int loadShader(int she, String source) { ier = GLEer(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 170, "n_pass": [213, 31, 23]}
{"time": "2021-02-20 04:13:18.377338", "score": "0.5513", "loss": "4.2818", "code": "int loadShader(int she, String source) { ier(shaderType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 162, "n_pass": [226, 32, 24]}
{"time": "2021-02-20 04:13:20.450200", "score": "0.5861", "loss": "4.7677", "code": "int loadShader(int she, String source) { ier(srType); if (shader != 0) { GLES2(shader,ed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 158, "n_pass": [291, 33, 25]}
{"time": "2021-02-20 04:13:27.090553", "score": "0.507", "loss": "2.624", "code": "int loadShader(int she, String source) { ier(srType); if (shader != 0) { GLES2(shaed, 0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 154, "n_pass": [301, 38, 26]}
{"time": "2021-02-20 04:13:28.411295", "score": "0.4909", "loss": "2.7552", "code": "int loadShader(int she, String source) { ier(srType); if (shader != 0) { GLES2(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" + info); } } hader; }", "n_tokens": 150, "n_pass": [302, 39, 27]}
{"time": "2021-02-20 04:13:33.827520", "score": "0.48", "loss": "2.844", "code": "int loadShader(int she, String source) { ier(srType); if (shader != 0) { GLES2(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } hader; }", "n_tokens": 146, "n_pass": [315, 43, 28]}
{"time": "2021-02-20 04:13:35.167700", "score": "0.5465", "loss": "2.5089", "code": "int loadShader(int she, String source) { ier(srType); if (shader != 0) { GLES2(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 142, "n_pass": [318, 44, 29]}
{"time": "2021-02-20 04:13:39.258270", "score": "0.4671", "loss": "3.8677", "code": "int loadShader(int she, String source) { ier(se); if (shader != 0) { GLES2(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 138, "n_pass": [333, 46, 30]}
{"time": "2021-02-20 04:13:56.796713", "score": "0.4643", "loss": "2.9912", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(sha0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 136, "n_pass": [449, 57, 31]}
{"time": "2021-02-20 04:14:03.424587", "score": "0.4322", "loss": "3.2502", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(s0); if (comp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 134, "n_pass": [457, 62, 32]}
{"time": "2021-02-20 04:14:04.751880", "score": "0.4201", "loss": "3.4993", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);ion(\"Cou:\" +o); } } r; }", "n_tokens": 132, "n_pass": [462, 63, 33]}
{"time": "2021-02-20 04:14:14.090274", "score": "0.4781", "loss": "3.6235", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"Cou:\" +o); } } r; }", "n_tokens": 130, "n_pass": [476, 70, 34]}
{"time": "2021-02-20 04:14:15.413147", "score": "0.3521", "loss": "4.2647", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } } r; }", "n_tokens": 128, "n_pass": [479, 71, 35]}
{"time": "2021-02-20 04:14:16.739948", "score": "0.4041", "loss": "3.9975", "code": "int loadShader(int she, String source) { ier(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 126, "n_pass": [486, 72, 36]}
{"time": "2021-02-20 04:14:33.995397", "score": "0.323", "loss": "4.2919", "code": "int loadShader(int she, String source) {er(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 124, "n_pass": [511, 83, 37]}
{"time": "2021-02-20 04:14:35.320187", "score": "0.3851", "loss": "3.7964", "code": "int loadShader(int she, String source) {(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 122, "n_pass": [512, 84, 38]}
{"time": "2021-02-20 04:15:01.899397", "score": "0.329", "loss": "4.3693", "code": "int loadShader(int s, String source) {(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 120, "n_pass": [567, 102, 39]}
{"time": "2021-02-20 04:15:55.965610", "score": "0.329", "loss": "4.3693", "code": "int loadShader(int s, String source){(se); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 119, "n_pass": [757, 135, 40]}
{"time": "2021-02-20 04:15:58.605185", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s); if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 118, "n_pass": [760, 137, 41]}
{"time": "2021-02-20 04:15:59.925959", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if (shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 117, "n_pass": [763, 138, 42]}
{"time": "2021-02-20 04:16:01.266343", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader= 0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 116, "n_pass": [766, 139, 43]}
{"time": "2021-02-20 04:16:10.750936", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0) { GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 115, "n_pass": [775, 146, 44]}
{"time": "2021-02-20 04:16:12.074454", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){ GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 114, "n_pass": [778, 147, 45]}
{"time": "2021-02-20 04:16:13.394618", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES2(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 113, "n_pass": [780, 148, 46]}
{"time": "2021-02-20 04:16:20.077519", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s0); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 112, "n_pass": [785, 153, 47]}
{"time": "2021-02-20 04:16:22.744858", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s); if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 111, "n_pass": [788, 155, 48]}
{"time": "2021-02-20 04:16:24.067758", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if (mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 110, "n_pass": [791, 156, 49]}
{"time": "2021-02-20 04:16:25.399937", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp== 0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 109, "n_pass": [794, 157, 50]}
{"time": "2021-02-20 04:16:32.013406", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0) { eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 108, "n_pass": [800, 162, 51]}
{"time": "2021-02-20 04:16:33.362877", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){ eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 107, "n_pass": [803, 163, 52]}
{"time": "2021-02-20 04:16:34.684806", "score": "0.4322", "loss": "4.0071", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);n(\"C:\" +o); } }  }", "n_tokens": 106, "n_pass": [805, 164, 53]}
{"time": "2021-02-20 04:16:53.287937", "score": "0.3362", "loss": "4.1529", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"C:\" +o); } }  }", "n_tokens": 105, "n_pass": [822, 178, 54]}
{"time": "2021-02-20 04:16:54.608442", "score": "0.3482", "loss": "4.0138", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\":\" +o); } }  }", "n_tokens": 104, "n_pass": [825, 179, 55]}
{"time": "2021-02-20 04:16:55.967812", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\" +o); } }  }", "n_tokens": 103, "n_pass": [826, 180, 56]}
{"time": "2021-02-20 04:16:57.297336", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o); } }  }", "n_tokens": 102, "n_pass": [828, 181, 57]}
{"time": "2021-02-20 04:16:58.620386", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);} }  }", "n_tokens": 101, "n_pass": [833, 182, 58]}
{"time": "2021-02-20 04:16:59.958388", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}  }", "n_tokens": 100, "n_pass": [835, 183, 59]}
{"time": "2021-02-20 04:17:01.299508", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}} }", "n_tokens": 99, "n_pass": [837, 184, 60]}
{"time": "2021-02-20 04:17:02.620458", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s, String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 98, "n_pass": [838, 185, 61]}
{"time": "2021-02-20 04:17:15.971512", "score": "0.4795", "loss": "3.4178", "code": "int loadShader(int s,String source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 97, "n_pass": [861, 192, 62]}
{"time": "2021-02-20 04:17:19.949404", "score": "0.4442", "loss": "3.4671", "code": "int loadShader(int s,Sting source){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 96, "n_pass": [864, 195, 63]}
{"time": "2021-02-20 04:17:26.626631", "score": "0.4332", "loss": "3.5548", "code": "int loadShader(int s,Sting surce){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 95, "n_pass": [870, 200, 64]}
{"time": "2021-02-20 04:17:29.281875", "score": "0.4332", "loss": "3.5548", "code": "int loadShader(int s,Sting suce){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 94, "n_pass": [872, 202, 65]}
{"time": "2021-02-20 04:17:30.606381", "score": "0.5358", "loss": "2.8556", "code": "int loadShader(int s,Sting sue){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 93, "n_pass": [873, 203, 66]}
{"time": "2021-02-20 04:17:31.933021", "score": "0.4145", "loss": "3.6966", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(mp==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 92, "n_pass": [874, 204, 67]}
{"time": "2021-02-20 04:17:49.207269", "score": "0.4956", "loss": "3.1074", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p==0){eShader(shader);(\"\"+o);}}}", "n_tokens": 91, "n_pass": [905, 217, 68]}
{"time": "2021-02-20 04:17:50.551835", "score": "0.5053", "loss": "3.2216", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p=0){eShader(shader);(\"\"+o);}}}", "n_tokens": 90, "n_pass": [907, 218, 69]}
{"time": "2021-02-20 04:17:51.851745", "score": "0.3939", "loss": "3.6429", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p0){eShader(shader);(\"\"+o);}}}", "n_tokens": 89, "n_pass": [908, 219, 70]}
{"time": "2021-02-20 04:17:53.189774", "score": "0.3939", "loss": "3.6429", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p){eShader(shader);(\"\"+o);}}}", "n_tokens": 88, "n_pass": [909, 220, 71]}
{"time": "2021-02-20 04:17:54.522642", "score": "0.5789", "loss": "2.6643", "code": "int loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p){Shader(shader);(\"\"+o);}}}", "n_tokens": 87, "n_pass": [912, 221, 72]}
{"time": "2021-02-20 04:18:14.211535", "score": "0.4289", "loss": "3.0625", "code": "in loadShader(int s,Sting su){(s);if(shader=0){GLES(s);if(p){Shader(shader);(\"\"+o);}}}", "n_tokens": 86, "n_pass": [940, 236, 73]}
{"time": "2021-02-20 04:18:26.133882", "score": "0.388", "loss": "3.2244", "code": "in loadShader(int s,Stng su){(s);if(shader=0){GLES(s);if(p){Shader(shader);(\"\"+o);}}}", "n_tokens": 85, "n_pass": [961, 242, 74]}

Minimal simplified code:
in loadShader(int s,Stng su){(s);if(shader=0){GLES(s);if(p){Shader(shader);(""+o);}}}

