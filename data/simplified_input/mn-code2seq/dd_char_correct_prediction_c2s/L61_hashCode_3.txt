
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-ldap-utils/src/main/java/org/forgerock/openam/ldap/LDAPURL_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int hash = 7; hash = 19 * hash + (this.host != null ? this.host.hashCode() : 0); hash = 19 * hash + this.port; hash = 19 * hash + (this.isSSL != null ? this.isSSL.hashCode() : 0); return hash; }
predict, score, loss = hashCode, 0.9998399019241333, 0.00044232243089936674

Trace of simplified code(s):
{"time": "2021-02-19 12:09:52.367068", "score": "0.9998", "loss": "0.0004", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (this.host != null ? this.host.hashCode() : 0); hash = 19 * hash + this.port; hash = 19 * hash + (this.isSSL != null ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 228, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 12:09:54.099265", "score": "0.9998", "loss": "0.0006", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (this.host != nul); hash = 19 * hash + this.port; hash = 19 * hash + (this.isSSL != null ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 200, "n_pass": [23, 2, 2]}
{"time": "2021-02-19 12:09:55.856552", "score": "0.9996", "loss": "0.0012", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (this.host != nul); hash = 19 *ort; hash = 19 * hash + (this.isSSL != null ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 186, "n_pass": [46, 3, 3]}
{"time": "2021-02-19 12:09:57.204498", "score": "0.9994", "loss": "0.0017", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (this.host != nul); hash = 19 *ort; hash = 19 * hash + (thi ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 171, "n_pass": [49, 4, 4]}
{"time": "2021-02-19 12:09:58.913719", "score": "0.999", "loss": "0.0026", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hash = 19 *ort; hash = 19 * hash + (thi ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 157, "n_pass": [58, 5, 5]}
{"time": "2021-02-19 12:10:00.640253", "score": "0.9994", "loss": "0.0018", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hashort; hash = 19 * hash + (thi ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 150, "n_pass": [93, 6, 6]}
{"time": "2021-02-19 12:10:02.005651", "score": "0.9994", "loss": "0.0018", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hashsh = 19 * hash + (thi ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 143, "n_pass": [94, 7, 7]}
{"time": "2021-02-19 12:10:03.707839", "score": "0.9989", "loss": "0.003", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hashsh = 19 + (thi ? this.isSSL.hashCode() : 0); return hash; }", "n_tokens": 136, "n_pass": [96, 8, 8]}
{"time": "2021-02-19 12:10:05.034150", "score": "0.9947", "loss": "0.0149", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hashsh = 19 + (thi ? thishashCode() : 0); return hash; }", "n_tokens": 129, "n_pass": [99, 9, 9]}
{"time": "2021-02-19 12:10:06.356390", "score": "0.996", "loss": "0.0111", "code": "@Override public int hashCode() { int hash = 7; hash = 19 * hash + (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 122, "n_pass": [100, 10, 10]}
{"time": "2021-02-19 12:10:07.678649", "score": "0.9926", "loss": "0.023", "code": "@Overriic int hashCode() { int hash = 7; hash = 19 * hash + (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 115, "n_pass": [105, 11, 11]}
{"time": "2021-02-19 12:10:09.404816", "score": "0.9773", "loss": "0.0702", "code": "@Overriic int hashCode() { i = 7; hash = 19 * hash + (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 108, "n_pass": [109, 12, 12]}
{"time": "2021-02-19 12:10:10.729987", "score": "0.9752", "loss": "0.0804", "code": "@Overriic int hashCode() { iash = 19 * hash + (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 101, "n_pass": [110, 13, 13]}
{"time": "2021-02-19 12:10:13.189936", "score": "0.9913", "loss": "0.0298", "code": "@Overriic int hashCode() { h = 19 * hash + (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 98, "n_pass": [154, 14, 14]}
{"time": "2021-02-19 12:10:14.874129", "score": "0.971", "loss": "0.125", "code": "@Overriic int hashCode() { h = 19 * ha (th); hashsh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 94, "n_pass": [158, 15, 15]}
{"time": "2021-02-19 12:10:16.203643", "score": "0.9902", "loss": "0.041", "code": "@Overriic int hashCode() { h = 19 * ha (th); hh = 19 + (thi ? thise() : 0); return hash; }", "n_tokens": 90, "n_pass": [161, 16, 16]}
{"time": "2021-02-19 12:10:17.916605", "score": "0.9859", "loss": "0.0697", "code": "@Overriic int hashCode() { h = 19 * ha (th); hh =  (thi ? thise() : 0); return hash; }", "n_tokens": 86, "n_pass": [163, 17, 17]}
{"time": "2021-02-19 12:10:19.273404", "score": "0.986", "loss": "0.0686", "code": "@Overriic int hashCode() { h = 19 * ha (th); hh =  (thi ? e() : 0); return hash; }", "n_tokens": 82, "n_pass": [166, 18, 18]}
{"time": "2021-02-19 12:10:20.612582", "score": "0.9544", "loss": "0.1828", "code": "@Overriic int hashCode() { h = 19 * ha (th); hh =  (thi ? e() : 0); re hash; }", "n_tokens": 78, "n_pass": [170, 19, 19]}
{"time": "2021-02-19 12:10:21.923749", "score": "0.9158", "loss": "0.5615", "code": "@Overriic int hashCode() { h = 19 * ha (th); hh =  (thi ? e() : 0); reh; }", "n_tokens": 74, "n_pass": [171, 20, 20]}
{"time": "2021-02-19 12:10:23.243326", "score": "0.9158", "loss": "0.5615", "code": "@Oviic int hashCode() { h = 19 * ha (th); hh =  (thi ? e() : 0); reh; }", "n_tokens": 71, "n_pass": [174, 21, 21]}
{"time": "2021-02-19 12:10:24.573549", "score": "0.8927", "loss": "0.6856", "code": "@Ov int hashCode() { h = 19 * ha (th); hh =  (thi ? e() : 0); reh; }", "n_tokens": 68, "n_pass": [175, 22, 22]}
{"time": "2021-02-19 12:10:27.724432", "score": "0.8027", "loss": "0.9086", "code": "@Ov int hashCode() { h = 19 * ha (th); h (thi ? e() : 0); reh; }", "n_tokens": 64, "n_pass": [187, 23, 23]}
{"time": "2021-02-19 12:10:29.052394", "score": "0.6705", "loss": "1.7075", "code": " int hashCode() { h = 19 * ha (th); h (thi ? e() : 0); reh; }", "n_tokens": 61, "n_pass": [194, 24, 24]}
{"time": "2021-02-19 12:10:34.200189", "score": "0.6705", "loss": "1.7075", "code": "int hashCode() { h = 19 * ha (th); h (thi ? e() : 0); reh; }", "n_tokens": 60, "n_pass": [246, 26, 25]}
{"time": "2021-02-19 12:10:41.687379", "score": "0.6705", "loss": "1.7075", "code": "int hashCode() { h =9 * ha (th); h (thi ? e() : 0); reh; }", "n_tokens": 58, "n_pass": [260, 30, 26]}
{"time": "2021-02-19 12:10:43.004720", "score": "0.7404", "loss": "1.3045", "code": "int hashCode() { h =9 *  (th); h (thi ? e() : 0); reh; }", "n_tokens": 56, "n_pass": [263, 31, 27]}
{"time": "2021-02-19 12:10:44.319566", "score": "0.6894", "loss": "1.9287", "code": "int hashCode() { h =9 *  (th); (thi ? e() : 0); reh; }", "n_tokens": 54, "n_pass": [267, 32, 28]}
{"time": "2021-02-19 12:10:45.633374", "score": "0.7502", "loss": "1.5475", "code": "int hashCode() { h =9 *  (th); (i ? e() : 0); reh; }", "n_tokens": 52, "n_pass": [269, 33, 29]}
{"time": "2021-02-19 12:10:46.961200", "score": "0.9133", "loss": "0.5051", "code": "int hashCode() { h =9 *  (th); (i ? e() : 0); h; }", "n_tokens": 50, "n_pass": [277, 34, 30]}
{"time": "2021-02-19 12:10:48.291703", "score": "0.8959", "loss": "0.5768", "code": "int hashCode() { h =9 *  (th); (i ? e() : 0);  }", "n_tokens": 48, "n_pass": [278, 35, 31]}
{"time": "2021-02-19 12:11:01.153106", "score": "0.8959", "loss": "0.5768", "code": "int hashCode() { h =9 *  (th); (i ? e() : 0); }", "n_tokens": 47, "n_pass": [348, 39, 32]}
{"time": "2021-02-19 12:11:09.704885", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){ h =9 *  (th); (i ? e() : 0); }", "n_tokens": 46, "n_pass": [363, 43, 33]}
{"time": "2021-02-19 12:11:11.014705", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){h =9 *  (th); (i ? e() : 0); }", "n_tokens": 45, "n_pass": [365, 44, 34]}
{"time": "2021-02-19 12:11:12.339509", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){h=9 *  (th); (i ? e() : 0); }", "n_tokens": 44, "n_pass": [367, 45, 35]}
{"time": "2021-02-19 12:11:14.002475", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){h=9*  (th); (i ? e() : 0); }", "n_tokens": 43, "n_pass": [370, 46, 36]}
{"time": "2021-02-19 12:11:15.327909", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){h=9* (th); (i ? e() : 0); }", "n_tokens": 42, "n_pass": [372, 47, 37]}
{"time": "2021-02-19 12:11:16.632101", "score": "0.8959", "loss": "0.5768", "code": "int hashCode(){h=9*(th); (i ? e() : 0); }", "n_tokens": 41, "n_pass": [373, 48, 38]}
{"time": "2021-02-19 12:11:17.938231", "score": "0.9456", "loss": "0.2376", "code": "int hashCode(){h=9*(h); (i ? e() : 0); }", "n_tokens": 40, "n_pass": [375, 49, 39]}
{"time": "2021-02-19 12:11:19.270191", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h) (i ? e() : 0); }", "n_tokens": 39, "n_pass": [378, 50, 40]}
{"time": "2021-02-19 12:11:20.576259", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i ? e() : 0); }", "n_tokens": 38, "n_pass": [379, 51, 41]}
{"time": "2021-02-19 12:11:21.887693", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i? e() : 0); }", "n_tokens": 37, "n_pass": [382, 52, 42]}
{"time": "2021-02-19 12:11:23.214307", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i?e() : 0); }", "n_tokens": 36, "n_pass": [384, 53, 43]}
{"time": "2021-02-19 12:11:24.530859", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i?e(): 0); }", "n_tokens": 35, "n_pass": [388, 54, 44]}
{"time": "2021-02-19 12:11:25.841780", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i?e():0); }", "n_tokens": 34, "n_pass": [390, 55, 45]}
{"time": "2021-02-19 12:11:27.150666", "score": "0.9159", "loss": "0.2536", "code": "int hashCode(){h=9*(h)(i?e():0);}", "n_tokens": 33, "n_pass": [394, 56, 46]}

Minimal simplified code:
int hashCode(){h=9*(h)(i?e():0);}

