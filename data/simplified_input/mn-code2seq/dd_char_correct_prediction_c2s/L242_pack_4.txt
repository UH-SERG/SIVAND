
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/dependencyLibs/Mavlink/src/com/MAVLink/common/msg_file_transfer_protocol_pack.java
method_name = pack
method_body = public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }
predict, score, loss = pack, 0.9536025524139404, 0.05331004038453102

Trace of simplified code(s):
{"time": "2021-02-19 23:59:09.844417", "score": "0.9413", "loss": "0.066", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(target_network); packet.payload.putUnsignedByte(target_system); packet.payload.putUnsignedByte(target_component); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 437, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 23:59:11.216645", "score": "0.9598", "loss": "0.0535", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 328, "n_pass": [10, 2, 2]}
{"time": "2021-02-19 23:59:12.581580", "score": "0.9568", "loss": "0.0577", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = n55; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 274, "n_pass": [22, 3, 3]}
{"time": "2021-02-19 23:59:13.921928", "score": "0.8804", "loss": "0.199", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = nFILE_TRANSFER_PROTOCOL; packet.payload.putUnsignedByte(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 219, "n_pass": [23, 4, 4]}
{"time": "2021-02-19 23:59:15.284682", "score": "0.7164", "loss": "0.4766", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = nket.payload.putUnsignedByte(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 192, "n_pass": [36, 5, 5]}
{"time": "2021-02-19 23:59:16.652947", "score": "0.6199", "loss": "1.0352", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = n(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 165, "n_pass": [37, 6, 6]}
{"time": "2021-02-19 23:59:21.361158", "score": "0.7119", "loss": "0.3858", "code": "public MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packet.payload.putUnsignedByte(payload[i]); } return packet; }", "n_tokens": 151, "n_pass": [67, 9, 7]}
{"time": "2021-02-19 23:59:22.735344", "score": "0.3828", "loss": "1.5685", "code": "public MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packetsignedByte(payload[i]); } return packet; }", "n_tokens": 137, "n_pass": [72, 10, 8]}
{"time": "2021-02-19 23:59:25.446151", "score": "0.2512", "loss": "2.3321", "code": "public MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packetyte(payload[i]); } return packet; }", "n_tokens": 130, "n_pass": [103, 12, 9]}
{"time": "2021-02-19 23:59:26.821057", "score": "0.385", "loss": "1.8406", "code": "public MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packetyte(pay); } return packet; }", "n_tokens": 123, "n_pass": [104, 13, 10]}
{"time": "2021-02-19 23:59:28.164421", "score": "0.5613", "loss": "0.9914", "code": "public MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packetyte(pay); } recket; }", "n_tokens": 116, "n_pass": [106, 14, 11]}
{"time": "2021-02-19 23:59:29.501976", "score": "0.5613", "loss": "0.9914", "code": " MAVLinkPacket pack() { MAVLinkPan(nt); for (int i = 0; i < payload.length; i++) { packetyte(pay); } recket; }", "n_tokens": 110, "n_pass": [108, 15, 12]}
{"time": "2021-02-19 23:59:33.922001", "score": "0.4448", "loss": "1.6169", "code": " MAVLinkPacket pack() { MAn(nt); for (int i = 0; i < payload.length; i++) { packetyte(pay); } recket; }", "n_tokens": 103, "n_pass": [113, 18, 13]}
{"time": "2021-02-19 23:59:35.251879", "score": "0.7422", "loss": "0.557", "code": " MAVLinkPacket pack() { MAn(nt); for (in; i < payload.length; i++) { packetyte(pay); } recket; }", "n_tokens": 96, "n_pass": [116, 19, 14]}
{"time": "2021-02-19 23:59:36.596797", "score": "0.5649", "loss": "1.0464", "code": " MAVLinkPacket pack() { MAn(nt); for (in; i < plength; i++) { packetyte(pay); } recket; }", "n_tokens": 89, "n_pass": [118, 20, 15]}
{"time": "2021-02-19 23:59:37.951819", "score": "0.6935", "loss": "0.7612", "code": " MAVLinkPacket pack() { MAn(nt); for (in; i < plength; i++) {yte(pay); } recket; }", "n_tokens": 82, "n_pass": [121, 21, 16]}
{"time": "2021-02-19 23:59:42.352133", "score": "0.427", "loss": "1.4664", "code": " MAVLinkPacket pack() { MAn(nt); for (in; i < plength; i++) {yte(pay); } rt; }", "n_tokens": 78, "n_pass": [162, 24, 17]}
{"time": "2021-02-19 23:59:51.263207", "score": "0.6529", "loss": "0.7972", "code": " MAVLinkPacket pack() { MAn(nt); for (in; plength; i++) {yte(pay); } rt; }", "n_tokens": 74, "n_pass": [178, 30, 18]}
{"time": "2021-02-19 23:59:52.598523", "score": "0.7546", "loss": "0.535", "code": " MAVLinkPacket pack() { MAn(nt); for (in; gth; i++) {yte(pay); } rt; }", "n_tokens": 70, "n_pass": [179, 31, 19]}
{"time": "2021-02-19 23:59:53.950315", "score": "0.6921", "loss": "0.6908", "code": " MAVLinkPacket pack() { MAn(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 66, "n_pass": [181, 32, 20]}
{"time": "2021-02-19 23:59:58.036244", "score": "0.2856", "loss": "2.2551", "code": " MAVLiacket pack() { MAn(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 63, "n_pass": [189, 35, 21]}
{"time": "2021-02-19 23:59:59.377471", "score": "0.2856", "loss": "2.2551", "code": " MAVLiet pack() { MAn(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 60, "n_pass": [190, 36, 22]}
{"time": "2021-02-20 00:00:09.227728", "score": "0.3515", "loss": "2.1244", "code": " MAVLit pack() { MAn(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 59, "n_pass": [247, 42, 23]}
{"time": "2021-02-20 00:00:10.567543", "score": "0.3534", "loss": "1.8504", "code": " MAVLi pack() { MAn(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 58, "n_pass": [248, 43, 24]}
{"time": "2021-02-20 00:00:12.984292", "score": "0.3266", "loss": "2.0479", "code": " MAVLi pack() { n(nt); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 56, "n_pass": [255, 44, 25]}
{"time": "2021-02-20 00:00:14.325621", "score": "0.1985", "loss": "2.5539", "code": " MAVLi pack() { n(); for (in; gth;) {yte(pay); } rt; }", "n_tokens": 54, "n_pass": [257, 45, 26]}
{"time": "2021-02-20 00:00:15.669370", "score": "0.1681", "loss": "2.9409", "code": " MAVLi pack() { n(); for (; gth;) {yte(pay); } rt; }", "n_tokens": 52, "n_pass": [262, 46, 27]}
{"time": "2021-02-20 00:00:16.978468", "score": "0.3599", "loss": "1.8788", "code": " MAVLi pack() { n(); for (; h;) {yte(pay); } rt; }", "n_tokens": 50, "n_pass": [264, 47, 28]}
{"time": "2021-02-20 00:00:18.329154", "score": "0.7988", "loss": "0.7273", "code": " MAVLi pack() { n(); for (; h;) {y(pay); } rt; }", "n_tokens": 48, "n_pass": [268, 48, 29]}
{"time": "2021-02-20 00:00:19.690614", "score": "0.633", "loss": "1.2126", "code": " MAVLi pack() { n(); for (; h;) {y(p); } rt; }", "n_tokens": 46, "n_pass": [270, 49, 30]}
{"time": "2021-02-20 00:00:21.027399", "score": "0.8573", "loss": "0.3776", "code": " MAVLi pack() { n(); for (; h;) {y(p); }t; }", "n_tokens": 44, "n_pass": [273, 50, 31]}
{"time": "2021-02-20 00:00:22.348204", "score": "0.4012", "loss": "1.5896", "code": " MAVLi pack() { n(); for (; h;) {y(p); } }", "n_tokens": 42, "n_pass": [274, 51, 32]}
{"time": "2021-02-20 00:00:23.673860", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack() { n(); for (; h;) {y(p); } }", "n_tokens": 41, "n_pass": [276, 52, 33]}
{"time": "2021-02-20 00:00:37.426220", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack(){ n(); for (; h;) {y(p); } }", "n_tokens": 40, "n_pass": [337, 58, 34]}
{"time": "2021-02-20 00:00:38.746424", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack(){n(); for (; h;) {y(p); } }", "n_tokens": 39, "n_pass": [339, 59, 35]}
{"time": "2021-02-20 00:00:40.059908", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack(){n();for (; h;) {y(p); } }", "n_tokens": 38, "n_pass": [344, 60, 36]}
{"time": "2021-02-20 00:00:41.381499", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack(){n();for(; h;) {y(p); } }", "n_tokens": 37, "n_pass": [348, 61, 37]}
{"time": "2021-02-20 00:00:42.696974", "score": "0.4012", "loss": "1.5896", "code": "MAVLi pack(){n();for(;h;) {y(p); } }", "n_tokens": 36, "n_pass": [351, 62, 38]}
{"time": "2021-02-20 00:00:44.037748", "score": "0.5803", "loss": "1.4014", "code": "MAVLi pack(){n();for(;;) {y(p); } }", "n_tokens": 35, "n_pass": [352, 63, 39]}
{"time": "2021-02-20 00:00:45.399612", "score": "0.5803", "loss": "1.4014", "code": "MAVLi pack(){n();for(;;){y(p); } }", "n_tokens": 34, "n_pass": [355, 64, 40]}
{"time": "2021-02-20 00:00:48.056635", "score": "0.7293", "loss": "2.4064", "code": "MAVLi pack(){n();for(;;){y(); } }", "n_tokens": 33, "n_pass": [359, 66, 41]}
{"time": "2021-02-20 00:00:49.362606", "score": "0.7293", "loss": "2.4064", "code": "MAVLi pack(){n();for(;;){y();} }", "n_tokens": 32, "n_pass": [362, 67, 42]}
{"time": "2021-02-20 00:00:50.696643", "score": "0.7293", "loss": "2.4064", "code": "MAVLi pack(){n();for(;;){y();}}", "n_tokens": 31, "n_pass": [364, 68, 43]}

Minimal simplified code:
MAVLi pack(){n();for(;;){y();}}

