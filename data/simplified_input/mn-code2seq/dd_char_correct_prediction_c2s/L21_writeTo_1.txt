
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/mail/src/main/java/org/bouncycastle/mail/smime/util/FileBackedMimeBodyPart_writeTo.java
method_name = writeTo
method_body = public void writeTo(OutputStream out) throws IOException, MessagingException { if (!_file.exists()) { throw new IOException("file " + _file.getCanonicalPath() + " no longer exists."); } super.writeTo(out); }
predict, score, loss = writeTo, 0.9951878190040588, 0.015646545216441154

Trace of simplified code(s):
{"time": "2021-02-19 02:02:39.819492", "score": "0.9952", "loss": "0.0156", "code": "public void writeTo(OutputStream out) throws IOException, MessagingException { if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPath() + \" no longer exists.\"); } super.writeTo(out); }", "n_tokens": 207, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 02:02:41.150195", "score": "0.9975", "loss": "0.0058", "code": "public void writeTo(OutputStream out) throws IOExce{ if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPath() + \" no longer exists.\"); } super.writeTo(out); }", "n_tokens": 181, "n_pass": [22, 2, 2]}
{"time": "2021-02-19 02:02:42.472800", "score": "0.9972", "loss": "0.0062", "code": "public void writeTo(OutputStream out) throws IOExce{ if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 155, "n_pass": [25, 3, 3]}
{"time": "2021-02-19 02:02:44.188529", "score": "0.9974", "loss": "0.0061", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { throw new IOException(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 142, "n_pass": [49, 4, 4]}
{"time": "2021-02-19 02:02:45.550225", "score": "0.9973", "loss": "0.0062", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.getCanonicalPat); } super.writeTo(out); }", "n_tokens": 129, "n_pass": [52, 5, 5]}
{"time": "2021-02-19 02:02:46.900902", "score": "0.9973", "loss": "0.0064", "code": "public void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 116, "n_pass": [55, 6, 6]}
{"time": "2021-02-19 02:02:49.920189", "score": "0.9973", "loss": "0.0064", "code": " void writeTo(OutputStream out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 110, "n_pass": [87, 8, 7]}
{"time": "2021-02-19 02:02:51.651292", "score": "0.9936", "loss": "0.0159", "code": " void writeTo(Outpam out) { if (!_file.exists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 104, "n_pass": [90, 9, 8]}
{"time": "2021-02-19 02:02:52.985539", "score": "0.9873", "loss": "0.0362", "code": " void writeTo(Outpam out) { if (!_fists()) { tception(\"file \" + _file.ge); } super.writeTo(out); }", "n_tokens": 98, "n_pass": [94, 10, 9]}
{"time": "2021-02-19 02:02:54.327720", "score": "0.9891", "loss": "0.0317", "code": " void writeTo(Outpam out) { if (!_fists()) { tception(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 91, "n_pass": [99, 11, 10]}
{"time": "2021-02-19 02:03:01.681575", "score": "0.9913", "loss": "0.0232", "code": "id writeTo(Outpam out) { if (!_fists()) { tception(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 88, "n_pass": [150, 16, 11]}
{"time": "2021-02-19 02:03:03.757197", "score": "0.9927", "loss": "0.0171", "code": "id writeTo(Oam out) { if (!_fists()) { tception(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 85, "n_pass": [154, 17, 12]}
{"time": "2021-02-19 02:03:05.086872", "score": "0.9935", "loss": "0.015", "code": "id writeTo(Oam out) { if (!sts()) { tception(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 82, "n_pass": [160, 18, 13]}
{"time": "2021-02-19 02:03:06.423809", "score": "0.9918", "loss": "0.0194", "code": "id writeTo(Oam out) { if (!sts()) { ption(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 79, "n_pass": [164, 19, 14]}
{"time": "2021-02-19 02:03:07.734381", "score": "0.9882", "loss": "0.0258", "code": "id writeTo(Oam out) { if (!sts()) { on(\"file \" +ge); } super.writeTo(out); }", "n_tokens": 76, "n_pass": [165, 20, 15]}
{"time": "2021-02-19 02:03:09.043471", "score": "0.9854", "loss": "0.0324", "code": "id writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } super.writeTo(out); }", "n_tokens": 73, "n_pass": [168, 21, 16]}
{"time": "2021-02-19 02:03:10.381005", "score": "0.5144", "loss": "1.9202", "code": "id writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(out); }", "n_tokens": 69, "n_pass": [172, 22, 17]}
{"time": "2021-02-19 02:03:21.437484", "score": "0.536", "loss": "1.8965", "code": "id writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 67, "n_pass": [241, 29, 18]}
{"time": "2021-02-19 02:03:22.767367", "score": "0.4847", "loss": "1.9922", "code": "d writeTo(Oam out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 66, "n_pass": [244, 30, 19]}
{"time": "2021-02-19 02:03:27.475913", "score": "0.4308", "loss": "2.3306", "code": "d writeTo(am out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 65, "n_pass": [255, 31, 20]}
{"time": "2021-02-19 02:03:28.803948", "score": "0.4928", "loss": "1.9276", "code": "d writeTo(m out) { if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 64, "n_pass": [256, 32, 21]}
{"time": "2021-02-19 02:03:46.390338", "score": "0.4928", "loss": "1.9276", "code": "d writeTo(m out){ if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 63, "n_pass": [347, 40, 22]}
{"time": "2021-02-19 02:03:47.725741", "score": "0.4928", "loss": "1.9276", "code": "d writeTo(m out){if (!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 62, "n_pass": [348, 41, 23]}
{"time": "2021-02-19 02:03:49.031511", "score": "0.4928", "loss": "1.9276", "code": "d writeTo(m out){if(!sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 61, "n_pass": [351, 42, 24]}
{"time": "2021-02-19 02:03:50.334762", "score": "0.4948", "loss": "1.8737", "code": "d writeTo(m out){if(sts()) { on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 60, "n_pass": [353, 43, 25]}
{"time": "2021-02-19 02:03:55.597130", "score": "0.4948", "loss": "1.8737", "code": "d writeTo(m out){if(sts()){ on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 59, "n_pass": [360, 47, 26]}
{"time": "2021-02-19 02:03:56.935020", "score": "0.4948", "loss": "1.8737", "code": "d writeTo(m out){if(sts()){on(\"fi\" +ge); } s.writeTo(o); }", "n_tokens": 58, "n_pass": [362, 48, 27]}
{"time": "2021-02-19 02:04:00.981747", "score": "0.5313", "loss": "1.8254", "code": "d writeTo(m out){if(sts()){on(\"i\" +ge); } s.writeTo(o); }", "n_tokens": 57, "n_pass": [367, 51, 28]}
{"time": "2021-02-19 02:04:02.258704", "score": "0.5639", "loss": "1.6995", "code": "d writeTo(m out){if(sts()){on(\"\" +ge); } s.writeTo(o); }", "n_tokens": 56, "n_pass": [368, 52, 29]}
{"time": "2021-02-19 02:04:03.601632", "score": "0.5639", "loss": "1.6995", "code": "d writeTo(m out){if(sts()){on(\"\"+ge); } s.writeTo(o); }", "n_tokens": 55, "n_pass": [370, 53, 30]}
{"time": "2021-02-19 02:04:04.947840", "score": "0.6329", "loss": "1.3002", "code": "d writeTo(m out){if(sts()){on(\"\"+e); } s.writeTo(o); }", "n_tokens": 54, "n_pass": [372, 54, 31]}
{"time": "2021-02-19 02:04:06.255475", "score": "0.6329", "loss": "1.3002", "code": "d writeTo(m out){if(sts()){on(\"\"+e);} s.writeTo(o); }", "n_tokens": 53, "n_pass": [376, 55, 32]}
{"time": "2021-02-19 02:04:07.564072", "score": "0.6329", "loss": "1.3002", "code": "d writeTo(m out){if(sts()){on(\"\"+e);}s.writeTo(o); }", "n_tokens": 52, "n_pass": [378, 56, 33]}
{"time": "2021-02-19 02:04:20.834735", "score": "0.6329", "loss": "1.3002", "code": "d writeTo(m out){if(sts()){on(\"\"+e);}s.writeTo(o);}", "n_tokens": 51, "n_pass": [392, 66, 34]}
{"time": "2021-02-19 02:04:26.967374", "score": "0.5687", "loss": "1.6526", "code": "d writeTo(m ot){if(sts()){on(\"\"+e);}s.writeTo(o);}", "n_tokens": 50, "n_pass": [407, 68, 35]}
{"time": "2021-02-19 02:04:28.300877", "score": "0.4796", "loss": "2.0438", "code": "d writeTo(m o){if(sts()){on(\"\"+e);}s.writeTo(o);}", "n_tokens": 49, "n_pass": [408, 69, 36]}
{"time": "2021-02-19 02:04:29.638430", "score": "0.4853", "loss": "2.0873", "code": "d writeTo(m o){if(ts()){on(\"\"+e);}s.writeTo(o);}", "n_tokens": 48, "n_pass": [414, 70, 37]}
{"time": "2021-02-19 02:04:33.635717", "score": "0.5118", "loss": "1.7665", "code": "d writeTo(m o){if(ts()){n(\"\"+e);}s.writeTo(o);}", "n_tokens": 47, "n_pass": [421, 73, 38]}

Minimal simplified code:
d writeTo(m o){if(ts()){n(""+e);}s.writeTo(o);}

