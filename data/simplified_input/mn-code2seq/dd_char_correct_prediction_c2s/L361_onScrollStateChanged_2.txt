
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/SummerRC__BiLiBiLi/OneXListviewLibrary/src/me/maxwin/view/XListView_onScrollStateChanged.java
method_name = onScrollStateChanged
method_body = @Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (mScrollListener != null) { mScrollListener.onScrollStateChanged(view, scrollState); } }
predict, score, loss = onScrollStateChanged, 0.9978216886520386, 0.010822380892932415

Trace of simplified code(s):
{"time": "2021-02-20 07:48:25.328258", "score": "0.9978", "loss": "0.0108", "code": "@Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (mScrollListener != null) { mScrollListener.onScrollStateChanged(view, scrollState); } }", "n_tokens": 171, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 07:48:27.005960", "score": "0.9973", "loss": "0.0132", "code": "@Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScrollListener.onScrollStateChanged(view, scrollState); } }", "n_tokens": 150, "n_pass": [24, 2, 2]}
{"time": "2021-02-20 07:48:28.672642", "score": "0.9948", "loss": "0.0244", "code": "@Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScroonScrollStateChanged(view, scrollState); } }", "n_tokens": 139, "n_pass": [47, 3, 3]}
{"time": "2021-02-20 07:48:29.972365", "score": "0.9893", "loss": "0.05", "code": "@Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScroteChanged(view, scrollState); } }", "n_tokens": 128, "n_pass": [48, 4, 4]}
{"time": "2021-02-20 07:48:31.279075", "score": "0.9863", "loss": "0.0598", "code": "@Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScroteChanged(vState); } }", "n_tokens": 117, "n_pass": [50, 5, 5]}
{"time": "2021-02-20 07:48:32.608637", "score": "0.9736", "loss": "0.159", "code": "public void onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScroteChanged(vState); } }", "n_tokens": 107, "n_pass": [52, 6, 6]}
{"time": "2021-02-20 07:48:33.922454", "score": "0.9288", "loss": "0.4767", "code": "d onScrollStateChanged(AbsListView view, int scrollState) { if (ll) { mScroteChanged(vState); } }", "n_tokens": 97, "n_pass": [53, 7, 7]}
{"time": "2021-02-20 07:48:36.004976", "score": "0.6685", "loss": "2.6641", "code": "d onScrollStateChanged(AbsListVnt scrollState) { if (ll) { mScroteChanged(vState); } }", "n_tokens": 86, "n_pass": [57, 8, 8]}
{"time": "2021-02-20 07:48:47.401423", "score": "0.7856", "loss": "1.5916", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { mScroteChanged(vState); } }", "n_tokens": 83, "n_pass": [131, 15, 9]}
{"time": "2021-02-20 07:48:52.645329", "score": "0.8464", "loss": "1.1133", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { roteChanged(vState); } }", "n_tokens": 80, "n_pass": [141, 19, 10]}
{"time": "2021-02-20 07:48:53.963136", "score": "0.8158", "loss": "1.376", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { eChanged(vState); } }", "n_tokens": 77, "n_pass": [142, 20, 11]}
{"time": "2021-02-20 07:48:56.570697", "score": "0.7214", "loss": "2.5365", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { eChed(vState); } }", "n_tokens": 74, "n_pass": [144, 22, 12]}
{"time": "2021-02-20 07:49:13.935649", "score": "0.7258", "loss": "2.5649", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { eCd(vState); } }", "n_tokens": 72, "n_pass": [231, 32, 13]}
{"time": "2021-02-20 07:49:16.532868", "score": "0.5817", "loss": "4.0015", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { eCd(vSte); } }", "n_tokens": 70, "n_pass": [234, 34, 14]}
{"time": "2021-02-20 07:49:17.829404", "score": "0.6473", "loss": "3.1973", "code": "d onScrollStateChanged(AbsList scrollState) { if (ll) { eCd(vS); } }", "n_tokens": 68, "n_pass": [235, 35, 15]}
{"time": "2021-02-20 07:49:29.627553", "score": "0.4645", "loss": "5.2035", "code": "d onScrollStateChanged(AbList scrollState) { if (ll) { eCd(vS); } }", "n_tokens": 67, "n_pass": [264, 38, 16]}
{"time": "2021-02-20 07:49:58.615740", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState) { if (ll) { eCd(vS); } }", "n_tokens": 66, "n_pass": [315, 54, 17]}
{"time": "2021-02-20 07:50:36.658141", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState){ if (ll) { eCd(vS); } }", "n_tokens": 65, "n_pass": [402, 75, 18]}
{"time": "2021-02-20 07:50:37.972125", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState){if (ll) { eCd(vS); } }", "n_tokens": 64, "n_pass": [404, 76, 19]}
{"time": "2021-02-20 07:50:39.289612", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState){if(ll) { eCd(vS); } }", "n_tokens": 63, "n_pass": [407, 77, 20]}
{"time": "2021-02-20 07:50:43.220913", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState){if(ll){ eCd(vS); } }", "n_tokens": 62, "n_pass": [412, 80, 21]}
{"time": "2021-02-20 07:50:44.547076", "score": "0.452", "loss": "5.3827", "code": "d onScrollStateChanged(bList scrollState){if(ll){eCd(vS); } }", "n_tokens": 61, "n_pass": [414, 81, 22]}
{"time": "2021-02-20 07:50:48.484792", "score": "0.4935", "loss": "4.7572", "code": "d onScrollStateChanged(bList scrollState){if(ll){eC(vS); } }", "n_tokens": 60, "n_pass": [417, 84, 23]}
{"time": "2021-02-20 07:50:49.781695", "score": "0.5377", "loss": "4.4325", "code": "d onScrollStateChanged(bList scrollState){if(ll){eC(S); } }", "n_tokens": 59, "n_pass": [419, 85, 24]}
{"time": "2021-02-20 07:50:52.406052", "score": "0.5377", "loss": "4.4325", "code": "d onScrollStateChanged(bList scrollState){if(ll){eC(S);} }", "n_tokens": 58, "n_pass": [423, 87, 25]}
{"time": "2021-02-20 07:50:53.705372", "score": "0.5377", "loss": "4.4325", "code": "d onScrollStateChanged(bList scrollState){if(ll){eC(S);}}", "n_tokens": 57, "n_pass": [425, 88, 26]}
{"time": "2021-02-20 07:51:02.890866", "score": "0.5569", "loss": "4.2773", "code": "d onScrollStateChanged(List scrollState){if(ll){eC(S);}}", "n_tokens": 56, "n_pass": [450, 89, 27]}
{"time": "2021-02-20 07:51:04.207303", "score": "0.5279", "loss": "4.5562", "code": "d onScrollStateChanged(ist scrollState){if(ll){eC(S);}}", "n_tokens": 55, "n_pass": [451, 90, 28]}
{"time": "2021-02-20 07:51:08.134945", "score": "0.4796", "loss": "4.9503", "code": "d onScrollStateChanged(is scrollState){if(ll){eC(S);}}", "n_tokens": 54, "n_pass": [454, 93, 29]}
{"time": "2021-02-20 07:51:26.513579", "score": "0.432", "loss": "5.2519", "code": "d onScrollStateChanged(is scrollState){if(ll){C(S);}}", "n_tokens": 53, "n_pass": [476, 107, 30]}
{"time": "2021-02-20 07:51:38.349586", "score": "0.4845", "loss": "4.8739", "code": "d onScrollStateChanged(s scrollState){if(ll){C(S);}}", "n_tokens": 52, "n_pass": [507, 110, 31]}

Minimal simplified code:
d onScrollStateChanged(s scrollState){if(ll){C(S);}}

