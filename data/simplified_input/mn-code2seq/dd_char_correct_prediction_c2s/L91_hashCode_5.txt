
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-entitlements/src/main/java/com/sun/identity/entitlement/AttributeLookupCondition_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int code = super.hashCode(); if (key != null) { code = 31 * code + key.hashCode(); } if (value != null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }
predict, score, loss = hashCode, 0.9998946189880371, 0.0002339884522370994

Trace of simplified code(s):
{"time": "2021-02-19 14:15:11.748043", "score": "0.9999", "loss": "0.0002", "code": "@Override public int hashCode() { int code = super.hashCode(); if (key != null) { code = 31 * code + key.hashCode(); } if (value != null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 271, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 14:15:13.118592", "score": "0.9999", "loss": "0.0002", "code": "@Override public int hashCode() { int code = super.hashCode(); if (l) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 203, "n_pass": [9, 2, 2]}
{"time": "2021-02-19 14:15:14.453813", "score": "1.0", "loss": "0.0001", "code": "@Override public int hashCode() { int code = super.hashCode(); if (ll) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 135, "n_pass": [10, 3, 3]}
{"time": "2021-02-19 14:15:15.794100", "score": "0.9999", "loss": "0.0001", "code": "@Override public int hashCode() { int code = super.hashCode(); if (ll) { code = 31 *nName.hashCode(); } return code; }", "n_tokens": 118, "n_pass": [28, 4, 4]}
{"time": "2021-02-19 14:15:17.127964", "score": "0.9998", "loss": "0.0007", "code": " int hashCode() { int code = super.hashCode(); if (ll) { code = 31 *nName.hashCode(); } return code; }", "n_tokens": 102, "n_pass": [31, 5, 5]}
{"time": "2021-02-19 14:15:18.852143", "score": "0.9108", "loss": "0.3003", "code": " int hashCode() { int code = supode(); if (ll) { code = 31 *nName.hashCode(); } return code; }", "n_tokens": 94, "n_pass": [54, 6, 6]}
{"time": "2021-02-19 14:15:21.912215", "score": "0.8736", "loss": "0.4377", "code": " int hashCode() { int code = supode(); if (ll) {e = 31 *nName.hashCode(); } return code; }", "n_tokens": 90, "n_pass": [92, 8, 7]}
{"time": "2021-02-19 14:15:23.606300", "score": "0.9271", "loss": "0.2418", "code": " int hashCode() { int code = supode(); if (ll) {e = nName.hashCode(); } return code; }", "n_tokens": 86, "n_pass": [94, 9, 8]}
{"time": "2021-02-19 14:15:24.927233", "score": "0.9575", "loss": "0.1396", "code": " int hashCode() { int code = supode(); if (ll) {e = e.hashCode(); } return code; }", "n_tokens": 82, "n_pass": [95, 10, 9]}
{"time": "2021-02-19 14:15:26.251936", "score": "0.6633", "loss": "1.4586", "code": " int hashCode() { int code = supode(); if (ll) {e = hCode(); } return code; }", "n_tokens": 77, "n_pass": [96, 11, 10]}
{"time": "2021-02-19 14:15:27.582489", "score": "0.5592", "loss": "2.3589", "code": " int hashCode() { int code = supode(); if (ll) {e = hCode(); }rn code; }", "n_tokens": 72, "n_pass": [99, 12, 11]}
{"time": "2021-02-19 14:15:31.380772", "score": "0.6669", "loss": "1.8861", "code": " int hashCode() { inde = supode(); if (ll) {e = hCode(); }rn code; }", "n_tokens": 68, "n_pass": [107, 14, 12]}
{"time": "2021-02-19 14:15:32.696982", "score": "0.7408", "loss": "1.3137", "code": " int hashCode() { inde =ode(); if (ll) {e = hCode(); }rn code; }", "n_tokens": 64, "n_pass": [109, 15, 13]}
{"time": "2021-02-19 14:15:34.006070", "score": "0.5075", "loss": "2.3928", "code": " int hashCode() { inde =ode(); if (ll) {hCode(); }rn code; }", "n_tokens": 60, "n_pass": [114, 16, 14]}
{"time": "2021-02-19 14:15:43.033696", "score": "0.5711", "loss": "2.1335", "code": " int hashCode() { inde =ode(); if (ll) {hCode(); }rn c; }", "n_tokens": 57, "n_pass": [163, 22, 15]}
{"time": "2021-02-19 14:15:49.756111", "score": "0.6318", "loss": "1.9003", "code": " int hashCode() { in =ode(); if (ll) {hCode(); }rn c; }", "n_tokens": 55, "n_pass": [175, 26, 16]}
{"time": "2021-02-19 14:15:52.392062", "score": "0.6601", "loss": "1.9601", "code": " int hashCode() { in =e(); if (ll) {hCode(); }rn c; }", "n_tokens": 53, "n_pass": [177, 28, 17]}
{"time": "2021-02-19 14:16:06.805756", "score": "0.6601", "loss": "1.9601", "code": " int hashCode() { in =e();if (ll) {hCode(); }rn c; }", "n_tokens": 52, "n_pass": [257, 35, 18]}
{"time": "2021-02-19 14:16:08.124060", "score": "0.6601", "loss": "1.9601", "code": " int hashCode() { in =e();if(ll) {hCode(); }rn c; }", "n_tokens": 51, "n_pass": [259, 36, 19]}
{"time": "2021-02-19 14:16:12.089400", "score": "0.6601", "loss": "1.9601", "code": " int hashCode() { in =e();if(ll){hCode(); }rn c; }", "n_tokens": 50, "n_pass": [264, 39, 20]}
{"time": "2021-02-19 14:16:19.925310", "score": "0.6601", "loss": "1.9601", "code": " int hashCode() { in =e();if(ll){hCode();}rn c; }", "n_tokens": 49, "n_pass": [274, 45, 21]}
{"time": "2021-02-19 14:16:22.556805", "score": "0.7118", "loss": "1.7606", "code": " int hashCode() { in =e();if(ll){hCode();}rc; }", "n_tokens": 47, "n_pass": [277, 47, 22]}
{"time": "2021-02-19 14:16:23.861160", "score": "0.7118", "loss": "1.7606", "code": "int hashCode() { in =e();if(ll){hCode();}rc; }", "n_tokens": 46, "n_pass": [280, 48, 23]}
{"time": "2021-02-19 14:16:32.422572", "score": "0.7118", "loss": "1.7606", "code": "int hashCode(){ in =e();if(ll){hCode();}rc; }", "n_tokens": 45, "n_pass": [295, 52, 24]}
{"time": "2021-02-19 14:16:33.753881", "score": "0.7118", "loss": "1.7606", "code": "int hashCode(){in =e();if(ll){hCode();}rc; }", "n_tokens": 44, "n_pass": [297, 53, 25]}
{"time": "2021-02-19 14:16:35.092443", "score": "0.6982", "loss": "1.9016", "code": "int hashCode(){n =e();if(ll){hCode();}rc; }", "n_tokens": 43, "n_pass": [298, 54, 26]}
{"time": "2021-02-19 14:16:36.413741", "score": "0.6982", "loss": "1.9016", "code": "int hashCode(){n=e();if(ll){hCode();}rc; }", "n_tokens": 42, "n_pass": [300, 55, 27]}
{"time": "2021-02-19 14:16:37.715041", "score": "0.7335", "loss": "1.2556", "code": "int hashCode(){ne();if(ll){hCode();}rc; }", "n_tokens": 41, "n_pass": [301, 56, 28]}
{"time": "2021-02-19 14:16:39.011675", "score": "0.6264", "loss": "2.0489", "code": "int hashCode(){n();if(ll){hCode();}rc; }", "n_tokens": 40, "n_pass": [302, 57, 29]}
{"time": "2021-02-19 14:16:40.325994", "score": "0.5275", "loss": "2.4246", "code": "int hashCode(){n();if(l){hCode();}rc; }", "n_tokens": 39, "n_pass": [309, 58, 30]}
{"time": "2021-02-19 14:16:58.601661", "score": "0.5275", "loss": "2.4246", "code": "int hashCode(){n();if(l){hCode();}rc;}", "n_tokens": 38, "n_pass": [353, 69, 31]}

Minimal simplified code:
int hashCode(){n();if(l){hCode();}rc;}

