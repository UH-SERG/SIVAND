
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/test/java/org/bouncycastle/jce/provider/test/CertPathTest_getEncoded.java
method_name = getEncoded
method_body = public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException("Encoding not supported: " + encoding); }
predict, score, loss = getEncoded, 0.7751365900039673, 0.6699422597885132

Trace of simplified code(s):
{"time": "2021-02-20 11:17:40.952129", "score": "0.7751", "loss": "0.6699", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 235, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 11:17:42.297084", "score": "0.8769", "loss": "0.5893", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { relone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 206, "n_pass": [24, 2, 2]}
{"time": "2021-02-20 11:17:44.945548", "score": "0.8304", "loss": "0.8315", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { relone(); } throw new Certification(\"Encoding not supported: \" + encoding); }", "n_tokens": 191, "n_pass": [48, 4, 3]}
{"time": "2021-02-20 11:17:46.622351", "score": "0.6853", "loss": "1.7942", "code": "public byte[] getEncoded(String encoding) throws Certifieption { if (getType().equals(encoding)) { relone(); } throw new Certification(\"Encoding not supported: \" + encoding); }", "n_tokens": 176, "n_pass": [55, 5, 4]}
{"time": "2021-02-20 11:17:49.614709", "score": "0.6853", "loss": "1.7942", "code": "public byte[] getEncoded(String encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw new Certification(\"Encoding not supported: \" + encoding); }", "n_tokens": 169, "n_pass": [92, 7, 5]}
{"time": "2021-02-20 11:17:50.959851", "score": "0.6494", "loss": "1.992", "code": "public byte[] getEncoded(String encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\"Encoding not supported: \" + encoding); }", "n_tokens": 161, "n_pass": [101, 8, 6]}
{"time": "2021-02-20 11:17:52.302444", "score": "0.6029", "loss": "2.2408", "code": "public byte[] getEncoded(String encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\" not supported: \" + encoding); }", "n_tokens": 153, "n_pass": [103, 9, 7]}
{"time": "2021-02-20 11:17:54.970727", "score": "0.4476", "loss": "4.0368", "code": "public byte[] getEncoded(String encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 145, "n_pass": [105, 11, 8]}
{"time": "2021-02-20 11:17:56.276562", "score": "0.4476", "loss": "4.0368", "code": "byte[] getEncoded(String encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 138, "n_pass": [108, 12, 9]}
{"time": "2021-02-20 11:18:05.968697", "score": "0.4296", "loss": "4.243", "code": "byte[] getEncoded(Str encoding) throws Certifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 135, "n_pass": [173, 18, 10]}
{"time": "2021-02-20 11:18:09.952227", "score": "0.4668", "loss": "3.7803", "code": "byte[] getEncoded(Str encoding) throws ifi{ if (getType().equals(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 131, "n_pass": [180, 21, 11]}
{"time": "2021-02-20 11:18:11.282265", "score": "0.4306", "loss": "3.9733", "code": "byte[] getEncoded(Str encoding) throws ifi{ if (get().equals(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 127, "n_pass": [184, 22, 12]}
{"time": "2021-02-20 11:18:13.888772", "score": "0.3926", "loss": "4.31", "code": "byte[] getEncoded(Str encoding) throws ifi{ if (get().es(encoding)) { relone(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 123, "n_pass": [186, 24, 13]}
{"time": "2021-02-20 11:18:16.512888", "score": "0.4134", "loss": "4.3328", "code": "byte[] getEncoded(Str encoding) throws ifi{ if (get().es(encoding)) { re(); } throw newcation(\" not sup\" + encoding); }", "n_tokens": 119, "n_pass": [191, 26, 14]}
{"time": "2021-02-20 11:18:19.118117", "score": "0.4134", "loss": "4.3328", "code": "byte[] getEncoded(Str encoding) throws ifi{ if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 115, "n_pass": [196, 28, 15]}
{"time": "2021-02-20 11:18:30.717579", "score": "0.3349", "loss": "5.0077", "code": "byte[] getEncoded(Str encod) throws ifi{ if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 112, "n_pass": [213, 36, 16]}
{"time": "2021-02-20 11:18:46.626249", "score": "0.3169", "loss": "5.2193", "code": "byte[] getEncoded(Str end) throws ifi{ if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 110, "n_pass": [307, 47, 17]}
{"time": "2021-02-20 11:19:16.916327", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end) throws ifi{ if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 109, "n_pass": [357, 70, 18]}
{"time": "2021-02-20 11:20:07.552484", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{ if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 108, "n_pass": [530, 101, 19]}
{"time": "2021-02-20 11:20:11.527882", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if (get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 107, "n_pass": [541, 104, 20]}
{"time": "2021-02-20 11:20:12.858453", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)) { re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 106, "n_pass": [544, 105, 21]}
{"time": "2021-02-20 11:20:31.238450", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){ re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 105, "n_pass": [565, 119, 22]}
{"time": "2021-02-20 11:20:32.543242", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re(); } throw newon(\" not sup\" + encoding); }", "n_tokens": 104, "n_pass": [567, 120, 23]}
{"time": "2021-02-20 11:20:36.450059", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();} throw newon(\" not sup\" + encoding); }", "n_tokens": 103, "n_pass": [573, 123, 24]}
{"time": "2021-02-20 11:20:37.752170", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw newon(\" not sup\" + encoding); }", "n_tokens": 102, "n_pass": [575, 124, 25]}
{"time": "2021-02-20 11:20:40.364805", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewon(\" not sup\" + encoding); }", "n_tokens": 101, "n_pass": [582, 126, 26]}
{"time": "2021-02-20 11:20:44.307060", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn(\" not sup\" + encoding); }", "n_tokens": 100, "n_pass": [585, 129, 27]}
{"time": "2021-02-20 11:20:46.937893", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn(\"not sup\" + encoding); }", "n_tokens": 99, "n_pass": [589, 131, 28]}
{"time": "2021-02-20 11:20:57.381239", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn(\"not sup\"+ encoding); }", "n_tokens": 98, "n_pass": [598, 139, 29]}
{"time": "2021-02-20 11:20:58.711767", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn(\"not sup\"+encoding); }", "n_tokens": 97, "n_pass": [600, 140, 30]}
{"time": "2021-02-20 11:21:10.480335", "score": "0.3169", "loss": "5.2193", "code": "byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn(\"not sup\"+encoding);}", "n_tokens": 96, "n_pass": [611, 149, 31]}

Minimal simplified code:
byte[]getEncoded(Str end)throws ifi{if(get().es(encoding)){re();}throw ewn("not sup"+encoding);}

