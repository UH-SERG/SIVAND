
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/sun/identity/idsvcs/opensso/IdentityServicesImpl_addMember.java
method_name = addMember
method_body = private void addMember(AMIdentityRepository repo, AMIdentity amIdentity, AMIdentity member) throws IdRepoException, SSOException, ForbiddenException { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.getType(), IdOperation.EDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(""); } } }
predict, score, loss = addMember, 0.9101715087890625, 0.4275590181350708

Trace of simplified code(s):
{"time": "2021-02-19 16:14:53.802511", "score": "0.9102", "loss": "0.4276", "code": "private void addMember(AMIdentityRepository repo, AMIdentity amIdentity, AMIdentity member) throws IdRepoException, SSOException, ForbiddenException { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.getType(), IdOperation.EDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 339, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 16:14:55.547569", "score": "0.8138", "loss": "0.8523", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepoException, SSOException, ForbiddenException { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.getType(), IdOperation.EDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 318, "n_pass": [47, 2, 2]}
{"time": "2021-02-19 16:14:56.899727", "score": "0.7588", "loss": "1.1453", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepoon, ForbiddenException { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.getType(), IdOperation.EDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 297, "n_pass": [49, 3, 3]}
{"time": "2021-02-19 16:14:58.264047", "score": "0.7967", "loss": "1.011", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.getType(), IdOperation.EDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 276, "n_pass": [50, 4, 4]}
{"time": "2021-02-19 16:14:59.618101", "score": "0.8376", "loss": "0.8357", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { amIdentity.addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 255, "n_pass": [55, 5, 5]}
{"time": "2021-02-19 16:15:01.349120", "score": "0.7565", "loss": "1.2492", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw new ForbiddenException(\"\"); } } }", "n_tokens": 244, "n_pass": [93, 6, 6]}
{"time": "2021-02-19 16:15:02.696751", "score": "0.8112", "loss": "1.0013", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw enException(\"\"); } } }", "n_tokens": 233, "n_pass": [97, 7, 7]}
{"time": "2021-02-19 16:15:04.039590", "score": "0.7489", "loss": "1.3969", "code": "private void addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 222, "n_pass": [98, 8, 8]}
{"time": "2021-02-19 16:15:05.361441", "score": "0.6334", "loss": "2.0894", "code": "id addMember(AMIdentityRepository repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 212, "n_pass": [100, 9, 9]}
{"time": "2021-02-19 16:15:07.068371", "score": "0.6475", "loss": "2.0078", "code": "id addMember(AMIdentory repo, AMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 202, "n_pass": [103, 10, 10]}
{"time": "2021-02-19 16:15:08.389109", "score": "0.5861", "loss": "2.3673", "code": "id addMember(AMIdentAMIdentity ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 192, "n_pass": [104, 11, 11]}
{"time": "2021-02-19 16:15:09.707736", "score": "0.6246", "loss": "2.1166", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperationSupported(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 182, "n_pass": [105, 12, 12]}
{"time": "2021-02-19 16:15:11.061127", "score": "0.6964", "loss": "1.682", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperted(repo, amIdentity.geEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 171, "n_pass": [113, 13, 13]}
{"time": "2021-02-19 16:15:12.399732", "score": "0.7572", "loss": "1.3398", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperted(repo, aeEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 160, "n_pass": [115, 14, 14]}
{"time": "2021-02-19 16:15:14.105473", "score": "0.7068", "loss": "1.648", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperted(reEDIT)) { addMember(member); } else { throw (\"\"); } } }", "n_tokens": 154, "n_pass": [161, 15, 15]}
{"time": "2021-02-19 16:15:15.462061", "score": "0.4727", "loss": "2.9233", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperted(reEDIT)) { add(member); } else { throw (\"\"); } } }", "n_tokens": 148, "n_pass": [164, 16, 16]}
{"time": "2021-02-19 16:15:16.808146", "score": "0.4341", "loss": "3.2954", "code": "id addMember(AMIdent ammember) throws IdRepon { if (!member.isMember(amIdentity)) { if (isOperted(reEDIT)) { add(member); } else { (\"\"); } } }", "n_tokens": 142, "n_pass": [168, 17, 17]}
{"time": "2021-02-19 16:15:21.588910", "score": "0.4232", "loss": "3.3527", "code": "id addMember(AMIdent ammember) throws Id { if (!member.isMember(amIdentity)) { if (isOperted(reEDIT)) { add(member); } else { (\"\"); } } }", "n_tokens": 137, "n_pass": [179, 20, 18]}
{"time": "2021-02-19 16:15:25.605473", "score": "0.4973", "loss": "2.7512", "code": "id addMember(AMIdent ammember) throws Id { if (!member.isMember(atity)) { if (isOperted(reEDIT)) { add(member); } else { (\"\"); } } }", "n_tokens": 132, "n_pass": [185, 23, 19]}
{"time": "2021-02-19 16:15:26.961484", "score": "0.5353", "loss": "2.5491", "code": "id addMember(AMIdent ammember) throws Id { if (!member.isMember(atity)) { if (ised(reEDIT)) { add(member); } else { (\"\"); } } }", "n_tokens": 127, "n_pass": [189, 24, 20]}
{"time": "2021-02-19 16:15:28.288922", "score": "0.5796", "loss": "2.1891", "code": "id addMember(AMIdent ammember) throws Id { if (!member.isMember(atity)) { if (ised(reEDIT)) { add(member); } else { } } }", "n_tokens": 121, "n_pass": [196, 25, 21]}
{"time": "2021-02-19 16:15:30.359107", "score": "0.5812", "loss": "2.0766", "code": "id addMember(AM ammember) throws Id { if (!member.isMember(atity)) { if (ised(reEDIT)) { add(member); } else { } } }", "n_tokens": 116, "n_pass": [201, 26, 22]}
{"time": "2021-02-19 16:15:35.075694", "score": "0.7203", "loss": "1.4347", "code": "id addMember(AM member) throws Id { if (!member.isMember(atity)) { if (ised(reEDIT)) { add(member); } else { } } }", "n_tokens": 114, "n_pass": [270, 29, 23]}
{"time": "2021-02-19 16:15:36.390195", "score": "0.5812", "loss": "2.0766", "code": "id addMember(AM mber) throws Id { if (!member.isMember(atity)) { if (ised(reEDIT)) { add(member); } else { } } }", "n_tokens": 112, "n_pass": [271, 30, 24]}
{"time": "2021-02-19 16:15:45.664769", "score": "0.5637", "loss": "2.2836", "code": "id addMember(AM mber) throws Id { if (!member.isMember(ty)) { if (ised(reEDIT)) { add(member); } else { } } }", "n_tokens": 109, "n_pass": [287, 37, 25]}
{"time": "2021-02-19 16:15:47.011646", "score": "0.5994", "loss": "2.0874", "code": "id addMember(AM mber) throws Id { if (!member.isMember(ty)) { if (i(reEDIT)) { add(member); } else { } } }", "n_tokens": 106, "n_pass": [292, 38, 26]}
{"time": "2021-02-19 16:15:48.334835", "score": "0.5469", "loss": "2.3277", "code": "id addMember(AM mber) throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 103, "n_pass": [294, 39, 27]}
{"time": "2021-02-19 16:16:13.164711", "score": "0.5189", "loss": "2.4045", "code": "i addMember(AM mber) throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 102, "n_pass": [435, 54, 28]}
{"time": "2021-02-19 16:16:18.205744", "score": "0.5221", "loss": "2.4416", "code": "i addMember(M mber) throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 101, "n_pass": [447, 55, 29]}
{"time": "2021-02-19 16:16:19.529194", "score": "0.5282", "loss": "2.0478", "code": "i addMember(M ber) throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 100, "n_pass": [450, 56, 30]}
{"time": "2021-02-19 16:16:22.192119", "score": "0.4505", "loss": "2.8736", "code": "i addMember(M br) throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 99, "n_pass": [452, 58, 31]}
{"time": "2021-02-19 16:16:24.831238", "score": "0.4505", "loss": "2.8736", "code": "i addMember(M br)throws Id { if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 98, "n_pass": [455, 60, 32]}
{"time": "2021-02-19 16:16:28.816432", "score": "0.4505", "loss": "2.8736", "code": "i addMember(M br)throws Id{ if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 97, "n_pass": [465, 63, 33]}
{"time": "2021-02-19 16:16:30.157753", "score": "0.4505", "loss": "2.8736", "code": "i addMember(M br)throws Id{if (!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 96, "n_pass": [467, 64, 34]}
{"time": "2021-02-19 16:16:31.494794", "score": "0.4505", "loss": "2.8736", "code": "i addMember(M br)throws Id{if(!member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 95, "n_pass": [470, 65, 35]}
{"time": "2021-02-19 16:16:32.841766", "score": "0.4811", "loss": "2.476", "code": "i addMember(M br)throws Id{if(member.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 94, "n_pass": [472, 66, 36]}
{"time": "2021-02-19 16:16:35.499938", "score": "0.4906", "loss": "2.6094", "code": "i addMember(M br)throws Id{if(mmber.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 93, "n_pass": [474, 68, 37]}
{"time": "2021-02-19 16:16:36.822410", "score": "0.4906", "loss": "2.6094", "code": "i addMember(M br)throws Id{if(mber.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 92, "n_pass": [475, 69, 38]}
{"time": "2021-02-19 16:16:38.167475", "score": "0.5966", "loss": "1.9044", "code": "i addMember(M br)throws Id{if(mer.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 91, "n_pass": [476, 70, 39]}
{"time": "2021-02-19 16:16:40.813880", "score": "0.439", "loss": "3.039", "code": "i addMember(M br)throws Id{if(me.isMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 90, "n_pass": [478, 72, 40]}
{"time": "2021-02-19 16:16:44.821388", "score": "0.3796", "loss": "3.7475", "code": "i addMember(M br)throws Id{if(me.iMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 89, "n_pass": [481, 75, 41]}
{"time": "2021-02-19 16:17:08.801768", "score": "0.3054", "loss": "4.2063", "code": "i addMember(M br)throws I{if(me.iMember(ty)) { if (i(reT)) { add(member); } else { } } }", "n_tokens": 88, "n_pass": [537, 90, 42]}
{"time": "2021-02-19 16:17:44.866863", "score": "0.3054", "loss": "4.2063", "code": "i addMember(M br)throws I{if(me.iMember(ty)){ if (i(reT)) { add(member); } else { } } }", "n_tokens": 87, "n_pass": [657, 111, 43]}
{"time": "2021-02-19 16:17:46.187714", "score": "0.3054", "loss": "4.2063", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if (i(reT)) { add(member); } else { } } }", "n_tokens": 86, "n_pass": [658, 112, 44]}
{"time": "2021-02-19 16:17:47.512439", "score": "0.3054", "loss": "4.2063", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if(i(reT)) { add(member); } else { } } }", "n_tokens": 85, "n_pass": [661, 113, 45]}
{"time": "2021-02-19 16:17:48.835792", "score": "0.4687", "loss": "3.0591", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((reT)) { add(member); } else { } } }", "n_tokens": 84, "n_pass": [663, 114, 46]}
{"time": "2021-02-19 16:17:50.155379", "score": "0.4573", "loss": "2.8353", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((eT)) { add(member); } else { } } }", "n_tokens": 83, "n_pass": [665, 115, 47]}
{"time": "2021-02-19 16:17:51.474653", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)) { add(member); } else { } } }", "n_tokens": 82, "n_pass": [666, 116, 48]}
{"time": "2021-02-19 16:17:52.799930", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){ add(member); } else { } } }", "n_tokens": 81, "n_pass": [670, 117, 49]}
{"time": "2021-02-19 16:17:54.145986", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member); } else { } } }", "n_tokens": 80, "n_pass": [672, 118, 50]}
{"time": "2021-02-19 16:18:07.413771", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);} else { } } }", "n_tokens": 79, "n_pass": [685, 128, 51]}
{"time": "2021-02-19 16:18:08.732926", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);}else { } } }", "n_tokens": 78, "n_pass": [687, 129, 52]}
{"time": "2021-02-19 16:18:10.062654", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);}else{ } } }", "n_tokens": 77, "n_pass": [692, 130, 53]}
{"time": "2021-02-19 16:18:11.387884", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);}else{} } }", "n_tokens": 76, "n_pass": [694, 131, 54]}
{"time": "2021-02-19 16:18:12.713043", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);}else{}} }", "n_tokens": 75, "n_pass": [696, 132, 55]}
{"time": "2021-02-19 16:18:14.032928", "score": "0.4203", "loss": "3.0493", "code": "i addMember(M br)throws I{if(me.iMember(ty)){if((T)){add(member);}else{}}}", "n_tokens": 74, "n_pass": [698, 133, 56]}
{"time": "2021-02-19 16:18:35.377813", "score": "0.5056", "loss": "2.5387", "code": "i addMember(M br)throws I{if(me.iMember(y)){if((T)){add(member);}else{}}}", "n_tokens": 73, "n_pass": [740, 146, 57]}
{"time": "2021-02-19 16:18:59.444368", "score": "0.5683", "loss": "2.3764", "code": "i addMember(M br)throws I{if(meiMember(y)){if((T)){add(member);}else{}}}", "n_tokens": 72, "n_pass": [805, 161, 58]}
{"time": "2021-02-19 16:19:10.040072", "score": "0.5694", "loss": "2.0735", "code": "i addMember(M br)throws I{if(meiMember()){if((T)){add(member);}else{}}}", "n_tokens": 71, "n_pass": [814, 169, 59]}
{"time": "2021-02-19 16:19:28.717042", "score": "0.4876", "loss": "2.2394", "code": "i addMember(M b)throws I{if(meiMember()){if((T)){add(member);}else{}}}", "n_tokens": 70, "n_pass": [862, 180, 60]}
{"time": "2021-02-19 16:19:31.356035", "score": "0.4165", "loss": "2.7773", "code": "i addMember(M b)throws I{if(miMember()){if((T)){add(member);}else{}}}", "n_tokens": 69, "n_pass": [877, 182, 61]}

Minimal simplified code:
i addMember(M b)throws I{if(miMember()){if((T)){add(member);}else{}}}

