
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/TernaryOperatorNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }
predict, score, loss = isEquivalent, 0.7721874713897705, 0.6374018788337708

Trace of simplified code(s):
{"time": "2021-02-20 05:20:26.061684", "score": "0.7722", "loss": "0.6374", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 439, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 05:20:27.415513", "score": "0.8958", "loss": "0.258", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.mlent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 384, "n_pass": [23, 2, 2]}
{"time": "2021-02-20 05:20:28.799398", "score": "0.8734", "loss": "0.3089", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 357, "n_pass": [44, 3, 3]}
{"time": "2021-02-20 05:20:30.138633", "score": "0.847", "loss": "0.3895", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanerand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 329, "n_pass": [48, 4, 4]}
{"time": "2021-02-20 05:20:31.470355", "score": "0.841", "loss": "0.4197", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (othereftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 301, "n_pass": [49, 5, 5]}
{"time": "2021-02-20 05:20:33.262145", "score": "0.8382", "loss": "0.4894", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 274, "n_pass": [57, 6, 6]}
{"time": "2021-02-20 05:20:36.370097", "score": "0.8459", "loss": "0.5487", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && other.rightOperanOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 260, "n_pass": [90, 8, 7]}
{"time": "2021-02-20 05:20:37.721398", "score": "0.8235", "loss": "0.6169", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 246, "n_pass": [92, 9, 8]}
{"time": "2021-02-20 05:20:39.070699", "score": "0.7077", "loss": "1.172", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 232, "n_pass": [93, 10, 9]}
{"time": "2021-02-20 05:20:40.424449", "score": "0.6947", "loss": "1.326", "code": "lean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 219, "n_pass": [97, 11, 10]}
{"time": "2021-02-20 05:20:42.107885", "score": "0.7063", "loss": "1.2426", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 206, "n_pass": [101, 12, 11]}
{"time": "2021-02-20 05:20:43.457149", "score": "0.6771", "loss": "1.6748", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOperatorNode other = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 192, "n_pass": [103, 13, 12]}
{"time": "2021-02-20 05:20:44.765011", "score": "0.6338", "loss": "2.08", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (TernaryOpeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 178, "n_pass": [105, 14, 13]}
{"time": "2021-02-20 05:20:47.780505", "score": "0.6585", "loss": "1.8278", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (TeeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(rightOperand)))); } return false; }", "n_tokens": 171, "n_pass": [146, 16, 14]}
{"time": "2021-02-20 05:20:57.102636", "score": "0.5748", "loss": "2.4728", "code": "lean isEquivalent(ValueNode o) throws Sion { if (isS) { TernaryOper = (TeeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(erand)))); } return false; }", "n_tokens": 164, "n_pass": [156, 23, 15]}
{"time": "2021-02-20 05:21:00.452005", "score": "0.5977", "loss": "2.2182", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { TernaryOper = (TeeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(erand)))); } return false; }", "n_tokens": 158, "n_pass": [164, 25, 16]}
{"time": "2021-02-20 05:21:01.769549", "score": "0.5634", "loss": "2.3948", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (TeeeftOperand.isEquivalent(lef(rightOperand == null && othvalent(erand)))); } return false; }", "n_tokens": 151, "n_pass": [170, 26, 17]}
{"time": "2021-02-20 05:21:03.084212", "score": "0.5341", "loss": "2.5219", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightOperand == null && othvalent(erand)))); } return false; }", "n_tokens": 144, "n_pass": [172, 27, 18]}
{"time": "2021-02-20 05:21:07.008144", "score": "0.5681", "loss": "2.2417", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null && othvalent(erand)))); } return false; }", "n_tokens": 137, "n_pass": [177, 30, 19]}
{"time": "2021-02-20 05:21:19.649964", "score": "0.5611", "loss": "2.3624", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &hvalent(erand)))); } return false; }", "n_tokens": 133, "n_pass": [242, 39, 20]}
{"time": "2021-02-20 05:21:20.987188", "score": "0.6594", "loss": "1.8826", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &ent(erand)))); } return false; }", "n_tokens": 129, "n_pass": [243, 40, 21]}
{"time": "2021-02-20 05:21:22.317242", "score": "0.7244", "loss": "1.435", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &ent(d)))); } return false; }", "n_tokens": 125, "n_pass": [245, 41, 22]}
{"time": "2021-02-20 05:21:24.965195", "score": "0.6836", "loss": "1.9562", "code": "lean isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &ent(d)))); } return e; }", "n_tokens": 121, "n_pass": [250, 43, 23]}
{"time": "2021-02-20 05:21:26.309663", "score": "0.7481", "loss": "1.6691", "code": "n isEquivalent(ode o) throws Sion { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &ent(d)))); } return e; }", "n_tokens": 118, "n_pass": [252, 44, 24]}
{"time": "2021-02-20 05:21:29.077946", "score": "0.7269", "loss": "1.7798", "code": "n isEquivalent(ode o) throws S { if (isS) { Terr = (Terand.isEquivalent(lef(rightO== null &ent(d)))); } return e; }", "n_tokens": 115, "n_pass": [263, 45, 25]}
{"time": "2021-02-20 05:21:30.396228", "score": "0.6346", "loss": "2.2822", "code": "n isEquivalent(ode o) throws S { if (isS) { T = (Terand.isEquivalent(lef(rightO== null &ent(d)))); } return e; }", "n_tokens": 112, "n_pass": [269, 46, 26]}
{"time": "2021-02-20 05:21:33.050162", "score": "0.6754", "loss": "1.8562", "code": "n isEquivalent(ode o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); } return e; }", "n_tokens": 109, "n_pass": [272, 48, 27]}
{"time": "2021-02-20 05:21:43.636149", "score": "0.6085", "loss": "2.232", "code": "n isEquivalent(ode o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); }urn e; }", "n_tokens": 105, "n_pass": [285, 56, 28]}
{"time": "2021-02-20 05:21:44.949153", "score": "0.6225", "loss": "2.3746", "code": "n isEquivalent(ode o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); }e; }", "n_tokens": 101, "n_pass": [286, 57, 29]}
{"time": "2021-02-20 05:21:58.883668", "score": "0.6341", "loss": "2.0904", "code": "n isEquivalent(ode o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 99, "n_pass": [377, 66, 30]}
{"time": "2021-02-20 05:22:05.259612", "score": "0.6419", "loss": "2.153", "code": "n isEquivalent(de o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 98, "n_pass": [393, 67, 31]}
{"time": "2021-02-20 05:22:06.587059", "score": "0.6541", "loss": "2.0855", "code": "n isEquivalent(e o) throws S { if (isS) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 97, "n_pass": [394, 68, 32]}
{"time": "2021-02-20 05:22:07.896568", "score": "0.6319", "loss": "2.1693", "code": "n isEquivalent(e o) throws S { if (S) { T = (Ted.isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 95, "n_pass": [406, 69, 33]}
{"time": "2021-02-20 05:22:10.548396", "score": "0.6396", "loss": "2.1756", "code": "n isEquivalent(e o) throws S { if (S) { T = (d.isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 93, "n_pass": [412, 71, 34]}
{"time": "2021-02-20 05:22:11.849656", "score": "0.6811", "loss": "1.6088", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(lef(rightO== null &ent(d)))); } }", "n_tokens": 91, "n_pass": [413, 72, 35]}
{"time": "2021-02-20 05:22:21.147315", "score": "0.6965", "loss": "1.4465", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rightO== null &ent(d)))); } }", "n_tokens": 89, "n_pass": [421, 79, 36]}
{"time": "2021-02-20 05:22:22.447324", "score": "0.6794", "loss": "1.8144", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rhtO== null &ent(d)))); } }", "n_tokens": 87, "n_pass": [423, 80, 37]}
{"time": "2021-02-20 05:22:23.773020", "score": "0.7082", "loss": "1.403", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rO== null &ent(d)))); } }", "n_tokens": 85, "n_pass": [424, 81, 38]}
{"time": "2021-02-20 05:22:29.036074", "score": "0.6524", "loss": "1.5001", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rO== nu &ent(d)))); } }", "n_tokens": 83, "n_pass": [428, 85, 39]}
{"time": "2021-02-20 05:22:58.352973", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rO== nu &ent()))); } }", "n_tokens": 82, "n_pass": [549, 100, 40]}
{"time": "2021-02-20 05:22:59.677472", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rO== nu &ent())));} }", "n_tokens": 81, "n_pass": [554, 101, 41]}
{"time": "2021-02-20 05:23:01.013311", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o) throws S { if (S) { T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 80, "n_pass": [556, 102, 42]}
{"time": "2021-02-20 05:23:07.379407", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S { if (S) { T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 79, "n_pass": [577, 103, 43]}
{"time": "2021-02-20 05:23:08.706139", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{ if (S) { T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 78, "n_pass": [586, 104, 44]}
{"time": "2021-02-20 05:23:10.046915", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if (S) { T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 77, "n_pass": [588, 105, 45]}
{"time": "2021-02-20 05:23:11.358138", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if(S) { T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 76, "n_pass": [591, 106, 46]}
{"time": "2021-02-20 05:23:12.681287", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if(S){ T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 75, "n_pass": [595, 107, 47]}
{"time": "2021-02-20 05:23:13.985826", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if(S){T = (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 74, "n_pass": [597, 108, 48]}
{"time": "2021-02-20 05:23:15.293857", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if(S){T= (isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 73, "n_pass": [599, 109, 49]}
{"time": "2021-02-20 05:23:17.923399", "score": "0.6505", "loss": "1.5686", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent(l(rO== nu &ent())));}}", "n_tokens": 72, "n_pass": [601, 111, 50]}
{"time": "2021-02-20 05:23:34.980698", "score": "0.6188", "loss": "2.1782", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((rO== nu &ent())));}}", "n_tokens": 71, "n_pass": [616, 124, 51]}
{"time": "2021-02-20 05:23:36.293806", "score": "0.6139", "loss": "2.2386", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O== nu &ent())));}}", "n_tokens": 70, "n_pass": [618, 125, 52]}
{"time": "2021-02-20 05:23:40.212531", "score": "0.6139", "loss": "2.2386", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==nu &ent())));}}", "n_tokens": 69, "n_pass": [622, 128, 53]}
{"time": "2021-02-20 05:23:44.108398", "score": "0.6139", "loss": "2.2386", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==nu&ent())));}}", "n_tokens": 68, "n_pass": [625, 131, 54]}
{"time": "2021-02-20 05:23:46.725152", "score": "0.5606", "loss": "2.3792", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==nu&nt())));}}", "n_tokens": 67, "n_pass": [627, 133, 55]}
{"time": "2021-02-20 05:23:49.360642", "score": "0.6132", "loss": "2.1575", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==nu&n())));}}", "n_tokens": 66, "n_pass": [629, 135, 56]}
{"time": "2021-02-20 05:24:16.578771", "score": "0.6202", "loss": "2.0966", "code": "n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==n&n())));}}", "n_tokens": 65, "n_pass": [693, 152, 57]}

Minimal simplified code:
n isEquivalent(e o)throws S{if(S){T=(isEquivalent((O==n&n())));}}

