
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/json-iterator__java/src/main/java/com/jsoniter/any/ListWrapperAny_next.java
method_name = next
method_body = @Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }
predict, score, loss = next, 0.9218335747718811, 0.1509004384279251

Trace of simplified code(s):
{"time": "2021-02-20 04:20:43.517013", "score": "0.9218", "loss": "0.1509", "code": "@Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 179, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 04:20:44.918465", "score": "0.9329", "loss": "0.1308", "code": "@Override public Any next() { if (cache == ndex == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 134, "n_pass": [9, 2, 2]}
{"time": "2021-02-20 04:20:46.618745", "score": "0.9465", "loss": "0.1084", "code": "@Override public Any next() { if (cache == ne.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 123, "n_pass": [36, 3, 3]}
{"time": "2021-02-20 04:20:47.925713", "score": "0.8482", "loss": "0.3202", "code": "@Override public Any next() { if (cache == ne.size()) { cache.add(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 111, "n_pass": [41, 4, 4]}
{"time": "2021-02-20 04:20:49.587688", "score": "0.825", "loss": "0.4214", "code": "@Overpublic Any next() { if (cache == ne.size()) { cache.add(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 106, "n_pass": [75, 5, 5]}
{"time": "2021-02-20 04:20:50.914725", "score": "0.825", "loss": "0.4214", "code": "@Overc Any next() { if (cache == ne.size()) { cache.add(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 101, "n_pass": [76, 6, 6]}
{"time": "2021-02-20 04:20:52.913411", "score": "0.8203", "loss": "0.445", "code": "@Overc Any next() { if (c== ne.size()) { cache.add(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 96, "n_pass": [81, 7, 7]}
{"time": "2021-02-20 04:20:54.213007", "score": "0.7861", "loss": "0.559", "code": "@Overc Any next() { if (c.size()) { cache.add(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 91, "n_pass": [82, 8, 8]}
{"time": "2021-02-20 04:20:55.577362", "score": "0.5932", "loss": "1.1767", "code": "@Overc Any next() { if (c.size()) { cdd(Any.wrap(val.get(index))); } retu(index++); }", "n_tokens": 85, "n_pass": [85, 9, 9]}
{"time": "2021-02-20 04:20:56.885622", "score": "0.5037", "loss": "1.4608", "code": "@Overc Any next() { if (c.size()) { cdd(Any.wrap(t(index))); } retu(index++); }", "n_tokens": 79, "n_pass": [88, 10, 10]}
{"time": "2021-02-20 04:20:58.915116", "score": "0.3899", "loss": "1.7541", "code": "@Overc Any next() { if (c.size()) { cdd(Any.wrap(t(ix))); } retu(index++); }", "n_tokens": 76, "n_pass": [132, 11, 11]}
{"time": "2021-02-20 04:21:00.254291", "score": "0.2439", "loss": "2.272", "code": "@Overc Any next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(index++); }", "n_tokens": 73, "n_pass": [136, 12, 12]}
{"time": "2021-02-20 04:21:01.560197", "score": "0.2392", "loss": "2.2802", "code": "@Overc Any next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 70, "n_pass": [138, 13, 13]}
{"time": "2021-02-20 04:21:02.917769", "score": "0.366", "loss": "1.764", "code": "@Orc Any next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 68, "n_pass": [142, 14, 14]}
{"time": "2021-02-20 04:21:04.222875", "score": "0.2819", "loss": "2.0955", "code": "@O Any next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 66, "n_pass": [143, 15, 15]}
{"time": "2021-02-20 04:21:05.882022", "score": "0.2658", "loss": "2.3449", "code": "@O A next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 64, "n_pass": [145, 16, 16]}
{"time": "2021-02-20 04:21:10.199349", "score": "0.2972", "loss": "2.1343", "code": " A next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 62, "n_pass": [166, 19, 17]}
{"time": "2021-02-20 04:21:16.792515", "score": "0.2972", "loss": "2.1343", "code": "A next() { if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 61, "n_pass": [230, 22, 18]}
{"time": "2021-02-20 04:21:19.883654", "score": "0.2972", "loss": "2.1343", "code": "A next(){ if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 60, "n_pass": [238, 23, 19]}
{"time": "2021-02-20 04:21:21.205989", "score": "0.2972", "loss": "2.1343", "code": "A next(){if (c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 59, "n_pass": [240, 24, 20]}
{"time": "2021-02-20 04:21:22.509956", "score": "0.2972", "loss": "2.1343", "code": "A next(){if(c.size()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 58, "n_pass": [243, 25, 21]}
{"time": "2021-02-20 04:21:23.812117", "score": "0.2877", "loss": "2.0907", "code": "A next(){if(csize()) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 57, "n_pass": [246, 26, 22]}
{"time": "2021-02-20 04:21:30.448159", "score": "0.4665", "loss": "1.3122", "code": "A next(){if(csize) { cdd(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 55, "n_pass": [251, 31, 23]}
{"time": "2021-02-20 04:21:31.739652", "score": "0.4564", "loss": "1.3682", "code": "A next(){if(csize) { d(Any.wrap(t(ix))); } r(in++); }", "n_tokens": 53, "n_pass": [254, 32, 24]}
{"time": "2021-02-20 04:21:33.030562", "score": "0.4447", "loss": "1.3389", "code": "A next(){if(csize) { d(y.wrap(t(ix))); } r(in++); }", "n_tokens": 51, "n_pass": [256, 33, 25]}
{"time": "2021-02-20 04:21:34.318884", "score": "0.4477", "loss": "1.3771", "code": "A next(){if(csize) { d(wrap(t(ix))); } r(in++); }", "n_tokens": 49, "n_pass": [257, 34, 26]}
{"time": "2021-02-20 04:21:35.606683", "score": "0.3346", "loss": "1.6494", "code": "A next(){if(csize) { d(ap(t(ix))); } r(in++); }", "n_tokens": 47, "n_pass": [258, 35, 27]}
{"time": "2021-02-20 04:21:36.897725", "score": "0.3563", "loss": "1.4462", "code": "A next(){if(csize) { d((t(ix))); } r(in++); }", "n_tokens": 45, "n_pass": [259, 36, 28]}
{"time": "2021-02-20 04:21:41.649063", "score": "0.4689", "loss": "1.3732", "code": "A next(){if(size) { d((t(ix))); } r(in++); }", "n_tokens": 44, "n_pass": [283, 38, 29]}
{"time": "2021-02-20 04:21:44.322717", "score": "0.4446", "loss": "1.388", "code": "A next(){if(sze) { d((t(ix))); } r(in++); }", "n_tokens": 43, "n_pass": [285, 40, 30]}
{"time": "2021-02-20 04:21:46.919888", "score": "0.4699", "loss": "1.4888", "code": "A next(){if(sz) { d((t(ix))); } r(in++); }", "n_tokens": 42, "n_pass": [287, 42, 31]}
{"time": "2021-02-20 04:21:56.635077", "score": "0.5726", "loss": "1.0303", "code": "A next(){if(sz) { d(((ix))); } r(in++); }", "n_tokens": 41, "n_pass": [344, 46, 32]}
{"time": "2021-02-20 04:21:57.939281", "score": "0.5181", "loss": "1.0752", "code": "A next(){if(sz) { d(((x))); } r(in++); }", "n_tokens": 40, "n_pass": [346, 47, 33]}
{"time": "2021-02-20 04:21:59.237857", "score": "0.5181", "loss": "1.0752", "code": "A next(){if(sz) { d(((x)));} r(in++); }", "n_tokens": 39, "n_pass": [352, 48, 34]}
{"time": "2021-02-20 04:22:00.524473", "score": "0.5181", "loss": "1.0752", "code": "A next(){if(sz) { d(((x)));}r(in++); }", "n_tokens": 38, "n_pass": [354, 49, 35]}
{"time": "2021-02-20 04:22:01.810581", "score": "0.882", "loss": "0.3009", "code": "A next(){if(sz) { d(((x)));}(in++); }", "n_tokens": 37, "n_pass": [355, 50, 36]}
{"time": "2021-02-20 04:22:03.115907", "score": "0.7226", "loss": "0.807", "code": "A next(){if(sz) { d(((x)));}(n++); }", "n_tokens": 36, "n_pass": [357, 51, 37]}
{"time": "2021-02-20 04:22:04.406268", "score": "0.7226", "loss": "0.807", "code": "A next(){if(sz) { d(((x)));}(n++);}", "n_tokens": 35, "n_pass": [363, 52, 38]}
{"time": "2021-02-20 04:22:07.835141", "score": "0.6802", "loss": "0.7618", "code": "A next(){if(z) { d(((x)));}(n++);}", "n_tokens": 34, "n_pass": [377, 53, 39]}
{"time": "2021-02-20 04:22:09.136501", "score": "0.6802", "loss": "0.7618", "code": "A next(){if(z){ d(((x)));}(n++);}", "n_tokens": 33, "n_pass": [380, 54, 40]}
{"time": "2021-02-20 04:22:10.422762", "score": "0.6802", "loss": "0.7618", "code": "A next(){if(z){d(((x)));}(n++);}", "n_tokens": 32, "n_pass": [382, 55, 41]}
{"time": "2021-02-20 04:22:11.701502", "score": "0.6784", "loss": "0.6497", "code": "A next(){if(z){(((x)));}(n++);}", "n_tokens": 31, "n_pass": [383, 56, 42]}

Minimal simplified code:
A next(){if(z){(((x)));}(n++);}

