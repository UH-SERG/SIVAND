
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/state/SideEffect_toString.java
method_name = toString
method_body = @Override public String toString() { if (nextState.isPresent()) { return action.toString() + " " + nextState.get(); } else { return action.toString(); } }
predict, score, loss = toString, 0.9362236857414246, 0.1490488201379776

Trace of simplified code(s):
{"time": "2021-02-20 17:46:39.589548", "score": "0.9362", "loss": "0.149", "code": "@Override public String toString() { if (nextState.isPresent()) { return action.toString() + \" \" + nextState.get(); } else { return action.toString(); } }", "n_tokens": 154, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 17:46:42.265441", "score": "0.7446", "loss": "0.7703", "code": " public String toString() { if (nextState.isPresent()) { return action.toString() + \" \" + nextState.get(); } else { return action.toString(); } }", "n_tokens": 145, "n_pass": [44, 3, 2]}
{"time": "2021-02-20 17:46:45.232258", "score": "0.8023", "loss": "0.5829", "code": " public String toString() { if (nextresent()) { return action.toString() + \" \" + nextState.get(); } else { return action.toString(); } }", "n_tokens": 136, "n_pass": [49, 5, 3]}
{"time": "2021-02-20 17:46:47.849476", "score": "0.9477", "loss": "0.1487", "code": " public String toString() { if (nextresent()) { return action.toString() + \" \" + nextS; } else { return action.toString(); } }", "n_tokens": 126, "n_pass": [55, 7, 4]}
{"time": "2021-02-20 17:46:49.153481", "score": "0.9241", "loss": "0.2464", "code": " public String toString() { if (nextresent()) { return action.toString() + \" \" + nextS; } else {tion.toString(); } }", "n_tokens": 116, "n_pass": [57, 8, 5]}
{"time": "2021-02-20 17:46:50.470532", "score": "0.8915", "loss": "0.3812", "code": " public String toString() { if (nextresent()) { return action.toString() + \" \" + nextS; } else {ing(); } }", "n_tokens": 106, "n_pass": [58, 9, 6]}
{"time": "2021-02-20 17:46:51.766677", "score": "0.7902", "loss": "0.7828", "code": "tring toString() { if (nextresent()) { return action.toString() + \" \" + nextS; } else {ing(); } }", "n_tokens": 97, "n_pass": [60, 10, 7]}
{"time": "2021-02-20 17:46:56.149555", "score": "0.7357", "loss": "1.216", "code": "g toString() { if (nextresent()) { return action.toString() + \" \" + nextS; } else {ing(); } }", "n_tokens": 93, "n_pass": [91, 13, 8]}
{"time": "2021-02-20 17:46:58.161078", "score": "0.7676", "loss": "1.1669", "code": "g toString() { if (nextt()) { return action.toString() + \" \" + nextS; } else {ing(); } }", "n_tokens": 88, "n_pass": [97, 14, 9]}
{"time": "2021-02-20 17:46:59.810468", "score": "0.7744", "loss": "1.1806", "code": "g toString() { if (nextt()) { return a.toString() + \" \" + nextS; } else {ing(); } }", "n_tokens": 83, "n_pass": [101, 15, 10]}
{"time": "2021-02-20 17:47:02.390308", "score": "0.8785", "loss": "0.6048", "code": "g toString() { if (nextt()) { return a.toString() + \" \" + nextS; } else {; } }", "n_tokens": 78, "n_pass": [109, 17, 11]}
{"time": "2021-02-20 17:47:07.867142", "score": "0.9768", "loss": "0.1146", "code": "g toString() { if (ntt()) { return a.toString() + \" \" + nextS; } else {; } }", "n_tokens": 76, "n_pass": [170, 19, 12]}
{"time": "2021-02-20 17:47:09.160206", "score": "0.9247", "loss": "0.4034", "code": "g toString() { if (n()) { return a.toString() + \" \" + nextS; } else {; } }", "n_tokens": 74, "n_pass": [171, 20, 13]}
{"time": "2021-02-20 17:47:10.452219", "score": "0.891", "loss": "0.4984", "code": "g toString() { if (n) { return a.toString() + \" \" + nextS; } else {; } }", "n_tokens": 72, "n_pass": [172, 21, 14]}
{"time": "2021-02-20 17:47:13.401260", "score": "0.473", "loss": "2.8125", "code": "g toString() { if (n) { return a.toSng() + \" \" + nextS; } else {; } }", "n_tokens": 69, "n_pass": [180, 23, 15]}
{"time": "2021-02-20 17:47:14.744894", "score": "0.461", "loss": "3.0299", "code": "g toString() { if (n) { return a.toSng() + \" \" +xtS; } else {; } }", "n_tokens": 66, "n_pass": [185, 24, 16]}
{"time": "2021-02-20 17:47:22.106540", "score": "0.6284", "loss": "2.0737", "code": "g toString() { if (n) { return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 64, "n_pass": [270, 26, 17]}
{"time": "2021-02-20 17:47:27.003993", "score": "0.6284", "loss": "2.0737", "code": "g toString(){ if (n) { return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 63, "n_pass": [291, 27, 18]}
{"time": "2021-02-20 17:47:28.296777", "score": "0.6284", "loss": "2.0737", "code": "g toString(){if (n) { return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 62, "n_pass": [293, 28, 19]}
{"time": "2021-02-20 17:47:29.589875", "score": "0.6284", "loss": "2.0737", "code": "g toString(){if(n) { return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 61, "n_pass": [296, 29, 20]}
{"time": "2021-02-20 17:47:30.917080", "score": "0.6284", "loss": "2.0737", "code": "g toString(){if(n){ return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 60, "n_pass": [300, 30, 21]}
{"time": "2021-02-20 17:47:32.230033", "score": "0.6284", "loss": "2.0737", "code": "g toString(){if(n){return a.toSng() + \" \" +S; } else {; } }", "n_tokens": 59, "n_pass": [302, 31, 22]}
{"time": "2021-02-20 17:47:33.978690", "score": "0.5384", "loss": "3.0169", "code": "g toString(){if(n){return atoSng() + \" \" +S; } else {; } }", "n_tokens": 58, "n_pass": [311, 32, 23]}
{"time": "2021-02-20 17:47:39.232886", "score": "0.4807", "loss": "3.581", "code": "g toString(){if(n){return atoSg() + \" \" +S; } else {; } }", "n_tokens": 57, "n_pass": [315, 36, 24]}
{"time": "2021-02-20 17:47:40.525793", "score": "0.6002", "loss": "1.8684", "code": "g toString(){if(n){return atoS() + \" \" +S; } else {; } }", "n_tokens": 56, "n_pass": [316, 37, 25]}
{"time": "2021-02-20 17:47:41.819781", "score": "0.6002", "loss": "1.8684", "code": "g toString(){if(n){return atoS()+ \" \" +S; } else {; } }", "n_tokens": 55, "n_pass": [319, 38, 26]}
{"time": "2021-02-20 17:47:47.075775", "score": "0.7115", "loss": "1.706", "code": "g toString(){if(n){return toS()+ \" \" +S; } else {; } }", "n_tokens": 54, "n_pass": [358, 39, 27]}
{"time": "2021-02-20 17:47:48.393817", "score": "0.7061", "loss": "1.8562", "code": "g toString(){if(n){return oS()+ \" \" +S; } else {; } }", "n_tokens": 53, "n_pass": [359, 40, 28]}
{"time": "2021-02-20 17:47:49.702003", "score": "0.6689", "loss": "2.1091", "code": "g toString(){if(n){return S()+ \" \" +S; } else {; } }", "n_tokens": 52, "n_pass": [360, 41, 29]}
{"time": "2021-02-20 17:47:58.246168", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\" +S; } else {; } }", "n_tokens": 51, "n_pass": [424, 42, 30]}
{"time": "2021-02-20 17:47:59.539788", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S; } else {; } }", "n_tokens": 50, "n_pass": [425, 43, 31]}
{"time": "2021-02-20 17:48:00.853122", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;} else {; } }", "n_tokens": 49, "n_pass": [429, 44, 32]}
{"time": "2021-02-20 17:48:02.155960", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;}else {; } }", "n_tokens": 48, "n_pass": [431, 45, 33]}
{"time": "2021-02-20 17:48:03.451672", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;}else{; } }", "n_tokens": 47, "n_pass": [436, 46, 34]}
{"time": "2021-02-20 17:48:04.748644", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;}else{ } }", "n_tokens": 46, "n_pass": [438, 47, 35]}
{"time": "2021-02-20 17:48:06.051594", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;}else{} }", "n_tokens": 45, "n_pass": [439, 48, 36]}
{"time": "2021-02-20 17:48:07.345544", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+ \"\"+S;}else{}}", "n_tokens": 44, "n_pass": [441, 49, 37]}
{"time": "2021-02-20 17:48:12.599637", "score": "0.6895", "loss": "2.0356", "code": "g toString(){if(n){return S()+\"\"+S;}else{}}", "n_tokens": 43, "n_pass": [473, 50, 38]}

Minimal simplified code:
g toString(){if(n){return S()+""+S;}else{}}

