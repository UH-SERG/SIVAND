
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/jdk1.3/org/bouncycastle/jce/cert/CertPathBuilderException_printStackTrace.java
method_name = printStackTrace
method_body = public void printStackTrace(PrintWriter pw) { super.printStackTrace(pw); if (getCause() != null) { getCause().printStackTrace(pw); } }
predict, score, loss = printStackTrace, 0.9931946396827698, 0.02298324927687645

Trace of simplified code(s):
{"time": "2021-02-19 21:43:19.390805", "score": "0.9932", "loss": "0.023", "code": "public void printStackTrace(PrintWriter pw) { super.printStackTrace(pw); if (getCause() != null) { getCause().printStackTrace(pw); } }", "n_tokens": 134, "n_pass": [1, 1, 1]}
{"time": "2021-02-19 21:43:21.106479", "score": "0.8275", "loss": "0.7546", "code": "public void printStackTrace(PrintWriter pw) { supe(pw); if (getCause() != null) { getCause().printStackTrace(pw); } }", "n_tokens": 117, "n_pass": [23, 2, 2]}
{"time": "2021-02-19 21:43:24.141228", "score": "0.9299", "loss": "0.268", "code": "public void printStackTrace(PrintWriter pw) { supe(pw); if (getC= null) { getCause().printStackTrace(pw); } }", "n_tokens": 109, "n_pass": [47, 4, 3]}
{"time": "2021-02-19 21:43:28.115616", "score": "0.9074", "loss": "0.3895", "code": "oid printStackTrace(PrintWriter pw) { supe(pw); if (getC= null) { getCause().printStackTrace(pw); } }", "n_tokens": 101, "n_pass": [53, 7, 4]}
{"time": "2021-02-19 21:43:34.350624", "score": "0.9259", "loss": "0.3022", "code": "oid printStackTrace(tWriter pw) { supe(pw); if (getC= null) { getCause().printStackTrace(pw); } }", "n_tokens": 97, "n_pass": [95, 10, 5]}
{"time": "2021-02-19 21:43:35.677375", "score": "0.8975", "loss": "0.4531", "code": "oid printStackTrace(ter pw) { supe(pw); if (getC= null) { getCause().printStackTrace(pw); } }", "n_tokens": 93, "n_pass": [96, 11, 6]}
{"time": "2021-02-19 21:43:37.007026", "score": "0.7833", "loss": "1.1201", "code": "oid printStackTrace(ter pw) { supe(pw); if (getCll) { getCause().printStackTrace(pw); } }", "n_tokens": 89, "n_pass": [104, 12, 7]}
{"time": "2021-02-19 21:43:38.376019", "score": "0.7891", "loss": "1.07", "code": "oid printStackTrace(ter pw) { supe(pw); if (getCll) { gese().printStackTrace(pw); } }", "n_tokens": 85, "n_pass": [107, 13, 8]}
{"time": "2021-02-19 21:43:39.691552", "score": "0.7316", "loss": "1.4255", "code": "oid printStackTrace(ter pw) { supe(pw); if (getCll) { ge.printStackTrace(pw); } }", "n_tokens": 81, "n_pass": [108, 14, 9]}
{"time": "2021-02-19 21:43:58.764142", "score": "0.7322", "loss": "1.5522", "code": "d printStackTrace(ter pw) { supe(pw); if (getCll) { ge.printStackTrace(pw); } }", "n_tokens": 79, "n_pass": [176, 27, 10]}
{"time": "2021-02-19 21:44:02.677428", "score": "0.7925", "loss": "1.2273", "code": "d printStackTrace(r pw) { supe(pw); if (getCll) { ge.printStackTrace(pw); } }", "n_tokens": 77, "n_pass": [185, 28, 11]}
{"time": "2021-02-19 21:44:05.332850", "score": "0.7729", "loss": "1.4815", "code": "d printStackTrace(r pw) { su(pw); if (getCll) { ge.printStackTrace(pw); } }", "n_tokens": 75, "n_pass": [191, 30, 12]}
{"time": "2021-02-19 21:44:08.009021", "score": "0.7424", "loss": "1.6782", "code": "d printStackTrace(r pw) { su(pw); if (gell) { ge.printStackTrace(pw); } }", "n_tokens": 73, "n_pass": [198, 32, 13]}
{"time": "2021-02-19 21:44:09.316601", "score": "0.7613", "loss": "1.5163", "code": "d printStackTrace(r pw) { su(pw); if (ge) { ge.printStackTrace(pw); } }", "n_tokens": 71, "n_pass": [199, 33, 14]}
{"time": "2021-02-19 21:44:27.214400", "score": "0.7613", "loss": "1.5163", "code": "d printStackTrace(r pw) { su(pw); if (ge){ ge.printStackTrace(pw); } }", "n_tokens": 70, "n_pass": [300, 42, 15]}
{"time": "2021-02-19 21:44:28.550993", "score": "0.7613", "loss": "1.5163", "code": "d printStackTrace(r pw) { su(pw); if (ge){ge.printStackTrace(pw); } }", "n_tokens": 69, "n_pass": [302, 43, 16]}
{"time": "2021-02-19 21:44:29.867813", "score": "0.7876", "loss": "1.3382", "code": "d printStackTrace(r pw) { su(pw); if (ge){e.printStackTrace(pw); } }", "n_tokens": 68, "n_pass": [303, 44, 17]}
{"time": "2021-02-19 21:44:51.063735", "score": "0.719", "loss": "2.1695", "code": "d printStackTrace(r pw) { su(pw); if (ge){e.printStackTrace(); } }", "n_tokens": 66, "n_pass": [321, 60, 18]}
{"time": "2021-02-19 21:44:58.642624", "score": "0.6371", "loss": "2.8697", "code": "d printStackTrace(r w) { su(pw); if (ge){e.printStackTrace(); } }", "n_tokens": 65, "n_pass": [345, 61, 19]}
{"time": "2021-02-19 21:44:59.954754", "score": "0.6371", "loss": "2.8697", "code": "d printStackTrace(r w){ su(pw); if (ge){e.printStackTrace(); } }", "n_tokens": 64, "n_pass": [348, 62, 20]}
{"time": "2021-02-19 21:45:01.266607", "score": "0.6371", "loss": "2.8697", "code": "d printStackTrace(r w){su(pw); if (ge){e.printStackTrace(); } }", "n_tokens": 63, "n_pass": [350, 63, 21]}
{"time": "2021-02-19 21:45:03.889969", "score": "0.614", "loss": "2.9326", "code": "d printStackTrace(r w){s(pw); if (ge){e.printStackTrace(); } }", "n_tokens": 62, "n_pass": [352, 65, 22]}
{"time": "2021-02-19 21:45:06.546880", "score": "0.6733", "loss": "2.7205", "code": "d printStackTrace(r w){s(p); if (ge){e.printStackTrace(); } }", "n_tokens": 61, "n_pass": [355, 67, 23]}
{"time": "2021-02-19 21:45:07.883561", "score": "0.6733", "loss": "2.7205", "code": "d printStackTrace(r w){s(p);if (ge){e.printStackTrace(); } }", "n_tokens": 60, "n_pass": [358, 68, 24]}
{"time": "2021-02-19 21:45:09.206452", "score": "0.6733", "loss": "2.7205", "code": "d printStackTrace(r w){s(p);if(ge){e.printStackTrace(); } }", "n_tokens": 59, "n_pass": [361, 69, 25]}
{"time": "2021-02-19 21:45:40.563572", "score": "0.7902", "loss": "1.6811", "code": "d printStackTrace(r w){s();if(ge){e.printStackTrace(); } }", "n_tokens": 58, "n_pass": [412, 88, 26]}
{"time": "2021-02-19 21:45:41.906535", "score": "0.7781", "loss": "1.7472", "code": "d printStackTrace(r w){s();if(e){e.printStackTrace(); } }", "n_tokens": 57, "n_pass": [418, 89, 27]}
{"time": "2021-02-19 21:46:11.727894", "score": "0.7781", "loss": "1.7472", "code": "d printStackTrace(r w){s();if(e){e.printStackTrace();} }", "n_tokens": 56, "n_pass": [484, 106, 28]}
{"time": "2021-02-19 21:46:13.062193", "score": "0.7781", "loss": "1.7472", "code": "d printStackTrace(r w){s();if(e){e.printStackTrace();}}", "n_tokens": 55, "n_pass": [485, 107, 29]}

Minimal simplified code:
d printStackTrace(r w){s();if(e){e.printStackTrace();}}

