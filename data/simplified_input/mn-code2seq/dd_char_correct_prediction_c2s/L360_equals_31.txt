
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/vladmihalcea__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/book/hpjp/hibernate/association/UnidirectionalOneToManyJoinColumnSetTest_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; PostComment comment = (PostComment) o; return Objects.equals(slug, comment.slug); }
predict, score, loss = equals, 0.996124804019928, 0.004516532178968191

Trace of simplified code(s):
{"time": "2021-02-20 07:46:28.889808", "score": "0.9961", "loss": "0.0045", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; PostComment comment = (PostComment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 214, "n_pass": [1, 1, 1]}
{"time": "2021-02-20 07:46:30.218613", "score": "0.9671", "loss": "0.044", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.gmment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 160, "n_pass": [10, 2, 2]}
{"time": "2021-02-20 07:46:32.293473", "score": "0.959", "loss": "0.0569", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o =mment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 133, "n_pass": [25, 3, 3]}
{"time": "2021-02-20 07:46:33.974659", "score": "0.4239", "loss": "1.044", "code": "@Override public boolean equals(Object o) { if (thismment) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 106, "n_pass": [30, 4, 4]}
{"time": "2021-02-20 07:46:37.333574", "score": "0.6239", "loss": "0.5525", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(slug, comment.slug); }", "n_tokens": 99, "n_pass": [67, 6, 5]}
{"time": "2021-02-20 07:46:41.296147", "score": "0.6051", "loss": "0.6153", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(smment.slug); }", "n_tokens": 92, "n_pass": [72, 9, 6]}
{"time": "2021-02-20 07:46:42.591208", "score": "0.7591", "loss": "0.3903", "code": "@Override public boolean equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 85, "n_pass": [73, 10, 7]}
{"time": "2021-02-20 07:46:43.883826", "score": "0.6121", "loss": "0.8204", "code": "@Overrblic boolean equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 79, "n_pass": [76, 11, 8]}
{"time": "2021-02-20 07:46:49.812056", "score": "0.6121", "loss": "0.8204", "code": "@Overrc boolean equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 76, "n_pass": [113, 15, 9]}
{"time": "2021-02-20 07:46:52.432034", "score": "0.2675", "loss": "2.341", "code": "@Overrc bool equals(Object o) { if (th) o; return Objects.equals(slug); }", "n_tokens": 73, "n_pass": [115, 17, 10]}
{"time": "2021-02-20 07:46:55.749478", "score": "0.3214", "loss": "2.3453", "code": "@Overrc bool equals(Object o) { if (th) return Objects.equals(slug); }", "n_tokens": 70, "n_pass": [125, 19, 11]}
{"time": "2021-02-20 07:46:58.389538", "score": "0.3824", "loss": "1.96", "code": "@Overrc bool equals(Object o) { if (th) return Obj.equals(slug); }", "n_tokens": 66, "n_pass": [129, 21, 12]}
{"time": "2021-02-20 07:47:01.030017", "score": "0.2188", "loss": "2.6542", "code": "@Overrc bool equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 62, "n_pass": [132, 23, 13]}
{"time": "2021-02-20 07:47:02.322271", "score": "0.2415", "loss": "2.497", "code": "@Ovc bool equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 59, "n_pass": [135, 24, 14]}
{"time": "2021-02-20 07:47:09.311193", "score": "0.2567", "loss": "2.4843", "code": "@Oc bool equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 58, "n_pass": [190, 28, 15]}
{"time": "2021-02-20 07:47:10.610697", "score": "0.4583", "loss": "1.4286", "code": "@O bool equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 57, "n_pass": [191, 29, 16]}
{"time": "2021-02-20 07:47:12.287785", "score": "0.3471", "loss": "1.7925", "code": "@O ool equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 56, "n_pass": [193, 30, 17]}
{"time": "2021-02-20 07:47:13.676369", "score": "0.1905", "loss": "2.4477", "code": "@O ol equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 55, "n_pass": [194, 31, 18]}
{"time": "2021-02-20 07:47:14.972781", "score": "0.2293", "loss": "2.1856", "code": "@O l equals(Object o) { if (th) return Obj.equals(); }", "n_tokens": 54, "n_pass": [195, 32, 19]}
{"time": "2021-02-20 07:47:37.168675", "score": "0.3282", "loss": "1.7404", "code": "@O l equals(Objct o) { if (th) return Obj.equals(); }", "n_tokens": 53, "n_pass": [280, 44, 20]}
{"time": "2021-02-20 07:47:41.077413", "score": "0.3282", "loss": "1.7404", "code": "@O l equals(Objct o){ if (th) return Obj.equals(); }", "n_tokens": 52, "n_pass": [286, 47, 21]}
{"time": "2021-02-20 07:47:42.400711", "score": "0.3282", "loss": "1.7404", "code": "@O l equals(Objct o){if (th) return Obj.equals(); }", "n_tokens": 51, "n_pass": [288, 48, 22]}
{"time": "2021-02-20 07:47:43.715779", "score": "0.3282", "loss": "1.7404", "code": "@O l equals(Objct o){if(th) return Obj.equals(); }", "n_tokens": 50, "n_pass": [291, 49, 23]}
{"time": "2021-02-20 07:47:45.012434", "score": "0.4117", "loss": "1.4663", "code": "@O l equals(Objct o){if(h) return Obj.equals(); }", "n_tokens": 49, "n_pass": [293, 50, 24]}
{"time": "2021-02-20 07:47:46.333817", "score": "0.4117", "loss": "1.4663", "code": "@O l equals(Objct o){if(h)return Obj.equals(); }", "n_tokens": 48, "n_pass": [296, 51, 25]}
{"time": "2021-02-20 07:47:48.956888", "score": "0.3281", "loss": "1.7217", "code": "@O l equals(Objct o){if(h)return bj.equals(); }", "n_tokens": 47, "n_pass": [304, 53, 26]}
{"time": "2021-02-20 07:47:51.550473", "score": "0.2787", "loss": "1.9328", "code": "@O l equals(Objct o){if(h)return b.equals(); }", "n_tokens": 46, "n_pass": [306, 55, 27]}
{"time": "2021-02-20 07:48:02.016169", "score": "0.2787", "loss": "1.9328", "code": "@O l equals(Objct o){if(h)return b.equals();}", "n_tokens": 45, "n_pass": [317, 63, 28]}

Minimal simplified code:
@O l equals(Objct o){if(h)return b.equals();}

