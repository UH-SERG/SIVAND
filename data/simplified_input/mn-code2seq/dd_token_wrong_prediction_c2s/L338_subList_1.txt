
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/InstanceList_subList.java
method_name = subList
method_body = public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException("proportion must by <= 1.0"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportion *= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }
predict, score, loss = get, 0.22104233503341675, 12.708821296691895

Trace of simplified code(s):
{"time": "2021-02-23 19:50:08.104135", "score": "0.287", "loss": "12.5811", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"proportion must by <= 1.0\"); InstanceList other = (InstanceList) clone(); other.shuffle(new java.util.Random()); proportion *= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 132, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:50:10.067949", "score": "0.2184", "loss": "10.5742", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"proportion must by <= 1.0\"); InstanceList other = (InstanceList) clone(); other*= other.size(); for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 115, "n_pass": [24, 2, 2]}
{"time": "2021-02-23 19:50:12.002803", "score": "0.6356", "loss": "11.1549", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"proportion must by <= 1.0\"); InstanceList other = (InstanceList) clone(); other; for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 107, "n_pass": [46, 3, 3]}
{"time": "2021-02-23 19:50:13.941481", "score": "0.636", "loss": "10.9107", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\" 1.0\"); InstanceList other = (InstanceList) clone(); other; for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 99, "n_pass": [56, 4, 4]}
{"time": "2021-02-23 19:50:15.878698", "score": "0.6123", "loss": "10.6404", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"\"); InstanceList other = (InstanceList) clone(); other; for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 95, "n_pass": [93, 5, 5]}
{"time": "2021-02-23 19:50:17.794657", "score": "0.6333", "loss": "10.313", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"\"); InstanceList other = (InstanceList); other; for (int i = 0; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 91, "n_pass": [96, 6, 6]}
{"time": "2021-02-23 19:50:19.722377", "score": "0.6702", "loss": "10.1804", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"\"); InstanceList other = (InstanceList); other; for (int i; i < proportion; i++) other.add(get(i)); return other; }", "n_tokens": 87, "n_pass": [100, 7, 7]}
{"time": "2021-02-23 19:50:21.632767", "score": "0.6589", "loss": "11.0582", "code": "public InstanceList subList(double proportion) { if (proportion > 1.0) throw new IllegalArgumentException(\"\"); InstanceList other = (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 83, "n_pass": [103, 8, 8]}
{"time": "2021-02-23 19:50:24.006054", "score": "0.7291", "loss": "11.0985", "code": "public InstanceList subList(double proportion) { if (1.0) throw new IllegalArgumentException(\"\"); InstanceList other = (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 79, "n_pass": [112, 9, 9]}
{"time": "2021-02-23 19:50:25.934371", "score": "0.714", "loss": "11.0241", "code": "public InstanceList subList(double proportion) { if (1.0) IllegalArgumentException(\"\"); InstanceList other = (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 75, "n_pass": [114, 10, 10]}
{"time": "2021-02-23 19:50:29.632718", "score": "0.8181", "loss": "11.3818", "code": "public InstanceList subList(double proportion) { if (1.0)(\"\"); InstanceList other = (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 73, "n_pass": [169, 11, 11]}
{"time": "2021-02-23 19:50:31.501373", "score": "0.7175", "loss": "12.8345", "code": "public InstanceList subList(double proportion) { if (1.0)(\"\"); other = (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 71, "n_pass": [172, 12, 12]}
{"time": "2021-02-23 19:50:33.385627", "score": "0.6462", "loss": "12.2095", "code": "public InstanceList subList(double proportion) { if (1.0)(\"\"); other (InstanceList); other; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 69, "n_pass": [174, 13, 13]}
{"time": "2021-02-23 19:50:35.242142", "score": "0.6464", "loss": "11.6592", "code": "public InstanceList subList(double proportion) { if (1.0)(\"\"); other (InstanceList);; for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 67, "n_pass": [177, 14, 14]}
{"time": "2021-02-23 19:50:37.114111", "score": "0.623", "loss": "11.3867", "code": "public InstanceList subList(double proportion) { if (1.0)(\"\"); other (InstanceList);for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 65, "n_pass": [178, 15, 15]}
{"time": "2021-02-23 19:50:42.817882", "score": "0.623", "loss": "11.3867", "code": "InstanceList subList(double proportion) { if (1.0)(\"\"); other (InstanceList);for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 63, "n_pass": [194, 18, 16]}
{"time": "2021-02-23 19:50:45.219744", "score": "0.5691", "loss": "11.4668", "code": "InstanceList subList(double proportion) { if (0)(\"\"); other (InstanceList);for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 61, "n_pass": [202, 19, 17]}
{"time": "2021-02-23 19:50:47.099436", "score": "0.8233", "loss": "10.7077", "code": "InstanceList subList(double proportion) { if (0)(\"\"); (InstanceList);for (int i; i < proportion;) other.add(get(i)); return other; }", "n_tokens": 59, "n_pass": [207, 20, 18]}
{"time": "2021-02-23 19:50:48.964399", "score": "0.565", "loss": "9.978", "code": "InstanceList subList(double proportion) { if (0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i)); return other; }", "n_tokens": 57, "n_pass": [218, 21, 19]}
{"time": "2021-02-23 19:51:06.427280", "score": "0.565", "loss": "9.978", "code": "InstanceList subList(double proportion) { if (0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i));return other; }", "n_tokens": 56, "n_pass": [308, 26, 20]}
{"time": "2021-02-23 19:51:08.320489", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion) { if (0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i));other; }", "n_tokens": 54, "n_pass": [309, 27, 21]}
{"time": "2021-02-23 19:51:13.429433", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion){ if (0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i));other; }", "n_tokens": 53, "n_pass": [320, 29, 22]}
{"time": "2021-02-23 19:51:15.314011", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion){if (0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i));other; }", "n_tokens": 52, "n_pass": [322, 30, 23]}
{"time": "2021-02-23 19:51:17.162402", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion){if(0)(\"\"); (InstanceList);for (int i; i < proportion;) add(get(i));other; }", "n_tokens": 51, "n_pass": [324, 31, 24]}
{"time": "2021-02-23 19:51:19.043787", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for (int i; i < proportion;) add(get(i));other; }", "n_tokens": 50, "n_pass": [333, 32, 25]}
{"time": "2021-02-23 19:51:20.934613", "score": "0.7018", "loss": "9.7463", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(int i; i < proportion;) add(get(i));other; }", "n_tokens": 49, "n_pass": [339, 33, 26]}
{"time": "2021-02-23 19:51:22.790609", "score": "0.7098", "loss": "9.8161", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for( i; i < proportion;) add(get(i));other; }", "n_tokens": 48, "n_pass": [341, 34, 27]}
{"time": "2021-02-23 19:51:24.695196", "score": "0.7098", "loss": "9.8161", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(i; i < proportion;) add(get(i));other; }", "n_tokens": 47, "n_pass": [342, 35, 28]}
{"time": "2021-02-23 19:51:26.557731", "score": "0.7713", "loss": "10.5676", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(; i < proportion;) add(get(i));other; }", "n_tokens": 46, "n_pass": [343, 36, 29]}
{"time": "2021-02-23 19:51:28.477776", "score": "0.7713", "loss": "10.5676", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i < proportion;) add(get(i));other; }", "n_tokens": 45, "n_pass": [345, 37, 30]}
{"time": "2021-02-23 19:51:30.352049", "score": "0.7713", "loss": "10.5676", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i< proportion;) add(get(i));other; }", "n_tokens": 44, "n_pass": [347, 38, 31]}
{"time": "2021-02-23 19:51:32.215125", "score": "0.7713", "loss": "10.5676", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i<proportion;) add(get(i));other; }", "n_tokens": 43, "n_pass": [349, 39, 32]}
{"time": "2021-02-23 19:51:34.095022", "score": "0.7713", "loss": "10.5676", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i<proportion;)add(get(i));other; }", "n_tokens": 42, "n_pass": [353, 40, 33]}
{"time": "2021-02-23 19:51:44.848702", "score": "0.8084", "loss": "9.7419", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;iproportion;)add(get(i));other; }", "n_tokens": 41, "n_pass": [390, 45, 34]}
{"time": "2021-02-23 19:51:46.707508", "score": "0.8014", "loss": "9.7226", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i;)add(get(i));other; }", "n_tokens": 40, "n_pass": [391, 46, 35]}
{"time": "2021-02-23 19:52:01.877330", "score": "0.8014", "loss": "9.7226", "code": "InstanceList subList(double proportion){if(0)(\"\");(InstanceList);for(;i;)add(get(i));other;}", "n_tokens": 39, "n_pass": [436, 53, 36]}

Minimal simplified code:
InstanceList subList(double proportion){if(0)("");(InstanceList);for(;i;)add(get(i));other;}

