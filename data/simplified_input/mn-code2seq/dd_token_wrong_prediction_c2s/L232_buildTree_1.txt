
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rover12421__ShakaApktool/shaka/smali/generated/main/antlr/org/jf/smali/smaliParser_buildTree.java
method_name = buildTree
method_body = protected CommonTree buildTree(int type, String text, List<CommonTree> children) { CommonTree root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }
predict, score, loss = createTree, 0.49346673488616943, 3.432612180709839

Trace of simplified code(s):
{"time": "2021-02-24 10:00:39.790393", "score": "0.4935", "loss": "3.4326", "code": "protected CommonTree buildTree(int type, String text, List<CommonTree> children) { CommonTree root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 78, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 10:00:42.196258", "score": "0.5232", "loss": "3.2628", "code": "protected CommonTree buildTree(int text, List<CommonTree> children) { CommonTree root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 73, "n_pass": [46, 2, 2]}
{"time": "2021-02-24 10:00:46.502121", "score": "0.4287", "loss": "3.748", "code": "protected CommonTree buildTree(int text, List<CommonTree> children) { root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 71, "n_pass": [98, 4, 3]}
{"time": "2021-02-24 10:00:52.275940", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text, List<CommonTree> children) { root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 69, "n_pass": [118, 7, 4]}
{"time": "2021-02-24 10:01:06.406256", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree> children) { root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 68, "n_pass": [211, 10, 5]}
{"time": "2021-02-24 10:01:08.307861", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree>children) { root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 67, "n_pass": [215, 11, 6]}
{"time": "2021-02-24 10:01:10.183388", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree>children){ root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 66, "n_pass": [218, 12, 7]}
{"time": "2021-02-24 10:01:12.048963", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree>children){root = new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 65, "n_pass": [220, 13, 8]}
{"time": "2021-02-24 10:01:13.940904", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree>children){root= new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 64, "n_pass": [222, 14, 9]}
{"time": "2021-02-24 10:01:15.846448", "score": "0.4287", "loss": "3.748", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=new CommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 63, "n_pass": [224, 15, 10]}
{"time": "2021-02-24 10:01:19.610051", "score": "0.4132", "loss": "3.359", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type, text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 62, "n_pass": [226, 17, 11]}
{"time": "2021-02-24 10:01:25.255155", "score": "0.4132", "loss": "3.359", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type,text)); for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 61, "n_pass": [235, 20, 12]}
{"time": "2021-02-24 10:01:27.172310", "score": "0.4132", "loss": "3.359", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type,text));for (CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 60, "n_pass": [240, 21, 13]}
{"time": "2021-02-24 10:01:29.070122", "score": "0.4132", "loss": "3.359", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type,text));for(CommonTree child : children) { root.addChild(child); } return root; }", "n_tokens": 59, "n_pass": [242, 22, 14]}
{"time": "2021-02-24 10:01:32.902980", "score": "0.4348", "loss": "2.7606", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type,text));for(CommonTree child : children) { root.addChild(child); } root; }", "n_tokens": 57, "n_pass": [255, 24, 15]}
{"time": "2021-02-24 10:01:47.567410", "score": "0.4073", "loss": "3.1117", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type,text));for(CommonTree child : children) { addChild(child); } root; }", "n_tokens": 55, "n_pass": [296, 31, 16]}
{"time": "2021-02-24 10:02:00.394812", "score": "0.3828", "loss": "3.3228", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(typetext));for(CommonTree child : children) { addChild(child); } root; }", "n_tokens": 54, "n_pass": [328, 37, 17]}
{"time": "2021-02-24 10:02:02.258957", "score": "0.401", "loss": "3.223", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(new CommonToken(type));for(CommonTree child : children) { addChild(child); } root; }", "n_tokens": 53, "n_pass": [329, 38, 18]}
{"time": "2021-02-24 10:02:13.024198", "score": "0.3311", "loss": "3.6544", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child : children) { addChild(child); } root; }", "n_tokens": 52, "n_pass": [368, 43, 19]}
{"time": "2021-02-24 10:02:29.998924", "score": "0.3311", "loss": "3.6544", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child: children) { addChild(child); } root; }", "n_tokens": 51, "n_pass": [434, 49, 20]}
{"time": "2021-02-24 10:02:31.917227", "score": "0.3311", "loss": "3.6544", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children) { addChild(child); } root; }", "n_tokens": 50, "n_pass": [435, 50, 21]}
{"time": "2021-02-24 10:02:33.813677", "score": "0.3311", "loss": "3.6544", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){ addChild(child); } root; }", "n_tokens": 49, "n_pass": [438, 51, 22]}
{"time": "2021-02-24 10:02:35.714479", "score": "0.3311", "loss": "3.6544", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){addChild(child); } root; }", "n_tokens": 48, "n_pass": [440, 52, 23]}
{"time": "2021-02-24 10:02:39.470443", "score": "0.32", "loss": "3.7943", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){addChild(); } root; }", "n_tokens": 47, "n_pass": [443, 54, 24]}
{"time": "2021-02-24 10:02:41.350892", "score": "0.32", "loss": "3.7943", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){addChild();} root; }", "n_tokens": 46, "n_pass": [446, 55, 25]}
{"time": "2021-02-24 10:02:43.266666", "score": "0.32", "loss": "3.7943", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){addChild();}root; }", "n_tokens": 45, "n_pass": [448, 56, 26]}
{"time": "2021-02-24 10:02:47.023294", "score": "0.32", "loss": "3.7943", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken(type));for(CommonTree child:children){addChild();}root;}", "n_tokens": 44, "n_pass": [451, 58, 27]}
{"time": "2021-02-24 10:02:55.955189", "score": "0.3683", "loss": "3.7017", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(newCommonToken());for(CommonTree child:children){addChild();}root;}", "n_tokens": 43, "n_pass": [476, 62, 28]}
{"time": "2021-02-24 10:03:04.928971", "score": "0.4216", "loss": "3.2041", "code": "CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(CommonToken());for(CommonTree child:children){addChild();}root;}", "n_tokens": 42, "n_pass": [517, 66, 29]}

Minimal simplified code:
CommonTree buildTree(int text,List<CommonTree>children){root=newCommonTree(CommonToken());for(CommonTree child:children){addChild();}root;}

