
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/javaee__javamail/mail/src/test/java/com/sun/mail/imap/IMAPMessageTest_testSizeLarge.java
method_name = testSizeLarge
method_body = @Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }
predict, score, loss = getMessageSize, 0.8699818253517151, 15.348886489868164

Trace of simplified code(s):
{"time": "2021-02-24 09:57:00.184704", "score": "0.8518", "loss": "15.0376", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 155, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:57:06.180161", "score": "0.7606", "loss": "13.1665", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 150, "n_pass": [100, 4, 2]}
{"time": "2021-02-24 09:57:12.158908", "score": "0.7863", "loss": "13.2643", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  + 1, ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 145, "n_pass": [110, 7, 3]}
{"time": "2021-02-24 09:57:14.144654", "score": "0.8007", "loss": "13.8031", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 140, "n_pass": [111, 8, 4]}
{"time": "2021-02-24 09:57:16.113736", "score": "0.8104", "loss": "14.0462", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 135, "n_pass": [119, 9, 5]}
{"time": "2021-02-24 09:57:22.008882", "score": "0.71", "loss": "12.7406", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =Integer.MAX_VALUE + 1; } } }); }", "n_tokens": 130, "n_pass": [134, 12, 6]}
{"time": "2021-02-24 09:57:25.948905", "score": "0.7278", "loss": "12.965", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size = + 1; } } }); }", "n_tokens": 125, "n_pass": [148, 14, 7]}
{"time": "2021-02-24 09:57:32.739615", "score": "0.7187", "loss": "12.9009", "code": "@Test public void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =1; } } }); }", "n_tokens": 122, "n_pass": [228, 17, 8]}
{"time": "2021-02-24 09:57:36.675225", "score": "0.7187", "loss": "12.9009", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override public void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =1; } } }); }", "n_tokens": 120, "n_pass": [234, 19, 9]}
{"time": "2021-02-24 09:57:39.122187", "score": "0.7187", "loss": "12.9009", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ((IMAPMessage) m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =1; } } }); }", "n_tokens": 118, "n_pass": [246, 20, 10]}
{"time": "2021-02-24 09:57:50.717736", "score": "0.7141", "loss": "12.5587", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { size =1; } } }); }", "n_tokens": 115, "n_pass": [269, 26, 11]}
{"time": "2021-02-24 09:57:52.681534", "score": "0.7261", "loss": "12.639", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { 1; } } }); }", "n_tokens": 112, "n_pass": [279, 27, 12]}
{"time": "2021-02-24 09:57:54.625374", "score": "0.7311", "loss": "12.5026", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 109, "n_pass": [280, 28, 13]}
{"time": "2021-02-24 09:58:04.754071", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE, m.getSize()); assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 107, "n_pass": [310, 33, 14]}
{"time": "2021-02-24 09:58:29.044984", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize()); assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 106, "n_pass": [448, 40, 15]}
{"time": "2021-02-24 09:58:33.085726", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)  ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 105, "n_pass": [455, 42, 16]}
{"time": "2021-02-24 09:58:36.980592", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long) ( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 104, "n_pass": [461, 44, 17]}
{"time": "2021-02-24 09:58:38.914221", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)( m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 103, "n_pass": [462, 45, 18]}
{"time": "2021-02-24 09:58:40.878095", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge() { testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 102, "n_pass": [464, 46, 19]}
{"time": "2021-02-24 09:58:44.269178", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){ testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 101, "n_pass": [491, 47, 20]}
{"time": "2021-02-24 09:58:46.195207", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest() { @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 100, "n_pass": [493, 48, 21]}
{"time": "2021-02-24 09:58:48.140129", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){ @Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 99, "n_pass": [501, 49, 22]}
{"time": "2021-02-24 09:58:50.067087", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder) throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 98, "n_pass": [503, 50, 23]}
{"time": "2021-02-24 09:58:57.789114", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException { Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 97, "n_pass": [515, 54, 24]}
{"time": "2021-02-24 09:58:59.760272", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{ Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 96, "n_pass": [519, 55, 25]}
{"time": "2021-02-24 09:59:01.707351", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message .getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 95, "n_pass": [521, 56, 26]}
{"time": "2021-02-24 09:59:03.644459", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1); assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 94, "n_pass": [523, 57, 27]}
{"time": "2021-02-24 09:59:09.527629", "score": "0.7152", "loss": "12.9297", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m).getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 93, "n_pass": [530, 60, 28]}
{"time": "2021-02-24 09:59:35.922745", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong()); } }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 92, "n_pass": [642, 70, 29]}
{"time": "2021-02-24 09:59:37.830468", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());} }, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 91, "n_pass": [648, 71, 30]}
{"time": "2021-02-24 09:59:39.775601", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}}, new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 90, "n_pass": [650, 72, 31]}
{"time": "2021-02-24 09:59:41.719181", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage() { { { } } }); }", "n_tokens": 89, "n_pass": [653, 73, 32]}
{"time": "2021-02-24 09:59:43.673037", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){ { { } } }); }", "n_tokens": 88, "n_pass": [659, 74, 33]}
{"time": "2021-02-24 09:59:45.591071", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{ { } } }); }", "n_tokens": 87, "n_pass": [661, 75, 34]}
{"time": "2021-02-24 09:59:47.534382", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{ } } }); }", "n_tokens": 86, "n_pass": [663, 76, 35]}
{"time": "2021-02-24 09:59:49.495095", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{} } }); }", "n_tokens": 85, "n_pass": [665, 77, 36]}
{"time": "2021-02-24 09:59:51.444783", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}} }); }", "n_tokens": 84, "n_pass": [667, 78, 37]}
{"time": "2021-02-24 09:59:53.370045", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}}}); }", "n_tokens": 83, "n_pass": [669, 79, 38]}
{"time": "2021-02-24 09:59:55.299339", "score": "0.7002", "loss": "12.7402", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer.VALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}}});}", "n_tokens": 82, "n_pass": [673, 80, 39]}
{"time": "2021-02-24 10:00:08.400565", "score": "0.7356", "loss": "12.8791", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(IntegerVALUE,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}}});}", "n_tokens": 81, "n_pass": [717, 86, 40]}
{"time": "2021-02-24 10:00:10.348930", "score": "0.7417", "loss": "12.864", "code": "@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}}});}", "n_tokens": 80, "n_pass": [718, 87, 41]}

Minimal simplified code:
@Test void testSizeLarge(){testWithHandler(new IMAPTest(){@Override void test(Folder folder)throws MessagingException{Message.getMessage(1);assertEquals(Integer,m.getSize());assertEquals((long)(m)getSizeLong());}},new IMAPHandlerMessage(){{{}}});}

