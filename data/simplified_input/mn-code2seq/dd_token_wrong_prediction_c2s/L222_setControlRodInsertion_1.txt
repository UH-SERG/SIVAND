
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorControlRod_setControlRodInsertion.java
method_name = setControlRodInsertion
method_body = public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion || newInsertion == controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }
predict, score, loss = updateControlInsertion, 0.570248544216156, 11.348690032958984

Trace of simplified code(s):
{"time": "2021-02-24 01:19:04.921225", "score": "0.5702", "loss": "11.3487", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion || newInsertion == controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:19:07.308960", "score": "0.6135", "loss": "10.8387", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion) { return; } if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 96, "n_pass": [49, 2, 2]}
{"time": "2021-02-24 01:19:09.203208", "score": "0.5898", "loss": "11.4093", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { return; } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 90, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 01:19:13.019406", "score": "0.5898", "loss": "11.4093", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion > maxInsertion || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 87, "n_pass": [98, 5, 4]}
{"time": "2021-02-24 01:19:17.742082", "score": "0.6082", "loss": "11.023", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion  || newInsertion < minInsertion== controlRodInsertion)  if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 84, "n_pass": [116, 7, 5]}
{"time": "2021-02-24 01:19:19.642952", "score": "0.6327", "loss": "10.3319", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion  || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 81, "n_pass": [119, 8, 6]}
{"time": "2021-02-24 01:19:28.637264", "score": "0.6327", "loss": "10.3319", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion || newInsertion == controlRodInsertion)  if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 80, "n_pass": [196, 10, 7]}
{"time": "2021-02-24 01:19:30.567797", "score": "0.6327", "loss": "10.3319", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)  if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 79, "n_pass": [197, 11, 8]}
{"time": "2021-02-24 01:19:33.390023", "score": "0.6327", "loss": "10.3319", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math.max(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 77, "n_pass": [203, 12, 9]}
{"time": "2021-02-24 01:19:35.723413", "score": "0.5932", "loss": "11.1826", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertion, maxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 75, "n_pass": [216, 13, 10]}
{"time": "2021-02-24 01:19:39.518886", "score": "0.5935", "loss": "11.3097", "code": "public void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 73, "n_pass": [220, 15, 11]}
{"time": "2021-02-24 01:19:43.281166", "score": "0.5935", "loss": "11.3097", "code": " void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 72, "n_pass": [229, 17, 12]}
{"time": "2021-02-24 01:19:45.186174", "score": "0.5935", "loss": "11.3097", "code": "void setControlRodInsertion(short newInsertion) { if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 71, "n_pass": [230, 18, 13]}
{"time": "2021-02-24 01:19:47.964939", "score": "0.5935", "loss": "11.3097", "code": "void setControlRodInsertion(short newInsertion){ if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 70, "n_pass": [239, 19, 14]}
{"time": "2021-02-24 01:19:49.805592", "score": "0.5935", "loss": "11.3097", "code": "void setControlRodInsertion(short newInsertion){if (newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 69, "n_pass": [241, 20, 15]}
{"time": "2021-02-24 01:19:51.696025", "score": "0.5935", "loss": "11.3097", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math.min(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 68, "n_pass": [243, 21, 16]}
{"time": "2021-02-24 01:19:54.913023", "score": "0.5685", "loss": "11.801", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertionmaxInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 66, "n_pass": [264, 22, 17]}
{"time": "2021-02-24 01:20:07.408102", "score": "0.5881", "loss": "11.7387", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion), minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 65, "n_pass": [358, 24, 18]}
{"time": "2021-02-24 01:20:09.282653", "score": "0.5881", "loss": "11.7387", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion); this.sendControlRodUpdate(); }", "n_tokens": 64, "n_pass": [360, 25, 19]}
{"time": "2021-02-24 01:20:11.202237", "score": "0.5881", "loss": "11.7387", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate(); }", "n_tokens": 63, "n_pass": [364, 26, 20]}
{"time": "2021-02-24 01:20:14.962751", "score": "0.5881", "loss": "11.7387", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 62, "n_pass": [371, 28, 21]}
{"time": "2021-02-24 01:20:17.758782", "score": "0.5934", "loss": "11.2699", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion| newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 61, "n_pass": [385, 29, 22]}
{"time": "2021-02-24 01:20:19.649916", "score": "0.5934", "loss": "11.2699", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion == controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 60, "n_pass": [387, 30, 23]}
{"time": "2021-02-24 01:20:21.541940", "score": "0.5934", "loss": "11.2699", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion== controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 59, "n_pass": [389, 31, 24]}
{"time": "2021-02-24 01:20:24.319827", "score": "0.5934", "loss": "11.2699", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if (!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 58, "n_pass": [392, 32, 25]}
{"time": "2021-02-24 01:20:26.204317", "score": "0.5934", "loss": "11.2699", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(!isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 57, "n_pass": [396, 33, 26]}
{"time": "2021-02-24 01:20:28.062693", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()) { } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 56, "n_pass": [398, 34, 27]}
{"time": "2021-02-24 01:20:29.914569", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){ } this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 55, "n_pass": [403, 35, 28]}
{"time": "2021-02-24 01:20:31.811390", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){} this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 54, "n_pass": [405, 36, 29]}
{"time": "2021-02-24 01:20:33.700997", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion = (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 53, "n_pass": [407, 37, 30]}
{"time": "2021-02-24 01:20:37.462306", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion= (short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 52, "n_pass": [411, 39, 31]}
{"time": "2021-02-24 01:20:39.319950", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short) Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 51, "n_pass": [413, 40, 32]}
{"time": "2021-02-24 01:20:41.219075", "score": "0.5934", "loss": "10.898", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short)Math(Math(newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 50, "n_pass": [417, 41, 33]}
{"time": "2021-02-24 01:20:43.071285", "score": "0.5818", "loss": "10.5724", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short)Math((newInsertion),minInsertion);this.sendControlRodUpdate();}", "n_tokens": 49, "n_pass": [420, 42, 34]}
{"time": "2021-02-24 01:20:44.979494", "score": "0.6092", "loss": "10.8043", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short)Math((newInsertion)minInsertion);this.sendControlRodUpdate();}", "n_tokens": 48, "n_pass": [424, 43, 35]}
{"time": "2021-02-24 01:20:46.844810", "score": "0.5903", "loss": "10.8526", "code": "void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short)Math((newInsertion));this.sendControlRodUpdate();}", "n_tokens": 47, "n_pass": [425, 44, 36]}

Minimal simplified code:
void setControlRodInsertion(short newInsertion){if(newInsertion|newInsertion==controlRodInsertion)if(isConnected()){}this.controlRodInsertion=(short)Math((newInsertion));this.sendControlRodUpdate();}

