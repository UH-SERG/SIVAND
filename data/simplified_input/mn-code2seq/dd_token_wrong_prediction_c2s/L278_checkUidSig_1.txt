
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/pg/src/test/java/org/bouncycastle/openpgp/test/BcPGPKeyRingTest_checkUidSig.java
method_name = checkUidSig
method_body = private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig = (PGPSignature) sigit.next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail("Bad self-signature found for '" + uid + "'"); } } }
predict, score, loss = assertSignaturesNotFound, 0.32672178745269775, 20.348047256469727

Trace of simplified code(s):
{"time": "2021-02-23 22:37:53.511113", "score": "0.3267", "loss": "20.348", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig = (PGPSignature) sigit.next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad self-signature found for '\" + uid + \"'\"); } } }", "n_tokens": 119, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 22:37:55.458574", "score": "0.3327", "loss": "20.4088", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad self-signature found for '\" + uid + \"'\"); } } }", "n_tokens": 112, "n_pass": [52, 2, 2]}
{"time": "2021-02-23 22:37:57.435376", "score": "0.3377", "loss": "20.5287", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad found for '\" + uid + \"'\"); } } }", "n_tokens": 108, "n_pass": [105, 3, 3]}
{"time": "2021-02-23 22:37:59.325618", "score": "0.333", "loss": "20.17", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + uid + \"'\"); } } }", "n_tokens": 104, "n_pass": [106, 4, 4]}
{"time": "2021-02-23 22:38:01.243855", "score": "0.3065", "loss": "20.1544", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignature sig =next(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 100, "n_pass": [108, 5, 5]}
{"time": "2021-02-23 22:38:04.522528", "score": "0.2789", "loss": "19.8868", "code": "private void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 96, "n_pass": [127, 6, 6]}
{"time": "2021-02-23 22:38:16.776517", "score": "0.2789", "loss": "19.8868", "code": " void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 95, "n_pass": [228, 11, 7]}
{"time": "2021-02-23 22:38:18.663739", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk, String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 94, "n_pass": [229, 12, 8]}
{"time": "2021-02-23 22:38:47.332036", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid) throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 93, "n_pass": [369, 20, 9]}
{"time": "2021-02-23 22:38:49.225425", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception { Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 92, "n_pass": [373, 21, 10]}
{"time": "2021-02-23 22:38:51.161289", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{ Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 91, "n_pass": [377, 22, 11]}
{"time": "2021-02-23 22:38:53.085963", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature> sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 90, "n_pass": [379, 23, 12]}
{"time": "2021-02-23 22:38:55.416637", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit = pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 89, "n_pass": [384, 24, 13]}
{"time": "2021-02-23 22:38:57.334450", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit= pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 88, "n_pass": [386, 25, 14]}
{"time": "2021-02-23 22:38:59.209176", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid); while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 87, "n_pass": [388, 26, 15]}
{"time": "2021-02-23 22:39:04.907849", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while (sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 86, "n_pass": [396, 29, 16]}
{"time": "2021-02-23 22:39:06.798953", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()) { PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 85, "n_pass": [398, 30, 17]}
{"time": "2021-02-23 22:39:10.599902", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){ PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 84, "n_pass": [406, 32, 18]}
{"time": "2021-02-23 22:39:12.491415", "score": "0.2789", "loss": "19.8868", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignaturenext(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 83, "n_pass": [408, 33, 19]}
{"time": "2021-02-23 22:39:16.374169", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature(); if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 82, "n_pass": [410, 35, 20]}
{"time": "2021-02-23 22:39:18.254408", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if (!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 81, "n_pass": [414, 36, 21]}
{"time": "2021-02-23 22:39:20.157419", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig, pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 80, "n_pass": [416, 37, 22]}
{"time": "2021-02-23 22:39:23.997688", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk, uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 79, "n_pass": [423, 39, 23]}
{"time": "2021-02-23 22:39:25.938170", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)) { fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 78, "n_pass": [426, 40, 24]}
{"time": "2021-02-23 22:39:27.872895", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){ fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 77, "n_pass": [430, 41, 25]}
{"time": "2021-02-23 22:39:29.745707", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad '\" + \"'\"); } } }", "n_tokens": 76, "n_pass": [432, 42, 26]}
{"time": "2021-02-23 22:39:35.426984", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad'\" + \"'\"); } } }", "n_tokens": 75, "n_pass": [437, 45, 27]}
{"time": "2021-02-23 22:39:37.334748", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\" + \"'\"); } } }", "n_tokens": 74, "n_pass": [438, 46, 28]}
{"time": "2021-02-23 22:39:39.223690", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+ \"'\"); } } }", "n_tokens": 73, "n_pass": [440, 47, 29]}
{"time": "2021-02-23 22:39:41.159470", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+\"'\"); } } }", "n_tokens": 72, "n_pass": [442, 48, 30]}
{"time": "2021-02-23 22:39:43.076068", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+\"\"); } } }", "n_tokens": 71, "n_pass": [444, 49, 31]}
{"time": "2021-02-23 22:39:45.005204", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+\"\");} } }", "n_tokens": 70, "n_pass": [448, 50, 32]}
{"time": "2021-02-23 22:39:46.936238", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+\"\");}} }", "n_tokens": 69, "n_pass": [450, 51, 33]}
{"time": "2021-02-23 22:39:48.871825", "score": "0.2999", "loss": "20.3513", "code": "void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail(\"Bad\"+\"\");}}}", "n_tokens": 68, "n_pass": [452, 52, 34]}

Minimal simplified code:
void checkUidSig(PGPPublicKey pk,String uid)throws Exception{Iterator<PGPSignature>sigit=pk.getSignaturesForID(uid);while(sigit.hasNext()){PGPSignature();if(!isGoodUIDSignature(sig,pk,uid)){fail("Bad"+"");}}}

