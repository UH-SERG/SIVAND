
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/timols__jenkins-gitlab-merge-request-builder-plugin/src/main/java/org/jenkinsci/plugins/gitlab/GitlabWebhookCrumbExclusion_process.java
method_name = process
method_body = @Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith("/" + GitlabWebhooks.URLNAME + "/")) { chain.doFilter(request, response); return true; } return false; }
predict, score, loss = doFilter, 0.8312245011329651, 11.82319450378418

Trace of simplified code(s):
{"time": "2021-02-24 05:19:09.236960", "score": "0.8312", "loss": "11.8232", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:19:11.613969", "score": "0.7384", "loss": "10.521", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo = request.getPathInfo(); if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 101, "n_pass": [48, 2, 2]}
{"time": "2021-02-24 05:19:13.509674", "score": "0.7421", "loss": "10.832", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null && pathInfo.startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 94, "n_pass": [50, 3, 3]}
{"time": "2021-02-24 05:19:16.373497", "score": "0.7244", "loss": "10.08", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(request, response); return true; } return false; }", "n_tokens": 91, "n_pass": [98, 4, 4]}
{"time": "2021-02-24 05:19:18.338843", "score": "0.6139", "loss": "10.4953", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { String pathInfo ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 87, "n_pass": [106, 5, 5]}
{"time": "2021-02-24 05:19:22.613258", "score": "0.6287", "loss": "10.1674", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  {  ; if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 84, "n_pass": [120, 7, 6]}
{"time": "2021-02-24 05:19:24.529368", "score": "0.6287", "loss": "10.1674", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo != null &&startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 81, "n_pass": [121, 8, 7]}
{"time": "2021-02-24 05:19:26.388161", "score": "0.6739", "loss": "9.7668", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo != nullstartsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 78, "n_pass": [125, 9, 8]}
{"time": "2021-02-24 05:19:33.195448", "score": "0.6407", "loss": "10.261", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + GitlabWebhooks.URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 76, "n_pass": [195, 11, 9]}
{"time": "2021-02-24 05:19:35.065407", "score": "0.6096", "loss": "11.1104", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + URLNAME + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 74, "n_pass": [200, 12, 10]}
{"time": "2021-02-24 05:19:36.967820", "score": "0.6599", "loss": "10.9192", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 72, "n_pass": [201, 13, 11]}
{"time": "2021-02-24 05:19:38.903468", "score": "0.6737", "loss": "11.0846", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { chain.doFilter(); return true; } return false; }", "n_tokens": 70, "n_pass": [202, 14, 12]}
{"time": "2021-02-24 05:19:40.776334", "score": "0.6222", "loss": "11.8087", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter(); return true; } return false; }", "n_tokens": 68, "n_pass": [207, 15, 13]}
{"time": "2021-02-24 05:19:42.663013", "score": "0.695", "loss": "11.612", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter(); true; } return false; }", "n_tokens": 66, "n_pass": [210, 16, 14]}
{"time": "2021-02-24 05:19:44.527184", "score": "0.7127", "loss": "11.6117", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();; } return false; }", "n_tokens": 64, "n_pass": [211, 17, 15]}
{"time": "2021-02-24 05:19:46.437085", "score": "0.7127", "loss": "11.6117", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();} return false; }", "n_tokens": 62, "n_pass": [212, 18, 16]}
{"time": "2021-02-24 05:19:48.311970", "score": "0.7894", "loss": "12.1174", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();} false; }", "n_tokens": 60, "n_pass": [214, 19, 17]}
{"time": "2021-02-24 05:19:50.197357", "score": "0.8027", "loss": "11.57", "code": "@Override public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 58, "n_pass": [215, 20, 18]}
{"time": "2021-02-24 05:19:52.044662", "score": "0.7432", "loss": "10.4295", "code": "@Overridepublic boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 57, "n_pass": [219, 21, 19]}
{"time": "2021-02-24 05:19:53.908444", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 56, "n_pass": [220, 22, 20]}
{"time": "2021-02-24 05:19:57.110647", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain)  { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 55, "n_pass": [230, 23, 21]}
{"time": "2021-02-24 05:20:06.769864", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain) { if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 54, "n_pass": [310, 24, 22]}
{"time": "2021-02-24 05:20:08.632188", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){ if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 53, "n_pass": [311, 25, 23]}
{"time": "2021-02-24 05:20:10.490389", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if (pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 52, "n_pass": [313, 26, 24]}
{"time": "2021-02-24 05:20:12.403593", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo !=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 51, "n_pass": [315, 27, 25]}
{"time": "2021-02-24 05:20:14.258310", "score": "0.8027", "loss": "11.57", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo!=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 50, "n_pass": [318, 28, 26]}
{"time": "2021-02-24 05:20:16.147655", "score": "0.8359", "loss": "11.7327", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo=startsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 49, "n_pass": [319, 29, 27]}
{"time": "2021-02-24 05:20:17.978149", "score": "0.8205", "loss": "11.2414", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfostartsWith(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 48, "n_pass": [320, 30, 28]}
{"time": "2021-02-24 05:20:19.857461", "score": "0.7972", "loss": "10.7025", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"/\" + \"/\")) { doFilter();}  }", "n_tokens": 47, "n_pass": [321, 31, 29]}
{"time": "2021-02-24 05:20:21.680177", "score": "0.799", "loss": "10.6852", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\" + \"/\")) { doFilter();}  }", "n_tokens": 46, "n_pass": [324, 32, 30]}
{"time": "2021-02-24 05:20:23.610035", "score": "0.799", "loss": "10.6852", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+ \"/\")) { doFilter();}  }", "n_tokens": 45, "n_pass": [326, 33, 31]}
{"time": "2021-02-24 05:20:25.493203", "score": "0.799", "loss": "10.6852", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"/\")) { doFilter();}  }", "n_tokens": 44, "n_pass": [328, 34, 32]}
{"time": "2021-02-24 05:20:27.316902", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")) { doFilter();}  }", "n_tokens": 43, "n_pass": [330, 35, 33]}
{"time": "2021-02-24 05:20:29.192922", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){ doFilter();}  }", "n_tokens": 42, "n_pass": [334, 36, 34]}
{"time": "2021-02-24 05:20:31.010590", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}  }", "n_tokens": 41, "n_pass": [336, 37, 35]}
{"time": "2021-02-24 05:20:32.905919", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();} }", "n_tokens": 40, "n_pass": [342, 38, 36]}
{"time": "2021-02-24 05:20:34.793000", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response, FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}}", "n_tokens": 39, "n_pass": [343, 39, 37]}
{"time": "2021-02-24 05:20:37.939892", "score": "0.8032", "loss": "11.1801", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if(pathInfo(\"\"+\"\")){doFilter();}}", "n_tokens": 38, "n_pass": [360, 40, 38]}
{"time": "2021-02-24 05:20:39.801490", "score": "0.7912", "loss": "10.9964", "code": "@Override boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if((\"\"+\"\")){doFilter();}}", "n_tokens": 37, "n_pass": [368, 41, 39]}

Minimal simplified code:
@Override boolean process(HttpServletRequest request,HttpServletResponse response,FilterChain chain){if((""+"")){doFilter();}}

