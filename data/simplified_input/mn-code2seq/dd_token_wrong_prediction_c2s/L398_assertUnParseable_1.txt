
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/test/java/zemberek/morphology/old_analysis/WordAnalyzerTest_assertUnParseable.java
method_name = assertUnParseable
method_body = private void assertUnParseable(DynamicLexiconGraph graph, String... words) { WordAnalyzer parser = new WordAnalyzer(graph); for (String word : words) { List<WordAnalysis> results = parser.analyze(word); Assert.assertTrue("Unexpected parse for:" + word + " parse:" + results, results.size() == 0); } }
predict, score, loss = assertParse, 0.3144415318965912, 21.448223114013672

Trace of simplified code(s):
{"time": "2021-02-24 07:36:48.561849", "score": "0.3144", "loss": "21.4482", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String... words) { WordAnalyzer parser = new WordAnalyzer(graph); for (String word : words) { List<WordAnalysis> results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + word + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 112, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:36:54.318446", "score": "0.3349", "loss": "22.1403", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String... words) {  WordAnalyzer(graph); for (String word : words) { List<WordAnalysis> results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + word + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 105, "n_pass": [47, 4, 2]}
{"time": "2021-02-24 07:36:56.246860", "score": "0.3941", "loss": "21.5958", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String... words) { for (String word : words) { List<WordAnalysis> results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + word + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 98, "n_pass": [48, 5, 3]}
{"time": "2021-02-24 07:36:58.222669", "score": "0.3591", "loss": "21.7137", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String... words) { for (String word : words) { List results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + word + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 95, "n_pass": [97, 6, 4]}
{"time": "2021-02-24 07:37:04.022268", "score": "0.3386", "loss": "21.7496", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String... words) { for (String word : words) { List results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 91, "n_pass": [105, 9, 5]}
{"time": "2021-02-24 07:37:08.275580", "score": "0.3386", "loss": "21.7496", "code": "private void assertUnParseable(DynamicLexiconGraph graph, String words) { for (String word : words) { List results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 88, "n_pass": [117, 11, 6]}
{"time": "2021-02-24 07:37:18.557181", "score": "0.3386", "loss": "21.7496", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = parser.analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 87, "n_pass": [195, 15, 7]}
{"time": "2021-02-24 07:37:24.269163", "score": "0.3808", "loss": "21.9098", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); Assert.assertTrue(\"Unexpected parse for:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 85, "n_pass": [210, 18, 8]}
{"time": "2021-02-24 07:37:26.181848", "score": "0.3902", "loss": "21.6324", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse for:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 83, "n_pass": [214, 19, 9]}
{"time": "2021-02-24 07:37:30.021173", "score": "0.438", "loss": "20.866", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \" parse:\" + results, results.size() == 0); } }", "n_tokens": 81, "n_pass": [218, 21, 10]}
{"time": "2021-02-24 07:37:31.927318", "score": "0.3653", "loss": "21.1374", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" + results, results.size() == 0); } }", "n_tokens": 79, "n_pass": [222, 22, 11]}
{"time": "2021-02-24 07:37:33.853128", "score": "0.2449", "loss": "21.2168", "code": "private void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" + resultsresults.size() == 0); } }", "n_tokens": 77, "n_pass": [226, 23, 12]}
{"time": "2021-02-24 07:37:37.707036", "score": "0.2449", "loss": "21.2168", "code": " void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" + resultsresults.size() == 0); } }", "n_tokens": 76, "n_pass": [235, 25, 13]}
{"time": "2021-02-24 07:37:39.613355", "score": "0.2449", "loss": "21.2168", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" + resultsresults.size() == 0); } }", "n_tokens": 75, "n_pass": [236, 26, 14]}
{"time": "2021-02-24 07:37:48.196467", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size() == 0); } }", "n_tokens": 73, "n_pass": [270, 30, 15]}
{"time": "2021-02-24 07:38:10.395019", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()== 0); } }", "n_tokens": 72, "n_pass": [380, 36, 16]}
{"time": "2021-02-24 07:38:13.212310", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0); } }", "n_tokens": 71, "n_pass": [383, 37, 17]}
{"time": "2021-02-24 07:38:15.159180", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);} }", "n_tokens": 70, "n_pass": [387, 38, 18]}
{"time": "2021-02-24 07:38:17.124557", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words) { for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 69, "n_pass": [389, 39, 19]}
{"time": "2021-02-24 07:38:19.986289", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){ for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 68, "n_pass": [403, 40, 20]}
{"time": "2021-02-24 07:38:21.895959", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for (String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 67, "n_pass": [405, 41, 21]}
{"time": "2021-02-24 07:38:23.795041", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word : words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 66, "n_pass": [407, 42, 22]}
{"time": "2021-02-24 07:38:25.674056", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word: words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 65, "n_pass": [412, 43, 23]}
{"time": "2021-02-24 07:38:27.588209", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words) { List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 64, "n_pass": [414, 44, 24]}
{"time": "2021-02-24 07:38:29.504440", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){ List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 63, "n_pass": [417, 45, 25]}
{"time": "2021-02-24 07:38:31.384943", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results = analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 62, "n_pass": [419, 46, 26]}
{"time": "2021-02-24 07:38:38.994548", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results= analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 61, "n_pass": [423, 50, 27]}
{"time": "2021-02-24 07:38:40.901619", "score": "0.278", "loss": "21.3493", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=analyze(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 60, "n_pass": [425, 51, 28]}
{"time": "2021-02-24 07:38:42.789741", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word); assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 59, "n_pass": [426, 52, 29]}
{"time": "2021-02-24 07:38:46.581025", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse:\" + \":\" +results.size()==0);}}", "n_tokens": 58, "n_pass": [431, 54, 30]}
{"time": "2021-02-24 07:38:56.040410", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\" + \":\" +results.size()==0);}}", "n_tokens": 57, "n_pass": [438, 59, 31]}
{"time": "2021-02-24 07:38:57.959646", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\"+ \":\" +results.size()==0);}}", "n_tokens": 56, "n_pass": [440, 60, 32]}
{"time": "2021-02-24 07:38:59.885764", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\"+\":\" +results.size()==0);}}", "n_tokens": 55, "n_pass": [442, 61, 33]}
{"time": "2021-02-24 07:39:03.673853", "score": "0.4023", "loss": "20.0606", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\"+\":\"+results.size()==0);}}", "n_tokens": 54, "n_pass": [446, 63, 34]}
{"time": "2021-02-24 07:39:05.604845", "score": "0.4027", "loss": "19.4398", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\"+\":\"+resultssize()==0);}}", "n_tokens": 53, "n_pass": [449, 64, 35]}
{"time": "2021-02-24 07:39:07.505013", "score": "0.4055", "loss": "19.6774", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){List results=(word);assertTrue(\"Unexpected parse\"+\":\"+results()==0);}}", "n_tokens": 52, "n_pass": [450, 65, 36]}
{"time": "2021-02-24 07:39:11.267333", "score": "0.3613", "loss": "20.1285", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){ results=(word);assertTrue(\"Unexpected parse\"+\":\"+results()==0);}}", "n_tokens": 51, "n_pass": [482, 66, 37]}
{"time": "2021-02-24 07:39:13.171649", "score": "0.3613", "loss": "20.1285", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){results=(word);assertTrue(\"Unexpected parse\"+\":\"+results()==0);}}", "n_tokens": 50, "n_pass": [483, 67, 38]}
{"time": "2021-02-24 07:39:15.037063", "score": "0.3939", "loss": "20.5413", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){results(word);assertTrue(\"Unexpected parse\"+\":\"+results()==0);}}", "n_tokens": 49, "n_pass": [485, 68, 39]}
{"time": "2021-02-24 07:39:16.944857", "score": "0.45", "loss": "20.0267", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){results();assertTrue(\"Unexpected parse\"+\":\"+results()==0);}}", "n_tokens": 48, "n_pass": [487, 69, 40]}
{"time": "2021-02-24 07:39:26.411208", "score": "0.4376", "loss": "19.7623", "code": "void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){results();assertTrue(\"Unexpected parse\"+\"\"+results()==0);}}", "n_tokens": 47, "n_pass": [499, 74, 41]}

Minimal simplified code:
void assertUnParseable(DynamicLexiconGraph graph,String words){for(String word:words){results();assertTrue("Unexpected parse"+""+results()==0);}}

