
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/core/src/main/java/droidefense/analysis/RuleAnalysis_printMatchedRules.java
method_name = printMatchedRules
method_body = private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules != null && !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO, "Matched rule: " + r.getDesc()); Log.write(LoggerType.INFO, "Rule details:" + r.toString()); } } }
predict, score, loss = writeRuleDetails, 0.4667861759662628, 10.731139183044434

Trace of simplified code(s):
{"time": "2021-02-24 10:34:54.148126", "score": "0.4668", "loss": "10.7311", "code": "private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules != null && !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO, \"Matched rule: \" + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\" + r.toString()); } } }", "n_tokens": 111, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 10:34:58.544981", "score": "0.5586", "loss": "13.3981", "code": "private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules != null && !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\" + r.toString()); } } }", "n_tokens": 104, "n_pass": [53, 3, 2]}
{"time": "2021-02-24 10:35:00.499365", "score": "0.4891", "loss": "12.6092", "code": "private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\" + r.toString()); } } }", "n_tokens": 97, "n_pass": [63, 4, 3]}
{"time": "2021-02-24 10:35:04.366601", "score": "0.4971", "loss": "12.8254", "code": "private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\" + r); } } }", "n_tokens": 93, "n_pass": [125, 6, 4]}
{"time": "2021-02-24 10:35:06.793861", "score": "0.5058", "loss": "12.5107", "code": "private void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 89, "n_pass": [152, 7, 5]}
{"time": "2021-02-24 10:35:10.942143", "score": "0.5058", "loss": "12.5107", "code": " void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 88, "n_pass": [235, 8, 6]}
{"time": "2021-02-24 10:35:12.824660", "score": "0.5058", "loss": "12.5107", "code": "void printMatchedRules(ArrayList<Rule> matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 87, "n_pass": [236, 9, 7]}
{"time": "2021-02-24 10:35:15.209378", "score": "0.5058", "loss": "12.5107", "code": "void printMatchedRules(ArrayList<Rule>matchedRules) { if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 86, "n_pass": [244, 10, 8]}
{"time": "2021-02-24 10:35:17.103238", "score": "0.5058", "loss": "12.5107", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (matchedRules& !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 85, "n_pass": [247, 11, 9]}
{"time": "2021-02-24 10:35:19.010800", "score": "0.5308", "loss": "13.0181", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if ( !matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 83, "n_pass": [251, 12, 10]}
{"time": "2021-02-24 10:35:20.938488", "score": "0.5278", "loss": "12.6905", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (matchedRules.isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 81, "n_pass": [252, 13, 11]}
{"time": "2021-02-24 10:35:22.864275", "score": "0.5466", "loss": "13.5184", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType.INFO,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 79, "n_pass": [253, 14, 12]}
{"time": "2021-02-24 10:35:26.656009", "score": "0.5908", "loss": "12.9759", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType,  + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 77, "n_pass": [267, 16, 13]}
{"time": "2021-02-24 10:35:28.560926", "score": "0.5599", "loss": "13.0453", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType + r.getDesc()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 75, "n_pass": [268, 17, 14]}
{"time": "2021-02-24 10:35:30.534871", "score": "0.5225", "loss": "13.0213", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType + r()); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 73, "n_pass": [271, 18, 15]}
{"time": "2021-02-24 10:35:32.470725", "score": "0.5121", "loss": "12.9303", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log.write(LoggerType + r); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 71, "n_pass": [272, 19, 16]}
{"time": "2021-02-24 10:35:41.004932", "score": "0.3958", "loss": "13.06", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) { Log(LoggerType + r); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 69, "n_pass": [310, 23, 17]}
{"time": "2021-02-24 10:35:49.494503", "score": "0.4815", "loss": "12.9377", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType + r); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 67, "n_pass": [350, 27, 18]}
{"time": "2021-02-24 10:36:06.084954", "score": "0.4815", "loss": "12.9377", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r); Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 66, "n_pass": [446, 31, 19]}
{"time": "2021-02-24 10:36:07.972813", "score": "0.4815", "loss": "12.9377", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerType.INFO, \"Rule details:\"); } } }", "n_tokens": 65, "n_pass": [449, 32, 20]}
{"time": "2021-02-24 10:36:11.760503", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO, \"Rule details:\"); } } }", "n_tokens": 64, "n_pass": [455, 34, 21]}
{"time": "2021-02-24 10:36:15.539265", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details:\"); } } }", "n_tokens": 63, "n_pass": [458, 36, 22]}
{"time": "2021-02-24 10:36:23.118589", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\"); } } }", "n_tokens": 62, "n_pass": [463, 40, 23]}
{"time": "2021-02-24 10:36:25.010083", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");} } }", "n_tokens": 61, "n_pass": [467, 41, 24]}
{"time": "2021-02-24 10:36:26.918944", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}} }", "n_tokens": 60, "n_pass": [469, 42, 25]}
{"time": "2021-02-24 10:36:28.823802", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){ if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 59, "n_pass": [471, 43, 26]}
{"time": "2021-02-24 10:36:31.651561", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if (isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 58, "n_pass": [484, 44, 27]}
{"time": "2021-02-24 10:36:33.536189", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()) { for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 57, "n_pass": [486, 45, 28]}
{"time": "2021-02-24 10:36:35.454673", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){ for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 56, "n_pass": [492, 46, 29]}
{"time": "2021-02-24 10:36:37.351398", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for (Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 55, "n_pass": [494, 47, 30]}
{"time": "2021-02-24 10:36:39.274509", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r : matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 54, "n_pass": [496, 48, 31]}
{"time": "2021-02-24 10:36:41.162730", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r: matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 53, "n_pass": [501, 49, 32]}
{"time": "2021-02-24 10:36:43.066894", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r:matchedRules) {(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 52, "n_pass": [503, 50, 33]}
{"time": "2021-02-24 10:36:45.008553", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r:matchedRules){(LoggerType +r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 51, "n_pass": [506, 51, 34]}
{"time": "2021-02-24 10:36:48.800059", "score": "0.502", "loss": "12.2634", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r:matchedRules){(LoggerType+r);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 50, "n_pass": [510, 53, 35]}
{"time": "2021-02-24 10:36:50.669622", "score": "0.5353", "loss": "13.1475", "code": "void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r:matchedRules){(LoggerTyper);Log.write(LoggerTypeINFO,\"Rule details\");}}}", "n_tokens": 49, "n_pass": [511, 54, 36]}

Minimal simplified code:
void printMatchedRules(ArrayList<Rule>matchedRules){if(isEmpty()){for(Rule r:matchedRules){(LoggerTyper);Log.write(LoggerTypeINFO,"Rule details");}}}

