
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-oauth2-common/oauth2-core/src/test/java/org/forgerock/oauth2/core/UtilsTest_shouldSplitScope.java
method_name = shouldSplitScope
method_body = @Test public void shouldSplitScope() { Set<String> expectedScope = new HashSet<String>(); expectedScope.add("a"); expectedScope.add("b"); expectedScope.add("c"); assertEquals(Utils.splitScope("a b c"), expectedScope); }
predict, score, loss = splitScope, 0.7584279775619507, 20.911285400390625

Trace of simplified code(s):
{"time": "2021-02-23 23:51:47.808638", "score": "0.7584", "loss": "20.9113", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope = new HashSet<String>(); expectedScope.add(\"a\"); expectedScope.add(\"b\"); expectedScope.add(\"c\"); assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 83, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:51:52.013592", "score": "0.7917", "loss": "21.0249", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add(\"a\"); expectedScope.add(\"b\"); expectedScope.add(\"c\"); assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 73, "n_pass": [22, 3, 2]}
{"time": "2021-02-23 23:51:53.889551", "score": "0.7629", "loss": "20.6233", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add(\"b\"); expectedScope.add(\"c\"); assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 63, "n_pass": [23, 4, 3]}
{"time": "2021-02-23 23:51:58.580838", "score": "0.8035", "loss": "21.1371", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add; expectedScope.add(\"c\"); assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 58, "n_pass": [43, 6, 4]}
{"time": "2021-02-23 23:52:02.285955", "score": "0.7791", "loss": "21.6131", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add; expectedScope.add; assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 53, "n_pass": [45, 8, 5]}
{"time": "2021-02-23 23:52:09.871840", "score": "0.754", "loss": "20.7743", "code": "@Test public void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add; expectedScope.assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 50, "n_pass": [76, 12, 6]}
{"time": "2021-02-23 23:52:15.524658", "score": "0.754", "loss": "20.7743", "code": "@Test void shouldSplitScope() { Set<String> expectedScope ; expectedScope.add; expectedScope.assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 48, "n_pass": [85, 15, 7]}
{"time": "2021-02-23 23:52:17.859211", "score": "0.8765", "loss": "22.1639", "code": "@Test void shouldSplitScope() { Set expectedScope ; expectedScope.add; expectedScope.assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 45, "n_pass": [91, 16, 8]}
{"time": "2021-02-23 23:52:19.708807", "score": "0.8681", "loss": "22.2927", "code": "@Test void shouldSplitScope() { Set; expectedScope.add; expectedScope.assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 42, "n_pass": [92, 17, 9]}
{"time": "2021-02-23 23:52:21.570472", "score": "0.8797", "loss": "21.4553", "code": "@Test void shouldSplitScope() { Set.add; expectedScope.assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 39, "n_pass": [93, 18, 10]}
{"time": "2021-02-23 23:52:23.391419", "score": "0.7962", "loss": "19.2557", "code": "@Test void shouldSplitScope() { Set.add;assertEquals(Utils.splitScope(\"a b c\"), expectedScope); }", "n_tokens": 36, "n_pass": [95, 19, 11]}
{"time": "2021-02-23 23:52:25.218169", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope() { Set.add;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 33, "n_pass": [99, 20, 12]}
{"time": "2021-02-23 23:52:34.647667", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope(){ Set.add;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 32, "n_pass": [153, 23, 13]}
{"time": "2021-02-23 23:52:36.453287", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope(){Set.add;assertEquals(Utils.splitScope(\"a \"), expectedScope); }", "n_tokens": 31, "n_pass": [154, 24, 14]}
{"time": "2021-02-23 23:52:48.652045", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope(){Set.add;assertEquals(Utils.splitScope(\"a\"), expectedScope); }", "n_tokens": 30, "n_pass": [197, 29, 15]}
{"time": "2021-02-23 23:52:50.536826", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope(){Set.add;assertEquals(Utils.splitScope(\"a\"),expectedScope); }", "n_tokens": 29, "n_pass": [200, 30, 16]}
{"time": "2021-02-23 23:52:52.367561", "score": "0.7514", "loss": "18.3421", "code": "@Test void shouldSplitScope(){Set.add;assertEquals(Utils.splitScope(\"a\"),expectedScope);}", "n_tokens": 28, "n_pass": [204, 31, 17]}

Minimal simplified code:
@Test void shouldSplitScope(){Set.add;assertEquals(Utils.splitScope("a"),expectedScope);}

