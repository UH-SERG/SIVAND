
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/search/elasticsearch/util/src/java/org/sakaiproject/search/elasticsearch/BaseElasticSearchIndexBuilder_getNDocs.java
method_name = getNDocs
method_body = @Override public int getNDocs() { assureIndex(); CountResponse response = client.prepareCount(indexName).setQuery(filteredQuery(matchAllQuery(), termFilter(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }
predict, score, loss = countAll, 0.6621212959289551, 17.302608489990234

Trace of simplified code(s):
{"time": "2021-02-24 08:22:58.770027", "score": "0.6621", "loss": "17.3026", "code": "@Override public int getNDocs() { assureIndex(); CountResponse response = client.prepareCount(indexName).setQuery(filteredQuery(matchAllQuery(), termFilter(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 77, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 08:23:04.530040", "score": "0.7032", "loss": "17.6022", "code": "@Override public int getNDocs() { CountResponse response = client.prepareCount(indexName).setQuery(filteredQuery(matchAllQuery(), termFilter(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 72, "n_pass": [47, 4, 2]}
{"time": "2021-02-24 08:23:06.381637", "score": "0.7492", "loss": "17.9418", "code": "@Override public int getNDocs() { CountResponse response = client.prepareCount(filteredQuery(matchAllQuery(), termFilter(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 67, "n_pass": [50, 5, 3]}
{"time": "2021-02-24 08:23:08.238960", "score": "0.7702", "loss": "18.2865", "code": "@Override public int getNDocs() { CountResponse response = client.prepareCount(filteredQuery(matchAllQuery(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 62, "n_pass": [52, 6, 4]}
{"time": "2021-02-24 08:23:10.098640", "score": "0.5383", "loss": "15.603", "code": " int getNDocs() { CountResponse response = client.prepareCount(filteredQuery(matchAllQuery(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 58, "n_pass": [60, 7, 5]}
{"time": "2021-02-24 08:23:16.179931", "score": "0.4797", "loss": "15.9936", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService.FIELD_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 56, "n_pass": [105, 10, 6]}
{"time": "2021-02-24 08:23:18.112306", "score": "0.5083", "loss": "16.2577", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService_INDEXED, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 54, "n_pass": [109, 11, 7]}
{"time": "2021-02-24 08:23:20.010705", "score": "0.5314", "loss": "17.3159", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService, true))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 52, "n_pass": [110, 12, 8]}
{"time": "2021-02-24 08:23:21.907794", "score": "0.5342", "loss": "18.2279", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService))).execute().actionGet(); return (int) response.getCount(); }", "n_tokens": 49, "n_pass": [111, 13, 9]}
{"time": "2021-02-24 08:23:24.208984", "score": "0.5336", "loss": "17.8616", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService))).execute().actionGet(); return  response.getCount(); }", "n_tokens": 46, "n_pass": [117, 14, 10]}
{"time": "2021-02-24 08:23:33.899061", "score": "0.5227", "loss": "17.7779", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService))).execute().actionGet(); response.getCount(); }", "n_tokens": 43, "n_pass": [136, 19, 11]}
{"time": "2021-02-24 08:23:35.767675", "score": "0.4731", "loss": "18.3088", "code": " int getNDocs() { CountResponse response = client(filteredQuery(matchAllQuery(SearchService))).execute().actionGet();getCount(); }", "n_tokens": 40, "n_pass": [137, 20, 12]}
{"time": "2021-02-24 08:23:41.749836", "score": "0.3581", "loss": "19.0186", "code": " int getNDocs() { CountResponse = client(filteredQuery(matchAllQuery(SearchService))).execute().actionGet();getCount(); }", "n_tokens": 38, "n_pass": [145, 23, 13]}
{"time": "2021-02-24 08:23:43.580677", "score": "0.371", "loss": "19.0914", "code": " int getNDocs() { CountResponse =(filteredQuery(matchAllQuery(SearchService))).execute().actionGet();getCount(); }", "n_tokens": 36, "n_pass": [147, 24, 14]}
{"time": "2021-02-24 08:23:45.423359", "score": "0.4458", "loss": "18.6947", "code": " int getNDocs() { CountResponse =(filteredQuery(matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 33, "n_pass": [154, 25, 15]}
{"time": "2021-02-24 08:23:53.573346", "score": "0.4458", "loss": "18.6947", "code": "int getNDocs() { CountResponse =(filteredQuery(matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 32, "n_pass": [201, 28, 16]}
{"time": "2021-02-24 08:23:55.826814", "score": "0.4458", "loss": "18.6947", "code": "int getNDocs(){ CountResponse =(filteredQuery(matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 31, "n_pass": [206, 29, 17]}
{"time": "2021-02-24 08:23:57.653306", "score": "0.4458", "loss": "18.6947", "code": "int getNDocs(){CountResponse =(filteredQuery(matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 30, "n_pass": [208, 30, 18]}
{"time": "2021-02-24 08:23:59.496770", "score": "0.4458", "loss": "18.6947", "code": "int getNDocs(){CountResponse=(filteredQuery(matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 29, "n_pass": [210, 31, 19]}
{"time": "2021-02-24 08:24:03.197378", "score": "0.3743", "loss": "18.7123", "code": "int getNDocs(){CountResponse=((matchAllQuery(SearchService))).execute().actionGetgetCount(); }", "n_tokens": 28, "n_pass": [213, 33, 20]}
{"time": "2021-02-24 08:24:06.835145", "score": "0.3407", "loss": "18.9839", "code": "int getNDocs(){CountResponse=((matchAllQuery())).execute().actionGetgetCount(); }", "n_tokens": 27, "n_pass": [217, 35, 21]}
{"time": "2021-02-24 08:24:08.699634", "score": "0.3363", "loss": "18.108", "code": "int getNDocs(){CountResponse=((matchAllQuery())).execute.actionGetgetCount(); }", "n_tokens": 25, "n_pass": [223, 36, 22]}
{"time": "2021-02-24 08:24:15.892945", "score": "0.3363", "loss": "18.108", "code": "int getNDocs(){CountResponse=((matchAllQuery())).execute.actionGetgetCount();}", "n_tokens": 24, "n_pass": [256, 39, 23]}

Minimal simplified code:
int getNDocs(){CountResponse=((matchAllQuery())).execute.actionGetgetCount();}

