
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/test/java/zemberek/morphology/old_lexicon/TurkishSuffixesTest_testNosuffix.java
method_name = testNosuffix
method_body = @Test public void testNosuffix() { Tester tester = new Tester("göbek"); tester.assertHasParses("göbek"); tester.assertUnParseable("göbeğ"); }
predict, score, loss = test, 0.8872421979904175, 14.603483200073242

Trace of simplified code(s):
{"time": "2021-02-24 08:26:54.223839", "score": "0.8872", "loss": "14.6035", "code": "@Test public void testNosuffix() { Tester tester = new Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 50, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 08:26:56.610391", "score": "0.8659", "loss": "14.6467", "code": "@Test public void testNosuffix() { new Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 44, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 08:26:58.898909", "score": "0.8657", "loss": "14.666", "code": "@Test public void testNosuffix() {Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); tester.assertUnParseable(\"g\u00f6be\u011f\"); }", "n_tokens": 41, "n_pass": [43, 3, 3]}
{"time": "2021-02-24 08:27:04.356442", "score": "0.8557", "loss": "5.9404", "code": "@Test public void testNosuffix() {Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 38, "n_pass": [49, 6, 4]}
{"time": "2021-02-24 08:27:06.230999", "score": "0.9598", "loss": "5.7377", "code": "public void testNosuffix() {Tester(\"g\u00f6bek\"); tester.assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 35, "n_pass": [52, 7, 5]}
{"time": "2021-02-24 08:27:08.438746", "score": "0.9213", "loss": "14.2374", "code": "public void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 32, "n_pass": [58, 8, 6]}
{"time": "2021-02-24 08:27:14.250064", "score": "0.9213", "loss": "14.2374", "code": " void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 31, "n_pass": [99, 10, 7]}
{"time": "2021-02-24 08:27:16.082740", "score": "0.9213", "loss": "14.2374", "code": "void testNosuffix() {Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 30, "n_pass": [100, 11, 8]}
{"time": "2021-02-24 08:27:18.320010", "score": "0.9213", "loss": "14.2374", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\"); (\"g\u00f6be\u011f\"); }", "n_tokens": 29, "n_pass": [105, 12, 9]}
{"time": "2021-02-24 08:27:26.406307", "score": "0.9213", "loss": "14.2374", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\");(\"g\u00f6be\u011f\"); }", "n_tokens": 28, "n_pass": [159, 15, 10]}
{"time": "2021-02-24 08:27:30.072043", "score": "0.9213", "loss": "14.2374", "code": "void testNosuffix(){Tester(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\");(\"g\u00f6be\u011f\");}", "n_tokens": 27, "n_pass": [166, 17, 11]}
{"time": "2021-02-24 08:27:32.759644", "score": "0.8583", "loss": "5.4941", "code": "void testNosuffix(){(\"g\u00f6bek\").assertHasParses(\"g\u00f6bek\");(\"g\u00f6be\u011f\");}", "n_tokens": 26, "n_pass": [174, 18, 12]}

Minimal simplified code:
void testNosuffix(){("göbek").assertHasParses("göbek");("göbeğ");}

