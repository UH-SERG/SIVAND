
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/timols__jenkins-gitlab-merge-request-builder-plugin/src/main/java/org/jenkinsci/plugins/gitlab/GitlabRepository_init.java
method_name = init
method_body = public void init() { checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder, project); } }
predict, score, loss = initMergeRequests, 0.8484100103378296, 0.4102286398410797

Trace of simplified code(s):
{"time": "2021-02-23 21:55:11.062745", "score": "0.8484", "loss": "0.4102", "code": "public void init() { checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder, project); } }", "n_tokens": 47, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:55:12.967950", "score": "0.8484", "loss": "0.4102", "code": "void init() { checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder, project); } }", "n_tokens": 45, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 21:55:18.543787", "score": "0.8355", "loss": "0.4306", "code": "void init() { checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 42, "n_pass": [56, 5, 3]}
{"time": "2021-02-23 21:55:27.162092", "score": "0.8355", "loss": "0.4306", "code": "void init(){ checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 41, "n_pass": [108, 8, 4]}
{"time": "2021-02-23 21:55:29.025735", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState(); for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 40, "n_pass": [110, 9, 5]}
{"time": "2021-02-23 21:55:30.880399", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper : mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 39, "n_pass": [115, 10, 6]}
{"time": "2021-02-23 21:55:41.206865", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper: mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 38, "n_pass": [170, 13, 7]}
{"time": "2021-02-23 21:55:43.042958", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()) { mergeRequestWrapper.init(builder); } }", "n_tokens": 37, "n_pass": [172, 14, 8]}
{"time": "2021-02-23 21:55:46.733950", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){ mergeRequestWrapper.init(builder); } }", "n_tokens": 36, "n_pass": [179, 16, 9]}
{"time": "2021-02-23 21:55:48.551428", "score": "0.8355", "loss": "0.4306", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init(builder); } }", "n_tokens": 35, "n_pass": [181, 17, 10]}
{"time": "2021-02-23 21:55:52.219928", "score": "0.7898", "loss": "0.6327", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init(); } }", "n_tokens": 34, "n_pass": [186, 19, 11]}
{"time": "2021-02-23 21:55:54.094445", "score": "0.7898", "loss": "0.6327", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init();} }", "n_tokens": 33, "n_pass": [189, 20, 12]}
{"time": "2021-02-23 21:55:55.972256", "score": "0.7898", "loss": "0.6327", "code": "void init(){checkState();for (GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init();}}", "n_tokens": 32, "n_pass": [191, 21, 13]}
{"time": "2021-02-23 21:55:58.769013", "score": "0.7898", "loss": "0.6327", "code": "void init(){checkState();for(GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init();}}", "n_tokens": 31, "n_pass": [204, 22, 14]}

Minimal simplified code:
void init(){checkState();for(GitlabMergeRequestWrapper mergeRequestWrapper:mergeRequests.values()){mergeRequestWrapper.init();}}

