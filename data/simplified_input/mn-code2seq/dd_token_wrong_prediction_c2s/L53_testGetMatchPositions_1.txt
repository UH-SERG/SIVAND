
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/test/java/edu/illinois/cs/cogcomp/core/algorithms/TreeGrepTest_testGetMatchPositions.java
method_name = testGetMatchPositions
method_body = @Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }
predict, score, loss = testMatches, 0.7309280037879944, 23.32503890991211

Trace of simplified code(s):
{"time": "2021-02-23 18:26:54.294155", "score": "0.7309", "loss": "23.325", "code": "@Test public void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 75, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 18:26:56.665441", "score": "0.8197", "loss": "22.3689", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { TreeGrep<String> matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 71, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 18:26:58.575178", "score": "0.7886", "loss": "21.9524", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); boolean result = matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 66, "n_pass": [51, 3, 3]}
{"time": "2021-02-23 18:27:04.240916", "score": "0.7112", "loss": "21.4111", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);result = matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 63, "n_pass": [101, 6, 4]}
{"time": "2021-02-23 18:27:06.099350", "score": "0.6924", "loss": "20.778", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p); matcher.matches(tree); assertEquals(true, result); } }", "n_tokens": 60, "n_pass": [102, 7, 5]}
{"time": "2021-02-23 18:27:07.999879", "score": "0.6804", "loss": "20.476", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals(true, result); } }", "n_tokens": 57, "n_pass": [103, 8, 6]}
{"time": "2021-02-23 18:27:22.526354", "score": "0.7036", "loss": "20.5176", "code": " void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 55, "n_pass": [186, 12, 7]}
{"time": "2021-02-23 18:27:26.299932", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions() { for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 54, "n_pass": [191, 14, 8]}
{"time": "2021-02-23 18:27:29.100351", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){ for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 53, "n_pass": [197, 15, 9]}
{"time": "2021-02-23 18:27:30.978171", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for (Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 52, "n_pass": [199, 16, 10]}
{"time": "2021-02-23 18:27:32.828372", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String> p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 51, "n_pass": [201, 17, 11]}
{"time": "2021-02-23 18:27:34.717435", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p : foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 50, "n_pass": [207, 18, 12]}
{"time": "2021-02-23 18:27:36.559854", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p: foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 49, "n_pass": [209, 19, 13]}
{"time": "2021-02-23 18:27:38.418405", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns) { matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 48, "n_pass": [211, 20, 14]}
{"time": "2021-02-23 18:27:40.295064", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){ matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 47, "n_pass": [214, 21, 15]}
{"time": "2021-02-23 18:27:42.184403", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher = new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 46, "n_pass": [216, 22, 16]}
{"time": "2021-02-23 18:27:44.112020", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher= new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 45, "n_pass": [218, 23, 17]}
{"time": "2021-02-23 18:27:45.982255", "score": "0.7036", "loss": "20.5176", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>(p);matches(tree); assertEquals( result); } }", "n_tokens": 44, "n_pass": [220, 24, 18]}
{"time": "2021-02-23 18:27:47.838839", "score": "0.6898", "loss": "19.8976", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree); assertEquals( result); } }", "n_tokens": 43, "n_pass": [227, 25, 19]}
{"time": "2021-02-23 18:27:58.718456", "score": "0.6898", "loss": "19.8976", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree);assertEquals( result); } }", "n_tokens": 42, "n_pass": [278, 29, 20]}
{"time": "2021-02-23 18:28:02.457176", "score": "0.6898", "loss": "19.8976", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree);assertEquals(result); } }", "n_tokens": 41, "n_pass": [281, 31, 21]}
{"time": "2021-02-23 18:28:06.251961", "score": "0.6898", "loss": "19.8976", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree);assertEquals(result);} }", "n_tokens": 40, "n_pass": [285, 33, 22]}
{"time": "2021-02-23 18:28:08.105136", "score": "0.6898", "loss": "19.8976", "code": "void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree);assertEquals(result);}}", "n_tokens": 39, "n_pass": [287, 34, 23]}

Minimal simplified code:
void testGetMatchPositions(){for(Tree<String>p:foundPatterns){matcher=new TreeGrep<>();matches(tree);assertEquals(result);}}

