
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/engines/Grainv1Engine_returnByte.java
method_name = returnByte
method_body = public byte returnByte(byte in) { if (!initialised) { throw new IllegalStateException(getAlgorithmName() + " not initialised"); } return (byte) (in ^ getKeyStream()); }
predict, score, loss = getByte, 0.8464579582214355, 10.138361930847168

Trace of simplified code(s):
{"time": "2021-02-24 11:07:59.747893", "score": "0.8465", "loss": "10.1384", "code": "public byte returnByte(byte in) { if (!initialised) { throw new IllegalStateException(getAlgorithmName() + \" not initialised\"); } return (byte) (in ^ getKeyStream()); }", "n_tokens": 63, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:08:02.109455", "score": "0.7111", "loss": "9.7753", "code": "public byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName() + \" not initialised\"); } return (byte) (in ^ getKeyStream()); }", "n_tokens": 59, "n_pass": [50, 2, 2]}
{"time": "2021-02-24 11:08:03.970744", "score": "0.7732", "loss": "9.9709", "code": "public byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName() + \"\"); } return (byte) (in ^ getKeyStream()); }", "n_tokens": 55, "n_pass": [52, 3, 3]}
{"time": "2021-02-24 11:08:05.829788", "score": "0.6283", "loss": "9.5385", "code": "public byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName() + \"\"); } return (in ^ getKeyStream()); }", "n_tokens": 51, "n_pass": [55, 4, 4]}
{"time": "2021-02-24 11:08:10.440706", "score": "0.6283", "loss": "9.5385", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName() + \"\"); } return (in ^ getKeyStream()); }", "n_tokens": 50, "n_pass": [101, 6, 5]}
{"time": "2021-02-24 11:08:14.159761", "score": "0.6166", "loss": "9.8074", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } return (in ^ getKeyStream()); }", "n_tokens": 48, "n_pass": [113, 8, 6]}
{"time": "2021-02-24 11:08:15.990230", "score": "0.6413", "loss": "8.3079", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } (in ^ getKeyStream()); }", "n_tokens": 46, "n_pass": [119, 9, 7]}
{"time": "2021-02-24 11:08:29.203636", "score": "0.6413", "loss": "8.3079", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } (in^ getKeyStream()); }", "n_tokens": 45, "n_pass": [191, 12, 8]}
{"time": "2021-02-24 11:08:31.075391", "score": "0.6413", "loss": "8.3079", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream()); }", "n_tokens": 44, "n_pass": [192, 13, 9]}
{"time": "2021-02-24 11:08:32.932123", "score": "0.6413", "loss": "8.3079", "code": " byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 43, "n_pass": [198, 14, 10]}
{"time": "2021-02-24 11:08:34.782211", "score": "0.6413", "loss": "8.3079", "code": "byte returnByte(byte in) { if (!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 42, "n_pass": [200, 15, 11]}
{"time": "2021-02-24 11:08:37.557275", "score": "0.6413", "loss": "8.3079", "code": "byte returnByte(byte in){ if (!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 41, "n_pass": [209, 16, 12]}
{"time": "2021-02-24 11:08:39.426214", "score": "0.6413", "loss": "8.3079", "code": "byte returnByte(byte in){if (!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 40, "n_pass": [211, 17, 13]}
{"time": "2021-02-24 11:08:41.267671", "score": "0.6413", "loss": "8.3079", "code": "byte returnByte(byte in){if(!initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 39, "n_pass": [213, 18, 14]}
{"time": "2021-02-24 11:08:43.114349", "score": "0.6675", "loss": "7.6197", "code": "byte returnByte(byte in){if(initialised) { throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 38, "n_pass": [215, 19, 15]}
{"time": "2021-02-24 11:08:44.952781", "score": "0.6675", "loss": "7.6197", "code": "byte returnByte(byte in){if(initialised){ throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 37, "n_pass": [218, 20, 16]}
{"time": "2021-02-24 11:08:46.788728", "score": "0.6675", "loss": "7.6197", "code": "byte returnByte(byte in){if(initialised){throw(getAlgorithmName + \"\"); } (in^getKeyStream());}", "n_tokens": 36, "n_pass": [220, 21, 17]}
{"time": "2021-02-24 11:08:50.476904", "score": "0.6377", "loss": "7.4308", "code": "byte returnByte(byte in){if(initialised){throw( + \"\"); } (in^getKeyStream());}", "n_tokens": 35, "n_pass": [223, 23, 18]}
{"time": "2021-02-24 11:08:52.327768", "score": "0.6377", "loss": "7.4308", "code": "byte returnByte(byte in){if(initialised){throw(+ \"\"); } (in^getKeyStream());}", "n_tokens": 34, "n_pass": [224, 24, 19]}
{"time": "2021-02-24 11:08:54.160162", "score": "0.7773", "loss": "8.0379", "code": "byte returnByte(byte in){if(initialised){throw( \"\"); } (in^getKeyStream());}", "n_tokens": 33, "n_pass": [225, 25, 20]}
{"time": "2021-02-24 11:08:56.004982", "score": "0.7773", "loss": "8.0379", "code": "byte returnByte(byte in){if(initialised){throw(\"\"); } (in^getKeyStream());}", "n_tokens": 32, "n_pass": [226, 26, 21]}
{"time": "2021-02-24 11:08:57.842329", "score": "0.7773", "loss": "8.0379", "code": "byte returnByte(byte in){if(initialised){throw(\"\");} (in^getKeyStream());}", "n_tokens": 31, "n_pass": [231, 27, 22]}
{"time": "2021-02-24 11:08:59.683670", "score": "0.7773", "loss": "8.0379", "code": "byte returnByte(byte in){if(initialised){throw(\"\");}(in^getKeyStream());}", "n_tokens": 30, "n_pass": [233, 28, 23]}
{"time": "2021-02-24 11:09:01.510937", "score": "0.7587", "loss": "5.9753", "code": "byte returnByte(byte in){if(initialised){throw(\"\");}(ingetKeyStream());}", "n_tokens": 29, "n_pass": [236, 29, 24]}
{"time": "2021-02-24 11:09:03.347098", "score": "0.6308", "loss": "6.0245", "code": "byte returnByte(byte in){if(initialised){throw(\"\");}(in());}", "n_tokens": 28, "n_pass": [237, 30, 25]}
{"time": "2021-02-24 11:09:06.104994", "score": "0.7119", "loss": "6.5441", "code": "byte returnByte(byte in){if(initialised){(\"\");}(in());}", "n_tokens": 27, "n_pass": [257, 31, 26]}

Minimal simplified code:
byte returnByte(byte in){if(initialised){("");}(in());}

