
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/calendar/calendar-summary-tool/tool/src/java/org/sakaiproject/tool/summarycalendar/ui/PrefsBean_getValidatedColorValue.java
method_name = getValidatedColorValue
method_body = private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if ("".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception("Invalid hex color code."); } return value; }
predict, score, loss = getColorValue, 0.4341597557067871, 15.885313034057617

Trace of simplified code(s):
{"time": "2021-02-23 21:08:15.010642", "score": "0.4342", "loss": "15.8853", "code": "private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if (\"\".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"Invalid hex color code.\"); } return value; }", "n_tokens": 103, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:08:36.520449", "score": "0.6141", "loss": "16.6116", "code": "private String getValidatedColorValue(String componentId) throws Exception { String value = getValueFromFacesContext(componentId).trim(); if (\"\".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"color code.\"); } return value; }", "n_tokens": 99, "n_pass": [119, 12, 2]}
{"time": "2021-02-23 21:08:42.663779", "score": "0.622", "loss": "17.2893", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext(componentId).trim(); if (\"\".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"color code.\"); } return value; }", "n_tokens": 96, "n_pass": [130, 15, 3]}
{"time": "2021-02-23 21:08:46.440128", "score": "0.5627", "loss": "16.5193", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (\"\".equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"color code.\"); } return value; }", "n_tokens": 93, "n_pass": [132, 17, 4]}
{"time": "2021-02-23 21:08:48.366240", "score": "0.605", "loss": "16.402", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { throw new Exception(\"color code.\"); } return value; }", "n_tokens": 90, "n_pass": [136, 18, 5]}
{"time": "2021-02-23 21:08:54.045016", "score": "0.6175", "loss": "15.6114", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) { Exception(\"color code.\"); } return value; }", "n_tokens": 86, "n_pass": [149, 21, 6]}
{"time": "2021-02-23 21:09:09.627739", "score": "0.7305", "loss": "15.9437", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"color code.\"); } return value; }", "n_tokens": 84, "n_pass": [231, 27, 7]}
{"time": "2021-02-23 21:09:11.540264", "score": "0.5707", "loss": "15.7475", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); } return value; }", "n_tokens": 82, "n_pass": [232, 28, 8]}
{"time": "2021-02-23 21:09:15.300794", "score": "0.6368", "loss": "16.0175", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); } value; }", "n_tokens": 80, "n_pass": [237, 30, 9]}
{"time": "2021-02-23 21:09:17.183605", "score": "0.6253", "loss": "15.6759", "code": "private String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 78, "n_pass": [238, 31, 10]}
{"time": "2021-02-23 21:09:19.053149", "score": "0.6253", "loss": "15.6759", "code": " String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 77, "n_pass": [240, 32, 11]}
{"time": "2021-02-23 21:09:20.917914", "score": "0.6253", "loss": "15.6759", "code": "String getValidatedColorValue(String componentId) throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 76, "n_pass": [241, 33, 12]}
{"time": "2021-02-23 21:09:24.118488", "score": "0.6253", "loss": "15.6759", "code": "String getValidatedColorValue(String componentId)throws Exception { String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 75, "n_pass": [250, 34, 13]}
{"time": "2021-02-23 21:09:25.967588", "score": "0.6253", "loss": "15.6759", "code": "String getValidatedColorValue(String componentId)throws Exception{ String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 74, "n_pass": [254, 35, 14]}
{"time": "2021-02-23 21:09:27.834301", "score": "0.6253", "loss": "15.6759", "code": "String getValidatedColorValue(String componentId)throws Exception{String= getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 73, "n_pass": [256, 36, 15]}
{"time": "2021-02-23 21:09:29.678198", "score": "0.6253", "loss": "15.6759", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext.trim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 72, "n_pass": [259, 37, 16]}
{"time": "2021-02-23 21:09:31.574598", "score": "0.6313", "loss": "15.8595", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_HEX_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 71, "n_pass": [261, 38, 17]}
{"time": "2021-02-23 21:09:37.192029", "score": "0.7019", "loss": "17.4504", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN.matcher(value).matches()) {(\"code.\"); }  }", "n_tokens": 69, "n_pass": [276, 41, 18]}
{"time": "2021-02-23 21:09:40.982041", "score": "0.7434", "loss": "17.2189", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"code.\"); }  }", "n_tokens": 67, "n_pass": [278, 43, 19]}
{"time": "2021-02-23 21:09:42.868989", "score": "0.7744", "loss": "16.8404", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\"); }  }", "n_tokens": 65, "n_pass": [285, 44, 20]}
{"time": "2021-02-23 21:10:01.834143", "score": "0.7744", "loss": "16.8404", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}  }", "n_tokens": 64, "n_pass": [378, 50, 21]}
{"time": "2021-02-23 21:10:03.704769", "score": "0.7744", "loss": "16.8404", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");} }", "n_tokens": 63, "n_pass": [380, 51, 22]}
{"time": "2021-02-23 21:10:05.584023", "score": "0.7744", "loss": "16.8404", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContexttrim(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 62, "n_pass": [381, 52, 23]}
{"time": "2021-02-23 21:10:12.577034", "score": "0.8005", "loss": "17.6088", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext(); if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 61, "n_pass": [398, 55, 24]}
{"time": "2021-02-23 21:10:14.464842", "score": "0.8005", "loss": "17.6088", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if (equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 60, "n_pass": [402, 56, 25]}
{"time": "2021-02-23 21:10:16.348249", "score": "0.8005", "loss": "17.6088", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if(equals(value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 59, "n_pass": [404, 57, 26]}
{"time": "2021-02-23 21:10:18.219661", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)) { return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 58, "n_pass": [406, 58, 27]}
{"time": "2021-02-23 21:10:20.097305", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){ return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 57, "n_pass": [411, 59, 28]}
{"time": "2021-02-23 21:10:21.969133", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value; } if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 56, "n_pass": [413, 60, 29]}
{"time": "2021-02-23 21:10:29.465298", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;} if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 55, "n_pass": [418, 64, 30]}
{"time": "2021-02-23 21:10:31.382379", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;}if (!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 54, "n_pass": [420, 65, 31]}
{"time": "2021-02-23 21:10:33.273469", "score": "0.8416", "loss": "18.4978", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;}if(!COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 53, "n_pass": [422, 66, 32]}
{"time": "2021-02-23 21:10:35.120169", "score": "0.8266", "loss": "19.4119", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;}if(COLOR_PATTERN(value).matches()) {(\"\");}}", "n_tokens": 52, "n_pass": [424, 67, 33]}
{"time": "2021-02-23 21:10:40.802085", "score": "0.6758", "loss": "17.7898", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;}if(COLOR_(value).matches()) {(\"\");}}", "n_tokens": 51, "n_pass": [427, 70, 34]}
{"time": "2021-02-23 21:10:44.510052", "score": "0.6758", "loss": "17.7898", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){return value;}if(COLOR_(value).matches()){(\"\");}}", "n_tokens": 50, "n_pass": [436, 72, 35]}
{"time": "2021-02-23 21:10:49.597945", "score": "0.7142", "loss": "18.6255", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){ value;}if(COLOR_(value).matches()){(\"\");}}", "n_tokens": 49, "n_pass": [470, 74, 36]}
{"time": "2021-02-23 21:10:51.487692", "score": "0.7142", "loss": "18.6255", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){value;}if(COLOR_(value).matches()){(\"\");}}", "n_tokens": 48, "n_pass": [471, 75, 37]}
{"time": "2021-02-23 21:10:53.373640", "score": "0.6787", "loss": "17.8327", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){;}if(COLOR_(value).matches()){(\"\");}}", "n_tokens": 47, "n_pass": [472, 76, 38]}
{"time": "2021-02-23 21:10:55.187996", "score": "0.6787", "loss": "17.8327", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){}if(COLOR_(value).matches()){(\"\");}}", "n_tokens": 46, "n_pass": [473, 77, 39]}
{"time": "2021-02-23 21:10:58.897380", "score": "0.6787", "loss": "17.8327", "code": "String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){}if(COLOR(value).matches()){(\"\");}}", "n_tokens": 45, "n_pass": [478, 79, 40]}

Minimal simplified code:
String getValidatedColorValue(String componentId)throws Exception{String=getValueFromFacesContext();if((value)){}if(COLOR(value).matches()){("");}}

