
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/test/java/org/apache/aurora/scheduler/storage/log/SnapshotServiceTest_expectStorageInitialized.java
method_name = expectStorageInitialized
method_body = private void expectStorageInitialized() throws Exception { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList.of(); expect(mockStream.readAll()).andReturn(empty.iterator()); }
predict, score, loss = testReadAll, 0.8622944951057434, 35.978904724121094

Trace of simplified code(s):
{"time": "2021-02-24 09:54:20.208960", "score": "0.8623", "loss": "35.9789", "code": "private void expectStorageInitialized() throws Exception { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList.of(); expect(mockStream.readAll()).andReturn(empty.iterator()); }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:54:25.313690", "score": "0.9314", "loss": "35.6732", "code": "private void expectStorageInitialized() { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList.of(); expect(mockStream.readAll()).andReturn(empty.iterator()); }", "n_tokens": 61, "n_pass": [46, 3, 2]}
{"time": "2021-02-24 09:54:27.731144", "score": "0.8467", "loss": "33.0218", "code": "private void expectStorageInitialized() { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList. expect(mockStream.readAll()).andReturn(empty.iterator()); }", "n_tokens": 57, "n_pass": [53, 4, 3]}
{"time": "2021-02-24 09:54:34.266506", "score": "0.8859", "loss": "33.8804", "code": "private void expectStorageInitialized() { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList. expect(mockStream.readAll).andReturn(empty.iterator()); }", "n_tokens": 55, "n_pass": [99, 7, 4]}
{"time": "2021-02-24 09:54:36.138528", "score": "0.9211", "loss": "34.6262", "code": "private void expectStorageInitialized() { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList. expect(mockStream.readAll).andReturn(iterator()); }", "n_tokens": 53, "n_pass": [102, 8, 5]}
{"time": "2021-02-24 09:54:38.043869", "score": "0.9211", "loss": "34.6262", "code": "void expectStorageInitialized() { expect(mockLog.open()).andReturn(mockStream); List<Entry> empty = ImmutableList. expect(mockStream.readAll).andReturn(iterator()); }", "n_tokens": 51, "n_pass": [106, 9, 6]}
{"time": "2021-02-24 09:54:40.365555", "score": "0.9581", "loss": "37.2488", "code": "void expectStorageInitialized() { expect(open()).andReturn(mockStream); List<Entry> empty = ImmutableList. expect(mockStream.readAll).andReturn(iterator()); }", "n_tokens": 49, "n_pass": [112, 10, 7]}
{"time": "2021-02-24 09:54:43.159682", "score": "0.966", "loss": "39.9981", "code": "void expectStorageInitialized() { expect(open()).andReturn(mockStream); List<Entry> empty =  expect(mockStream.readAll).andReturn(iterator()); }", "n_tokens": 47, "n_pass": [123, 11, 8]}
{"time": "2021-02-24 09:54:44.999892", "score": "0.9713", "loss": "39.9144", "code": "void expectStorageInitialized() { expect(open()).andReturn(mockStream); List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 45, "n_pass": [124, 12, 9]}
{"time": "2021-02-24 09:54:59.017001", "score": "0.9713", "loss": "39.9144", "code": "void expectStorageInitialized(){ expect(open()).andReturn(mockStream); List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 44, "n_pass": [210, 16, 10]}
{"time": "2021-02-24 09:55:00.897446", "score": "0.9713", "loss": "39.9144", "code": "void expectStorageInitialized(){expect(open()).andReturn(mockStream); List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 43, "n_pass": [212, 17, 11]}
{"time": "2021-02-24 09:55:02.764002", "score": "0.8572", "loss": "38.8194", "code": "void expectStorageInitialized(){(open()).andReturn(mockStream); List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 42, "n_pass": [213, 18, 12]}
{"time": "2021-02-24 09:55:04.659187", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn(); List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 41, "n_pass": [222, 19, 13]}
{"time": "2021-02-24 09:55:06.512122", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn();List<Entry> empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 40, "n_pass": [225, 20, 14]}
{"time": "2021-02-24 09:55:08.810786", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn();List<Entry>empty = (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 39, "n_pass": [230, 21, 15]}
{"time": "2021-02-24 09:55:10.694501", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn();List<Entry>empty= (mockStream.readAll).andReturn(iterator()); }", "n_tokens": 38, "n_pass": [232, 22, 16]}
{"time": "2021-02-24 09:55:12.984720", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn();List<Entry>empty=(mockStream.readAll).andReturn(iterator()); }", "n_tokens": 37, "n_pass": [234, 23, 17]}
{"time": "2021-02-24 09:55:21.776824", "score": "0.7952", "loss": "36.9296", "code": "void expectStorageInitialized(){(open()).andReturn();List<Entry>empty=(mockStream.readAll).andReturn(iterator());}", "n_tokens": 36, "n_pass": [273, 26, 18]}

Minimal simplified code:
void expectStorageInitialized(){(open()).andReturn();List<Entry>empty=(mockStream.readAll).andReturn(iterator());}

