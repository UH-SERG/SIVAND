
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/main/java/zemberek/embedding/WordVectorLookup_cosDistance.java
method_name = cosDistance
method_body = float cosDistance(Vector v1, Vector v2) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }
predict, score, loss = sum, 0.6674138307571411, 16.140836715698242

Trace of simplified code(s):
{"time": "2021-02-23 20:02:51.535251", "score": "0.6674", "loss": "16.1408", "code": "float cosDistance(Vector v1, Vector v2) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 118, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:02:53.594815", "score": "0.3564", "loss": "16.288", "code": "float cosDistance(Vector v) { float sum = 0; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 111, "n_pass": [45, 2, 2]}
{"time": "2021-02-23 20:02:57.495407", "score": "0.317", "loss": "16.2614", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.data.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 108, "n_pass": [93, 4, 3]}
{"time": "2021-02-23 20:03:14.724256", "score": "0.3271", "loss": "16.569", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum += (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 106, "n_pass": [193, 12, 4]}
{"time": "2021-02-23 20:03:18.570009", "score": "0.4883", "loss": "16.947", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1.data[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 104, "n_pass": [199, 14, 5]}
{"time": "2021-02-23 20:03:20.476294", "score": "0.5067", "loss": "17.2253", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2.data[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 102, "n_pass": [202, 15, 6]}
{"time": "2021-02-23 20:03:22.389254", "score": "0.5219", "loss": "17.2654", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum / (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 100, "n_pass": [207, 16, 7]}
{"time": "2021-02-23 20:03:24.772611", "score": "0.7976", "loss": "18.4903", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap.get(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 98, "n_pass": [214, 17, 8]}
{"time": "2021-02-23 20:03:26.684649", "score": "0.7825", "loss": "18.4278", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(v1.wordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 96, "n_pass": [216, 18, 9]}
{"time": "2021-02-23 20:03:28.591553", "score": "0.7611", "loss": "17.7123", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap.get(v1.wordIndex)); }", "n_tokens": 94, "n_pass": [218, 19, 10]}
{"time": "2021-02-23 20:03:30.550462", "score": "0.7315", "loss": "17.507", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(v1.wordIndex)); }", "n_tokens": 92, "n_pass": [222, 20, 11]}
{"time": "2021-02-23 20:03:32.489803", "score": "0.6656", "loss": "17.0471", "code": "float cosDistance(Vector v) { float sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 90, "n_pass": [224, 21, 12]}
{"time": "2021-02-23 20:03:35.319111", "score": "0.7015", "loss": "17.4985", "code": "float cosDistance(Vector v) { sum ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 88, "n_pass": [237, 22, 13]}
{"time": "2021-02-23 20:03:37.173581", "score": "0.7262", "loss": "17.6174", "code": "float cosDistance(Vector v) { ; for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 86, "n_pass": [238, 23, 14]}
{"time": "2021-02-23 20:03:39.062507", "score": "0.7262", "loss": "17.6174", "code": "float cosDistance(Vector v) { for (int i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 84, "n_pass": [239, 24, 15]}
{"time": "2021-02-23 20:03:40.928407", "score": "0.472", "loss": "16.7392", "code": "float cosDistance(Vector v) { for (i = 0; i < v1.length; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 82, "n_pass": [242, 25, 16]}
{"time": "2021-02-23 20:03:42.807873", "score": "0.4253", "loss": "16.4376", "code": "float cosDistance(Vector v) { for (i = 0; i < vlength; i++) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 80, "n_pass": [249, 26, 17]}
{"time": "2021-02-23 20:03:44.684265", "score": "0.4047", "loss": "16.3207", "code": "float cosDistance(Vector v) { for (i = 0; i < vlength; i) { sum  (v1[i] * v2[i]); } return sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 78, "n_pass": [252, 27, 18]}
{"time": "2021-02-23 20:03:48.472485", "score": "0.3633", "loss": "16.5078", "code": "float cosDistance(Vector v) { for (i = 0; i < vlength; i) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) * cMap(vwordIndex)); }", "n_tokens": 76, "n_pass": [266, 29, 19]}
{"time": "2021-02-23 20:03:52.198373", "score": "0.4937", "loss": "16.7951", "code": "float cosDistance(Vector v) { for (i = 0; i < vlength; i) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 74, "n_pass": [272, 31, 20]}
{"time": "2021-02-23 20:03:54.985885", "score": "0.4624", "loss": "17.1553", "code": "float cosDistance(Vector v) { for (i = 0; i <length; i) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 72, "n_pass": [293, 32, 21]}
{"time": "2021-02-23 20:03:56.883863", "score": "0.405", "loss": "16.9791", "code": "float cosDistance(Vector v) { for (i = 0; i <length;) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 70, "n_pass": [295, 33, 22]}
{"time": "2021-02-23 20:04:03.407872", "score": "0.4227", "loss": "17.5872", "code": "float cosDistance(Vector v) { for (i = 0; ilength;) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 68, "n_pass": [333, 36, 23]}
{"time": "2021-02-23 20:04:10.132195", "score": "0.4977", "loss": "16.9277", "code": "float cosDistance(Vector v) { for (i = 0;length;) { sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 66, "n_pass": [371, 39, 24]}
{"time": "2021-02-23 20:04:25.252095", "score": "0.4977", "loss": "16.9277", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum  (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 65, "n_pass": [468, 42, 25]}
{"time": "2021-02-23 20:04:28.933198", "score": "0.4977", "loss": "16.9277", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum (v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 64, "n_pass": [470, 44, 26]}
{"time": "2021-02-23 20:04:30.809188", "score": "0.4977", "loss": "16.9277", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(v1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 63, "n_pass": [471, 45, 27]}
{"time": "2021-02-23 20:04:32.678446", "score": "0.4826", "loss": "16.9875", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i] * v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 62, "n_pass": [473, 46, 28]}
{"time": "2021-02-23 20:04:34.547127", "score": "0.4826", "loss": "16.9875", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]* v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 61, "n_pass": [478, 47, 29]}
{"time": "2021-02-23 20:04:36.428347", "score": "0.4826", "loss": "16.9875", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*v2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 60, "n_pass": [480, 48, 30]}
{"time": "2021-02-23 20:04:38.305414", "score": "0.3677", "loss": "17.0711", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]); } sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 59, "n_pass": [481, 49, 31]}
{"time": "2021-02-23 20:04:40.175155", "score": "0.3677", "loss": "17.0711", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);} sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 58, "n_pass": [488, 50, 32]}
{"time": "2021-02-23 20:04:42.027420", "score": "0.3677", "loss": "17.0711", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum (cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 57, "n_pass": [490, 51, 33]}
{"time": "2021-02-23 20:04:45.673865", "score": "0.3677", "loss": "17.0711", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum(cMap(vwordIndex) *(vwordIndex)); }", "n_tokens": 56, "n_pass": [492, 53, 34]}
{"time": "2021-02-23 20:04:47.590741", "score": "0.5103", "loss": "16.976", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((vwordIndex) *(vwordIndex)); }", "n_tokens": 55, "n_pass": [494, 54, 35]}
{"time": "2021-02-23 20:04:49.453472", "score": "0.6217", "loss": "17.4146", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex) *(vwordIndex)); }", "n_tokens": 54, "n_pass": [496, 55, 36]}
{"time": "2021-02-23 20:04:51.325625", "score": "0.6217", "loss": "17.4146", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)*(vwordIndex)); }", "n_tokens": 53, "n_pass": [499, 56, 37]}
{"time": "2021-02-23 20:04:53.241722", "score": "0.7535", "loss": "17.9059", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(vwordIndex)); }", "n_tokens": 52, "n_pass": [500, 57, 38]}
{"time": "2021-02-23 20:04:55.107937", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex)); }", "n_tokens": 51, "n_pass": [502, 58, 39]}
{"time": "2021-02-23 20:04:57.063477", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v) { for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 50, "n_pass": [507, 59, 40]}
{"time": "2021-02-23 20:04:59.825148", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v){ for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 49, "n_pass": [517, 60, 41]}
{"time": "2021-02-23 20:05:01.718695", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v){for (i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 48, "n_pass": [519, 61, 42]}
{"time": "2021-02-23 20:05:03.639028", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v){for(i = 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 47, "n_pass": [521, 62, 43]}
{"time": "2021-02-23 20:05:05.547114", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v){for(i= 0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 46, "n_pass": [524, 63, 44]}
{"time": "2021-02-23 20:05:07.448581", "score": "0.8122", "loss": "18.4649", "code": "float cosDistance(Vector v){for(i=0;length;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 45, "n_pass": [526, 64, 45]}
{"time": "2021-02-23 20:05:09.316056", "score": "0.7366", "loss": "18.4814", "code": "float cosDistance(Vector v){for(i=0;;) {sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 44, "n_pass": [529, 65, 46]}
{"time": "2021-02-23 20:05:11.202398", "score": "0.7366", "loss": "18.4814", "code": "float cosDistance(Vector v){for(i=0;;){sum(1[i]*2[i]);}sum((wordIndex)(wordIndex));}", "n_tokens": 43, "n_pass": [532, 66, 47]}
{"time": "2021-02-23 20:05:14.947669", "score": "0.3395", "loss": "18.0664", "code": "float cosDistance(Vector v){for(i=0;;){sum(1[i]*2[i]);}((wordIndex)(wordIndex));}", "n_tokens": 42, "n_pass": [548, 68, 48]}

Minimal simplified code:
float cosDistance(Vector v){for(i=0;;){sum(1[i]*2[i]);}((wordIndex)(wordIndex));}

