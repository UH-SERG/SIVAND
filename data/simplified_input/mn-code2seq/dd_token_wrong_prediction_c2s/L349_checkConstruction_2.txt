
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/asn1/test/AdmissionsUnitTest_checkConstruction.java
method_name = checkConstruction
method_body = private void checkConstruction(Admissions admissions, GeneralName name, NamingAuthority auth) throws IOException { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); checkValues(admissions, name, auth); ASN1InputStream aIn = new ASN1InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }
predict, score, loss = checkValues, 0.8523781895637512, 12.113996505737305

Trace of simplified code(s):
{"time": "2021-02-24 09:28:28.688337", "score": "0.805", "loss": "11.5372", "code": "private void checkConstruction(Admissions admissions, GeneralName name, NamingAuthority auth) throws IOException { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); checkValues(admissions, name, auth); ASN1InputStream aIn = new ASN1InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:28:30.683711", "score": "0.8506", "loss": "11.6932", "code": "private void checkConstruction(Admissions admissions, GeneralName name, NamingAuthority auth) throws IOException { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissionsname, auth); ASN1InputStream aIn = new ASN1InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 129, "n_pass": [50, 2, 2]}
{"time": "2021-02-24 09:28:32.636389", "score": "0.7662", "loss": "11.7344", "code": "private void checkConstruction(Admissions admissions, GeneralName name, NamingAuthority auth) throws IOException { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissionsname, auth); ASN11InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 120, "n_pass": [52, 3, 3]}
{"time": "2021-02-24 09:28:45.219991", "score": "0.7191", "loss": "11.535", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) throws IOException { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissionsname, auth); ASN11InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 116, "n_pass": [111, 9, 4]}
{"time": "2021-02-24 09:28:47.172779", "score": "0.7198", "loss": "12.2907", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissionsname, auth); ASN11InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 112, "n_pass": [113, 10, 5]}
{"time": "2021-02-24 09:28:51.018130", "score": "0.8379", "loss": "12.5627", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(admissions.toASN1Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 108, "n_pass": [120, 12, 6]}
{"time": "2021-02-24 09:28:52.953771", "score": "0.6611", "loss": "12.4664", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(Primitive().getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 104, "n_pass": [123, 13, 7]}
{"time": "2021-02-24 09:28:54.885048", "score": "0.6799", "loss": "12.0534", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1Sequence info = (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 100, "n_pass": [124, 14, 8]}
{"time": "2021-02-24 09:28:56.789736", "score": "0.6707", "loss": "12.3717", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN1Sequence) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 96, "n_pass": [127, 15, 9]}
{"time": "2021-02-24 09:29:06.238110", "score": "0.6117", "loss": "12.5899", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance(info); checkValues(admissions, name, auth); }", "n_tokens": 94, "n_pass": [196, 19, 10]}
{"time": "2021-02-24 09:29:13.984503", "score": "0.6897", "loss": "12.8842", "code": "private void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 91, "n_pass": [204, 23, 11]}
{"time": "2021-02-24 09:29:19.711798", "score": "0.7535", "loss": "13.1835", "code": "void checkConstruction(Admissions  name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 89, "n_pass": [210, 26, 12]}
{"time": "2021-02-24 09:29:48.436792", "score": "0.6398", "loss": "12.7955", "code": "void checkConstruction(Admissions name, NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 88, "n_pass": [339, 35, 13]}
{"time": "2021-02-24 09:29:50.314492", "score": "0.6814", "loss": "12.7152", "code": "void checkConstruction(Admissions name,NamingAuthority auth) { checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 87, "n_pass": [343, 36, 14]}
{"time": "2021-02-24 09:29:52.218314", "score": "0.6781", "loss": "12.6116", "code": "void checkConstruction(Admissions name,NamingAuthority auth){ checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 86, "n_pass": [348, 37, 15]}
{"time": "2021-02-24 09:29:54.143436", "score": "0.6814", "loss": "12.775", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions, name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 85, "n_pass": [350, 38, 16]}
{"time": "2021-02-24 09:29:56.055875", "score": "0.6411", "loss": "12.7234", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name, auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 84, "n_pass": [355, 39, 17]}
{"time": "2021-02-24 09:29:57.943806", "score": "0.6614", "loss": "12.6403", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth); admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 83, "n_pass": [358, 40, 18]}
{"time": "2021-02-24 09:29:59.968665", "score": "0.6299", "loss": "12.5369", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions = Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 82, "n_pass": [362, 41, 19]}
{"time": "2021-02-24 09:30:01.857275", "score": "0.7224", "loss": "12.833", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions= Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 81, "n_pass": [364, 42, 20]}
{"time": "2021-02-24 09:30:03.775578", "score": "0.6744", "loss": "12.8516", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance(admissions); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 80, "n_pass": [366, 43, 21]}
{"time": "2021-02-24 09:30:07.581264", "score": "0.6825", "loss": "12.604", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance(); ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 79, "n_pass": [371, 45, 22]}
{"time": "2021-02-24 09:30:09.535506", "score": "0.6825", "loss": "12.604", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN11InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 78, "n_pass": [374, 46, 23]}
{"time": "2021-02-24 09:30:11.453729", "score": "0.6825", "loss": "12.604", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN1InputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 77, "n_pass": [376, 47, 24]}
{"time": "2021-02-24 09:30:13.364609", "score": "0.6825", "loss": "12.604", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASNInputStream(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 76, "n_pass": [377, 48, 25]}
{"time": "2021-02-24 09:30:15.279379", "score": "0.6937", "loss": "12.8339", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded()); ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 75, "n_pass": [378, 49, 26]}
{"time": "2021-02-24 09:30:17.203912", "score": "0.6937", "loss": "12.8339", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN1= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 74, "n_pass": [385, 50, 27]}
{"time": "2021-02-24 09:30:19.541765", "score": "0.6937", "loss": "12.8339", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN= (ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 73, "n_pass": [387, 51, 28]}
{"time": "2021-02-24 09:30:21.408589", "score": "0.6937", "loss": "12.8339", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN) aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 72, "n_pass": [389, 52, 29]}
{"time": "2021-02-24 09:30:23.316693", "score": "0.6937", "loss": "12.8339", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN)aIn.readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 71, "n_pass": [393, 53, 30]}
{"time": "2021-02-24 09:30:25.188963", "score": "0.6334", "loss": "12.5387", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN).readObject(); admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 70, "n_pass": [394, 54, 31]}
{"time": "2021-02-24 09:30:28.996743", "score": "0.6334", "loss": "12.5387", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN).readObject();admissions = Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 69, "n_pass": [400, 56, 32]}
{"time": "2021-02-24 09:30:30.868586", "score": "0.6334", "loss": "12.5387", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN).readObject();admissions= Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 68, "n_pass": [402, 57, 33]}
{"time": "2021-02-24 09:30:32.781718", "score": "0.6334", "loss": "12.5387", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();ASN(getEncoded());ASN=(ASN).readObject();admissions=Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 67, "n_pass": [404, 58, 34]}
{"time": "2021-02-24 09:30:48.860558", "score": "0.7405", "loss": "12.1204", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN).readObject();admissions=Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 66, "n_pass": [446, 66, 35]}
{"time": "2021-02-24 09:30:52.663408", "score": "0.6044", "loss": "12.5071", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance; checkValues(admissions, name, auth); }", "n_tokens": 65, "n_pass": [458, 68, 36]}
{"time": "2021-02-24 09:31:12.776128", "score": "0.6044", "loss": "12.5071", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance;checkValues(admissions, name, auth); }", "n_tokens": 64, "n_pass": [531, 77, 37]}
{"time": "2021-02-24 09:31:14.690120", "score": "0.6044", "loss": "12.5071", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance;checkValues(admissions,name, auth); }", "n_tokens": 63, "n_pass": [535, 78, 38]}
{"time": "2021-02-24 09:31:16.603944", "score": "0.6044", "loss": "12.5071", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance;checkValues(admissions,name,auth); }", "n_tokens": 62, "n_pass": [538, 79, 39]}
{"time": "2021-02-24 09:31:18.502742", "score": "0.6044", "loss": "12.5071", "code": "void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance;checkValues(admissions,name,auth);}", "n_tokens": 61, "n_pass": [542, 80, 40]}

Minimal simplified code:
void checkConstruction(Admissions name,NamingAuthority auth){checkValues(admissions,name,auth);admissions=Admissions.getInstance();(getEncoded());ASN=(ASN)readObject();admissions=Admissions.getInstance;checkValues(admissions,name,auth);}

