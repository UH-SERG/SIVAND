
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/classify/evaluate/ConfusionMatrix_getClassPrior.java
method_name = getClassPrior
method_body = public double getClassPrior(int classIndex) { double sum = 0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }
predict, score, loss = getValue, 0.4821912944316864, 18.557947158813477

Trace of simplified code(s):
{"time": "2021-02-24 00:50:04.925303", "score": "0.4822", "loss": "18.5579", "code": "public double getClassPrior(int classIndex) { double sum = 0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 78, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 00:50:07.305923", "score": "0.5265", "loss": "18.6383", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0; i < numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 73, "n_pass": [47, 2, 2]}
{"time": "2021-02-24 00:50:09.219906", "score": "0.5077", "loss": "18.8523", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { sum += values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 68, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 00:50:11.121620", "score": "0.5192", "loss": "19.025", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values[classIndex][i]; } return sum / classifications.size(); }", "n_tokens": 63, "n_pass": [54, 4, 4]}
{"time": "2021-02-24 00:50:17.676046", "score": "0.4906", "loss": "19.0876", "code": "public double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values[classIndex]; } return sum / classifications.size(); }", "n_tokens": 60, "n_pass": [97, 7, 5]}
{"time": "2021-02-24 00:50:23.770282", "score": "0.4906", "loss": "19.0876", "code": "double getClassPrior(int classIndex) {  0; for (int i = 0;numClasses; i++) { values[classIndex]; } return sum / classifications.size(); }", "n_tokens": 58, "n_pass": [104, 10, 6]}
{"time": "2021-02-24 00:50:26.124030", "score": "0.4906", "loss": "19.0876", "code": "double getClassPrior(int classIndex) {0; for (int i = 0;numClasses; i++) { values[classIndex]; } return sum / classifications.size(); }", "n_tokens": 56, "n_pass": [110, 11, 7]}
{"time": "2021-02-24 00:50:28.057671", "score": "0.4746", "loss": "18.5865", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) { values[classIndex]; } return sum / classifications.size(); }", "n_tokens": 54, "n_pass": [111, 12, 8]}
{"time": "2021-02-24 00:50:31.790898", "score": "0.4728", "loss": "20.0419", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) { values; } return sum / classifications.size(); }", "n_tokens": 51, "n_pass": [122, 14, 9]}
{"time": "2021-02-24 00:50:46.030282", "score": "0.4728", "loss": "20.0419", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) {values; } return sum / classifications.size(); }", "n_tokens": 50, "n_pass": [187, 18, 10]}
{"time": "2021-02-24 00:50:47.925407", "score": "0.4861", "loss": "19.9761", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) {; } return sum / classifications.size(); }", "n_tokens": 49, "n_pass": [188, 19, 11]}
{"time": "2021-02-24 00:50:49.764364", "score": "0.4861", "loss": "19.9761", "code": "double getClassPrior(int classIndex) { for (int i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 47, "n_pass": [189, 20, 12]}
{"time": "2021-02-24 00:50:54.791029", "score": "0.4861", "loss": "19.9761", "code": "double getClassPrior(int classIndex){ for (int i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 46, "n_pass": [206, 22, 13]}
{"time": "2021-02-24 00:50:56.635733", "score": "0.4861", "loss": "19.9761", "code": "double getClassPrior(int classIndex){for (int i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 45, "n_pass": [208, 23, 14]}
{"time": "2021-02-24 00:50:58.526007", "score": "0.4861", "loss": "19.9761", "code": "double getClassPrior(int classIndex){for(int i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 44, "n_pass": [210, 24, 15]}
{"time": "2021-02-24 00:51:00.406442", "score": "0.4478", "loss": "19.7827", "code": "double getClassPrior(int classIndex){for( i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 43, "n_pass": [212, 25, 16]}
{"time": "2021-02-24 00:51:02.244379", "score": "0.4478", "loss": "19.7827", "code": "double getClassPrior(int classIndex){for(i = 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 42, "n_pass": [213, 26, 17]}
{"time": "2021-02-24 00:51:04.101700", "score": "0.4478", "loss": "19.7827", "code": "double getClassPrior(int classIndex){for(i= 0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 41, "n_pass": [215, 27, 18]}
{"time": "2021-02-24 00:51:05.959255", "score": "0.4478", "loss": "19.7827", "code": "double getClassPrior(int classIndex){for(i=0;numClasses; i++) {} return sum / classifications.size(); }", "n_tokens": 40, "n_pass": [217, 28, 19]}
{"time": "2021-02-24 00:51:07.793062", "score": "0.4906", "loss": "19.9346", "code": "double getClassPrior(int classIndex){for(i=0;; i++) {} return sum / classifications.size(); }", "n_tokens": 39, "n_pass": [220, 29, 20]}
{"time": "2021-02-24 00:51:09.640447", "score": "0.4906", "loss": "19.9346", "code": "double getClassPrior(int classIndex){for(i=0;;i++) {} return sum / classifications.size(); }", "n_tokens": 38, "n_pass": [222, 30, 21]}
{"time": "2021-02-24 00:51:11.499532", "score": "0.4906", "loss": "19.9346", "code": "double getClassPrior(int classIndex){for(i=0;;i++){} return sum / classifications.size(); }", "n_tokens": 37, "n_pass": [227, 31, 22]}
{"time": "2021-02-24 00:51:16.530404", "score": "0.5218", "loss": "19.77", "code": "double getClassPrior(int classIndex){for(i0;;i++){} return sum / classifications.size(); }", "n_tokens": 36, "n_pass": [249, 33, 23]}
{"time": "2021-02-24 00:51:18.345534", "score": "0.5218", "loss": "19.77", "code": "double getClassPrior(int classIndex){for(i;;i++){} return sum / classifications.size(); }", "n_tokens": 35, "n_pass": [250, 34, 24]}
{"time": "2021-02-24 00:51:23.386157", "score": "0.5519", "loss": "19.36", "code": "double getClassPrior(int classIndex){for(;;i++){} return sum / classifications.size(); }", "n_tokens": 34, "n_pass": [277, 36, 25]}
{"time": "2021-02-24 00:51:30.926051", "score": "0.5519", "loss": "19.36", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum / classifications.size(); }", "n_tokens": 33, "n_pass": [321, 38, 26]}
{"time": "2021-02-24 00:51:33.606071", "score": "0.5519", "loss": "19.36", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum/ classifications.size(); }", "n_tokens": 32, "n_pass": [325, 39, 27]}
{"time": "2021-02-24 00:51:35.436855", "score": "0.5519", "loss": "19.36", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum/classifications.size(); }", "n_tokens": 31, "n_pass": [327, 40, 28]}
{"time": "2021-02-24 00:51:39.050403", "score": "0.5519", "loss": "19.36", "code": "double getClassPrior(int classIndex){for(;;i++){}return sum/classifications.size();}", "n_tokens": 30, "n_pass": [334, 42, 29]}

Minimal simplified code:
double getClassPrior(int classIndex){for(;;i++){}return sum/classifications.size();}

