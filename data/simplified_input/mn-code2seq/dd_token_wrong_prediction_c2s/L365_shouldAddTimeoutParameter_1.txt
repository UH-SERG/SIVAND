
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/ws/src/test/java/org/kaazing/gateway/transport/ws/bridge/extensions/idletimeout/IdleTimeouExtensionTest_shouldAddTimeoutParameter.java
method_name = shouldAddTimeoutParameter
method_body = @Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested, extensionHelper, 1234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }
predict, score, loss = testExtensionIdleTimeout, 0.7012290954589844, 21.325992584228516

Trace of simplified code(s):
{"time": "2021-02-24 00:23:54.041709", "score": "0.7012", "loss": "21.326", "code": "@Test public void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested, extensionHelper, 1234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 94, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 00:23:55.968583", "score": "0.7225", "loss": "25.7415", "code": "void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested, extensionHelper, 1234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 89, "n_pass": [44, 2, 2]}
{"time": "2021-02-24 00:23:59.702384", "score": "0.7236", "loss": "25.5094", "code": "void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested234L); assertEquals(extensionName, extension.getExtensionHeader().getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 83, "n_pass": [49, 4, 3]}
{"time": "2021-02-24 00:24:01.597492", "score": "0.7368", "loss": "24.8716", "code": "void shouldAddTimeoutParameter() throws Exception { IdleTimeoutExtension extension = new IdleTimeoutExtension(requested234L); assertEquals(extensionName, getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 77, "n_pass": [52, 5, 4]}
{"time": "2021-02-24 00:24:03.529589", "score": "0.6183", "loss": "25.442", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requested234L); assertEquals(extensionName, getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 71, "n_pass": [62, 6, 5]}
{"time": "2021-02-24 00:24:07.320729", "score": "0.6183", "loss": "25.442", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(extensionName, getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 68, "n_pass": [101, 8, 6]}
{"time": "2021-02-24 00:24:09.214834", "score": "0.6438", "loss": "25.7804", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(getExtensionToken()); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 65, "n_pass": [103, 9, 7]}
{"time": "2021-02-24 00:24:11.119272", "score": "0.6693", "loss": "26.0591", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(1234L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 62, "n_pass": [104, 10, 8]}
{"time": "2021-02-24 00:24:12.982155", "score": "0.6693", "loss": "26.0591", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParameters().get(0).getValue()); }", "n_tokens": 59, "n_pass": [108, 11, 9]}
{"time": "2021-02-24 00:24:16.813895", "score": "0.6612", "loss": "27.3613", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeader().getParametersget(0).getValue()); }", "n_tokens": 56, "n_pass": [113, 13, 10]}
{"time": "2021-02-24 00:24:26.264988", "score": "0.6619", "loss": "27.2559", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeader.getParametersget(0).getValue()); }", "n_tokens": 54, "n_pass": [171, 16, 11]}
{"time": "2021-02-24 00:24:28.128751", "score": "0.686", "loss": "27.8448", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue()); }", "n_tokens": 52, "n_pass": [172, 17, 12]}
{"time": "2021-02-24 00:24:30.003226", "score": "0.6552", "loss": "27.3011", "code": "void shouldAddTimeoutParameter() throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 50, "n_pass": [176, 18, 13]}
{"time": "2021-02-24 00:24:32.755183", "score": "0.6552", "loss": "27.3011", "code": "void shouldAddTimeoutParameter()throws Exception { new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 49, "n_pass": [184, 19, 14]}
{"time": "2021-02-24 00:24:34.617034", "score": "0.6552", "loss": "27.3011", "code": "void shouldAddTimeoutParameter()throws Exception{ new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 48, "n_pass": [188, 20, 15]}
{"time": "2021-02-24 00:24:36.479806", "score": "0.6552", "loss": "27.3011", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(requestedL); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 47, "n_pass": [190, 21, 16]}
{"time": "2021-02-24 00:24:42.009541", "score": "0.6941", "loss": "27.8795", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(L); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 46, "n_pass": [195, 24, 17]}
{"time": "2021-02-24 00:24:43.866840", "score": "0.701", "loss": "27.826", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(); assertEquals(); assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 45, "n_pass": [196, 25, 18]}
{"time": "2021-02-24 00:24:45.739084", "score": "0.7345", "loss": "27.902", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(); assertEquals; assertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 43, "n_pass": [200, 26, 19]}
{"time": "2021-02-24 00:24:47.590116", "score": "0.6467", "loss": "26.9938", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(); assertEqualsassertEquals(Long.toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 41, "n_pass": [201, 27, 20]}
{"time": "2021-02-24 00:24:49.479969", "score": "0.6991", "loss": "27.8244", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(); assertEqualsassertEquals(toString(4L), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 39, "n_pass": [203, 28, 21]}
{"time": "2021-02-24 00:24:51.326861", "score": "0.7806", "loss": "27.8341", "code": "void shouldAddTimeoutParameter()throws Exception{new IdleTimeoutExtension(); assertEqualsassertEquals(toString(), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 37, "n_pass": [205, 29, 22]}
{"time": "2021-02-24 00:24:59.583121", "score": "0.6815", "loss": "26.9788", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension(); assertEqualsassertEquals(toString(), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 36, "n_pass": [224, 33, 23]}
{"time": "2021-02-24 00:25:01.456155", "score": "0.7105", "loss": "27.8558", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(), extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 34, "n_pass": [229, 34, 24]}
{"time": "2021-02-24 00:25:11.032001", "score": "0.7105", "loss": "27.8558", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(),extension.getExtensionHeaderget(0).getValue); }", "n_tokens": 33, "n_pass": [275, 38, 25]}
{"time": "2021-02-24 00:25:16.492739", "score": "0.7448", "loss": "27.2888", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(),extension.getExtensionHeader(0).getValue); }", "n_tokens": 32, "n_pass": [278, 41, 26]}
{"time": "2021-02-24 00:25:18.304035", "score": "0.7069", "loss": "27.1492", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(),extension.getExtensionHeader().getValue); }", "n_tokens": 31, "n_pass": [280, 42, 27]}
{"time": "2021-02-24 00:25:20.140188", "score": "0.7069", "loss": "27.1492", "code": "void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(),extension.getExtensionHeader().getValue);}", "n_tokens": 30, "n_pass": [286, 43, 28]}

Minimal simplified code:
void shouldAddTimeoutParameter()throws Exception{newIdleTimeoutExtension();assertEquals(toString(),extension.getExtensionHeader().getValue);}

