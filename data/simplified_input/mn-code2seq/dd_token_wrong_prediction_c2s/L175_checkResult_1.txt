
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-uma/src/test/java/org/forgerock/openam/uma/rest/UmaEnabledFilterTest_checkResult.java
method_name = checkResult
method_body = private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).failedWithException().isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }
predict, score, loss = assertFailure, 0.3504297137260437, 6.588659763336182

Trace of simplified code(s):
{"time": "2021-02-23 21:58:05.050528", "score": "0.3504", "loss": "6.5887", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { assertThat(promise).failedWithException().isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }", "n_tokens": 68, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:58:06.922856", "score": "0.2799", "loss": "6.1979", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } else { assertThat(promise).succeeded(); } }", "n_tokens": 59, "n_pass": [24, 2, 2]}
{"time": "2021-02-23 21:58:09.733668", "score": "0.3558", "loss": "6.4463", "code": "private void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 57, "n_pass": [93, 3, 3]}
{"time": "2021-02-23 21:58:11.606220", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure, Promise<?, ResourceException> promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 55, "n_pass": [100, 4, 4]}
{"time": "2021-02-23 21:58:20.800113", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?, ResourceException> promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 54, "n_pass": [187, 5, 5]}
{"time": "2021-02-23 21:58:22.677857", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException> promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 53, "n_pass": [191, 6, 6]}
{"time": "2021-02-23 21:58:24.530265", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise) { if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 52, "n_pass": [194, 7, 7]}
{"time": "2021-02-23 21:58:26.377179", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){ if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 51, "n_pass": [197, 8, 8]}
{"time": "2021-02-23 21:58:28.247263", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if (expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 50, "n_pass": [199, 9, 9]}
{"time": "2021-02-23 21:58:30.119533", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure) { isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 49, "n_pass": [201, 10, 10]}
{"time": "2021-02-23 21:58:31.992457", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){ isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 48, "n_pass": [205, 11, 11]}
{"time": "2021-02-23 21:58:33.836550", "score": "0.3558", "loss": "6.4463", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){isInstanceOf(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 47, "n_pass": [207, 12, 12]}
{"time": "2021-02-23 21:58:35.641697", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class); } { assertThat(promise).succeeded(); } }", "n_tokens": 46, "n_pass": [208, 13, 13]}
{"time": "2021-02-23 21:58:39.432901", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);} { assertThat(promise).succeeded(); } }", "n_tokens": 45, "n_pass": [215, 15, 14]}
{"time": "2021-02-23 21:58:41.265939", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);}{ assertThat(promise).succeeded(); } }", "n_tokens": 44, "n_pass": [217, 16, 15]}
{"time": "2021-02-23 21:58:43.166491", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);}{assertThat(promise).succeeded(); } }", "n_tokens": 43, "n_pass": [219, 17, 16]}
{"time": "2021-02-23 21:58:52.777963", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);}{assertThat(promise).succeeded();} }", "n_tokens": 42, "n_pass": [268, 21, 17]}
{"time": "2021-02-23 21:58:54.663417", "score": "0.3427", "loss": "6.6768", "code": "void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);}{assertThat(promise).succeeded();}}", "n_tokens": 41, "n_pass": [269, 22, 18]}

Minimal simplified code:
void checkResult(boolean expectFailure,Promise<?,ResourceException>promise){if(expectFailure){(NotSupportedException.class);}{assertThat(promise).succeeded();}}

