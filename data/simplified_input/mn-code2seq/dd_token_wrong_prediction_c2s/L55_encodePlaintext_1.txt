
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/tls/TlsStreamCipher_encodePlaintext.java
method_name = encodePlaintext
method_body = public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); encryptCipher.processBytes(mac, 0, mac.length, outBuf, len); return outBuf; }
predict, score, loss = encrypt, 0.9925353527069092, 16.051883697509766

Trace of simplified code(s):
{"time": "2021-02-24 05:48:04.678501", "score": "0.9935", "loss": "17.1939", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); encryptCipher.processBytes(mac, 0, mac.length, outBuf, len); return outBuf; }", "n_tokens": 159, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:48:06.641810", "score": "0.9928", "loss": "16.4521", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, type, mac.length, outBuf, len); return outBuf; }", "n_tokens": 139, "n_pass": [26, 2, 2]}
{"time": "2021-02-24 05:48:08.611654", "score": "0.9761", "loss": "15.5166", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 129, "n_pass": [47, 3, 3]}
{"time": "2021-02-24 05:48:10.586645", "score": "0.9876", "loss": "14.8382", "code": "public byte[] encodePlaintext(long[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext, offset, len, outBuf, 0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 119, "n_pass": [49, 4, 4]}
{"time": "2021-02-24 05:48:12.580065", "score": "0.9732", "loss": "13.851", "code": "public byte[] encodePlaintext(long[] plaintext, int offset, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 109, "n_pass": [57, 5, 5]}
{"time": "2021-02-24 05:48:14.544725", "score": "0.9748", "loss": "13.6963", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(encryptCipher, true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 104, "n_pass": [100, 6, 6]}
{"time": "2021-02-24 05:48:16.971798", "score": "0.9314", "loss": "13.1706", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( true, seqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 102, "n_pass": [173, 7, 7]}
{"time": "2021-02-24 05:48:18.908342", "score": "0.8645", "loss": "12.6131", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); } byte[] outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 100, "n_pass": [175, 8, 8]}
{"time": "2021-02-24 05:48:20.888570", "score": "0.886", "loss": "12.9745", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[len + writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 97, "n_pass": [179, 9, 9]}
{"time": "2021-02-24 05:48:22.825648", "score": "0.8718", "loss": "13.1524", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[ writeMac.getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 94, "n_pass": [183, 10, 10]}
{"time": "2021-02-24 05:48:24.756883", "score": "0.9047", "loss": "13.5655", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); return outBuf; }", "n_tokens": 91, "n_pass": [184, 11, 11]}
{"time": "2021-02-24 05:48:26.663582", "score": "0.9065", "loss": "13.3221", "code": "public byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 88, "n_pass": [197, 12, 12]}
{"time": "2021-02-24 05:48:28.570888", "score": "0.9065", "loss": "13.3221", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV( trueseqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 86, "n_pass": [199, 13, 13]}
{"time": "2021-02-24 05:48:30.516007", "score": "0.9009", "loss": "13.4723", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(seqNo); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 84, "n_pass": [215, 14, 14]}
{"time": "2021-02-24 05:48:40.559824", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV(); }  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 83, "n_pass": [318, 15, 15]}
{"time": "2021-02-24 05:48:42.491788", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}  outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 82, "n_pass": [320, 16, 16]}
{"time": "2021-02-24 05:48:44.373896", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();} outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 81, "n_pass": [322, 17, 17]}
{"time": "2021-02-24 05:48:46.288976", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf = new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 80, "n_pass": [323, 18, 18]}
{"time": "2021-02-24 05:48:48.247602", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf= new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 79, "n_pass": [325, 19, 19]}
{"time": "2021-02-24 05:48:50.152936", "score": "0.9003", "loss": "13.3558", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=new byte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 78, "n_pass": [327, 20, 20]}
{"time": "2021-02-24 05:48:52.059831", "score": "0.8652", "loss": "12.592", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()]; encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 77, "n_pass": [329, 21, 21]}
{"time": "2021-02-24 05:48:54.014570", "score": "0.8652", "loss": "12.592", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher.processBytes(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 76, "n_pass": [337, 22, 22]}
{"time": "2021-02-24 05:48:55.936489", "score": "0.9724", "loss": "13.4347", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext,0); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 74, "n_pass": [339, 23, 23]}
{"time": "2021-02-24 05:48:57.856676", "score": "0.9645", "loss": "13.6797", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte[] mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 72, "n_pass": [341, 24, 24]}
{"time": "2021-02-24 05:48:59.791952", "score": "0.9497", "loss": "12.9786", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac.calculateMac(seqNo, typelen); ; }", "n_tokens": 70, "n_pass": [344, 25, 25]}
{"time": "2021-02-24 05:49:01.719632", "score": "0.9622", "loss": "12.3899", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo, typelen); ; }", "n_tokens": 68, "n_pass": [348, 26, 26]}
{"time": "2021-02-24 05:49:03.613132", "score": "0.9525", "loss": "11.7185", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNotypelen); ; }", "n_tokens": 66, "n_pass": [350, 27, 27]}
{"time": "2021-02-24 05:49:05.561686", "score": "0.9528", "loss": "11.8817", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); ; }", "n_tokens": 64, "n_pass": [351, 28, 28]}
{"time": "2021-02-24 05:49:07.511833", "score": "0.9528", "loss": "11.8817", "code": "byte[] encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 62, "n_pass": [353, 29, 29]}
{"time": "2021-02-24 05:49:09.417143", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[] plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 61, "n_pass": [358, 30, 30]}
{"time": "2021-02-24 05:49:11.336159", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext, int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 60, "n_pass": [364, 31, 31]}
{"time": "2021-02-24 05:49:13.267044", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len) { if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 59, "n_pass": [367, 32, 32]}
{"time": "2021-02-24 05:49:15.212729", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len){ if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 58, "n_pass": [372, 33, 33]}
{"time": "2021-02-24 05:49:17.080989", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len){if (usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 57, "n_pass": [374, 34, 34]}
{"time": "2021-02-24 05:49:19.012618", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce) { updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 56, "n_pass": [376, 35, 35]}
{"time": "2021-02-24 05:49:20.902430", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){ updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 55, "n_pass": [380, 36, 36]}
{"time": "2021-02-24 05:49:22.793702", "score": "0.9528", "loss": "11.8817", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf=newbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 54, "n_pass": [382, 37, 37]}
{"time": "2021-02-24 05:49:24.698421", "score": "0.9636", "loss": "11.208", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBufnewbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 53, "n_pass": [389, 38, 38]}
{"time": "2021-02-24 05:49:26.561599", "score": "0.9636", "loss": "11.208", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBufbyte[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 52, "n_pass": [390, 39, 39]}
{"time": "2021-02-24 05:49:28.470084", "score": "0.9667", "loss": "11.2118", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); byte mac = writeMac(seqNo); }", "n_tokens": 51, "n_pass": [391, 40, 40]}
{"time": "2021-02-24 05:49:32.237199", "score": "0.9409", "loss": "11.6276", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac = writeMac(seqNo); }", "n_tokens": 49, "n_pass": [401, 42, 41]}
{"time": "2021-02-24 05:49:34.117032", "score": "0.9212", "loss": "11.955", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac =(seqNo); }", "n_tokens": 47, "n_pass": [404, 43, 42]}
{"time": "2021-02-24 05:49:37.939519", "score": "0.957", "loss": "13.0611", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext); mac(seqNo); }", "n_tokens": 45, "n_pass": [444, 45, 43]}
{"time": "2021-02-24 05:49:41.650544", "score": "0.9035", "loss": "11.1865", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext);(seqNo); }", "n_tokens": 43, "n_pass": [483, 47, 44]}
{"time": "2021-02-24 05:49:46.861818", "score": "0.9035", "loss": "11.1865", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher(plaintext);(seqNo);}", "n_tokens": 42, "n_pass": [534, 49, 45]}
{"time": "2021-02-24 05:49:50.655522", "score": "0.9016", "loss": "12.2888", "code": "byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher();(seqNo);}", "n_tokens": 41, "n_pass": [569, 51, 46]}

Minimal simplified code:
byte[]encodePlaintext(long[]plaintext,int len){if(usesNonce){updateIV();}outBuf[getSize()];encryptCipher();(seqNo);}

