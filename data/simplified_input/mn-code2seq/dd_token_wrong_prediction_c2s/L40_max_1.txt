
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/main/java/edu/illinois/cs/cogcomp/core/datastructures/vectors/DVector2D_max.java
method_name = max
method_body = public double max(int i) { if (i < 0 || i >= sizes.size()) throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of DVector2D."); double result = -Double.MAX_VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }
predict, score, loss = get, 0.5609486699104309, 6.421156406402588

Trace of simplified code(s):
{"time": "2021-02-23 23:45:24.397411", "score": "0.633", "loss": "5.8214", "code": "public double max(int i) { if (i < 0 || i >= sizes.size()) throw new ArrayIndexOutOfBoundsException(\"Attempted to access negative index of DVector2D.\"); double result = -Double.MAX_VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 151, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:45:26.322502", "score": "0.7224", "loss": "6.1388", "code": "public double max(int i) { if (i < 0 || i >= sizes.size()) VALUE; int size = sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 113, "n_pass": [9, 2, 2]}
{"time": "2021-02-23 23:45:28.247547", "score": "0.7396", "loss": "5.6718", "code": "public double max(int i) { if (i < 0 || i >= sizes.size()) sizes.get(i); for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 104, "n_pass": [36, 3, 3]}
{"time": "2021-02-23 23:45:30.155324", "score": "0.5001", "loss": "5.1058", "code": "public double max(int i) { if (i < 0 || i >= sizes.size())for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 95, "n_pass": [37, 4, 4]}
{"time": "2021-02-23 23:45:32.046223", "score": "0.5145", "loss": "4.8826", "code": "public double max(int i) { if (i >= sizes.size())for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 86, "n_pass": [46, 5, 5]}
{"time": "2021-02-23 23:45:33.977804", "score": "0.5257", "loss": "5.2193", "code": "public double max(int i) { if (sizes.size())for (int j = 0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 81, "n_pass": [74, 6, 6]}
{"time": "2021-02-23 23:45:35.859984", "score": "0.4929", "loss": "5.0649", "code": "public double max(int i) { if (sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result) result = vector[i][j]; return result; }", "n_tokens": 76, "n_pass": [77, 7, 7]}
{"time": "2021-02-23 23:45:37.795740", "score": "0.519", "loss": "6.1312", "code": "public double max(int i) { if (sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i][j]; return result; }", "n_tokens": 71, "n_pass": [84, 8, 8]}
{"time": "2021-02-23 23:45:40.608080", "score": "0.4326", "loss": "5.9584", "code": "public double max(int i) { if (sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i]; return result; }", "n_tokens": 68, "n_pass": [132, 9, 9]}
{"time": "2021-02-23 23:45:44.362049", "score": "0.4326", "loss": "5.9584", "code": "double max(int i) { if (sizes.size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i]; return result; }", "n_tokens": 66, "n_pass": [136, 11, 10]}
{"time": "2021-02-23 23:45:46.681273", "score": "0.2846", "loss": "4.7915", "code": "double max(int i) { if (size())for (int0; j < size; ++j) if (vector[i][j] > result)vector[i]; return result; }", "n_tokens": 64, "n_pass": [144, 12, 11]}
{"time": "2021-02-23 23:45:48.545095", "score": "0.355", "loss": "5.038", "code": "double max(int i) { if (size())for (int0; j < size; j) if (vector[i][j] > result)vector[i]; return result; }", "n_tokens": 62, "n_pass": [154, 13, 12]}
{"time": "2021-02-23 23:45:50.417157", "score": "0.3346", "loss": "4.9166", "code": "double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; return result; }", "n_tokens": 59, "n_pass": [158, 14, 13]}
{"time": "2021-02-23 23:46:01.052301", "score": "0.2711", "loss": "5.4135", "code": "double max(int i) { if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 57, "n_pass": [243, 16, 14]}
{"time": "2021-02-23 23:46:05.636932", "score": "0.2711", "loss": "5.4135", "code": "double max(int i){ if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 56, "n_pass": [254, 18, 15]}
{"time": "2021-02-23 23:46:07.512124", "score": "0.2711", "loss": "5.4135", "code": "double max(int i){if (size())for (int0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 55, "n_pass": [256, 19, 16]}
{"time": "2021-02-23 23:46:09.460848", "score": "0.2711", "loss": "5.4135", "code": "double max(int i){if(size())for (int0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 54, "n_pass": [258, 20, 17]}
{"time": "2021-02-23 23:46:11.343290", "score": "0.2711", "loss": "5.4135", "code": "double max(int i){if(size())for(int0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 53, "n_pass": [265, 21, 18]}
{"time": "2021-02-23 23:46:13.197734", "score": "0.3294", "loss": "5.4682", "code": "double max(int i){if(size())for(0; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 52, "n_pass": [267, 22, 19]}
{"time": "2021-02-23 23:46:15.035160", "score": "0.3573", "loss": "5.1265", "code": "double max(int i){if(size())for(; j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 51, "n_pass": [268, 23, 20]}
{"time": "2021-02-23 23:46:16.941662", "score": "0.3573", "loss": "5.1265", "code": "double max(int i){if(size())for(;j < size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 50, "n_pass": [270, 24, 21]}
{"time": "2021-02-23 23:46:18.844081", "score": "0.3573", "loss": "5.1265", "code": "double max(int i){if(size())for(;j< size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 49, "n_pass": [272, 25, 22]}
{"time": "2021-02-23 23:46:20.689923", "score": "0.3573", "loss": "5.1265", "code": "double max(int i){if(size())for(;j<size; j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 48, "n_pass": [274, 26, 23]}
{"time": "2021-02-23 23:46:22.586042", "score": "0.3573", "loss": "5.1265", "code": "double max(int i){if(size())for(;j<size;j) if (vector[i] > result)vector[i]; result; }", "n_tokens": 47, "n_pass": [277, 27, 24]}
{"time": "2021-02-23 23:46:24.461516", "score": "0.4811", "loss": "5.1705", "code": "double max(int i){if(size())for(;j<size;) if (vector[i] > result)vector[i]; result; }", "n_tokens": 46, "n_pass": [278, 28, 25]}
{"time": "2021-02-23 23:46:26.357568", "score": "0.4811", "loss": "5.1705", "code": "double max(int i){if(size())for(;j<size;)if (vector[i] > result)vector[i]; result; }", "n_tokens": 45, "n_pass": [280, 29, 26]}
{"time": "2021-02-23 23:46:28.212302", "score": "0.4811", "loss": "5.1705", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i]; result; }", "n_tokens": 44, "n_pass": [282, 30, 27]}
{"time": "2021-02-23 23:46:30.038014", "score": "0.2428", "loss": "5.3658", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i];  }", "n_tokens": 42, "n_pass": [293, 31, 28]}
{"time": "2021-02-23 23:46:36.776268", "score": "0.2428", "loss": "5.3658", "code": "double max(int i){if(size())for(;j<size;)if(vector[i] > result)vector[i]; }", "n_tokens": 41, "n_pass": [343, 33, 29]}
{"time": "2021-02-23 23:46:41.333006", "score": "0.2428", "loss": "5.3658", "code": "double max(int i){if(size())for(;j<size;)if(vector[i]> result)vector[i]; }", "n_tokens": 40, "n_pass": [373, 35, 30]}
{"time": "2021-02-23 23:46:43.195400", "score": "0.2428", "loss": "5.3658", "code": "double max(int i){if(size())for(;j<size;)if(vector[i]>result)vector[i]; }", "n_tokens": 39, "n_pass": [375, 36, 31]}
{"time": "2021-02-23 23:46:45.065335", "score": "0.2428", "loss": "5.3658", "code": "double max(int i){if(size())for(;j<size;)if(vector[i]>result)vector[i];}", "n_tokens": 38, "n_pass": [383, 37, 32]}

Minimal simplified code:
double max(int i){if(size())for(;j<size;)if(vector[i]>result)vector[i];}

