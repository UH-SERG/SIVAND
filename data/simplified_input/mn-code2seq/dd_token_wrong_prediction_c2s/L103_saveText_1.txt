
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/main/java/zemberek/ner/PerceptronNer_saveText.java
method_name = saveText
method_body = public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id + ".ner.model"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format("%s %.3f", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }
predict, score, loss = writeSparseWeights, 0.6064659953117371, 22.072031021118164

Trace of simplified code(s):
{"time": "2021-02-24 01:58:19.025715", "score": "0.6008", "loss": "22.2789", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id + \".ner.model\"); List<String> lines = sparseWeights.getKeyList().stream().map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:58:20.965923", "score": "0.6423", "loss": "24.2178", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id).map(s -> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 86, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 01:58:23.349790", "score": "0.6493", "loss": "18.6951", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id> String.format(\"%s %.3f\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 79, "n_pass": [36, 3, 3]}
{"time": "2021-02-24 01:58:25.266458", "score": "0.6246", "loss": "18.3568", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id> String.format(\"\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(file, lines); }", "n_tokens": 72, "n_pass": [37, 4, 4]}
{"time": "2021-02-24 01:58:29.086439", "score": "0.5879", "loss": "23.2325", "code": "public void saveText(Path outRoot) throws IOException { Path file = outRoot.resolve(id> String.format(\"\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 68, "n_pass": [76, 6, 5]}
{"time": "2021-02-24 01:58:31.434224", "score": "0.5604", "loss": "24.0037", "code": "public void saveText() throws IOException { Path file = outRoot.resolve(id> String.format(\"\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 65, "n_pass": [79, 7, 6]}
{"time": "2021-02-24 01:58:44.521367", "score": "0.5744", "loss": "22.3637", "code": "public void saveText() throws IOException { Path file = outRoot(id> String.format(\"\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 63, "n_pass": [144, 13, 7]}
{"time": "2021-02-24 01:58:46.398724", "score": "0.5474", "loss": "23.3213", "code": "public void saveText() throws IOException { Path file = outRoot(idString.format(\"\", s, sparseWeights.get(s))).collect(Collectors.toList()); Files.write(); }", "n_tokens": 61, "n_pass": [145, 14, 8]}
{"time": "2021-02-24 01:58:53.909104", "score": "0.5498", "loss": "17.924", "code": "public void saveText() throws IOException { Path file = outRoot(idString.format(\"\", s, sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 59, "n_pass": [157, 18, 9]}
{"time": "2021-02-24 01:58:57.639271", "score": "0.5498", "loss": "17.924", "code": " void saveText() throws IOException { Path file = outRoot(idString.format(\"\", s, sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 58, "n_pass": [165, 20, 10]}
{"time": "2021-02-24 01:58:59.495736", "score": "0.5498", "loss": "17.924", "code": "void saveText() throws IOException { Path file = outRoot(idString.format(\"\", s, sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 57, "n_pass": [166, 21, 11]}
{"time": "2021-02-24 01:59:05.976275", "score": "0.6806", "loss": "20.0117", "code": "void saveText() throws IOException { Path file =(idString.format(\"\", s, sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 55, "n_pass": [178, 24, 12]}
{"time": "2021-02-24 01:59:07.844421", "score": "0.6216", "loss": "20.6249", "code": "void saveText() throws IOException { Path file =(idformat(\"\", s, sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 53, "n_pass": [180, 25, 13]}
{"time": "2021-02-24 01:59:09.697534", "score": "0.5912", "loss": "21.5621", "code": "void saveText() throws IOException { Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList()); Files.write(); }", "n_tokens": 51, "n_pass": [184, 26, 14]}
{"time": "2021-02-24 01:59:28.889562", "score": "0.5912", "loss": "21.5621", "code": "void saveText() throws IOException { Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write(); }", "n_tokens": 50, "n_pass": [274, 33, 15]}
{"time": "2021-02-24 01:59:32.653680", "score": "0.5912", "loss": "21.5621", "code": "void saveText() throws IOException { Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 49, "n_pass": [281, 35, 16]}
{"time": "2021-02-24 01:59:35.432606", "score": "0.5912", "loss": "21.5621", "code": "void saveText()throws IOException { Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 48, "n_pass": [288, 36, 17]}
{"time": "2021-02-24 01:59:37.297385", "score": "0.5912", "loss": "21.5621", "code": "void saveText()throws IOException{ Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 47, "n_pass": [292, 37, 18]}
{"time": "2021-02-24 01:59:39.198363", "score": "0.5912", "loss": "21.5621", "code": "void saveText()throws IOException{Path file =(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 46, "n_pass": [294, 38, 19]}
{"time": "2021-02-24 01:59:46.664276", "score": "0.5912", "loss": "21.5621", "code": "void saveText()throws IOException{Path file=(idformat(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 45, "n_pass": [298, 42, 20]}
{"time": "2021-02-24 01:59:48.542383", "score": "0.6209", "loss": "22.6681", "code": "void saveText()throws IOException{Path file=(format(\"\",  sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 44, "n_pass": [301, 43, 21]}
{"time": "2021-02-24 01:59:50.422379", "score": "0.6209", "loss": "22.6681", "code": "void saveText()throws IOException{Path file=(format(\"\", sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 43, "n_pass": [307, 44, 22]}
{"time": "2021-02-24 01:59:52.293300", "score": "0.6209", "loss": "22.6681", "code": "void saveText()throws IOException{Path file=(format(\"\",sparseWeights.get(s))).collect(toList());Files.write();}", "n_tokens": 42, "n_pass": [308, 45, 23]}

Minimal simplified code:
void saveText()throws IOException{Path file=(format("",sparseWeights.get(s))).collect(toList());Files.write();}

