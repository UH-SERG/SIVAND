
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-compiler/src/test/java/org/springframework/cloud/function/core/FunctionFactoryUtilsTests_isFluxConsumer.java
method_name = isFluxConsumer
method_body = @Test public void isFluxConsumer() { Method method = ReflectionUtils.findMethod(FunctionFactoryUtilsTests.class, "fluxConsumer"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }
predict, score, loss = isFluxFluxIsFalse, 0.4507293403148651, 5.842482566833496

Trace of simplified code(s):
{"time": "2021-02-23 20:37:24.175763", "score": "0.4507", "loss": "5.8425", "code": "@Test public void isFluxConsumer() { Method method = ReflectionUtils.findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 80, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:37:30.409351", "score": "0.4509", "loss": "5.2725", "code": "@Test public void isFluxConsumer() { Method .findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(); assertThat(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 75, "n_pass": [47, 4, 2]}
{"time": "2021-02-23 20:37:32.311425", "score": "0.5125", "loss": "6.15", "code": "@Test public void isFluxConsumer() { Method .findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer(method)).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 70, "n_pass": [53, 5, 3]}
{"time": "2021-02-23 20:37:38.049081", "score": "0.4777", "loss": "7.3825", "code": "@Test public void isFluxConsumer() { Method .findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 67, "n_pass": [96, 8, 4]}
{"time": "2021-02-23 20:37:41.836454", "score": "0.4777", "loss": "7.3825", "code": "@Test void isFluxConsumer() { Method .findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 65, "n_pass": [109, 10, 5]}
{"time": "2021-02-23 20:37:44.177290", "score": "0.4704", "loss": "7.111", "code": "@Test void isFluxConsumer() { MethodfindMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 63, "n_pass": [115, 11, 6]}
{"time": "2021-02-23 20:37:50.318602", "score": "0.4613", "loss": "7.4034", "code": "@Test void isFluxConsumer() {findMethod(FunctionFactoryUtilsTests.class, \"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 61, "n_pass": [140, 14, 7]}
{"time": "2021-02-23 20:38:01.282706", "score": "0.4613", "loss": "7.4034", "code": "@Test void isFluxConsumer() {findMethod(FunctionFactoryUtilsTests.class,\"fluxConsumer\"); assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 60, "n_pass": [219, 18, 8]}
{"time": "2021-02-23 20:38:05.010001", "score": "0.4613", "loss": "7.4034", "code": "@Test void isFluxConsumer() {findMethod(FunctionFactoryUtilsTests.class,\"fluxConsumer\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(FunctionFactoryUtils.isFluxFunction(method)).isFalse(); }", "n_tokens": 59, "n_pass": [224, 20, 9]}
{"time": "2021-02-23 20:38:14.343737", "score": "0.4658", "loss": "6.8457", "code": "@Test void isFluxConsumer() {findMethod(FunctionFactoryUtilsTests.class,\"fluxConsumer\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 57, "n_pass": [243, 25, 10]}
{"time": "2021-02-23 20:38:17.564579", "score": "0.4658", "loss": "6.8457", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests.class,\"fluxConsumer\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 56, "n_pass": [258, 26, 11]}
{"time": "2021-02-23 20:38:21.283339", "score": "0.5243", "loss": "7.1263", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests.class,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 55, "n_pass": [267, 28, 12]}
{"time": "2021-02-23 20:38:31.940212", "score": "0.5297", "loss": "7.2212", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTestsclass,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 54, "n_pass": [307, 33, 13]}
{"time": "2021-02-23 20:38:33.805428", "score": "0.5308", "loss": "7.191", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse(); assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 53, "n_pass": [308, 34, 14]}
{"time": "2021-02-23 20:38:47.939615", "score": "0.5308", "loss": "7.191", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse();assertThat(isFluxFunction(method)).isFalse(); }", "n_tokens": 52, "n_pass": [383, 40, 15]}
{"time": "2021-02-23 20:38:49.802226", "score": "0.5287", "loss": "7.1734", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse();(isFluxFunction(method)).isFalse(); }", "n_tokens": 51, "n_pass": [384, 41, 16]}
{"time": "2021-02-23 20:38:55.401082", "score": "0.5287", "loss": "7.1734", "code": "@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests,\"\");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse();(isFluxFunction(method)).isFalse();}", "n_tokens": 50, "n_pass": [396, 44, 17]}

Minimal simplified code:
@Test void isFluxConsumer(){findMethod(FunctionFactoryUtilsTests,"");assertThat(FunctionFactoryUtils.isFluxConsumer).isTrue(FunctionFactoryUtils.isFluxSupplier(method)).isFalse();(isFluxFunction(method)).isFalse();}

