
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/coyote/lite/LiteProtocolHandler_coyoteService.java
method_name = coyoteService
method_body = private void coyoteService(final HttpRequest httpReq, final HttpResponse httpRes) { RequestData rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }
predict, score, loss = init, 0.18754686415195465, 18.729759216308594

Trace of simplified code(s):
{"time": "2021-02-24 04:59:34.187637", "score": "0.1875", "loss": "18.7298", "code": "private void coyoteService(final HttpRequest httpReq, final HttpResponse httpRes) { RequestData rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 87, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:59:40.061137", "score": "0.1875", "loss": "18.7298", "code": "void coyoteService(final HttpRequest httpReq, final HttpResponse httpRes) { RequestData rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 85, "n_pass": [92, 4, 2]}
{"time": "2021-02-24 04:59:42.419514", "score": "0.1875", "loss": "18.7298", "code": "void coyoteService(HttpRequest httpReq, final HttpResponse httpRes) { RequestData rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 83, "n_pass": [95, 5, 3]}
{"time": "2021-02-24 04:59:44.313353", "score": "0.1875", "loss": "18.7298", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) { RequestData rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 81, "n_pass": [98, 6, 4]}
{"time": "2021-02-24 04:59:46.192093", "score": "0.4393", "loss": "19.5776", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {rc = new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 78, "n_pass": [102, 7, 5]}
{"time": "2021-02-24 04:59:48.058199", "score": "0.2571", "loss": "18.8222", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) { new RequestData(); rc.init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 75, "n_pass": [103, 8, 6]}
{"time": "2021-02-24 04:59:51.796935", "score": "0.4917", "loss": "18.7401", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) { new RequestData().init(httpReq, httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 72, "n_pass": [106, 10, 7]}
{"time": "2021-02-24 04:59:53.667416", "score": "0.3565", "loss": "18.026", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) { new RequestData().init(httpRes); try { adapter.service(rc.req, rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 69, "n_pass": [108, 11, 8]}
{"time": "2021-02-24 04:59:55.530935", "score": "0.4763", "loss": "18.439", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) { new RequestData().init(httpRes); try { adapter.service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 66, "n_pass": [114, 12, 9]}
{"time": "2021-02-24 04:59:57.844822", "score": "0.4328", "loss": "18.674", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes); try { adapter.service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 63, "n_pass": [131, 13, 10]}
{"time": "2021-02-24 05:00:06.356562", "score": "0.4328", "loss": "18.674", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try { adapter.service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 62, "n_pass": [211, 15, 11]}
{"time": "2021-02-24 05:00:08.217744", "score": "0.4328", "loss": "18.674", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try{ adapter.service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 61, "n_pass": [213, 16, 12]}
{"time": "2021-02-24 05:00:10.096457", "score": "0.4328", "loss": "18.674", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try{adapter.service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 60, "n_pass": [215, 17, 13]}
{"time": "2021-02-24 05:00:11.974071", "score": "0.4344", "loss": "18.5062", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try{service(rc.req.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 58, "n_pass": [216, 18, 14]}
{"time": "2021-02-24 05:00:15.746828", "score": "0.3967", "loss": "18.4247", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try{service(rc.res); } catch (Exception e) { e.printStackTrace(); } }", "n_tokens": 56, "n_pass": [219, 20, 15]}
{"time": "2021-02-24 05:00:17.641624", "score": "0.3863", "loss": "18.6334", "code": "void coyoteService(HttpRequest httpReq, HttpResponse httpRes) {RequestData().init(httpRes);try{service(rc.res); } catch (Exception e) { printStackTrace(); } }", "n_tokens": 54, "n_pass": [228, 21, 16]}
{"time": "2021-02-24 05:00:20.398047", "score": "0.3863", "loss": "18.6334", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes) {RequestData().init(httpRes);try{service(rc.res); } catch (Exception e) { printStackTrace(); } }", "n_tokens": 53, "n_pass": [241, 22, 17]}
{"time": "2021-02-24 05:00:22.262629", "score": "0.3863", "loss": "18.6334", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(rc.res); } catch (Exception e) { printStackTrace(); } }", "n_tokens": 52, "n_pass": [246, 23, 18]}
{"time": "2021-02-24 05:00:26.003651", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch (Exception e) { printStackTrace(); } }", "n_tokens": 50, "n_pass": [260, 25, 19]}
{"time": "2021-02-24 05:00:34.969513", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch(Exception e) { printStackTrace(); } }", "n_tokens": 49, "n_pass": [324, 27, 20]}
{"time": "2021-02-24 05:00:36.842196", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch(Exception e){ printStackTrace(); } }", "n_tokens": 48, "n_pass": [330, 28, 21]}
{"time": "2021-02-24 05:00:38.715683", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch(Exception e){printStackTrace(); } }", "n_tokens": 47, "n_pass": [332, 29, 22]}
{"time": "2021-02-24 05:00:40.589792", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch(Exception e){printStackTrace();} }", "n_tokens": 46, "n_pass": [337, 30, 23]}
{"time": "2021-02-24 05:00:42.433741", "score": "0.4687", "loss": "19.4102", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{service(res); } catch(Exception e){printStackTrace();}}", "n_tokens": 45, "n_pass": [339, 31, 24]}
{"time": "2021-02-24 05:00:47.096353", "score": "0.8084", "loss": "21.5635", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{(res); } catch(Exception e){printStackTrace();}}", "n_tokens": 44, "n_pass": [365, 33, 25]}
{"time": "2021-02-24 05:00:48.948710", "score": "0.8084", "loss": "21.5635", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{(res);} catch(Exception e){printStackTrace();}}", "n_tokens": 43, "n_pass": [370, 34, 26]}
{"time": "2021-02-24 05:00:50.815539", "score": "0.8084", "loss": "21.5635", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init(httpRes);try{(res);}catch(Exception e){printStackTrace();}}", "n_tokens": 42, "n_pass": [372, 35, 27]}
{"time": "2021-02-24 05:00:53.598627", "score": "0.5321", "loss": "19.9661", "code": "void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init();try{(res);}catch(Exception e){printStackTrace();}}", "n_tokens": 41, "n_pass": [405, 36, 28]}

Minimal simplified code:
void coyoteService(HttpRequest httpReq,HttpResponse httpRes){RequestData().init();try{(res);}catch(Exception e){printStackTrace();}}

