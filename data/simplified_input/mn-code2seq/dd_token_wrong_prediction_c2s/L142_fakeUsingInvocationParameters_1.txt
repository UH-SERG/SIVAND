
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jmockit__jmockit1/main/test/mockit/FakingTest_fakeUsingInvocationParameters.java
method_name = fakeUsingInvocationParameters
method_body = @Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet it = inv.getInvokedInstance(); assertNotNull(it); } @Mock int getBaseline(Invocation inv, int w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }
predict, score, loss = testGetBaseline, 0.9147523045539856, 47.64280700683594

Trace of simplified code(s):
{"time": "2021-02-23 23:42:36.827517", "score": "0.8837", "loss": "47.3713", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet it = inv.getInvokedInstance(); assertNotNull(it); } @Mock int getBaseline(Invocation inv, int w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 132, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:42:38.824161", "score": "0.8702", "loss": "49.1985", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet(); assertNotNull(it); } @Mock int getBaseline(Invocation inv, int w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 124, "n_pass": [49, 2, 2]}
{"time": "2021-02-23 23:42:40.778043", "score": "0.8769", "loss": "45.8766", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; } @Mock int getBaseline(Invocation inv, int w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 116, "n_pass": [50, 3, 3]}
{"time": "2021-02-23 23:42:44.650217", "score": "0.9077", "loss": "50.3987", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocation inv, int w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 112, "n_pass": [94, 5, 4]}
{"time": "2021-02-23 23:42:46.597878", "score": "0.8774", "loss": "50.1697", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) { return inv.proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 108, "n_pass": [96, 6, 5]}
{"time": "2021-02-23 23:42:48.517158", "score": "0.8743", "loss": "49.0814", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) { proceed(); } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 104, "n_pass": [100, 7, 6]}
{"time": "2021-02-23 23:42:50.449061", "score": "0.8786", "loss": "49.8807", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet().getBaseline(20, 15); assertEquals(-1, i); }", "n_tokens": 100, "n_pass": [101, 8, 7]}
{"time": "2021-02-23 23:42:52.335625", "score": "0.8236", "loss": "48.7867", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(20, 15); assertEquals(-1, i); }", "n_tokens": 96, "n_pass": [106, 9, 8]}
{"time": "2021-02-23 23:42:54.236968", "score": "0.8198", "loss": "48.6032", "code": "@Test public void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 91, "n_pass": [107, 10, 9]}
{"time": "2021-02-23 23:42:56.172830", "score": "0.9074", "loss": "51.0186", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { @Mock void $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 87, "n_pass": [111, 11, 10]}
{"time": "2021-02-23 23:42:58.100617", "score": "0.8028", "loss": "54.0348", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() {  $init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 83, "n_pass": [117, 12, 11]}
{"time": "2021-02-23 23:43:01.313975", "score": "0.8028", "loss": "54.0348", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) { Applet; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 81, "n_pass": [178, 13, 12]}
{"time": "2021-02-23 23:43:03.202351", "score": "0.8457", "loss": "52.9152", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {; }  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 79, "n_pass": [182, 14, 13]}
{"time": "2021-02-23 23:43:05.157964", "score": "0.8457", "loss": "52.9152", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; int i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 77, "n_pass": [183, 15, 14]}
{"time": "2021-02-23 23:43:07.097755", "score": "0.7535", "loss": "52.5184", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(-1, i); }", "n_tokens": 75, "n_pass": [196, 16, 15]}
{"time": "2021-02-23 23:43:10.869116", "score": "0.7583", "loss": "52.0035", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals( i); }", "n_tokens": 72, "n_pass": [204, 18, 16]}
{"time": "2021-02-23 23:43:26.256164", "score": "0.7583", "loss": "52.0035", "code": " void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 71, "n_pass": [310, 20, 17]}
{"time": "2021-02-23 23:43:30.021492", "score": "0.7583", "loss": "52.0035", "code": "void fakeUsingInvocationParameters() { new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 70, "n_pass": [314, 22, 18]}
{"time": "2021-02-23 23:43:32.813051", "score": "0.7583", "loss": "52.0035", "code": "void fakeUsingInvocationParameters(){ new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 69, "n_pass": [320, 23, 19]}
{"time": "2021-02-23 23:43:34.715910", "score": "0.7583", "loss": "52.0035", "code": "void fakeUsingInvocationParameters(){new MockUp<Applet>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 68, "n_pass": [322, 24, 20]}
{"time": "2021-02-23 23:43:36.602637", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>() { init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 67, "n_pass": [327, 25, 21]}
{"time": "2021-02-23 23:43:38.471880", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){ init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 66, "n_pass": [331, 26, 22]}
{"time": "2021-02-23 23:43:40.386369", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv) {}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 65, "n_pass": [333, 27, 23]}
{"time": "2021-02-23 23:43:42.314777", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}  getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 64, "n_pass": [340, 28, 24]}
{"time": "2021-02-23 23:43:44.191007", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){} getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 63, "n_pass": [343, 29, 25]}
{"time": "2021-02-23 23:43:46.080317", "score": "0.8289", "loss": "52.9127", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(Invocationint w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 62, "n_pass": [344, 30, 26]}
{"time": "2021-02-23 23:43:47.925436", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w, int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 61, "n_pass": [347, 31, 27]}
{"time": "2021-02-23 23:43:49.813021", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h) {  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 60, "n_pass": [352, 32, 28]}
{"time": "2021-02-23 23:43:51.666278", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){  } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 59, "n_pass": [357, 33, 29]}
{"time": "2021-02-23 23:43:53.556431", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){ } }; i = new Applet(5); assertEquals(i); }", "n_tokens": 58, "n_pass": [359, 34, 30]}
{"time": "2021-02-23 23:43:55.463333", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){} }; i = new Applet(5); assertEquals(i); }", "n_tokens": 57, "n_pass": [360, 35, 31]}
{"time": "2021-02-23 23:43:57.373150", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}}; i = new Applet(5); assertEquals(i); }", "n_tokens": 56, "n_pass": [362, 36, 32]}
{"time": "2021-02-23 23:43:59.282400", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i = new Applet(5); assertEquals(i); }", "n_tokens": 55, "n_pass": [365, 37, 33]}
{"time": "2021-02-23 23:44:01.155839", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i= new Applet(5); assertEquals(i); }", "n_tokens": 54, "n_pass": [367, 38, 34]}
{"time": "2021-02-23 23:44:03.052569", "score": "0.8071", "loss": "53.2859", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i=new Applet(5); assertEquals(i); }", "n_tokens": 53, "n_pass": [369, 39, 35]}
{"time": "2021-02-23 23:44:04.969343", "score": "0.8362", "loss": "49.8981", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i= Applet(5); assertEquals(i); }", "n_tokens": 52, "n_pass": [370, 40, 36]}
{"time": "2021-02-23 23:44:06.880057", "score": "0.8362", "loss": "49.8981", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i=Applet(5); assertEquals(i); }", "n_tokens": 51, "n_pass": [371, 41, 37]}
{"time": "2021-02-23 23:44:08.741147", "score": "0.9398", "loss": "51.8445", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i=(5); assertEquals(i); }", "n_tokens": 50, "n_pass": [372, 42, 38]}
{"time": "2021-02-23 23:44:10.626967", "score": "0.9398", "loss": "51.8445", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i=(5);assertEquals(i); }", "n_tokens": 49, "n_pass": [377, 43, 39]}
{"time": "2021-02-23 23:44:14.387238", "score": "0.9452", "loss": "51.5865", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i=(5);assertEquals(); }", "n_tokens": 48, "n_pass": [380, 45, 40]}
{"time": "2021-02-23 23:44:17.218191", "score": "0.9395", "loss": "52.3924", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i(5);assertEquals(); }", "n_tokens": 47, "n_pass": [420, 46, 41]}
{"time": "2021-02-23 23:44:19.081167", "score": "0.9428", "loss": "51.3113", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i();assertEquals(); }", "n_tokens": 46, "n_pass": [422, 47, 42]}
{"time": "2021-02-23 23:44:22.800369", "score": "0.9428", "loss": "51.3113", "code": "void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i();assertEquals();}", "n_tokens": 45, "n_pass": [473, 48, 43]}

Minimal simplified code:
void fakeUsingInvocationParameters(){new MockUp<>(){init(Invocation inv){}getBaseline(int w,int h){}};i();assertEquals();}

