
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Mr5m1th__POC-Collect/JbossAS/JbossAS_v5.x_v6.x_CVE-2017-12149/JavaDeserH2HC/VulnerableHTTPServer_banner.java
method_name = banner
method_body = public static void banner() { System.out.println("* =============================================================== *"); System.out.println("* Simple Java HTTP Server for Deserialization Lab v0.01 *"); System.out.println("* https://github.com/joaomatosf/JavaDeserH2HC *"); System.out.println("* =============================================================== *"); System.out.println("You can inject java serialized objects in the following formats:"); System.out.println("\n 1) Binary in HTTP POST (ie \\xAC\\xED). Ex:\n" + " $ curl 127.0.0.1:8000 --data-binary @ObjectFile.ser\n" + "\n 2) Base64 or Gzip+Base64 via HTTP POST parameters. Ex:\n" + " $ curl 127.0.0.1:8000 -d \"ViewState=rO0ABXNy...\"\n" + " $ curl 127.0.0.1:8000 -d \"ViewState=H4sICAeH...\"\n" + "\n 3) Base64 or Gzip+Base64 in cookies. Ex:\n" + " $ curl 127.0.0.1:8000 -H \"Cookie: JSESSIONID=rO0ABXNy...\"\n" + " $ curl 127.0.0.1:8000 -H \"Cookie: JSESSIONID=H4sICAeH...\"\n" + "\n 4) Base64 of AES-CBC encrypted with hardcoded Apache Shiro key. Ex:\n" + " $ curl 127.0.0.1:8000 -H \"Cookie: rememberMe=MTIzNDU2Nzg...\"\n" + "\n 5) XML for XStream RCE vulnerability/serialization. Ex:\n" + " $ curl 127.0.0.1:8000 -d @file.xml\n -H \"Content-Type: application/xml\""); System.out.println("OBS: To test gadgets in specific libraries, run with -cp param. Ex:\n" + "$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer"); System.out.println("=================================================================="); }
predict, score, loss = print, 0.48751482367515564, 13.606916427612305

Trace of simplified code(s):
{"time": "2021-02-24 04:08:31.819506", "score": "0.5773", "loss": "13.422", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization Lab v0.01 *\"); System.out.println(\"* https://github.com/joaomatosf/JavaDeserH2HC *\"); System.out.println(\"* =============================================================== *\"); System.out.println(\"You can inject java serialized objects in the following formats:\"); System.out.println(\"\\n 1) Binary in HTTP POST (ie \\\\xAC\\\\xED). Ex:\\n\" + \" $ curl 127.0.0.1:8000 --data-binary @ObjectFile.ser\\n\" + \"\\n 2) Base64 or Gzip+Base64 via HTTP POST parameters. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -d \\\"ViewState=rO0ABXNy...\\\"\\n\" + \" $ curl 127.0.0.1:8000 -d \\\"ViewState=H4sICAeH...\\\"\\n\" + \"\\n 3) Base64 or Gzip+Base64 in cookies. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: JSESSIONID=rO0ABXNy...\\\"\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: JSESSIONID=H4sICAeH...\\\"\\n\" + \"\\n 4) Base64 of AES-CBC encrypted with hardcoded Apache Shiro key. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: rememberMe=MTIzNDU2Nzg...\\\"\\n\" + \"\\n 5) XML for XStream RCE vulnerability/serialization. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -d @file.xml\\n -H \\\"Content-Type: application/xml\\\"\"); System.out.println(\"OBS: To test gadgets in specific libraries, run with -cp param. Ex:\\n\" + \"$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer\"); System.out.println(\"==================================================================\"); }", "n_tokens": 888, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:08:33.774675", "score": "0.5504", "loss": "14.512", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization Lab v0.01 *\"); System.out.println(\"* https://github.com/joaomatosf/JavaDeserH2HC *\"); System.out.println(\"* ==============================================================H4sICAeH...\\\"\\n\" + \"\\n 3) Base64 or Gzip+Base64 in cookies. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: JSESSIONID=rO0ABXNy...\\\"\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: JSESSIONID=H4sICAeH...\\\"\\n\" + \"\\n 4) Base64 of AES-CBC encrypted with hardcoded Apache Shiro key. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -H \\\"Cookie: rememberMe=MTIzNDU2Nzg...\\\"\\n\" + \"\\n 5) XML for XStream RCE vulnerability/serialization. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -d @file.xml\\n -H \\\"Content-Type: application/xml\\\"\"); System.out.println(\"OBS: To test gadgets in specific libraries, run with -cp param. Ex:\\n\" + \"$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer\"); System.out.println(\"==================================================================\"); }", "n_tokens": 666, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 04:08:35.688980", "score": "0.6923", "loss": "14.2735", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization Lab v0.01 *\"); System.out.println(\"* https://github.com/joaomatosf/JavaDeserH2HC *\"); System.out.println(\"* =============================================================n 5) XML for XStream RCE vulnerability/serialization. Ex:\\n\" + \" $ curl 127.0.0.1:8000 -d @file.xml\\n -H \\\"Content-Type: application/xml\\\"\"); System.out.println(\"OBS: To test gadgets in specific libraries, run with -cp param. Ex:\\n\" + \"$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer\"); System.out.println(\"==================================================================\"); }", "n_tokens": 444, "n_pass": [10, 3, 3]}
{"time": "2021-02-24 04:08:37.599188", "score": "0.5782", "loss": "13.7514", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization Lab v0.01 *\"); System.out.println(\"* https://github.com/joaomatosf/JavaDeserH2HC *\"); System.out.println(\"* =============================================================\\n\" + \"$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer\"); System.out.println(\"==================================================================\"); }", "n_tokens": 333, "n_pass": [15, 4, 4]}
{"time": "2021-02-24 04:08:39.491262", "score": "0.2674", "loss": "12.3502", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization \\n\" + \"$ java -cp .:commons-collections-3.2.1.jar VulnerableHTTPServer\"); System.out.println(\"==================================================================\"); }", "n_tokens": 222, "n_pass": [17, 5, 5]}
{"time": "2021-02-24 04:08:41.343405", "score": "0.2236", "loss": "10.3747", "code": "public static void banner() { System.out.println(\"* =============================================================== *\"); System.out.println(\"* Simple Java HTTP Server for Deserialization===================================================\"); }", "n_tokens": 166, "n_pass": [22, 6, 6]}
{"time": "2021-02-24 04:08:43.148867", "score": "0.1772", "loss": "10.4507", "code": "public static void banner() { System.out.println(\"* =====================================================================================\"); }", "n_tokens": 111, "n_pass": [25, 7, 7]}
{"time": "2021-02-24 04:08:44.993259", "score": "0.2392", "loss": "9.6282", "code": "public static void banner() { System.out.println(\"* =========================================================\"); }", "n_tokens": 83, "n_pass": [30, 8, 8]}
{"time": "2021-02-24 04:09:09.157584", "score": "0.2693", "loss": "11.3871", "code": "public static void banner() { System.out.println(\"* =====================================================\"); }", "n_tokens": 79, "n_pass": [93, 21, 9]}
{"time": "2021-02-24 04:09:11.034061", "score": "0.3188", "loss": "11.3428", "code": "public static void banner() { System.out.println(\"* =================================================\"); }", "n_tokens": 75, "n_pass": [94, 22, 10]}
{"time": "2021-02-24 04:09:12.853444", "score": "0.2417", "loss": "10.1682", "code": "public static void banner() { System.out.println(\"* =============================================\"); }", "n_tokens": 71, "n_pass": [95, 23, 11]}
{"time": "2021-02-24 04:09:14.662188", "score": "0.212", "loss": "11.8536", "code": "public static void banner() { System.out.println(\"* =========================================\"); }", "n_tokens": 67, "n_pass": [96, 24, 12]}
{"time": "2021-02-24 04:09:16.487671", "score": "0.3859", "loss": "10.7911", "code": "public static void banner() { System.out.println(\"* =====================================\"); }", "n_tokens": 63, "n_pass": [97, 25, 13]}
{"time": "2021-02-24 04:09:20.095412", "score": "0.3859", "loss": "10.7911", "code": " void banner() { System.out.println(\"* =====================================\"); }", "n_tokens": 60, "n_pass": [101, 27, 14]}
{"time": "2021-02-24 04:09:22.407465", "score": "0.3021", "loss": "10.5001", "code": " void banner() { System.out.println(\"* ==================================\"); }", "n_tokens": 57, "n_pass": [108, 28, 15]}
{"time": "2021-02-24 04:09:33.189157", "score": "0.23", "loss": "11.1408", "code": " void banner() { System.out.println(\"* ==============================\"); }", "n_tokens": 53, "n_pass": [114, 34, 16]}
{"time": "2021-02-24 04:09:34.981933", "score": "0.1883", "loss": "10.3363", "code": " void banner() { System.out.println(\"* ==========================\"); }", "n_tokens": 49, "n_pass": [115, 35, 17]}
{"time": "2021-02-24 04:09:36.764398", "score": "0.2991", "loss": "10.831", "code": " void banner() { System.out.println(\"* ======================\"); }", "n_tokens": 45, "n_pass": [116, 36, 18]}
{"time": "2021-02-24 04:09:38.569477", "score": "0.3785", "loss": "9.5686", "code": " void banner() { System.out.println(\"* ==================\"); }", "n_tokens": 41, "n_pass": [117, 37, 19]}
{"time": "2021-02-24 04:09:53.389090", "score": "0.3785", "loss": "9.5686", "code": "void banner() { System.out.println(\"* ==================\"); }", "n_tokens": 40, "n_pass": [161, 44, 20]}
{"time": "2021-02-24 04:09:56.057544", "score": "0.3785", "loss": "9.5686", "code": "void banner(){ System.out.println(\"* ==================\"); }", "n_tokens": 39, "n_pass": [167, 45, 21]}
{"time": "2021-02-24 04:09:57.889323", "score": "0.3785", "loss": "9.5686", "code": "void banner(){System.out.println(\"* ==================\"); }", "n_tokens": 38, "n_pass": [169, 46, 22]}
{"time": "2021-02-24 04:09:59.736614", "score": "0.5251", "loss": "8.989", "code": "void banner(){Systemout.println(\"* ==================\"); }", "n_tokens": 37, "n_pass": [171, 47, 23]}
{"time": "2021-02-24 04:10:05.070746", "score": "0.3434", "loss": "11.6908", "code": "void banner(){Systemout.println(\"* ================\"); }", "n_tokens": 35, "n_pass": [176, 50, 24]}
{"time": "2021-02-24 04:10:06.860736", "score": "0.2766", "loss": "11.1058", "code": "void banner(){Systemout.println(\"* ==============\"); }", "n_tokens": 33, "n_pass": [177, 51, 25]}
{"time": "2021-02-24 04:10:08.647859", "score": "0.4767", "loss": "9.5561", "code": "void banner(){Systemout.println(\"* ============\"); }", "n_tokens": 31, "n_pass": [178, 52, 26]}
{"time": "2021-02-24 04:10:10.428090", "score": "0.4897", "loss": "10.6041", "code": "void banner(){Systemout.println(\"* ==========\"); }", "n_tokens": 29, "n_pass": [179, 53, 27]}
{"time": "2021-02-24 04:10:20.313471", "score": "0.6456", "loss": "11.708", "code": "void banner(){out.println(\"* ==========\"); }", "n_tokens": 28, "n_pass": [193, 58, 28]}
{"time": "2021-02-24 04:10:22.120616", "score": "0.7904", "loss": "10.9371", "code": "void banner(){println(\"* ==========\"); }", "n_tokens": 26, "n_pass": [194, 59, 29]}
{"time": "2021-02-24 04:10:23.894475", "score": "0.565", "loss": "9.0119", "code": "void banner(){println(\"*=========\"); }", "n_tokens": 24, "n_pass": [197, 60, 30]}
{"time": "2021-02-24 04:10:25.667146", "score": "0.565", "loss": "9.0119", "code": "void banner(){println(\"*=======\"); }", "n_tokens": 22, "n_pass": [198, 61, 31]}
{"time": "2021-02-24 04:10:27.454140", "score": "0.565", "loss": "9.0119", "code": "void banner(){println(\"*=====\"); }", "n_tokens": 20, "n_pass": [199, 62, 32]}
{"time": "2021-02-24 04:10:29.288082", "score": "0.565", "loss": "9.0119", "code": "void banner(){println(\"*===\"); }", "n_tokens": 18, "n_pass": [200, 63, 33]}
{"time": "2021-02-24 04:10:31.055664", "score": "0.5509", "loss": "9.5391", "code": "void banner(){println(\"*=\"); }", "n_tokens": 16, "n_pass": [201, 64, 34]}
{"time": "2021-02-24 04:10:34.567573", "score": "0.5509", "loss": "9.5391", "code": "void banner(){println(\"*=\");}", "n_tokens": 15, "n_pass": [226, 65, 35]}
{"time": "2021-02-24 04:10:39.078182", "score": "0.6507", "loss": "9.3769", "code": "void banner(){println(\"=\");}", "n_tokens": 14, "n_pass": [236, 67, 36]}

Minimal simplified code:
void banner(){println("=");}

