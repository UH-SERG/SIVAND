
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/asn1/test/OtherCertIDUnitTest_checkConstruction.java
method_name = checkConstruction
method_body = private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID, algId, digest, issuerSerial); certID = OtherCertID.getInstance(certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive().getEncoded()); ASN1Sequence seq = (ASN1Sequence) aIn.readObject(); certID = OtherCertID.getInstance(seq); checkValues(certID, algId, digest, issuerSerial); }
predict, score, loss = check, 0.7256182432174683, 11.637360572814941

Trace of simplified code(s):
{"time": "2021-02-24 01:07:45.700893", "score": "0.893", "loss": "11.2", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID, algId, digest, issuerSerial); certID = OtherCertID.getInstance(certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive().getEncoded()); ASN1Sequence seq = (ASN1Sequence) aIn.readObject(); certID = OtherCertID.getInstance(seq); checkValues(certID, algId, digest, issuerSerial); }", "n_tokens": 153, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:07:47.681902", "score": "0.8631", "loss": "11.8897", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID,certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive().getEncoded()); ASN1Sequence seq = (ASN1Sequence) aIn.readObject(); certID = OtherCertID.getInstance(seq); checkValues(certID, algId, digest, issuerSerial); }", "n_tokens": 134, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 01:07:49.621496", "score": "0.9166", "loss": "11.5956", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID,certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive().getEncoded()); ASN1Sequence seq = (ASNseq); checkValues(certID, algId, digest, issuerSerial); }", "n_tokens": 115, "n_pass": [25, 3, 3]}
{"time": "2021-02-24 01:07:51.558322", "score": "0.9371", "loss": "11.7301", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID,certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitiveseq); checkValues(certID, algId, digest, issuerSerial); }", "n_tokens": 96, "n_pass": [31, 4, 4]}
{"time": "2021-02-24 01:07:53.478420", "score": "0.8331", "loss": "11.5681", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues(certID,certID); checkValues(certID, algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 86, "n_pass": [47, 5, 5]}
{"time": "2021-02-24 01:07:55.396608", "score": "0.8285", "loss": "11.6129", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues( algId, digest, issuerSerial); ASN1InputStream aIn = new ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 76, "n_pass": [52, 6, 6]}
{"time": "2021-02-24 01:07:57.296253", "score": "0.8821", "loss": "11.4386", "code": "private void checkConstruction(OtherCertID certID, AlgorithmIdentifier algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues( algId, digest, issuerSerial); ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 66, "n_pass": [54, 7, 7]}
{"time": "2021-02-24 01:08:01.516545", "score": "0.8152", "loss": "11.4335", "code": "private void checkConstruction(OtherCertID  algId, byte[] digest, IssuerSerial issuerSerial) throws IOException { checkValues( algId, digest, issuerSerial); ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 62, "n_pass": [82, 9, 8]}
{"time": "2021-02-24 01:08:03.362186", "score": "0.6618", "loss": "11.3752", "code": "private void checkConstruction(OtherCertID  algId, byte[] digest) throws IOException { checkValues( algId, digest, issuerSerial); ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 57, "n_pass": [85, 10, 9]}
{"time": "2021-02-24 01:08:07.543463", "score": "0.676", "loss": "11.5251", "code": "private void checkConstruction(OtherCertID  algId, byte[] digest) throws IOException { checkValues(  digest, issuerSerial); ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 55, "n_pass": [128, 12, 10]}
{"time": "2021-02-24 01:08:09.371225", "score": "0.2281", "loss": "13.5901", "code": "private void checkConstruction(OtherCertID  algId, byte[] digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, digest, issuerSerial); }", "n_tokens": 52, "n_pass": [129, 13, 11]}
{"time": "2021-02-24 01:08:11.247745", "score": "0.4332", "loss": "12.1696", "code": "private void checkConstruction(OtherCertID  algId, byte[] digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 49, "n_pass": [135, 14, 12]}
{"time": "2021-02-24 01:08:13.133219", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID  algId, byte[] digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 47, "n_pass": [138, 15, 13]}
{"time": "2021-02-24 01:08:23.742830", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId, byte[] digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 46, "n_pass": [204, 17, 14]}
{"time": "2021-02-24 01:08:25.593803", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[] digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 45, "n_pass": [208, 18, 15]}
{"time": "2021-02-24 01:08:27.461218", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest) throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 44, "n_pass": [212, 19, 16]}
{"time": "2021-02-24 01:08:29.318323", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException { checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 43, "n_pass": [215, 20, 17]}
{"time": "2021-02-24 01:08:31.183072", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{ checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 42, "n_pass": [219, 21, 18]}
{"time": "2021-02-24 01:08:33.043340", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(  issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 41, "n_pass": [221, 22, 19]}
{"time": "2021-02-24 01:08:36.780558", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues( issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 40, "n_pass": [224, 24, 20]}
{"time": "2021-02-24 01:08:38.655475", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial); ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 39, "n_pass": [225, 25, 21]}
{"time": "2021-02-24 01:08:42.379469", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASN1InputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 38, "n_pass": [229, 27, 22]}
{"time": "2021-02-24 01:08:44.244719", "score": "0.4332", "loss": "12.1696", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASNInputStream(certID.toASN1Primitive, issuerSerial); }", "n_tokens": 37, "n_pass": [231, 28, 23]}
{"time": "2021-02-24 01:08:46.078865", "score": "0.6062", "loss": "11.7632", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASNInputStream(toASN1Primitive, issuerSerial); }", "n_tokens": 35, "n_pass": [233, 29, 24]}
{"time": "2021-02-24 01:08:47.913473", "score": "0.6135", "loss": "11.5295", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASNInputStream(Primitive, issuerSerial); }", "n_tokens": 33, "n_pass": [234, 30, 25]}
{"time": "2021-02-24 01:08:49.749489", "score": "0.8792", "loss": "11.4446", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASNInputStream( issuerSerial); }", "n_tokens": 31, "n_pass": [235, 31, 26]}
{"time": "2021-02-24 01:08:51.601021", "score": "0.9154", "loss": "11.2507", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues(issuerSerial);ASNInputStream(); }", "n_tokens": 29, "n_pass": [236, 32, 27]}
{"time": "2021-02-24 01:08:56.180328", "score": "0.5785", "loss": "10.4884", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues();ASNInputStream(); }", "n_tokens": 28, "n_pass": [258, 34, 28]}
{"time": "2021-02-24 01:08:57.986534", "score": "0.5633", "loss": "10.2281", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues();InputStream(); }", "n_tokens": 27, "n_pass": [261, 35, 29]}
{"time": "2021-02-24 01:09:01.591279", "score": "0.5633", "loss": "10.2281", "code": "void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues();InputStream();}", "n_tokens": 26, "n_pass": [294, 36, 30]}

Minimal simplified code:
void checkConstruction(OtherCertID algId,byte[]digest)throws IOException{checkValues();InputStream();}

