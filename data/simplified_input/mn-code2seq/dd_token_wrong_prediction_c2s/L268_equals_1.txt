
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/Label_equals.java
method_name = equals
method_body = public boolean equals(Object l) { if (l instanceof Label) { return ((Label) l).compareTo(this) == 0; } else throw new IllegalArgumentException("Cannot compare a Label object with a " + l.getClass().getName() + " object."); }
predict, score, loss = isEqual, 0.3989178240299225, 7.86359167098999

Trace of simplified code(s):
{"time": "2021-02-24 03:31:10.695514", "score": "0.3989", "loss": "7.8636", "code": "public boolean equals(Object l) { if (l instanceof Label) { return ((Label) l).compareTo(this) == 0; } else throw new IllegalArgumentException(\"Cannot compare a Label object with a \" + l.getClass().getName() + \" object.\"); }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:31:13.062914", "score": "0.4563", "loss": "7.9792", "code": "public boolean equals(Object l) { if (l instanceof Label) { return ((Label) l).compareTo(this) == 0; } else throw new IllegalArgumentException(\"Cannot compare a Label object with a \" + \" object.\"); }", "n_tokens": 84, "n_pass": [26, 2, 2]}
{"time": "2021-02-24 03:31:21.614942", "score": "0.3437", "loss": "8.3503", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo(this) == 0; } else throw new IllegalArgumentException(\"Cannot compare a Label object with a \" + \" object.\"); }", "n_tokens": 81, "n_pass": [99, 6, 3]}
{"time": "2021-02-24 03:31:23.936606", "score": "0.3874", "loss": "9.4827", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; } else throw new IllegalArgumentException(\"Cannot compare a Label object with a \" + \" object.\"); }", "n_tokens": 78, "n_pass": [104, 7, 4]}
{"time": "2021-02-24 03:31:29.599598", "score": "0.4172", "loss": "8.9004", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; } else throw new IllegalArgumentException(\" a Label object with a \" + \" object.\"); }", "n_tokens": 75, "n_pass": [111, 10, 5]}
{"time": "2021-02-24 03:31:31.507143", "score": "0.4328", "loss": "8.8733", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; } else throw new IllegalArgumentException(\"Label object with a \" + \" object.\"); }", "n_tokens": 72, "n_pass": [112, 11, 6]}
{"time": "2021-02-24 03:31:33.383500", "score": "0.4052", "loss": "8.904", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; } else throw new IllegalArgumentException(\" with a \" + \" object.\"); }", "n_tokens": 69, "n_pass": [113, 12, 7]}
{"time": "2021-02-24 03:31:39.890707", "score": "0.4919", "loss": "8.8178", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; }  new IllegalArgumentException(\" with a \" + \" object.\"); }", "n_tokens": 66, "n_pass": [134, 15, 8]}
{"time": "2021-02-24 03:31:41.790768", "score": "0.5058", "loss": "9.3431", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; } IllegalArgumentException(\" with a \" + \" object.\"); }", "n_tokens": 63, "n_pass": [135, 16, 9]}
{"time": "2021-02-24 03:31:53.642454", "score": "0.5031", "loss": "7.4755", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; }(\" with a \" + \" object.\"); }", "n_tokens": 61, "n_pass": [202, 20, 10]}
{"time": "2021-02-24 03:31:55.531738", "score": "0.4623", "loss": "7.7098", "code": "public boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 59, "n_pass": [204, 21, 11]}
{"time": "2021-02-24 03:32:01.079184", "score": "0.4623", "loss": "7.7098", "code": " boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 58, "n_pass": [213, 24, 12]}
{"time": "2021-02-24 03:32:02.949449", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l) { if (l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 57, "n_pass": [214, 25, 13]}
{"time": "2021-02-24 03:32:05.822883", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){ if (l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 56, "n_pass": [223, 26, 14]}
{"time": "2021-02-24 03:32:07.678885", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if (l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 55, "n_pass": [225, 27, 15]}
{"time": "2021-02-24 03:32:09.506651", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l ) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 54, "n_pass": [227, 28, 16]}
{"time": "2021-02-24 03:32:11.386055", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l) { return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 53, "n_pass": [230, 29, 17]}
{"time": "2021-02-24 03:32:13.258214", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label) l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 52, "n_pass": [232, 30, 18]}
{"time": "2021-02-24 03:32:31.671268", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo == 0; }(\" a \" + \" object.\"); }", "n_tokens": 51, "n_pass": [305, 36, 19]}
{"time": "2021-02-24 03:32:35.404103", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo== 0; }(\" a \" + \" object.\"); }", "n_tokens": 50, "n_pass": [310, 38, 20]}
{"time": "2021-02-24 03:32:40.907182", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0; }(\" a \" + \" object.\"); }", "n_tokens": 49, "n_pass": [313, 41, 21]}
{"time": "2021-02-24 03:32:42.801453", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\" a \" + \" object.\"); }", "n_tokens": 48, "n_pass": [316, 42, 22]}
{"time": "2021-02-24 03:32:44.653948", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a \" + \" object.\"); }", "n_tokens": 47, "n_pass": [320, 43, 23]}
{"time": "2021-02-24 03:32:48.405365", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\" + \" object.\"); }", "n_tokens": 46, "n_pass": [322, 45, 24]}
{"time": "2021-02-24 03:32:50.245351", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\"+ \" object.\"); }", "n_tokens": 45, "n_pass": [324, 46, 25]}
{"time": "2021-02-24 03:32:52.085262", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\"+\" object.\"); }", "n_tokens": 44, "n_pass": [326, 47, 26]}
{"time": "2021-02-24 03:32:53.935970", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\"+\"object.\"); }", "n_tokens": 43, "n_pass": [328, 48, 27]}
{"time": "2021-02-24 03:32:57.597428", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\"+\"object\"); }", "n_tokens": 42, "n_pass": [330, 50, 28]}
{"time": "2021-02-24 03:32:59.434262", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){ return ((Label)l).compareTo==0;}(\"a\"+\"object\");}", "n_tokens": 41, "n_pass": [334, 51, 29]}
{"time": "2021-02-24 03:33:02.203899", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){return ((Label)l).compareTo==0;}(\"a\"+\"object\");}", "n_tokens": 40, "n_pass": [350, 52, 30]}
{"time": "2021-02-24 03:33:04.509634", "score": "0.4623", "loss": "7.7098", "code": "boolean equals(Object l){if(l){return((Label)l).compareTo==0;}(\"a\"+\"object\");}", "n_tokens": 39, "n_pass": [352, 53, 31]}

Minimal simplified code:
boolean equals(Object l){if(l){return((Label)l).compareTo==0;}("a"+"object");}

