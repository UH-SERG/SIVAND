
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher_encodePlaintext.java
method_name = encodePlaintext
method_body = public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException { byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); byte[] ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext, 0, len); System.arraycopy(mac, 0, ciphertext, len, mac.length); return ciphertext; }
predict, score, loss = encrypt, 0.5402159094810486, 13.858501434326172

Trace of simplified code(s):
{"time": "2021-02-23 19:29:23.302326", "score": "0.5847", "loss": "13.3894", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException { byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); byte[] ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext, 0, len); System.arraycopy(mac, 0, ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 139, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:29:25.335053", "score": "0.4758", "loss": "14.7045", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException { byte[] mac = writeMac.calculateMac(seqNo, type, plaintext, offset, len); byte[] ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 121, "n_pass": [26, 2, 2]}
{"time": "2021-02-23 19:29:27.297943", "score": "0.527", "loss": "15.2831", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext, offset, len); byte[] ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 112, "n_pass": [55, 3, 3]}
{"time": "2021-02-23 19:29:29.285737", "score": "0.5737", "loss": "15.524", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); byte[] ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 108, "n_pass": [98, 4, 4]}
{"time": "2021-02-23 19:29:31.167907", "score": "0.5285", "loss": "15.181", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); ciphertext = new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 104, "n_pass": [100, 5, 5]}
{"time": "2021-02-23 19:29:33.096325", "score": "0.5973", "loss": "14.0465", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintext, offset, ciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 100, "n_pass": [101, 6, 6]}
{"time": "2021-02-23 19:29:35.008040", "score": "0.6599", "loss": "12.7483", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextciphertext,ciphertext, len, mac.length); return ciphertext; }", "n_tokens": 95, "n_pass": [106, 7, 7]}
{"time": "2021-02-23 19:29:36.911739", "score": "0.55", "loss": "11.1583", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlen, mac.length); return ciphertext; }", "n_tokens": 90, "n_pass": [107, 8, 8]}
{"time": "2021-02-23 19:29:38.804139", "score": "0.4416", "loss": "11.2033", "code": "public byte[] encodePlaintext(long seqNo, short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 85, "n_pass": [108, 9, 9]}
{"time": "2021-02-23 19:29:40.697309", "score": "0.4646", "loss": "10.8619", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offset, int len) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 81, "n_pass": [113, 10, 10]}
{"time": "2021-02-23 19:29:42.585354", "score": "0.4557", "loss": "10.8009", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {writeMac.calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 77, "n_pass": [118, 11, 11]}
{"time": "2021-02-23 19:29:47.270492", "score": "0.4608", "loss": "11.1751", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac(seqNo, type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 75, "n_pass": [177, 13, 12]}
{"time": "2021-02-23 19:29:49.197842", "score": "0.3681", "loss": "10.4907", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[len + mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 73, "n_pass": [178, 14, 13]}
{"time": "2021-02-23 19:29:54.808829", "score": "0.3563", "loss": "11.0531", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[+ mac.length]; System.arraycopy(plaintextlength); return ciphertext; }", "n_tokens": 71, "n_pass": [186, 17, 14]}
{"time": "2021-02-23 19:30:00.463369", "score": "0.3834", "loss": "11.3186", "code": "public byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[+ mac.length]; (plaintextlength); return ciphertext; }", "n_tokens": 68, "n_pass": [191, 20, 15]}
{"time": "2021-02-23 19:30:04.163859", "score": "0.3834", "loss": "11.3186", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[+ mac.length]; (plaintextlength); return ciphertext; }", "n_tokens": 66, "n_pass": [196, 22, 16]}
{"time": "2021-02-23 19:30:09.764971", "score": "0.3729", "loss": "10.9058", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[mac.length]; (plaintextlength); return ciphertext; }", "n_tokens": 64, "n_pass": [220, 25, 17]}
{"time": "2021-02-23 19:30:11.649166", "score": "0.3328", "loss": "10.9215", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length]; (plaintextlength); return ciphertext; }", "n_tokens": 62, "n_pass": [221, 26, 18]}
{"time": "2021-02-23 19:30:26.783900", "score": "0.3328", "loss": "10.9215", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(plaintextlength); return ciphertext; }", "n_tokens": 61, "n_pass": [312, 30, 19]}
{"time": "2021-02-23 19:30:28.622146", "score": "0.3326", "loss": "10.982", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); return ciphertext; }", "n_tokens": 60, "n_pass": [314, 31, 20]}
{"time": "2021-02-23 19:30:30.467339", "score": "0.3738", "loss": "11.393", "code": "byte[] encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 58, "n_pass": [318, 32, 21]}
{"time": "2021-02-23 19:30:34.214092", "score": "0.3738", "loss": "11.393", "code": "byte[]encodePlaintext( short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 57, "n_pass": [324, 34, 22]}
{"time": "2021-02-23 19:30:36.153967", "score": "0.3738", "loss": "11.393", "code": "byte[]encodePlaintext(short type, byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 56, "n_pass": [327, 35, 23]}
{"time": "2021-02-23 19:30:38.023204", "score": "0.3738", "loss": "11.393", "code": "byte[]encodePlaintext(short type,byte[] plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 55, "n_pass": [332, 36, 24]}
{"time": "2021-02-23 19:30:39.837525", "score": "0.3738", "loss": "11.393", "code": "byte[]encodePlaintext(short type,byte[]plaintext, int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 54, "n_pass": [336, 37, 25]}
{"time": "2021-02-23 19:30:41.698705", "score": "0.3738", "loss": "11.393", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int offsetlen) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 53, "n_pass": [339, 38, 26]}
{"time": "2021-02-23 19:30:43.585366", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len) throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 52, "n_pass": [342, 39, 27]}
{"time": "2021-02-23 19:30:45.411490", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException {calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 51, "n_pass": [345, 40, 28]}
{"time": "2021-02-23 19:30:47.275775", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac( type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 50, "n_pass": [349, 41, 29]}
{"time": "2021-02-23 19:30:49.134072", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type, plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 49, "n_pass": [353, 42, 30]}
{"time": "2021-02-23 19:30:51.029718", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len); new byte[length];(length); ciphertext; }", "n_tokens": 48, "n_pass": [356, 43, 31]}
{"time": "2021-02-23 19:30:54.720390", "score": "0.3896", "loss": "11.3166", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len);new byte[length];(length); ciphertext; }", "n_tokens": 47, "n_pass": [362, 45, 32]}
{"time": "2021-02-23 19:30:58.867629", "score": "0.2779", "loss": "12.2026", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len);new byte[length];(length);  }", "n_tokens": 45, "n_pass": [374, 47, 33]}
{"time": "2021-02-23 19:31:07.611298", "score": "0.2779", "loss": "12.2026", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len);new byte[length];(length); }", "n_tokens": 44, "n_pass": [422, 51, 34]}
{"time": "2021-02-23 19:31:15.121256", "score": "0.2779", "loss": "12.2026", "code": "byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len);new byte[length];(length);}", "n_tokens": 43, "n_pass": [465, 55, 35]}

Minimal simplified code:
byte[]encodePlaintext(short type,byte[]plaintext,int len)throws IOException{calculateMac(type,plaintext,len);new byte[length];(length);}

