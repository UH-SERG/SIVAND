
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/pg/src/main/java/org/bouncycastle/bcpg/BCPGOutputStream_partialFlush.java
method_name = partialFlush
method_body = private void partialFlush(boolean isLast) throws IOException { if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 | partialPower); out.write(partialBuffer, 0, partialBufferLength); } partialOffset = 0; }
predict, score, loss = write, 0.950949490070343, 16.333499908447266

Trace of simplified code(s):
{"time": "2021-02-24 01:09:06.322515", "score": "0.9535", "loss": "16.3353", "code": "private void partialFlush(boolean isLast) throws IOException { if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 | partialPower); out.write(partialBuffer, 0, partialBufferLength); } partialOffset = 0; }", "n_tokens": 89, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:09:10.141881", "score": "0.9022", "loss": "16.6154", "code": "private void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 | partialPower); out.write(partialBuffer, 0, partialBufferLength); } partialOffset = 0; }", "n_tokens": 84, "n_pass": [46, 3, 2]}
{"time": "2021-02-24 01:09:27.301084", "score": "0.9078", "loss": "16.1771", "code": "private void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, 0, partialBufferLength); } partialOffset = 0; }", "n_tokens": 81, "n_pass": [108, 12, 3]}
{"time": "2021-02-24 01:09:29.259093", "score": "0.899", "loss": "15.9321", "code": "private void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 78, "n_pass": [111, 13, 4]}
{"time": "2021-02-24 01:09:33.066800", "score": "0.899", "loss": "15.9321", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset); out.write(partialBuffer, 0, partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 76, "n_pass": [117, 15, 5]}
{"time": "2021-02-24 01:09:39.199382", "score": "0.867", "loss": "15.0859", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset); out.write(0, partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 73, "n_pass": [129, 18, 6]}
{"time": "2021-02-24 01:09:57.541281", "score": "0.867", "loss": "15.0859", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset);out.write(0, partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 72, "n_pass": [209, 25, 7]}
{"time": "2021-02-24 01:10:01.372942", "score": "0.867", "loss": "15.0859", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE0 ); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 71, "n_pass": [216, 27, 8]}
{"time": "2021-02-24 01:10:08.942732", "score": "0.867", "loss": "15.0859", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out.write(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 69, "n_pass": [225, 31, 9]}
{"time": "2021-02-24 01:10:10.831162", "score": "0.8836", "loss": "14.1351", "code": "void partialFlush(boolean isLast){ if (isLast) { writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 67, "n_pass": [228, 32, 10]}
{"time": "2021-02-24 01:10:15.544949", "score": "0.8836", "loss": "14.1351", "code": "void partialFlush(boolean isLast){if (isLast) { writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 66, "n_pass": [247, 34, 11]}
{"time": "2021-02-24 01:10:17.444688", "score": "0.8836", "loss": "14.1351", "code": "void partialFlush(boolean isLast){if(isLast) { writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 65, "n_pass": [249, 35, 12]}
{"time": "2021-02-24 01:10:19.330607", "score": "0.8836", "loss": "14.1351", "code": "void partialFlush(boolean isLast){if(isLast){ writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 64, "n_pass": [253, 36, 13]}
{"time": "2021-02-24 01:10:21.182071", "score": "0.8836", "loss": "14.1351", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength(partialOffset);out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 63, "n_pass": [255, 37, 14]}
{"time": "2021-02-24 01:10:24.903576", "score": "0.857", "loss": "13.5729", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out.write(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 62, "n_pass": [258, 39, 15]}
{"time": "2021-02-24 01:10:26.765415", "score": "0.7558", "loss": "12.1811", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();outwrite(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 61, "n_pass": [262, 40, 16]}
{"time": "2021-02-24 01:10:28.657633", "score": "0.7912", "loss": "12.7535", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); } else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 60, "n_pass": [263, 41, 17]}
{"time": "2021-02-24 01:10:45.315384", "score": "0.7912", "loss": "12.7535", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else { out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 59, "n_pass": [343, 46, 18]}
{"time": "2021-02-24 01:10:49.023133", "score": "0.7912", "loss": "12.7535", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{ out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 58, "n_pass": [345, 48, 19]}
{"time": "2021-02-24 01:10:50.940366", "score": "0.7912", "loss": "12.7535", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(0xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 57, "n_pass": [347, 49, 20]}
{"time": "2021-02-24 01:10:54.696478", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE); out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 56, "n_pass": [352, 51, 21]}
{"time": "2021-02-24 01:10:58.413357", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer, partialBufferLength); } partialOffset = 0; }", "n_tokens": 55, "n_pass": [356, 53, 22]}
{"time": "2021-02-24 01:11:00.321689", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength); } partialOffset = 0; }", "n_tokens": 54, "n_pass": [361, 54, 23]}
{"time": "2021-02-24 01:11:02.240252", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength);} partialOffset = 0; }", "n_tokens": 53, "n_pass": [365, 55, 24]}
{"time": "2021-02-24 01:11:04.117622", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset = 0; }", "n_tokens": 52, "n_pass": [367, 56, 25]}
{"time": "2021-02-24 01:11:05.995146", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset= 0; }", "n_tokens": 51, "n_pass": [369, 57, 26]}
{"time": "2021-02-24 01:11:07.882721", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset=0; }", "n_tokens": 50, "n_pass": [371, 58, 27]}
{"time": "2021-02-24 01:11:09.776326", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset); }else{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset=0;}", "n_tokens": 49, "n_pass": [374, 59, 28]}
{"time": "2021-02-24 01:11:12.608431", "score": "0.8217", "loss": "12.9519", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset);}else{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset=0;}", "n_tokens": 48, "n_pass": [401, 60, 29]}
{"time": "2021-02-24 01:11:14.462831", "score": "0.7094", "loss": "12.7736", "code": "void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset);}{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset=0;}", "n_tokens": 47, "n_pass": [403, 61, 30]}

Minimal simplified code:
void partialFlush(boolean isLast){if(isLast){writeNewPacketLength();out(0,partialOffset);}{out.write(xE);out(partialBuffer,partialBufferLength);}partialOffset=0;}

