
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/sun/identity/common/BackwardCompSupport_beforeDisplayUser.java
method_name = beforeDisplayUser
method_body = private void beforeDisplayUser(Set attributeSchemas) { for (Iterator iter = attributeSchemas.iterator(); iter.hasNext(); ) { AttributeSchema as = (AttributeSchema) iter.next(); String name = as.getName(); if (name.equals(namingAttribute) || name.equals("ChangePassword")) { iter.remove(); } } }
predict, score, loss = removeChangePassword, 0.7396570444107056, 29.011524200439453

Trace of simplified code(s):
{"time": "2021-02-24 03:28:09.785635", "score": "0.7397", "loss": "29.0115", "code": "private void beforeDisplayUser(Set attributeSchemas) { for (Iterator iter = attributeSchemas.iterator(); iter.hasNext(); ) { AttributeSchema as = (AttributeSchema) iter.next(); String name = as.getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:28:13.619241", "score": "0.7812", "loss": "29.1831", "code": "private void beforeDisplayUser(Set attributeSchemas) { for (Iterator iter = attributeSchemas.iterator(); iter.hasNext(); ) { AttributeSchema as = (AttributeSchema) iter.getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 94, "n_pass": [24, 3, 2]}
{"time": "2021-02-24 03:28:17.476146", "score": "0.7623", "loss": "28.6273", "code": "private void beforeDisplayUser(Set attributeSchemas) { for (Iterator iter = attributeSchemas.iterator(); iter.hasNext(); ) { AttributeSchema as =getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 87, "n_pass": [59, 5, 3]}
{"time": "2021-02-24 03:28:19.888144", "score": "0.7145", "loss": "27.6172", "code": "private void beforeDisplayUser() { for (Iterator iter = attributeSchemas.iterator(); iter.hasNext(); ) { AttributeSchema as =getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 84, "n_pass": [113, 6, 4]}
{"time": "2021-02-24 03:28:21.785321", "score": "0.7549", "loss": "27.7633", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) { AttributeSchema as =getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 81, "n_pass": [117, 7, 5]}
{"time": "2021-02-24 03:28:23.679503", "score": "0.7354", "loss": "26.3319", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {as =getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 78, "n_pass": [123, 8, 6]}
{"time": "2021-02-24 03:28:25.556849", "score": "0.6795", "loss": "25.9239", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {getName(); if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 75, "n_pass": [124, 9, 7]}
{"time": "2021-02-24 03:28:27.495396", "score": "0.8029", "loss": "27.9087", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (name.equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 72, "n_pass": [125, 10, 8]}
{"time": "2021-02-24 03:28:32.447576", "score": "0.8263", "loss": "27.804", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute) || name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 70, "n_pass": [192, 11, 9]}
{"time": "2021-02-24 03:28:34.315836", "score": "0.7715", "loss": "26.4127", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| name.equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 68, "n_pass": [195, 12, 10]}
{"time": "2021-02-24 03:28:36.241110", "score": "0.7565", "loss": "26.4211", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { iter.remove(); } } }", "n_tokens": 66, "n_pass": [197, 13, 11]}
{"time": "2021-02-24 03:28:38.125097", "score": "0.5817", "loss": "23.8483", "code": "private void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 64, "n_pass": [203, 14, 12]}
{"time": "2021-02-24 03:28:40.018081", "score": "0.5817", "loss": "23.8483", "code": " void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 63, "n_pass": [209, 15, 13]}
{"time": "2021-02-24 03:28:41.938594", "score": "0.5817", "loss": "23.8483", "code": "void beforeDisplayUser() { for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 62, "n_pass": [210, 16, 14]}
{"time": "2021-02-24 03:28:44.760337", "score": "0.5817", "loss": "23.8483", "code": "void beforeDisplayUser(){ for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 61, "n_pass": [216, 17, 15]}
{"time": "2021-02-24 03:28:46.649466", "score": "0.5817", "loss": "23.8483", "code": "void beforeDisplayUser(){for (Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 60, "n_pass": [218, 18, 16]}
{"time": "2021-02-24 03:28:48.525233", "score": "0.5817", "loss": "23.8483", "code": "void beforeDisplayUser(){for(Iterator iter =iterator(); iter.hasNext(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 59, "n_pass": [220, 19, 17]}
{"time": "2021-02-24 03:28:52.254333", "score": "0.4485", "loss": "22.5533", "code": "void beforeDisplayUser(){for(Iterator iter =iterator(); iter(); ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 57, "n_pass": [227, 21, 18]}
{"time": "2021-02-24 03:28:54.165074", "score": "0.5356", "loss": "23.0713", "code": "void beforeDisplayUser(){for(Iterator iter =iterator(); iter; ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 55, "n_pass": [228, 22, 19]}
{"time": "2021-02-24 03:28:58.798025", "score": "0.5228", "loss": "22.8155", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {; if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 53, "n_pass": [259, 24, 20]}
{"time": "2021-02-24 03:29:10.311786", "score": "0.5228", "loss": "22.8155", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) { if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 52, "n_pass": [337, 26, 21]}
{"time": "2021-02-24 03:29:12.167468", "score": "0.5228", "loss": "22.8155", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if (equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 51, "n_pass": [338, 27, 22]}
{"time": "2021-02-24 03:29:14.023107", "score": "0.5228", "loss": "22.8155", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals(namingAttribute)| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 50, "n_pass": [340, 28, 23]}
{"time": "2021-02-24 03:29:17.772164", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()| equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 49, "n_pass": [344, 30, 24]}
{"time": "2021-02-24 03:29:19.691440", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")) { remove(); } } }", "n_tokens": 48, "n_pass": [347, 31, 25]}
{"time": "2021-02-24 03:29:25.365773", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")){ remove(); } } }", "n_tokens": 47, "n_pass": [355, 34, 26]}
{"time": "2021-02-24 03:29:27.232473", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")){remove(); } } }", "n_tokens": 46, "n_pass": [357, 35, 27]}
{"time": "2021-02-24 03:29:29.106683", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")){remove();} } }", "n_tokens": 45, "n_pass": [362, 36, 28]}
{"time": "2021-02-24 03:29:30.992516", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")){remove();}} }", "n_tokens": 44, "n_pass": [364, 37, 29]}
{"time": "2021-02-24 03:29:32.860548", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter =iterator();; ) {if(equals()|equals(\"ChangePassword\")){remove();}}}", "n_tokens": 43, "n_pass": [366, 38, 30]}
{"time": "2021-02-24 03:29:41.227831", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter=iterator();; ) {if(equals()|equals(\"ChangePassword\")){remove();}}}", "n_tokens": 42, "n_pass": [379, 42, 31]}
{"time": "2021-02-24 03:29:43.109779", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter=iterator();;) {if(equals()|equals(\"ChangePassword\")){remove();}}}", "n_tokens": 41, "n_pass": [386, 43, 32]}
{"time": "2021-02-24 03:29:44.970459", "score": "0.5631", "loss": "24.9339", "code": "void beforeDisplayUser(){for(Iterator iter=iterator();;){if(equals()|equals(\"ChangePassword\")){remove();}}}", "n_tokens": 40, "n_pass": [388, 44, 33]}

Minimal simplified code:
void beforeDisplayUser(){for(Iterator iter=iterator();;){if(equals()|equals("ChangePassword")){remove();}}}

