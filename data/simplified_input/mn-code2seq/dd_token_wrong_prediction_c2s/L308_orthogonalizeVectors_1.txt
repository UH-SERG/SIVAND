
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/semanticvectors__semanticvectors/src/main/java/pitt/search/semanticvectors/vectors/VectorUtils_orthogonalizeVectors.java
method_name = orthogonalizeVectors
method_body = public static void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: RealVectorUtils.orthogonalizeVectors(list); break; case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException("Type not recognized: " + list.get(0).getVectorType()); } }
predict, score, loss = vectorVectors, 0.46888887882232666, 8.611294746398926

Trace of simplified code(s):
{"time": "2021-02-24 09:20:43.740925", "score": "0.4689", "loss": "8.6113", "code": "public static void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: RealVectorUtils.orthogonalizeVectors(list); break; case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 119, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:20:59.098974", "score": "0.4689", "loss": "8.6113", "code": " void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: RealVectorUtils.orthogonalizeVectors(list); break; case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 116, "n_pass": [92, 9, 2]}
{"time": "2021-02-24 09:21:15.175788", "score": "0.4689", "loss": "8.6113", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: RealVectorUtils.orthogonalizeVectors(list); break; case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 115, "n_pass": [186, 16, 3]}
{"time": "2021-02-24 09:21:19.977220", "score": "0.4322", "loss": "8.6707", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list); break; case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 113, "n_pass": [208, 18, 4]}
{"time": "2021-02-24 09:21:21.862941", "score": "0.4322", "loss": "8.6707", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list); break; case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 111, "n_pass": [212, 19, 5]}
{"time": "2021-02-24 09:21:27.612933", "score": "0.4322", "loss": "8.6707", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list); break; default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 109, "n_pass": [220, 22, 6]}
{"time": "2021-02-24 09:21:33.420569", "score": "0.4322", "loss": "8.6707", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw new IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 107, "n_pass": [228, 25, 7]}
{"time": "2021-02-24 09:21:37.269581", "score": "0.4555", "loss": "8.903", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type not recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 105, "n_pass": [232, 27, 8]}
{"time": "2021-02-24 09:21:39.168618", "score": "0.4126", "loss": "9.2879", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type recognized: \" + list.get(0).getVectorType()); } }", "n_tokens": 103, "n_pass": [235, 28, 9]}
{"time": "2021-02-24 09:21:41.082721", "score": "0.4928", "loss": "8.5636", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type: \" + list.get(0).getVectorType()); } }", "n_tokens": 101, "n_pass": [236, 29, 10]}
{"time": "2021-02-24 09:21:43.008849", "score": "0.4928", "loss": "8.5636", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list.get(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type\" + list.get(0).getVectorType()); } }", "n_tokens": 99, "n_pass": [237, 30, 11]}
{"time": "2021-02-24 09:21:49.674158", "score": "0.4596", "loss": "8.7372", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: ComplexVectorUtils.orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type\" + list.get(0).getVectorType()); } }", "n_tokens": 97, "n_pass": [260, 33, 12]}
{"time": "2021-02-24 09:21:53.537344", "score": "0.3518", "loss": "9.3376", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: throw IncompatibleVectorsException(\"Type\" + list.get(0).getVectorType()); } }", "n_tokens": 95, "n_pass": [275, 35, 13]}
{"time": "2021-02-24 09:21:59.303803", "score": "0.3309", "loss": "10.2047", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + list.get(0).getVectorType()); } }", "n_tokens": 93, "n_pass": [288, 38, 14]}
{"time": "2021-02-24 09:22:01.225206", "score": "0.3215", "loss": "10.1582", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType()); } }", "n_tokens": 91, "n_pass": [293, 39, 15]}
{"time": "2021-02-24 09:22:03.157402", "score": "0.3135", "loss": "10.1871", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  case COMPLEX: orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 89, "n_pass": [297, 40, 16]}
{"time": "2021-02-24 09:22:06.017601", "score": "0.311", "loss": "9.9006", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  COMPLEX: orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 87, "n_pass": [324, 41, 17]}
{"time": "2021-02-24 09:22:07.896723", "score": "0.3138", "loss": "10.203", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list);  COMPLEXorthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 85, "n_pass": [326, 42, 18]}
{"time": "2021-02-24 09:22:18.452931", "score": "0.2711", "loss": "10.405", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);  case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 83, "n_pass": [372, 47, 19]}
{"time": "2021-02-24 09:22:38.769142", "score": "0.2711", "loss": "10.405", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list); case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 82, "n_pass": [496, 52, 20]}
{"time": "2021-02-24 09:22:40.717828", "score": "0.2711", "loss": "10.405", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY: BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 81, "n_pass": [497, 53, 21]}
{"time": "2021-02-24 09:22:46.405281", "score": "0.2711", "loss": "10.405", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtils.orthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 80, "n_pass": [502, 56, 22]}
{"time": "2021-02-24 09:22:48.251539", "score": "0.4146", "loss": "10.1432", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);  default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 79, "n_pass": [504, 57, 23]}
{"time": "2021-02-24 09:22:53.885558", "score": "0.4146", "loss": "10.1432", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list); default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 78, "n_pass": [510, 60, 24]}
{"time": "2021-02-24 09:22:55.793678", "score": "0.4146", "loss": "10.1432", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default: IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 77, "n_pass": [511, 61, 25]}
{"time": "2021-02-24 09:22:57.700238", "score": "0.4146", "loss": "10.1432", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"Type\" + get(0).getVectorType); } }", "n_tokens": 76, "n_pass": [514, 62, 26]}
{"time": "2021-02-24 09:23:01.469242", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\" + get(0).getVectorType); } }", "n_tokens": 75, "n_pass": [518, 64, 27]}
{"time": "2021-02-24 09:23:03.367492", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+ get(0).getVectorType); } }", "n_tokens": 74, "n_pass": [520, 65, 28]}
{"time": "2021-02-24 09:23:05.284127", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType); } }", "n_tokens": 73, "n_pass": [522, 66, 29]}
{"time": "2021-02-24 09:23:10.993721", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);} }", "n_tokens": 72, "n_pass": [531, 69, 30]}
{"time": "2021-02-24 09:23:12.854970", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector> list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 71, "n_pass": [533, 70, 31]}
{"time": "2021-02-24 09:23:15.697510", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list) { switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 70, "n_pass": [543, 71, 32]}
{"time": "2021-02-24 09:23:17.625074", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){ switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 69, "n_pass": [546, 72, 33]}
{"time": "2021-02-24 09:23:19.516927", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()) { case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 68, "n_pass": [548, 73, 34]}
{"time": "2021-02-24 09:23:25.175188", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()){ case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 67, "n_pass": [560, 76, 35]}
{"time": "2021-02-24 09:23:27.124329", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()){case REAL: orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 66, "n_pass": [562, 77, 36]}
{"time": "2021-02-24 09:23:29.045373", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()){case REAL:orthogonalizeVectors(list); orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 65, "n_pass": [567, 78, 37]}
{"time": "2021-02-24 09:23:34.749046", "score": "0.43", "loss": "10.1387", "code": "void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()){case REAL:orthogonalizeVectors(list);orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(\"\"+get(0).getVectorType);}}", "n_tokens": 64, "n_pass": [573, 81, 38]}

Minimal simplified code:
void orthogonalizeVectors(List<Vector>list){switch(list(0).getVectorType()){case REAL:orthogonalizeVectors(list);orthogonalizeVectors(list);case BINARY:BinaryVectorUtilsorthogonalizeVectors(list);default:IncompatibleVectorsException(""+get(0).getVectorType);}}

