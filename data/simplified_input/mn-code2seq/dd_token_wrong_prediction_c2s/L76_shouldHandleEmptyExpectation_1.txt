
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jamesdbloom__mockserver/mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaValidatorTest_shouldHandleEmptyExpectation.java
method_name = shouldHandleEmptyExpectation
method_body = @Test public void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage("Schema must either be a path reference to a *.json file or a json string"); new JsonSchemaValidator(new MockServerLogger(), "").isValid("some_value"); }
predict, score, loss = shouldThrowExceptionWhenValid, 0.43690454959869385, 34.4651985168457

Trace of simplified code(s):
{"time": "2021-02-24 10:07:27.459665", "score": "0.4369", "loss": "34.4652", "code": "@Test public void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage(\"Schema must either be a path reference to a *.json file or a json string\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 89, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 10:07:29.789541", "score": "0.4086", "loss": "34.894", "code": "@Test public void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage(\"Schema must eithera *.json file or a json string\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 78, "n_pass": [23, 2, 2]}
{"time": "2021-02-24 10:07:31.691713", "score": "0.4117", "loss": "34.9461", "code": "@Test public void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage(\"Schema must either json string\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 67, "n_pass": [24, 3, 3]}
{"time": "2021-02-24 10:07:35.897654", "score": "0.407", "loss": "34.5784", "code": "@Test public void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage(\"Schema must\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 61, "n_pass": [43, 5, 4]}
{"time": "2021-02-24 10:07:43.327580", "score": "0.407", "loss": "34.5784", "code": "@Test void shouldHandleEmptyExpectation() { exception.expect(IllegalArgumentException.class); exception.expectMessage(\"Schema must\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 59, "n_pass": [88, 9, 5]}
{"time": "2021-02-24 10:07:45.610749", "score": "0.3745", "loss": "34.7973", "code": "@Test void shouldHandleEmptyExpectation() { (IllegalArgumentException.class); exception.expectMessage(\"Schema must\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 56, "n_pass": [93, 10, 6]}
{"time": "2021-02-24 10:07:58.363918", "score": "0.3745", "loss": "34.7973", "code": "@Test void shouldHandleEmptyExpectation() {(IllegalArgumentException.class); exception.expectMessage(\"Schema must\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 55, "n_pass": [154, 15, 7]}
{"time": "2021-02-24 10:08:02.088704", "score": "0.3745", "loss": "34.7973", "code": "@Test void shouldHandleEmptyExpectation() {(IllegalArgumentException.class);exception.expectMessage(\"Schema must\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 54, "n_pass": [161, 17, 8]}
{"time": "2021-02-24 10:08:07.660863", "score": "0.4204", "loss": "34.6697", "code": "@Test void shouldHandleEmptyExpectation() {(IllegalArgumentException.class);exception.expectMessage(\"Schema\"); new JsonSchemaValidator(new MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 52, "n_pass": [168, 20, 9]}
{"time": "2021-02-24 10:08:11.415403", "score": "0.4317", "loss": "34.4369", "code": "@Test void shouldHandleEmptyExpectation() {(IllegalArgumentException.class);exception.expectMessage(\"Schema\"); new JsonSchemaValidator(MockServerLogger(), \"\").isValid(\"some_value\"); }", "n_tokens": 50, "n_pass": [173, 22, 10]}
{"time": "2021-02-24 10:08:13.292193", "score": "0.4132", "loss": "35.4784", "code": "@Test void shouldHandleEmptyExpectation() {(IllegalArgumentException.class);exception.expectMessage(\"Schema\"); new JsonSchemaValidator(MockServerLogger(), \"\").isValid(\"value\"); }", "n_tokens": 48, "n_pass": [180, 23, 11]}
{"time": "2021-02-24 10:08:16.574987", "score": "0.4132", "loss": "35.4784", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"Schema\"); new JsonSchemaValidator(MockServerLogger(), \"\").isValid(\"value\"); }", "n_tokens": 47, "n_pass": [192, 24, 12]}
{"time": "2021-02-24 10:08:22.134413", "score": "0.3999", "loss": "34.7931", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"\"); new JsonSchemaValidator(MockServerLogger(), \"\").isValid(\"value\"); }", "n_tokens": 46, "n_pass": [205, 27, 13]}
{"time": "2021-02-24 10:08:33.364742", "score": "0.3999", "loss": "34.7931", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"\"); new JsonSchemaValidator(MockServerLogger(),\"\").isValid(\"value\"); }", "n_tokens": 45, "n_pass": [270, 31, 14]}
{"time": "2021-02-24 10:08:37.057109", "score": "0.3999", "loss": "34.7931", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"\"); new JsonSchemaValidator(MockServerLogger(),\"\").isValid(\"value\");}", "n_tokens": 44, "n_pass": [281, 33, 15]}
{"time": "2021-02-24 10:08:43.998893", "score": "0.3999", "loss": "34.7931", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"\");new JsonSchemaValidator(MockServerLogger(),\"\").isValid(\"value\");}", "n_tokens": 43, "n_pass": [306, 36, 16]}
{"time": "2021-02-24 10:08:47.670888", "score": "0.3612", "loss": "33.3625", "code": "@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage(\"\");newJsonSchemaValidator(MockServerLogger(),\"\").isValid(\"value\");}", "n_tokens": 42, "n_pass": [308, 38, 17]}

Minimal simplified code:
@Test void shouldHandleEmptyExpectation(){(IllegalArgumentException.class);exception.expectMessage("");newJsonSchemaValidator(MockServerLogger(),"").isValid("value");}

