
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/topics/HierarchicalLDA_getNewLeaf.java
method_name = getNewLeaf
method_body = public NCRPNode getNewLeaf() { NCRPNode node = this; for (int l = level; l < numLevels - 1; l++) { node = node.addChild(); } return node; }
predict, score, loss = addChild, 0.8573935031890869, 21.673118591308594

Trace of simplified code(s):
{"time": "2021-02-24 04:12:38.278851", "score": "0.8574", "loss": "21.6731", "code": "public NCRPNode getNewLeaf() { NCRPNode node = this; for (int l = level; l < numLevels - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 68, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:12:41.145418", "score": "0.8819", "loss": "22.2969", "code": "public NCRPNode getNewLeaf() { NCRPNode node = this; for (int level; l < numLevels - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 64, "n_pass": [50, 2, 2]}
{"time": "2021-02-24 04:12:43.042533", "score": "0.8444", "loss": "24.8417", "code": "public NCRPNode getNewLeaf() { NCRPNode node = this; for (int level; l - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 60, "n_pass": [51, 3, 3]}
{"time": "2021-02-24 04:12:53.429169", "score": "0.8444", "loss": "24.8417", "code": "NCRPNode getNewLeaf() { NCRPNode node = this; for (int level; l - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 58, "n_pass": [108, 8, 4]}
{"time": "2021-02-24 04:12:55.295386", "score": "0.9495", "loss": "30.0465", "code": "NCRPNode getNewLeaf() { node = this; for (int level; l - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 56, "n_pass": [112, 9, 5]}
{"time": "2021-02-24 04:12:57.124703", "score": "0.9347", "loss": "29.4491", "code": "NCRPNode getNewLeaf() { node = this; for (level; l - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 54, "n_pass": [118, 10, 6]}
{"time": "2021-02-24 04:12:58.987036", "score": "0.9368", "loss": "29.1728", "code": "NCRPNode getNewLeaf() { node = this; for (level; - 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 52, "n_pass": [120, 11, 7]}
{"time": "2021-02-24 04:13:00.825768", "score": "0.9574", "loss": "30.5945", "code": "NCRPNode getNewLeaf() { node = this; for (level; 1; l++) { node = node.addChild(); } return node; }", "n_tokens": 50, "n_pass": [121, 12, 8]}
{"time": "2021-02-24 04:13:02.664464", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;; l++) { node = node.addChild(); } return node; }", "n_tokens": 48, "n_pass": [122, 13, 9]}
{"time": "2021-02-24 04:13:15.920253", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++) { node = node.addChild(); } return node; }", "n_tokens": 47, "n_pass": [190, 16, 10]}
{"time": "2021-02-24 04:13:17.788469", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++){ node = node.addChild(); } return node; }", "n_tokens": 46, "n_pass": [195, 17, 11]}
{"time": "2021-02-24 04:13:19.625195", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++){node = node.addChild(); } return node; }", "n_tokens": 45, "n_pass": [197, 18, 12]}
{"time": "2021-02-24 04:13:21.468742", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++){node= node.addChild(); } return node; }", "n_tokens": 44, "n_pass": [199, 19, 13]}
{"time": "2021-02-24 04:13:23.356422", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++){node=node.addChild(); } return node; }", "n_tokens": 43, "n_pass": [201, 20, 14]}
{"time": "2021-02-24 04:13:27.039710", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf() { node = this; for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 42, "n_pass": [208, 22, 15]}
{"time": "2021-02-24 04:13:32.012105", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){ node = this; for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 41, "n_pass": [218, 24, 16]}
{"time": "2021-02-24 04:13:33.865084", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){node = this; for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 40, "n_pass": [220, 25, 17]}
{"time": "2021-02-24 04:13:35.697270", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){node= this; for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 39, "n_pass": [222, 26, 18]}
{"time": "2021-02-24 04:13:37.558701", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){node=this; for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 38, "n_pass": [224, 27, 19]}
{"time": "2021-02-24 04:13:39.379816", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){node=this;for (level;;l++){node=node.addChild();} return node; }", "n_tokens": 37, "n_pass": [227, 28, 20]}
{"time": "2021-02-24 04:13:41.244798", "score": "0.907", "loss": "28.3389", "code": "NCRPNode getNewLeaf(){node=this;for(level;;l++){node=node.addChild();} return node; }", "n_tokens": 36, "n_pass": [229, 29, 21]}
{"time": "2021-02-24 04:13:43.107699", "score": "0.8847", "loss": "27.4972", "code": "NCRPNode getNewLeaf(){node=this;for(;;l++){node=node.addChild();} return node; }", "n_tokens": 35, "n_pass": [231, 30, 22]}
{"time": "2021-02-24 04:13:44.996093", "score": "0.7863", "loss": "22.3612", "code": "NCRPNode getNewLeaf(){node=this;for(;;l++){nodenode.addChild();} return node; }", "n_tokens": 34, "n_pass": [240, 31, 23]}
{"time": "2021-02-24 04:13:46.844766", "score": "0.6463", "loss": "21.3188", "code": "NCRPNode getNewLeaf(){node=this;for(;;l++){node.addChild();} return node; }", "n_tokens": 33, "n_pass": [241, 32, 24]}
{"time": "2021-02-24 04:13:57.310480", "score": "0.6463", "loss": "21.3188", "code": "NCRPNode getNewLeaf(){node=this;for(;;l++){node.addChild();}return node; }", "n_tokens": 32, "n_pass": [280, 36, 25]}
{"time": "2021-02-24 04:14:04.620556", "score": "0.6463", "loss": "21.3188", "code": "NCRPNode getNewLeaf(){node=this;for(;;l++){node.addChild();}return node;}", "n_tokens": 31, "n_pass": [285, 40, 26]}

Minimal simplified code:
NCRPNode getNewLeaf(){node=this;for(;;l++){node.addChild();}return node;}

