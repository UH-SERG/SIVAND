
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-tools/build-helper-plugin/src/main/java/org/forgerock/maven/plugins/inject/content/InjectContent_getContentsMap.java
method_name = getContentsMap
method_body = private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(".*\\Q${inject.content." + content.getId() + "}\\E.*"), content.getFile()); } return contentsMap; }
predict, score, loss = compileContents, 0.39704108238220215, 8.676422119140625

Trace of simplified code(s):
{"time": "2021-02-24 01:02:16.588558", "score": "0.397", "loss": "8.6764", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*\\\\Q${inject.content.\" + content.getId() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 120, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:02:18.576656", "score": "0.42", "loss": "9.1012", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content.getId() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 112, "n_pass": [54, 2, 2]}
{"time": "2021-02-24 01:02:22.331272", "score": "0.4758", "loss": "9.7993", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content() + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 110, "n_pass": [193, 3, 3]}
{"time": "2021-02-24 01:02:24.243798", "score": "0.4806", "loss": "9.7855", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E.*\"), content.getFile()); } return contentsMap; }", "n_tokens": 108, "n_pass": [194, 4, 4]}
{"time": "2021-02-24 01:02:26.142328", "score": "0.4806", "loss": "9.7855", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), content.getFile()); } return contentsMap; }", "n_tokens": 106, "n_pass": [199, 5, 5]}
{"time": "2021-02-24 01:02:28.079504", "score": "0.5684", "loss": "10.187", "code": "private Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 104, "n_pass": [202, 6, 6]}
{"time": "2021-02-24 01:02:31.943315", "score": "0.5684", "loss": "10.187", "code": " Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 103, "n_pass": [210, 8, 7]}
{"time": "2021-02-24 01:02:33.858940", "score": "0.5684", "loss": "10.187", "code": "Map<Pattern, File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 102, "n_pass": [211, 9, 8]}
{"time": "2021-02-24 01:02:36.237607", "score": "0.5684", "loss": "10.187", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map<Pattern, File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 101, "n_pass": [216, 10, 9]}
{"time": "2021-02-24 01:02:38.160980", "score": "0.5948", "loss": "10.2938", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<Pattern, File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 99, "n_pass": [226, 11, 10]}
{"time": "2021-02-24 01:02:40.551131", "score": "0.6149", "loss": "10.5432", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap< File>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 97, "n_pass": [233, 12, 11]}
{"time": "2021-02-24 01:02:42.434659", "score": "0.6589", "loss": "10.2099", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap.put(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 95, "n_pass": [234, 13, 12]}
{"time": "2021-02-24 01:02:44.355927", "score": "0.5596", "loss": "11.0296", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".*.\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 93, "n_pass": [245, 14, 13]}
{"time": "2021-02-24 01:02:48.145528", "score": "0.5532", "loss": "10.75", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + content + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 91, "n_pass": [249, 16, 14]}
{"time": "2021-02-24 01:02:50.000510", "score": "0.5423", "loss": "10.7133", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 89, "n_pass": [252, 17, 15]}
{"time": "2021-02-24 01:02:51.874991", "score": "0.5368", "loss": "10.6412", "code": "Map<Pattern,File> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 87, "n_pass": [253, 18, 16]}
{"time": "2021-02-24 01:02:56.074837", "score": "0.582", "loss": "11.3156", "code": "Map<PatternFile> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 86, "n_pass": [269, 20, 17]}
{"time": "2021-02-24 01:02:57.934369", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content> contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 85, "n_pass": [270, 21, 18]}
{"time": "2021-02-24 01:03:16.124020", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents) { Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 84, "n_pass": [403, 24, 19]}
{"time": "2021-02-24 01:03:18.022316", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){ Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 83, "n_pass": [405, 25, 20]}
{"time": "2021-02-24 01:03:19.911531", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map< File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 82, "n_pass": [407, 26, 21]}
{"time": "2021-02-24 01:03:21.798165", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File> contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 81, "n_pass": [410, 27, 22]}
{"time": "2021-02-24 01:03:23.674586", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap = new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 80, "n_pass": [413, 28, 23]}
{"time": "2021-02-24 01:03:25.579457", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap= new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 79, "n_pass": [415, 29, 24]}
{"time": "2021-02-24 01:03:27.479812", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>(); for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 78, "n_pass": [417, 30, 25]}
{"time": "2021-02-24 01:03:29.415249", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for (Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 77, "n_pass": [426, 31, 26]}
{"time": "2021-02-24 01:03:31.307299", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content : contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 76, "n_pass": [428, 32, 27]}
{"time": "2021-02-24 01:03:33.199959", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content: contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 75, "n_pass": [433, 33, 28]}
{"time": "2021-02-24 01:03:35.134789", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents) { contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 74, "n_pass": [435, 34, 29]}
{"time": "2021-02-24 01:03:36.993938", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){ contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 73, "n_pass": [438, 35, 30]}
{"time": "2021-02-24 01:03:38.873129", "score": "0.6001", "loss": "10.8999", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\".\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 72, "n_pass": [440, 36, 31]}
{"time": "2021-02-24 01:03:42.653841", "score": "0.5538", "loss": "10.5097", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\" + \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 71, "n_pass": [448, 38, 32]}
{"time": "2021-02-24 01:03:44.500276", "score": "0.5538", "loss": "10.5097", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+ \"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 70, "n_pass": [450, 39, 33]}
{"time": "2021-02-24 01:03:46.398917", "score": "0.5538", "loss": "10.5097", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"}\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 69, "n_pass": [452, 40, 34]}
{"time": "2021-02-24 01:03:48.280776", "score": "0.5538", "loss": "10.5097", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\E\"), getFile()); } return contentsMap; }", "n_tokens": 68, "n_pass": [454, 41, 35]}
{"time": "2021-02-24 01:03:50.188521", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"), getFile()); } return contentsMap; }", "n_tokens": 67, "n_pass": [457, 42, 36]}
{"time": "2021-02-24 01:03:52.110508", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"),getFile()); } return contentsMap; }", "n_tokens": 66, "n_pass": [461, 43, 37]}
{"time": "2021-02-24 01:03:54.016236", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"),getFile());} return contentsMap; }", "n_tokens": 65, "n_pass": [467, 44, 38]}
{"time": "2021-02-24 01:03:55.928163", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"),getFile());}return contentsMap; }", "n_tokens": 64, "n_pass": [469, 45, 39]}
{"time": "2021-02-24 01:04:03.439916", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern> getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 63, "n_pass": [474, 49, 40]}
{"time": "2021-02-24 01:04:05.827128", "score": "0.562", "loss": "10.9489", "code": "Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(\"\"+\"\\\\\"),getFile());}return contentsMap;}", "n_tokens": 62, "n_pass": [480, 50, 41]}

Minimal simplified code:
Map<Pattern>getContentsMap(List<Content>contents){Map<File>contentsMap=new HashMap<>();for(Content content:contents){contentsMap(Pattern.compile(""+"\\"),getFile());}return contentsMap;}

