
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/morphology/src/main/java/zemberek/morphology/ambiguity/PerceptronAmbiguityResolver_pruneNearZeroWeights.java
method_name = pruneNearZeroWeights
method_body = void pruneNearZeroWeights() { FloatValueMap<String> pruned = new FloatValueMap<>(); for (String key : data) { float w = data.get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data = pruned; }
predict, score, loss = prune, 0.3562653660774231, 29.17951774597168

Trace of simplified code(s):
{"time": "2021-02-23 23:53:04.827293", "score": "0.3563", "loss": "29.1795", "code": "void pruneNearZeroWeights() { FloatValueMap<String> pruned = new FloatValueMap<>(); for (String key : data) { float w = data.get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data = pruned; }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:53:09.200850", "score": "0.4709", "loss": "28.4364", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) { float w = data.get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data = pruned; }", "n_tokens": 93, "n_pass": [95, 3, 2]}
{"time": "2021-02-23 23:53:13.041475", "score": "0.4381", "loss": "28.9339", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {w = data.get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data = pruned; }", "n_tokens": 90, "n_pass": [105, 5, 3]}
{"time": "2021-02-23 23:53:16.893130", "score": "0.2259", "loss": "29.4622", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {w =get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data = pruned; }", "n_tokens": 87, "n_pass": [107, 7, 4]}
{"time": "2021-02-23 23:53:25.001383", "score": "0.7147", "loss": "28.3099", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {w =get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data ; }", "n_tokens": 84, "n_pass": [122, 11, 5]}
{"time": "2021-02-23 23:53:28.826573", "score": "0.5278", "loss": "29.98", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs(w) > epsilon) { pruned.set(key, w); } } this.data ; }", "n_tokens": 81, "n_pass": [136, 13, 6]}
{"time": "2021-02-23 23:53:32.629685", "score": "0.2853", "loss": "30.7447", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(key, w); } } this.data ; }", "n_tokens": 78, "n_pass": [141, 15, 7]}
{"time": "2021-02-23 23:53:38.363667", "score": "0.5699", "loss": "29.7754", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(key, w); } } this; }", "n_tokens": 75, "n_pass": [150, 18, 8]}
{"time": "2021-02-23 23:53:44.013791", "score": "0.5697", "loss": "29.9804", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } } this; }", "n_tokens": 72, "n_pass": [172, 21, 9]}
{"time": "2021-02-23 23:53:56.271889", "score": "0.7085", "loss": "28.2743", "code": "void pruneNearZeroWeights() { FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 70, "n_pass": [251, 25, 10]}
{"time": "2021-02-23 23:53:59.079834", "score": "0.7085", "loss": "28.2743", "code": "void pruneNearZeroWeights(){ FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 69, "n_pass": [258, 26, 11]}
{"time": "2021-02-23 23:54:00.973232", "score": "0.7085", "loss": "28.2743", "code": "void pruneNearZeroWeights(){FloatValueMap pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 68, "n_pass": [260, 27, 12]}
{"time": "2021-02-23 23:54:02.911937", "score": "0.8073", "loss": "29.8934", "code": "void pruneNearZeroWeights(){ pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 67, "n_pass": [261, 28, 13]}
{"time": "2021-02-23 23:54:04.785379", "score": "0.8073", "loss": "29.8934", "code": "void pruneNearZeroWeights(){pruned = new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 66, "n_pass": [262, 29, 14]}
{"time": "2021-02-23 23:54:06.681728", "score": "0.8073", "loss": "29.8934", "code": "void pruneNearZeroWeights(){pruned= new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 65, "n_pass": [264, 30, 15]}
{"time": "2021-02-23 23:54:08.587304", "score": "0.8073", "loss": "29.8934", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>(); for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 64, "n_pass": [266, 31, 16]}
{"time": "2021-02-23 23:54:10.512370", "score": "0.8073", "loss": "29.8934", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math.abs > epsilon) { pruned.set(w); } }  }", "n_tokens": 63, "n_pass": [275, 32, 17]}
{"time": "2021-02-23 23:54:12.478920", "score": "0.6283", "loss": "30.7969", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon) { pruned.set(w); } }  }", "n_tokens": 61, "n_pass": [288, 33, 18]}
{"time": "2021-02-23 23:54:24.432979", "score": "0.6283", "loss": "30.7969", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){ pruned.set(w); } }  }", "n_tokens": 60, "n_pass": [373, 35, 19]}
{"time": "2021-02-23 23:54:26.359038", "score": "0.6283", "loss": "30.7969", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned.set(w); } }  }", "n_tokens": 59, "n_pass": [375, 36, 20]}
{"time": "2021-02-23 23:54:28.264724", "score": "0.224", "loss": "32.7817", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){prunedset(w); } }  }", "n_tokens": 58, "n_pass": [377, 37, 21]}
{"time": "2021-02-23 23:54:30.148118", "score": "0.9142", "loss": "30.7996", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned(w); } }  }", "n_tokens": 57, "n_pass": [378, 38, 22]}
{"time": "2021-02-23 23:54:32.053769", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned(); } }  }", "n_tokens": 56, "n_pass": [380, 39, 23]}
{"time": "2021-02-23 23:54:33.952862", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned();} }  }", "n_tokens": 55, "n_pass": [383, 40, 24]}
{"time": "2021-02-23 23:54:35.851136", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned();}}  }", "n_tokens": 54, "n_pass": [385, 41, 25]}
{"time": "2021-02-23 23:54:37.714813", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned();}} }", "n_tokens": 53, "n_pass": [387, 42, 26]}
{"time": "2021-02-23 23:54:39.610325", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for (String key : data) {get(key); if (Math > epsilon){pruned();}}}", "n_tokens": 52, "n_pass": [388, 43, 27]}
{"time": "2021-02-23 23:54:42.436683", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key : data) {get(key); if (Math > epsilon){pruned();}}}", "n_tokens": 51, "n_pass": [407, 44, 28]}
{"time": "2021-02-23 23:54:44.312363", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key: data) {get(key); if (Math > epsilon){pruned();}}}", "n_tokens": 50, "n_pass": [412, 45, 29]}
{"time": "2021-02-23 23:54:46.218257", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data) {get(key); if (Math > epsilon){pruned();}}}", "n_tokens": 49, "n_pass": [414, 46, 30]}
{"time": "2021-02-23 23:54:48.098236", "score": "0.8297", "loss": "31.003", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){get(key); if (Math > epsilon){pruned();}}}", "n_tokens": 48, "n_pass": [417, 47, 31]}
{"time": "2021-02-23 23:54:49.997348", "score": "0.9525", "loss": "27.6037", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key); if (Math > epsilon){pruned();}}}", "n_tokens": 47, "n_pass": [419, 48, 32]}
{"time": "2021-02-23 23:54:51.868655", "score": "0.9525", "loss": "27.6037", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if (Math > epsilon){pruned();}}}", "n_tokens": 46, "n_pass": [424, 49, 33]}
{"time": "2021-02-23 23:54:53.750964", "score": "0.9525", "loss": "27.6037", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Math > epsilon){pruned();}}}", "n_tokens": 45, "n_pass": [426, 50, 34]}
{"time": "2021-02-23 23:54:55.633754", "score": "0.9525", "loss": "27.6037", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Math> epsilon){pruned();}}}", "n_tokens": 44, "n_pass": [429, 51, 35]}
{"time": "2021-02-23 23:54:57.529070", "score": "0.9525", "loss": "27.6037", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Math>epsilon){pruned();}}}", "n_tokens": 43, "n_pass": [431, 52, 36]}
{"time": "2021-02-23 23:55:00.322462", "score": "0.7247", "loss": "29.9773", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Mathepsilon){pruned();}}}", "n_tokens": 42, "n_pass": [474, 53, 37]}
{"time": "2021-02-23 23:55:02.159550", "score": "0.6862", "loss": "29.73", "code": "void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Math){pruned();}}}", "n_tokens": 41, "n_pass": [475, 54, 38]}

Minimal simplified code:
void pruneNearZeroWeights(){pruned=new FloatValueMap<>();for(String key:data){(key);if(Math){pruned();}}}

