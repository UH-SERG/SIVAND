
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/math/ec/test/ECPointTest_implTestAdd.java
method_name = implTestAdd
method_body = private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual("p0 plus p1 does not equal p2", p[2], p[0].add(p[1])); assertPointsEqual("p1 plus p0 does not equal p2", p[2], p[1].add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual("Adding infinity failed", p[i], p[i].add(infinity)); assertPointsEqual("Adding to infinity failed", p[i], infinity.add(p[i])); } }
predict, score, loss = assertPointsEqual, 0.8161045908927917, 35.862335205078125

Trace of simplified code(s):
{"time": "2021-02-23 19:43:39.831945", "score": "0.7912", "loss": "32.6627", "code": "private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual(\"p0 plus p1 does not equal p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\", p[2], p[1].add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\", p[i], p[i].add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 197, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:43:41.831801", "score": "0.8354", "loss": "37.182", "code": "private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual(\"p p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\", p[2], p[1].add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\", p[i], p[i].add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 185, "n_pass": [46, 2, 2]}
{"time": "2021-02-23 19:43:43.798761", "score": "0.8013", "loss": "34.5287", "code": "private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual(\"p p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\", p[i], p[i].add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 173, "n_pass": [50, 3, 3]}
{"time": "2021-02-23 19:43:45.789378", "score": "0.7866", "loss": "32.7505", "code": "private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual(\"p p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\", p[i].add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 167, "n_pass": [101, 4, 4]}
{"time": "2021-02-23 19:43:47.722201", "score": "0.7603", "loss": "32.0577", "code": "private void implTestAdd(ECPoint[] p, ECPoint infinity) { assertPointsEqual(\"p p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 161, "n_pass": [102, 5, 5]}
{"time": "2021-02-23 19:43:49.687979", "score": "0.7196", "loss": "29.401", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", p[2], p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 155, "n_pass": [110, 6, 6]}
{"time": "2021-02-23 19:43:51.658817", "score": "0.7318", "loss": "28.8141", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", p[0].add(p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 149, "n_pass": [114, 7, 7]}
{"time": "2021-02-23 19:43:53.584451", "score": "0.7499", "loss": "29.2034", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"p1 plus p0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 143, "n_pass": [115, 8, 8]}
{"time": "2021-02-23 19:43:55.555538", "score": "0.7063", "loss": "28.5616", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"0 does not equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 137, "n_pass": [118, 9, 9]}
{"time": "2021-02-23 19:43:57.492778", "score": "0.6989", "loss": "28.9966", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"equal p2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 131, "n_pass": [119, 10, 10]}
{"time": "2021-02-23 19:43:59.481503", "score": "0.7587", "loss": "30.7732", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p[0])); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 128, "n_pass": [183, 11, 11]}
{"time": "2021-02-23 19:44:01.448862", "score": "0.661", "loss": "28.1802", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i < p.length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 125, "n_pass": [185, 12, 12]}
{"time": "2021-02-23 19:44:03.409526", "score": "0.6806", "loss": "29.2713", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Adding infinity failed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 122, "n_pass": [192, 13, 13]}
{"time": "2021-02-23 19:44:05.357061", "score": "0.6565", "loss": "27.1544", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding to infinity failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 119, "n_pass": [198, 14, 14]}
{"time": "2021-02-23 19:44:07.333171", "score": "0.7347", "loss": "28.9219", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\", p[i], infinity.add(p[i])); } }", "n_tokens": 116, "n_pass": [204, 15, 15]}
{"time": "2021-02-23 19:44:09.245910", "score": "0.6412", "loss": "26.9011", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i], infinity.add(p[i])); } }", "n_tokens": 113, "n_pass": [206, 16, 16]}
{"time": "2021-02-23 19:44:11.167042", "score": "0.6898", "loss": "27.8984", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p p2\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 109, "n_pass": [208, 17, 17]}
{"time": "2021-02-23 19:44:13.594180", "score": "0.6458", "loss": "27.2185", "code": "private void implTestAdd( ECPoint infinity) { assertPointsEqual(\"p\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 106, "n_pass": [218, 18, 18]}
{"time": "2021-02-23 19:44:20.777882", "score": "0.6752", "loss": "28.0006", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"p\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 105, "n_pass": [322, 19, 19]}
{"time": "2021-02-23 19:44:22.732646", "score": "0.6752", "loss": "27.8587", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\", (p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 104, "n_pass": [326, 20, 20]}
{"time": "2021-02-23 19:44:24.653441", "score": "0.7007", "loss": "28.9172", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1])); assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 103, "n_pass": [329, 21, 21]}
{"time": "2021-02-23 19:44:26.598957", "score": "0.6684", "loss": "27.6413", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (int i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 102, "n_pass": [338, 22, 22]}
{"time": "2021-02-23 19:44:28.533929", "score": "0.6545", "loss": "27.644", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; i .length; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 100, "n_pass": [347, 23, 23]}
{"time": "2021-02-23 19:44:30.448870", "score": "0.629", "loss": "26.5651", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i++) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 98, "n_pass": [352, 24, 24]}
{"time": "2021-02-23 19:44:32.348708", "score": "0.6106", "loss": "26.57", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Adding  failed\"[i],(p[i])); } }", "n_tokens": 96, "n_pass": [355, 25, 25]}
{"time": "2021-02-23 19:44:34.294562", "score": "0.5629", "loss": "26.6206", "code": "private void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 94, "n_pass": [367, 26, 26]}
{"time": "2021-02-23 19:44:36.229398", "score": "0.5629", "loss": "26.6206", "code": " void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 93, "n_pass": [377, 27, 27]}
{"time": "2021-02-23 19:44:38.136883", "score": "0.5629", "loss": "26.6206", "code": "void implTestAdd( ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 92, "n_pass": [378, 28, 28]}
{"time": "2021-02-23 19:44:40.964991", "score": "0.5629", "loss": "26.6206", "code": "void implTestAdd(ECPoint infinity) {assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 91, "n_pass": [383, 29, 29]}
{"time": "2021-02-23 19:44:42.907164", "score": "0.5629", "loss": "26.6206", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0; ilength; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 90, "n_pass": [388, 30, 30]}
{"time": "2021-02-23 19:44:44.843166", "score": "0.5735", "loss": "27.055", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length; i) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 88, "n_pass": [414, 31, 31]}
{"time": "2021-02-23 19:44:46.757848", "score": "0.5183", "loss": "25.9108", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Addingfailed\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 86, "n_pass": [416, 32, 32]}
{"time": "2021-02-23 19:44:55.628067", "score": "0.567", "loss": "25.2633", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",add(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 85, "n_pass": [535, 33, 33]}
{"time": "2021-02-23 19:44:57.542855", "score": "0.5557", "loss": "25.2981", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity)); assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 84, "n_pass": [537, 34, 34]}
{"time": "2021-02-23 19:44:59.419192", "score": "0.5557", "loss": "25.2981", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"Addingfailed\"[i],(p[i])); } }", "n_tokens": 83, "n_pass": [543, 35, 35]}
{"time": "2021-02-23 19:45:01.353124", "score": "0.584", "loss": "25.9111", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"failed\"[i],(p[i])); } }", "n_tokens": 82, "n_pass": [547, 36, 36]}
{"time": "2021-02-23 19:45:03.289092", "score": "0.5939", "loss": "25.9996", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i])); } }", "n_tokens": 81, "n_pass": [548, 37, 37]}
{"time": "2021-02-23 19:45:05.211920", "score": "0.5939", "loss": "25.9996", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));} }", "n_tokens": 80, "n_pass": [562, 38, 38]}
{"time": "2021-02-23 19:45:07.132008", "score": "0.5939", "loss": "25.9996", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"2\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 79, "n_pass": [564, 39, 39]}
{"time": "2021-02-23 19:45:10.125416", "score": "0.5857", "loss": "26.276", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",add(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 78, "n_pass": [591, 40, 40]}
{"time": "2021-02-23 19:45:12.030147", "score": "0.6048", "loss": "26.6328", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p)); for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 77, "n_pass": [594, 41, 41]}
{"time": "2021-02-23 19:45:13.960745", "score": "0.6048", "loss": "26.6328", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for (i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 76, "n_pass": [600, 42, 42]}
{"time": "2021-02-23 19:45:15.881460", "score": "0.6048", "loss": "26.6328", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i = 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 75, "n_pass": [602, 43, 43]}
{"time": "2021-02-23 19:45:17.787446", "score": "0.6048", "loss": "26.6328", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i= 0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 74, "n_pass": [605, 44, 44]}
{"time": "2021-02-23 19:45:19.680142", "score": "0.6048", "loss": "26.6328", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i=0;length;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 73, "n_pass": [607, 45, 45]}
{"time": "2021-02-23 19:45:21.566756", "score": "0.5666", "loss": "24.9392", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i=0;;) { assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 72, "n_pass": [610, 46, 46]}
{"time": "2021-02-23 19:45:23.451001", "score": "0.5666", "loss": "24.9392", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i=0;;){ assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 71, "n_pass": [613, 47, 47]}
{"time": "2021-02-23 19:45:25.335503", "score": "0.5666", "loss": "24.9392", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i=0;;){assertPointsEqual(\"Adding\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 70, "n_pass": [615, 48, 48]}
{"time": "2021-02-23 19:45:27.280195", "score": "0.5814", "loss": "27.3859", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i=0;;){assertPointsEqual(\"\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 69, "n_pass": [619, 49, 49]}
{"time": "2021-02-23 19:45:30.164848", "score": "0.5633", "loss": "27.3626", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i0;;){assertPointsEqual(\"\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 68, "n_pass": [680, 50, 50]}
{"time": "2021-02-23 19:45:32.026545", "score": "0.5633", "loss": "27.3626", "code": "void implTestAdd(ECPoint infinity){assertPointsEqual(\"\",(p[1]));assertPointsEqual(\"\",(p));for(i;;){assertPointsEqual(\"\",(infinity));assertPointsEqual(\"\"[i],(p[i]));}}", "n_tokens": 67, "n_pass": [681, 51, 51]}

Minimal simplified code:
void implTestAdd(ECPoint infinity){assertPointsEqual("",(p[1]));assertPointsEqual("",(p));for(i;;){assertPointsEqual("",(infinity));assertPointsEqual(""[i],(p[i]));}}

