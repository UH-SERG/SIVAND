
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/baasbox__baasbox/app/com/baasbox/commands/CollectionsResource_checkPreconditions.java
method_name = checkPreconditions
method_body = private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, "non authorized"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, "cannot alter collections during transaction"); } }
predict, score, loss = checkNonTransactional, 0.5163218379020691, 16.98038101196289

Trace of simplified code(s):
{"time": "2021-02-23 22:13:45.942737", "score": "0.5163", "loss": "16.9804", "code": "private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot alter collections during transaction\"); } }", "n_tokens": 100, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 22:13:50.316711", "score": "0.5579", "loss": "16.722", "code": "private static void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 93, "n_pass": [58, 3, 2]}
{"time": "2021-02-23 22:13:52.701240", "score": "0.5579", "loss": "16.722", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional) throws CommandExecutionException { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 90, "n_pass": [106, 4, 3]}
{"time": "2021-02-23 22:13:54.597564", "score": "0.5251", "loss": "15.8529", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { if (!DbHelper.isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 87, "n_pass": [111, 5, 4]}
{"time": "2021-02-23 22:13:56.495876", "score": "0.5578", "loss": "16.5587", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throw new CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 84, "n_pass": [114, 6, 5]}
{"time": "2021-02-23 22:14:02.206276", "score": "0.4946", "loss": "17.1121", "code": " void checkPreconditions(JsonNode command, boolean nonTransactional)  { if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 81, "n_pass": [130, 9, 6]}
{"time": "2021-02-23 22:14:12.096982", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command, boolean nonTransactional)  { if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 80, "n_pass": [217, 12, 7]}
{"time": "2021-02-23 22:14:14.936878", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional)  { if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 79, "n_pass": [226, 13, 8]}
{"time": "2021-02-23 22:14:16.830854", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional) { if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 78, "n_pass": [231, 14, 9]}
{"time": "2021-02-23 22:14:18.767536", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){ if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 77, "n_pass": [232, 15, 10]}
{"time": "2021-02-23 22:14:20.656534", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if (isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 76, "n_pass": [234, 16, 11]}
{"time": "2021-02-23 22:14:22.543247", "score": "0.4946", "loss": "17.1121", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction()) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 75, "n_pass": [236, 17, 12]}
{"time": "2021-02-23 22:14:35.712440", "score": "0.4737", "loss": "17.1131", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw new CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 73, "n_pass": [258, 24, 13]}
{"time": "2021-02-23 22:14:42.434671", "score": "0.4743", "loss": "17.1", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException(command, \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 71, "n_pass": [290, 27, 14]}
{"time": "2021-02-23 22:14:44.342450", "score": "0.5155", "loss": "17.9506", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper.isInTransaction) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 69, "n_pass": [292, 28, 15]}
{"time": "2021-02-23 22:14:48.102684", "score": "0.5019", "loss": "18.0147", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { throwCommandExecutionException(command, \"cannot \"); } }", "n_tokens": 67, "n_pass": [303, 30, 16]}
{"time": "2021-02-23 22:15:04.181828", "score": "0.517", "loss": "18.6873", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command, \"cannot \"); } }", "n_tokens": 66, "n_pass": [396, 34, 17]}
{"time": "2021-02-23 22:15:06.073807", "score": "0.517", "loss": "18.6873", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot \"); } }", "n_tokens": 65, "n_pass": [400, 35, 18]}
{"time": "2021-02-23 22:15:09.820645", "score": "0.517", "loss": "18.6873", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\"); } }", "n_tokens": 64, "n_pass": [403, 37, 19]}
{"time": "2021-02-23 22:15:11.704559", "score": "0.517", "loss": "18.6873", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");} }", "n_tokens": 63, "n_pass": [407, 38, 20]}
{"time": "2021-02-23 22:15:13.592143", "score": "0.517", "loss": "18.6873", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if(isConnectedAsAdmin(false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 62, "n_pass": [409, 39, 21]}
{"time": "2021-02-23 22:15:16.422907", "score": "0.534", "loss": "19.2424", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)) { throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 61, "n_pass": [426, 40, 22]}
{"time": "2021-02-23 22:15:18.304788", "score": "0.534", "loss": "19.2424", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){ throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 60, "n_pass": [431, 41, 23]}
{"time": "2021-02-23 22:15:20.167522", "score": "0.534", "loss": "19.2424", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw CommandExecutionException( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 59, "n_pass": [433, 42, 24]}
{"time": "2021-02-23 22:15:25.702739", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw ( \"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 58, "n_pass": [436, 45, 25]}
{"time": "2021-02-23 22:15:27.558544", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\"); } if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 57, "n_pass": [438, 46, 26]}
{"time": "2021-02-23 22:15:34.947320", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");} if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 56, "n_pass": [446, 50, 27]}
{"time": "2021-02-23 22:15:36.866133", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if (nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 55, "n_pass": [448, 51, 28]}
{"time": "2021-02-23 22:15:38.754393", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if(nonTransactional && DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 54, "n_pass": [450, 52, 29]}
{"time": "2021-02-23 22:15:40.664252", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if(nonTransactional&& DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 53, "n_pass": [453, 53, 30]}
{"time": "2021-02-23 22:15:46.311194", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if(nonTransactional&&DbHelper) { CommandExecutionException(command,\"cannot\");}}", "n_tokens": 52, "n_pass": [456, 56, 31]}
{"time": "2021-02-23 22:15:48.191815", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if(nonTransactional&&DbHelper){ CommandExecutionException(command,\"cannot\");}}", "n_tokens": 51, "n_pass": [459, 57, 32]}
{"time": "2021-02-23 22:15:50.105986", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw (\"non authorized\");}if(nonTransactional&&DbHelper){CommandExecutionException(command,\"cannot\");}}", "n_tokens": 50, "n_pass": [461, 58, 33]}
{"time": "2021-02-23 22:15:56.622003", "score": "0.4977", "loss": "18.327", "code": "void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw(\"non authorized\");}if(nonTransactional&&DbHelper){CommandExecutionException(command,\"cannot\");}}", "n_tokens": 49, "n_pass": [494, 61, 34]}

Minimal simplified code:
void checkPreconditions(JsonNode command,boolean nonTransactional){if((false)){throw("non authorized");}if(nonTransactional&&DbHelper){CommandExecutionException(command,"cannot");}}

