
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsServer_getSelectedCompressionMethod.java
method_name = getSelectedCompressionMethod
method_body = public short getSelectedCompressionMethod() throws IOException { short[] compressionMethods = getCompressionMethods(); for (int i = 0; i < compressionMethods.length; ++i) { if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod = compressionMethods[i]; } } throw new TlsFatalAlert(AlertDescription.handshake_failure); }
predict, score, loss = getCompressionMethod, 0.7736700177192688, 14.567562103271484

Trace of simplified code(s):
{"time": "2021-02-24 03:09:36.952416", "score": "0.7737", "loss": "14.5676", "code": "public short getSelectedCompressionMethod() throws IOException { short[] compressionMethods = getCompressionMethods(); for (int i = 0; i < compressionMethods.length; ++i) { if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod = compressionMethods[i]; } } throw new TlsFatalAlert(AlertDescription.handshake_failure); }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:09:38.891808", "score": "0.7714", "loss": "14.779", "code": "public short getSelectedCompressionMethod() throws IOException { short[] compressionMethods = getCompressionMethods();{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod = compressionMethods[i]; } } throw new TlsFatalAlert(AlertDescription.handshake_failure); }", "n_tokens": 80, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 03:09:41.265985", "score": "0.7319", "loss": "16.167", "code": "public short getSelectedCompressionMethod() throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod = compressionMethods[i]; } } throw new TlsFatalAlert(AlertDescription.handshake_failure); }", "n_tokens": 67, "n_pass": [23, 3, 3]}
{"time": "2021-02-24 03:09:43.159778", "score": "0.685", "loss": "15.3887", "code": "public short getSelectedCompressionMethod() throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription.handshake_failure); }", "n_tokens": 60, "n_pass": [42, 4, 4]}
{"time": "2021-02-24 03:09:46.949984", "score": "0.6759", "loss": "14.526", "code": "public short getSelectedCompressionMethod() throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription); }", "n_tokens": 56, "n_pass": [73, 6, 5]}
{"time": "2021-02-24 03:09:55.205275", "score": "0.6759", "loss": "14.526", "code": " short getSelectedCompressionMethod() throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription); }", "n_tokens": 55, "n_pass": [127, 9, 6]}
{"time": "2021-02-24 03:09:57.097246", "score": "0.6759", "loss": "14.526", "code": "short getSelectedCompressionMethod() throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription); }", "n_tokens": 54, "n_pass": [128, 10, 7]}
{"time": "2021-02-24 03:09:59.421101", "score": "0.6759", "loss": "14.526", "code": "short getSelectedCompressionMethod()throws IOException {{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription); }", "n_tokens": 53, "n_pass": [133, 11, 8]}
{"time": "2021-02-24 03:10:01.280261", "score": "0.6759", "loss": "14.526", "code": "short getSelectedCompressionMethod()throws IOException{{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw new TlsFatalAlert(AlertDescription); }", "n_tokens": 52, "n_pass": [137, 12, 9]}
{"time": "2021-02-24 03:10:12.446025", "score": "0.6921", "loss": "14.8048", "code": "short getSelectedCompressionMethod()throws IOException{{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw TlsFatalAlert(AlertDescription); }", "n_tokens": 50, "n_pass": [155, 18, 10]}
{"time": "2021-02-24 03:10:14.313208", "score": "0.6894", "loss": "15.3212", "code": "short getSelectedCompressionMethod()throws IOException{{ if (Arrays.contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw(AlertDescription); }", "n_tokens": 48, "n_pass": [156, 19, 11]}
{"time": "2021-02-24 03:10:17.032688", "score": "0.6542", "loss": "15.045", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return this.selectedCompressionMethod; } } throw(AlertDescription); }", "n_tokens": 46, "n_pass": [171, 20, 12]}
{"time": "2021-02-24 03:10:22.597024", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod; } } throw(AlertDescription); }", "n_tokens": 44, "n_pass": [180, 23, 13]}
{"time": "2021-02-24 03:10:35.906726", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;} } throw(AlertDescription); }", "n_tokens": 43, "n_pass": [243, 27, 14]}
{"time": "2021-02-24 03:10:37.720034", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;}} throw(AlertDescription); }", "n_tokens": 42, "n_pass": [244, 28, 15]}
{"time": "2021-02-24 03:10:39.569760", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;}}throw(AlertDescription); }", "n_tokens": 41, "n_pass": [246, 29, 16]}
{"time": "2021-02-24 03:10:43.245894", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{ if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 40, "n_pass": [252, 31, 17]}
{"time": "2021-02-24 03:10:45.990012", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{if (contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 39, "n_pass": [264, 32, 18]}
{"time": "2021-02-24 03:10:47.800720", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods, compressionMethods[i])) { return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 38, "n_pass": [266, 33, 19]}
{"time": "2021-02-24 03:10:49.671188", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods,compressionMethods[i])) { return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 37, "n_pass": [272, 34, 20]}
{"time": "2021-02-24 03:10:51.524870", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods,compressionMethods[i])){ return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 36, "n_pass": [279, 35, 21]}
{"time": "2021-02-24 03:10:53.378900", "score": "0.6902", "loss": "6.8583", "code": "short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods,compressionMethods[i])){return selectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 35, "n_pass": [281, 36, 22]}
{"time": "2021-02-24 03:10:57.028511", "score": "0.6562", "loss": "21.1518", "code": "short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods,compressionMethods[i])){returnselectedCompressionMethod;}}throw(AlertDescription);}", "n_tokens": 34, "n_pass": [283, 38, 23]}

Minimal simplified code:
short getSelectedCompressionMethod()throws IOException{{if(contains(offeredCompressionMethods,compressionMethods[i])){returnselectedCompressionMethod;}}throw(AlertDescription);}

