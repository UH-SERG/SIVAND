
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/tls/src/main/java/org/bouncycastle/tls/TlsECDHKeyExchange_processClientKeyExchange.java
method_name = processClientKeyExchange
method_body = public void processClientKeyExchange(InputStream input) throws IOException { if (ecdhPeerCertificate != null) { return; } byte[] point = TlsUtils.readOpaque8(input); processEphemeral(serverECPointFormats, point); }
predict, score, loss = processEphemeral, 0.7837787866592407, 24.259050369262695

Trace of simplified code(s):
{"time": "2021-02-24 02:52:55.280527", "score": "0.7838", "loss": "24.2591", "code": "public void processClientKeyExchange(InputStream input) throws IOException { if (ecdhPeerCertificate != null) { return; } byte[] point = TlsUtils.readOpaque8(input); processEphemeral(serverECPointFormats, point); }", "n_tokens": 62, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:52:58.141671", "score": "0.7269", "loss": "24.0733", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate != null) { return; } byte[] point = TlsUtils.readOpaque8(input); processEphemeral(serverECPointFormats, point); }", "n_tokens": 58, "n_pass": [47, 2, 2]}
{"time": "2021-02-24 02:53:03.767291", "score": "0.7592", "loss": "24.6011", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate != null) { return; } byte[] point = TlsUtils.readOpaque; processEphemeral(serverECPointFormats, point); }", "n_tokens": 54, "n_pass": [56, 5, 3]}
{"time": "2021-02-24 02:53:07.955328", "score": "0.6774", "loss": "23.9606", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) { return; } byte[] point = TlsUtils.readOpaque; processEphemeral(serverECPointFormats, point); }", "n_tokens": 50, "n_pass": [65, 7, 4]}
{"time": "2021-02-24 02:53:14.859549", "score": "0.6774", "loss": "23.9606", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte[] point = TlsUtils.readOpaque; processEphemeral(serverECPointFormats, point); }", "n_tokens": 48, "n_pass": [107, 10, 5]}
{"time": "2021-02-24 02:53:16.752338", "score": "0.6719", "loss": "23.7914", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte point = TlsUtils.readOpaque; processEphemeral(serverECPointFormats, point); }", "n_tokens": 46, "n_pass": [109, 11, 6]}
{"time": "2021-02-24 02:53:18.625664", "score": "0.8093", "loss": "22.9809", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral(serverECPointFormats, point); }", "n_tokens": 44, "n_pass": [113, 12, 7]}
{"time": "2021-02-24 02:53:22.372038", "score": "0.8114", "loss": "22.6253", "code": "public void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 42, "n_pass": [116, 14, 8]}
{"time": "2021-02-24 02:53:26.099426", "score": "0.8114", "loss": "22.6253", "code": " void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 41, "n_pass": [120, 16, 9]}
{"time": "2021-02-24 02:53:27.940501", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input) { if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 40, "n_pass": [121, 17, 10]}
{"time": "2021-02-24 02:53:44.461642", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){ if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 39, "n_pass": [190, 21, 11]}
{"time": "2021-02-24 02:53:46.353879", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if (ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 38, "n_pass": [191, 22, 12]}
{"time": "2021-02-24 02:53:48.231154", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate ) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 37, "n_pass": [193, 23, 13]}
{"time": "2021-02-24 02:53:50.094243", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate) {  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 36, "n_pass": [196, 24, 14]}
{"time": "2021-02-24 02:53:51.951068", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){  } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 35, "n_pass": [198, 25, 15]}
{"time": "2021-02-24 02:53:53.822593", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){ } byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 34, "n_pass": [200, 26, 16]}
{"time": "2021-02-24 02:53:55.696155", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){} byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 33, "n_pass": [201, 27, 17]}
{"time": "2021-02-24 02:53:57.578712", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point = TlsUtils; processEphemeral( point); }", "n_tokens": 32, "n_pass": [203, 28, 18]}
{"time": "2021-02-24 02:54:03.130757", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point= TlsUtils; processEphemeral( point); }", "n_tokens": 31, "n_pass": [207, 31, 19]}
{"time": "2021-02-24 02:54:05.005199", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point=TlsUtils; processEphemeral( point); }", "n_tokens": 30, "n_pass": [209, 32, 20]}
{"time": "2021-02-24 02:54:06.878670", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point=TlsUtils;processEphemeral( point); }", "n_tokens": 29, "n_pass": [212, 33, 21]}
{"time": "2021-02-24 02:54:10.537065", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point=TlsUtils;processEphemeral(point); }", "n_tokens": 28, "n_pass": [215, 35, 22]}
{"time": "2021-02-24 02:54:14.254384", "score": "0.8114", "loss": "22.6253", "code": "void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point=TlsUtils;processEphemeral(point);}", "n_tokens": 27, "n_pass": [219, 37, 23]}

Minimal simplified code:
void processClientKeyExchange(InputStream input){if(ecdhPeerCertificate){}byte point=TlsUtils;processEphemeral(point);}

