
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/Dirichlet_logGammaDifference.java
method_name = logGammaDifference
method_body = public static double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }
predict, score, loss = log, 0.8844941258430481, 16.607566833496094

Trace of simplified code(s):
{"time": "2021-02-24 05:57:20.621139", "score": "0.8845", "loss": "16.6076", "code": "public static double logGammaDifference(double z, int n) { double result = 0.0; for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 82, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:57:22.956645", "score": "0.9784", "loss": "18.6596", "code": "public static double logGammaDifference(double z, int n) {  for (int i = 0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 72, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 05:57:24.817854", "score": "0.9583", "loss": "19.2093", "code": "public static double logGammaDifference(double z, int n) {  for (int0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 67, "n_pass": [44, 3, 3]}
{"time": "2021-02-24 05:57:27.619641", "score": "0.9918", "loss": "20.481", "code": "public static double logGammaDifference(double n) {  for (int0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 62, "n_pass": [55, 4, 4]}
{"time": "2021-02-24 05:57:30.862371", "score": "0.9918", "loss": "20.481", "code": "public static double logGammaDifference(double n) {for (int0; i < n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 60, "n_pass": [95, 5, 5]}
{"time": "2021-02-24 05:57:32.736236", "score": "0.9895", "loss": "20.1696", "code": "public static double logGammaDifference(double n) {for (int0;  n; i++) { result += Math.log(z + i); } return result; }", "n_tokens": 57, "n_pass": [99, 6, 6]}
{"time": "2021-02-24 05:57:34.634313", "score": "0.9725", "loss": "21.0444", "code": "public static double logGammaDifference(double n) {for (int0;  n; i++) { result +=log(z + i); } return result; }", "n_tokens": 54, "n_pass": [105, 7, 7]}
{"time": "2021-02-24 05:57:36.458063", "score": "0.9632", "loss": "21.7612", "code": "public static double logGammaDifference(double n) {for (int0;  n; i++) { result +=log(zi); } return result; }", "n_tokens": 51, "n_pass": [107, 8, 8]}
{"time": "2021-02-24 05:57:38.350325", "score": "0.9736", "loss": "21.4208", "code": "public static double logGammaDifference(double n) {for (int0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 48, "n_pass": [110, 9, 9]}
{"time": "2021-02-24 05:57:40.235297", "score": "0.9736", "loss": "21.4208", "code": "static double logGammaDifference(double n) {for (int0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 46, "n_pass": [112, 10, 10]}
{"time": "2021-02-24 05:57:42.064466", "score": "0.9736", "loss": "21.4208", "code": "double logGammaDifference(double n) {for (int0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 44, "n_pass": [113, 11, 11]}
{"time": "2021-02-24 05:57:51.353167", "score": "0.9736", "loss": "21.4208", "code": "double logGammaDifference(double n){for (int0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 43, "n_pass": [173, 13, 12]}
{"time": "2021-02-24 05:57:53.174903", "score": "0.9736", "loss": "21.4208", "code": "double logGammaDifference(double n){for(int0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 42, "n_pass": [175, 14, 13]}
{"time": "2021-02-24 05:57:54.982616", "score": "0.9734", "loss": "20.4046", "code": "double logGammaDifference(double n){for(0;  n; i++) { result +=log(zi); } ; }", "n_tokens": 41, "n_pass": [177, 15, 14]}
{"time": "2021-02-24 05:57:56.830752", "score": "0.9698", "loss": "21.3914", "code": "double logGammaDifference(double n){for(;  n; i++) { result +=log(zi); } ; }", "n_tokens": 40, "n_pass": [178, 16, 15]}
{"time": "2021-02-24 05:57:58.706081", "score": "0.9698", "loss": "21.3914", "code": "double logGammaDifference(double n){for(; n; i++) { result +=log(zi); } ; }", "n_tokens": 39, "n_pass": [180, 17, 16]}
{"time": "2021-02-24 05:58:00.550605", "score": "0.9698", "loss": "21.3914", "code": "double logGammaDifference(double n){for(;n; i++) { result +=log(zi); } ; }", "n_tokens": 38, "n_pass": [181, 18, 17]}
{"time": "2021-02-24 05:58:02.355314", "score": "0.9238", "loss": "21.2048", "code": "double logGammaDifference(double n){for(;; i++) { result +=log(zi); } ; }", "n_tokens": 37, "n_pass": [182, 19, 18]}
{"time": "2021-02-24 05:58:04.196644", "score": "0.9238", "loss": "21.2048", "code": "double logGammaDifference(double n){for(;;i++) { result +=log(zi); } ; }", "n_tokens": 36, "n_pass": [184, 20, 19]}
{"time": "2021-02-24 05:58:06.055401", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++) { result +=log(); } ; }", "n_tokens": 34, "n_pass": [193, 21, 20]}
{"time": "2021-02-24 05:58:07.909220", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++) { result +=log(); } }", "n_tokens": 32, "n_pass": [196, 22, 21]}
{"time": "2021-02-24 05:58:13.298025", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++) { result +=log(); }}", "n_tokens": 31, "n_pass": [237, 23, 22]}
{"time": "2021-02-24 05:58:16.048514", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++){ result +=log(); }}", "n_tokens": 30, "n_pass": [255, 24, 23]}
{"time": "2021-02-24 05:58:17.885007", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++){result +=log(); }}", "n_tokens": 29, "n_pass": [257, 25, 24]}
{"time": "2021-02-24 05:58:19.708258", "score": "0.861", "loss": "20.047", "code": "double logGammaDifference(double n){for(;;i++){result+=log(); }}", "n_tokens": 28, "n_pass": [259, 26, 25]}
{"time": "2021-02-24 05:58:21.541240", "score": "0.9306", "loss": "18.9455", "code": "double logGammaDifference(double n){for(;;i++){result=log(); }}", "n_tokens": 27, "n_pass": [260, 27, 26]}
{"time": "2021-02-24 05:58:25.214620", "score": "0.9306", "loss": "18.9455", "code": "double logGammaDifference(double n){for(;;i++){result=log();}}", "n_tokens": 26, "n_pass": [266, 29, 27]}

Minimal simplified code:
double logGammaDifference(double n){for(;;i++){result=log();}}

