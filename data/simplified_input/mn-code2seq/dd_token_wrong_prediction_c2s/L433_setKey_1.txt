
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceTlsMAC_setKey.java
method_name = setKey
method_body = public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }
predict, score, loss = init, 0.7099613547325134, 6.691354751586914

Trace of simplified code(s):
{"time": "2021-02-24 02:21:56.997692", "score": "0.71", "loss": "6.6914", "code": "public void setKey(byte[] key, int keyOff, int keyLen) { try { mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 73, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:21:59.339678", "score": "0.7189", "loss": "6.0372", "code": "public void setKey(byte[] key, int keyOffkeyLen) { try { mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 69, "n_pass": [48, 2, 2]}
{"time": "2021-02-24 02:22:01.212867", "score": "0.4779", "loss": "6.5541", "code": "public void setKey(byte[] key, int keyOffkeyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 64, "n_pass": [53, 3, 3]}
{"time": "2021-02-24 02:22:05.488713", "score": "0.4779", "loss": "6.5541", "code": "void setKey(byte[] key, int keyOffkeyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 62, "n_pass": [108, 5, 4]}
{"time": "2021-02-24 02:22:16.177388", "score": "0.4779", "loss": "6.5541", "code": "void setKey(byte[]key, int keyOffkeyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 61, "n_pass": [196, 7, 5]}
{"time": "2021-02-24 02:22:18.060891", "score": "0.4779", "loss": "6.5541", "code": "void setKey(byte[]key,int keyOffkeyLen) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 60, "n_pass": [199, 8, 6]}
{"time": "2021-02-24 02:22:21.817582", "score": "0.608", "loss": "6.659", "code": "void setKey(byte[]key,int keyOff) { try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 59, "n_pass": [203, 10, 7]}
{"time": "2021-02-24 02:22:23.672116", "score": "0.608", "loss": "6.659", "code": "void setKey(byte[]key,int keyOff){ try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 58, "n_pass": [205, 11, 8]}
{"time": "2021-02-24 02:22:25.549299", "score": "0.608", "loss": "6.659", "code": "void setKey(byte[]key,int keyOff){try { mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 57, "n_pass": [207, 12, 9]}
{"time": "2021-02-24 02:22:27.493697", "score": "0.608", "loss": "6.659", "code": "void setKey(byte[]key,int keyOff){try{ mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 56, "n_pass": [209, 13, 10]}
{"time": "2021-02-24 02:22:29.336753", "score": "0.608", "loss": "6.659", "code": "void setKey(byte[]key,int keyOff){try{mac.init(new SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 55, "n_pass": [211, 14, 11]}
{"time": "2021-02-24 02:22:33.028302", "score": "0.6876", "loss": "7.8332", "code": "void setKey(byte[]key,int keyOff){try{mac.init( SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 54, "n_pass": [216, 16, 12]}
{"time": "2021-02-24 02:22:34.939846", "score": "0.6876", "loss": "7.8332", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keykeyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 53, "n_pass": [217, 17, 13]}
{"time": "2021-02-24 02:22:36.802139", "score": "0.6618", "loss": "7.6734", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen, algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 52, "n_pass": [220, 18, 14]}
{"time": "2021-02-24 02:22:38.648800", "score": "0.6618", "loss": "7.6734", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen,algorithm)); } catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 51, "n_pass": [223, 19, 15]}
{"time": "2021-02-24 02:22:40.520548", "score": "0.6618", "loss": "7.6734", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen,algorithm));} catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 50, "n_pass": [228, 20, 16]}
{"time": "2021-02-24 02:22:42.386700", "score": "0.6618", "loss": "7.6734", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen,algorithm));}catch (InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 49, "n_pass": [230, 21, 17]}
{"time": "2021-02-24 02:22:44.261176", "score": "0.6618", "loss": "7.6734", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen,algorithm));}catch(InvalidKeyException e) { e.printStackTrace(); } }", "n_tokens": 48, "n_pass": [232, 22, 18]}
{"time": "2021-02-24 02:22:46.117722", "score": "0.6429", "loss": "8.0234", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen,algorithm));}catch(InvalidKeyException e) { printStackTrace(); } }", "n_tokens": 46, "n_pass": [238, 23, 19]}
{"time": "2021-02-24 02:22:50.915348", "score": "0.6663", "loss": "6.9182", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLenalgorithm));}catch(InvalidKeyException e) { printStackTrace(); } }", "n_tokens": 45, "n_pass": [266, 25, 20]}
{"time": "2021-02-24 02:22:52.815211", "score": "0.5662", "loss": "7.0136", "code": "void setKey(byte[]key,int keyOff){try{mac.init(SecretKeySpec(keyLen));}catch(InvalidKeyException e) { printStackTrace(); } }", "n_tokens": 44, "n_pass": [267, 26, 21]}
{"time": "2021-02-24 02:22:57.477534", "score": "0.4696", "loss": "6.0584", "code": "void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e) { printStackTrace(); } }", "n_tokens": 43, "n_pass": [302, 28, 22]}
{"time": "2021-02-24 02:23:04.684505", "score": "0.4696", "loss": "6.0584", "code": "void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e){ printStackTrace(); } }", "n_tokens": 42, "n_pass": [356, 30, 23]}
{"time": "2021-02-24 02:23:06.522440", "score": "0.4696", "loss": "6.0584", "code": "void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e){printStackTrace(); } }", "n_tokens": 41, "n_pass": [358, 31, 24]}
{"time": "2021-02-24 02:23:08.381053", "score": "0.4696", "loss": "6.0584", "code": "void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e){printStackTrace();} }", "n_tokens": 40, "n_pass": [363, 32, 25]}
{"time": "2021-02-24 02:23:10.214481", "score": "0.4696", "loss": "6.0584", "code": "void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e){printStackTrace();}}", "n_tokens": 39, "n_pass": [365, 33, 26]}

Minimal simplified code:
void setKey(byte[]key,int keyOff){try{mac.init((keyLen));}catch(InvalidKeyException e){printStackTrace();}}

