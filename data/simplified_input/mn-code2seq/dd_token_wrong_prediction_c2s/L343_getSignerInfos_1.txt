
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/cms/SignedDataParser_getSignerInfos.java
method_name = getSignerInfos
method_body = public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException("getCerts() and/or getCrls() has not been called."); } if (_nextObject == null) { _nextObject = _seq.readObject(); } return (ASN1SetParser) _nextObject; }
predict, score, loss = getGetCertificates, 0.6190004944801331, 23.96041488647461

Trace of simplified code(s):
{"time": "2021-02-24 10:23:01.580146", "score": "0.619", "loss": "23.9604", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() has not been called.\"); } if (_nextObject == null) { _nextObject = _seq.readObject(); } return (ASN1SetParser) _nextObject; }", "n_tokens": 108, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 10:23:06.293067", "score": "0.619", "loss": "23.9604", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject == null) { _nextObject = _seq.readObject(); } return (ASN1SetParser) _nextObject; }", "n_tokens": 101, "n_pass": [52, 3, 2]}
{"time": "2021-02-24 10:23:12.414405", "score": "0.5596", "loss": "24.1316", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) { _nextObject = _seq.readObject(); } return (ASN1SetParser) _nextObject; }", "n_tokens": 97, "n_pass": [102, 6, 3]}
{"time": "2021-02-24 10:23:14.274907", "score": "0.5728", "loss": "24.8823", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  _seq.readObject(); } return (ASN1SetParser) _nextObject; }", "n_tokens": 93, "n_pass": [104, 7, 4]}
{"time": "2021-02-24 10:23:16.178416", "score": "0.5949", "loss": "24.451", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) { readObject(); } return (ASN1SetParser) _nextObject; }", "n_tokens": 89, "n_pass": [105, 8, 5]}
{"time": "2021-02-24 10:23:18.058545", "score": "0.5873", "loss": "25.2031", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_certsCalled || !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 85, "n_pass": [106, 9, 6]}
{"time": "2021-02-24 10:23:20.402222", "score": "0.6018", "loss": "24.4713", "code": "public ASN1SetParser getSignerInfos() throws IOException { if (!_| !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 82, "n_pass": [118, 10, 7]}
{"time": "2021-02-24 10:23:35.567969", "score": "0.6018", "loss": "24.4713", "code": "public ASN1SetParser getSignerInfos() throws IOException {if (!_| !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 81, "n_pass": [195, 16, 8]}
{"time": "2021-02-24 10:23:37.438659", "score": "0.6018", "loss": "24.4713", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_| !_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 80, "n_pass": [197, 17, 9]}
{"time": "2021-02-24 10:23:41.192527", "score": "0.6231", "loss": "24.6459", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts() and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 78, "n_pass": [200, 19, 10]}
{"time": "2021-02-24 10:23:46.814035", "score": "0.6231", "loss": "24.6458", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and/or getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 76, "n_pass": [208, 22, 11]}
{"time": "2021-02-24 10:23:50.554340", "score": "0.6131", "loss": "23.9911", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls() .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 74, "n_pass": [210, 24, 12]}
{"time": "2021-02-24 10:23:54.289297", "score": "0.6131", "loss": "23.9911", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls .\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 72, "n_pass": [212, 26, 13]}
{"time": "2021-02-24 10:23:56.118076", "score": "0.6131", "loss": "23.9911", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_nextObject ) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 70, "n_pass": [213, 27, 14]}
{"time": "2021-02-24 10:23:58.019581", "score": "0.5802", "loss": "23.4639", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser) _nextObject; }", "n_tokens": 68, "n_pass": [219, 28, 15]}
{"time": "2021-02-24 10:24:02.191945", "score": "0.5802", "loss": "23.4639", "code": "public ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 66, "n_pass": [227, 30, 16]}
{"time": "2021-02-24 10:24:04.033898", "score": "0.5802", "loss": "23.4639", "code": " ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 65, "n_pass": [230, 31, 17]}
{"time": "2021-02-24 10:24:05.889878", "score": "0.5802", "loss": "23.4639", "code": "ASN1SetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 64, "n_pass": [231, 32, 18]}
{"time": "2021-02-24 10:24:07.801970", "score": "0.5802", "loss": "23.4639", "code": "ASNSetParser getSignerInfos() throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 63, "n_pass": [233, 33, 19]}
{"time": "2021-02-24 10:24:12.450558", "score": "0.5802", "loss": "23.4639", "code": "ASNSetParser getSignerInfos()throws IOException {if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 62, "n_pass": [239, 35, 20]}
{"time": "2021-02-24 10:24:14.325877", "score": "0.5802", "loss": "23.4639", "code": "ASNSetParser getSignerInfos()throws IOException{if(!_|_crlsCalled) { throw new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 61, "n_pass": [243, 36, 21]}
{"time": "2021-02-24 10:24:18.008394", "score": "0.5848", "loss": "22.3909", "code": "ASNSetParser getSignerInfos()throws IOException{if(!_|_crlsCalled) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 59, "n_pass": [251, 38, 22]}
{"time": "2021-02-24 10:24:29.583263", "score": "0.545", "loss": "22.0369", "code": "ASN getSignerInfos()throws IOException{if(!_|_crlsCalled) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 58, "n_pass": [272, 44, 23]}
{"time": "2021-02-24 10:24:49.316590", "score": "0.5783", "loss": "22.3678", "code": "ASN getSignerInfos()throws IOException{if(_|_crlsCalled) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 57, "n_pass": [356, 50, 24]}
{"time": "2021-02-24 10:24:51.154393", "score": "0.5336", "loss": "22.0917", "code": "ASN getSignerInfos()throws IOException{if(__crlsCalled) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 56, "n_pass": [358, 51, 25]}
{"time": "2021-02-24 10:24:52.968753", "score": "0.5336", "loss": "22.0917", "code": "ASN getSignerInfos()throws IOException{if(_crlsCalled) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 55, "n_pass": [359, 52, 26]}
{"time": "2021-02-24 10:24:54.761217", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_) { new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 54, "n_pass": [360, 53, 27]}
{"time": "2021-02-24 10:24:56.616903", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){ new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 53, "n_pass": [362, 54, 28]}
{"time": "2021-02-24 10:24:58.461513", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\"); } if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 52, "n_pass": [364, 55, 29]}
{"time": "2021-02-24 10:25:13.201717", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");} if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 51, "n_pass": [378, 63, 30]}
{"time": "2021-02-24 10:25:15.043290", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if (_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 50, "n_pass": [380, 64, 31]}
{"time": "2021-02-24 10:25:16.885838", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_) {  } return (ASN1SetParser)nextObject; }", "n_tokens": 49, "n_pass": [382, 65, 32]}
{"time": "2021-02-24 10:25:18.733846", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){  } return (ASN1SetParser)nextObject; }", "n_tokens": 48, "n_pass": [386, 66, 33]}
{"time": "2021-02-24 10:25:20.602713", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){ } return (ASN1SetParser)nextObject; }", "n_tokens": 47, "n_pass": [388, 67, 34]}
{"time": "2021-02-24 10:25:22.444717", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){} return (ASN1SetParser)nextObject; }", "n_tokens": 46, "n_pass": [389, 68, 35]}
{"time": "2021-02-24 10:25:24.286668", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){}return (ASN1SetParser)nextObject; }", "n_tokens": 45, "n_pass": [391, 69, 36]}
{"time": "2021-02-24 10:25:26.607049", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){}return(ASN1SetParser)nextObject; }", "n_tokens": 44, "n_pass": [393, 70, 37]}
{"time": "2021-02-24 10:25:28.474159", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){}return(ASNSetParser)nextObject; }", "n_tokens": 43, "n_pass": [396, 71, 38]}
{"time": "2021-02-24 10:25:33.989879", "score": "0.5854", "loss": "22.2485", "code": "ASN getSignerInfos()throws IOException{if(_){new IOException(\"getCerts and getCrls\");}if(_){}return(ASNSetParser)nextObject;}", "n_tokens": 42, "n_pass": [401, 74, 39]}

Minimal simplified code:
ASN getSignerInfos()throws IOException{if(_){new IOException("getCerts and getCrls");}if(_){}return(ASNSetParser)nextObject;}

