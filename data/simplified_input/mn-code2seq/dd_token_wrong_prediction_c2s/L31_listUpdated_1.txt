
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rafaelsteil__jforum3/src/test/java/net/jforum/controllers/RecentTopicsControllerTestCase_listUpdated.java
method_name = listUpdated
method_body = @Test public void listUpdated() { component.listUpdated(); assertEquals("recentTopicsUpdated", mockResult.included("recentTopicsSectionKey")); assertEquals(topicList, mockResult.included("topics")); }
predict, score, loss = testIncluded, 0.7530797719955444, 11.222825050354004

Trace of simplified code(s):
{"time": "2021-02-24 11:03:13.231578", "score": "0.7531", "loss": "11.2228", "code": "@Test public void listUpdated() { component.listUpdated(); assertEquals(\"recentTopicsUpdated\", mockResult.included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 55, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:03:15.542777", "score": "0.7615", "loss": "16.1506", "code": "@Test public void listUpdated() { assertEquals(\"recentTopicsUpdated\", mockResult.included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 48, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 11:03:17.837529", "score": "0.7254", "loss": "17.7876", "code": "@Test public void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 45, "n_pass": [45, 3, 3]}
{"time": "2021-02-24 11:03:19.724215", "score": "0.9828", "loss": "21.3116", "code": "public void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 42, "n_pass": [53, 4, 4]}
{"time": "2021-02-24 11:03:22.881088", "score": "0.9828", "loss": "21.3116", "code": " void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 41, "n_pass": [90, 5, 5]}
{"time": "2021-02-24 11:03:24.716306", "score": "0.9828", "loss": "21.3116", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicList, mockResult.included(\"topics\")); }", "n_tokens": 40, "n_pass": [91, 6, 6]}
{"time": "2021-02-24 11:03:27.011684", "score": "0.978", "loss": "20.8789", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicListmockResult.included(\"topics\")); }", "n_tokens": 38, "n_pass": [106, 7, 7]}
{"time": "2021-02-24 11:03:28.828125", "score": "0.8963", "loss": "17.402", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\")); assertEquals(topicListincluded(\"topics\")); }", "n_tokens": 36, "n_pass": [107, 8, 8]}
{"time": "2021-02-24 11:03:31.558253", "score": "0.8888", "loss": "16.3693", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));(topicListincluded(\"topics\")); }", "n_tokens": 34, "n_pass": [126, 9, 9]}
{"time": "2021-02-24 11:03:36.401609", "score": "0.9324", "loss": "17.9284", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));(included(\"topics\")); }", "n_tokens": 33, "n_pass": [176, 10, 10]}
{"time": "2021-02-24 11:03:38.187120", "score": "0.9163", "loss": "17.382", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));((\"topics\")); }", "n_tokens": 32, "n_pass": [177, 11, 11]}
{"time": "2021-02-24 11:03:39.990598", "score": "0.9404", "loss": "17.3356", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));((\"\")); }", "n_tokens": 31, "n_pass": [180, 12, 12]}
{"time": "2021-02-24 11:03:41.861325", "score": "0.9404", "loss": "17.3356", "code": "void listUpdated() { assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));((\"\"));}", "n_tokens": 30, "n_pass": [185, 13, 13]}
{"time": "2021-02-24 11:03:44.526730", "score": "0.9404", "loss": "17.3356", "code": "void listUpdated(){ assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));((\"\"));}", "n_tokens": 29, "n_pass": [192, 14, 14]}
{"time": "2021-02-24 11:03:46.371841", "score": "0.9404", "loss": "17.3356", "code": "void listUpdated(){assertEquals(\"recentTopicsUpdated\".included(\"recentTopicsSectionKey\"));((\"\"));}", "n_tokens": 28, "n_pass": [194, 15, 15]}
{"time": "2021-02-24 11:03:50.084191", "score": "0.9477", "loss": "18.1256", "code": "void listUpdated(){assertEquals(\"\".included(\"recentTopicsSectionKey\"));((\"\"));}", "n_tokens": 27, "n_pass": [198, 17, 16]}
{"time": "2021-02-24 11:03:51.923436", "score": "0.6725", "loss": "18.786", "code": "void listUpdated(){assertEquals(\"\".included(\"\"));((\"\"));}", "n_tokens": 26, "n_pass": [204, 18, 17]}

Minimal simplified code:
void listUpdated(){assertEquals("".included(""));((""));}

