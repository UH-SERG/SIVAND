
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/henryyan__activiti-in-action-codes/chapter13-query/src/test/java/me/kafeitu/activiti/chapter9/MultiInstanceTest_testParallel.java
method_name = testParallel
method_body = @Test @Deployment(resources = { "diagrams/chapter9/testMultiInstanceFixedNumbers.bpmn" }) public void testParallel() throws Exception { Map<String, Object> variables = new HashMap<String, Object>(); long loop = 3; variables.put("loop", loop); variables.put("counter", 0); ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testMultiInstanceFixedNumbers", variables); Object variable = runtimeService.getVariable(processInstance.getId(), "counter"); assertEquals(loop, variable); }
predict, score, loss = testMultiInstanceMultiInstance, 0.7705749273300171, 12.478719711303711

Trace of simplified code(s):
{"time": "2021-02-24 10:37:47.134123", "score": "0.7644", "loss": "12.4936", "code": "@Test @Deployment(resources = { \"diagrams/chapter9/testMultiInstanceFixedNumbers.bpmn\" }) public void testParallel() throws Exception { Map<String, Object> variables = new HashMap<String, Object>(); long loop = 3; variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 152, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 10:37:51.573707", "score": "0.7796", "loss": "12.524", "code": "@Test @Deployment(resources = { \"diagrams/chapter9/testMultiInstanceFixedNumbers.bpmn\" }) public void testParallel() throws Exception { Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 143, "n_pass": [51, 3, 2]}
{"time": "2021-02-24 10:37:53.556650", "score": "0.761", "loss": "11.566", "code": "@Test @Deployment(resources = { \"diagrams/chapter9/testMultiInstanceFixedNumbers.bpmn\" }) public void testParallel() throws Exception { Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 138, "n_pass": [103, 4, 3]}
{"time": "2021-02-24 10:37:55.987307", "score": "0.7446", "loss": "11.249", "code": "@Test @Deployment(resources = { \"diagrams/chapterbpmn\" }) public void testParallel() throws Exception { Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 134, "n_pass": [116, 5, 4]}
{"time": "2021-02-24 10:37:57.941892", "score": "0.6148", "loss": "10.2276", "code": "@Test @Deployment(resources = { \"diagrams/chapterbpmn\" }) public void testParallel(){ Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 129, "n_pass": [120, 6, 5]}
{"time": "2021-02-24 10:38:09.215400", "score": "0.6247", "loss": "10.523", "code": " @Deployment(resources = { \"diagrams/chapterbpmn\" }) public void testParallel(){ Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 127, "n_pass": [242, 11, 6]}
{"time": "2021-02-24 10:38:11.127151", "score": "0.6541", "loss": "10.5624", "code": " @Deployment(resources = { \"diagramsbpmn\" }) public void testParallel(){ Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 125, "n_pass": [248, 12, 7]}
{"time": "2021-02-24 10:38:13.071643", "score": "0.6401", "loss": "10.6844", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<String, Object> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 123, "n_pass": [252, 13, 8]}
{"time": "2021-02-24 10:38:15.496022", "score": "0.6813", "loss": "10.3786", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<String, Object>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 121, "n_pass": [258, 14, 9]}
{"time": "2021-02-24 10:38:17.447746", "score": "0.6924", "loss": "10.9546", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); variables.put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 119, "n_pass": [265, 15, 10]}
{"time": "2021-02-24 10:38:19.362349", "score": "0.6623", "loss": "10.8653", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\", variables); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 117, "n_pass": [269, 16, 11]}
{"time": "2021-02-24 10:38:21.324415", "score": "0.697", "loss": "10.9047", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance .startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\"); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 114, "n_pass": [282, 17, 12]}
{"time": "2021-02-24 10:38:35.507777", "score": "0.697", "loss": "10.9047", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance.startProcessInstanceByKey(\"testMultiInstanceFixedNumbers\"); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 113, "n_pass": [425, 19, 13]}
{"time": "2021-02-24 10:38:37.442886", "score": "0.6449", "loss": "10.4181", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstancestartProcessInstanceByKey(\"testMultiInstanceFixedNumbers\"); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 112, "n_pass": [426, 20, 14]}
{"time": "2021-02-24 10:38:39.374326", "score": "0.7036", "loss": "10.9717", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); Object variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 111, "n_pass": [427, 21, 15]}
{"time": "2021-02-24 10:38:41.293808", "score": "0.7045", "loss": "10.5366", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService.getVariable(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 109, "n_pass": [431, 22, 16]}
{"time": "2021-02-24 10:38:43.222578", "score": "0.7489", "loss": "10.6934", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId(), \"counter\"); assertEquals(loop, variable); }", "n_tokens": 107, "n_pass": [435, 23, 17]}
{"time": "2021-02-24 10:38:47.078244", "score": "0.7682", "loss": "10.7671", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(loop, variable); }", "n_tokens": 105, "n_pass": [438, 25, 18]}
{"time": "2021-02-24 10:38:49.019385", "score": "0.755", "loss": "10.8383", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals( variable); }", "n_tokens": 103, "n_pass": [444, 26, 19]}
{"time": "2021-02-24 10:38:50.933266", "score": "0.7653", "loss": "10.7319", "code": " @Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 101, "n_pass": [445, 27, 20]}
{"time": "2021-02-24 10:38:52.822792", "score": "0.7653", "loss": "10.7319", "code": "@Deployment(resources = { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 100, "n_pass": [448, 28, 21]}
{"time": "2021-02-24 10:38:54.726685", "score": "0.7653", "loss": "10.7319", "code": "@Deployment(resources= { \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 99, "n_pass": [453, 29, 22]}
{"time": "2021-02-24 10:38:56.651929", "score": "0.7653", "loss": "10.7319", "code": "@Deployment(resources={ \"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 98, "n_pass": [455, 30, 23]}
{"time": "2021-02-24 10:38:58.538612", "score": "0.7653", "loss": "10.7319", "code": "@Deployment(resources={\"diagramsbpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 97, "n_pass": [457, 31, 24]}
{"time": "2021-02-24 10:39:00.477390", "score": "0.8074", "loss": "11.8231", "code": "@Deployment(resources={\"bpmn\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 96, "n_pass": [459, 32, 25]}
{"time": "2021-02-24 10:39:02.410206", "score": "0.7559", "loss": "10.9239", "code": "@Deployment(resources={\"\" }) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 95, "n_pass": [460, 33, 26]}
{"time": "2021-02-24 10:39:04.338673", "score": "0.7559", "loss": "10.9239", "code": "@Deployment(resources={\"\"}) void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 94, "n_pass": [462, 34, 27]}
{"time": "2021-02-24 10:39:06.233134", "score": "0.7559", "loss": "10.9239", "code": "@Deployment(resources={\"\"})void testParallel(){ Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 93, "n_pass": [465, 35, 28]}
{"time": "2021-02-24 10:39:09.089186", "score": "0.7559", "loss": "10.9239", "code": "@Deployment(resources={\"\"})void testParallel(){Map<StringObject> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 92, "n_pass": [472, 36, 29]}
{"time": "2021-02-24 10:39:11.434064", "score": "0.7587", "loss": "10.831", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object> variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 91, "n_pass": [475, 37, 30]}
{"time": "2021-02-24 10:39:13.357966", "score": "0.7587", "loss": "10.831", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables = new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 90, "n_pass": [478, 38, 31]}
{"time": "2021-02-24 10:39:15.246824", "score": "0.7587", "loss": "10.831", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables= new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 89, "n_pass": [480, 39, 32]}
{"time": "2021-02-24 10:39:17.181297", "score": "0.7587", "loss": "10.831", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<StringObject>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 88, "n_pass": [482, 40, 33]}
{"time": "2021-02-24 10:39:19.130535", "score": "0.7618", "loss": "10.8201", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<Object>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 87, "n_pass": [487, 41, 34]}
{"time": "2021-02-24 10:39:21.022286", "score": "0.7687", "loss": "10.88", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>(); put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 86, "n_pass": [488, 42, 35]}
{"time": "2021-02-24 10:39:22.923067", "score": "0.7687", "loss": "10.88", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"loop\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 85, "n_pass": [493, 43, 36]}
{"time": "2021-02-24 10:39:24.826136", "score": "0.7861", "loss": "11.4776", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\", loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 84, "n_pass": [497, 44, 37]}
{"time": "2021-02-24 10:39:26.740551", "score": "0.7861", "loss": "11.4776", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop); variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 83, "n_pass": [500, 45, 38]}
{"time": "2021-02-24 10:39:28.663588", "score": "0.7861", "loss": "11.4776", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables.put(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 82, "n_pass": [504, 46, 39]}
{"time": "2021-02-24 10:39:30.546481", "score": "0.7614", "loss": "11.19", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variablesput(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 81, "n_pass": [506, 47, 40]}
{"time": "2021-02-24 10:39:32.472205", "score": "0.7627", "loss": "11.3796", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"counter\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 80, "n_pass": [507, 48, 41]}
{"time": "2021-02-24 10:39:34.375852", "score": "0.7576", "loss": "11.3836", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\", 0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 79, "n_pass": [510, 49, 42]}
{"time": "2021-02-24 10:39:36.265501", "score": "0.7576", "loss": "11.3836", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0); ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 78, "n_pass": [513, 50, 43]}
{"time": "2021-02-24 10:39:38.219329", "score": "0.7576", "loss": "11.3836", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable = runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 77, "n_pass": [517, 51, 44]}
{"time": "2021-02-24 10:39:50.125844", "score": "0.7576", "loss": "11.3836", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable =runtimeService(processInstance.getId, \"counter\"); assertEquals(); }", "n_tokens": 76, "n_pass": [610, 54, 45]}
{"time": "2021-02-24 10:39:54.025440", "score": "0.7576", "loss": "11.3836", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable =runtimeService(processInstance.getId,\"counter\"); assertEquals(); }", "n_tokens": 75, "n_pass": [616, 56, 46]}
{"time": "2021-02-24 10:39:55.961701", "score": "0.7822", "loss": "11.4861", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable =runtimeService(processInstance.getId,\"\"); assertEquals(); }", "n_tokens": 74, "n_pass": [618, 57, 47]}
{"time": "2021-02-24 10:39:57.896034", "score": "0.7822", "loss": "11.4861", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable =runtimeService(processInstance.getId,\"\");assertEquals(); }", "n_tokens": 73, "n_pass": [622, 58, 48]}
{"time": "2021-02-24 10:39:59.812583", "score": "0.7822", "loss": "11.4861", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\"); variable =runtimeService(processInstance.getId,\"\");assertEquals();}", "n_tokens": 72, "n_pass": [627, 59, 49]}
{"time": "2021-02-24 10:40:07.844432", "score": "0.7822", "loss": "11.4861", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\");variable =runtimeService(processInstance.getId,\"\");assertEquals();}", "n_tokens": 71, "n_pass": [682, 62, 50]}
{"time": "2021-02-24 10:40:09.776450", "score": "0.7822", "loss": "11.4861", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\");variable=runtimeService(processInstance.getId,\"\");assertEquals();}", "n_tokens": 70, "n_pass": [684, 63, 51]}
{"time": "2021-02-24 10:40:13.598603", "score": "0.7306", "loss": "11.1257", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\");variable=runtimeService(processInstancegetId,\"\");assertEquals();}", "n_tokens": 69, "n_pass": [689, 65, 52]}
{"time": "2021-02-24 10:40:25.446446", "score": "0.7527", "loss": "11.2225", "code": "@Deployment(resources={\"\"})void testParallel(){Map<Object>variables=new HashMap<>();put(\"\",loop);variables(\"\",0);ProcessInstance(\"testMultiInstanceFixedNumbers\");variable=runtimeService(getId,\"\");assertEquals();}", "n_tokens": 68, "n_pass": [758, 70, 53]}

Minimal simplified code:
@Deployment(resources={""})void testParallel(){Map<Object>variables=new HashMap<>();put("",loop);variables("",0);ProcessInstance("testMultiInstanceFixedNumbers");variable=runtimeService(getId,"");assertEquals();}

