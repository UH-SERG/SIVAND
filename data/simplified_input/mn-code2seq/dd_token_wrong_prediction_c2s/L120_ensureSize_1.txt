
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/semanticvectors__semanticvectors/src-ext/qut/beagle/BeagleUtils_ensureSize.java
method_name = ensureSize
method_body = public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }
predict, score, loss = add, 0.402540922164917, 10.2146635055542

Trace of simplified code(s):
{"time": "2021-02-23 23:57:30.537643", "score": "0.4025", "loss": "10.2147", "code": "public void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 83, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 23:57:34.851346", "score": "0.4025", "loss": "10.2147", "code": "void ensureSize(ArrayList<DenseFloatMatrix1D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 81, "n_pass": [92, 3, 2]}
{"time": "2021-02-23 23:57:37.284758", "score": "0.472", "loss": "8.2767", "code": "void ensureSize(ArrayList<D> list, int size) { int lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 79, "n_pass": [96, 4, 3]}
{"time": "2021-02-23 23:57:39.236814", "score": "0.5099", "loss": "7.7568", "code": "void ensureSize(ArrayList<D> list, int size) { lSize = list.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 77, "n_pass": [103, 5, 4]}
{"time": "2021-02-23 23:57:41.142285", "score": "0.5683", "loss": "8.4251", "code": "void ensureSize(ArrayList<D> list, int size) { lSizelist.size(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 74, "n_pass": [105, 6, 5]}
{"time": "2021-02-23 23:57:43.056932", "score": "0.6467", "loss": "9.4316", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) return; for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 71, "n_pass": [106, 7, 6]}
{"time": "2021-02-23 23:57:44.947689", "score": "0.6077", "loss": "8.3925", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (int i = lSize; i < size; i++) list.add(null); }", "n_tokens": 68, "n_pass": [112, 8, 7]}
{"time": "2021-02-23 23:57:46.833729", "score": "0.7003", "loss": "8.5755", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (int ilSize; i < size; i++) list.add(null); }", "n_tokens": 65, "n_pass": [115, 9, 8]}
{"time": "2021-02-23 23:57:48.714713", "score": "0.6639", "loss": "8.7016", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (int ilSize;  size; i++) list.add(null); }", "n_tokens": 62, "n_pass": [117, 10, 9]}
{"time": "2021-02-23 23:57:52.524892", "score": "0.9429", "loss": "10.144", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (int ilSize;  size; i++) list.add; }", "n_tokens": 59, "n_pass": [122, 12, 10]}
{"time": "2021-02-23 23:57:54.935083", "score": "0.9783", "loss": "10.7827", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (lSize;  size; i++) list.add; }", "n_tokens": 56, "n_pass": [140, 13, 11]}
{"time": "2021-02-23 23:58:04.233264", "score": "0.9783", "loss": "10.7827", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (lSize;size; i++) list.add; }", "n_tokens": 54, "n_pass": [211, 15, 12]}
{"time": "2021-02-23 23:58:06.110696", "score": "0.9597", "loss": "10.0108", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (lSize;size; i) list.add; }", "n_tokens": 52, "n_pass": [214, 16, 13]}
{"time": "2021-02-23 23:58:07.976107", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D> list, int size) { lSize(); if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 50, "n_pass": [216, 17, 14]}
{"time": "2021-02-23 23:58:10.732790", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list, int size) { lSize(); if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 49, "n_pass": [227, 18, 15]}
{"time": "2021-02-23 23:58:12.563903", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size) { lSize(); if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 48, "n_pass": [230, 19, 16]}
{"time": "2021-02-23 23:58:14.426453", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size){ lSize(); if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 47, "n_pass": [235, 20, 17]}
{"time": "2021-02-23 23:58:16.262222", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size){lSize(); if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 46, "n_pass": [237, 21, 18]}
{"time": "2021-02-23 23:58:18.155176", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if (size <= lSize) for (lSize;size; i) add; }", "n_tokens": 45, "n_pass": [242, 22, 19]}
{"time": "2021-02-23 23:58:20.040528", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size <= lSize) for (lSize;size; i) add; }", "n_tokens": 44, "n_pass": [244, 23, 20]}
{"time": "2021-02-23 23:58:21.921244", "score": "0.7464", "loss": "7.6621", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size<= lSize) for (lSize;size; i) add; }", "n_tokens": 43, "n_pass": [247, 24, 21]}
{"time": "2021-02-23 23:58:23.774113", "score": "0.689", "loss": "8.2601", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size= lSize) for (lSize;size; i) add; }", "n_tokens": 42, "n_pass": [248, 25, 22]}
{"time": "2021-02-23 23:58:25.674221", "score": "0.689", "loss": "8.2601", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize) for (lSize;size; i) add; }", "n_tokens": 41, "n_pass": [250, 26, 23]}
{"time": "2021-02-23 23:58:27.578567", "score": "0.6884", "loss": "7.347", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize) for (lSize;size;) add; }", "n_tokens": 39, "n_pass": [256, 27, 24]}
{"time": "2021-02-23 23:58:37.071784", "score": "0.6884", "loss": "7.347", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize) for (lSize;size;) add;}", "n_tokens": 38, "n_pass": [306, 30, 25]}
{"time": "2021-02-23 23:58:41.647795", "score": "0.6884", "loss": "7.347", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize)for (lSize;size;) add;}", "n_tokens": 37, "n_pass": [332, 32, 26]}
{"time": "2021-02-23 23:58:43.517806", "score": "0.6884", "loss": "7.347", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize)for(lSize;size;) add;}", "n_tokens": 36, "n_pass": [334, 33, 27]}
{"time": "2021-02-23 23:58:45.371948", "score": "0.6636", "loss": "7.4279", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize)for(;size;) add;}", "n_tokens": 35, "n_pass": [336, 34, 28]}
{"time": "2021-02-23 23:58:47.201041", "score": "0.7726", "loss": "8.3475", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize)for(;;) add;}", "n_tokens": 34, "n_pass": [338, 35, 29]}
{"time": "2021-02-23 23:58:49.046059", "score": "0.7726", "loss": "8.3475", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size=lSize)for(;;)add;}", "n_tokens": 33, "n_pass": [341, 36, 30]}
{"time": "2021-02-23 23:58:53.662382", "score": "0.6212", "loss": "8.1202", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(sizelSize)for(;;)add;}", "n_tokens": 32, "n_pass": [367, 38, 31]}
{"time": "2021-02-23 23:58:55.474290", "score": "0.7094", "loss": "8.6567", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size)for(;;)add;}", "n_tokens": 31, "n_pass": [368, 39, 32]}
{"time": "2021-02-23 23:58:57.334293", "score": "0.1845", "loss": "7.8897", "code": "void ensureSize(ArrayList<D>list,int size){lSize();if(size)for(;;);}", "n_tokens": 30, "n_pass": [375, 40, 33]}

Minimal simplified code:
void ensureSize(ArrayList<D>list,int size){lSize();if(size)for(;;);}

