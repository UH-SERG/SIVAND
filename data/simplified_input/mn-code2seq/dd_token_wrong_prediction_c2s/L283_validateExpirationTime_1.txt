
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-projects__spring-ws/spring-ws-security/src/main/java/org/springframework/ws/soap/security/xwss/callback/DefaultTimestampValidator_validateExpirationTime.java
method_name = validateExpirationTime
method_body = private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { Date currentTime = getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw new TimestampValidationCallback.TimestampValidationException("The current time is ahead of the expiration time in Timestamp"); } }
predict, score, loss = setClockSkew, 0.6039447784423828, 14.291038513183594

Trace of simplified code(s):
{"time": "2021-02-24 11:29:27.810518", "score": "0.6039", "loss": "14.291", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { Date currentTime = getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw new TimestampValidationCallback.TimestampValidationException(\"The current time is ahead of the expiration time in Timestamp\"); } }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:29:29.738934", "score": "0.618", "loss": "14.7554", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { Date currentTime = getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw new TimestampValidationCallback.TimestampValidationException(\"The current time in Timestamp\"); } }", "n_tokens": 84, "n_pass": [26, 2, 2]}
{"time": "2021-02-24 11:29:31.664434", "score": "0.6407", "loss": "14.5305", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw new TimestampValidationCallback.TimestampValidationException(\"The current time in Timestamp\"); } }", "n_tokens": 78, "n_pass": [53, 3, 3]}
{"time": "2021-02-24 11:29:33.550383", "score": "0.5095", "loss": "13.647", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"The current time in Timestamp\"); } }", "n_tokens": 72, "n_pass": [58, 4, 4]}
{"time": "2021-02-24 11:29:35.438994", "score": "0.6122", "loss": "14.7674", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Thetime in Timestamp\"); } }", "n_tokens": 69, "n_pass": [96, 5, 5]}
{"time": "2021-02-24 11:29:37.290015", "score": "0.6031", "loss": "15.2289", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"The Timestamp\"); } }", "n_tokens": 66, "n_pass": [97, 6, 6]}
{"time": "2021-02-24 11:29:45.393528", "score": "0.6107", "loss": "15.2511", "code": "private void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 64, "n_pass": [165, 8, 7]}
{"time": "2021-02-24 11:29:47.275404", "score": "0.6107", "loss": "15.2511", "code": " void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 63, "n_pass": [170, 9, 8]}
{"time": "2021-02-24 11:29:49.186446", "score": "0.6107", "loss": "15.2511", "code": "void validateExpirationTime(Date expires, long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 62, "n_pass": [171, 10, 9]}
{"time": "2021-02-24 11:29:51.972867", "score": "0.6107", "loss": "15.2511", "code": "void validateExpirationTime(Date expires,long maxClockSkew) throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 61, "n_pass": [180, 11, 10]}
{"time": "2021-02-24 11:29:53.878725", "score": "0.6107", "loss": "15.2511", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback.TimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 60, "n_pass": [185, 12, 11]}
{"time": "2021-02-24 11:29:55.753167", "score": "0.6356", "loss": "15.5928", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallbackTimestampValidationException { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 59, "n_pass": [189, 13, 12]}
{"time": "2021-02-24 11:29:57.658419", "score": "0.657", "loss": "16.2977", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback { getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 58, "n_pass": [190, 14, 13]}
{"time": "2021-02-24 11:29:59.539194", "score": "0.657", "loss": "16.2977", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(new GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 57, "n_pass": [191, 15, 14]}
{"time": "2021-02-24 11:30:01.402579", "score": "0.6389", "loss": "16.0509", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) { throw(\"Timestamp\"); } }", "n_tokens": 55, "n_pass": [194, 16, 15]}
{"time": "2021-02-24 11:30:06.981605", "score": "0.6224", "loss": "15.0365", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires.before(currentTime)) {(\"Timestamp\"); } }", "n_tokens": 53, "n_pass": [207, 19, 16]}
{"time": "2021-02-24 11:30:11.654786", "score": "0.623", "loss": "15.3553", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)) {(\"Timestamp\"); } }", "n_tokens": 51, "n_pass": [238, 21, 17]}
{"time": "2021-02-24 11:30:20.629018", "score": "0.623", "loss": "15.3553", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)){(\"Timestamp\"); } }", "n_tokens": 50, "n_pass": [309, 23, 18]}
{"time": "2021-02-24 11:30:22.471126", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)){(\"\"); } }", "n_tokens": 49, "n_pass": [312, 24, 19]}
{"time": "2021-02-24 11:30:24.329369", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)){(\"\");} }", "n_tokens": 48, "n_pass": [316, 25, 20]}
{"time": "2021-02-24 11:30:26.193211", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{ getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)){(\"\");}}", "n_tokens": 47, "n_pass": [318, 26, 21]}
{"time": "2021-02-24 11:30:28.991464", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(), maxClockSkew, false); if (expires(currentTime)){(\"\");}}", "n_tokens": 46, "n_pass": [336, 27, 22]}
{"time": "2021-02-24 11:30:30.844262", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew, false); if (expires(currentTime)){(\"\");}}", "n_tokens": 45, "n_pass": [343, 28, 23]}
{"time": "2021-02-24 11:30:32.739952", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew,false); if (expires(currentTime)){(\"\");}}", "n_tokens": 44, "n_pass": [346, 29, 24]}
{"time": "2021-02-24 11:30:34.597334", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew,false);if (expires(currentTime)){(\"\");}}", "n_tokens": 43, "n_pass": [350, 30, 25]}
{"time": "2021-02-24 11:30:36.466768", "score": "0.6426", "loss": "17.1339", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew,false);if(expires(currentTime)){(\"\");}}", "n_tokens": 42, "n_pass": [352, 31, 26]}
{"time": "2021-02-24 11:30:38.297715", "score": "0.6313", "loss": "17.9912", "code": "void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew,false);if((currentTime)){(\"\");}}", "n_tokens": 41, "n_pass": [354, 32, 27]}

Minimal simplified code:
void validateExpirationTime(Date expires,long maxClockSkew)throws TimestampValidationCallback{getGMTDateWithSkewAdjusted(GregorianCalendar(),maxClockSkew,false);if((currentTime)){("");}}

