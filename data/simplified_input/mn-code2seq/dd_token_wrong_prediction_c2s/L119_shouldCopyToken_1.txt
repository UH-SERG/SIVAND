
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/cts/api/tokens/TokenTest_shouldCopyToken.java
method_name = shouldCopyToken
method_body = @Test public void shouldCopyToken() { Token token = new Token("badger", TokenType.SAML2); token.setAttribute(CoreTokenField.INTEGER_ONE, 1234); token.setAttribute(CoreTokenField.STRING_ONE, "Weasel"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(token); TokenTestUtils.assertTokenEquals(result, token); }
predict, score, loss = testSetAttribute, 0.6636823415756226, 20.534225463867188

Trace of simplified code(s):
{"time": "2021-02-24 03:26:05.884594", "score": "0.6521", "loss": "19.8849", "code": "@Test public void shouldCopyToken() { Token token = new Token(\"badger\", TokenType.SAML2); token.setAttribute(CoreTokenField.INTEGER_ONE, 1234); token.setAttribute(CoreTokenField.STRING_ONE, \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(token); TokenTestUtils.assertTokenEquals(result, token); }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 03:26:07.823546", "score": "0.7299", "loss": "18.3284", "code": "@Test public void shouldCopyToken() { Token token = new Token(\"badger\", CoreTokenField.STRING_ONE, \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(token); TokenTestUtils.assertTokenEquals(result, token); }", "n_tokens": 86, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 03:26:09.752993", "score": "0.7529", "loss": "17.7269", "code": "@Test public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(token); TokenTestUtils.assertTokenEquals(result, token); }", "n_tokens": 79, "n_pass": [36, 3, 3]}
{"time": "2021-02-24 03:26:11.643582", "score": "0.7474", "loss": "16.6973", "code": "@Test public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(result, token); }", "n_tokens": 71, "n_pass": [41, 4, 4]}
{"time": "2021-02-24 03:26:15.816360", "score": "0.7721", "loss": "16.6101", "code": "@Test public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(); }", "n_tokens": 67, "n_pass": [72, 6, 5]}
{"time": "2021-02-24 03:26:17.732478", "score": "0.6936", "loss": "20.428", "code": "public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenField.DATE_ONE, Calendar.getInstance()); Token result = new Token(); }", "n_tokens": 64, "n_pass": [73, 7, 6]}
{"time": "2021-02-24 03:26:23.905943", "score": "0.7893", "loss": "20.1524", "code": "public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenField, Calendar.getInstance()); Token result = new Token(); }", "n_tokens": 60, "n_pass": [85, 10, 7]}
{"time": "2021-02-24 03:26:25.760721", "score": "0.8977", "loss": "23.0156", "code": "public void shouldCopyToken() { Token token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = new Token(); }", "n_tokens": 56, "n_pass": [86, 11, 8]}
{"time": "2021-02-24 03:26:28.099274", "score": "0.6501", "loss": "21.9208", "code": "public void shouldCopyToken() {token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = new Token(); }", "n_tokens": 53, "n_pass": [95, 12, 9]}
{"time": "2021-02-24 03:26:42.997859", "score": "0.622", "loss": "20.8142", "code": "public void shouldCopyToken() {token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 51, "n_pass": [161, 19, 10]}
{"time": "2021-02-24 03:26:44.905033", "score": "0.622", "loss": "20.8142", "code": " void shouldCopyToken() {token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 50, "n_pass": [164, 20, 11]}
{"time": "2021-02-24 03:26:46.787563", "score": "0.622", "loss": "20.8142", "code": "void shouldCopyToken() {token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 49, "n_pass": [165, 21, 12]}
{"time": "2021-02-24 03:27:03.082575", "score": "0.622", "loss": "20.8142", "code": "void shouldCopyToken(){token = new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 48, "n_pass": [237, 26, 13]}
{"time": "2021-02-24 03:27:04.987307", "score": "0.622", "loss": "20.8142", "code": "void shouldCopyToken(){token= new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 47, "n_pass": [239, 27, 14]}
{"time": "2021-02-24 03:27:06.838740", "score": "0.622", "loss": "20.8142", "code": "void shouldCopyToken(){token=new Token(\"badger\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 46, "n_pass": [241, 28, 15]}
{"time": "2021-02-24 03:27:12.506156", "score": "0.7582", "loss": "22.3229", "code": "void shouldCopyToken(){token=new Token(\"\", \"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 45, "n_pass": [247, 31, 16]}
{"time": "2021-02-24 03:27:14.398211", "score": "0.7582", "loss": "22.3229", "code": "void shouldCopyToken(){token=new Token(\"\",\"Weasel\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 44, "n_pass": [250, 32, 17]}
{"time": "2021-02-24 03:27:16.274056", "score": "0.7736", "loss": "22.673", "code": "void shouldCopyToken(){token=new Token(\"\",\"\"); token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 43, "n_pass": [252, 33, 18]}
{"time": "2021-02-24 03:27:18.207352", "score": "0.7736", "loss": "22.673", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(CoreTokenFieldgetInstance()); Token result = Token(); }", "n_tokens": 42, "n_pass": [256, 34, 19]}
{"time": "2021-02-24 03:27:21.953358", "score": "0.782", "loss": "20.2946", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(getInstance()); Token result = Token(); }", "n_tokens": 41, "n_pass": [261, 36, 20]}
{"time": "2021-02-24 03:27:23.807757", "score": "0.782", "loss": "20.2946", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(getInstance());Token result = Token(); }", "n_tokens": 40, "n_pass": [267, 37, 21]}
{"time": "2021-02-24 03:27:31.194443", "score": "0.782", "loss": "20.2946", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(getInstance());Token result= Token(); }", "n_tokens": 39, "n_pass": [271, 41, 22]}
{"time": "2021-02-24 03:27:33.051575", "score": "0.782", "loss": "20.2946", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(getInstance());Token result=Token(); }", "n_tokens": 38, "n_pass": [273, 42, 23]}
{"time": "2021-02-24 03:27:34.963900", "score": "0.782", "loss": "20.2946", "code": "void shouldCopyToken(){token=new Token(\"\",\"\");token.setAttribute(getInstance());Token result=Token();}", "n_tokens": 37, "n_pass": [278, 43, 24]}
{"time": "2021-02-24 03:27:37.757901", "score": "0.6924", "loss": "18.7806", "code": "void shouldCopyToken(){token= Token(\"\",\"\");token.setAttribute(getInstance());Token result=Token();}", "n_tokens": 36, "n_pass": [288, 44, 25]}
{"time": "2021-02-24 03:27:39.633145", "score": "0.6924", "loss": "18.7806", "code": "void shouldCopyToken(){token=Token(\"\",\"\");token.setAttribute(getInstance());Token result=Token();}", "n_tokens": 35, "n_pass": [289, 45, 26]}
{"time": "2021-02-24 03:27:49.882207", "score": "0.5941", "loss": "18.7302", "code": "void shouldCopyToken(){tokenToken(\"\",\"\");token.setAttribute(getInstance());Token result=Token();}", "n_tokens": 34, "n_pass": [324, 50, 27]}

Minimal simplified code:
void shouldCopyToken(){tokenToken("","");token.setAttribute(getInstance());Token result=Token();}

