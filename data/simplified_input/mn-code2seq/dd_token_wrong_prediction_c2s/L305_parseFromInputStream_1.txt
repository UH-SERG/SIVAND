
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__incubator-heron/eco/src/java/org/apache/heron/eco/parser/EcoParser_parseFromInputStream.java
method_name = parseFromInputStream
method_body = public EcoTopologyDefinition parseFromInputStream(InputStream inputStream, InputStream propsFile, boolean envFilter) throws Exception { Yaml yaml = topologyYaml(); if (inputStream == null) { throw new Exception("Unable to load eco input stream"); } return loadTopologyFromYaml(yaml, inputStream, propsFile, envFilter); }
predict, score, loss = loadFromYaml, 0.8563423156738281, 21.499387741088867

Trace of simplified code(s):
{"time": "2021-02-24 11:11:53.861975", "score": "0.8563", "loss": "21.4994", "code": "public EcoTopologyDefinition parseFromInputStream(InputStream inputStream, InputStream propsFile, boolean envFilter) throws Exception { Yaml yaml = topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, inputStream, propsFile, envFilter); }", "n_tokens": 93, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:11:55.808711", "score": "0.8358", "loss": "20.8476", "code": "public EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter) throws Exception { Yaml yaml = topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, inputStream, propsFile, envFilter); }", "n_tokens": 88, "n_pass": [46, 2, 2]}
{"time": "2021-02-24 11:11:57.676003", "score": "0.8236", "loss": "21.7001", "code": "public EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter) throws Exception { topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, inputStream, propsFile, envFilter); }", "n_tokens": 82, "n_pass": [49, 3, 3]}
{"time": "2021-02-24 11:12:01.464991", "score": "0.8332", "loss": "19.1577", "code": "public EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter) throws Exception { topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 76, "n_pass": [58, 5, 4]}
{"time": "2021-02-24 11:12:05.261006", "score": "0.8332", "loss": "19.1577", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter) throws Exception { topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 74, "n_pass": [100, 7, 5]}
{"time": "2021-02-24 11:12:07.605271", "score": "0.854", "loss": "19.4265", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { topologyYaml(); if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 71, "n_pass": [106, 8, 6]}
{"time": "2021-02-24 11:12:09.481411", "score": "0.8704", "loss": "20.7494", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) { throw new Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 68, "n_pass": [108, 9, 7]}
{"time": "2021-02-24 11:12:11.311369", "score": "0.8463", "loss": "20.7533", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable to load eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 65, "n_pass": [114, 10, 8]}
{"time": "2021-02-24 11:12:13.223695", "score": "0.7946", "loss": "21.4437", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable  eco input stream\"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 62, "n_pass": [117, 11, 9]}
{"time": "2021-02-24 11:12:16.954889", "score": "0.7934", "loss": "21.2882", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(yaml, envFilter); }", "n_tokens": 59, "n_pass": [119, 13, 10]}
{"time": "2021-02-24 11:12:32.270728", "score": "0.7729", "loss": "16.6079", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml( envFilter); }", "n_tokens": 57, "n_pass": [188, 18, 11]}
{"time": "2021-02-24 11:12:34.134449", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream, boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 55, "n_pass": [189, 19, 12]}
{"time": "2021-02-24 11:12:37.354726", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter)  { ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 54, "n_pass": [200, 20, 13]}
{"time": "2021-02-24 11:12:39.208576", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter) { ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 53, "n_pass": [205, 21, 14]}
{"time": "2021-02-24 11:12:41.049610", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){ ; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 52, "n_pass": [206, 22, 15]}
{"time": "2021-02-24 11:12:42.901034", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){; if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 51, "n_pass": [208, 23, 16]}
{"time": "2021-02-24 11:12:44.716822", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){ if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 50, "n_pass": [209, 24, 17]}
{"time": "2021-02-24 11:12:46.548817", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if (inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 49, "n_pass": [210, 25, 18]}
{"time": "2021-02-24 11:12:48.400434", "score": "0.775", "loss": "16.6967", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStream == null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 48, "n_pass": [212, 26, 19]}
{"time": "2021-02-24 11:12:50.268630", "score": "0.7546", "loss": "16.4115", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStream= null) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 46, "n_pass": [214, 27, 20]}
{"time": "2021-02-24 11:12:52.094073", "score": "0.7712", "loss": "16.4058", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStreamnull) {  Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 44, "n_pass": [215, 28, 21]}
{"time": "2021-02-24 11:12:53.917297", "score": "0.7712", "loss": "16.4058", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStreamnull) {Exception(\"Unable  eco \"); } return loadTopologyFromYaml(); }", "n_tokens": 42, "n_pass": [218, 29, 22]}
{"time": "2021-02-24 11:12:59.465453", "score": "0.7319", "loss": "17.3497", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStreamnull) {Exception(\"Unable  eco \"); } loadTopologyFromYaml(); }", "n_tokens": 40, "n_pass": [226, 32, 23]}
{"time": "2021-02-24 11:13:10.187590", "score": "0.7319", "loss": "17.3497", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(inputStreamnull) {Exception(\"Unable  eco \"); } loadTopologyFromYaml();}", "n_tokens": 39, "n_pass": [283, 35, 24]}
{"time": "2021-02-24 11:13:13.369445", "score": "0.7752", "loss": "18.1192", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null) {Exception(\"Unable  eco \"); } loadTopologyFromYaml();}", "n_tokens": 38, "n_pass": [299, 36, 25]}
{"time": "2021-02-24 11:13:15.253733", "score": "0.7752", "loss": "18.1192", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){Exception(\"Unable  eco \"); } loadTopologyFromYaml();}", "n_tokens": 37, "n_pass": [302, 37, 26]}
{"time": "2021-02-24 11:13:17.119971", "score": "0.7684", "loss": "19.1985", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"Unable  eco \"); } loadTopologyFromYaml();}", "n_tokens": 36, "n_pass": [304, 38, 27]}
{"time": "2021-02-24 11:13:18.978719", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"  eco \"); } loadTopologyFromYaml();}", "n_tokens": 35, "n_pass": [307, 39, 28]}
{"time": "2021-02-24 11:13:20.843084", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\" eco \"); } loadTopologyFromYaml();}", "n_tokens": 34, "n_pass": [308, 40, 29]}
{"time": "2021-02-24 11:13:22.654810", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"eco \"); } loadTopologyFromYaml();}", "n_tokens": 33, "n_pass": [309, 41, 30]}
{"time": "2021-02-24 11:13:26.396807", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"eco\"); } loadTopologyFromYaml();}", "n_tokens": 32, "n_pass": [311, 43, 31]}
{"time": "2021-02-24 11:13:28.278731", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"eco\");} loadTopologyFromYaml();}", "n_tokens": 31, "n_pass": [315, 44, 32]}
{"time": "2021-02-24 11:13:30.123699", "score": "0.7955", "loss": "16.5806", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"eco\");}loadTopologyFromYaml();}", "n_tokens": 30, "n_pass": [317, 45, 33]}
{"time": "2021-02-24 11:13:33.289612", "score": "0.7422", "loss": "16.8844", "code": "EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){(\"\");}loadTopologyFromYaml();}", "n_tokens": 29, "n_pass": [343, 46, 34]}

Minimal simplified code:
EcoTopologyDefinition parseFromInputStream(InputStream inputStream,boolean envFilter){if(null){("");}loadTopologyFromYaml();}

