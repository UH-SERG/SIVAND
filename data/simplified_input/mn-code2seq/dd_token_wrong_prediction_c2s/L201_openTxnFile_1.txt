
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/cairo/TableWriter_openTxnFile.java
method_name = openTxnFile
method_body = private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ff, path, ff.getPageSize()); } throw CairoException.instance(ff.errno()).put("Cannot append. File does not exist: ").put(path); } finally { path.trimTo(rootLen); } }
predict, score, loss = writeReadWrite, 0.4243090748786926, 18.745508193969727

Trace of simplified code(s):
{"time": "2021-02-23 18:56:49.382884", "score": "0.4243", "loss": "18.7455", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ff, path, ff.getPageSize()); } throw CairoException.instance(ff.errno()).put(\"Cannot append. File does not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 120, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 18:56:51.788081", "score": "0.4658", "loss": "17.5091", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } throw CairoException.instance(ff.errno()).put(\"Cannot append. File does not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 113, "n_pass": [51, 2, 2]}
{"time": "2021-02-23 18:56:56.028710", "score": "0.4461", "loss": "17.6889", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append. File does not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 109, "n_pass": [99, 4, 3]}
{"time": "2021-02-23 18:56:59.815360", "score": "0.4227", "loss": "18.7602", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append. not exist: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 105, "n_pass": [103, 6, 4]}
{"time": "2021-02-23 18:57:01.702307", "score": "0.4397", "loss": "17.5186", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { path.trimTo(rootLen); } }", "n_tokens": 101, "n_pass": [104, 7, 5]}
{"time": "2021-02-23 18:57:03.616608", "score": "0.4299", "loss": "16.641", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(TableUtils.TXN_FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally {(rootLen); } }", "n_tokens": 97, "n_pass": [109, 8, 6]}
{"time": "2021-02-23 18:57:07.843161", "score": "0.4308", "loss": "18.5035", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally {(rootLen); } }", "n_tokens": 93, "n_pass": [120, 10, 7]}
{"time": "2021-02-23 18:57:15.372433", "score": "0.4231", "loss": "18.6489", "code": "private ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { } }", "n_tokens": 89, "n_pass": [136, 14, 8]}
{"time": "2021-02-23 18:57:24.588215", "score": "0.4231", "loss": "18.6489", "code": " ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { } }", "n_tokens": 88, "n_pass": [211, 18, 9]}
{"time": "2021-02-23 18:57:26.467656", "score": "0.4231", "loss": "18.6489", "code": "ReadWriteMemory openTxnFile() { try { if (ff.exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { } }", "n_tokens": 87, "n_pass": [212, 19, 10]}
{"time": "2021-02-23 18:57:29.260917", "score": "0.4538", "loss": "18.4929", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(FILE_NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { } }", "n_tokens": 85, "n_pass": [222, 20, 11]}
{"time": "2021-02-23 18:57:33.027154", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.: \").put(path); } finally { } }", "n_tokens": 83, "n_pass": [226, 22, 12]}
{"time": "2021-02-23 18:57:46.233009", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path); } finally { } }", "n_tokens": 81, "n_pass": [248, 29, 13]}
{"time": "2021-02-23 18:58:12.490716", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);} finally { } }", "n_tokens": 80, "n_pass": [375, 38, 14]}
{"time": "2021-02-23 18:58:14.410133", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally { } }", "n_tokens": 79, "n_pass": [376, 39, 15]}
{"time": "2021-02-23 18:58:16.285181", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{ } }", "n_tokens": 78, "n_pass": [378, 40, 16]}
{"time": "2021-02-23 18:58:18.170825", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{} }", "n_tokens": 77, "n_pass": [380, 41, 17]}
{"time": "2021-02-23 18:58:20.042509", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile() { try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 76, "n_pass": [382, 42, 18]}
{"time": "2021-02-23 18:58:23.210653", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){ try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 75, "n_pass": [389, 43, 19]}
{"time": "2021-02-23 18:58:25.104066", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try { if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 74, "n_pass": [391, 44, 20]}
{"time": "2021-02-23 18:58:27.013623", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{ if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 73, "n_pass": [393, 45, 21]}
{"time": "2021-02-23 18:58:28.873895", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if (exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 72, "n_pass": [395, 46, 22]}
{"time": "2021-02-23 18:58:30.756095", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())) { return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 71, "n_pass": [397, 47, 23]}
{"time": "2021-02-23 18:58:38.282521", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){ return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 70, "n_pass": [413, 51, 24]}
{"time": "2021-02-23 18:58:40.156612", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize()); } instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 69, "n_pass": [415, 52, 25]}
{"time": "2021-02-23 18:58:51.384876", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());} instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 68, "n_pass": [428, 58, 26]}
{"time": "2021-02-23 18:58:53.289089", "score": "0.4595", "loss": "19.3001", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}instance(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 67, "n_pass": [430, 59, 27]}
{"time": "2021-02-23 18:58:55.205448", "score": "0.4545", "loss": "18.9677", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}(ff.errno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 66, "n_pass": [431, 60, 28]}
{"time": "2021-02-23 18:58:57.092120", "score": "0.4241", "loss": "18.9385", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}(fferrno()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 65, "n_pass": [434, 61, 29]}
{"time": "2021-02-23 18:58:58.944054", "score": "0.4289", "loss": "18.9903", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}(ff()).put(\"Cannot append.\").put(path);}finally{}}", "n_tokens": 64, "n_pass": [435, 62, 30]}
{"time": "2021-02-23 18:59:06.481111", "score": "0.4289", "loss": "18.9903", "code": "ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}(ff()).put(\"Cannot append\").put(path);}finally{}}", "n_tokens": 63, "n_pass": [446, 66, 31]}

Minimal simplified code:
ReadWriteMemory openTxnFile(){try{if(exists(path.concat(NAME).$())){return new ReadWriteMemory(ffgetPageSize());}(ff()).put("Cannot append").put(path);}finally{}}

