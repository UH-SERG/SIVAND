
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/util/SettingsHelper_hasDuplicates.java
method_name = hasDuplicates
method_body = public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect(Collectors.toSet()).isEmpty(); }
predict, score, loss = hasAnyLetter, 0.35293158888816833, 13.417011260986328

Trace of simplified code(s):
{"time": "2021-02-24 02:54:30.175062", "score": "0.3529", "loss": "13.417", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect(Collectors.toSet()).isEmpty(); }", "n_tokens": 101, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:54:36.460902", "score": "0.403", "loss": "13.211", "code": "public static boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 94, "n_pass": [58, 4, 2]}
{"time": "2021-02-24 02:54:42.666940", "score": "0.403", "loss": "13.211", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades = schemaList.stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 91, "n_pass": [106, 7, 3]}
{"time": "2021-02-24 02:54:45.043462", "score": "0.4425", "loss": "13.2212", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { final List<String> letterGrades =stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 88, "n_pass": [115, 8, 4]}
{"time": "2021-02-24 02:54:57.445892", "score": "0.4425", "loss": "13.2212", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String> letterGrades =stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 87, "n_pass": [200, 12, 5]}
{"time": "2021-02-24 02:54:59.817433", "score": "0.4425", "loss": "13.2212", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream().map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 86, "n_pass": [205, 13, 6]}
{"time": "2021-02-24 02:55:02.653208", "score": "0.4319", "loss": "13.2663", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream.map(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 84, "n_pass": [208, 14, 7]}
{"time": "2021-02-24 02:55:04.527424", "score": "0.4548", "loss": "13.1267", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors.toList()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 82, "n_pass": [209, 15, 8]}
{"time": "2021-02-24 02:55:08.403119", "score": "0.479", "loss": "13.0665", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors()); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 80, "n_pass": [215, 17, 9]}
{"time": "2021-02-24 02:55:10.313073", "score": "0.4866", "loss": "13.1358", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); return !letterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 78, "n_pass": [216, 18, 10]}
{"time": "2021-02-24 02:55:12.682341", "score": "0.3159", "loss": "14.6344", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections.frequency(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 76, "n_pass": [219, 19, 11]}
{"time": "2021-02-24 02:55:16.514633", "score": "0.4106", "loss": "15.0165", "code": " boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 74, "n_pass": [227, 21, 12]}
{"time": "2021-02-24 02:55:22.243301", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(final List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 73, "n_pass": [238, 24, 13]}
{"time": "2021-02-24 02:55:25.089293", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates( List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 72, "n_pass": [243, 25, 14]}
{"time": "2021-02-24 02:55:26.976583", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry> schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 71, "n_pass": [244, 26, 15]}
{"time": "2021-02-24 02:55:28.882042", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList) { finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 70, "n_pass": [249, 27, 16]}
{"time": "2021-02-24 02:55:30.780065", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){ finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 69, "n_pass": [252, 28, 17]}
{"time": "2021-02-24 02:55:32.671499", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){finalList<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 68, "n_pass": [254, 29, 18]}
{"time": "2021-02-24 02:55:34.603957", "score": "0.4106", "loss": "15.0165", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors); returnletterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 67, "n_pass": [255, 30, 19]}
{"time": "2021-02-24 02:55:40.237267", "score": "0.5454", "loss": "15.0308", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors);letterGrades.stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 65, "n_pass": [268, 32, 20]}
{"time": "2021-02-24 02:55:42.154083", "score": "0.5088", "loss": "13.396", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors);stream().filter(i -> Collections(letterGrades, i) > 1).collect.isEmpty(); }", "n_tokens": 63, "n_pass": [269, 33, 21]}
{"time": "2021-02-24 02:55:45.976090", "score": "0.4949", "loss": "14.0316", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors);stream().filter(i -> Collections(letterGrades, i) > 1).isEmpty(); }", "n_tokens": 61, "n_pass": [282, 35, 22]}
{"time": "2021-02-24 02:55:58.232007", "score": "0.4949", "loss": "14.0316", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades =stream(GbGradingSchemaEntry::getGrade).collect(Collectors);stream().filter(i -> Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 60, "n_pass": [370, 38, 23]}
{"time": "2021-02-24 02:56:02.004212", "score": "0.4949", "loss": "14.0316", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=stream(GbGradingSchemaEntry::getGrade).collect(Collectors);stream().filter(i -> Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 59, "n_pass": [387, 39, 24]}
{"time": "2021-02-24 02:56:04.360319", "score": "0.5319", "loss": "13.5274", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect(Collectors);stream().filter(i -> Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 58, "n_pass": [389, 40, 25]}
{"time": "2021-02-24 02:56:06.310600", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i -> Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 57, "n_pass": [399, 41, 26]}
{"time": "2021-02-24 02:56:08.232181", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i-> Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 56, "n_pass": [409, 42, 27]}
{"time": "2021-02-24 02:56:13.904721", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i->Collections(letterGrades, i) > 1).isEmpty();}", "n_tokens": 55, "n_pass": [412, 45, 28]}
{"time": "2021-02-24 02:56:15.805590", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i->Collections(letterGrades,i) > 1).isEmpty();}", "n_tokens": 54, "n_pass": [417, 46, 29]}
{"time": "2021-02-24 02:56:17.704680", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i->Collections(letterGrades,i)> 1).isEmpty();}", "n_tokens": 53, "n_pass": [420, 47, 30]}
{"time": "2021-02-24 02:56:19.610747", "score": "0.5348", "loss": "13.5446", "code": "boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i->Collections(letterGrades,i)>1).isEmpty();}", "n_tokens": 52, "n_pass": [422, 48, 31]}

Minimal simplified code:
boolean hasDuplicates(List<GbGradingSchemaEntry>schemaList){List<String>letterGrades=(GbGradingSchemaEntry::getGrade).collect();stream().filter(i->Collections(letterGrades,i)>1).isEmpty();}

