
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/dataless-classifier/src/main/java/edu/illinois/cs/cogcomp/datalessclassification/hierarchy/UnorderedTree_isNeighbor.java
method_name = isNeighbor
method_body = @Override public boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }
predict, score, loss = contains, 0.9965693950653076, 14.41999626159668

Trace of simplified code(s):
{"time": "2021-02-24 05:31:43.056947", "score": "0.9966", "loss": "14.42", "code": "@Override public boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:31:44.944520", "score": "0.9911", "loss": "13.1519", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex(v1) || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 61, "n_pass": [44, 2, 2]}
{"time": "2021-02-24 05:31:46.852746", "score": "0.9848", "loss": "11.1721", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2)) return false; return getNeighbors(v1).contains(v2); }", "n_tokens": 57, "n_pass": [50, 3, 3]}
{"time": "2021-02-24 05:31:48.687260", "score": "0.8757", "loss": "7.7605", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2))  return getNeighbors(v1).contains(v2); }", "n_tokens": 53, "n_pass": [54, 4, 4]}
{"time": "2021-02-24 05:31:50.553566", "score": "0.87", "loss": "12.7278", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex || !containsVertex(v2)) (v1).contains(v2); }", "n_tokens": 49, "n_pass": [55, 5, 5]}
{"time": "2021-02-24 05:31:53.342038", "score": "0.8176", "loss": "12.3743", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex| !containsVertex(v2)) (v1).contains(v2); }", "n_tokens": 47, "n_pass": [110, 6, 6]}
{"time": "2021-02-24 05:31:55.225323", "score": "0.8121", "loss": "13.1726", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex| (v2)) (v1).contains(v2); }", "n_tokens": 45, "n_pass": [111, 7, 7]}
{"time": "2021-02-24 05:31:57.984260", "score": "0.8112", "loss": "12.7882", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex(v2)) (v1).contains(v2); }", "n_tokens": 43, "n_pass": [133, 8, 8]}
{"time": "2021-02-24 05:32:06.896717", "score": "0.5835", "loss": "11.8817", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex(2)) (v1).contains(v2); }", "n_tokens": 42, "n_pass": [198, 10, 9]}
{"time": "2021-02-24 05:32:08.731108", "score": "0.725", "loss": "12.4387", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex()) (v1).contains(v2); }", "n_tokens": 41, "n_pass": [199, 11, 10]}
{"time": "2021-02-24 05:32:10.583076", "score": "0.725", "loss": "12.4387", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex())(v1).contains(v2); }", "n_tokens": 40, "n_pass": [202, 12, 11]}
{"time": "2021-02-24 05:32:12.457707", "score": "0.504", "loss": "11.814", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex())(1).contains(v2); }", "n_tokens": 39, "n_pass": [204, 13, 12]}
{"time": "2021-02-24 05:32:16.144950", "score": "0.504", "loss": "11.814", "code": " boolean isNeighbor(V v1, V v2) { if (!containsVertex())(1).contains(v); }", "n_tokens": 38, "n_pass": [211, 15, 13]}
{"time": "2021-02-24 05:32:17.983585", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v1, V v2) { if (!containsVertex())(1).contains(v); }", "n_tokens": 37, "n_pass": [215, 16, 14]}
{"time": "2021-02-24 05:32:20.716717", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v, V v2) { if (!containsVertex())(1).contains(v); }", "n_tokens": 36, "n_pass": [223, 17, 15]}
{"time": "2021-02-24 05:32:22.580326", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v,V v2) { if (!containsVertex())(1).contains(v); }", "n_tokens": 35, "n_pass": [225, 18, 16]}
{"time": "2021-02-24 05:32:24.402341", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v,V v) { if (!containsVertex())(1).contains(v); }", "n_tokens": 34, "n_pass": [229, 19, 17]}
{"time": "2021-02-24 05:32:26.239428", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v,V v){ if (!containsVertex())(1).contains(v); }", "n_tokens": 33, "n_pass": [231, 20, 18]}
{"time": "2021-02-24 05:32:28.112771", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v,V v){if (!containsVertex())(1).contains(v); }", "n_tokens": 32, "n_pass": [233, 21, 19]}
{"time": "2021-02-24 05:32:29.966589", "score": "0.504", "loss": "11.814", "code": "boolean isNeighbor(V v,V v){if(!containsVertex())(1).contains(v); }", "n_tokens": 31, "n_pass": [235, 22, 20]}
{"time": "2021-02-24 05:32:31.829516", "score": "0.5663", "loss": "12.2972", "code": "boolean isNeighbor(V v,V v){if(containsVertex())(1).contains(v); }", "n_tokens": 30, "n_pass": [237, 23, 21]}
{"time": "2021-02-24 05:32:36.770143", "score": "0.5663", "loss": "12.2972", "code": "boolean isNeighbor(V v,V v){if(containsVertex())(1).contains(v);}", "n_tokens": 29, "n_pass": [269, 25, 22]}

Minimal simplified code:
boolean isNeighbor(V v,V v){if(containsVertex())(1).contains(v);}

