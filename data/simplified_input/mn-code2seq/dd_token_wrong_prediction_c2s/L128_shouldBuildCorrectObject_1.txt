
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jamesdbloom__mockserver/mockserver-core/src/test/java/org/mockserver/client/serialization/model/BinaryBodyDTOTest_shouldBuildCorrectObject.java
method_name = shouldBuildCorrectObject
method_body = @Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary("some_body"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue(), is(body)); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }
predict, score, loss = shouldReturnBinaryBody, 0.5320242643356323, 13.345968246459961

Trace of simplified code(s):
{"time": "2021-02-23 20:31:20.507597", "score": "0.532", "loss": "13.346", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue(), is(body)); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:31:24.859615", "score": "0.4959", "loss": "14.1468", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody.getValue()); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 90, "n_pass": [55, 3, 2]}
{"time": "2021-02-23 20:31:46.984780", "score": "0.5496", "loss": "14.5993", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody()); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 88, "n_pass": [192, 12, 3]}
{"time": "2021-02-23 20:31:48.916116", "score": "0.5126", "loss": "14.035", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody.getType(), is(Body.Type.BINARY)); }", "n_tokens": 86, "n_pass": [193, 13, 4]}
{"time": "2021-02-23 20:31:50.816796", "score": "0.5779", "loss": "13.7502", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody(), is(Body.Type.BINARY)); }", "n_tokens": 84, "n_pass": [197, 14, 5]}
{"time": "2021-02-23 20:31:52.756519", "score": "0.5472", "loss": "13.2429", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Body.Type.BINARY)); }", "n_tokens": 82, "n_pass": [198, 15, 6]}
{"time": "2021-02-23 20:31:56.488056", "score": "0.5317", "loss": "12.5575", "code": "@Test public void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 80, "n_pass": [201, 17, 7]}
{"time": "2021-02-23 20:32:00.330705", "score": "0.4352", "loss": "11.9561", "code": "@Testpublic void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 79, "n_pass": [208, 19, 8]}
{"time": "2021-02-23 20:32:02.229416", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject() { byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 78, "n_pass": [209, 20, 9]}
{"time": "2021-02-23 20:32:05.468386", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){ byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 77, "n_pass": [216, 21, 10]}
{"time": "2021-02-23 20:32:07.356807", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[] body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 76, "n_pass": [218, 22, 11]}
{"time": "2021-02-23 20:32:09.268341", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[]body = DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 75, "n_pass": [222, 23, 12]}
{"time": "2021-02-23 20:32:11.191999", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[]body= DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 74, "n_pass": [224, 24, 13]}
{"time": "2021-02-23 20:32:13.122699", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBase64Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 73, "n_pass": [226, 25, 14]}
{"time": "2021-02-23 20:32:17.029330", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBase4Binary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 72, "n_pass": [230, 27, 15]}
{"time": "2021-02-23 20:32:18.893334", "score": "0.5317", "loss": "12.5575", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"some_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 71, "n_pass": [231, 28, 16]}
{"time": "2021-02-23 20:32:22.721719", "score": "0.5288", "loss": "12.9712", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"_body\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 70, "n_pass": [235, 30, 17]}
{"time": "2021-02-23 20:32:24.639792", "score": "0.4157", "loss": "12.8007", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"\"); BinaryBody binaryBody = new BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 68, "n_pass": [236, 31, 18]}
{"time": "2021-02-23 20:32:30.431517", "score": "0.4594", "loss": "12.8728", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"\"); BinaryBody binaryBody = BinaryBodyDTO(new BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 66, "n_pass": [242, 34, 19]}
{"time": "2021-02-23 20:32:32.327810", "score": "0.4694", "loss": "12.9248", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"\"); BinaryBody binaryBody = BinaryBodyDTO(BinaryBody(body)).buildObject(); assertThat(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 64, "n_pass": [244, 35, 20]}
{"time": "2021-02-23 20:32:34.234198", "score": "0.5042", "loss": "14.2417", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.parseBaseBinary(\"\"); BinaryBody binaryBody = BinaryBodyDTO(BinaryBody(body)).buildObject();(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 62, "n_pass": [250, 36, 21]}
{"time": "2021-02-23 20:32:43.165745", "score": "0.5372", "loss": "13.3094", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); BinaryBody binaryBody = BinaryBodyDTO(BinaryBody(body)).buildObject();(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 61, "n_pass": [277, 40, 22]}
{"time": "2021-02-23 20:32:45.041139", "score": "0.5056", "loss": "14.0762", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); binaryBody = BinaryBodyDTO(BinaryBody(body)).buildObject();(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 59, "n_pass": [283, 41, 23]}
{"time": "2021-02-23 20:32:58.207812", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); binaryBody = BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody); assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 58, "n_pass": [363, 45, 24]}
{"time": "2021-02-23 20:33:00.586467", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); binaryBody = BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody, is(Type.BINARY)); }", "n_tokens": 57, "n_pass": [374, 46, 25]}
{"time": "2021-02-23 20:33:02.468703", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); binaryBody = BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY)); }", "n_tokens": 56, "n_pass": [379, 47, 26]}
{"time": "2021-02-23 20:33:08.149512", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\"); binaryBody = BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}", "n_tokens": 55, "n_pass": [388, 50, 27]}
{"time": "2021-02-23 20:33:13.326250", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\");binaryBody = BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}", "n_tokens": 54, "n_pass": [412, 52, 28]}
{"time": "2021-02-23 20:33:15.243562", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\");binaryBody= BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}", "n_tokens": 53, "n_pass": [414, 53, 29]}
{"time": "2021-02-23 20:33:17.165705", "score": "0.4835", "loss": "14.0209", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\");binaryBody=BinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}", "n_tokens": 52, "n_pass": [416, 54, 30]}
{"time": "2021-02-23 20:33:30.529039", "score": "0.4598", "loss": "14.8109", "code": "@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary(\"\");binaryBodyBinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}", "n_tokens": 51, "n_pass": [468, 60, 31]}

Minimal simplified code:
@Test void shouldBuildCorrectObject(){byte[]body=DatatypeConverter.Binary("");binaryBodyBinaryBodyDTO(BinaryBody()).buildObject();(binaryBody);assertThat(binaryBody,is(Type.BINARY));}

