
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/log/SnapshotterImpl_asStream.java
method_name = asStream
method_body = @Timed("snapshot_apply") @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info("Restoring snapshot."); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }
predict, score, loss = snapshot, 0.944758951663971, 17.788061141967773

Trace of simplified code(s):
{"time": "2021-02-24 01:45:17.847875", "score": "0.9448", "loss": "17.7881", "code": "@Timed(\"snapshot_apply\") @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\"); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 73, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:45:19.762728", "score": "0.8408", "loss": "13.8957", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\"); return snapshotFields.stream().flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 64, "n_pass": [20, 2, 2]}
{"time": "2021-02-24 01:45:21.626704", "score": "0.5091", "loss": "14.2712", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field -> field.streamFrom(snapshot)); }", "n_tokens": 55, "n_pass": [24, 3, 3]}
{"time": "2021-02-24 01:45:23.487591", "score": "0.635", "loss": "15.3308", "code": " @Override public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 50, "n_pass": [44, 4, 4]}
{"time": "2021-02-24 01:45:25.325107", "score": "0.6207", "loss": "14.5178", "code": "public Stream<Op> asStream(Snapshot snapshot) { requireNonNull(snapshot); LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 46, "n_pass": [47, 5, 5]}
{"time": "2021-02-24 01:45:27.171995", "score": "0.79", "loss": "14.9977", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG.info(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 41, "n_pass": [52, 6, 6]}
{"time": "2021-02-24 01:45:29.122526", "score": "0.6031", "loss": "13.6824", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG(\"Restoring snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 39, "n_pass": [81, 7, 7]}
{"time": "2021-02-24 01:45:31.004728", "score": "0.6122", "loss": "12.8692", "code": "public Stream<Op> asStream(Snapshot snapshot) {  LOG(\"snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 37, "n_pass": [83, 8, 8]}
{"time": "2021-02-24 01:45:34.697820", "score": "0.6122", "loss": "12.8692", "code": "Stream<Op> asStream(Snapshot snapshot) {  LOG(\"snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 35, "n_pass": [90, 10, 9]}
{"time": "2021-02-24 01:45:36.572449", "score": "0.2751", "loss": "11.8108", "code": "Stream<Op> asStream(Snapshot snapshot) { (\"snapshot.\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 33, "n_pass": [98, 11, 10]}
{"time": "2021-02-24 01:45:41.916743", "score": "0.2572", "loss": "12.1232", "code": "Stream<Op> asStream(Snapshot snapshot) { (\".\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 32, "n_pass": [143, 13, 11]}
{"time": "2021-02-24 01:45:46.011456", "score": "0.2572", "loss": "12.1232", "code": "Stream<Op>asStream(Snapshot snapshot) { (\".\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 31, "n_pass": [158, 15, 12]}
{"time": "2021-02-24 01:45:47.893553", "score": "0.2572", "loss": "12.1232", "code": "Stream<Op>asStream(Snapshot snapshot){ (\".\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 30, "n_pass": [165, 16, 13]}
{"time": "2021-02-24 01:45:49.698202", "score": "0.2572", "loss": "12.1232", "code": "Stream<Op>asStream(Snapshot snapshot){(\".\").flatMap(field.streamFrom(snapshot)); }", "n_tokens": 29, "n_pass": [167, 17, 14]}
{"time": "2021-02-24 01:45:56.518124", "score": "0.297", "loss": "13.7995", "code": "Stream<Op>asStream(Snapshot snapshot){(\".\").flatMap(fieldstreamFrom(snapshot)); }", "n_tokens": 28, "n_pass": [203, 20, 15]}
{"time": "2021-02-24 01:46:00.144789", "score": "0.1828", "loss": "13.6172", "code": "Stream<Op>asStream(Snapshot snapshot){(\".\").flatMap(fieldstreamFrom()); }", "n_tokens": 27, "n_pass": [206, 22, 16]}
{"time": "2021-02-24 01:46:01.984465", "score": "0.1828", "loss": "13.6172", "code": "Stream<Op>asStream(Snapshot snapshot){(\".\").flatMap(fieldstreamFrom());}", "n_tokens": 26, "n_pass": [210, 23, 17]}

Minimal simplified code:
Stream<Op>asStream(Snapshot snapshot){(".").flatMap(fieldstreamFrom());}

