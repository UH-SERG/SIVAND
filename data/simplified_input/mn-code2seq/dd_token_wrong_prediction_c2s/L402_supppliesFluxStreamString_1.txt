
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-compiler/src/test/java/org/springframework/cloud/function/compiler/SupplierCompilerTests_supppliesFluxStreamString.java
method_name = supppliesFluxStreamString
method_body = @Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile("foos", "() -> Flux.interval(Duration.ofMillis(1000)).map(Object::toString)", "Flux<String>"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo("0"); }
predict, score, loss = testCompile, 0.33797675371170044, 23.220870971679688

Trace of simplified code(s):
{"time": "2021-02-23 22:54:51.516393", "score": "0.338", "loss": "23.2209", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos\", \"() -> Flux.interval(Duration.ofMillis(1000)).map(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 140, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 22:54:58.742661", "score": "0.3361", "loss": "23.5606", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos\", \"() -(1000)).map(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 131, "n_pass": [51, 4, 2]}
{"time": "2021-02-23 22:55:00.630449", "score": "0.2991", "loss": "23.2798", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"foos\", \"() -(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 122, "n_pass": [52, 5, 3]}
{"time": "2021-02-23 22:55:03.646896", "score": "0.3191", "loss": "22.4026", "code": "@Test public void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 113, "n_pass": [66, 6, 4]}
{"time": "2021-02-23 22:55:14.218465", "score": "0.5966", "loss": "24.382", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<Flux<String>>(String.class.getName()).compile(\"(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 109, "n_pass": [120, 11, 5]}
{"time": "2021-02-23 22:55:19.444342", "score": "0.6278", "loss": "25.3079", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object::toString)\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 105, "n_pass": [127, 13, 6]}
{"time": "2021-02-23 22:55:21.367309", "score": "0.5814", "loss": "25.2329", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"Flux<String>\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 101, "n_pass": [132, 14, 7]}
{"time": "2021-02-23 22:55:25.178682", "score": "0.5565", "loss": "25.4965", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(compiled.getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 97, "n_pass": [134, 16, 8]}
{"time": "2021-02-23 22:55:34.660120", "score": "0.5882", "loss": "26.2506", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.getResult().get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 95, "n_pass": [206, 20, 9]}
{"time": "2021-02-23 22:55:36.600774", "score": "0.5505", "loss": "26.1401", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.getResultget().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 92, "n_pass": [214, 21, 10]}
{"time": "2021-02-23 22:55:58.259666", "score": "0.5558", "loss": "26.1802", "code": " void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 91, "n_pass": [342, 28, 11]}
{"time": "2021-02-23 22:56:00.180087", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString() { CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 90, "n_pass": [353, 29, 12]}
{"time": "2021-02-23 22:56:03.032795", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){ CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 89, "n_pass": [359, 30, 13]}
{"time": "2021-02-23 22:56:04.918732", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>> compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 88, "n_pass": [361, 31, 14]}
{"time": "2021-02-23 22:56:10.448785", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled = new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 87, "n_pass": [372, 32, 15]}
{"time": "2021-02-23 22:56:12.384962", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled= new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 86, "n_pass": [374, 33, 16]}
{"time": "2021-02-23 22:56:14.305526", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"(Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 85, "n_pass": [376, 34, 17]}
{"time": "2021-02-23 22:56:20.087347", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\", \"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 84, "n_pass": [395, 37, 18]}
{"time": "2021-02-23 22:56:23.855285", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\",\"\"); assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 83, "n_pass": [399, 39, 19]}
{"time": "2021-02-23 22:56:25.752310", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\",\"\");assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue(); assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 82, "n_pass": [404, 40, 20]}
{"time": "2021-02-23 22:56:31.454798", "score": "0.5558", "loss": "26.1802", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\",\"\");assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"0\"); }", "n_tokens": 81, "n_pass": [421, 43, 21]}
{"time": "2021-02-23 22:56:52.581238", "score": "0.5501", "loss": "26.0027", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\",\"\");assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"\"); }", "n_tokens": 80, "n_pass": [521, 51, 22]}
{"time": "2021-02-23 22:56:54.483207", "score": "0.5501", "loss": "26.0027", "code": "void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile(\"Object\",\"\");assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo(\"\");}", "n_tokens": 79, "n_pass": [524, 52, 23]}

Minimal simplified code:
void supppliesFluxStreamString(){CompiledFunctionFactory<Supplier<Flux<String>>>compiled=new SupplierCompiler<>(String.class.getName()).compile("Object","");assertThat(FunctionFactoryUtils.isFluxSupplier(getFactoryMethod())).isTrue();assertThat(compiled.get().blockFirst()).isEqualTo("");}

