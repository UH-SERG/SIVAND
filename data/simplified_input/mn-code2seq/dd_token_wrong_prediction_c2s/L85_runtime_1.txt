
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-compiler/src/main/java/org/springframework/cloud/function/compiler/java/DependencyResolver_runtime.java
method_name = runtime
method_body = private List<Dependency> runtime(List<Dependency> dependencies) { List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!"test".equals(dependency.getScope()) && !"provided".equals(dependency.getScope())) { list.add(dependency); } } return list; }
predict, score, loss = getDependencies, 0.42126521468162537, 14.635550498962402

Trace of simplified code(s):
{"time": "2021-02-24 11:05:07.461717", "score": "0.4213", "loss": "14.6355", "code": "private List<Dependency> runtime(List<Dependency> dependencies) { List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 106, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 11:05:12.357913", "score": "0.4766", "loss": "14.8803", "code": "private List runtime(List<Dependency> dependencies) { List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 103, "n_pass": [93, 3, 2]}
{"time": "2021-02-24 11:05:20.169523", "score": "0.4766", "loss": "14.8803", "code": "private List runtime(List<Dependency>dependencies) { List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 102, "n_pass": [194, 4, 3]}
{"time": "2021-02-24 11:05:22.116291", "score": "0.4766", "loss": "14.8803", "code": "private List runtime(List<Dependency>dependencies){ List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 101, "n_pass": [197, 5, 4]}
{"time": "2021-02-24 11:05:24.020715", "score": "0.4766", "loss": "14.8803", "code": "private List runtime(List<Dependency>dependencies){List<Dependency> list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 100, "n_pass": [199, 6, 5]}
{"time": "2021-02-24 11:05:26.417390", "score": "0.4766", "loss": "14.8803", "code": "private List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency.getScope()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 99, "n_pass": [204, 7, 6]}
{"time": "2021-02-24 11:05:28.845321", "score": "0.4544", "loss": "14.8047", "code": "private List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency()) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 97, "n_pass": [224, 8, 7]}
{"time": "2021-02-24 11:05:30.768120", "score": "0.4421", "loss": "14.9819", "code": "private List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(dependency.getScope())) { list.add(dependency); } } return list; }", "n_tokens": 95, "n_pass": [225, 9, 8]}
{"time": "2021-02-24 11:05:34.570098", "score": "0.4786", "loss": "14.9018", "code": "private List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } return list; }", "n_tokens": 93, "n_pass": [232, 11, 9]}
{"time": "2021-02-24 11:05:38.418964", "score": "0.5031", "loss": "14.8856", "code": "private List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 91, "n_pass": [243, 13, 10]}
{"time": "2021-02-24 11:05:42.260709", "score": "0.5031", "loss": "14.8856", "code": " List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 90, "n_pass": [246, 15, 11]}
{"time": "2021-02-24 11:05:44.183766", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list = new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 89, "n_pass": [247, 16, 12]}
{"time": "2021-02-24 11:06:04.093461", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list= new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 88, "n_pass": [375, 20, 13]}
{"time": "2021-02-24 11:06:05.994226", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>(); for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 87, "n_pass": [377, 21, 14]}
{"time": "2021-02-24 11:06:07.949946", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for (Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 86, "n_pass": [386, 22, 15]}
{"time": "2021-02-24 11:06:09.872498", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency : dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 85, "n_pass": [388, 23, 16]}
{"time": "2021-02-24 11:06:11.756652", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency: dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 84, "n_pass": [393, 24, 17]}
{"time": "2021-02-24 11:06:13.679572", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies) { if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 83, "n_pass": [395, 25, 18]}
{"time": "2021-02-24 11:06:15.583305", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){ if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 82, "n_pass": [398, 26, 19]}
{"time": "2021-02-24 11:06:17.486480", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if (!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 81, "n_pass": [400, 27, 20]}
{"time": "2021-02-24 11:06:19.421628", "score": "0.5031", "loss": "14.8856", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(!\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 80, "n_pass": [402, 28, 21]}
{"time": "2021-02-24 11:06:21.325876", "score": "0.5187", "loss": "14.9652", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"test\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 79, "n_pass": [404, 29, 22]}
{"time": "2021-02-24 11:06:23.184758", "score": "0.5042", "loss": "15.2501", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals(dependency) && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 78, "n_pass": [406, 30, 23]}
{"time": "2021-02-24 11:06:25.088233", "score": "0.4891", "loss": "15.0435", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals() && !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 77, "n_pass": [411, 31, 24]}
{"time": "2021-02-24 11:06:26.999221", "score": "0.4891", "loss": "15.0435", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&& !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 76, "n_pass": [413, 32, 25]}
{"time": "2021-02-24 11:06:28.889484", "score": "0.4808", "loss": "14.5317", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()& !\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 75, "n_pass": [414, 33, 26]}
{"time": "2021-02-24 11:06:30.798796", "score": "0.4808", "loss": "14.5317", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"provided\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 74, "n_pass": [416, 34, 27]}
{"time": "2021-02-24 11:06:34.554163", "score": "0.4618", "loss": "14.5166", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())) { list.add(dependency); } } list; }", "n_tokens": 73, "n_pass": [419, 36, 28]}
{"time": "2021-02-24 11:06:36.489568", "score": "0.4618", "loss": "14.5166", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){ list.add(dependency); } } list; }", "n_tokens": 72, "n_pass": [429, 37, 29]}
{"time": "2021-02-24 11:06:38.399166", "score": "0.4618", "loss": "14.5166", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){list.add(dependency); } } list; }", "n_tokens": 71, "n_pass": [431, 38, 30]}
{"time": "2021-02-24 11:06:40.335869", "score": "0.3895", "loss": "12.1328", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){listadd(dependency); } } list; }", "n_tokens": 70, "n_pass": [433, 39, 31]}
{"time": "2021-02-24 11:06:46.044783", "score": "0.3895", "loss": "12.1328", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){listadd(dependency);} } list; }", "n_tokens": 69, "n_pass": [439, 42, 32]}
{"time": "2021-02-24 11:06:47.954348", "score": "0.3895", "loss": "12.1328", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){listadd(dependency);}} list; }", "n_tokens": 68, "n_pass": [441, 43, 33]}
{"time": "2021-02-24 11:06:49.883413", "score": "0.3895", "loss": "12.1328", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){listadd(dependency);}}list; }", "n_tokens": 67, "n_pass": [443, 44, 34]}
{"time": "2021-02-24 11:06:53.671049", "score": "0.3895", "loss": "12.1328", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&!\"\".equals(getScope())){listadd(dependency);}}list;}", "n_tokens": 66, "n_pass": [446, 46, 35]}
{"time": "2021-02-24 11:06:58.375752", "score": "0.4526", "loss": "12.3969", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&\"\".equals(getScope())){listadd(dependency);}}list;}", "n_tokens": 65, "n_pass": [491, 47, 36]}
{"time": "2021-02-24 11:07:00.280073", "score": "0.3217", "loss": "13.8994", "code": "List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if(\"\".equals()&\"\".equals(getScope())){add(dependency);}}list;}", "n_tokens": 64, "n_pass": [503, 48, 37]}

Minimal simplified code:
List runtime(List<Dependency>dependencies){List<Dependency>list=new ArrayList<>();for(Dependency dependency:dependencies){if("".equals()&"".equals(getScope())){add(dependency);}}list;}

