
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/coreos__jetcd/jetcd-core/src/main/java/com/coreos/jetcd/lease/LeaseTimeToLiveResponse_getKeys.java
method_name = getKeys
method_body = public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys = getResponse().getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }
predict, score, loss = getKeysKeys, 0.962601900100708, 0.12840193510055542

Trace of simplified code(s):
{"time": "2021-02-24 01:42:56.454397", "score": "0.9626", "loss": "0.1284", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys = getResponse().getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }", "n_tokens": 81, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:42:59.326496", "score": "0.9434", "loss": "0.204", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes(byteStrings.toByteArray())).collect(Collectors.toList()); } return keys; }", "n_tokens": 76, "n_pass": [50, 2, 2]}
{"time": "2021-02-24 01:43:01.242821", "score": "0.9261", "loss": "0.2761", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes()).collect(Collectors.toList()); } return keys; }", "n_tokens": 71, "n_pass": [54, 3, 3]}
{"time": "2021-02-24 01:43:03.095633", "score": "0.9332", "loss": "0.2411", "code": "public synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes()).collect(); } return keys; }", "n_tokens": 66, "n_pass": [56, 4, 4]}
{"time": "2021-02-24 01:43:07.770742", "score": "0.9332", "loss": "0.2411", "code": "synchronized List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes()).collect(); } return keys; }", "n_tokens": 64, "n_pass": [100, 6, 5]}
{"time": "2021-02-24 01:43:09.607454", "score": "0.9332", "loss": "0.2411", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().stream().map(byteStrings -> ByteSequence.fromBytes()).collect(); } return keys; }", "n_tokens": 62, "n_pass": [101, 7, 6]}
{"time": "2021-02-24 01:43:11.503944", "score": "0.9443", "loss": "0.1905", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings -> ByteSequence.fromBytes()).collect(); } return keys; }", "n_tokens": 59, "n_pass": [116, 8, 7]}
{"time": "2021-02-24 01:43:13.347541", "score": "0.9343", "loss": "0.2226", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings ->fromBytes()).collect(); } return keys; }", "n_tokens": 56, "n_pass": [119, 9, 8]}
{"time": "2021-02-24 01:43:17.041900", "score": "0.9203", "loss": "0.2742", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStringsfromBytes()).collect(); } return keys; }", "n_tokens": 53, "n_pass": [141, 11, 9]}
{"time": "2021-02-24 01:43:18.900638", "score": "0.9399", "loss": "0.2052", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings).collect(); } return keys; }", "n_tokens": 50, "n_pass": [142, 12, 10]}
{"time": "2021-02-24 01:43:26.937811", "score": "0.918", "loss": "0.3026", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings).collect; } return keys; }", "n_tokens": 48, "n_pass": [207, 14, 11]}
{"time": "2021-02-24 01:43:28.828577", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence> getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 46, "n_pass": [210, 15, 12]}
{"time": "2021-02-24 01:43:32.878105", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence>getKeys() { if (keys == null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 45, "n_pass": [217, 17, 13]}
{"time": "2021-02-24 01:43:34.703613", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence>getKeys(){ if (keys == null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 44, "n_pass": [221, 18, 14]}
{"time": "2021-02-24 01:43:36.587064", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence>getKeys(){if (keys == null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 43, "n_pass": [223, 19, 15]}
{"time": "2021-02-24 01:43:38.389231", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence>getKeys(){if(keys == null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 42, "n_pass": [225, 20, 16]}
{"time": "2021-02-24 01:43:40.229984", "score": "0.8371", "loss": "0.667", "code": "List<ByteSequence>getKeys(){if(keys== null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 41, "n_pass": [228, 21, 17]}
{"time": "2021-02-24 01:43:42.065156", "score": "0.788", "loss": "0.9298", "code": "List<ByteSequence>getKeys(){if(keys= null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 40, "n_pass": [229, 22, 18]}
{"time": "2021-02-24 01:43:43.891666", "score": "0.788", "loss": "0.9298", "code": "List<ByteSequence>getKeys(){if(keys=null) { keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 39, "n_pass": [231, 23, 19]}
{"time": "2021-02-24 01:43:45.769134", "score": "0.788", "loss": "0.9298", "code": "List<ByteSequence>getKeys(){if(keys=null){ keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 38, "n_pass": [234, 24, 20]}
{"time": "2021-02-24 01:43:47.660461", "score": "0.788", "loss": "0.9298", "code": "List<ByteSequence>getKeys(){if(keys=null){keys .getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 37, "n_pass": [236, 25, 21]}
{"time": "2021-02-24 01:43:49.475542", "score": "0.788", "loss": "0.9298", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().streammap(byteStrings).collect; } keys; }", "n_tokens": 36, "n_pass": [238, 26, 22]}
{"time": "2021-02-24 01:43:53.170506", "score": "0.7877", "loss": "0.9355", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().streammap(byteStrings); } keys; }", "n_tokens": 34, "n_pass": [246, 28, 23]}
{"time": "2021-02-24 01:44:03.102099", "score": "0.7877", "loss": "0.9355", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().streammap(byteStrings); }keys; }", "n_tokens": 33, "n_pass": [289, 32, 24]}
{"time": "2021-02-24 01:44:06.821297", "score": "0.7877", "loss": "0.9355", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().streammap(byteStrings); }keys;}", "n_tokens": 32, "n_pass": [292, 34, 25]}
{"time": "2021-02-24 01:44:12.813085", "score": "0.7989", "loss": "0.8744", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().map(byteStrings); }keys;}", "n_tokens": 31, "n_pass": [315, 37, 26]}
{"time": "2021-02-24 01:44:14.659398", "score": "0.7909", "loss": "0.8851", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().map(); }keys;}", "n_tokens": 30, "n_pass": [318, 38, 27]}
{"time": "2021-02-24 01:44:16.515663", "score": "0.7909", "loss": "0.8851", "code": "List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().map();}keys;}", "n_tokens": 29, "n_pass": [321, 39, 28]}

Minimal simplified code:
List<ByteSequence>getKeys(){if(keys=null){keys.getKeysList().map();}keys;}

