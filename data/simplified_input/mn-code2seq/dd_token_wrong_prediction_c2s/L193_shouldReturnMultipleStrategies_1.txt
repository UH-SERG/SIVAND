
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/cts/utils/blob/TokenStrategyFactoryTest_shouldReturnMultipleStrategies.java
method_name = shouldReturnMultipleStrategies
method_body = @Test public void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }
predict, score, loss = shouldReturnTrueWhenIs, 0.5091614127159119, 23.18939781188965

Trace of simplified code(s):
{"time": "2021-02-24 04:17:03.683055", "score": "0.5092", "loss": "23.1894", "code": "@Test public void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfig.class); given(config.isTokenEncrypted()).willReturn(true); given(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 89, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 04:17:05.616843", "score": "0.5414", "loss": "22.3245", "code": "@Test public void shouldReturnMultipleStrategies() { CoreTokenConfig config = mock(CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 67, "n_pass": [9, 2, 2]}
{"time": "2021-02-24 04:17:14.097212", "score": "0.4899", "loss": "22.7957", "code": "@Test public void shouldReturnMultipleStrategies() { CoreTokenConfig (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies = factory.getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 62, "n_pass": [47, 6, 3]}
{"time": "2021-02-24 04:17:25.362029", "score": "0.5086", "loss": "22.5778", "code": "@Test public void shouldReturnMultipleStrategies() { CoreTokenConfig (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 59, "n_pass": [89, 11, 4]}
{"time": "2021-02-24 04:17:29.162635", "score": "0.5086", "loss": "22.5778", "code": "@Test void shouldReturnMultipleStrategies() { CoreTokenConfig (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 57, "n_pass": [97, 13, 5]}
{"time": "2021-02-24 04:17:40.115073", "score": "0.5086", "loss": "22.5778", "code": "@Test void shouldReturnMultipleStrategies(){ CoreTokenConfig (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 56, "n_pass": [164, 16, 6]}
{"time": "2021-02-24 04:17:41.972912", "score": "0.5086", "loss": "22.5778", "code": "@Test void shouldReturnMultipleStrategies(){CoreTokenConfig (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 55, "n_pass": [166, 17, 7]}
{"time": "2021-02-24 04:17:43.834398", "score": "0.4317", "loss": "21.6391", "code": "@Test void shouldReturnMultipleStrategies(){ (CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 54, "n_pass": [167, 18, 8]}
{"time": "2021-02-24 04:17:45.718984", "score": "0.4317", "loss": "21.6391", "code": "@Test void shouldReturnMultipleStrategies(){(CoreTokenConfigconfig.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 53, "n_pass": [168, 19, 9]}
{"time": "2021-02-24 04:17:47.615958", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true); Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 52, "n_pass": [170, 20, 10]}
{"time": "2021-02-24 04:18:03.475457", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy> strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 51, "n_pass": [244, 25, 11]}
{"time": "2021-02-24 04:18:05.773795", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies =getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 50, "n_pass": [248, 26, 12]}
{"time": "2021-02-24 04:18:07.653658", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config); assertThat(strategies).contains(compression, encryption); }", "n_tokens": 49, "n_pass": [250, 27, 13]}
{"time": "2021-02-24 04:18:13.756649", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config);assertThat(strategies).contains(compression, encryption); }", "n_tokens": 48, "n_pass": [257, 30, 14]}
{"time": "2021-02-24 04:18:19.389455", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config);assertThat(strategies).contains(compression,encryption); }", "n_tokens": 47, "n_pass": [267, 33, 15]}
{"time": "2021-02-24 04:18:21.260765", "score": "0.4189", "loss": "20.8644", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config);assertThat(strategies).contains(compression,encryption);}", "n_tokens": 46, "n_pass": [271, 34, 16]}
{"time": "2021-02-24 04:18:37.568304", "score": "0.4421", "loss": "20.2796", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config);assertThat(strategies).contains(compressionencryption);}", "n_tokens": 45, "n_pass": [314, 41, 17]}
{"time": "2021-02-24 04:18:39.427405", "score": "0.4355", "loss": "21.8974", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies(config);assertThat(strategies).contains(compression);}", "n_tokens": 44, "n_pass": [315, 42, 18]}
{"time": "2021-02-24 04:18:50.226697", "score": "0.4239", "loss": "22.2036", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies();assertThat(strategies).contains(compression);}", "n_tokens": 43, "n_pass": [349, 46, 19]}
{"time": "2021-02-24 04:18:54.016481", "score": "0.3974", "loss": "24.1127", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies();assertThat().contains(compression);}", "n_tokens": 42, "n_pass": [354, 48, 20]}
{"time": "2021-02-24 04:18:55.883881", "score": "0.518", "loss": "24.2451", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn(true);Collection<BlobStrategy>strategies=getStrategies();assertThat().contains();}", "n_tokens": 41, "n_pass": [359, 49, 21]}
{"time": "2021-02-24 04:19:00.972334", "score": "0.4517", "loss": "23.9416", "code": "@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn();Collection<BlobStrategy>strategies=getStrategies();assertThat().contains();}", "n_tokens": 40, "n_pass": [382, 51, 22]}

Minimal simplified code:
@Test void shouldReturnMultipleStrategies(){(config.isTokenCompressed()).willReturn();Collection<BlobStrategy>strategies=getStrategies();assertThat().contains();}

