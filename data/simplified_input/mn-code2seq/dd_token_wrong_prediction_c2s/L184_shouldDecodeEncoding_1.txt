
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/cts/utils/blob/TokenBlobUtilsTest_shouldDecodeEncoding.java
method_name = shouldDecodeEncoding
method_body = @Test public void shouldDecodeEncoding() throws CoreTokenException { String key = "badger"; Token token = new Token("id", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); assertThat(key).isEqualTo(result); }
predict, score, loss = testGetBlobAsString, 0.7410904169082642, 25.612957000732422

Trace of simplified code(s):
{"time": "2021-02-24 08:36:38.838092", "score": "0.7411", "loss": "25.613", "code": "@Test public void shouldDecodeEncoding() throws CoreTokenException { String key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); assertThat(key).isEqualTo(result); }", "n_tokens": 86, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 08:36:44.578847", "score": "0.82", "loss": "30.7582", "code": "void shouldDecodeEncoding() throws CoreTokenException { String key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); assertThat(key).isEqualTo(result); }", "n_tokens": 81, "n_pass": [44, 4, 2]}
{"time": "2021-02-24 08:36:46.467967", "score": "0.8023", "loss": "30.3038", "code": "void shouldDecodeEncoding(){ String key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); assertThat(key).isEqualTo(result); }", "n_tokens": 76, "n_pass": [45, 5, 3]}
{"time": "2021-02-24 08:36:50.245722", "score": "0.7442", "loss": "30.64", "code": "void shouldDecodeEncoding(){ String key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); (result); }", "n_tokens": 70, "n_pass": [57, 7, 4]}
{"time": "2021-02-24 08:36:52.639177", "score": "0.7108", "loss": "29.6999", "code": "void shouldDecodeEncoding(){ String key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); ; }", "n_tokens": 67, "n_pass": [97, 8, 5]}
{"time": "2021-02-24 08:36:55.057561", "score": "0.7598", "loss": "30.2909", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token token = new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); ; }", "n_tokens": 65, "n_pass": [101, 9, 6]}
{"time": "2021-02-24 08:36:56.960462", "score": "0.7238", "loss": "30.0859", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token= new Token(\"id\", TokenType.SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); ; }", "n_tokens": 62, "n_pass": [107, 10, 7]}
{"time": "2021-02-24 08:36:58.866316", "score": "0.7306", "loss": "28.995", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(token, key); String result = utils.getBlobAsString(token); ; }", "n_tokens": 59, "n_pass": [111, 11, 8]}
{"time": "2021-02-24 08:37:02.654997", "score": "0.7169", "loss": "29.3142", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result = utils.getBlobAsString(token); ; }", "n_tokens": 56, "n_pass": [115, 13, 9]}
{"time": "2021-02-24 08:37:06.417586", "score": "0.7382", "loss": "29.6524", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); ; }", "n_tokens": 53, "n_pass": [119, 15, 10]}
{"time": "2021-02-24 08:37:19.517102", "score": "0.7382", "loss": "29.6524", "code": "void shouldDecodeEncoding(){ key = \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 51, "n_pass": [184, 19, 11]}
{"time": "2021-02-24 08:37:22.308280", "score": "0.7382", "loss": "29.6524", "code": "void shouldDecodeEncoding(){key = \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 50, "n_pass": [192, 20, 12]}
{"time": "2021-02-24 08:37:24.172644", "score": "0.7382", "loss": "29.6524", "code": "void shouldDecodeEncoding(){key= \"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 49, "n_pass": [194, 21, 13]}
{"time": "2021-02-24 08:37:26.045480", "score": "0.7382", "loss": "29.6524", "code": "void shouldDecodeEncoding(){key=\"badger\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 48, "n_pass": [196, 22, 14]}
{"time": "2021-02-24 08:37:27.959246", "score": "0.7343", "loss": "29.6261", "code": "void shouldDecodeEncoding(){key=\"\"; Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 47, "n_pass": [198, 23, 15]}
{"time": "2021-02-24 08:37:29.859784", "score": "0.7343", "loss": "29.6261", "code": "void shouldDecodeEncoding(){key=\"\";Token= new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 46, "n_pass": [201, 24, 16]}
{"time": "2021-02-24 08:37:31.774729", "score": "0.7343", "loss": "29.6261", "code": "void shouldDecodeEncoding(){key=\"\";Token=new Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 45, "n_pass": [204, 25, 17]}
{"time": "2021-02-24 08:37:33.687933", "score": "0.6856", "loss": "28.2224", "code": "void shouldDecodeEncoding(){key=\"\";Token= Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 44, "n_pass": [205, 26, 18]}
{"time": "2021-02-24 08:37:35.568229", "score": "0.6856", "loss": "28.2224", "code": "void shouldDecodeEncoding(){key=\"\";Token=Token(\"id\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 43, "n_pass": [206, 27, 19]}
{"time": "2021-02-24 08:37:39.333979", "score": "0.6878", "loss": "28.1088", "code": "void shouldDecodeEncoding(){key=\"\";Token=Token(\"\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 42, "n_pass": [210, 29, 20]}
{"time": "2021-02-24 08:37:47.738051", "score": "0.7223", "loss": "28.7339", "code": "void shouldDecodeEncoding(){key=\"\";TokenToken(\"\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 41, "n_pass": [237, 33, 21]}
{"time": "2021-02-24 08:37:49.652839", "score": "0.7139", "loss": "28.8749", "code": "void shouldDecodeEncoding(){key=\"\";Token(\"\".SESSION); utils.setBlobFromString(key); String result =getBlobAsString(token); }", "n_tokens": 40, "n_pass": [238, 34, 22]}
{"time": "2021-02-24 08:37:53.364480", "score": "0.6065", "loss": "28.5279", "code": "void shouldDecodeEncoding(){key=\"\";Token(\"\".SESSION); utils.setBlobFromString(key); result =getBlobAsString(token); }", "n_tokens": 38, "n_pass": [249, 36, 23]}
{"time": "2021-02-24 08:37:59.755981", "score": "0.6063", "loss": "27.9889", "code": "void shouldDecodeEncoding(){key=\"\";Token(\"\".SESSION); setBlobFromString(key); result =getBlobAsString(token); }", "n_tokens": 36, "n_pass": [273, 39, 24]}
{"time": "2021-02-24 08:38:04.323886", "score": "0.612", "loss": "30.5964", "code": "void shouldDecodeEncoding(){key=\"\";(\"\".SESSION); setBlobFromString(key); result =getBlobAsString(token); }", "n_tokens": 35, "n_pass": [293, 41, 25]}
{"time": "2021-02-24 08:38:11.887838", "score": "0.612", "loss": "30.5964", "code": "void shouldDecodeEncoding(){key=\"\";(\"\".SESSION);setBlobFromString(key); result =getBlobAsString(token); }", "n_tokens": 34, "n_pass": [342, 43, 26]}
{"time": "2021-02-24 08:38:17.406216", "score": "0.612", "loss": "30.5964", "code": "void shouldDecodeEncoding(){key=\"\";(\"\".SESSION);setBlobFromString(key);result =getBlobAsString(token); }", "n_tokens": 33, "n_pass": [348, 46, 27]}
{"time": "2021-02-24 08:38:19.236637", "score": "0.612", "loss": "30.5964", "code": "void shouldDecodeEncoding(){key=\"\";(\"\".SESSION);setBlobFromString(key);result=getBlobAsString(token); }", "n_tokens": 32, "n_pass": [350, 47, 28]}
{"time": "2021-02-24 08:38:26.575386", "score": "0.612", "loss": "30.5964", "code": "void shouldDecodeEncoding(){key=\"\";(\"\".SESSION);setBlobFromString(key);result=getBlobAsString(token);}", "n_tokens": 31, "n_pass": [357, 51, 29]}

Minimal simplified code:
void shouldDecodeEncoding(){key="";("".SESSION);setBlobFromString(key);result=getBlobAsString(token);}

