
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/pkix/src/test/jdk1.3/org/bouncycastle/cert/test/BcCertTest_checkKeyUsage.java
method_name = checkKeyUsage
method_body = public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail("error generating cert - key usage wrong."); } }
predict, score, loss = checkKey, 0.48401182889938354, 6.1984734535217285

Trace of simplified code(s):
{"time": "2021-02-23 20:18:46.825688", "score": "0.484", "loss": "6.1985", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert - key usage wrong.\"); } }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:18:52.583711", "score": "0.3137", "loss": "5.4724", "code": "public void checkKeyUsage(int id, byte[] bytes) throws IOException { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 107, "n_pass": [58, 4, 2]}
{"time": "2021-02-23 20:18:58.839209", "score": "0.2877", "loss": "6.2163", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue()).getBytes()[0] & 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 104, "n_pass": [112, 7, 3]}
{"time": "2021-02-23 20:19:04.614397", "score": "0.2993", "loss": "6.4614", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())[0] & 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 100, "n_pass": [126, 10, 4]}
{"time": "2021-02-23 20:19:06.537374", "score": "0.3087", "loss": "6.1751", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 96, "n_pass": [127, 11, 5]}
{"time": "2021-02-23 20:19:12.791365", "score": "0.2275", "loss": "9.2601", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X50certHld = new X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 93, "n_pass": [144, 14, 6]}
{"time": "2021-02-23 20:19:14.674513", "score": "0.2206", "loss": "9.1101", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X50certHld =X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 90, "n_pass": [146, 15, 7]}
{"time": "2021-02-23 20:19:20.774530", "score": "0.2227", "loss": "9.1785", "code": "public void checkKeyUsage(int id, byte[] bytes)  { certHld =X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 87, "n_pass": [170, 18, 8]}
{"time": "2021-02-23 20:19:22.696016", "score": "0.2632", "loss": "8.3406", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) != 0) { fail(\"error generating cert.\"); } }", "n_tokens": 84, "n_pass": [171, 19, 9]}
{"time": "2021-02-23 20:19:24.597532", "score": "0.2193", "loss": "9.2883", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating cert.\"); } }", "n_tokens": 80, "n_pass": [182, 20, 10]}
{"time": "2021-02-23 20:19:32.046232", "score": "0.2674", "loss": "7.4496", "code": "public void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 78, "n_pass": [254, 23, 11]}
{"time": "2021-02-23 20:19:33.967001", "score": "0.2674", "loss": "7.4496", "code": " void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 77, "n_pass": [259, 24, 12]}
{"time": "2021-02-23 20:19:35.870473", "score": "0.2674", "loss": "7.4496", "code": "void checkKeyUsage(int id, byte[] bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 76, "n_pass": [260, 25, 13]}
{"time": "2021-02-23 20:19:38.676579", "score": "0.3004", "loss": "6.5872", "code": "void checkKeyUsage(int id, byte bytes)  { X509CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 74, "n_pass": [269, 26, 14]}
{"time": "2021-02-23 20:19:40.550723", "score": "0.3004", "loss": "6.5872", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString.getInstance(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 72, "n_pass": [274, 27, 15]}
{"time": "2021-02-23 20:19:44.306700", "score": "0.3054", "loss": "6.9376", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0x01) ) { fail(\"error generating.\"); } }", "n_tokens": 70, "n_pass": [281, 29, 16]}
{"time": "2021-02-23 20:19:49.914998", "score": "0.2764", "loss": "7.9004", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 01) ) { fail(\"error generating.\"); } }", "n_tokens": 68, "n_pass": [290, 32, 17]}
{"time": "2021-02-23 20:20:06.922524", "score": "0.3208", "loss": "7.4218", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0) ) { fail(\"error generating.\"); } }", "n_tokens": 67, "n_pass": [390, 37, 18]}
{"time": "2021-02-23 20:20:08.789605", "score": "0.3208", "loss": "7.4218", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)) { fail(\"error generating.\"); } }", "n_tokens": 66, "n_pass": [392, 38, 19]}
{"time": "2021-02-23 20:20:10.684853", "score": "0.3208", "loss": "7.4218", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){ fail(\"error generating.\"); } }", "n_tokens": 65, "n_pass": [394, 39, 20]}
{"time": "2021-02-23 20:20:12.553499", "score": "0.3208", "loss": "7.4218", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"error generating.\"); } }", "n_tokens": 64, "n_pass": [396, 40, 21]}
{"time": "2021-02-23 20:20:16.285368", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\" generating.\"); } }", "n_tokens": 63, "n_pass": [400, 42, 22]}
{"time": "2021-02-23 20:20:18.170518", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating.\"); } }", "n_tokens": 62, "n_pass": [401, 43, 23]}
{"time": "2021-02-23 20:20:21.892343", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\"); } }", "n_tokens": 61, "n_pass": [403, 45, 24]}
{"time": "2021-02-23 20:20:23.757089", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");} }", "n_tokens": 60, "n_pass": [407, 46, 25]}
{"time": "2021-02-23 20:20:25.621058", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id, byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 59, "n_pass": [409, 47, 26]}
{"time": "2021-02-23 20:20:28.463754", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id,byte bytes)  { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 58, "n_pass": [419, 48, 27]}
{"time": "2021-02-23 20:20:30.309810", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id,byte bytes) { X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 57, "n_pass": [424, 49, 28]}
{"time": "2021-02-23 20:20:32.174742", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id,byte bytes){ X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 56, "n_pass": [425, 50, 29]}
{"time": "2021-02-23 20:20:34.028921", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id,byte bytes){X9CertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 55, "n_pass": [427, 51, 30]}
{"time": "2021-02-23 20:20:35.906680", "score": "0.3042", "loss": "8.3074", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder(bytes); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 54, "n_pass": [429, 52, 31]}
{"time": "2021-02-23 20:20:39.575859", "score": "0.3246", "loss": "7.4916", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder(); if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 53, "n_pass": [432, 54, 32]}
{"time": "2021-02-23 20:20:41.442155", "score": "0.3246", "loss": "7.4916", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if ((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 52, "n_pass": [435, 55, 33]}
{"time": "2021-02-23 20:20:43.350524", "score": "0.3246", "loss": "7.4916", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if((DERBitString(certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 51, "n_pass": [437, 56, 34]}
{"time": "2021-02-23 20:20:45.185143", "score": "0.3223", "loss": "7.5832", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if(((certHld.getExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 50, "n_pass": [440, 57, 35]}
{"time": "2021-02-23 20:20:47.022692", "score": "0.2845", "loss": "9.4625", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if(((certHldgetExtension(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 49, "n_pass": [443, 58, 36]}
{"time": "2021-02-23 20:20:48.869367", "score": "0.2721", "loss": "9.7497", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if(((certHld(Extension.keyUsage).getParsedValue())& 0)){fail(\"generating\");}}", "n_tokens": 48, "n_pass": [444, 59, 37]}
{"time": "2021-02-23 20:20:52.602051", "score": "0.2721", "loss": "9.7497", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if(((certHld(Extension.keyUsage).getParsedValue())&0)){fail(\"generating\");}}", "n_tokens": 47, "n_pass": [456, 61, 38]}
{"time": "2021-02-23 20:21:02.896605", "score": "0.306", "loss": "9.6402", "code": "void checkKeyUsage(int id,byte bytes){XCertificateHolder();if((((Extension.keyUsage).getParsedValue())&0)){fail(\"generating\");}}", "n_tokens": 46, "n_pass": [492, 66, 39]}

Minimal simplified code:
void checkKeyUsage(int id,byte bytes){XCertificateHolder();if((((Extension.keyUsage).getParsedValue())&0)){fail("generating");}}

