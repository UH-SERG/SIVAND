
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/entitybroker/core-providers/src/test/org/sakaiproject/entitybroker/providers/UserEntityProviderGetUserByIdEidTest_testEidFallthrough.java
method_name = testEidFallthrough
method_body = @Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser("1234")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting("user.explicit.id.only", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid("1234")); }
predict, score, loss = testGetUserById, 0.7225050330162048, 33.56488800048828

Trace of simplified code(s):
{"time": "2021-02-24 02:48:20.521801", "score": "0.7494", "loss": "34.0051", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(user); Mockito.when(dhs.getConfigurationSetting(\"user.explicit.id.only\", false)).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 115, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 02:48:22.429250", "score": "0.8162", "loss": "36.3667", "code": "@Test public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 86, "n_pass": [10, 2, 2]}
{"time": "2021-02-24 02:48:27.160225", "score": "0.9075", "loss": "35.6905", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when(uds.getUserByAid(Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 83, "n_pass": [81, 4, 3]}
{"time": "2021-02-24 02:48:29.499953", "score": "0.9151", "loss": "34.5173", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"1234\")).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 80, "n_pass": [88, 5, 4]}
{"time": "2021-02-24 02:48:31.365383", "score": "0.9111", "loss": "34.2347", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); Assert.assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 76, "n_pass": [96, 6, 5]}
{"time": "2021-02-24 02:48:37.414520", "score": "0.9246", "loss": "34.7465", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals(user, provider.getUserByIdEid(\"1234\")); }", "n_tokens": 74, "n_pass": [165, 8, 6]}
{"time": "2021-02-24 02:48:39.292248", "score": "0.9235", "loss": "34.4614", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"1234\")); }", "n_tokens": 72, "n_pass": [167, 9, 7]}
{"time": "2021-02-24 02:48:43.092284", "score": "0.9169", "loss": "34.4924", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"34\")); }", "n_tokens": 70, "n_pass": [171, 11, 8]}
{"time": "2021-02-24 02:48:44.947450", "score": "0.9162", "loss": "34.1583", "code": "public void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 68, "n_pass": [172, 12, 9]}
{"time": "2021-02-24 02:48:46.830417", "score": "0.9162", "loss": "34.1583", "code": " void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 67, "n_pass": [176, 13, 10]}
{"time": "2021-02-24 02:48:48.713005", "score": "0.9162", "loss": "34.1583", "code": "void testEidFallthrough() throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 66, "n_pass": [177, 14, 11]}
{"time": "2021-02-24 02:48:51.446763", "score": "0.9162", "loss": "34.1583", "code": "void testEidFallthrough()throws UserNotDefinedException { Mockito.when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 65, "n_pass": [183, 15, 12]}
{"time": "2021-02-24 02:48:53.322345", "score": "0.9206", "loss": "34.5254", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito.anyString())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 63, "n_pass": [187, 16, 13]}
{"time": "2021-02-24 02:48:55.209597", "score": "0.9255", "loss": "34.6848", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito())).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 61, "n_pass": [190, 17, 14]}
{"time": "2021-02-24 02:48:57.081826", "score": "0.9261", "loss": "34.7582", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException.class); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 59, "n_pass": [191, 18, 15]}
{"time": "2021-02-24 02:48:58.971967", "score": "0.9322", "loss": "36.6082", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException); Mockito.when(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 57, "n_pass": [195, 19, 16]}
{"time": "2021-02-24 02:49:00.883933", "score": "0.9142", "loss": "36.5725", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException); Mockito(uds.getUser(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 55, "n_pass": [198, 20, 17]}
{"time": "2021-02-24 02:49:02.710711", "score": "0.9196", "loss": "37.7292", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException); Mockito(uds(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 53, "n_pass": [200, 21, 18]}
{"time": "2021-02-24 02:49:07.309171", "score": "0.9265", "loss": "38.9444", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn(false); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 51, "n_pass": [228, 23, 19]}
{"time": "2021-02-24 02:49:15.846395", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn(); assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 50, "n_pass": [311, 25, 20]}
{"time": "2021-02-24 02:49:17.694120", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals( provider.getUserByIdEid(\"\")); }", "n_tokens": 49, "n_pass": [313, 26, 21]}
{"time": "2021-02-24 02:49:21.373534", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\")); }", "n_tokens": 48, "n_pass": [316, 28, 22]}
{"time": "2021-02-24 02:49:25.099297", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException { when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 47, "n_pass": [326, 30, 23]}
{"time": "2021-02-24 02:49:27.845265", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException{ when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 46, "n_pass": [336, 31, 24]}
{"time": "2021-02-24 02:49:29.752537", "score": "0.9262", "loss": "39.2725", "code": "void testEidFallthrough()throws UserNotDefinedException{when((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 45, "n_pass": [338, 32, 25]}
{"time": "2021-02-24 02:49:31.589963", "score": "0.9208", "loss": "40.7951", "code": "void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow(UserNotDefinedException);(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 44, "n_pass": [339, 33, 26]}
{"time": "2021-02-24 02:49:33.458293", "score": "0.9044", "loss": "39.0827", "code": "void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow();(uds(\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 43, "n_pass": [348, 34, 27]}
{"time": "2021-02-24 02:49:35.298933", "score": "0.9363", "loss": "38.9638", "code": "void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow();((\"\")).thenReturn();assertEquals(provider.getUserByIdEid(\"\"));}", "n_tokens": 42, "n_pass": [352, 35, 28]}
{"time": "2021-02-24 02:49:39.026016", "score": "0.8606", "loss": "30.315", "code": "void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow();((\"\")).thenReturn();assertEquals(providergetUserByIdEid(\"\"));}", "n_tokens": 41, "n_pass": [366, 37, 29]}
{"time": "2021-02-24 02:49:45.404337", "score": "0.923", "loss": "38.2911", "code": "void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow();((\"\")).thenReturn();assertEquals(getUserByIdEid(\"\"));}", "n_tokens": 40, "n_pass": [407, 40, 30]}

Minimal simplified code:
void testEidFallthrough()throws UserNotDefinedException{((Mockito)).thenThrow();(("")).thenReturn();assertEquals(getUserByIdEid(""));}

