
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wso2-attic__product-emm/modules/integration/tests-integration/src/test/java/org/wso2/mdm/integration/mobileDevice/OracleMobileDeviceManagement_initTest.java
method_name = initTest
method_body = @BeforeClass(alwaysRun = true, groups = { Constants.MobileDeviceManagement.MOBILE_DEVICE_MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = "Bearer " + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }
predict, score, loss = init, 0.4132660925388336, 8.396276473999023

Trace of simplified code(s):
{"time": "2021-02-24 07:49:49.830158", "score": "0.4133", "loss": "8.3963", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MobileDeviceManagement.MOBILE_DEVICE_MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 108, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:49:53.740844", "score": "0.4186", "loss": "8.6657", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, Constants.APPLICATION_JSON, accessTokenString); }", "n_tokens": 102, "n_pass": [47, 3, 2]}
{"time": "2021-02-24 07:49:55.666141", "score": "0.6363", "loss": "8.2846", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(backendHTTPSURL, accessTokenString); }", "n_tokens": 95, "n_pass": [58, 4, 3]}
{"time": "2021-02-24 07:49:57.620001", "score": "0.6455", "loss": "7.9388", "code": "@BeforeClass(alwaysRun = true, groups = { Constants.MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 91, "n_pass": [101, 5, 4]}
{"time": "2021-02-24 07:49:59.596340", "score": "0.6168", "loss": "8.2861", "code": "@BeforeClass(alwaysRun = true, groups = {MANAGEMENT_GROUP }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 88, "n_pass": [108, 6, 5]}
{"time": "2021-02-24 07:50:01.510523", "score": "0.5308", "loss": "7.6005", "code": "@BeforeClass(alwaysRun = true, groups = { }) public void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 85, "n_pass": [109, 7, 6]}
{"time": "2021-02-24 07:50:03.429642", "score": "0.5308", "loss": "7.6005", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest() throws Exception { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 82, "n_pass": [111, 8, 7]}
{"time": "2021-02-24 07:50:05.334289", "score": "0.4967", "loss": "7.7413", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest()  { super.init(TestUserMode.SUPER_TENANT_ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 79, "n_pass": [114, 9, 8]}
{"time": "2021-02-24 07:50:09.143032", "score": "0.5145", "loss": "7.6892", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString = \"Bearer \" + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 76, "n_pass": [118, 11, 9]}
{"time": "2021-02-24 07:50:11.030623", "score": "0.5475", "loss": "7.8602", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.client = new MDMHttpClient(); }", "n_tokens": 72, "n_pass": [122, 12, 10]}
{"time": "2021-02-24 07:50:12.943987", "score": "0.5059", "loss": "6.7429", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.new MDMHttpClient(); }", "n_tokens": 68, "n_pass": [127, 13, 11]}
{"time": "2021-02-24 07:50:19.762416", "score": "0.5769", "loss": "6.7614", "code": "@BeforeClass(alwaysRun = true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 66, "n_pass": [188, 15, 12]}
{"time": "2021-02-24 07:50:21.676234", "score": "0.5769", "loss": "6.7614", "code": "@BeforeClass(alwaysRun= true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 65, "n_pass": [195, 16, 13]}
{"time": "2021-02-24 07:50:23.557001", "score": "0.5769", "loss": "6.7614", "code": "@BeforeClass(alwaysRun=true, groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 64, "n_pass": [197, 17, 14]}
{"time": "2021-02-24 07:50:25.455590", "score": "0.5769", "loss": "6.7614", "code": "@BeforeClass(alwaysRun=true,groups = { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 63, "n_pass": [200, 18, 15]}
{"time": "2021-02-24 07:50:27.328685", "score": "0.5769", "loss": "6.7614", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserMode._ADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 62, "n_pass": [202, 19, 16]}
{"time": "2021-02-24 07:50:30.157563", "score": "0.4958", "loss": "5.0482", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); String accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 60, "n_pass": [213, 20, 17]}
{"time": "2021-02-24 07:50:32.045493", "score": "0.6548", "loss": "6.3126", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString =  + OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 58, "n_pass": [216, 21, 18]}
{"time": "2021-02-24 07:50:34.403923", "score": "0.6619", "loss": "6.2253", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString =  OAuthUtil.getOAuthToken(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 56, "n_pass": [219, 22, 19]}
{"time": "2021-02-24 07:50:36.280019", "score": "0.6003", "loss": "5.8846", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString =  OAuthUtil(backendHTTPSURL, backendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 54, "n_pass": [221, 23, 20]}
{"time": "2021-02-24 07:50:38.175647", "score": "0.7707", "loss": "5.2548", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString =  OAuthUtil(backendHTTPSURLbackendHTTPSURL); this.MDMHttpClient(); }", "n_tokens": 52, "n_pass": [223, 24, 21]}
{"time": "2021-02-24 07:50:40.040820", "score": "0.6142", "loss": "4.7159", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString =  OAuthUtil(backendHTTPSURLbackendHTTPSURL); MDMHttpClient(); }", "n_tokens": 50, "n_pass": [226, 25, 22]}
{"time": "2021-02-24 07:50:42.806087", "score": "0.7447", "loss": "3.0427", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL); MDMHttpClient(); }", "n_tokens": 48, "n_pass": [252, 26, 23]}
{"time": "2021-02-24 07:50:44.604297", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient(); }", "n_tokens": 46, "n_pass": [255, 27, 24]}
{"time": "2021-02-24 07:50:52.498005", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups= { })void initTest()  { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 45, "n_pass": [325, 28, 25]}
{"time": "2021-02-24 07:50:54.350129", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups={ })void initTest()  { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 44, "n_pass": [335, 29, 26]}
{"time": "2021-02-24 07:50:56.197135", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest()  { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 43, "n_pass": [337, 30, 27]}
{"time": "2021-02-24 07:50:58.955954", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest() { super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 42, "n_pass": [345, 31, 28]}
{"time": "2021-02-24 07:51:00.777135", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){ super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 41, "n_pass": [346, 32, 29]}
{"time": "2021-02-24 07:51:02.629010", "score": "0.9014", "loss": "4.0988", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init(TestUserModeADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 40, "n_pass": [348, 33, 30]}
{"time": "2021-02-24 07:51:06.395936", "score": "0.9484", "loss": "7.3497", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init(ADMIN); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 39, "n_pass": [353, 35, 31]}
{"time": "2021-02-24 07:51:08.235908", "score": "0.9888", "loss": "7.8372", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init(); accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 38, "n_pass": [354, 36, 32]}
{"time": "2021-02-24 07:51:10.075398", "score": "0.9888", "loss": "7.8372", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init();accessTokenString = (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 37, "n_pass": [357, 37, 33]}
{"time": "2021-02-24 07:51:11.915361", "score": "0.9888", "loss": "7.8372", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init();accessTokenString= (backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 36, "n_pass": [359, 38, 34]}
{"time": "2021-02-24 07:51:13.757487", "score": "0.9888", "loss": "7.8372", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init();accessTokenString=(backendHTTPSURLbackendHTTPSURL)MDMHttpClient();}", "n_tokens": 35, "n_pass": [361, 39, 35]}
{"time": "2021-02-24 07:51:15.585711", "score": "0.987", "loss": "8.9445", "code": "@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init();accessTokenString=(backendHTTPSURL)MDMHttpClient();}", "n_tokens": 34, "n_pass": [363, 40, 36]}

Minimal simplified code:
@BeforeClass(alwaysRun=true,groups={})void initTest(){super.init();accessTokenString=(backendHTTPSURL)MDMHttpClient();}

