
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/semanticvectors__semanticvectors/src/main/java/ch/akuhn/edu/mit/tedlab/Svdlib_svdTransposeD.java
method_name = svdTransposeD
method_body = static DMat svdTransposeD(DMat D) { int r, c; DMat N = new DMat(D.cols, D.rows); for (r = 0; r < D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }
predict, score, loss = transpose, 0.39478087425231934, 15.065993309020996

Trace of simplified code(s):
{"time": "2021-02-24 09:31:46.352320", "score": "0.4088", "loss": "13.9693", "code": "static DMat svdTransposeD(DMat D) { int r, c; DMat N = new DMat(D.cols, D.rows); for (r = 0; r < D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 119, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:31:48.270443", "score": "0.2784", "loss": "13.7237", "code": "static DMat svdTransposeD(DMat D) { intDMat(D.cols, D.rows); for (r = 0; r < D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 104, "n_pass": [21, 2, 2]}
{"time": "2021-02-24 09:31:55.989587", "score": "0.264", "loss": "13.5859", "code": "static DMat svdTransposeD(DMat D) { intDMat(D.cols, D.rows); for (r = 0; D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 100, "n_pass": [91, 6, 3]}
{"time": "2021-02-24 09:32:04.124068", "score": "0.4308", "loss": "14.8668", "code": "static DMat svdTransposeD() { intDMat(D.cols, D.rows); for (r = 0; D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 97, "n_pass": [110, 10, 4]}
{"time": "2021-02-24 09:32:06.007082", "score": "0.4466", "loss": "14.5452", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0; D.rows; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 94, "n_pass": [114, 11, 5]}
{"time": "2021-02-24 09:32:07.914879", "score": "0.5586", "loss": "14.6237", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0; c < D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 90, "n_pass": [119, 12, 6]}
{"time": "2021-02-24 09:32:09.835493", "score": "0.5381", "loss": "14.5733", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0; D.cols; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 86, "n_pass": [124, 13, 7]}
{"time": "2021-02-24 09:32:11.756627", "score": "0.5865", "loss": "15.0357", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r] = D.value[r][c]; return N; }", "n_tokens": 82, "n_pass": [125, 14, 8]}
{"time": "2021-02-24 09:32:13.667597", "score": "0.3853", "loss": "17.7783", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r].value[r][c]; return N; }", "n_tokens": 78, "n_pass": [130, 15, 9]}
{"time": "2021-02-24 09:32:20.082421", "score": "0.3562", "loss": "17.532", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][r][c]; return N; }", "n_tokens": 76, "n_pass": [194, 17, 10]}
{"time": "2021-02-24 09:32:21.978885", "score": "0.3349", "loss": "18.3163", "code": "static DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][rc]; return N; }", "n_tokens": 74, "n_pass": [195, 18, 11]}
{"time": "2021-02-24 09:32:25.770093", "score": "0.3349", "loss": "18.3163", "code": " DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][rc]; return N; }", "n_tokens": 73, "n_pass": [201, 20, 12]}
{"time": "2021-02-24 09:32:27.620934", "score": "0.3349", "loss": "18.3163", "code": "DMat svdTransposeD() { intDMat(D.D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][rc]; return N; }", "n_tokens": 72, "n_pass": [202, 21, 13]}
{"time": "2021-02-24 09:32:32.693939", "score": "0.3448", "loss": "18.7789", "code": "DMat svdTransposeD() { intDMat(D.rows); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][rc]; return N; }", "n_tokens": 70, "n_pass": [211, 23, 14]}
{"time": "2021-02-24 09:32:34.571841", "score": "0.36", "loss": "19.1084", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N.value[c][r][rc]; return N; }", "n_tokens": 68, "n_pass": [212, 24, 15]}
{"time": "2021-02-24 09:32:36.482212", "score": "0.3422", "loss": "19.1698", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][r][rc]; return N; }", "n_tokens": 66, "n_pass": [231, 25, 16]}
{"time": "2021-02-24 09:32:38.354943", "score": "0.2613", "loss": "19.8969", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[cr][rc]; return N; }", "n_tokens": 64, "n_pass": [233, 26, 17]}
{"time": "2021-02-24 09:32:55.116652", "score": "0.3168", "loss": "20.6989", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][rc]; return N; }", "n_tokens": 63, "n_pass": [328, 29, 18]}
{"time": "2021-02-24 09:32:56.977895", "score": "0.3241", "loss": "19.6717", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c]; return N; }", "n_tokens": 62, "n_pass": [330, 30, 19]}
{"time": "2021-02-24 09:32:58.881374", "score": "0.3241", "loss": "19.6717", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return N; }", "n_tokens": 61, "n_pass": [334, 31, 20]}
{"time": "2021-02-24 09:33:04.451696", "score": "0.3554", "loss": "20.4244", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ; }", "n_tokens": 60, "n_pass": [337, 34, 21]}
{"time": "2021-02-24 09:33:06.291527", "score": "0.3554", "loss": "20.4244", "code": "DMat svdTransposeD() { intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 59, "n_pass": [339, 35, 22]}
{"time": "2021-02-24 09:33:09.453082", "score": "0.3554", "loss": "20.4244", "code": "DMat svdTransposeD(){ intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 58, "n_pass": [346, 36, 23]}
{"time": "2021-02-24 09:33:11.335275", "score": "0.3554", "loss": "20.4244", "code": "DMat svdTransposeD(){intDMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 57, "n_pass": [348, 37, 24]}
{"time": "2021-02-24 09:33:13.210025", "score": "0.4003", "loss": "21.1422", "code": "DMat svdTransposeD(){DMat(D); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 56, "n_pass": [349, 38, 25]}
{"time": "2021-02-24 09:33:16.959218", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat(); for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 55, "n_pass": [352, 40, 26]}
{"time": "2021-02-24 09:33:18.865160", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for (r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 54, "n_pass": [355, 41, 27]}
{"time": "2021-02-24 09:33:20.741293", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r = 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 53, "n_pass": [357, 42, 28]}
{"time": "2021-02-24 09:33:22.615274", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r= 0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 52, "n_pass": [360, 43, 29]}
{"time": "2021-02-24 09:33:24.540841", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;; r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 51, "n_pass": [362, 44, 30]}
{"time": "2021-02-24 09:33:26.433698", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++) for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 50, "n_pass": [366, 45, 31]}
{"time": "2021-02-24 09:33:28.280611", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for (c = 0;; c++) N[c][c];return ;}", "n_tokens": 49, "n_pass": [371, 46, 32]}
{"time": "2021-02-24 09:33:30.146685", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c = 0;; c++) N[c][c];return ;}", "n_tokens": 48, "n_pass": [373, 47, 33]}
{"time": "2021-02-24 09:33:31.990235", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c= 0;; c++) N[c][c];return ;}", "n_tokens": 47, "n_pass": [376, 48, 34]}
{"time": "2021-02-24 09:33:33.835952", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;; c++) N[c][c];return ;}", "n_tokens": 46, "n_pass": [378, 49, 35]}
{"time": "2021-02-24 09:33:35.748000", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;;c++) N[c][c];return ;}", "n_tokens": 45, "n_pass": [382, 50, 36]}
{"time": "2021-02-24 09:33:37.658460", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;;c++)N[c][c];return ;}", "n_tokens": 44, "n_pass": [387, 51, 37]}
{"time": "2021-02-24 09:33:39.527658", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;;c++)N[c][c]; ;}", "n_tokens": 43, "n_pass": [396, 52, 38]}
{"time": "2021-02-24 09:33:41.411075", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;;c++)N[c][c];;}", "n_tokens": 42, "n_pass": [397, 53, 39]}
{"time": "2021-02-24 09:33:43.284802", "score": "0.5491", "loss": "21.796", "code": "DMat svdTransposeD(){DMat();for(r=0;;r++)for(c=0;;c++)N[c][c];}", "n_tokens": 41, "n_pass": [398, 54, 40]}
{"time": "2021-02-24 09:33:46.427979", "score": "0.4572", "loss": "22.4201", "code": "DMat svdTransposeD(){DMat();for(r0;;r++)for(c=0;;c++)N[c][c];}", "n_tokens": 40, "n_pass": [413, 55, 41]}
{"time": "2021-02-24 09:33:48.303946", "score": "0.4572", "loss": "22.4201", "code": "DMat svdTransposeD(){DMat();for(r;;r++)for(c=0;;c++)N[c][c];}", "n_tokens": 39, "n_pass": [414, 56, 42]}
{"time": "2021-02-24 09:33:53.328696", "score": "0.4141", "loss": "22.9884", "code": "DMat svdTransposeD(){DMat();for(;;r++)for(c=0;;c++)N[c][c];}", "n_tokens": 38, "n_pass": [453, 58, 43]}

Minimal simplified code:
DMat svdTransposeD(){DMat();for(;;r++)for(c=0;;c++)N[c][c];}

