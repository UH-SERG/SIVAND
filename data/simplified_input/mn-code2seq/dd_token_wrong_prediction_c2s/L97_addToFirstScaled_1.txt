
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/math/FloatArrays_addToFirstScaled.java
method_name = addToFirstScaled
method_body = public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i < first.length; i++) { first[i] = first[i] + second[i] * scale; } }
predict, score, loss = add, 0.40373021364212036, 24.785465240478516

Trace of simplified code(s):
{"time": "2021-02-24 07:44:36.266862", "score": "0.4037", "loss": "24.7855", "code": "public static void addToFirstScaled(float[] first, float[] second, float scale) { validateArrays(first, second); for (int i = 0; i < first.length; i++) { first[i] = first[i] + second[i] * scale; } }", "n_tokens": 93, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:44:38.664089", "score": "0.4519", "loss": "25.0788", "code": "public static void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i = 0; i < first.length; i++) { first[i] = first[i] + second[i] * scale; } }", "n_tokens": 87, "n_pass": [47, 2, 2]}
{"time": "2021-02-24 07:44:40.551410", "score": "0.3993", "loss": "25.0534", "code": "public static void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second[i] * scale; } }", "n_tokens": 81, "n_pass": [53, 3, 3]}
{"time": "2021-02-24 07:44:47.165075", "score": "0.3997", "loss": "24.8598", "code": "public static void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 78, "n_pass": [104, 6, 4]}
{"time": "2021-02-24 07:44:49.056714", "score": "0.3997", "loss": "24.8598", "code": "static void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 76, "n_pass": [107, 7, 5]}
{"time": "2021-02-24 07:44:51.014978", "score": "0.3997", "loss": "24.8598", "code": "void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i = 0; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 74, "n_pass": [108, 8, 6]}
{"time": "2021-02-24 07:44:53.426828", "score": "0.4179", "loss": "24.5826", "code": "void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + second * scale; } }", "n_tokens": 71, "n_pass": [121, 9, 7]}
{"time": "2021-02-24 07:44:57.156682", "score": "0.726", "loss": "23.987", "code": "void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] + secondscale; } }", "n_tokens": 68, "n_pass": [131, 11, 8]}
{"time": "2021-02-24 07:45:04.252824", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[] first,  float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 66, "n_pass": [201, 12, 9]}
{"time": "2021-02-24 07:45:07.039585", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first,  float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 65, "n_pass": [212, 13, 10]}
{"time": "2021-02-24 07:45:08.922504", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first, float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 64, "n_pass": [215, 14, 11]}
{"time": "2021-02-24 07:45:10.808594", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first,float scale) { validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 63, "n_pass": [216, 15, 12]}
{"time": "2021-02-24 07:45:12.697276", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first,float scale){ validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 62, "n_pass": [221, 16, 13]}
{"time": "2021-02-24 07:45:14.575780", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first,float scale){validateArrays(first, second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 61, "n_pass": [223, 17, 14]}
{"time": "2021-02-24 07:45:16.520231", "score": "0.5188", "loss": "24.2118", "code": "void addToFirstScaled(float[]first,float scale){validateArrays(first,second); for (int i ; i; i++) { first[i] = first[i] +scale; } }", "n_tokens": 60, "n_pass": [228, 18, 15]}
{"time": "2021-02-24 07:45:18.444964", "score": "0.6463", "loss": "23.962", "code": "void addToFirstScaled(float[]first,float scale){validateArrays(first,second); for (int i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 58, "n_pass": [235, 19, 16]}
{"time": "2021-02-24 07:45:21.291981", "score": "0.4325", "loss": "24.8274", "code": "void addToFirstScaled(float[]first,float scale){validateArrays(firstsecond); for (int i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 57, "n_pass": [267, 20, 17]}
{"time": "2021-02-24 07:45:24.152923", "score": "0.3982", "loss": "24.4833", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for (int i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 56, "n_pass": [302, 21, 18]}
{"time": "2021-02-24 07:45:35.750551", "score": "0.3982", "loss": "24.4833", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(int i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 55, "n_pass": [379, 23, 19]}
{"time": "2021-02-24 07:45:37.592044", "score": "0.394", "loss": "24.6877", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for( i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 54, "n_pass": [381, 24, 20]}
{"time": "2021-02-24 07:45:39.435920", "score": "0.394", "loss": "24.6877", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(i ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 53, "n_pass": [382, 25, 21]}
{"time": "2021-02-24 07:45:41.297048", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for( ;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 52, "n_pass": [383, 26, 22]}
{"time": "2021-02-24 07:45:43.123867", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;; i++) { first[i] = first[i] +scale; } }", "n_tokens": 51, "n_pass": [384, 27, 23]}
{"time": "2021-02-24 07:45:44.959323", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++) { first[i] = first[i] +scale; } }", "n_tokens": 50, "n_pass": [387, 28, 24]}
{"time": "2021-02-24 07:45:46.813794", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){ first[i] = first[i] +scale; } }", "n_tokens": 49, "n_pass": [392, 29, 25]}
{"time": "2021-02-24 07:45:48.656853", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i] = first[i] +scale; } }", "n_tokens": 48, "n_pass": [394, 30, 26]}
{"time": "2021-02-24 07:45:50.512418", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i]= first[i] +scale; } }", "n_tokens": 47, "n_pass": [399, 31, 27]}
{"time": "2021-02-24 07:45:52.378668", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i]=first[i] +scale; } }", "n_tokens": 46, "n_pass": [401, 32, 28]}
{"time": "2021-02-24 07:45:54.371139", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i]=first[i]+scale; } }", "n_tokens": 45, "n_pass": [406, 33, 29]}
{"time": "2021-02-24 07:45:56.235156", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i]=first[i]+scale;} }", "n_tokens": 44, "n_pass": [410, 34, 30]}
{"time": "2021-02-24 07:45:58.072335", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond); for(;;i++){first[i]=first[i]+scale;}}", "n_tokens": 43, "n_pass": [412, 35, 31]}
{"time": "2021-02-24 07:46:04.568280", "score": "0.4729", "loss": "24.8544", "code": "void addToFirstScaled(float[]first,float scale){(firstsecond);for(;;i++){first[i]=first[i]+scale;}}", "n_tokens": 42, "n_pass": [433, 38, 32]}

Minimal simplified code:
void addToFirstScaled(float[]first,float scale){(firstsecond);for(;;i++){first[i]=first[i]+scale;}}

