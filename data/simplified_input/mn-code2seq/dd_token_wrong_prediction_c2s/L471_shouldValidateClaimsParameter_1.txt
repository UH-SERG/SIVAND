
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-oauth2-common/openid-connect-core/src/test/java/org/forgerock/openidconnect/ClaimsParameterValidatorTest_shouldValidateClaimsParameter.java
method_name = shouldValidateClaimsParameter
method_body = @Test public void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings mockProviderSettings = mock(OAuth2ProviderSettings.class); String responseTypes = "code token id_token"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(true); given(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants.Params.RESPONSE_TYPE)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }
predict, score, loss = testValidateRequestWithToken, 0.5945476293563843, 22.75484275817871

Trace of simplified code(s):
{"time": "2021-02-23 21:11:09.865146", "score": "0.5411", "loss": "20.6441", "code": "@Test public void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings mockProviderSettings = mock(OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(true); given(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants.Params.RESPONSE_TYPE)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 177, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:11:25.759128", "score": "0.6135", "loss": "24.3859", "code": "@Test public void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(true); given(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants.Params.RESPONSE_TYPE)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 172, "n_pass": [104, 9, 2]}
{"time": "2021-02-23 21:11:31.608648", "score": "0.5979", "loss": "23.6764", "code": "@Test public void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants.Params.RESPONSE_TYPE)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 166, "n_pass": [114, 12, 3]}
{"time": "2021-02-23 21:11:37.492706", "score": "0.5711", "loss": "24.5564", "code": "@Test public void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 160, "n_pass": [120, 15, 4]}
{"time": "2021-02-23 21:12:01.160669", "score": "0.5622", "loss": "25.892", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth2Request.class); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 158, "n_pass": [215, 27, 5]}
{"time": "2021-02-23 21:12:21.214988", "score": "0.5426", "loss": "23.5431", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuthclass); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get(mockRequest)).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 155, "n_pass": [235, 37, 6]}
{"time": "2021-02-23 21:12:33.227918", "score": "0.5948", "loss": "25.0395", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuthclass); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 152, "n_pass": [249, 43, 7]}
{"time": "2021-02-23 21:14:31.258492", "score": "0.5708", "loss": "24.9354", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(mockProviderSettings.getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 151, "n_pass": [506, 97, 8]}
{"time": "2021-02-23 21:15:06.623069", "score": "0.5613", "loss": "24.0885", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2Constants)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 149, "n_pass": [541, 115, 9]}
{"time": "2021-02-23 21:16:51.889049", "score": "0.551", "loss": "24.6915", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException, InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 148, "n_pass": [751, 165, 10]}
{"time": "2021-02-23 21:17:10.804466", "score": "0.5655", "loss": "24.097", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettings.class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 147, "n_pass": [789, 174, 11]}
{"time": "2021-02-23 21:17:51.785301", "score": "0.524", "loss": "22.4037", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettingsclass); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes); claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 146, "n_pass": [828, 195, 12]}
{"time": "2021-02-23 21:18:56.457209", "score": "0.5331", "loss": "22.2761", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettingsclass); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(mockRequest); }", "n_tokens": 145, "n_pass": [908, 228, 13]}
{"time": "2021-02-23 21:19:00.387395", "score": "0.6303", "loss": "22.6964", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuth2ProviderSettings (OAuth2ProviderSettingsclass); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 144, "n_pass": [913, 230, 14]}
{"time": "2021-02-23 21:19:42.846397", "score": "0.5757", "loss": "22.7266", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2ProviderSettingsclass); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 143, "n_pass": [968, 251, 15]}
{"time": "2021-02-23 21:19:50.722271", "score": "0.597", "loss": "23.3667", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes = \"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 142, "n_pass": [974, 255, 16]}
{"time": "2021-02-23 21:20:04.349199", "score": "0.5565", "loss": "22.7014", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.Custom.CLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 141, "n_pass": [984, 262, 17]}
{"time": "2021-02-23 21:20:39.584969", "score": "0.6014", "loss": "23.1754", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException, BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 140, "n_pass": [1027, 280, 18]}
{"time": "2021-02-23 21:21:04.374711", "score": "0.5965", "loss": "23.5637", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException, ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 139, "n_pass": [1075, 292, 19]}
{"time": "2021-02-23 21:21:14.172808", "score": "0.5704", "loss": "22.6915", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\"code token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 138, "n_pass": [1089, 297, 20]}
{"time": "2021-02-23 21:21:59.173227", "score": "0.6237", "loss": "23.3065", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings); given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 137, "n_pass": [1127, 320, 21]}
{"time": "2021-02-23 21:22:20.654108", "score": "0.5343", "loss": "20.1979", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);given(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 136, "n_pass": [1149, 331, 22]}
{"time": "2021-02-23 21:22:22.611739", "score": "0.5656", "loss": "21.8831", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); given(mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 135, "n_pass": [1150, 332, 23]}
{"time": "2021-02-23 21:22:40.302436", "score": "0.6646", "loss": "24.0528", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(OAuth2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 134, "n_pass": [1178, 341, 24]}
{"time": "2021-02-23 21:22:44.207862", "score": "0.6226", "loss": "23.0806", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth); OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 133, "n_pass": [1184, 343, 25]}
{"time": "2021-02-23 21:23:30.662984", "score": "0.6196", "loss": "22.7285", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2class); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 132, "n_pass": [1248, 366, 26]}
{"time": "2021-02-23 21:23:40.371373", "score": "0.5989", "loss": "21.4511", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\" token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 131, "n_pass": [1255, 371, 27]}
{"time": "2021-02-23 21:23:52.089335", "score": "0.6242", "loss": "22.1202", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequest.getParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 130, "n_pass": [1265, 377, 28]}
{"time": "2021-02-23 21:24:11.589349", "score": "0.6486", "loss": "22.6765", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2Constants.CustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 129, "n_pass": [1295, 387, 29]}
{"time": "2021-02-23 21:24:19.385511", "score": "0.6328", "loss": "22.0705", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest.getParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 128, "n_pass": [1301, 391, 30]}
{"time": "2021-02-23 21:24:29.127384", "score": "0.6415", "loss": "22.3761", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequestgetParameter(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 127, "n_pass": [1315, 396, 31]}
{"time": "2021-02-23 21:24:31.081606", "score": "0.6269", "loss": "20.8853", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest(2)).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 126, "n_pass": [1316, 397, 32]}
{"time": "2021-02-23 21:24:33.007239", "score": "0.633", "loss": "20.3803", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn(responseTypes);claimsParameterValidator.validateRequest(); }", "n_tokens": 125, "n_pass": [1318, 398, 33]}
{"time": "2021-02-23 21:24:34.986576", "score": "0.6273", "loss": "20.8523", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest(); }", "n_tokens": 124, "n_pass": [1324, 399, 34]}
{"time": "2021-02-23 21:24:38.890230", "score": "0.6273", "loss": "20.8523", "code": "@Test void shouldValidateClaimsParameter() throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 123, "n_pass": [1333, 401, 35]}
{"time": "2021-02-23 21:24:42.232491", "score": "0.6273", "loss": "20.8523", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,BadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 122, "n_pass": [1343, 402, 36]}
{"time": "2021-02-23 21:24:44.210478", "score": "0.6273", "loss": "20.908", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundExceptionBadRequestException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 121, "n_pass": [1347, 403, 37]}
{"time": "2021-02-23 21:24:46.162760", "score": "0.6295", "loss": "20.8834", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException, RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 120, "n_pass": [1348, 404, 38]}
{"time": "2021-02-23 21:24:48.140838", "score": "0.6295", "loss": "20.8834", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 119, "n_pass": [1350, 405, 39]}
{"time": "2021-02-23 21:24:50.077188", "score": "0.6253", "loss": "20.8316", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchExceptionInvalidScopeException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 118, "n_pass": [1352, 406, 40]}
{"time": "2021-02-23 21:24:52.022177", "score": "0.6306", "loss": "20.8336", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException, InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 117, "n_pass": [1353, 407, 41]}
{"time": "2021-02-23 21:24:53.985228", "score": "0.6306", "loss": "20.8336", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException, InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 116, "n_pass": [1355, 408, 42]}
{"time": "2021-02-23 21:24:55.923804", "score": "0.6306", "loss": "20.8336", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,ServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 115, "n_pass": [1358, 409, 43]}
{"time": "2021-02-23 21:24:57.846982", "score": "0.5902", "loss": "22.0761", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientExceptionServerException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 114, "n_pass": [1360, 410, 44]}
{"time": "2021-02-23 21:24:59.806895", "score": "0.5916", "loss": "22.3433", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException, UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 113, "n_pass": [1361, 411, 45]}
{"time": "2021-02-23 21:25:01.767444", "score": "0.5916", "loss": "22.3433", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException { OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 112, "n_pass": [1363, 412, 46]}
{"time": "2021-02-23 21:25:03.710845", "score": "0.5916", "loss": "22.3433", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{ OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 111, "n_pass": [1365, 413, 47]}
{"time": "2021-02-23 21:25:05.653951", "score": "0.5916", "loss": "22.3433", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth2Request mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 110, "n_pass": [1367, 414, 48]}
{"time": "2021-02-23 21:25:07.592730", "score": "0.5916", "loss": "22.3433", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuthRequest mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 109, "n_pass": [1369, 415, 49]}
{"time": "2021-02-23 21:25:09.515377", "score": "0.5939", "loss": "22.2243", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth mockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 108, "n_pass": [1370, 416, 50]}
{"time": "2021-02-23 21:25:11.438763", "score": "0.6083", "loss": "22.1947", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuthmockRequest = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 107, "n_pass": [1371, 417, 51]}
{"time": "2021-02-23 21:25:13.396467", "score": "0.6211", "loss": "22.5092", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth = mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 106, "n_pass": [1372, 418, 52]}
{"time": "2021-02-23 21:25:15.299448", "score": "0.6211", "loss": "22.5092", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth= mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 105, "n_pass": [1373, 419, 53]}
{"time": "2021-02-23 21:25:17.275012", "score": "0.6211", "loss": "22.5092", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=mock(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 104, "n_pass": [1375, 420, 54]}
{"time": "2021-02-23 21:25:19.211948", "score": "0.6271", "loss": "22.7105", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);OAuthProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 103, "n_pass": [1376, 421, 55]}
{"time": "2021-02-23 21:25:23.051351", "score": "0.6272", "loss": "22.7066", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);ProviderSettings (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 102, "n_pass": [1381, 423, 56]}
{"time": "2021-02-23 21:25:24.984705", "score": "0.6129", "loss": "23.0239", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth); (OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 101, "n_pass": [1382, 424, 57]}
{"time": "2021-02-23 21:25:26.954965", "score": "0.6129", "loss": "23.0239", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(OAuth2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 100, "n_pass": [1383, 425, 58]}
{"time": "2021-02-23 21:25:28.894565", "score": "0.6281", "loss": "22.762", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2); String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 99, "n_pass": [1385, 426, 59]}
{"time": "2021-02-23 21:25:30.847244", "score": "0.6281", "loss": "22.762", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);String responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 98, "n_pass": [1389, 427, 60]}
{"time": "2021-02-23 21:25:32.763003", "score": "0.6863", "loss": "24.1501", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2); responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 97, "n_pass": [1390, 428, 61]}
{"time": "2021-02-23 21:25:34.639189", "score": "0.6863", "loss": "24.1501", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes =\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 96, "n_pass": [1391, 429, 62]}
{"time": "2021-02-23 21:25:36.524031", "score": "0.6863", "loss": "24.1501", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token id_token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 95, "n_pass": [1393, 430, 63]}
{"time": "2021-02-23 21:25:42.250981", "score": "0.6196", "loss": "22.8125", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token _token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 94, "n_pass": [1398, 433, 64]}
{"time": "2021-02-23 21:25:44.161170", "score": "0.6196", "loss": "22.8125", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\"; given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 93, "n_pass": [1399, 434, 65]}
{"time": "2021-02-23 21:25:47.984213", "score": "0.6196", "loss": "22.8125", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";given(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 92, "n_pass": [1403, 436, 66]}
{"time": "2021-02-23 21:25:49.878129", "score": "0.6925", "loss": "24.3593", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn(mockProviderSettings);(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 91, "n_pass": [1404, 437, 67]}
{"time": "2021-02-23 21:25:54.154754", "score": "0.7051", "loss": "24.4674", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequestgetParameter(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 90, "n_pass": [1413, 439, 68]}
{"time": "2021-02-23 21:25:57.939302", "score": "0.7257", "loss": "25.4252", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuth2ConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 89, "n_pass": [1425, 441, 69]}
{"time": "2021-02-23 21:25:59.838820", "score": "0.7257", "loss": "25.4252", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthConstantsCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 88, "n_pass": [1428, 442, 70]}
{"time": "2021-02-23 21:26:01.750754", "score": "0.7188", "loss": "24.8935", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustomCLAIMS)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 87, "n_pass": [1429, 443, 71]}
{"time": "2021-02-23 21:26:05.516623", "score": "0.7023", "loss": "25.3028", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString); (mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 86, "n_pass": [1431, 445, 72]}
{"time": "2021-02-23 21:26:09.334800", "score": "0.7023", "loss": "25.3028", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,RedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 85, "n_pass": [1440, 447, 73]}
{"time": "2021-02-23 21:26:14.495218", "score": "0.7057", "loss": "25.4541", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundExceptionRedirectUriMismatchException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 84, "n_pass": [1469, 449, 74]}
{"time": "2021-02-23 21:26:16.381620", "score": "0.7067", "loss": "25.2981", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 83, "n_pass": [1470, 450, 75]}
{"time": "2021-02-23 21:26:18.303827", "score": "0.7068", "loss": "25.4051", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundExceptionInvalidRequestException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 82, "n_pass": [1471, 451, 76]}
{"time": "2021-02-23 21:26:20.183832", "score": "0.7085", "loss": "25.366", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth=(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 81, "n_pass": [1472, 452, 77]}
{"time": "2021-02-23 21:26:25.878265", "score": "0.6952", "loss": "25.0192", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth(OAuth);(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 80, "n_pass": [1479, 455, 78]}
{"time": "2021-02-23 21:26:27.787298", "score": "0.7089", "loss": "25.5196", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth();(2);responseTypes=\"token token\";(mockProviderSettingsFactory.get).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 79, "n_pass": [1481, 456, 79]}
{"time": "2021-02-23 21:26:35.407085", "score": "0.717", "loss": "26.1196", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth();(2);responseTypes=\"token token\";(mockProviderSettingsFactoryget).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 78, "n_pass": [1498, 460, 80]}
{"time": "2021-02-23 21:26:37.331419", "score": "0.714", "loss": "25.8783", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth();(2);responseTypes=\"token token\";(mockProviderSettingsFactory).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(OAuthCustom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 77, "n_pass": [1499, 461, 81]}
{"time": "2021-02-23 21:26:41.598324", "score": "0.7024", "loss": "25.6466", "code": "@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth();(2);responseTypes=\"token token\";(mockProviderSettingsFactory).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(Custom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}", "n_tokens": 76, "n_pass": [1516, 463, 82]}

Minimal simplified code:
@Test void shouldValidateClaimsParameter()throws NotFoundException,InvalidClientException,UnsupportedResponseTypeException{OAuth();(2);responseTypes="token token";(mockProviderSettingsFactory).willReturn();(getClaimsParameterSupported()).willReturn(mockRequest(Custom)).willReturn(validClaimsString);(mockRequest()).willReturn();claimsParameterValidator.validateRequest();}

