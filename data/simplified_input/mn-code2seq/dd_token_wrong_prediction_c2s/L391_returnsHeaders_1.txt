
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jamesdbloom__mockserver/mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest_returnsHeaders.java
method_name = returnsHeaders
method_body = @Test public void returnsHeaders() { assertEquals(new Header("name", "value"), new HttpResponse().withHeaders(new Header("name", "value")).getHeaderList().get(0)); assertEquals(new Header("name", "value"), new HttpResponse().withHeaders(Arrays.asList(new Header("name", "value"))).getHeaderList().get(0)); assertEquals(new Header("name", "value"), new HttpRequest().withHeader(new Header("name", "value")).getHeaderList().get(0)); assertEquals(new Header("name", "value_one", "value_two"), new HttpRequest().withHeader(new Header("name", "value_one")).withHeader(new Header("name", "value_two")).getHeaderList().get(0)); }
predict, score, loss = testGetHeaderList, 0.5462350845336914, 12.353761672973633

Trace of simplified code(s):
{"time": "2021-02-24 05:41:12.300145", "score": "0.4967", "loss": "12.0815", "code": "@Test public void returnsHeaders() { assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpRequest().withHeader(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value_one\", \"value_two\"), new HttpRequest().withHeader(new Header(\"name\", \"value_one\")).withHeader(new Header(\"name\", \"value_two\")).getHeaderList().get(0)); }", "n_tokens": 253, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 05:41:14.449520", "score": "0.5172", "loss": "11.5977", "code": "@Test public void returnsHeaders() { assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(\"value_two\"), new HttpRequest().withHeader(new Header(\"name\", \"value_one\")).withHeader(new Header(\"name\", \"value_two\")).getHeaderList().get(0)); }", "n_tokens": 190, "n_pass": [10, 2, 2]}
{"time": "2021-02-24 05:41:18.343261", "score": "0.5248", "loss": "11.8013", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse().withHeaders(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(\"value_two\"), new HttpRequest().withHeader(new Header(\"name\", \"value_one\")).withHeader(new Header(\"name\", \"value_two\")).getHeaderList().get(0)); }", "n_tokens": 175, "n_pass": [42, 4, 3]}
{"time": "2021-02-24 05:41:20.351746", "score": "0.4724", "loss": "11.2527", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse().withHeaders(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"name\", \"value_two\")).getHeaderList().get(0)); }", "n_tokens": 159, "n_pass": [49, 5, 4]}
{"time": "2021-02-24 05:41:22.316460", "score": "0.4707", "loss": "10.9409", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse().withHeaders(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 151, "n_pass": [83, 6, 5]}
{"time": "2021-02-24 05:41:30.868105", "score": "0.4903", "loss": "11.1707", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header(\"name\", \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 147, "n_pass": [149, 10, 6]}
{"time": "2021-02-24 05:41:32.758865", "score": "0.4935", "loss": "11.2277", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header( \"value\")).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 143, "n_pass": [151, 11, 7]}
{"time": "2021-02-24 05:41:34.668843", "score": "0.4937", "loss": "11.1077", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList().get(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 139, "n_pass": [152, 12, 8]}
{"time": "2021-02-24 05:41:36.587872", "score": "0.5394", "loss": "12.0612", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(\"name\", \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 135, "n_pass": [154, 13, 9]}
{"time": "2021-02-24 05:41:38.494854", "score": "0.5318", "loss": "12.1231", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header( \"value\"), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 131, "n_pass": [158, 14, 10]}
{"time": "2021-02-24 05:41:40.401932", "score": "0.5239", "loss": "12.0351", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header(\"name\", \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 127, "n_pass": [159, 15, 11]}
{"time": "2021-02-24 05:41:44.232539", "score": "0.5262", "loss": "12.0273", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).getHeaderList().get(0)); }", "n_tokens": 123, "n_pass": [173, 17, 12]}
{"time": "2021-02-24 05:41:46.137886", "score": "0.484", "loss": "11.546", "code": "@Test public void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 119, "n_pass": [179, 18, 13]}
{"time": "2021-02-24 05:41:53.174598", "score": "0.484", "loss": "11.546", "code": "@Test void returnsHeaders() { assertEquals(new HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 117, "n_pass": [276, 21, 14]}
{"time": "2021-02-24 05:41:55.137096", "score": "0.4927", "loss": "11.6925", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse().withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 115, "n_pass": [281, 22, 15]}
{"time": "2021-02-24 05:42:02.773402", "score": "0.5642", "loss": "13.491", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse.withHeaders(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 113, "n_pass": [296, 26, 16]}
{"time": "2021-02-24 05:42:04.696659", "score": "0.5735", "loss": "13.2967", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays.asList(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 111, "n_pass": [297, 27, 17]}
{"time": "2021-02-24 05:42:06.606779", "score": "0.5708", "loss": "13.007", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList().get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 109, "n_pass": [299, 28, 18]}
{"time": "2021-02-24 05:42:08.497601", "score": "0.605", "loss": "13.3836", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList.get(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 107, "n_pass": [309, 29, 19]}
{"time": "2021-02-24 05:42:10.403151", "score": "0.6508", "loss": "14.7381", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(new Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 105, "n_pass": [310, 30, 20]}
{"time": "2021-02-24 05:42:12.302579", "score": "0.6391", "loss": "15.0124", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(new Header( \"value_one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 103, "n_pass": [315, 31, 21]}
{"time": "2021-02-24 05:42:16.058855", "score": "0.6343", "loss": "15.0297", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(new Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(new Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 101, "n_pass": [320, 33, 22]}
{"time": "2021-02-24 05:42:20.282469", "score": "0.633", "loss": "15.1645", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(Header(), new HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(new Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 99, "n_pass": [349, 35, 23]}
{"time": "2021-02-24 05:42:22.169970", "score": "0.642", "loss": "15.5624", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(Header(), HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(new Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 97, "n_pass": [352, 36, 24]}
{"time": "2021-02-24 05:42:25.989792", "score": "0.6292", "loss": "15.6734", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(new Header()).getHeaderList(0)); assertEquals(Header(), HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 95, "n_pass": [369, 38, 25]}
{"time": "2021-02-24 05:42:28.369730", "score": "0.6219", "loss": "15.8148", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0)); assertEquals(Header(), HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 93, "n_pass": [392, 39, 26]}
{"time": "2021-02-24 05:42:40.913476", "score": "0.6219", "loss": "15.8148", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(), HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 92, "n_pass": [543, 42, 27]}
{"time": "2021-02-24 05:42:42.857460", "score": "0.6219", "loss": "15.8148", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(new Header(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 91, "n_pass": [550, 43, 28]}
{"time": "2021-02-24 05:42:50.409060", "score": "0.6123", "loss": "15.9821", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"name\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 90, "n_pass": [556, 47, 29]}
{"time": "2021-02-24 05:42:52.326990", "score": "0.6036", "loss": "15.7586", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\", \"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 89, "n_pass": [560, 48, 30]}
{"time": "2021-02-24 05:42:54.228551", "score": "0.6036", "loss": "15.7586", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"value\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 88, "n_pass": [563, 49, 31]}
{"time": "2021-02-24 05:42:56.116570", "score": "0.5948", "loss": "15.6414", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0)); assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 87, "n_pass": [565, 50, 32]}
{"time": "2021-02-24 05:42:59.914353", "score": "0.5948", "loss": "15.6414", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));assertEquals(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 86, "n_pass": [577, 52, 33]}
{"time": "2021-02-24 05:43:01.785061", "score": "0.6158", "loss": "15.2343", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(Header(Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 85, "n_pass": [578, 53, 34]}
{"time": "2021-02-24 05:43:03.702400", "score": "0.6452", "loss": "15.3426", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));((Header( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 84, "n_pass": [580, 54, 35]}
{"time": "2021-02-24 05:43:05.576477", "score": "0.6532", "loss": "15.4861", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));((( \"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 83, "n_pass": [582, 55, 36]}
{"time": "2021-02-24 05:43:07.469550", "score": "0.6532", "loss": "15.4861", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"one\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 82, "n_pass": [584, 56, 37]}
{"time": "2021-02-24 05:43:09.387334", "score": "0.6488", "loss": "15.364", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader(new Header(\"\")).get(0)); }", "n_tokens": 81, "n_pass": [586, 57, 38]}
{"time": "2021-02-24 05:43:11.290965", "score": "0.6348", "loss": "15.473", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader( Header(\"\")).get(0)); }", "n_tokens": 80, "n_pass": [593, 58, 39]}
{"time": "2021-02-24 05:43:13.130644", "score": "0.6348", "loss": "15.473", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader(Header(\"\")).get(0)); }", "n_tokens": 79, "n_pass": [594, 59, 40]}
{"time": "2021-02-24 05:43:15.036905", "score": "0.67", "loss": "15.7856", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get(0)); }", "n_tokens": 78, "n_pass": [595, 60, 41]}
{"time": "2021-02-24 05:43:16.893310", "score": "0.6186", "loss": "15.7392", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get()); }", "n_tokens": 77, "n_pass": [604, 61, 42]}
{"time": "2021-02-24 05:43:18.799265", "score": "0.6186", "loss": "15.7392", "code": "@Test void returnsHeaders() { assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 76, "n_pass": [608, 62, 43]}
{"time": "2021-02-24 05:43:22.007897", "score": "0.6186", "loss": "15.7392", "code": "@Test void returnsHeaders(){ assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 75, "n_pass": [618, 63, 44]}
{"time": "2021-02-24 05:43:23.867655", "score": "0.6186", "loss": "15.7392", "code": "@Test void returnsHeaders(){assertEquals(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 74, "n_pass": [620, 64, 45]}
{"time": "2021-02-24 05:43:25.730645", "score": "0.5721", "loss": "15.9643", "code": "@Test void returnsHeaders(){(HttpResponse(Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 73, "n_pass": [621, 65, 46]}
{"time": "2021-02-24 05:43:27.584699", "score": "0.6215", "loss": "16.5722", "code": "@Test void returnsHeaders(){((Header()).getHeaderList(0));assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 72, "n_pass": [623, 66, 47]}
{"time": "2021-02-24 05:43:29.537366", "score": "0.588", "loss": "15.7744", "code": "@Test void returnsHeaders(){((Header()).getHeaderList());assertEquals(Header(),HttpResponse(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 71, "n_pass": [632, 67, 48]}
{"time": "2021-02-24 05:43:31.392017", "score": "0.6654", "loss": "17.5448", "code": "@Test void returnsHeaders(){((Header()).getHeaderList());assertEquals(Header(),(Arrays(newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 70, "n_pass": [642, 68, 49]}
{"time": "2021-02-24 05:43:33.453164", "score": "0.6948", "loss": "18.0375", "code": "@Test void returnsHeaders(){((Header()).getHeaderList());assertEquals(Header(),((newHeader(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 69, "n_pass": [644, 69, 50]}
{"time": "2021-02-24 05:43:35.300344", "score": "0.6678", "loss": "17.6827", "code": "@Test void returnsHeaders(){((Header()).getHeaderList());assertEquals(Header(),((Header(\"\",\"\"))).getHeaderList(0));(((\"\")).withHeader((\"\")).get());}", "n_tokens": 68, "n_pass": [646, 70, 51]}

Minimal simplified code:
@Test void returnsHeaders(){((Header()).getHeaderList());assertEquals(Header(),((Header("",""))).getHeaderList(0));((("")).withHeader(("")).get());}

