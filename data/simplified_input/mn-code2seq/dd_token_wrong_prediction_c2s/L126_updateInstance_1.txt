
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-uma/src/main/java/org/forgerock/openam/uma/rest/UmaPolicyResource_updateInstance.java
method_name = updateInstance
method_body = @Override public Promise<ResourceResponse, ResourceException> updateInstance(Context context, String resourceId, UpdateRequest request) { return umaPolicyService.updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(), result.getRevision(), result.asJson())); } }); }
predict, score, loss = updatePolicy, 0.985974907875061, 10.57235336303711

Trace of simplified code(s):
{"time": "2021-02-24 08:06:46.563422", "score": "0.9796", "loss": "10.0985", "code": "@Override public Promise<ResourceResponse, ResourceException> updateInstance(Context context, String resourceId, UpdateRequest request) { return umaPolicyService.updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(), result.getRevision(), result.asJson())); } }); }", "n_tokens": 128, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 08:06:48.592602", "score": "0.9761", "loss": "9.9916", "code": "@Override public Promise<ResourceResponse, ResourceException> updateInstance(Context context, String resourceId, UpdateRequest request) { return umaPolicyService.updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 120, "n_pass": [57, 2, 2]}
{"time": "2021-02-24 08:06:50.586499", "score": "0.9662", "loss": "8.9206", "code": " Promise<ResourceResponse, ResourceException> updateInstance(Context context, String resourceId, UpdateRequest request) { return umaPolicyService.updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 116, "n_pass": [106, 3, 3]}
{"time": "2021-02-24 08:06:52.522163", "score": "0.9539", "loss": "8.6657", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { return umaPolicyService.updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 112, "n_pass": [109, 4, 4]}
{"time": "2021-02-24 08:06:54.482008", "score": "0.9616", "loss": "9.2168", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context, resourceId, request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 108, "n_pass": [113, 5, 5]}
{"time": "2021-02-24 08:06:56.414429", "score": "0.9665", "loss": "9.6746", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context,request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override public Promise<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 104, "n_pass": [115, 6, 6]}
{"time": "2021-02-24 08:06:58.350941", "score": "0.8791", "loss": "8.8329", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context,request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.getId(),result.asJson())); } }); }", "n_tokens": 100, "n_pass": [123, 7, 7]}
{"time": "2021-02-24 08:07:00.254236", "score": "0.9191", "loss": "9.4803", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context,request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.result.asJson())); } }); }", "n_tokens": 96, "n_pass": [130, 8, 8]}
{"time": "2021-02-24 08:07:02.241418", "score": "0.9274", "loss": "9.5811", "code": " Promise<ResourceResponse, ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context,request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 94, "n_pass": [203, 9, 9]}
{"time": "2021-02-24 08:07:04.640798", "score": "0.9291", "loss": "9.7522", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(context,request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 92, "n_pass": [212, 10, 10]}
{"time": "2021-02-24 08:07:06.532140", "score": "0.8547", "loss": "8.832", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(request.getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 90, "n_pass": [223, 11, 11]}
{"time": "2021-02-24 08:07:08.473304", "score": "0.7334", "loss": "8.3771", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicy, ResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 88, "n_pass": [224, 12, 12]}
{"time": "2021-02-24 08:07:10.415909", "score": "0.7521", "loss": "8.0207", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { @Override<ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 86, "n_pass": [231, 13, 13]}
{"time": "2021-02-24 08:07:12.330103", "score": "0.7665", "loss": "7.9825", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponse, ResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 84, "n_pass": [237, 14, 14]}
{"time": "2021-02-24 08:07:14.248764", "score": "0.736", "loss": "7.782", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { return newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 82, "n_pass": [239, 15, 15]}
{"time": "2021-02-24 08:07:16.142558", "score": "0.7218", "loss": "7.9037", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(result.asJson())); } }); }", "n_tokens": 80, "n_pass": [246, 16, 16]}
{"time": "2021-02-24 08:07:18.100718", "score": "0.7159", "loss": "7.9971", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson())); } }); }", "n_tokens": 78, "n_pass": [249, 17, 17]}
{"time": "2021-02-24 08:07:29.118461", "score": "0.7159", "loss": "7.9971", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));} }); }", "n_tokens": 77, "n_pass": [373, 18, 18]}
{"time": "2021-02-24 08:07:31.009043", "score": "0.7159", "loss": "7.9971", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}}); }", "n_tokens": 76, "n_pass": [374, 19, 19]}
{"time": "2021-02-24 08:07:32.894579", "score": "0.7159", "loss": "7.9971", "code": " Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 75, "n_pass": [378, 20, 20]}
{"time": "2021-02-24 08:07:34.794428", "score": "0.7159", "loss": "7.9971", "code": "Promise<ResourceResponseResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 74, "n_pass": [380, 21, 21]}
{"time": "2021-02-24 08:07:37.086936", "score": "0.7028", "loss": "8.1169", "code": "Promise<ResourceException> updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 73, "n_pass": [383, 22, 22]}
{"time": "2021-02-24 08:07:38.998015", "score": "0.7028", "loss": "8.1169", "code": "Promise<ResourceException>updateInstance(ContextString resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 72, "n_pass": [386, 23, 23]}
{"time": "2021-02-24 08:07:40.921902", "score": "0.7044", "loss": "7.9828", "code": "Promise<ResourceException>updateInstance(String resourceId, UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 71, "n_pass": [389, 24, 24]}
{"time": "2021-02-24 08:07:42.780718", "score": "0.7044", "loss": "7.9828", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request) { updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 70, "n_pass": [394, 25, 25]}
{"time": "2021-02-24 08:07:44.682580", "score": "0.7044", "loss": "7.9828", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){ updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 69, "n_pass": [399, 26, 26]}
{"time": "2021-02-24 08:07:46.582333", "score": "0.7044", "loss": "7.9828", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<UmaPolicyResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 68, "n_pass": [401, 27, 27]}
{"time": "2021-02-24 08:07:50.385738", "score": "0.7205", "loss": "7.518", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse, ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 67, "n_pass": [415, 29, 28]}
{"time": "2021-02-24 08:07:52.271345", "score": "0.7205", "loss": "7.518", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>() { <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 66, "n_pass": [418, 30, 29]}
{"time": "2021-02-24 08:07:54.168003", "score": "0.7205", "loss": "7.518", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){ <ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 65, "n_pass": [423, 31, 30]}
{"time": "2021-02-24 08:07:56.074197", "score": "0.7205", "loss": "7.518", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceResponseResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 64, "n_pass": [425, 32, 31]}
{"time": "2021-02-24 08:07:57.972649", "score": "0.6932", "loss": "7.633", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException> apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 63, "n_pass": [427, 33, 32]}
{"time": "2021-02-24 08:07:59.897577", "score": "0.6932", "loss": "7.633", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException>apply(UmaPolicy result) { newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 62, "n_pass": [430, 34, 33]}
{"time": "2021-02-24 08:08:01.784791", "score": "0.6932", "loss": "7.633", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException>apply(UmaPolicy result){ newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 61, "n_pass": [437, 35, 34]}
{"time": "2021-02-24 08:08:03.708826", "score": "0.6932", "loss": "7.633", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException>apply(UmaPolicy result){newResultPromise(newResourceResponse(asJson()));}});}", "n_tokens": 60, "n_pass": [439, 36, 35]}
{"time": "2021-02-24 08:08:05.554728", "score": "0.7584", "loss": "8.1163", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException>apply(UmaPolicy result){(newResourceResponse(asJson()));}});}", "n_tokens": 59, "n_pass": [440, 37, 36]}
{"time": "2021-02-24 08:08:07.399890", "score": "0.8084", "loss": "9.008", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse,ResourceException>(){<ResourceException>apply(UmaPolicy result){((asJson()));}});}", "n_tokens": 58, "n_pass": [442, 38, 37]}
{"time": "2021-02-24 08:08:11.647781", "score": "0.7887", "loss": "8.904", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponseResourceException>(){<ResourceException>apply(UmaPolicy result){((asJson()));}});}", "n_tokens": 57, "n_pass": [484, 40, 38]}
{"time": "2021-02-24 08:08:13.559324", "score": "0.7654", "loss": "8.8573", "code": "Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse>(){<ResourceException>apply(UmaPolicy result){((asJson()));}});}", "n_tokens": 56, "n_pass": [485, 41, 39]}

Minimal simplified code:
Promise<ResourceException>updateInstance(String resourceId,UpdateRequest request){updatePolicy(getContent()).thenAsync(new AsyncFunction<ResourceResponse>(){<ResourceException>apply(UmaPolicy result){((asJson()));}});}

