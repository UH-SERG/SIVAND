
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__apex-core/engine/src/test/java/com/datatorrent/stram/engine/RecoverableInputOperator_beforeCheckpoint.java
method_name = beforeCheckpoint
method_body = @Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId == 0) { checkpointedWindowId = windowId; } logger.debug("{}, windowId={}", this, Codec.getStringWindowId(windowId)); }
predict, score, loss = setWindowId, 0.7886028289794922, 23.27808952331543

Trace of simplified code(s):
{"time": "2021-02-23 20:13:01.109021", "score": "0.7886", "loss": "23.2781", "code": "@Override public void beforeCheckpoint(long windowId) { if (checkpointedWindowId == 0) { checkpointedWindowId = windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 67, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 20:13:02.993648", "score": "0.8574", "loss": "22.6728", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId == 0) { checkpointedWindowId = windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 63, "n_pass": [44, 2, 2]}
{"time": "2021-02-23 20:13:04.894739", "score": "0.8789", "loss": "23.4752", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { checkpointedWindowId = windowId; } logger.debug(\"{}, windowId={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 59, "n_pass": [48, 3, 3]}
{"time": "2021-02-23 20:13:08.603299", "score": "0.8648", "loss": "21.4032", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { checkpointedWindowId = windowId; } logger.debug(\"{={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 55, "n_pass": [54, 5, 4]}
{"time": "2021-02-23 20:13:10.434248", "score": "0.7223", "loss": "24.1722", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", this, Codec.getStringWindowId(windowId)); }", "n_tokens": 51, "n_pass": [64, 6, 5]}
{"time": "2021-02-23 20:13:20.118400", "score": "0.728", "loss": "24.1827", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\",  Codec.getStringWindowId(windowId)); }", "n_tokens": 49, "n_pass": [110, 11, 6]}
{"time": "2021-02-23 20:13:33.533505", "score": "0.728", "loss": "24.1827", "code": " void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 48, "n_pass": [180, 15, 7]}
{"time": "2021-02-23 20:13:37.243011", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId) { if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 47, "n_pass": [187, 17, 8]}
{"time": "2021-02-23 20:13:39.973146", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){ if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 46, "n_pass": [196, 18, 9]}
{"time": "2021-02-23 20:13:41.822112", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if (checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 45, "n_pass": [198, 19, 10]}
{"time": "2021-02-23 20:13:43.661984", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId0) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 44, "n_pass": [200, 20, 11]}
{"time": "2021-02-23 20:13:47.393962", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId) { windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 43, "n_pass": [203, 22, 12]}
{"time": "2021-02-23 20:13:49.246557", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){ windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 42, "n_pass": [205, 23, 13]}
{"time": "2021-02-23 20:13:51.095505", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId; } logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 41, "n_pass": [207, 24, 14]}
{"time": "2021-02-23 20:13:54.785929", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;} logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 40, "n_pass": [210, 26, 15]}
{"time": "2021-02-23 20:13:56.615134", "score": "0.728", "loss": "24.1827", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger.debug(\"{={}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 39, "n_pass": [212, 27, 16]}
{"time": "2021-02-23 20:14:02.159355", "score": "0.8157", "loss": "24.1463", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger.debug(\"{{}\", Codec.getStringWindowId(windowId)); }", "n_tokens": 38, "n_pass": [219, 30, 17]}
{"time": "2021-02-23 20:14:07.780289", "score": "0.8157", "loss": "24.1463", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger.debug(\"{{}\",Codec.getStringWindowId(windowId)); }", "n_tokens": 37, "n_pass": [224, 33, 18]}
{"time": "2021-02-23 20:14:09.598039", "score": "0.7357", "loss": "25.0487", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger.debug(\"{{}\",CodecgetStringWindowId(windowId)); }", "n_tokens": 36, "n_pass": [226, 34, 19]}
{"time": "2021-02-23 20:14:16.049341", "score": "0.7846", "loss": "24.3568", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}loggerdebug(\"{{}\",CodecgetStringWindowId(windowId)); }", "n_tokens": 35, "n_pass": [250, 37, 20]}
{"time": "2021-02-23 20:14:17.853515", "score": "0.812", "loss": "25.4494", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger(\"{{}\",CodecgetStringWindowId(windowId)); }", "n_tokens": 34, "n_pass": [251, 38, 21]}
{"time": "2021-02-23 20:14:25.190868", "score": "0.8521", "loss": "24.1445", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger(\"{{}\",getStringWindowId(windowId)); }", "n_tokens": 33, "n_pass": [259, 42, 22]}
{"time": "2021-02-23 20:14:27.040149", "score": "0.9041", "loss": "21.8348", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){windowId;}logger(\"{{}\",(windowId)); }", "n_tokens": 32, "n_pass": [260, 43, 23]}
{"time": "2021-02-23 20:14:29.771884", "score": "0.8483", "loss": "20.2154", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){;}logger(\"{{}\",(windowId)); }", "n_tokens": 31, "n_pass": [279, 44, 24]}
{"time": "2021-02-23 20:14:31.604489", "score": "0.8483", "loss": "20.2154", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){}logger(\"{{}\",(windowId)); }", "n_tokens": 30, "n_pass": [280, 45, 25]}
{"time": "2021-02-23 20:14:40.644157", "score": "0.8483", "loss": "20.2154", "code": "void beforeCheckpoint(long windowId){if(checkpointedWindowId){}logger(\"{{}\",(windowId));}", "n_tokens": 29, "n_pass": [318, 49, 26]}

Minimal simplified code:
void beforeCheckpoint(long windowId){if(checkpointedWindowId){}logger("{{}",(windowId));}

