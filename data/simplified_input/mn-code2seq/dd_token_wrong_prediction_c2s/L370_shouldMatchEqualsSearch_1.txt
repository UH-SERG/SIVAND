
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/test/java/org/forgerock/openam/sm/ServiceConfigQueryFilterVisitorTest_shouldMatchEqualsSearch.java
method_name = shouldMatchEqualsSearch
method_body = @Test public void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo("param1", "value1"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }
predict, score, loss = shouldFilter, 0.4538538455963135, 19.95987319946289

Trace of simplified code(s):
{"time": "2021-02-24 08:21:22.306632", "score": "0.4539", "loss": "19.9599", "code": "@Test public void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 65, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 08:21:30.773582", "score": "0.4539", "loss": "19.9599", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter.accept(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 63, "n_pass": [93, 5, 2]}
{"time": "2021-02-24 08:21:35.977986", "score": "0.6759", "loss": "19.48", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor, serviceConfig); assertThat(result).isTrue(); }", "n_tokens": 61, "n_pass": [114, 7, 3]}
{"time": "2021-02-24 08:21:37.883328", "score": "0.4703", "loss": "18.6662", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitorserviceConfig); assertThat(result).isTrue(); }", "n_tokens": 59, "n_pass": [116, 8, 4]}
{"time": "2021-02-24 08:21:55.512932", "score": "0.6334", "loss": "18.6661", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor); assertThat(result).isTrue(); }", "n_tokens": 58, "n_pass": [204, 13, 5]}
{"time": "2021-02-24 08:21:57.398853", "score": "0.6334", "loss": "18.6661", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat(result).isTrue(); }", "n_tokens": 57, "n_pass": [206, 14, 6]}
{"time": "2021-02-24 08:22:01.143408", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch() { QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 56, "n_pass": [209, 16, 7]}
{"time": "2021-02-24 08:22:04.401888", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch(){ QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 55, "n_pass": [225, 17, 8]}
{"time": "2021-02-24 08:22:06.299929", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String> queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 54, "n_pass": [227, 18, 9]}
{"time": "2021-02-24 08:22:08.704553", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter = equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 53, "n_pass": [232, 19, 10]}
{"time": "2021-02-24 08:22:10.559867", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter= equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 52, "n_pass": [234, 20, 11]}
{"time": "2021-02-24 08:22:12.416827", "score": "0.6611", "loss": "18.8288", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"param1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 51, "n_pass": [236, 21, 12]}
{"time": "2021-02-24 08:22:14.269803", "score": "0.6864", "loss": "18.3257", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"1\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 50, "n_pass": [240, 22, 13]}
{"time": "2021-02-24 08:22:16.168693", "score": "0.69", "loss": "19.0064", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\", \"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 49, "n_pass": [241, 23, 14]}
{"time": "2021-02-24 08:22:18.072989", "score": "0.69", "loss": "19.0064", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"value1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 48, "n_pass": [244, 24, 15]}
{"time": "2021-02-24 08:22:19.951668", "score": "0.6938", "loss": "18.7324", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\"); boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 47, "n_pass": [246, 25, 16]}
{"time": "2021-02-24 08:22:23.691806", "score": "0.6938", "loss": "18.7324", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result = queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 46, "n_pass": [251, 27, 17]}
{"time": "2021-02-24 08:22:29.362914", "score": "0.6938", "loss": "18.7324", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result= queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 45, "n_pass": [255, 30, 18]}
{"time": "2021-02-24 08:22:31.233311", "score": "0.6938", "loss": "18.7324", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result=queryFilter(filterVisitor);assertThat().isTrue(); }", "n_tokens": 44, "n_pass": [257, 31, 19]}
{"time": "2021-02-24 08:22:33.135900", "score": "0.4954", "loss": "19.5817", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result=(filterVisitor);assertThat().isTrue(); }", "n_tokens": 43, "n_pass": [258, 32, 20]}
{"time": "2021-02-24 08:22:35.037635", "score": "0.473", "loss": "18.7096", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result=(filterVisitor)assertThat().isTrue(); }", "n_tokens": 42, "n_pass": [262, 33, 21]}
{"time": "2021-02-24 08:22:46.115948", "score": "0.473", "loss": "18.7096", "code": "@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo(\"\",\"1\");boolean result=(filterVisitor)assertThat().isTrue();}", "n_tokens": 41, "n_pass": [306, 37, 22]}

Minimal simplified code:
@Test void shouldMatchEqualsSearch(){QueryFilter<String>queryFilter=equalTo("","1");boolean result=(filterVisitor)assertThat().isTrue();}

