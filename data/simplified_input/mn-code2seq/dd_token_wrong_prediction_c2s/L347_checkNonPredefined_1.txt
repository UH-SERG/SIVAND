
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/test/java/org/bouncycastle/asn1/test/TypeOfBiometricDataUnitTest_checkNonPredefined.java
method_name = checkNonPredefined
method_body = private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail("predefined type found when not expected."); } if (!type.getBiometricDataOid().equals(value)) { fail("data oid does not match."); } }
predict, score, loss = checkOid, 0.3694548010826111, 16.659961700439453

Trace of simplified code(s):
{"time": "2021-02-23 19:20:40.871906", "score": "0.3695", "loss": "16.66", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined type found when not expected.\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 91, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:20:42.756997", "score": "0.3978", "loss": "18.3702", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined not expected.\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 85, "n_pass": [51, 2, 2]}
{"time": "2021-02-23 19:20:44.670456", "score": "0.3968", "loss": "18.9319", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals(value)) { fail(\"data oid does not match.\"); } }", "n_tokens": 82, "n_pass": [97, 3, 3]}
{"time": "2021-02-23 19:20:46.545100", "score": "0.4231", "loss": "18.8567", "code": "private void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 79, "n_pass": [103, 4, 4]}
{"time": "2021-02-23 19:20:52.200483", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type, ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 77, "n_pass": [112, 7, 5]}
{"time": "2021-02-23 19:21:04.871038", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type,ASN1ObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 76, "n_pass": [202, 11, 6]}
{"time": "2021-02-23 19:21:06.736371", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value) { if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 75, "n_pass": [204, 12, 7]}
{"time": "2021-02-23 19:21:10.484936", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){ if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 74, "n_pass": [209, 14, 8]}
{"time": "2021-02-23 19:21:12.354209", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if (type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 73, "n_pass": [211, 15, 9]}
{"time": "2021-02-23 19:21:14.221459", "score": "0.4231", "loss": "18.8567", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type.isPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 72, "n_pass": [213, 16, 10]}
{"time": "2021-02-23 19:21:16.072365", "score": "0.4209", "loss": "19.5466", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(typeisPredefined()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 71, "n_pass": [216, 17, 11]}
{"time": "2021-02-23 19:21:17.914525", "score": "0.4528", "loss": "20.5883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()) { fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 70, "n_pass": [217, 18, 12]}
{"time": "2021-02-23 19:21:19.792515", "score": "0.4528", "loss": "20.5883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){ fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 69, "n_pass": [221, 19, 13]}
{"time": "2021-02-23 19:21:21.696785", "score": "0.4528", "loss": "20.5883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){fail(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 68, "n_pass": [223, 20, 14]}
{"time": "2021-02-23 19:21:23.577055", "score": "0.499", "loss": "20.1269", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\"predefined .\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 67, "n_pass": [224, 21, 15]}
{"time": "2021-02-23 19:21:25.459355", "score": "0.4942", "loss": "20.5925", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid().equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 65, "n_pass": [226, 22, 16]}
{"time": "2021-02-23 19:21:29.230869", "score": "0.4811", "loss": "21.0106", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid.equals) { fail(\"data oid does not match.\"); } }", "n_tokens": 63, "n_pass": [234, 24, 17]}
{"time": "2021-02-23 19:21:31.073681", "score": "0.4595", "loss": "20.4022", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid) { fail(\"data oid does not match.\"); } }", "n_tokens": 61, "n_pass": [235, 25, 18]}
{"time": "2021-02-23 19:21:36.655924", "score": "0.4416", "loss": "20.9146", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid) { fail(\"data oid does match.\"); } }", "n_tokens": 59, "n_pass": [242, 28, 19]}
{"time": "2021-02-23 19:21:38.527613", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid) { fail(\"data oid does.\"); } }", "n_tokens": 57, "n_pass": [243, 29, 20]}
{"time": "2021-02-23 19:21:55.291645", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid) { fail(\"data oid does.\");} }", "n_tokens": 56, "n_pass": [321, 35, 21]}
{"time": "2021-02-23 19:21:57.154264", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\"); } if (!type.getBiometricDataOid) { fail(\"data oid does.\");}}", "n_tokens": 55, "n_pass": [322, 36, 22]}
{"time": "2021-02-23 19:22:05.527321", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");} if (!type.getBiometricDataOid) { fail(\"data oid does.\");}}", "n_tokens": 54, "n_pass": [351, 40, 23]}
{"time": "2021-02-23 19:22:07.397161", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if (!type.getBiometricDataOid) { fail(\"data oid does.\");}}", "n_tokens": 53, "n_pass": [353, 41, 24]}
{"time": "2021-02-23 19:22:09.242633", "score": "0.3743", "loss": "19.5725", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(!type.getBiometricDataOid) { fail(\"data oid does.\");}}", "n_tokens": 52, "n_pass": [355, 42, 25]}
{"time": "2021-02-23 19:22:11.073218", "score": "0.3453", "loss": "20.2883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid) { fail(\"data oid does.\");}}", "n_tokens": 51, "n_pass": [357, 43, 26]}
{"time": "2021-02-23 19:22:14.828489", "score": "0.3453", "loss": "20.2883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){ fail(\"data oid does.\");}}", "n_tokens": 50, "n_pass": [362, 45, 27]}
{"time": "2021-02-23 19:22:16.703085", "score": "0.3453", "loss": "20.2883", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\"data oid does.\");}}", "n_tokens": 49, "n_pass": [364, 46, 28]}
{"time": "2021-02-23 19:22:20.383622", "score": "0.4657", "loss": "20.3165", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\" oid does.\");}}", "n_tokens": 48, "n_pass": [368, 48, 29]}
{"time": "2021-02-23 19:22:22.241670", "score": "0.4657", "loss": "20.3165", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\"oid does.\");}}", "n_tokens": 47, "n_pass": [369, 49, 30]}
{"time": "2021-02-23 19:22:27.909211", "score": "0.4866", "loss": "20.7522", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\"oid .\");}}", "n_tokens": 46, "n_pass": [372, 52, 31]}
{"time": "2021-02-23 19:22:29.770723", "score": "0.5498", "loss": "21.448", "code": "void checkNonPredefined(TypeOfBiometricData type,ASNObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\"oid \");}}", "n_tokens": 45, "n_pass": [373, 53, 32]}
{"time": "2021-02-23 19:22:32.510855", "score": "0.4844", "loss": "20.8894", "code": "void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){(\".\");}if(type.getBiometricDataOid){fail(\"oid \");}}", "n_tokens": 44, "n_pass": [387, 54, 33]}
{"time": "2021-02-23 19:22:34.386188", "score": "0.4419", "loss": "20.644", "code": "void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){(\"\");}if(type.getBiometricDataOid){fail(\"oid \");}}", "n_tokens": 43, "n_pass": [402, 55, 34]}
{"time": "2021-02-23 19:22:36.250038", "score": "0.3396", "loss": "20.4128", "code": "void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){(\"\");}if(typegetBiometricDataOid){fail(\"oid \");}}", "n_tokens": 42, "n_pass": [410, 56, 35]}
{"time": "2021-02-23 19:22:43.620995", "score": "0.3396", "loss": "20.4128", "code": "void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){(\"\");}if(typegetBiometricDataOid){fail(\"oid\");}}", "n_tokens": 41, "n_pass": [418, 60, 36]}
{"time": "2021-02-23 19:22:46.389270", "score": "0.3925", "loss": "20.3314", "code": "void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){(\"\");}if(getBiometricDataOid){fail(\"oid\");}}", "n_tokens": 40, "n_pass": [452, 61, 37]}

Minimal simplified code:
void checkNonPredefined(TypeOfBiometricData type,ObjectIdentifier value){if(type()){("");}if(getBiometricDataOid){fail("oid");}}

