
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/pagehelper__Mybatis-PageHelper/src/test/java/com/github/pagehelper/test/basic/PageHelperTest_shouldGetAllCountries.java
method_name = shouldGetAllCountries
method_body = @Test public void shouldGetAllCountries() { SqlSession sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList("selectAll"); assertEquals(183, list.size()); } finally { sqlSession.close(); } }
predict, score, loss = testSelectSelectAll, 0.610474705696106, 21.60015869140625

Trace of simplified code(s):
{"time": "2021-02-24 01:05:56.900261", "score": "0.6105", "loss": "21.6002", "code": "@Test public void shouldGetAllCountries() { SqlSession sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally { sqlSession.close(); } }", "n_tokens": 80, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 01:06:06.741571", "score": "0.6416", "loss": "22.1933", "code": "@Test public void shouldGetAllCountries() { SqlSession sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally { ; } }", "n_tokens": 75, "n_pass": [58, 6, 2]}
{"time": "2021-02-24 01:06:15.175330", "score": "0.6416", "loss": "22.1933", "code": "@Test public void shouldGetAllCountries() { SqlSession sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 72, "n_pass": [103, 10, 3]}
{"time": "2021-02-24 01:06:18.949415", "score": "0.6416", "loss": "22.1933", "code": "@Test void shouldGetAllCountries() { SqlSession sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 70, "n_pass": [106, 12, 4]}
{"time": "2021-02-24 01:06:21.286212", "score": "0.6372", "loss": "21.6387", "code": "@Test void shouldGetAllCountries() { sqlSession = MybatisHelper.getSqlSession(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 68, "n_pass": [111, 13, 5]}
{"time": "2021-02-24 01:06:23.175279", "score": "0.656", "loss": "23.081", "code": "@Test void shouldGetAllCountries() { sqlSession = MybatisHelper(); try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 66, "n_pass": [115, 14, 6]}
{"time": "2021-02-24 01:06:25.079065", "score": "0.6228", "loss": "24.3212", "code": "@Test void shouldGetAllCountries() { sqlSession = MybatisHelper; try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 64, "n_pass": [116, 15, 7]}
{"time": "2021-02-24 01:06:32.313906", "score": "0.657", "loss": "21.8099", "code": "@Test void shouldGetAllCountries() { sqlSession MybatisHelper; try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 62, "n_pass": [140, 18, 8]}
{"time": "2021-02-24 01:06:34.197107", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession; try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 60, "n_pass": [141, 19, 9]}
{"time": "2021-02-24 01:06:48.589920", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try { List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 59, "n_pass": [212, 23, 10]}
{"time": "2021-02-24 01:06:50.493234", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try{ List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 58, "n_pass": [214, 24, 11]}
{"time": "2021-02-24 01:06:52.364397", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country> list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 57, "n_pass": [216, 25, 12]}
{"time": "2021-02-24 01:06:54.700552", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country>list = sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 56, "n_pass": [221, 26, 13]}
{"time": "2021-02-24 01:06:56.558275", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country>list= sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 55, "n_pass": [223, 27, 14]}
{"time": "2021-02-24 01:06:58.476797", "score": "0.6085", "loss": "20.1858", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(183, list.size()); } finally {} }", "n_tokens": 54, "n_pass": [225, 28, 15]}
{"time": "2021-02-24 01:07:02.262477", "score": "0.601", "loss": "21.3916", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, list.size()); } finally {} }", "n_tokens": 52, "n_pass": [235, 30, 16]}
{"time": "2021-02-24 01:07:04.120746", "score": "0.6691", "loss": "22.0841", "code": "@Test void shouldGetAllCountries() { sqlSession;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, size()); } finally {} }", "n_tokens": 50, "n_pass": [237, 31, 17]}
{"time": "2021-02-24 01:07:07.450819", "score": "0.6691", "loss": "22.0841", "code": "@Test void shouldGetAllCountries(){ sqlSession;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, size()); } finally {} }", "n_tokens": 49, "n_pass": [253, 32, 18]}
{"time": "2021-02-24 01:07:09.307520", "score": "0.6691", "loss": "22.0841", "code": "@Test void shouldGetAllCountries(){sqlSession;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, size()); } finally {} }", "n_tokens": 48, "n_pass": [255, 33, 19]}
{"time": "2021-02-24 01:07:11.197122", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){;try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, size()); } finally {} }", "n_tokens": 47, "n_pass": [256, 34, 20]}
{"time": "2021-02-24 01:07:13.103767", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\"); assertEquals(1, size()); } finally {} }", "n_tokens": 46, "n_pass": [257, 35, 21]}
{"time": "2021-02-24 01:07:25.256784", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1, size()); } finally {} }", "n_tokens": 45, "n_pass": [320, 38, 22]}
{"time": "2021-02-24 01:07:27.128934", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1,size()); } finally {} }", "n_tokens": 44, "n_pass": [324, 39, 23]}
{"time": "2021-02-24 01:07:29.020485", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1,size());} finally {} }", "n_tokens": 43, "n_pass": [330, 40, 24]}
{"time": "2021-02-24 01:07:30.950704", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1,size());}finally {} }", "n_tokens": 42, "n_pass": [332, 41, 25]}
{"time": "2021-02-24 01:07:32.849513", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1,size());}finally{} }", "n_tokens": 41, "n_pass": [334, 42, 26]}
{"time": "2021-02-24 01:07:34.731355", "score": "0.6318", "loss": "22.4275", "code": "@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList(\"selectAll\");assertEquals(1,size());}finally{}}", "n_tokens": 40, "n_pass": [337, 43, 27]}

Minimal simplified code:
@Test void shouldGetAllCountries(){try{List<Country>list=sqlSession.selectList("selectAll");assertEquals(1,size());}finally{}}

