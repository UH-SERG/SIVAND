
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/prng/X931RNG_process.java
method_name = process
method_body = private void process(byte[] res, byte[] a, byte[] b) { for (int i = 0; i != res.length; i++) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res, 0, res, 0); }
predict, score, loss = processBlock, 0.6361278891563416, 3.201464891433716

Trace of simplified code(s):
{"time": "2021-02-24 07:54:36.564544", "score": "0.5689", "loss": "3.4299", "code": "private void process(byte[] res, byte[] a, byte[] b) { for (int i = 0; i != res.length; i++) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res, 0, res, 0); }", "n_tokens": 104, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:54:38.998150", "score": "0.5037", "loss": "3.3115", "code": "private void process( byte[] a, byte[] b) { for (int i = 0; i != res.length; i++) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res, 0, res, 0); }", "n_tokens": 98, "n_pass": [45, 2, 2]}
{"time": "2021-02-24 07:54:42.851517", "score": "0.5292", "loss": "3.3895", "code": "private void process( byte[] a, byte[] b) { for (int i = 0; ilength; i++) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res, 0, res, 0); }", "n_tokens": 92, "n_pass": [51, 4, 3]}
{"time": "2021-02-24 07:54:46.668616", "score": "0.5152", "loss": "3.5664", "code": "private void process( byte[] a, byte[] b) { for (int i = 0; ilength; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res, 0, res, 0); }", "n_tokens": 89, "n_pass": [95, 6, 4]}
{"time": "2021-02-24 07:54:48.623549", "score": "0.5078", "loss": "3.189", "code": "private void process( byte[] a, byte[] b) { for (int i = 0; ilength; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res,res, 0); }", "n_tokens": 85, "n_pass": [107, 7, 5]}
{"time": "2021-02-24 07:54:50.998382", "score": "0.5171", "loss": "3.3761", "code": "private void process( byte[] a, byte[] b) { for (int i ; ilength; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res,res, 0); }", "n_tokens": 82, "n_pass": [120, 8, 6]}
{"time": "2021-02-24 07:54:57.222059", "score": "0.432", "loss": "3.57", "code": "private void process( byte[] a, byte[] b) { for (i ; ilength; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res,res, 0); }", "n_tokens": 80, "n_pass": [198, 9, 7]}
{"time": "2021-02-24 07:54:59.096502", "score": "0.5414", "loss": "3.761", "code": "private void process( byte[] a, byte[] b) { for (; ilength; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res,res, 0); }", "n_tokens": 78, "n_pass": [199, 10, 8]}
{"time": "2021-02-24 07:55:01.005863", "score": "0.6783", "loss": "3.6848", "code": "private void process( byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } engine.processBlock(res,res, 0); }", "n_tokens": 76, "n_pass": [201, 11, 9]}
{"time": "2021-02-24 07:55:02.891578", "score": "0.576", "loss": "3.5309", "code": "private void process( byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res,res, 0); }", "n_tokens": 74, "n_pass": [219, 12, 10]}
{"time": "2021-02-24 07:55:04.769387", "score": "0.4867", "loss": "3.7355", "code": "private void process( byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 72, "n_pass": [221, 13, 11]}
{"time": "2021-02-24 07:55:08.527763", "score": "0.4867", "loss": "3.7355", "code": " void process( byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 71, "n_pass": [226, 15, 12]}
{"time": "2021-02-24 07:55:10.394446", "score": "0.4867", "loss": "3.7355", "code": "void process( byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 70, "n_pass": [227, 16, 13]}
{"time": "2021-02-24 07:55:13.192011", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[] a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 69, "n_pass": [232, 17, 14]}
{"time": "2021-02-24 07:55:15.027187", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a, byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 68, "n_pass": [236, 18, 15]}
{"time": "2021-02-24 07:55:16.904057", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[] b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 67, "n_pass": [239, 19, 16]}
{"time": "2021-02-24 07:55:18.801370", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (; ; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 66, "n_pass": [243, 20, 17]}
{"time": "2021-02-24 07:55:32.032022", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;; ) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 65, "n_pass": [338, 22, 18]}
{"time": "2021-02-24 07:55:33.923835", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;) { res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 64, "n_pass": [340, 23, 19]}
{"time": "2021-02-24 07:55:35.776187", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){ res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 63, "n_pass": [342, 24, 20]}
{"time": "2021-02-24 07:55:37.674140", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i] = (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 62, "n_pass": [344, 25, 21]}
{"time": "2021-02-24 07:55:39.567070", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]= (byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 61, "n_pass": [349, 26, 22]}
{"time": "2021-02-24 07:55:41.466420", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte) (a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 60, "n_pass": [351, 27, 23]}
{"time": "2021-02-24 07:55:43.335096", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i] ^ b[i]); } processBlock(res, 0); }", "n_tokens": 59, "n_pass": [355, 28, 24]}
{"time": "2021-02-24 07:55:45.214766", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^ b[i]); } processBlock(res, 0); }", "n_tokens": 58, "n_pass": [361, 29, 25]}
{"time": "2021-02-24 07:55:47.056539", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^b[i]); } processBlock(res, 0); }", "n_tokens": 57, "n_pass": [363, 30, 26]}
{"time": "2021-02-24 07:55:48.931754", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^b[i]);} processBlock(res, 0); }", "n_tokens": 56, "n_pass": [370, 31, 27]}
{"time": "2021-02-24 07:55:50.815440", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res, 0); }", "n_tokens": 55, "n_pass": [372, 32, 28]}
{"time": "2021-02-24 07:55:52.709775", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0); }", "n_tokens": 54, "n_pass": [377, 33, 29]}
{"time": "2021-02-24 07:55:54.584646", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b) { for (;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0);}", "n_tokens": 53, "n_pass": [381, 34, 30]}
{"time": "2021-02-24 07:55:57.362560", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b){ for (;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0);}", "n_tokens": 52, "n_pass": [397, 35, 31]}
{"time": "2021-02-24 07:55:59.252750", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b){for (;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0);}", "n_tokens": 51, "n_pass": [399, 36, 32]}
{"time": "2021-02-24 07:56:01.108412", "score": "0.4867", "loss": "3.7355", "code": "void process(byte[]a,byte[]b){for(;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0);}", "n_tokens": 50, "n_pass": [401, 37, 33]}

Minimal simplified code:
void process(byte[]a,byte[]b){for(;;){res[i]=(byte)(a[i]^b[i]);}processBlock(res,0);}

