
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/adamkewley__jobson/src/main/java/com/github/jobson/dao/specs/FilesystemJobSpecDAO_getJobSpecSummaries.java
method_name = getJobSpecSummaries
method_body = @Override public List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException("pageSize is negative"); if (page < 0) throw new IllegalArgumentException("page is negative"); requireNonNull(query); return listDirectories(jobSpecsDir).map(File::toPath).map(path -> loadJobSpec(path).map(JobSpec::toSummary)).filter(Optional::isPresent).map(Optional::get).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }
predict, score, loss = loadJobSpec, 0.4544832110404968, 14.160330772399902

Trace of simplified code(s):
{"time": "2021-02-23 22:42:38.978312", "score": "0.518", "loss": "11.3899", "code": "@Override public List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull(query); return listDirectories(jobSpecsDir).map(File::toPath).map(path -> loadJobSpec(path).map(JobSpec::toSummary)).filter(Optional::isPresent).map(Optional::get).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 170, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 22:42:53.170833", "score": "0.4964", "loss": "11.4533", "code": "@Override public List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull(query); return listDirectories(jobSpecsDir).map(File::toPath).map(path -> loadJobSpec(path).map(JobSpec::toSummary)).filter(Optional).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 159, "n_pass": [56, 8, 2]}
{"time": "2021-02-23 22:42:59.528582", "score": "0.6096", "loss": "11.5635", "code": "@Override public List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull(query); return listDirectories(jobSpecsDir).map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 148, "n_pass": [70, 11, 3]}
{"time": "2021-02-23 22:43:01.964076", "score": "0.4952", "loss": "14.6975", "code": "@Override public List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull.map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 137, "n_pass": [82, 12, 4]}
{"time": "2021-02-23 22:43:06.381121", "score": "0.462", "loss": "17.1693", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) throw new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull.map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 132, "n_pass": [132, 14, 5]}
{"time": "2021-02-23 22:43:14.192932", "score": "0.426", "loss": "17.3539", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page < 0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull.map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 130, "n_pass": [224, 18, 6]}
{"time": "2021-02-23 22:43:19.934566", "score": "0.4286", "loss": "17.1363", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0) throw new IllegalArgumentException(\"page is negative\"); requireNonNull.map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 127, "n_pass": [231, 21, 7]}
{"time": "2021-02-23 22:43:21.818045", "score": "0.4057", "loss": "16.8896", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File::toPath).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 124, "n_pass": [233, 22, 8]}
{"time": "2021-02-23 22:43:27.557100", "score": "0.4565", "loss": "16.6264", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page * pageSize).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 121, "n_pass": [240, 25, 9]}
{"time": "2021-02-23 22:43:29.488191", "score": "0.5981", "loss": "15.3259", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit(pageSize).sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 118, "n_pass": [248, 26, 10]}
{"time": "2021-02-23 22:43:31.417005", "score": "0.553", "loss": "15.1992", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(FilesystemJobSpecDAO::bySpecName).collect(toList()); }", "n_tokens": 115, "n_pass": [250, 27, 11]}
{"time": "2021-02-23 22:43:33.284942", "score": "0.5658", "loss": "15.3197", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) new IllegalArgumentException(\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 112, "n_pass": [252, 28, 12]}
{"time": "2021-02-23 22:43:35.221426", "score": "0.5271", "loss": "15.0561", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSize is negative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 109, "n_pass": [274, 29, 13]}
{"time": "2021-02-23 22:43:37.168739", "score": "0.498", "loss": "15.3827", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)  IllegalArgumentException(\"page is negative\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 106, "n_pass": [276, 30, 14]}
{"time": "2021-02-23 22:43:39.100772", "score": "0.4377", "loss": "15.8079", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)  IllegalArgumentException(\"page \"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 103, "n_pass": [283, 31, 15]}
{"time": "2021-02-23 22:43:51.041688", "score": "0.4377", "loss": "15.8079", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0) IllegalArgumentException(\"page \"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 102, "n_pass": [404, 33, 16]}
{"time": "2021-02-23 22:43:52.952335", "score": "0.4377", "loss": "15.8079", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"page \"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 101, "n_pass": [405, 34, 17]}
{"time": "2021-02-23 22:43:56.763821", "score": "0.4519", "loss": "15.6687", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\" \"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 100, "n_pass": [409, 36, 18]}
{"time": "2021-02-23 22:43:58.687460", "score": "0.501", "loss": "15.3185", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path).map).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 99, "n_pass": [410, 37, 19]}
{"time": "2021-02-23 22:44:06.289380", "score": "0.783", "loss": "14.1865", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip(page ).limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 97, "n_pass": [423, 41, 20]}
{"time": "2021-02-23 22:44:08.207031", "score": "0.798", "loss": "14.6739", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().limit.sorted(bySpecName).collect(toList()); }", "n_tokens": 95, "n_pass": [426, 42, 21]}
{"time": "2021-02-23 22:44:10.090518", "score": "0.852", "loss": "15.1505", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList()); }", "n_tokens": 93, "n_pass": [428, 43, 22]}
{"time": "2021-02-23 22:44:11.988547", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary> getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 91, "n_pass": [433, 44, 23]}
{"time": "2021-02-23 22:44:14.334757", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize, int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 90, "n_pass": [440, 45, 24]}
{"time": "2021-02-23 22:44:16.288457", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page, String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 89, "n_pass": [447, 46, 25]}
{"time": "2021-02-23 22:44:18.203663", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query) { if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 88, "n_pass": [452, 47, 26]}
{"time": "2021-02-23 22:44:20.111033", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){ if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 87, "n_pass": [457, 48, 27]}
{"time": "2021-02-23 22:44:21.975531", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if (pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 86, "n_pass": [459, 49, 28]}
{"time": "2021-02-23 22:44:23.858144", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize < 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 85, "n_pass": [461, 50, 29]}
{"time": "2021-02-23 22:44:25.770101", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize< 0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 84, "n_pass": [464, 51, 30]}
{"time": "2021-02-23 22:44:27.673537", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0) (\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 83, "n_pass": [466, 52, 31]}
{"time": "2021-02-23 22:44:29.594871", "score": "0.844", "loss": "14.9706", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"pageSizenegative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 82, "n_pass": [469, 53, 32]}
{"time": "2021-02-23 22:44:31.511165", "score": "0.8613", "loss": "14.6821", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"negative\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 81, "n_pass": [472, 54, 33]}
{"time": "2021-02-23 22:44:33.412251", "score": "0.8701", "loss": "14.8879", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\"); if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 80, "n_pass": [473, 55, 34]}
{"time": "2021-02-23 22:44:35.293703", "score": "0.8701", "loss": "14.8879", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if (page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 79, "n_pass": [477, 56, 35]}
{"time": "2021-02-23 22:44:37.676742", "score": "0.8701", "loss": "14.8879", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if(page0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 78, "n_pass": [479, 57, 36]}
{"time": "2021-02-23 22:44:39.626976", "score": "0.875", "loss": "14.8623", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if(0)IllegalArgumentException(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 77, "n_pass": [481, 58, 37]}
{"time": "2021-02-23 22:44:41.528618", "score": "0.8486", "loss": "14.1715", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if(0)(\"\"); requireNonNull.map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 76, "n_pass": [484, 59, 38]}
{"time": "2021-02-23 22:44:43.542290", "score": "0.8334", "loss": "13.983", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if(0)(\"\"); map(File).map(path -> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 74, "n_pass": [490, 60, 39]}
{"time": "2021-02-23 22:44:45.431795", "score": "0.5852", "loss": "14.8725", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize<0)(\"\");if(0)(\"\"); map(File).map(path> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 72, "n_pass": [495, 61, 40]}
{"time": "2021-02-23 22:44:49.713276", "score": "0.5641", "loss": "14.7686", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize0)(\"\");if(0)(\"\"); map(File).map(path> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 71, "n_pass": [530, 63, 41]}
{"time": "2021-02-23 22:44:51.596582", "score": "0.5641", "loss": "14.7686", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\"); map(File).map(path> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 70, "n_pass": [531, 64, 42]}
{"time": "2021-02-23 22:44:58.482736", "score": "0.5641", "loss": "14.7686", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");map(File).map(path> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 69, "n_pass": [620, 66, 43]}
{"time": "2021-02-23 22:45:00.411515", "score": "0.5502", "loss": "14.6755", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path> loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 68, "n_pass": [621, 67, 44]}
{"time": "2021-02-23 22:45:02.799004", "score": "0.5502", "loss": "14.6755", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path>loadJobSpec(path)).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 67, "n_pass": [630, 68, 45]}
{"time": "2021-02-23 22:45:06.561242", "score": "0.5258", "loss": "15.6854", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path>loadJobSpec()).skip().sorted(bySpecName).collect(toList); }", "n_tokens": 66, "n_pass": [633, 70, 46]}
{"time": "2021-02-23 22:45:08.470191", "score": "0.4954", "loss": "16.3003", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path>loadJobSpec()).skip().sorted().collect(toList); }", "n_tokens": 65, "n_pass": [643, 71, 47]}
{"time": "2021-02-23 22:45:10.356615", "score": "0.428", "loss": "16.6415", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path>loadJobSpec()).skip().sorted().collect(); }", "n_tokens": 64, "n_pass": [648, 72, 48]}
{"time": "2021-02-23 22:45:12.215125", "score": "0.428", "loss": "16.6415", "code": "List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)(\"\");if(0)(\"\");(File).map(path>loadJobSpec()).skip().sorted().collect();}", "n_tokens": 63, "n_pass": [651, 73, 49]}

Minimal simplified code:
List<JobSpecSummary>getJobSpecSummaries(int pageSize,int page,String query){if(pageSize)("");if(0)("");(File).map(path>loadJobSpec()).skip().sorted().collect();}

