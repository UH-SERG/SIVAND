
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-projects__spring-ws/spring-ws-test/src/test/java/org/springframework/ws/test/server/integration/ServerIntegrationTest_basic.java
method_name = basic
method_body = @Test public void basic() throws Exception { Source requestPayload = new StringSource("<customerCountRequest xmlns='http://springframework.org/spring-ws'>" + "<customerName>John Doe</customerName>" + "</customerCountRequest>"); Source expectedResponsePayload = new StringSource("<customerCountResponse xmlns='http://springframework.org/spring-ws'>" + "<customerCount>42</customerCount>" + "</customerCountResponse>"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }
predict, score, loss = testCustomerCountCustomerCount, 0.6406485438346863, 14.298791885375977

Trace of simplified code(s):
{"time": "2021-02-24 00:36:43.520905", "score": "0.6406", "loss": "14.2988", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://springframework.org/spring-ws'>\" + \"<customerName>John Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='http://springframework.org/spring-ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 152, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 00:36:45.447937", "score": "0.6659", "loss": "14.3864", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='http://springframework.org/spring-ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 133, "n_pass": [22, 2, 2]}
{"time": "2021-02-24 00:36:49.321396", "score": "0.6659", "loss": "14.3864", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"<customerCountRequest xmlns='http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 123, "n_pass": [47, 4, 3]}
{"time": "2021-02-24 00:36:59.008631", "score": "0.6857", "loss": "14.4341", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"'http://Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 118, "n_pass": [104, 9, 4]}
{"time": "2021-02-24 00:37:00.895397", "score": "0.6857", "loss": "14.4341", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"Doe</customerName>\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 113, "n_pass": [105, 10, 5]}
{"time": "2021-02-24 00:37:02.789952", "score": "0.6215", "loss": "14.1263", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"\" + \"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 108, "n_pass": [106, 11, 6]}
{"time": "2021-02-24 00:37:04.693405", "score": "0.6749", "loss": "14.065", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<customerCountResponse xmlns='ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 103, "n_pass": [107, 12, 7]}
{"time": "2021-02-24 00:37:06.623147", "score": "0.6419", "loss": "13.474", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<ws'>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 98, "n_pass": [112, 13, 8]}
{"time": "2021-02-24 00:37:12.741424", "score": "0.6917", "loss": "14.174", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"</customerCountResponse>\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 96, "n_pass": [178, 16, 9]}
{"time": "2021-02-24 00:37:20.384635", "score": "0.7435", "loss": "14.2847", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\"); mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 93, "n_pass": [187, 20, 10]}
{"time": "2021-02-24 00:37:22.322715", "score": "0.7085", "loss": "13.6301", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload(requestPayload)).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 90, "n_pass": [189, 21, 11]}
{"time": "2021-02-24 00:37:24.248059", "score": "0.712", "loss": "13.5721", "code": "@Test public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 87, "n_pass": [191, 22, 12]}
{"time": "2021-02-24 00:37:26.224199", "score": "0.9031", "loss": "15.7862", "code": " public void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 85, "n_pass": [196, 23, 13]}
{"time": "2021-02-24 00:37:28.116979", "score": "0.9031", "loss": "15.7862", "code": " void basic() throws Exception { Source requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 83, "n_pass": [197, 24, 14]}
{"time": "2021-02-24 00:37:30.484169", "score": "0.8873", "loss": "15.6729", "code": " void basic() throws Exception { requestPayload = new StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 81, "n_pass": [204, 25, 15]}
{"time": "2021-02-24 00:37:32.384416", "score": "0.9066", "loss": "16.69", "code": " void basic() throws Exception { requestPayload = StringSource(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 79, "n_pass": [207, 26, 16]}
{"time": "2021-02-24 00:37:34.268265", "score": "0.8327", "loss": "15.3351", "code": " void basic() throws Exception { requestPayload =(\"</customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 77, "n_pass": [208, 27, 17]}
{"time": "2021-02-24 00:37:36.174076", "score": "0.8327", "loss": "15.3351", "code": " void basic() throws Exception { requestPayload =(\"customerCountRequest>\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 75, "n_pass": [210, 28, 18]}
{"time": "2021-02-24 00:37:38.059243", "score": "0.8367", "loss": "14.6987", "code": " void basic() throws Exception { requestPayload =(\"\"); Source expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 73, "n_pass": [211, 29, 19]}
{"time": "2021-02-24 00:37:39.922773", "score": "0.8617", "loss": "15.6223", "code": " void basic() throws Exception { requestPayload =(\"\"); expectedResponsePayload = new StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 71, "n_pass": [214, 30, 20]}
{"time": "2021-02-24 00:37:41.781858", "score": "0.881", "loss": "16.0131", "code": " void basic() throws Exception { requestPayload =(\"\"); expectedResponsePayload = StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 69, "n_pass": [217, 31, 21]}
{"time": "2021-02-24 00:37:49.673199", "score": "0.913", "loss": "17.7709", "code": " void basic() throws Exception { requestPayload(\"\"); expectedResponsePayload = StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 67, "n_pass": [241, 35, 22]}
{"time": "2021-02-24 00:37:57.516638", "score": "0.8775", "loss": "17.0406", "code": " void basic() throws Exception {(\"\"); expectedResponsePayload = StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 65, "n_pass": [269, 39, 23]}
{"time": "2021-02-24 00:38:10.556109", "score": "0.8775", "loss": "17.0406", "code": " void basic() throws Exception {(\"\");expectedResponsePayload = StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 64, "n_pass": [356, 43, 24]}
{"time": "2021-02-24 00:38:12.423904", "score": "0.8775", "loss": "17.0406", "code": " void basic() throws Exception {(\"\");expectedResponsePayload= StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 63, "n_pass": [358, 44, 25]}
{"time": "2021-02-24 00:38:14.244763", "score": "0.8775", "loss": "17.0406", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=StringSource(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 62, "n_pass": [360, 45, 26]}
{"time": "2021-02-24 00:38:16.091501", "score": "0.722", "loss": "14.991", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<>\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 61, "n_pass": [361, 46, 27]}
{"time": "2021-02-24 00:38:19.782958", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\" + \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 60, "n_pass": [365, 48, 28]}
{"time": "2021-02-24 00:38:21.644533", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+ \"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 59, "n_pass": [367, 49, 29]}
{"time": "2021-02-24 00:38:23.486791", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"<customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 58, "n_pass": [369, 50, 30]}
{"time": "2021-02-24 00:38:25.350742", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount>42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 57, "n_pass": [371, 51, 31]}
{"time": "2021-02-24 00:38:29.021785", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount42</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 56, "n_pass": [373, 53, 32]}
{"time": "2021-02-24 00:38:30.912422", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2</customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 55, "n_pass": [374, 54, 33]}
{"time": "2021-02-24 00:38:34.583077", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2/customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 54, "n_pass": [376, 56, 34]}
{"time": "2021-02-24 00:38:36.444067", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount>\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 53, "n_pass": [377, 57, 35]}
{"time": "2021-02-24 00:38:40.155711", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount\" + \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 52, "n_pass": [379, 59, 36]}
{"time": "2021-02-24 00:38:42.033988", "score": "0.7779", "loss": "15.9154", "code": " void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 51, "n_pass": [381, 60, 37]}
{"time": "2021-02-24 00:38:43.889212", "score": "0.7779", "loss": "15.9154", "code": "void basic() throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 50, "n_pass": [393, 61, 38]}
{"time": "2021-02-24 00:38:46.696523", "score": "0.7779", "loss": "15.9154", "code": "void basic()throws Exception {(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 49, "n_pass": [399, 62, 39]}
{"time": "2021-02-24 00:38:48.550960", "score": "0.7779", "loss": "15.9154", "code": "void basic()throws Exception{(\"\");expectedResponsePayload=(\"<\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 48, "n_pass": [403, 63, 40]}
{"time": "2021-02-24 00:38:50.384013", "score": "0.8368", "loss": "19.3648", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"<\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 47, "n_pass": [411, 64, 41]}
{"time": "2021-02-24 00:38:52.272036", "score": "0.8012", "loss": "17.4749", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"\"+\"customerCount2customerCount\"+ \"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 46, "n_pass": [414, 65, 42]}
{"time": "2021-02-24 00:39:04.161389", "score": "0.8012", "loss": "17.4749", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"\"+\"customerCount2customerCount\"+\"<\");sendRequest(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 45, "n_pass": [473, 70, 43]}
{"time": "2021-02-24 00:39:07.832206", "score": "0.8023", "loss": "16.2802", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"\"+\"customerCount2customerCount\"+\"<\");(withPayload).andExpect(payload(expectedResponsePayload)); }", "n_tokens": 44, "n_pass": [479, 72, 44]}
{"time": "2021-02-24 00:39:10.136213", "score": "0.761", "loss": "15.0158", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"\"+\"customerCount2customerCount\"+\"<\");(withPayload).andExpect((expectedResponsePayload)); }", "n_tokens": 43, "n_pass": [486, 73, 45]}
{"time": "2021-02-24 00:39:11.997486", "score": "0.761", "loss": "15.0158", "code": "void basic()throws Exception{(\"\");expectedResponsePayload(\"\"+\"customerCount2customerCount\"+\"<\");(withPayload).andExpect((expectedResponsePayload));}", "n_tokens": 42, "n_pass": [492, 74, 46]}

Minimal simplified code:
void basic()throws Exception{("");expectedResponsePayload(""+"customerCount2customerCount"+"<");(withPayload).andExpect((expectedResponsePayload));}

