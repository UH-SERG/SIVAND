
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/org/droidplanner/services/android/impl/core/MAVLink/MavLinkCalibration_sendCalibrationAckMessage.java
method_name = sendCalibrationAckMessage
method_body = public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msg_command_ack msg = new msg_command_ack(); msg.command = count; msg.result = MAV_CMD_ACK.MAV_CMD_ACK_OK; drone.getMavClient().sendMessage(msg, null); }
predict, score, loss = handleCommand, 0.5516246557235718, 31.321773529052734

Trace of simplified code(s):
{"time": "2021-02-23 19:02:50.530507", "score": "0.5516", "loss": "31.3218", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msg_command_ack msg = new msg_command_ack(); msg.command = count; msg.result = MAV_CMD_ACK.MAV_CMD_ACK_OK; drone.getMavClient().sendMessage(msg, null); }", "n_tokens": 87, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 19:02:58.087481", "score": "0.4636", "loss": "26.6645", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msg_command_ack msg = new msg_command_ack(); msg.command = count; msg.result _ACK_OK; drone.getMavClient().sendMessage(msg, null); }", "n_tokens": 76, "n_pass": [25, 5, 2]}
{"time": "2021-02-23 19:03:00.022287", "score": "0.6641", "loss": "27.434", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msg_command_ack msg = new msg_command_ack(); msg.command = count; msg.result .sendMessage(msg, null); }", "n_tokens": 65, "n_pass": [26, 6, 3]}
{"time": "2021-02-23 19:03:01.889594", "score": "0.511", "loss": "30.0203", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msgmsg_command_ack(); msg.command = count; msg.result .sendMessage(msg, null); }", "n_tokens": 54, "n_pass": [30, 7, 4]}
{"time": "2021-02-23 19:03:17.213198", "score": "0.7438", "loss": "32.66", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msgmsg_command_ack(); msg.command = msg.result .sendMessage(msg, null); }", "n_tokens": 51, "n_pass": [82, 15, 5]}
{"time": "2021-02-23 19:03:19.089721", "score": "0.672", "loss": "36.7245", "code": "public static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 48, "n_pass": [83, 16, 6]}
{"time": "2021-02-23 19:03:20.951163", "score": "0.672", "loss": "36.7245", "code": "static void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 46, "n_pass": [87, 17, 7]}
{"time": "2021-02-23 19:03:22.803771", "score": "0.672", "loss": "36.7245", "code": "void sendCalibrationAckMessage(MavLinkDrone drone, int count) { msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 44, "n_pass": [88, 18, 8]}
{"time": "2021-02-23 19:03:32.651599", "score": "0.672", "loss": "36.7245", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count) { msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 43, "n_pass": [145, 21, 9]}
{"time": "2021-02-23 19:03:34.500887", "score": "0.672", "loss": "36.7245", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){ msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 42, "n_pass": [150, 22, 10]}
{"time": "2021-02-23 19:03:36.354560", "score": "0.672", "loss": "36.7245", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msgmsg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 41, "n_pass": [152, 23, 11]}
{"time": "2021-02-23 19:03:38.211830", "score": "0.7068", "loss": "32.0255", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command_ack(); msg.command = msg.result(msg, null); }", "n_tokens": 40, "n_pass": [153, 24, 12]}
{"time": "2021-02-23 19:03:45.577011", "score": "0.5933", "loss": "38.196", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command(); msg.command = msg.result(msg, null); }", "n_tokens": 38, "n_pass": [157, 28, 13]}
{"time": "2021-02-23 19:03:47.415638", "score": "0.717", "loss": "36.419", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command; msg.command = msg.result(msg, null); }", "n_tokens": 36, "n_pass": [158, 29, 14]}
{"time": "2021-02-23 19:03:49.234333", "score": "0.3938", "loss": "35.0599", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_commandmsg.command = msg.result(msg, null); }", "n_tokens": 34, "n_pass": [159, 30, 15]}
{"time": "2021-02-23 19:03:52.878428", "score": "0.3211", "loss": "35.2246", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_commandmsg.command = result(msg, null); }", "n_tokens": 32, "n_pass": [163, 32, 16]}
{"time": "2021-02-23 19:03:54.703352", "score": "0.2536", "loss": "36.1195", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_commandmsg.command = result( null); }", "n_tokens": 30, "n_pass": [165, 33, 17]}
{"time": "2021-02-23 19:04:02.881808", "score": "0.3465", "loss": "36.4276", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_msg.command = result( null); }", "n_tokens": 29, "n_pass": [184, 37, 18]}
{"time": "2021-02-23 19:04:04.727672", "score": "0.4364", "loss": "35.371", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command = result( null); }", "n_tokens": 27, "n_pass": [185, 38, 19]}
{"time": "2021-02-23 19:04:08.383921", "score": "0.438", "loss": "35.9111", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command = result(); }", "n_tokens": 25, "n_pass": [189, 40, 20]}
{"time": "2021-02-23 19:04:18.171209", "score": "0.438", "loss": "35.9111", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command = result();}", "n_tokens": 24, "n_pass": [221, 44, 21]}
{"time": "2021-02-23 19:04:26.395767", "score": "0.438", "loss": "35.9111", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command= result();}", "n_tokens": 23, "n_pass": [238, 48, 22]}
{"time": "2021-02-23 19:04:28.237315", "score": "0.438", "loss": "35.9111", "code": "void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command=result();}", "n_tokens": 22, "n_pass": [240, 49, 23]}

Minimal simplified code:
void sendCalibrationAckMessage(MavLinkDrone drone,int count){msg_command=result();}

