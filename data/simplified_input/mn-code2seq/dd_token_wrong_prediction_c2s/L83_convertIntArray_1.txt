
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/util/RainbowUtil_convertIntArray.java
method_name = convertIntArray
method_body = public static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }
predict, score, loss = toByteArray, 0.6956756114959717, 8.574989318847656

Trace of simplified code(s):
{"time": "2021-02-24 07:42:38.424116", "score": "0.6957", "loss": "8.575", "code": "public static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 90, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 07:42:42.260882", "score": "0.6957", "loss": "8.575", "code": "static byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 88, "n_pass": [92, 3, 2]}
{"time": "2021-02-24 07:42:44.157596", "score": "0.6957", "loss": "8.575", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i < in.length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 86, "n_pass": [93, 4, 3]}
{"time": "2021-02-24 07:42:46.110801", "score": "0.7053", "loss": "8.6625", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out[i] = (byte) in[i]; } return out; }", "n_tokens": 83, "n_pass": [111, 5, 4]}
{"time": "2021-02-24 07:42:48.047618", "score": "0.6519", "loss": "8.3416", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out = (byte) in[i]; } return out; }", "n_tokens": 80, "n_pass": [116, 6, 5]}
{"time": "2021-02-24 07:42:49.949373", "score": "0.6461", "loss": "7.2534", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =  in[i]; } return out; }", "n_tokens": 77, "n_pass": [118, 7, 6]}
{"time": "2021-02-24 07:42:59.365810", "score": "0.6461", "loss": "7.2534", "code": "byte[] convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 75, "n_pass": [202, 9, 7]}
{"time": "2021-02-24 07:43:03.180808", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[] in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 74, "n_pass": [213, 11, 8]}
{"time": "2021-02-24 07:43:05.105121", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in) { byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 73, "n_pass": [219, 12, 9]}
{"time": "2021-02-24 07:43:06.998581", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in){ byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 72, "n_pass": [222, 13, 10]}
{"time": "2021-02-24 07:43:08.899194", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in){byte[] out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 71, "n_pass": [224, 14, 11]}
{"time": "2021-02-24 07:43:10.810400", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in){byte[]out = new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 70, "n_pass": [228, 15, 12]}
{"time": "2021-02-24 07:43:12.709894", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in){byte[]out= new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 69, "n_pass": [230, 16, 13]}
{"time": "2021-02-24 07:43:14.600397", "score": "0.6461", "loss": "7.2534", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in.length]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 68, "n_pass": [232, 17, 14]}
{"time": "2021-02-24 07:43:18.421316", "score": "0.6546", "loss": "7.6246", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[inlength]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 67, "n_pass": [238, 19, 15]}
{"time": "2021-02-24 07:43:20.347286", "score": "0.6462", "loss": "7.3751", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; i .length; i++) { out =in[i]; } return out; }", "n_tokens": 66, "n_pass": [239, 20, 16]}
{"time": "2021-02-24 07:43:22.282689", "score": "0.6051", "loss": "6.756", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; i ; i++) { out =in[i]; } return out; }", "n_tokens": 64, "n_pass": [249, 21, 17]}
{"time": "2021-02-24 07:43:26.106165", "score": "0.6116", "loss": "7.5333", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; i ; i++) { out =in[i]; } out; }", "n_tokens": 62, "n_pass": [260, 23, 18]}
{"time": "2021-02-24 07:43:28.002529", "score": "0.6241", "loss": "7.251", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; i ; i++) { out =in[i]; }  }", "n_tokens": 60, "n_pass": [261, 24, 19]}
{"time": "2021-02-24 07:43:31.838932", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++) { out =in[i]; }  }", "n_tokens": 58, "n_pass": [292, 26, 20]}
{"time": "2021-02-24 07:43:44.752527", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){ out =in[i]; }  }", "n_tokens": 57, "n_pass": [369, 29, 21]}
{"time": "2021-02-24 07:43:46.678809", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){out =in[i]; }  }", "n_tokens": 56, "n_pass": [370, 30, 22]}
{"time": "2021-02-24 07:43:48.584781", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){out=in[i]; }  }", "n_tokens": 55, "n_pass": [372, 31, 23]}
{"time": "2021-02-24 07:43:52.365380", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){out=in[i];}  }", "n_tokens": 54, "n_pass": [379, 33, 24]}
{"time": "2021-02-24 07:43:54.257261", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){out=in[i];} }", "n_tokens": 53, "n_pass": [381, 34, 25]}
{"time": "2021-02-24 07:43:56.161419", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in]; for (int i = 0; ; i++){out=in[i];}}", "n_tokens": 52, "n_pass": [382, 35, 26]}
{"time": "2021-02-24 07:43:59.950316", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for (int i = 0; ; i++){out=in[i];}}", "n_tokens": 51, "n_pass": [407, 37, 27]}
{"time": "2021-02-24 07:44:01.864676", "score": "0.6054", "loss": "6.8396", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(int i = 0; ; i++){out=in[i];}}", "n_tokens": 50, "n_pass": [409, 38, 28]}
{"time": "2021-02-24 07:44:03.786865", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for( i = 0; ; i++){out=in[i];}}", "n_tokens": 49, "n_pass": [411, 39, 29]}
{"time": "2021-02-24 07:44:05.657109", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i = 0; ; i++){out=in[i];}}", "n_tokens": 48, "n_pass": [412, 40, 30]}
{"time": "2021-02-24 07:44:07.566261", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i= 0; ; i++){out=in[i];}}", "n_tokens": 47, "n_pass": [414, 41, 31]}
{"time": "2021-02-24 07:44:09.498480", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i=0; ; i++){out=in[i];}}", "n_tokens": 46, "n_pass": [416, 42, 32]}
{"time": "2021-02-24 07:44:11.353932", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i=0;; i++){out=in[i];}}", "n_tokens": 45, "n_pass": [419, 43, 33]}
{"time": "2021-02-24 07:44:13.231253", "score": "0.6404", "loss": "7.4302", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i=0;;i++){out=in[i];}}", "n_tokens": 44, "n_pass": [421, 44, 34]}
{"time": "2021-02-24 07:44:15.116939", "score": "0.5725", "loss": "7.2224", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i=0;;i++){outin[i];}}", "n_tokens": 43, "n_pass": [428, 45, 35]}
{"time": "2021-02-24 07:44:16.984086", "score": "0.5508", "loss": "7.1182", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i=0;;i++){out[i];}}", "n_tokens": 42, "n_pass": [429, 46, 36]}
{"time": "2021-02-24 07:44:20.767732", "score": "0.5457", "loss": "7.0794", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i0;;i++){out[i];}}", "n_tokens": 41, "n_pass": [462, 48, 37]}
{"time": "2021-02-24 07:44:22.631363", "score": "0.5457", "loss": "7.0794", "code": "byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i;;i++){out[i];}}", "n_tokens": 40, "n_pass": [463, 49, 38]}

Minimal simplified code:
byte[]convertIntArray(int[]in){byte[]out=new byte[in];for(i;;i++){out[i];}}

