
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-tools/openam-license-core/src/main/java/org/forgerock/openam/license/PersistentLicenseLocator_getRequiredLicenses.java
method_name = getRequiredLicenses
method_body = public LicenseSet getRequiredLicenses() { List<License> licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { License persistentLicense = new PersistentLicense(log, license, username); licenses.add(persistentLicense); } return new LicenseSet(licenses); }
predict, score, loss = createLicenseSet, 0.5922369956970215, 17.01759910583496

Trace of simplified code(s):
{"time": "2021-02-23 21:41:31.209751", "score": "0.5922", "loss": "17.0176", "code": "public LicenseSet getRequiredLicenses() { List<License> licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { License persistentLicense = new PersistentLicense(log, license, username); licenses.add(persistentLicense); } return new LicenseSet(licenses); }", "n_tokens": 88, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:41:35.032125", "score": "0.5786", "loss": "17.7849", "code": "public LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { License persistentLicense = new PersistentLicense(log, license, username); licenses.add(persistentLicense); } return new LicenseSet(licenses); }", "n_tokens": 83, "n_pass": [46, 3, 2]}
{"time": "2021-02-23 21:41:36.927248", "score": "0.6159", "loss": "20.497", "code": "public LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log, license, username); licenses.add(persistentLicense); } return new LicenseSet(licenses); }", "n_tokens": 77, "n_pass": [53, 4, 3]}
{"time": "2021-02-23 21:41:38.806521", "score": "0.5957", "loss": "18.4164", "code": "public LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log); licenses.add(persistentLicense); } return new LicenseSet(licenses); }", "n_tokens": 71, "n_pass": [55, 5, 4]}
{"time": "2021-02-23 21:41:44.405400", "score": "0.6261", "loss": "17.5257", "code": "public LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log); licenses.add; } return new LicenseSet(licenses); }", "n_tokens": 68, "n_pass": [97, 8, 5]}
{"time": "2021-02-23 21:41:46.293657", "score": "0.6282", "loss": "15.959", "code": "public LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log); licenses.add; }new LicenseSet(licenses); }", "n_tokens": 65, "n_pass": [98, 9, 6]}
{"time": "2021-02-23 21:41:50.042502", "score": "0.6282", "loss": "15.959", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList<License>(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log); licenses.add; }new LicenseSet(licenses); }", "n_tokens": 63, "n_pass": [102, 11, 7]}
{"time": "2021-02-23 21:41:52.389431", "score": "0.6556", "loss": "16.6479", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList(); for (License license : delegate.getRequiredLicenses()) { new PersistentLicense(log); licenses.add; }new LicenseSet(licenses); }", "n_tokens": 60, "n_pass": [110, 12, 8]}
{"time": "2021-02-23 21:41:54.240581", "score": "0.6019", "loss": "16.0153", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList(); for (License license :getRequiredLicenses()) { new PersistentLicense(log); licenses.add; }new LicenseSet(licenses); }", "n_tokens": 57, "n_pass": [115, 13, 9]}
{"time": "2021-02-23 21:41:56.125813", "score": "0.5187", "loss": "15.431", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); licenses.add; }new LicenseSet(licenses); }", "n_tokens": 54, "n_pass": [118, 14, 10]}
{"time": "2021-02-23 21:41:58.006651", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); ; }new LicenseSet(licenses); }", "n_tokens": 51, "n_pass": [121, 15, 11]}
{"time": "2021-02-23 21:42:07.407421", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses() { licenses = new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 49, "n_pass": [180, 17, 12]}
{"time": "2021-02-23 21:42:10.674905", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses(){ licenses = new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 48, "n_pass": [192, 18, 13]}
{"time": "2021-02-23 21:42:12.554792", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses(){licenses = new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 47, "n_pass": [194, 19, 14]}
{"time": "2021-02-23 21:42:14.392697", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses(){licenses= new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 46, "n_pass": [196, 20, 15]}
{"time": "2021-02-23 21:42:16.213841", "score": "0.5218", "loss": "15.7953", "code": "LicenseSet getRequiredLicenses(){licenses=new ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 45, "n_pass": [198, 21, 16]}
{"time": "2021-02-23 21:42:18.129045", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses= ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 44, "n_pass": [199, 22, 17]}
{"time": "2021-02-23 21:42:19.991090", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList(); for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 43, "n_pass": [200, 23, 18]}
{"time": "2021-02-23 21:42:21.873607", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for (License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 42, "n_pass": [205, 24, 19]}
{"time": "2021-02-23 21:42:23.760858", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license :getRequiredLicenses()) {PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 41, "n_pass": [207, 25, 20]}
{"time": "2021-02-23 21:42:31.800650", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license :getRequiredLicenses()){PersistentLicense(log); }new LicenseSet(licenses); }", "n_tokens": 40, "n_pass": [266, 27, 21]}
{"time": "2021-02-23 21:42:37.375914", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license :getRequiredLicenses()){PersistentLicense(log);}new LicenseSet(licenses); }", "n_tokens": 39, "n_pass": [272, 30, 22]}
{"time": "2021-02-23 21:42:44.779123", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license :getRequiredLicenses()){PersistentLicense(log);}new LicenseSet(licenses);}", "n_tokens": 38, "n_pass": [281, 34, 23]}
{"time": "2021-02-23 21:42:49.926766", "score": "0.4742", "loss": "14.9121", "code": "LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license:getRequiredLicenses()){PersistentLicense(log);}new LicenseSet(licenses);}", "n_tokens": 37, "n_pass": [300, 36, 24]}

Minimal simplified code:
LicenseSet getRequiredLicenses(){licenses=ArrayList();for(License license:getRequiredLicenses()){PersistentLicense(log);}new LicenseSet(licenses);}

