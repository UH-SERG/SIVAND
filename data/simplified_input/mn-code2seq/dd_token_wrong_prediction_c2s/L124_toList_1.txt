
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/spring-cloud__spring-cloud-function/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/json/JacksonMapper_toList.java
method_name = toList
method_body = @Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException("Cannot convert JSON", e); } }
predict, score, loss = parseCollection, 0.4500619173049927, 9.936161994934082

Trace of simplified code(s):
{"time": "2021-02-23 21:02:18.337582", "score": "0.4501", "loss": "9.9362", "code": "@Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json, mapper.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-23 21:02:24.208552", "score": "0.3947", "loss": "9.5899", "code": "@Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\"Cannot convert JSON\", e); } }", "n_tokens": 93, "n_pass": [106, 4, 2]}
{"time": "2021-02-23 21:02:29.882031", "score": "0.3924", "loss": "9.4551", "code": "@Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\", e); } }", "n_tokens": 90, "n_pass": [118, 7, 3]}
{"time": "2021-02-23 21:02:31.788173", "score": "0.423", "loss": "9.8098", "code": "@Override public <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 87, "n_pass": [120, 8, 4]}
{"time": "2021-02-23 21:02:45.097539", "score": "0.3735", "loss": "9.5583", "code": "@Overridepublic <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 86, "n_pass": [214, 13, 5]}
{"time": "2021-02-23 21:02:46.989800", "score": "0.423", "loss": "9.8098", "code": "@Override <T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 85, "n_pass": [215, 14, 6]}
{"time": "2021-02-23 21:02:48.891903", "score": "0.423", "loss": "9.8098", "code": "@Override<T> List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 84, "n_pass": [216, 15, 7]}
{"time": "2021-02-23 21:02:50.748274", "score": "0.423", "loss": "9.8098", "code": "@Override<T>List<T> toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 83, "n_pass": [220, 16, 8]}
{"time": "2021-02-23 21:02:52.639018", "score": "0.423", "loss": "9.8098", "code": "@Override<T>List<T>toList(String json, Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 82, "n_pass": [225, 17, 9]}
{"time": "2021-02-23 21:02:54.548784", "score": "0.423", "loss": "9.8098", "code": "@Override<T>List<T>toList(String json,Class<T> type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 81, "n_pass": [232, 18, 10]}
{"time": "2021-02-23 21:02:56.442005", "score": "0.423", "loss": "9.8098", "code": "@Override<T>List<T>toList(String json,Class<T>type) { try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 80, "n_pass": [237, 19, 11]}
{"time": "2021-02-23 21:02:58.333758", "score": "0.423", "loss": "9.8098", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { return mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 79, "n_pass": [240, 20, 12]}
{"time": "2021-02-23 21:03:00.219251", "score": "0.3953", "loss": "10.02", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(json.getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 77, "n_pass": [244, 21, 13]}
{"time": "2021-02-23 21:03:03.998199", "score": "0.3706", "loss": "10.1151", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { throw new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 75, "n_pass": [247, 23, 14]}
{"time": "2021-02-23 21:03:07.786820", "score": "0.3597", "loss": "10.3364", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\" JSON\"); } }", "n_tokens": 73, "n_pass": [262, 25, 15]}
{"time": "2021-02-23 21:03:22.111602", "score": "0.3597", "loss": "10.3364", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"JSON\"); } }", "n_tokens": 72, "n_pass": [364, 29, 16]}
{"time": "2021-02-23 21:03:24.026780", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\"); } }", "n_tokens": 71, "n_pass": [365, 30, 17]}
{"time": "2021-02-23 21:03:25.938017", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\");} }", "n_tokens": 70, "n_pass": [369, 31, 18]}
{"time": "2021-02-23 21:03:27.831993", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){ try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 69, "n_pass": [371, 32, 19]}
{"time": "2021-02-23 21:03:29.730056", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){try { mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 68, "n_pass": [395, 33, 20]}
{"time": "2021-02-23 21:03:31.677318", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{ mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 67, "n_pass": [397, 34, 21]}
{"time": "2021-02-23 21:03:33.535258", "score": "0.3507", "loss": "10.888", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayList.class, type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 66, "n_pass": [399, 35, 22]}
{"time": "2021-02-23 21:03:37.301689", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass, type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 65, "n_pass": [411, 37, 23]}
{"time": "2021-02-23 21:03:41.118361", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type)); } catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 64, "n_pass": [414, 39, 24]}
{"time": "2021-02-23 21:03:42.997873", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));} catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 63, "n_pass": [419, 40, 25]}
{"time": "2021-02-23 21:03:44.863090", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch (Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 62, "n_pass": [421, 41, 26]}
{"time": "2021-02-23 21:03:46.740507", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch(Exception e) { new IllegalArgumentException(\"\");}}", "n_tokens": 61, "n_pass": [423, 42, 27]}
{"time": "2021-02-23 21:03:48.643035", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch(Exception e){ new IllegalArgumentException(\"\");}}", "n_tokens": 60, "n_pass": [429, 43, 28]}
{"time": "2021-02-23 21:03:50.532118", "score": "0.3573", "loss": "12.4113", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch(Exception e){new IllegalArgumentException(\"\");}}", "n_tokens": 59, "n_pass": [431, 44, 29]}
{"time": "2021-02-23 21:03:52.385493", "score": "0.3422", "loss": "12.5107", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch(Exception e){ IllegalArgumentException(\"\");}}", "n_tokens": 58, "n_pass": [432, 45, 30]}
{"time": "2021-02-23 21:03:54.272890", "score": "0.3422", "loss": "12.5107", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass,type));}catch(Exception e){IllegalArgumentException(\"\");}}", "n_tokens": 57, "n_pass": [433, 46, 31]}
{"time": "2021-02-23 21:04:01.788202", "score": "0.3574", "loss": "11.6417", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclasstype));}catch(Exception e){IllegalArgumentException(\"\");}}", "n_tokens": 56, "n_pass": [478, 50, 32]}
{"time": "2021-02-23 21:04:03.657202", "score": "0.4", "loss": "11.6281", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass));}catch(Exception e){IllegalArgumentException(\"\");}}", "n_tokens": 55, "n_pass": [479, 51, 33]}
{"time": "2021-02-23 21:04:05.582333", "score": "0.3666", "loss": "11.3893", "code": "@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass));}catch(Exception e){(\"\");}}", "n_tokens": 54, "n_pass": [491, 52, 34]}

Minimal simplified code:
@Override<T>List<T>toList(String json,Class<T>type){try{mapper.readValue(getTypeFactory().constructCollectionLikeType(ArrayListclass));}catch(Exception e){("");}}

