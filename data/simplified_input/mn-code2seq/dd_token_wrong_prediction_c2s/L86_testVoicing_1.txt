
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/experiment/src/test/java/zemberek/morphology/old_analysis/WordAnalyzerTest_testVoicing.java
method_name = testVoicing
method_body = @Test public void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph("armut"); assertHasParses(graph, "armut", "armuda", "armutlar", "armutlara"); assertUnParseable(graph, "armud", "armuta", "armudlar"); }
predict, score, loss = test, 0.6827060580253601, 23.015316009521484

Trace of simplified code(s):
{"time": "2021-02-24 09:26:42.926962", "score": "0.6827", "loss": "23.0153", "code": "@Test public void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph(\"armut\"); assertHasParses(graph, \"armut\", \"armuda\", \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armuta\", \"armudlar\"); }", "n_tokens": 75, "n_pass": [1, 1, 1]}
{"time": "2021-02-24 09:26:46.731192", "score": "0.9566", "loss": "22.1959", "code": " void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph(\"armut\"); assertHasParses(graph, \"armut\", \"armuda\", \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armuta\", \"armudlar\"); }", "n_tokens": 71, "n_pass": [44, 3, 2]}
{"time": "2021-02-24 09:26:48.633232", "score": "0.9565", "loss": "22.4597", "code": " void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph; assertHasParses(graph, \"armut\", \"armuda\", \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armuta\", \"armudlar\"); }", "n_tokens": 66, "n_pass": [49, 4, 3]}
{"time": "2021-02-24 09:26:50.505300", "score": "0.9547", "loss": "22.512", "code": " void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph; assertHasParses(graph, \"armuda\", \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armuta\", \"armudlar\"); }", "n_tokens": 61, "n_pass": [51, 5, 4]}
{"time": "2021-02-24 09:26:52.356485", "score": "0.9528", "loss": "22.5766", "code": " void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph; assertHasParses(graph, \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armuta\", \"armudlar\"); }", "n_tokens": 56, "n_pass": [52, 6, 5]}
{"time": "2021-02-24 09:26:57.925568", "score": "0.9526", "loss": "22.6048", "code": " void testVoicing() { DynamicLexiconGraph graph = getLexiconGraph; assertHasParses(graph, \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armudlar\"); }", "n_tokens": 51, "n_pass": [57, 9, 6]}
{"time": "2021-02-24 09:27:01.632867", "score": "0.98", "loss": "22.3123", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(graph, \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\", \"armudlar\"); }", "n_tokens": 47, "n_pass": [63, 11, 7]}
{"time": "2021-02-24 09:27:07.232593", "score": "0.9757", "loss": "22.3728", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(graph, \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\"); }", "n_tokens": 42, "n_pass": [69, 14, 8]}
{"time": "2021-02-24 09:27:19.124532", "score": "0.9833", "loss": "22.2228", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses( \"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\"); }", "n_tokens": 40, "n_pass": [107, 20, 9]}
{"time": "2021-02-24 09:27:29.811998", "score": "0.9833", "loss": "22.2228", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(\"armutlar\", \"armutlara\"); assertUnParseable(graph, \"armud\"); }", "n_tokens": 39, "n_pass": [159, 23, 10]}
{"time": "2021-02-24 09:27:33.459346", "score": "0.9833", "loss": "22.2228", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\"); assertUnParseable(graph, \"armud\"); }", "n_tokens": 38, "n_pass": [163, 25, 11]}
{"time": "2021-02-24 09:27:37.193900", "score": "0.9833", "loss": "22.2228", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable(graph, \"armud\"); }", "n_tokens": 37, "n_pass": [169, 27, 12]}
{"time": "2021-02-24 09:27:39.028958", "score": "0.9896", "loss": "22.0922", "code": " void testVoicing() { DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 35, "n_pass": [171, 28, 13]}
{"time": "2021-02-24 09:27:40.863488", "score": "0.9896", "loss": "22.0922", "code": "void testVoicing() { DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 34, "n_pass": [176, 29, 14]}
{"time": "2021-02-24 09:27:43.617665", "score": "0.9896", "loss": "22.0922", "code": "void testVoicing(){ DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 33, "n_pass": [182, 30, 15]}
{"time": "2021-02-24 09:27:45.478235", "score": "0.9896", "loss": "22.0922", "code": "void testVoicing(){DynamicLexiconGraph graph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 32, "n_pass": [184, 31, 16]}
{"time": "2021-02-24 09:27:49.040612", "score": "0.972", "loss": "22.1139", "code": "void testVoicing(){DynamicLexiconGraphgraph; assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 31, "n_pass": [186, 33, 17]}
{"time": "2021-02-24 09:27:52.634323", "score": "0.972", "loss": "22.1139", "code": "void testVoicing(){DynamicLexiconGraphgraph;assertHasParses(\"armutlar\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 30, "n_pass": [189, 35, 18]}
{"time": "2021-02-24 09:27:54.457260", "score": "0.9732", "loss": "22.4488", "code": "void testVoicing(){DynamicLexiconGraphgraph;assertHasParses(\"\",\"armutlara\");assertUnParseable( \"armud\"); }", "n_tokens": 29, "n_pass": [193, 36, 19]}
{"time": "2021-02-24 09:28:07.526406", "score": "0.9732", "loss": "22.4488", "code": "void testVoicing(){DynamicLexiconGraphgraph;assertHasParses(\"\",\"armutlara\");assertUnParseable(\"armud\"); }", "n_tokens": 28, "n_pass": [230, 42, 20]}
{"time": "2021-02-24 09:28:11.111382", "score": "0.9732", "loss": "22.4488", "code": "void testVoicing(){DynamicLexiconGraphgraph;assertHasParses(\"\",\"armutlara\");assertUnParseable(\"armud\");}", "n_tokens": 27, "n_pass": [235, 44, 21]}

Minimal simplified code:
void testVoicing(){DynamicLexiconGraphgraph;assertHasParses("","armutlara");assertUnParseable("armud");}

