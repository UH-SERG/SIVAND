
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/dependencyLibs/Mavlink/src/com/MAVLink/ardupilotmega/msg_data96_pack.java
method_name = pack
method_body = public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_DATA96; packet.payload.putUnsignedByte(type); packet.payload.putUnsignedByte(len); for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }
predict, score, loss = pack, 0.9544360637664795, 0.05455522984266281

Trace of simplified code(s):
{"time": "2021-02-13 18:49:06.998458", "score": "0.9627", "loss": "0.0485", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH); packet.sysid = 255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_DATA96; packet.payload.putUnsignedByte(type); packet.payload.putUnsignedByte(len); for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 136, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 18:49:08.361677", "score": "0.9523", "loss": "0.0608", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new255; packet.compid = 190; packet.msgid = MAVLINK_MSG_ID_DATA96; packet.payload.putUnsignedByte(type); packet.payload.putUnsignedByte(len); for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 119, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 18:49:09.713229", "score": "0.9431", "loss": "0.0704", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new255; packet.compid = 190; packet.payload.putUnsignedByte(type); packet.payload.putUnsignedByte(len); for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 102, "n_pass": [23, 3, 3]}
{"time": "2021-02-13 18:49:11.050090", "score": "0.8493", "loss": "0.217", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = new255; packet.compid = 190; packet; for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 85, "n_pass": [24, 4, 4]}
{"time": "2021-02-13 18:49:12.770984", "score": "0.7649", "loss": "0.367", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet = compid = 190; packet; for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 77, "n_pass": [48, 5, 5]}
{"time": "2021-02-13 18:49:14.126708", "score": "0.7162", "loss": "0.4933", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet; for (int i = 0; i < data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 69, "n_pass": [49, 6, 6]}
{"time": "2021-02-13 18:49:15.836885", "score": "0.7317", "loss": "0.4519", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet; for (int i = 0; data.length; i++) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 65, "n_pass": [78, 7, 7]}
{"time": "2021-02-13 18:49:17.171432", "score": "0.7792", "loss": "0.326", "code": "public MAVLinkPacket pack() { MAVLinkPacket packet =  packet; for (int i = 0; data.length;) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 61, "n_pass": [80, 8, 8]}
{"time": "2021-02-13 18:49:18.865442", "score": "0.7256", "loss": "0.405", "code": "public MAVLinkPacket pack() { MAVLinkPacket  packet; for (int i = 0; data.length;) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 57, "n_pass": [89, 9, 9]}
{"time": "2021-02-13 18:49:21.257336", "score": "0.8151", "loss": "0.2312", "code": "public MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; data.length;) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 55, "n_pass": [129, 10, 10]}
{"time": "2021-02-13 18:49:22.582719", "score": "0.8286", "loss": "0.2184", "code": "public MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; length;) { packet.payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 53, "n_pass": [136, 11, 11]}
{"time": "2021-02-13 18:49:23.911291", "score": "0.8551", "loss": "0.1931", "code": "public MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; length;) { payload.putUnsignedByte(data[i]); } return packet; }", "n_tokens": 51, "n_pass": [140, 12, 12]}
{"time": "2021-02-13 18:49:25.230183", "score": "0.6076", "loss": "0.6972", "code": "public MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; length;) { putUnsignedByte(data[i]); } return packet; }", "n_tokens": 49, "n_pass": [141, 13, 13]}
{"time": "2021-02-13 18:49:26.549763", "score": "0.8199", "loss": "0.2493", "code": "public MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 46, "n_pass": [146, 14, 14]}
{"time": "2021-02-13 18:49:27.862652", "score": "0.8199", "loss": "0.2493", "code": "MAVLinkPacket pack() { MAVLinkPacket ; for (int i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 44, "n_pass": [148, 15, 15]}
{"time": "2021-02-13 18:49:29.546076", "score": "0.4518", "loss": "1.2095", "code": "MAVLinkPacket pack() { ; for (int i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 42, "n_pass": [153, 16, 16]}
{"time": "2021-02-13 18:49:30.866361", "score": "0.4518", "loss": "1.2095", "code": "MAVLinkPacket pack() { for (int i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 40, "n_pass": [154, 17, 17]}
{"time": "2021-02-13 18:49:36.894413", "score": "0.4518", "loss": "1.2095", "code": "MAVLinkPacket pack() { for(int i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 39, "n_pass": [210, 18, 18]}
{"time": "2021-02-13 18:49:38.247717", "score": "0.6173", "loss": "0.6547", "code": "MAVLinkPacket pack() { for( i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 38, "n_pass": [212, 19, 19]}
{"time": "2021-02-13 18:49:39.555387", "score": "0.6173", "loss": "0.6547", "code": "MAVLinkPacket pack() { for(i = 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 37, "n_pass": [213, 20, 20]}
{"time": "2021-02-13 18:49:40.863678", "score": "0.6173", "loss": "0.6547", "code": "MAVLinkPacket pack() { for(i= 0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 36, "n_pass": [215, 21, 21]}
{"time": "2021-02-13 18:49:42.189517", "score": "0.6173", "loss": "0.6547", "code": "MAVLinkPacket pack() { for(i=0; length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 35, "n_pass": [217, 22, 22]}
{"time": "2021-02-13 18:49:43.500978", "score": "0.6173", "loss": "0.6547", "code": "MAVLinkPacket pack() { for(i=0;length;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 34, "n_pass": [220, 23, 23]}
{"time": "2021-02-13 18:49:44.793467", "score": "0.6068", "loss": "0.5611", "code": "MAVLinkPacket pack() { for(i=0;;) { putUnsignedByte(data[i]); } ; }", "n_tokens": 33, "n_pass": [221, 24, 24]}
{"time": "2021-02-13 18:49:46.096645", "score": "0.6068", "loss": "0.5611", "code": "MAVLinkPacket pack() { for(i=0;;){ putUnsignedByte(data[i]); } ; }", "n_tokens": 32, "n_pass": [224, 25, 25]}
{"time": "2021-02-13 18:49:47.395028", "score": "0.6068", "loss": "0.5611", "code": "MAVLinkPacket pack() { for(i=0;;){putUnsignedByte(data[i]); } ; }", "n_tokens": 31, "n_pass": [226, 26, 26]}
{"time": "2021-02-13 18:49:48.719701", "score": "0.4494", "loss": "1.0161", "code": "MAVLinkPacket pack() { for(i=0;;){(data[i]); } ; }", "n_tokens": 30, "n_pass": [227, 27, 27]}
{"time": "2021-02-13 18:49:50.046380", "score": "0.4494", "loss": "1.0161", "code": "MAVLinkPacket pack() { for(i=0;;){(data[i]); } }", "n_tokens": 28, "n_pass": [235, 28, 28]}
{"time": "2021-02-13 18:49:52.398502", "score": "0.4494", "loss": "1.0161", "code": "MAVLinkPacket pack(){ for(i=0;;){(data[i]); } }", "n_tokens": 27, "n_pass": [242, 29, 29]}
{"time": "2021-02-13 18:49:53.717032", "score": "0.4494", "loss": "1.0161", "code": "MAVLinkPacket pack(){for(i=0;;){(data[i]); } }", "n_tokens": 26, "n_pass": [244, 30, 30]}
{"time": "2021-02-13 18:49:55.016872", "score": "0.4289", "loss": "1.0264", "code": "MAVLinkPacket pack(){for(i0;;){(data[i]); } }", "n_tokens": 25, "n_pass": [248, 31, 31]}
{"time": "2021-02-13 18:49:56.315533", "score": "0.4289", "loss": "1.0264", "code": "MAVLinkPacket pack(){for(i;;){(data[i]); } }", "n_tokens": 24, "n_pass": [249, 32, 32]}
{"time": "2021-02-13 18:49:58.666161", "score": "0.5542", "loss": "0.6936", "code": "MAVLinkPacket pack(){for(;;){(data[i]); } }", "n_tokens": 23, "n_pass": [270, 33, 33]}
{"time": "2021-02-13 18:50:02.042391", "score": "0.5542", "loss": "0.6936", "code": "MAVLinkPacket pack(){for(;;){(data[i]);} }", "n_tokens": 22, "n_pass": [299, 34, 34]}
{"time": "2021-02-13 18:50:03.339047", "score": "0.5542", "loss": "0.6936", "code": "MAVLinkPacket pack(){for(;;){(data[i]);}}", "n_tokens": 21, "n_pass": [300, 35, 35]}

Minimal simplified code:
MAVLinkPacket pack(){for(;;){(data[i]);}}

