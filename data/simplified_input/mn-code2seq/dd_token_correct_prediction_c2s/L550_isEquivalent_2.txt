
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CastNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }
predict, score, loss = isEquivalent, 0.8389749526977539, 0.41302669048309326

Trace of simplified code(s):
{"time": "2021-02-13 17:51:55.863570", "score": "0.839", "loss": "0.413", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) o; return getType().equals(other.getType()) && castOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 77, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 17:51:57.190913", "score": "0.8667", "loss": "0.4103", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) & castOperand.isEquivalent(other.castOperand); } return false; }", "n_tokens": 58, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 17:52:01.207738", "score": "0.8235", "loss": "0.6219", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) & castOperand.isEquivalent; } return false; }", "n_tokens": 53, "n_pass": [38, 5, 3]}
{"time": "2021-02-13 17:52:03.267368", "score": "0.7383", "loss": "1.0899", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) & castOperand.isEquivalent; } ; }", "n_tokens": 50, "n_pass": [73, 6, 4]}
{"time": "2021-02-13 17:52:04.582222", "score": "0.7383", "loss": "1.0899", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode other = (CastNode) & castOperand.isEquivalent; } ; }", "n_tokens": 48, "n_pass": [75, 7, 5]}
{"time": "2021-02-13 17:52:06.263838", "score": "0.6907", "loss": "1.4504", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode= (CastNode) & castOperand.isEquivalent; } ; }", "n_tokens": 45, "n_pass": [89, 8, 6]}
{"time": "2021-02-13 17:52:07.578971", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } ; }", "n_tokens": 42, "n_pass": [92, 9, 7]}
{"time": "2021-02-13 17:52:14.251825", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 40, "n_pass": [151, 11, 8]}
{"time": "2021-02-13 17:52:16.286219", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o)throws StandardException { if (isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 39, "n_pass": [161, 12, 9]}
{"time": "2021-02-13 17:52:17.599744", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o)throws StandardException{ if (isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 38, "n_pass": [165, 13, 10]}
{"time": "2021-02-13 17:52:18.917413", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if (isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 37, "n_pass": [167, 14, 11]}
{"time": "2021-02-13 17:52:20.255806", "score": "0.6755", "loss": "1.5318", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if(isSameNodeType(o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 36, "n_pass": [169, 15, 12]}
{"time": "2021-02-13 17:52:21.563167", "score": "0.6559", "loss": "1.7615", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 35, "n_pass": [171, 16, 13]}
{"time": "2021-02-13 17:52:22.868673", "score": "0.6559", "loss": "1.7615", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){ CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 34, "n_pass": [176, 17, 14]}
{"time": "2021-02-13 17:52:24.169142", "score": "0.6559", "loss": "1.7615", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){CastNode= (CastNode) .isEquivalent; } }", "n_tokens": 33, "n_pass": [178, 18, 15]}
{"time": "2021-02-13 17:52:25.467749", "score": "0.9151", "loss": "0.334", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){CastNode (CastNode) .isEquivalent; } }", "n_tokens": 32, "n_pass": [180, 19, 16]}
{"time": "2021-02-13 17:52:26.790893", "score": "0.9151", "loss": "0.334", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){CastNode(CastNode) .isEquivalent; } }", "n_tokens": 31, "n_pass": [181, 20, 17]}
{"time": "2021-02-13 17:52:28.816582", "score": "0.7708", "loss": "0.8969", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){(CastNode) .isEquivalent; } }", "n_tokens": 30, "n_pass": [207, 21, 18]}
{"time": "2021-02-13 17:52:32.541414", "score": "0.7708", "loss": "0.8969", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){(CastNode).isEquivalent; } }", "n_tokens": 29, "n_pass": [243, 22, 19]}
{"time": "2021-02-13 17:52:33.837019", "score": "0.7708", "loss": "0.8969", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){(CastNode).isEquivalent;} }", "n_tokens": 28, "n_pass": [246, 23, 20]}
{"time": "2021-02-13 17:52:35.138356", "score": "0.7708", "loss": "0.8969", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){(CastNode).isEquivalent;}}", "n_tokens": 27, "n_pass": [248, 24, 21]}

Minimal simplified code:
boolean isEquivalent(ValueNode o)throws StandardException{if((o)){(CastNode).isEquivalent;}}

