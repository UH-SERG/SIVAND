
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/ql/analytic/AnalyticRecordSource_hasNext.java
method_name = hasNext
method_body = @Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }
predict, score, loss = hasNext, 0.7855056524276733, 0.6554357409477234

Trace of simplified code(s):
{"time": "2021-02-13 14:01:02.409412", "score": "0.8329", "loss": "0.5026", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) { record.of(cursor.next()); for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 14:01:03.747087", "score": "0.9546", "loss": "0.1427", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int i = 0, n = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 89, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 14:01:05.084222", "score": "0.9111", "loss": "0.2702", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { functions.getQuick(i).prepareFor(record); } return true; } return false; }", "n_tokens": 83, "n_pass": [45, 3, 3]}
{"time": "2021-02-13 14:01:06.421708", "score": "0.9004", "loss": "0.3413", "code": "@Override public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 76, "n_pass": [50, 4, 4]}
{"time": "2021-02-13 14:01:08.133650", "score": "0.7542", "loss": "1.08", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (int in = functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 73, "n_pass": [93, 5, 5]}
{"time": "2021-02-13 14:01:09.469465", "score": "0.8361", "loss": "0.7311", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (n = functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 70, "n_pass": [101, 6, 6]}
{"time": "2021-02-13 14:01:10.806238", "score": "0.7606", "loss": "1.0492", "code": "public boolean hasNext() { if (cursor.hasNext()) {for ( functions.size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 67, "n_pass": [102, 7, 7]}
{"time": "2021-02-13 14:01:12.116204", "score": "0.8813", "loss": "0.5171", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (size(); i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 64, "n_pass": [103, 8, 8]}
{"time": "2021-02-13 14:01:13.442467", "score": "0.8713", "loss": "0.5598", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; i < n; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 61, "n_pass": [104, 9, 9]}
{"time": "2021-02-13 14:01:14.756677", "score": "0.8248", "loss": "0.8564", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; i++) { prepareFor(record); } return true; } return false; }", "n_tokens": 58, "n_pass": [106, 10, 10]}
{"time": "2021-02-13 14:01:16.076970", "score": "0.8572", "loss": "0.7021", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) { prepareFor(record); } return true; } return false; }", "n_tokens": 55, "n_pass": [108, 11, 11]}
{"time": "2021-02-13 14:01:19.751105", "score": "0.881", "loss": "0.3918", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); } return true; } return false; }", "n_tokens": 53, "n_pass": [163, 12, 12]}
{"time": "2021-02-13 14:01:21.089904", "score": "0.8987", "loss": "0.388", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); } true; } return false; }", "n_tokens": 51, "n_pass": [167, 13, 13]}
{"time": "2021-02-13 14:01:22.398611", "score": "0.9143", "loss": "0.2619", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }; } return false; }", "n_tokens": 49, "n_pass": [168, 14, 14]}
{"time": "2021-02-13 14:01:23.721261", "score": "0.9143", "loss": "0.2619", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }} return false; }", "n_tokens": 47, "n_pass": [169, 15, 15]}
{"time": "2021-02-13 14:01:25.024527", "score": "0.8956", "loss": "0.4464", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }} false; }", "n_tokens": 45, "n_pass": [171, 16, 16]}
{"time": "2021-02-13 14:01:26.321206", "score": "0.8639", "loss": "0.4773", "code": "public boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 43, "n_pass": [172, 17, 17]}
{"time": "2021-02-13 14:01:27.612561", "score": "0.8639", "loss": "0.4773", "code": " boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 42, "n_pass": [174, 18, 18]}
{"time": "2021-02-13 14:01:28.903952", "score": "0.8639", "loss": "0.4773", "code": "boolean hasNext() { if (cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 41, "n_pass": [175, 19, 19]}
{"time": "2021-02-13 14:01:30.932804", "score": "0.8639", "loss": "0.4773", "code": "boolean hasNext(){ if (cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 40, "n_pass": [181, 20, 20]}
{"time": "2021-02-13 14:01:32.227591", "score": "0.8639", "loss": "0.4773", "code": "boolean hasNext(){if (cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 39, "n_pass": [183, 21, 21]}
{"time": "2021-02-13 14:01:33.518756", "score": "0.8639", "loss": "0.4773", "code": "boolean hasNext(){if(cursor.hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 38, "n_pass": [185, 22, 22]}
{"time": "2021-02-13 14:01:34.808628", "score": "0.7758", "loss": "1.042", "code": "boolean hasNext(){if(hasNext()) {for (; in; ) {(record); }}  }", "n_tokens": 36, "n_pass": [187, 23, 23]}
{"time": "2021-02-13 14:01:36.101134", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()) {for (;n; ) {(record); }}  }", "n_tokens": 34, "n_pass": [193, 24, 24]}
{"time": "2021-02-13 14:01:41.436657", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()) {for (;n; ){(record); }}  }", "n_tokens": 33, "n_pass": [242, 25, 25]}
{"time": "2021-02-13 14:01:42.736232", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()) {for (;n; ){(record);}}  }", "n_tokens": 32, "n_pass": [247, 26, 26]}
{"time": "2021-02-13 14:01:44.028268", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()) {for (;n; ){(record);}} }", "n_tokens": 31, "n_pass": [250, 27, 27]}
{"time": "2021-02-13 14:01:45.324379", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()) {for (;n; ){(record);}}}", "n_tokens": 30, "n_pass": [251, 28, 28]}
{"time": "2021-02-13 14:01:47.322601", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()){for (;n; ){(record);}}}", "n_tokens": 29, "n_pass": [265, 29, 29]}
{"time": "2021-02-13 14:01:48.637871", "score": "0.7676", "loss": "1.0594", "code": "boolean hasNext(){if(hasNext()){for(;n; ){(record);}}}", "n_tokens": 28, "n_pass": [268, 30, 30]}
{"time": "2021-02-13 14:01:49.926866", "score": "0.8487", "loss": "0.5572", "code": "boolean hasNext(){if(hasNext()){for(;; ){(record);}}}", "n_tokens": 27, "n_pass": [271, 31, 31]}
{"time": "2021-02-13 14:01:51.218705", "score": "0.8487", "loss": "0.5572", "code": "boolean hasNext(){if(hasNext()){for(;;){(record);}}}", "n_tokens": 26, "n_pass": [273, 32, 32]}

Minimal simplified code:
boolean hasNext(){if(hasNext()){for(;;){(record);}}}

