
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/JeffLi1993__java-core-learning-example/src/main/java/org/javacore/collection/set/HashSetObjT_main.java
method_name = main
method_body = @SuppressWarnings({ "rawtypes", "unchecked" }) public static void main(String[] args) { HashSet objs = new HashSet(); objs.add(new A()); objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); System.out.println("HashSet Elements:"); System.out.print("\t" + objs + "\n"); }
predict, score, loss = main, 0.9998375177383423, 0.00021908873168285936

Trace of simplified code(s):
{"time": "2021-02-13 04:24:59.565306", "score": "0.9991", "loss": "0.0015", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static void main(String[] args) { HashSet objs = new HashSet(); objs.add(new A()); objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + objs + \"\\n\"); }", "n_tokens": 159, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:25:00.939586", "score": "0.9998", "loss": "0.0003", "code": "static void main(String[] args) { HashSet objs = new HashSet(); objs.add(new A()); objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + objs + \"\\n\"); }", "n_tokens": 140, "n_pass": [20, 2, 2]}
{"time": "2021-02-13 04:25:02.288746", "score": "0.9998", "loss": "0.0003", "code": "static void main(String[] args) { HashSet objs =objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + objs + \"\\n\"); }", "n_tokens": 120, "n_pass": [21, 3, 3]}
{"time": "2021-02-13 04:25:03.617916", "score": "0.9993", "loss": "0.0013", "code": "static void main(String[] args) { HashSet objs =objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); (\"\\t\" + objs + \"\\n\"); }", "n_tokens": 100, "n_pass": [25, 4, 4]}
{"time": "2021-02-13 04:25:04.979202", "score": "0.9996", "loss": "0.0007", "code": "static void main(String[] args) { HashSet objs =objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 95, "n_pass": [72, 5, 5]}
{"time": "2021-02-13 04:25:06.322948", "score": "0.9999", "loss": "0.0004", "code": "static void main(String[] args) { objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 90, "n_pass": [78, 6, 6]}
{"time": "2021-02-13 04:25:07.663853", "score": "0.9997", "loss": "0.0007", "code": "static void main(String[] args) { objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(); objs.add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 85, "n_pass": [87, 7, 7]}
{"time": "2021-02-13 04:25:09.043436", "score": "0.9997", "loss": "0.0006", "code": "static void main(String[] args) { objs.add(new B()); objs.add(new C()); objs.add(new A()).add(); objs.add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 82, "n_pass": [139, 8, 8]}
{"time": "2021-02-13 04:25:10.373834", "score": "0.9997", "loss": "0.0005", "code": "static void main(String[] args) { objs.add(new B()); objs.add(new C()); objs.add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 79, "n_pass": [142, 9, 9]}
{"time": "2021-02-13 04:25:11.731706", "score": "0.9997", "loss": "0.0005", "code": "void main(String[] args) { objs.add(new B()); objs.add(new C()); objs.add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 77, "n_pass": [151, 10, 10]}
{"time": "2021-02-13 04:25:13.417988", "score": "0.9997", "loss": "0.0005", "code": "void main(String[] args) { objs(new B()); objs.add(new C()); objs.add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 75, "n_pass": [159, 11, 11]}
{"time": "2021-02-13 04:25:14.745649", "score": "0.9997", "loss": "0.0006", "code": "void main(String[] args) { objs(new B()); objs(new C()); objs.add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 73, "n_pass": [165, 12, 12]}
{"time": "2021-02-13 04:25:16.096951", "score": "0.9998", "loss": "0.0003", "code": "void main(String[] args) { objs(new B()); objs(new C()).add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 70, "n_pass": [169, 13, 13]}
{"time": "2021-02-13 04:25:17.777537", "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) {(new B()); objs(new C()).add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 68, "n_pass": [189, 14, 14]}
{"time": "2021-02-13 04:25:19.085731", "score": "0.9999", "loss": "0.0001", "code": "void main(String[] args) {(new B());(new C()).add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 66, "n_pass": [194, 15, 15]}
{"time": "2021-02-13 04:25:23.420084", "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) {(new B());( C()).add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 65, "n_pass": [274, 16, 16]}
{"time": "2021-02-13 04:25:24.733566", "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) {(new B());(C()).add(new A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 64, "n_pass": [275, 17, 17]}
{"time": "2021-02-13 04:25:26.069561", "score": "0.9997", "loss": "0.0005", "code": "void main(String[] args) {(new B());(C()).add( A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 63, "n_pass": [283, 18, 18]}
{"time": "2021-02-13 04:25:27.382697", "score": "0.9997", "loss": "0.0005", "code": "void main(String[] args) {(new B());(C()).add(A()).add(); (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 62, "n_pass": [284, 19, 19]}
{"time": "2021-02-13 04:25:28.692045", "score": "0.9996", "loss": "0.0006", "code": "void main(String[] args) {(new B());(C()).add(A()).add; (new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 60, "n_pass": [291, 20, 20]}
{"time": "2021-02-13 04:25:29.994523", "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) {(new B());(C()).add(A()).add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 58, "n_pass": [292, 21, 21]}
{"time": "2021-02-13 04:25:32.058249", "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args) {(new B());(C()).add(A()).add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 57, "n_pass": [312, 22, 22]}
{"time": "2021-02-13 04:25:33.403819", "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){(new B());(C()).add(A()).add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 56, "n_pass": [315, 23, 23]}
{"time": "2021-02-13 04:25:34.717559", "score": "0.9998", "loss": "0.0004", "code": "void main(String[]args){( B());(C()).add(A()).add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 55, "n_pass": [318, 24, 24]}
{"time": "2021-02-13 04:25:36.033466", "score": "0.9998", "loss": "0.0004", "code": "void main(String[]args){(B());(C()).add(A()).add(new C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 54, "n_pass": [319, 25, 25]}
{"time": "2021-02-13 04:25:40.075857", "score": "0.999", "loss": "0.0023", "code": "void main(String[]args){(B());(C()).add(A()).add( C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 53, "n_pass": [387, 26, 26]}
{"time": "2021-02-13 04:25:41.396435", "score": "0.999", "loss": "0.0023", "code": "void main(String[]args){(B());(C()).add(A()).add(C()); (\"\\t\"+ \"\\n\"); }", "n_tokens": 52, "n_pass": [388, 27, 27]}
{"time": "2021-02-13 04:25:42.727721", "score": "0.999", "loss": "0.0023", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\\t\"+ \"\\n\"); }", "n_tokens": 51, "n_pass": [394, 28, 28]}
{"time": "2021-02-13 04:25:44.031770", "score": "0.999", "loss": "0.0023", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"t\"+ \"\\n\"); }", "n_tokens": 50, "n_pass": [397, 29, 29]}
{"time": "2021-02-13 04:25:45.363932", "score": "0.9987", "loss": "0.0028", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\"+ \"\\n\"); }", "n_tokens": 49, "n_pass": [398, 30, 30]}
{"time": "2021-02-13 04:25:46.666418", "score": "0.9987", "loss": "0.0028", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\"+\"\\n\"); }", "n_tokens": 48, "n_pass": [401, 31, 31]}
{"time": "2021-02-13 04:25:47.981859", "score": "0.9994", "loss": "0.0014", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\"+\"n\"); }", "n_tokens": 47, "n_pass": [403, 32, 32]}
{"time": "2021-02-13 04:25:49.294888", "score": "0.9987", "loss": "0.0028", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\"+\"\"); }", "n_tokens": 46, "n_pass": [404, 33, 33]}
{"time": "2021-02-13 04:25:50.611111", "score": "0.9987", "loss": "0.0028", "code": "void main(String[]args){(B());(C()).add(A()).add(C());(\"\"+\"\");}", "n_tokens": 45, "n_pass": [408, 34, 34]}

Minimal simplified code:
void main(String[]args){(B());(C()).add(A()).add(C());(""+"");}

