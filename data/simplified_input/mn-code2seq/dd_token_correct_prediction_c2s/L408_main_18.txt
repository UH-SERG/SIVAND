
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/JeffLi1993__java-core-learning-example/src/main/java/org/javacore/thread/SimplePriorities_main.java
method_name = main
method_body = public static void main(String[] args) { ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0; i < 5; i++) exec.execute(new SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }
predict, score, loss = main, 0.9995585083961487, 0.0006866115145385265

Trace of simplified code(s):
{"time": "2021-02-13 15:27:03.391723", "score": "0.9996", "loss": "0.0006", "code": "public static void main(String[] args) { ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0; i < 5; i++) exec.execute(new SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 96, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 15:27:04.766957", "score": "0.9993", "loss": "0.0011", "code": "public static void main(String[] args) { ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0; i < 5;SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 84, "n_pass": [24, 2, 2]}
{"time": "2021-02-13 15:27:06.502154", "score": "0.9988", "loss": "0.0017", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i = 0; i < 5;SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 78, "n_pass": [54, 3, 3]}
{"time": "2021-02-13 15:27:08.230617", "score": "0.9985", "loss": "0.0021", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0; i < 5;SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 75, "n_pass": [97, 4, 4]}
{"time": "2021-02-13 15:27:09.567241", "score": "0.9986", "loss": "0.0019", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(Thread.MIN_PRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 72, "n_pass": [98, 5, 5]}
{"time": "2021-02-13 15:27:10.905654", "score": "0.9982", "loss": "0.0023", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute(new SimplePriorities(Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 69, "n_pass": [101, 6, 6]}
{"time": "2021-02-13 15:27:12.266441", "score": "0.9948", "loss": "0.0069", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY)); exec.shutdown(); }", "n_tokens": 66, "n_pass": [105, 7, 7]}
{"time": "2021-02-13 15:27:13.601541", "score": "0.9846", "loss": "0.019", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY));shutdown(); }", "n_tokens": 63, "n_pass": [109, 8, 8]}
{"time": "2021-02-13 15:27:14.929804", "score": "0.9937", "loss": "0.0089", "code": "public static void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 60, "n_pass": [110, 9, 9]}
{"time": "2021-02-13 15:27:16.250312", "score": "0.9937", "loss": "0.0089", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (int i0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 57, "n_pass": [112, 10, 10]}
{"time": "2021-02-13 15:27:17.942971", "score": "0.9964", "loss": "0.005", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;  5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 54, "n_pass": [121, 11, 11]}
{"time": "2021-02-13 15:27:22.311066", "score": "0.9964", "loss": "0.005", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities(ThreadPRIORITY)); exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 52, "n_pass": [182, 12, 12]}
{"time": "2021-02-13 15:27:23.640700", "score": "0.998", "loss": "0.0029", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities()); exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 50, "n_pass": [185, 13, 13]}
{"time": "2021-02-13 15:27:24.960320", "score": "0.9979", "loss": "0.0029", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())exec.execute((Thread.MAX_PRIORITY));; }", "n_tokens": 48, "n_pass": [187, 14, 14]}
{"time": "2021-02-13 15:27:26.278159", "score": "0.9948", "loss": "0.0065", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread.MAX_PRIORITY));; }", "n_tokens": 46, "n_pass": [188, 15, 15]}
{"time": "2021-02-13 15:27:27.602538", "score": "0.9903", "loss": "0.0122", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread_PRIORITY));; }", "n_tokens": 44, "n_pass": [191, 16, 16]}
{"time": "2021-02-13 15:27:28.919287", "score": "0.9945", "loss": "0.0069", "code": " void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 42, "n_pass": [192, 17, 17]}
{"time": "2021-02-13 15:27:30.237243", "score": "0.9945", "loss": "0.0069", "code": "void main(String[] args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 41, "n_pass": [196, 18, 18]}
{"time": "2021-02-13 15:27:32.278407", "score": "0.9945", "loss": "0.0069", "code": "void main(String[]args) { ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 40, "n_pass": [204, 19, 19]}
{"time": "2021-02-13 15:27:33.600941", "score": "0.9945", "loss": "0.0069", "code": "void main(String[]args){ ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 39, "n_pass": [207, 20, 20]}
{"time": "2021-02-13 15:27:34.918762", "score": "0.9945", "loss": "0.0069", "code": "void main(String[]args){ExecutorService.newCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 38, "n_pass": [209, 21, 21]}
{"time": "2021-02-13 15:27:36.234776", "score": "0.9956", "loss": "0.0052", "code": "void main(String[]args){ExecutorServicenewCachedThreadPool(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 37, "n_pass": [211, 22, 22]}
{"time": "2021-02-13 15:27:37.560821", "score": "0.9954", "loss": "0.0053", "code": "void main(String[]args){ExecutorService(); for (0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 36, "n_pass": [212, 23, 23]}
{"time": "2021-02-13 15:27:42.295769", "score": "0.9954", "loss": "0.0053", "code": "void main(String[]args){ExecutorService(); for(0;5;SimplePriorities())execute((Thread));; }", "n_tokens": 35, "n_pass": [261, 24, 24]}
{"time": "2021-02-13 15:27:43.628010", "score": "0.9911", "loss": "0.01", "code": "void main(String[]args){ExecutorService(); for(;5;SimplePriorities())execute((Thread));; }", "n_tokens": 34, "n_pass": [262, 25, 25]}
{"time": "2021-02-13 15:27:44.964345", "score": "0.9533", "loss": "0.0513", "code": "void main(String[]args){ExecutorService(); for(;;SimplePriorities())execute((Thread));; }", "n_tokens": 33, "n_pass": [264, 26, 26]}
{"time": "2021-02-13 15:27:46.295572", "score": "0.9818", "loss": "0.0275", "code": "void main(String[]args){ExecutorService(); for(;;SimplePriorities())((Thread));; }", "n_tokens": 32, "n_pass": [270, 27, 27]}
{"time": "2021-02-13 15:27:47.606622", "score": "0.9818", "loss": "0.0275", "code": "void main(String[]args){ExecutorService(); for(;;SimplePriorities())((Thread)); }", "n_tokens": 31, "n_pass": [276, 28, 28]}
{"time": "2021-02-13 15:27:48.916534", "score": "0.9818", "loss": "0.0275", "code": "void main(String[]args){ExecutorService(); for(;;SimplePriorities())((Thread));}", "n_tokens": 30, "n_pass": [278, 29, 29]}
{"time": "2021-02-13 15:27:50.942205", "score": "0.9818", "loss": "0.0275", "code": "void main(String[]args){ExecutorService();for(;;SimplePriorities())((Thread));}", "n_tokens": 29, "n_pass": [294, 30, 30]}

Minimal simplified code:
void main(String[]args){ExecutorService();for(;;SimplePriorities())((Thread));}

