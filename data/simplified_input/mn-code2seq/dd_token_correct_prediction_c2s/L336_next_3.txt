
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/std/ConcurrentHashMap_next.java
method_name = next
method_body = public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException(); CharSequence k = p.key; V v = p.val; lastReturned = p; advance(); return new MapEntry<>(k, v, map); }
predict, score, loss = next, 0.9740985035896301, 0.029568500816822052

Trace of simplified code(s):
{"time": "2021-02-13 14:09:09.798381", "score": "0.9741", "loss": "0.0296", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException(); CharSequence k = p.key; V v = p.val; lastReturned = p; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 107, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 14:09:11.138827", "score": "0.9849", "loss": "0.0232", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> p; if ((p = next) == null) throw new NoSuchElementException();p; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 80, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 14:09:12.449010", "score": "0.8304", "loss": "0.2221", "code": "public final Map.Entry<CharSequence, V> next() { Node<V> pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 53, "n_pass": [12, 3, 3]}
{"time": "2021-02-13 14:09:14.164385", "score": "0.7234", "loss": "0.3676", "code": "Entry<CharSequence, V> next() { Node<V> pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 47, "n_pass": [33, 4, 4]}
{"time": "2021-02-13 14:09:16.831040", "score": "0.8578", "loss": "0.2246", "code": "Entry<CharSequence, V> next() { Node pp; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 44, "n_pass": [60, 6, 5]}
{"time": "2021-02-13 14:09:18.133194", "score": "0.8047", "loss": "0.3404", "code": "Entry<CharSequence, V> next() { Node; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 41, "n_pass": [61, 7, 6]}
{"time": "2021-02-13 14:09:20.736808", "score": "0.6249", "loss": "0.618", "code": "Entry<CharSequence> next() { Node; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 38, "n_pass": [70, 9, 7]}
{"time": "2021-02-13 14:09:24.068239", "score": "0.6249", "loss": "0.618", "code": "Entry<CharSequence>next() { Node; advance(); return new MapEntry<>(k, v, map); }", "n_tokens": 37, "n_pass": [106, 11, 8]}
{"time": "2021-02-13 14:09:27.976173", "score": "0.3827", "loss": "1.2103", "code": "Entry<CharSequence>next() { Node; advance(); new MapEntry<>(k, v, map); }", "n_tokens": 35, "n_pass": [114, 14, 9]}
{"time": "2021-02-13 14:09:29.302359", "score": "0.3827", "loss": "1.2103", "code": "Entry<CharSequence>next() { Node; advance(); new MapEntry(k, v, map); }", "n_tokens": 33, "n_pass": [117, 15, 10]}
{"time": "2021-02-13 14:09:31.897449", "score": "0.2706", "loss": "1.6446", "code": "Entry<CharSequence>next() { Node; advance(); new MapEntry(k,  map); }", "n_tokens": 31, "n_pass": [120, 17, 11]}
{"time": "2021-02-13 14:09:33.590260", "score": "0.6411", "loss": "0.6439", "code": "Entry<CharSequence>next() {; advance(); new MapEntry(k,  map); }", "n_tokens": 29, "n_pass": [131, 18, 12]}
{"time": "2021-02-13 14:09:34.894184", "score": "0.6411", "loss": "0.6439", "code": "Entry<CharSequence>next() {advance(); new MapEntry(k,  map); }", "n_tokens": 27, "n_pass": [132, 19, 13]}
{"time": "2021-02-13 14:09:36.182101", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next() {advance(); MapEntry(k,  map); }", "n_tokens": 25, "n_pass": [135, 20, 14]}
{"time": "2021-02-13 14:09:40.148130", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next() {advance(); MapEntry(k, map); }", "n_tokens": 24, "n_pass": [174, 21, 15]}
{"time": "2021-02-13 14:09:41.459509", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next() {advance(); MapEntry(k,map); }", "n_tokens": 23, "n_pass": [175, 22, 16]}
{"time": "2021-02-13 14:09:42.758106", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next() {advance(); MapEntry(k,map);}", "n_tokens": 22, "n_pass": [179, 23, 17]}
{"time": "2021-02-13 14:09:44.408221", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next(){advance(); MapEntry(k,map);}", "n_tokens": 21, "n_pass": [188, 24, 18]}
{"time": "2021-02-13 14:09:45.715613", "score": "0.7258", "loss": "0.4746", "code": "Entry<CharSequence>next(){advance();MapEntry(k,map);}", "n_tokens": 20, "n_pass": [194, 25, 19]}
{"time": "2021-02-13 14:09:47.015438", "score": "0.5028", "loss": "1.0174", "code": "Entry<CharSequence>next(){advance();MapEntry(kmap);}", "n_tokens": 19, "n_pass": [198, 26, 20]}
{"time": "2021-02-13 14:09:48.311200", "score": "0.6292", "loss": "0.787", "code": "Entry<CharSequence>next(){advance();MapEntry(k);}", "n_tokens": 18, "n_pass": [199, 27, 21]}
{"time": "2021-02-13 14:09:49.965076", "score": "0.6867", "loss": "0.6608", "code": "Entry<CharSequence>next(){advance();(k);}", "n_tokens": 17, "n_pass": [215, 28, 22]}

Minimal simplified code:
Entry<CharSequence>next(){advance();(k);}

