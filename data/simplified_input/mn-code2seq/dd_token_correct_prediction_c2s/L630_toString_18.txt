
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-sts/openam-client-sts/src/main/java/org/forgerock/openam/sts/config/user/AuthTargetMapping_toString.java
method_name = toString
method_body = @Override public String toString() { StringBuilder builder = new StringBuilder(); for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\n'); } return builder.toString(); }
predict, score, loss = toString, 0.9482280611991882, 0.1388358175754547

Trace of simplified code(s):
{"time": "2021-02-13 19:19:23.458550", "score": "0.9482", "loss": "0.1388", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 104, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:19:25.141588", "score": "0.9572", "loss": "0.1105", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(AMSTSConstants.PIPE).append(entry.getValue().toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 91, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 19:19:26.469778", "score": "0.9858", "loss": "0.0393", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append(toString()).append('\\n'); } return builder.toString(); }", "n_tokens": 78, "n_pass": [25, 3, 3]}
{"time": "2021-02-13 19:19:27.830770", "score": "0.9675", "loss": "0.0875", "code": "@Override public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 71, "n_pass": [44, 4, 4]}
{"time": "2021-02-13 19:19:29.529877", "score": "0.7842", "loss": "0.7559", "code": "public String toString() { for (Map.Entry<String, AuthTarget> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 68, "n_pass": [84, 5, 5]}
{"time": "2021-02-13 19:19:30.856135", "score": "0.7831", "loss": "0.7493", "code": "public String toString() { for (Map.Entry<String> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 65, "n_pass": [90, 6, 6]}
{"time": "2021-02-13 19:19:35.879068", "score": "0.7622", "loss": "0.8272", "code": "public String toString() { for (MapEntry<String> entry : mappings.entrySet()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 64, "n_pass": [153, 8, 7]}
{"time": "2021-02-13 19:19:37.200711", "score": "0.8704", "loss": "0.5081", "code": "public String toString() { for (MapEntry<String> entry : mappings()) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 62, "n_pass": [159, 9, 8]}
{"time": "2021-02-13 19:19:38.548583", "score": "0.8476", "loss": "0.4572", "code": "public String toString() { for (MapEntry<String> entry : mappings) { builder.append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 60, "n_pass": [160, 10, 9]}
{"time": "2021-02-13 19:19:39.896442", "score": "0.8123", "loss": "0.5763", "code": "public String toString() { for (MapEntry<String> entry : mappings) { append(entry.getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 58, "n_pass": [163, 11, 10]}
{"time": "2021-02-13 19:19:41.233675", "score": "0.8561", "loss": "0.4329", "code": "public String toString() { for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } return builder.toString(); }", "n_tokens": 56, "n_pass": [165, 12, 11]}
{"time": "2021-02-13 19:19:42.909373", "score": "0.9609", "loss": "0.1316", "code": "public String toString() { for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } builder.toString(); }", "n_tokens": 54, "n_pass": [174, 13, 12]}
{"time": "2021-02-13 19:19:44.257492", "score": "0.9521", "loss": "0.2", "code": "public String toString() { for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 52, "n_pass": [175, 14, 13]}
{"time": "2021-02-13 19:19:45.575565", "score": "0.9521", "loss": "0.2", "code": " String toString() { for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 51, "n_pass": [179, 15, 14]}
{"time": "2021-02-13 19:19:46.886087", "score": "0.9521", "loss": "0.2", "code": "String toString() { for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 50, "n_pass": [180, 16, 15]}
{"time": "2021-02-13 19:19:49.279961", "score": "0.9521", "loss": "0.2", "code": "String toString(){ for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 49, "n_pass": [186, 17, 16]}
{"time": "2021-02-13 19:19:50.588740", "score": "0.9521", "loss": "0.2", "code": "String toString(){for (MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 48, "n_pass": [188, 18, 17]}
{"time": "2021-02-13 19:19:51.929338", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(MapEntry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 47, "n_pass": [190, 19, 18]}
{"time": "2021-02-13 19:19:53.260675", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(Entry<String> entry : mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 46, "n_pass": [192, 20, 19]}
{"time": "2021-02-13 19:19:59.309628", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(Entry<String> entry: mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 45, "n_pass": [259, 21, 20]}
{"time": "2021-02-13 19:20:00.621168", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(Entry<String> entry:mappings) { append(getKey()).append('\\n'); } toString(); }", "n_tokens": 44, "n_pass": [260, 22, 21]}
{"time": "2021-02-13 19:20:01.946964", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(Entry<String> entry:mappings){ append(getKey()).append('\\n'); } toString(); }", "n_tokens": 43, "n_pass": [263, 23, 22]}
{"time": "2021-02-13 19:20:03.290130", "score": "0.9521", "loss": "0.2", "code": "String toString(){for(Entry<String> entry:mappings){append(getKey()).append('\\n'); } toString(); }", "n_tokens": 42, "n_pass": [265, 24, 23]}
{"time": "2021-02-13 19:20:04.599671", "score": "0.9485", "loss": "0.2355", "code": "String toString(){for(Entry<String> entry:mappings){(getKey()).append('\\n'); } toString(); }", "n_tokens": 41, "n_pass": [266, 25, 24]}
{"time": "2021-02-13 19:20:05.915351", "score": "0.9155", "loss": "0.4235", "code": "String toString(){for(Entry<String> entry:mappings){(getKey()).append('n'); } toString(); }", "n_tokens": 40, "n_pass": [276, 26, 25]}
{"time": "2021-02-13 19:20:07.563191", "score": "0.9155", "loss": "0.4235", "code": "String toString(){for(Entry<String> entry:mappings){(getKey()).append('n');} toString(); }", "n_tokens": 39, "n_pass": [281, 27, 26]}
{"time": "2021-02-13 19:20:08.879552", "score": "0.9155", "loss": "0.4235", "code": "String toString(){for(Entry<String> entry:mappings){(getKey()).append('n');}toString(); }", "n_tokens": 38, "n_pass": [283, 28, 27]}
{"time": "2021-02-13 19:20:10.189761", "score": "0.9155", "loss": "0.4235", "code": "String toString(){for(Entry<String> entry:mappings){(getKey()).append('n');}toString();}", "n_tokens": 37, "n_pass": [288, 29, 28]}
{"time": "2021-02-13 19:20:12.585548", "score": "0.9155", "loss": "0.4235", "code": "String toString(){for(Entry<String>entry:mappings){(getKey()).append('n');}toString();}", "n_tokens": 36, "n_pass": [302, 30, 29]}

Minimal simplified code:
String toString(){for(Entry<String>entry:mappings){(getKey()).append('n');}toString();}

