
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/batch/src/main/java/droidefense/batch/BatchManager_addTask.java
method_name = addTask
method_body = private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException("Task to be added is not constructed! Null object task found"); } this.taskList.add(task); }
predict, score, loss = addTask, 0.8822551965713501, 0.3405609428882599

Trace of simplified code(s):
{"time": "2021-02-13 15:05:05.044615", "score": "0.8823", "loss": "0.3406", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task to be added is not constructed! Null object task found\"); } this.taskList.add(task); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 15:05:06.359955", "score": "0.8973", "loss": "0.3495", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task found\"); } this.taskList.add(task); }", "n_tokens": 57, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 15:05:08.084002", "score": "0.8472", "loss": "0.5597", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task found\"); }taskList.add(task); }", "n_tokens": 54, "n_pass": [77, 3, 3]}
{"time": "2021-02-13 15:05:10.717482", "score": "0.7811", "loss": "0.9563", "code": "private void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task found\"); }taskList.add; }", "n_tokens": 51, "n_pass": [79, 5, 4]}
{"time": "2021-02-13 15:05:12.031385", "score": "0.7811", "loss": "0.9563", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { throw new InvalidTaskException(\"Task found\"); }taskList.add; }", "n_tokens": 49, "n_pass": [81, 6, 5]}
{"time": "2021-02-13 15:05:13.703625", "score": "0.7188", "loss": "1.4271", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) {  InvalidTaskException(\"Task found\"); }taskList.add; }", "n_tokens": 46, "n_pass": [96, 7, 6]}
{"time": "2021-02-13 15:05:21.014365", "score": "0.7188", "loss": "1.4271", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { InvalidTaskException(\"Task found\"); }taskList.add; }", "n_tokens": 45, "n_pass": [157, 9, 7]}
{"time": "2021-02-13 15:05:22.317438", "score": "0.6593", "loss": "1.8614", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { (\"Task found\"); }taskList.add; }", "n_tokens": 44, "n_pass": [158, 10, 8]}
{"time": "2021-02-13 15:05:23.616002", "score": "0.6001", "loss": "2.1625", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { (\" found\"); }taskList.add; }", "n_tokens": 43, "n_pass": [160, 11, 9]}
{"time": "2021-02-13 15:05:24.912812", "score": "0.6001", "loss": "2.1625", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { (\"found\"); }taskList.add; }", "n_tokens": 42, "n_pass": [161, 12, 10]}
{"time": "2021-02-13 15:05:26.207858", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task) throws InvalidTaskException { if (task == null) { (\"found\"); }add; }", "n_tokens": 40, "n_pass": [165, 13, 11]}
{"time": "2021-02-13 15:05:29.537114", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task)throws InvalidTaskException { if (task == null) { (\"found\"); }add; }", "n_tokens": 39, "n_pass": [176, 15, 12]}
{"time": "2021-02-13 15:05:30.878074", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task)throws InvalidTaskException{ if (task == null) { (\"found\"); }add; }", "n_tokens": 38, "n_pass": [180, 16, 13]}
{"time": "2021-02-13 15:05:32.167067", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if (task == null) { (\"found\"); }add; }", "n_tokens": 37, "n_pass": [182, 17, 14]}
{"time": "2021-02-13 15:05:33.463215", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task == null) { (\"found\"); }add; }", "n_tokens": 36, "n_pass": [184, 18, 15]}
{"time": "2021-02-13 15:05:34.773439", "score": "0.5379", "loss": "2.5698", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task== null) { (\"found\"); }add; }", "n_tokens": 35, "n_pass": [187, 19, 16]}
{"time": "2021-02-13 15:05:36.084748", "score": "0.497", "loss": "2.752", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task= null) { (\"found\"); }add; }", "n_tokens": 34, "n_pass": [188, 20, 17]}
{"time": "2021-02-13 15:05:37.386334", "score": "0.497", "loss": "2.752", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task=null) { (\"found\"); }add; }", "n_tokens": 33, "n_pass": [190, 21, 18]}
{"time": "2021-02-13 15:05:38.682879", "score": "0.497", "loss": "2.752", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task=null){ (\"found\"); }add; }", "n_tokens": 32, "n_pass": [193, 22, 19]}
{"time": "2021-02-13 15:05:40.011777", "score": "0.497", "loss": "2.752", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task=null){(\"found\"); }add; }", "n_tokens": 31, "n_pass": [195, 23, 20]}
{"time": "2021-02-13 15:05:43.332299", "score": "0.5386", "loss": "2.5093", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(tasknull){(\"found\"); }add; }", "n_tokens": 30, "n_pass": [218, 25, 21]}
{"time": "2021-02-13 15:05:44.624127", "score": "0.5133", "loss": "2.5178", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"found\"); }add; }", "n_tokens": 29, "n_pass": [219, 26, 22]}
{"time": "2021-02-13 15:05:49.274244", "score": "0.5117", "loss": "2.526", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\"); }add; }", "n_tokens": 28, "n_pass": [254, 28, 23]}
{"time": "2021-02-13 15:05:50.580781", "score": "0.5117", "loss": "2.526", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\");}add; }", "n_tokens": 27, "n_pass": [257, 29, 24]}
{"time": "2021-02-13 15:05:53.188689", "score": "0.5117", "loss": "2.526", "code": "void addTask(IBatchTask task)throws InvalidTaskException{if(task){(\"\");}add;}", "n_tokens": 26, "n_pass": [261, 31, 25]}

Minimal simplified code:
void addTask(IBatchTask task)throws InvalidTaskException{if(task){("");}add;}

