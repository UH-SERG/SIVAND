
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/gplibs__android-magic-surface-view/src/main/java/com/gplibs/magicsurfaceview/GLUtil_loadShader.java
method_name = loadShader
method_body = static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException("Could not compile shader " + shaderType + ":" + info); } } return shader; }
predict, score, loss = loadShader, 0.9055503606796265, 0.30324581265449524

Trace of simplified code(s):
{"time": "2021-02-13 14:37:17.704819", "score": "0.9001", "loss": "0.3552", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES20.glShaderSource(shader, source); GLES20.glCompileShader(shader); int[] compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 198, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 14:37:19.117038", "score": "0.8788", "loss": "0.4185", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 173, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 14:37:20.520363", "score": "0.8839", "loss": "0.3786", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLES20.glDeleteShader(shader); throw new RuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 161, "n_pass": [46, 3, 3]}
{"time": "2021-02-13 14:37:21.878140", "score": "0.7945", "loss": "0.6254", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" + shaderType + \":\" + info); } } return shader; }", "n_tokens": 148, "n_pass": [50, 4, 4]}
{"time": "2021-02-13 14:37:23.244954", "score": "0.779", "loss": "0.6898", "code": "static int loadShader(int shaderType, String source) { int shader = GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 135, "n_pass": [52, 5, 5]}
{"time": "2021-02-13 14:37:24.603384", "score": "0.7895", "loss": "0.6326", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.glGetShaderInfoLog(shader); GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 129, "n_pass": [91, 6, 6]}
{"time": "2021-02-13 14:37:27.296828", "score": "0.808", "loss": "0.5787", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new int[1]; GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 123, "n_pass": [105, 8, 7]}
{"time": "2021-02-13 14:37:28.645950", "score": "0.6876", "loss": "1.129", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new GLES20.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 117, "n_pass": [118, 9, 8]}
{"time": "2021-02-13 14:37:30.009158", "score": "0.6892", "loss": "1.134", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new0.glGetShaderiv(shader, GLES20); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 114, "n_pass": [176, 10, 9]}
{"time": "2021-02-13 14:37:31.368454", "score": "0.6669", "loss": "1.2992", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String info = GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 111, "n_pass": [178, 11, 10]}
{"time": "2021-02-13 14:37:32.714660", "score": "0.6832", "loss": "1.2185", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String= GLES20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 108, "n_pass": [186, 12, 11]}
{"time": "2021-02-13 14:37:34.048593", "score": "0.6471", "loss": "1.4311", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES compiled = new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 105, "n_pass": [187, 13, 12]}
{"time": "2021-02-13 14:37:39.908357", "score": "0.7263", "loss": "0.9325", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES= new0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 102, "n_pass": [211, 17, 13]}
{"time": "2021-02-13 14:37:41.243101", "score": "0.7883", "loss": "0.6722", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES0.glGetShaderiv(shader,0); if (compiled[0] == 0) { String20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 99, "n_pass": [212, 18, 14]}
{"time": "2021-02-13 14:37:42.577141", "score": "0.7014", "loss": "1.0315", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { String20.GLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 96, "n_pass": [213, 19, 15]}
{"time": "2021-02-13 14:37:43.924188", "score": "0.7023", "loss": "1.0268", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could not compile shader \" ); } } return shader; }", "n_tokens": 93, "n_pass": [222, 20, 16]}
{"time": "2021-02-13 14:37:45.255790", "score": "0.7262", "loss": "0.938", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could  shader \" ); } } return shader; }", "n_tokens": 90, "n_pass": [225, 21, 17]}
{"time": "2021-02-13 14:37:46.591521", "score": "0.7252", "loss": "0.964", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } return shader; }", "n_tokens": 87, "n_pass": [226, 22, 18]}
{"time": "2021-02-13 14:37:51.301779", "score": "0.7221", "loss": "0.9983", "code": "static int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 85, "n_pass": [316, 23, 19]}
{"time": "2021-02-13 14:37:53.977657", "score": "0.7221", "loss": "0.9983", "code": " int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 84, "n_pass": [319, 25, 20]}
{"time": "2021-02-13 14:37:55.322565", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType, String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 83, "n_pass": [320, 26, 21]}
{"time": "2021-02-13 14:37:57.387859", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType,String source) { GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 82, "n_pass": [329, 27, 22]}
{"time": "2021-02-13 14:37:58.740995", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType,String source){ GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 81, "n_pass": [334, 28, 23]}
{"time": "2021-02-13 14:38:00.082882", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType,String source){GLES20.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 80, "n_pass": [336, 29, 24]}
{"time": "2021-02-13 14:38:01.423594", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType,String source){GLES0.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 79, "n_pass": [338, 30, 25]}
{"time": "2021-02-13 14:38:02.750991", "score": "0.7221", "loss": "0.9983", "code": "int loadShader(int shaderType,String source){GLES.glCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 78, "n_pass": [339, 31, 26]}
{"time": "2021-02-13 14:38:04.072657", "score": "0.8199", "loss": "0.8345", "code": "int loadShader(int shaderType,String source){GLESglCreateShader(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 77, "n_pass": [340, 32, 27]}
{"time": "2021-02-13 14:38:05.371081", "score": "0.8936", "loss": "0.6448", "code": "int loadShader(int shaderType,String source){GLES(shaderType); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 76, "n_pass": [341, 33, 28]}
{"time": "2021-02-13 14:38:06.695103", "score": "0.8768", "loss": "0.7326", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(shader,0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 75, "n_pass": [343, 34, 29]}
{"time": "2021-02-13 14:38:08.032383", "score": "0.8284", "loss": "1.0677", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(0); if (compiled[0] == 0) { StringGLESRuntimeException(\"Could \" ); } } shader; }", "n_tokens": 73, "n_pass": [353, 35, 30]}
{"time": "2021-02-13 14:38:09.378429", "score": "0.8144", "loss": "1.1703", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } shader; }", "n_tokens": 71, "n_pass": [364, 36, 31]}
{"time": "2021-02-13 14:38:10.714156", "score": "0.753", "loss": "1.8517", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } }  }", "n_tokens": 69, "n_pass": [372, 37, 32]}
{"time": "2021-02-13 14:38:19.788140", "score": "0.753", "loss": "1.8517", "code": "int loadShader(int shaderType,String source){GLES(); if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 68, "n_pass": [469, 38, 33]}
{"time": "2021-02-13 14:38:21.844965", "score": "0.753", "loss": "1.8517", "code": "int loadShader(int shaderType,String source){GLES();if (shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 67, "n_pass": [487, 39, 34]}
{"time": "2021-02-13 14:38:23.175303", "score": "0.753", "loss": "1.8517", "code": "int loadShader(int shaderType,String source){GLES();if(shader != 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 66, "n_pass": [489, 40, 35]}
{"time": "2021-02-13 14:38:24.484017", "score": "0.753", "loss": "1.8517", "code": "int loadShader(int shaderType,String source){GLES();if(shader!= 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 65, "n_pass": [492, 41, 36]}
{"time": "2021-02-13 14:38:25.806075", "score": "0.7854", "loss": "1.7189", "code": "int loadShader(int shaderType,String source){GLES();if(shader= 0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 64, "n_pass": [493, 42, 37]}
{"time": "2021-02-13 14:38:27.128555", "score": "0.7854", "loss": "1.7189", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0) { GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 63, "n_pass": [495, 43, 38]}
{"time": "2021-02-13 14:38:28.452065", "score": "0.7854", "loss": "1.7189", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){ GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 62, "n_pass": [498, 44, 39]}
{"time": "2021-02-13 14:38:29.778765", "score": "0.7854", "loss": "1.7189", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES(0); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 61, "n_pass": [500, 45, 40]}
{"time": "2021-02-13 14:38:32.425366", "score": "0.7434", "loss": "1.6318", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES(); if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 60, "n_pass": [503, 47, 41]}
{"time": "2021-02-13 14:38:33.736045", "score": "0.7434", "loss": "1.6318", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if (compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 59, "n_pass": [506, 48, 42]}
{"time": "2021-02-13 14:38:35.053111", "score": "0.7434", "loss": "1.6318", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0] == 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 58, "n_pass": [508, 49, 43]}
{"time": "2021-02-13 14:38:36.395271", "score": "0.7434", "loss": "1.6318", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]== 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 57, "n_pass": [514, 50, 44]}
{"time": "2021-02-13 14:38:37.729594", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]= 0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 56, "n_pass": [515, 51, 45]}
{"time": "2021-02-13 14:38:39.035040", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0) { RuntimeException(\"Could \" ); } } }", "n_tokens": 55, "n_pass": [517, 52, 46]}
{"time": "2021-02-13 14:38:40.353227", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){ RuntimeException(\"Could \" ); } } }", "n_tokens": 54, "n_pass": [520, 53, 47]}
{"time": "2021-02-13 14:38:41.675180", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could \" ); } } }", "n_tokens": 53, "n_pass": [522, 54, 48]}
{"time": "2021-02-13 14:38:45.631453", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could\" ); } } }", "n_tokens": 52, "n_pass": [527, 57, 49]}
{"time": "2021-02-13 14:38:46.942553", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could\"); } } }", "n_tokens": 51, "n_pass": [529, 58, 50]}
{"time": "2021-02-13 14:38:48.249756", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could\");} } }", "n_tokens": 50, "n_pass": [532, 59, 51]}
{"time": "2021-02-13 14:38:49.578648", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could\");}} }", "n_tokens": 49, "n_pass": [534, 60, 52]}
{"time": "2021-02-13 14:38:50.912676", "score": "0.6807", "loss": "1.821", "code": "int loadShader(int shaderType,String source){GLES();if(shader=0){GLES();if(compiled[0]=0){RuntimeException(\"Could\");}}}", "n_tokens": 48, "n_pass": [536, 61, 53]}
{"time": "2021-02-13 14:38:52.961336", "score": "0.6875", "loss": "2.0155", "code": "int loadShader(int shaderType,String source){GLES();if(shader0){GLES();if(compiled[0]=0){RuntimeException(\"Could\");}}}", "n_tokens": 47, "n_pass": [558, 62, 54]}
{"time": "2021-02-13 14:38:54.299214", "score": "0.6875", "loss": "2.0155", "code": "int loadShader(int shaderType,String source){GLES();if(shader){GLES();if(compiled[0]=0){RuntimeException(\"Could\");}}}", "n_tokens": 46, "n_pass": [559, 63, 55]}
{"time": "2021-02-13 14:38:56.948347", "score": "0.6495", "loss": "2.0205", "code": "int loadShader(int shaderType,String source){GLES();if(shader){GLES();if(compiled[0]=0){RuntimeException(\"\");}}}", "n_tokens": 45, "n_pass": [579, 65, 56]}

Minimal simplified code:
int loadShader(int shaderType,String source){GLES();if(shader){GLES();if(compiled[0]=0){RuntimeException("");}}}

