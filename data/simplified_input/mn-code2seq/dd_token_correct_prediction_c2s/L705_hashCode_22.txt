
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/asn1/DERExternal_hashCode.java
method_name = hashCode
method_body = public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); } if (indirectReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }
predict, score, loss = hashCode, 0.9979748129844666, 0.006959129590541124

Trace of simplified code(s):
{"time": "2021-02-13 20:34:54.248516", "score": "0.998", "loss": "0.007", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); } if (indirectReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }", "n_tokens": 117, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 20:34:55.597950", "score": "0.9966", "loss": "0.0124", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ^= externalContent.hashCode(); return ret; }", "n_tokens": 102, "n_pass": [23, 2, 2]}
{"time": "2021-02-13 20:34:56.950483", "score": "0.9987", "loss": "0.0049", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = directReference.hashCode(); ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 94, "n_pass": [51, 3, 3]}
{"time": "2021-02-13 20:34:58.640184", "score": "0.9965", "loss": "0.0112", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret = ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 87, "n_pass": [58, 4, 4]}
{"time": "2021-02-13 20:35:00.370008", "score": "0.998", "loss": "0.0078", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor != null) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 83, "n_pass": [95, 5, 5]}
{"time": "2021-02-13 20:35:02.064524", "score": "0.9975", "loss": "0.0093", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) { ret ^= dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 79, "n_pass": [101, 6, 6]}
{"time": "2021-02-13 20:35:03.394441", "score": "0.9962", "loss": "0.0138", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ; return ret; }", "n_tokens": 75, "n_pass": [103, 7, 7]}
{"time": "2021-02-13 20:35:04.741245", "score": "0.9934", "loss": "0.0289", "code": "public int hashCode() { int ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 71, "n_pass": [107, 8, 8]}
{"time": "2021-02-13 20:35:06.429915", "score": "0.9933", "loss": "0.0301", "code": "public int hashCode() {ret = 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 68, "n_pass": [112, 9, 9]}
{"time": "2021-02-13 20:35:07.764011", "score": "0.9931", "loss": "0.0308", "code": "public int hashCode() { 0; if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 65, "n_pass": [113, 10, 10]}
{"time": "2021-02-13 20:35:09.080314", "score": "0.9931", "loss": "0.0273", "code": "public int hashCode() { if (directReference != null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 62, "n_pass": [114, 11, 11]}
{"time": "2021-02-13 20:35:12.132202", "score": "0.9946", "loss": "0.0206", "code": "public int hashCode() { if (directReference= null) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 60, "n_pass": [170, 12, 12]}
{"time": "2021-02-13 20:35:13.454869", "score": "0.9797", "loss": "0.0926", "code": "public int hashCode() { if (directReferencenull) { ret ^= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 58, "n_pass": [171, 13, 13]}
{"time": "2021-02-13 20:35:14.771601", "score": "0.9884", "loss": "0.0551", "code": "public int hashCode() { if (directReferencenull) { ret= indirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 56, "n_pass": [175, 14, 14]}
{"time": "2021-02-13 20:35:16.081526", "score": "0.9432", "loss": "0.3472", "code": "public int hashCode() { if (directReferencenull) { retindirectReference.hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 54, "n_pass": [176, 15, 15]}
{"time": "2021-02-13 20:35:17.393805", "score": "0.7478", "loss": "1.3921", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret ret; }", "n_tokens": 52, "n_pass": [177, 16, 16]}
{"time": "2021-02-13 20:35:21.337583", "score": "0.8344", "loss": "0.5765", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); } ret; }", "n_tokens": 50, "n_pass": [191, 19, 17]}
{"time": "2021-02-13 20:35:22.637428", "score": "0.9119", "loss": "0.4885", "code": "public int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); }  }", "n_tokens": 48, "n_pass": [192, 20, 18]}
{"time": "2021-02-13 20:35:23.932690", "score": "0.9119", "loss": "0.4885", "code": " int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); }  }", "n_tokens": 47, "n_pass": [194, 21, 19]}
{"time": "2021-02-13 20:35:25.236784", "score": "0.9119", "loss": "0.4885", "code": "int hashCode() { if (directReferencenull) { rethashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); }  }", "n_tokens": 46, "n_pass": [195, 22, 20]}
{"time": "2021-02-13 20:35:27.264322", "score": "0.9756", "loss": "0.1608", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode(); }  }", "n_tokens": 44, "n_pass": [206, 23, 21]}
{"time": "2021-02-13 20:35:29.844122", "score": "0.9221", "loss": "0.3215", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode; }  }", "n_tokens": 42, "n_pass": [217, 25, 22]}
{"time": "2021-02-13 20:35:38.496337", "score": "0.9221", "loss": "0.3215", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}  }", "n_tokens": 41, "n_pass": [280, 27, 23]}
{"time": "2021-02-13 20:35:39.823127", "score": "0.9221", "loss": "0.3215", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;} }", "n_tokens": 40, "n_pass": [282, 28, 24]}
{"time": "2021-02-13 20:35:41.174284", "score": "0.9221", "loss": "0.3215", "code": "int hashCode() { if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 39, "n_pass": [283, 29, 25]}
{"time": "2021-02-13 20:35:43.178147", "score": "0.9221", "loss": "0.3215", "code": "int hashCode(){ if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 38, "n_pass": [290, 30, 26]}
{"time": "2021-02-13 20:35:44.522969", "score": "0.9221", "loss": "0.3215", "code": "int hashCode(){if (directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 37, "n_pass": [292, 31, 27]}
{"time": "2021-02-13 20:35:45.821572", "score": "0.9221", "loss": "0.3215", "code": "int hashCode(){if(directReferencenull) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 36, "n_pass": [294, 32, 28]}
{"time": "2021-02-13 20:35:47.140215", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null) {hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 35, "n_pass": [296, 33, 29]}
{"time": "2021-02-13 20:35:48.436915", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode(); } if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 34, "n_pass": [299, 34, 30]}
{"time": "2021-02-13 20:35:49.773134", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();} if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 33, "n_pass": [305, 35, 31]}
{"time": "2021-02-13 20:35:51.096175", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if (dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 32, "n_pass": [307, 36, 32]}
{"time": "2021-02-13 20:35:52.400495", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor ) {  dataValueDescriptor.hashCode;}}", "n_tokens": 31, "n_pass": [309, 37, 33]}
{"time": "2021-02-13 20:35:53.709244", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor) {  dataValueDescriptor.hashCode;}}", "n_tokens": 30, "n_pass": [312, 38, 34]}
{"time": "2021-02-13 20:35:55.010517", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor){  dataValueDescriptor.hashCode;}}", "n_tokens": 29, "n_pass": [314, 39, 35]}
{"time": "2021-02-13 20:35:56.305479", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor){ dataValueDescriptor.hashCode;}}", "n_tokens": 28, "n_pass": [316, 40, 36]}
{"time": "2021-02-13 20:35:57.623730", "score": "0.9609", "loss": "0.1678", "code": "int hashCode(){if(null){hashCode();}if(dataValueDescriptor){dataValueDescriptor.hashCode;}}", "n_tokens": 27, "n_pass": [317, 41, 37]}

Minimal simplified code:
int hashCode(){if(null){hashCode();}if(dataValueDescriptor){dataValueDescriptor.hashCode;}}

