
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/vfs/src/main/java/droidefense/vfs/model/impl/VirtualFolder_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; VirtualNode that = (VirtualNode) o; if (parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }
predict, score, loss = equals, 0.9960551261901855, 0.004925023298710585

Trace of simplified code(s):
{"time": "2021-02-13 23:50:51.245026", "score": "0.9972", "loss": "0.0036", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; VirtualNode that = (VirtualNode) o; if (parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 161, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:50:52.617869", "score": "0.9959", "loss": "0.005", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == parentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 121, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 23:50:54.020364", "score": "0.9834", "loss": "0.0208", "code": "@Override public boolean equals(Object o) { if (thisparentNode != null ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 101, "n_pass": [23, 3, 3]}
{"time": "2021-02-13 23:50:55.464748", "score": "0.9758", "loss": "0.0309", "code": "@Override public boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return false; return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 96, "n_pass": [68, 4, 4]}
{"time": "2021-02-13 23:50:56.838503", "score": "0.9501", "loss": "0.0621", "code": "@Override public boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 91, "n_pass": [74, 5, 5]}
{"time": "2021-02-13 23:50:58.232455", "score": "0.9107", "loss": "0.135", "code": "boolean equals(Object o) { if (thisnull ? !parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 86, "n_pass": [83, 6, 6]}
{"time": "2021-02-13 23:50:59.991429", "score": "0.9189", "loss": "0.121", "code": "boolean equals(Object o) { if (thisnull ?parentNode.equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 84, "n_pass": [144, 7, 7]}
{"time": "2021-02-13 23:51:01.381302", "score": "0.9622", "loss": "0.0532", "code": "boolean equals(Object o) { if (thisnull ?equals(that.getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 82, "n_pass": [145, 8, 8]}
{"time": "2021-02-13 23:51:02.769010", "score": "0.9468", "loss": "0.0761", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) : that.getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 80, "n_pass": [147, 9, 9]}
{"time": "2021-02-13 23:51:04.128281", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode() != null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 77, "n_pass": [151, 10, 10]}
{"time": "2021-02-13 23:51:10.400830", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!= null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 76, "n_pass": [245, 11, 11]}
{"time": "2021-02-13 23:51:12.154363", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null) return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 75, "n_pass": [248, 12, 12]}
{"time": "2021-02-13 23:51:13.550363", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return (name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 74, "n_pass": [251, 13, 13]}
{"time": "2021-02-13 23:51:15.315106", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name != null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 73, "n_pass": [253, 14, 14]}
{"time": "2021-02-13 23:51:16.714958", "score": "0.9374", "loss": "0.089", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name!= null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 72, "n_pass": [256, 15, 15]}
{"time": "2021-02-13 23:51:18.105844", "score": "0.8893", "loss": "0.1686", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? name.equals(that.getName()) : (that.getName() == null); }", "n_tokens": 71, "n_pass": [257, 16, 16]}
{"time": "2021-02-13 23:51:19.486435", "score": "0.8627", "loss": "0.2016", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(that.getName()) : (that.getName() == null); }", "n_tokens": 69, "n_pass": [262, 17, 17]}
{"time": "2021-02-13 23:51:20.837421", "score": "0.7462", "loss": "0.3871", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (that.getName() == null); }", "n_tokens": 67, "n_pass": [264, 18, 18]}
{"time": "2021-02-13 23:51:22.216249", "score": "0.669", "loss": "0.5262", "code": "boolean equals(Object o) { if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 65, "n_pass": [269, 19, 19]}
{"time": "2021-02-13 23:51:24.338666", "score": "0.669", "loss": "0.5262", "code": "boolean equals(Object o){ if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 64, "n_pass": [284, 20, 20]}
{"time": "2021-02-13 23:51:25.737098", "score": "0.669", "loss": "0.5262", "code": "boolean equals(Object o){if (thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 63, "n_pass": [286, 21, 21]}
{"time": "2021-02-13 23:51:27.146309", "score": "0.669", "loss": "0.5262", "code": "boolean equals(Object o){if(thisnull ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 62, "n_pass": [288, 22, 22]}
{"time": "2021-02-13 23:51:28.538160", "score": "0.6546", "loss": "0.5462", "code": "boolean equals(Object o){if(null ?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 61, "n_pass": [290, 23, 23]}
{"time": "2021-02-13 23:51:29.928444", "score": "0.6546", "loss": "0.5462", "code": "boolean equals(Object o){if(null?equals(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 60, "n_pass": [292, 24, 24]}
{"time": "2021-02-13 23:51:31.307562", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()) :getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 59, "n_pass": [294, 25, 25]}
{"time": "2021-02-13 23:51:32.689286", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name= null) ? equals(getName()) : (getName() == null); }", "n_tokens": 58, "n_pass": [300, 26, 26]}
{"time": "2021-02-13 23:51:38.637878", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null) ? equals(getName()) : (getName() == null); }", "n_tokens": 57, "n_pass": [373, 27, 27]}
{"time": "2021-02-13 23:51:39.985612", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)? equals(getName()) : (getName() == null); }", "n_tokens": 56, "n_pass": [375, 28, 28]}
{"time": "2021-02-13 23:51:41.387173", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()) : (getName() == null); }", "n_tokens": 55, "n_pass": [377, 29, 29]}
{"time": "2021-02-13 23:51:44.149406", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()): (getName() == null); }", "n_tokens": 54, "n_pass": [384, 31, 30]}
{"time": "2021-02-13 23:51:45.525265", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()):(getName() == null); }", "n_tokens": 53, "n_pass": [386, 32, 31]}
{"time": "2021-02-13 23:51:46.913614", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()):(getName()== null); }", "n_tokens": 52, "n_pass": [391, 33, 32]}
{"time": "2021-02-13 23:51:49.013843", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()):(getName()==null); }", "n_tokens": 51, "n_pass": [394, 34, 33]}
{"time": "2021-02-13 23:51:50.396170", "score": "0.4498", "loss": "1.0082", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name=null)?equals(getName()):(getName()==null);}", "n_tokens": 50, "n_pass": [398, 35, 34]}
{"time": "2021-02-13 23:51:53.248623", "score": "0.433", "loss": "1.1396", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(namenull)?equals(getName()):(getName()==null);}", "n_tokens": 49, "n_pass": [429, 36, 35]}
{"time": "2021-02-13 23:51:54.640054", "score": "0.4089", "loss": "1.1541", "code": "boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name)?equals(getName()):(getName()==null);}", "n_tokens": 48, "n_pass": [430, 37, 36]}

Minimal simplified code:
boolean equals(Object o){if(null?(getParentNode()):getParentNode()!=null)return(name)?equals(getName()):(getName()==null);}

