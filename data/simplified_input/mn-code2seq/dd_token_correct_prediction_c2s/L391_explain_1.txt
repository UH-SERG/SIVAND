
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/XiaoMi__linden/linden-core/src/main/java/com/xiaomi/linden/lucene/query/flexiblequery/FlexibleWeight_explain.java
method_name = explain
method_body = @Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, "no matching term"); }
predict, score, loss = explain, 0.9923437237739563, 0.03836287185549736

Trace of simplified code(s):
{"time": "2021-02-13 15:09:39.414074", "score": "0.9796", "loss": "0.0662", "code": "@Override public Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 165, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 15:09:40.823216", "score": "0.9856", "loss": "0.0709", "code": "Explanation explain(AtomicReaderContext context, int doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 160, "n_pass": [92, 2, 2]}
{"time": "2021-02-13 15:09:42.175904", "score": "0.9655", "loss": "0.1576", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer = (FlexibleScorer) scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 155, "n_pass": [93, 3, 3]}
{"time": "2021-02-13 15:09:43.903872", "score": "0.9743", "loss": "0.1371", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (scorer != null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 150, "n_pass": [97, 4, 4]}
{"time": "2021-02-13 15:09:45.255993", "score": "0.971", "loss": "0.127", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) { int newDoc = scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 145, "n_pass": [102, 5, 5]}
{"time": "2021-02-13 15:09:46.636209", "score": "0.978", "loss": "0.1168", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.getStrategy(); strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 140, "n_pass": [104, 6, 6]}
{"time": "2021-02-13 15:09:47.978124", "score": "0.9736", "loss": "0.1306", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain(similarity, query, doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 135, "n_pass": [111, 7, 7]}
{"time": "2021-02-13 15:09:49.337145", "score": "0.975", "loss": "0.2308", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, 0.0f, \"no matching term\"); }", "n_tokens": 130, "n_pass": [116, 8, 8]}
{"time": "2021-02-13 15:09:50.707971", "score": "0.9824", "loss": "0.1827", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { FlexibleScorer scorer =scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 124, "n_pass": [120, 9, 9]}
{"time": "2021-02-13 15:09:52.052938", "score": "0.9838", "loss": "0.1982", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(context, context.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 119, "n_pass": [126, 10, 10]}
{"time": "2021-02-13 15:09:53.762994", "score": "0.983", "loss": "0.206", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextcontext.reader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 117, "n_pass": [199, 11, 11]}
{"time": "2021-02-13 15:09:55.108811", "score": "0.9849", "loss": "0.1942", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  scorer.advance(doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 115, "n_pass": [200, 12, 12]}
{"time": "2021-02-13 15:09:56.454148", "score": "0.9856", "loss": "0.2247", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  (doc); if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 112, "n_pass": [210, 13, 13]}
{"time": "2021-02-13 15:09:57.808850", "score": "0.9857", "loss": "0.243", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, 0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 109, "n_pass": [211, 14, 14]}
{"time": "2021-02-13 15:09:59.152244", "score": "0.9827", "loss": "0.273", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(0, true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 106, "n_pass": [221, 15, 15]}
{"time": "2021-02-13 15:10:00.485246", "score": "0.9815", "loss": "0.2869", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true); return strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 103, "n_pass": [222, 16, 16]}
{"time": "2021-02-13 15:10:01.851035", "score": "0.9616", "loss": "0.4355", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);strategy.explain( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 100, "n_pass": [224, 17, 17]}
{"time": "2021-02-13 15:10:03.213644", "score": "0.5081", "loss": "1.8702", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } } return new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 97, "n_pass": [225, 18, 18]}
{"time": "2021-02-13 15:10:04.555054", "score": "0.5246", "loss": "1.9485", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"no matching term\"); }", "n_tokens": 94, "n_pass": [229, 19, 19]}
{"time": "2021-02-13 15:10:05.890750", "score": "0.48", "loss": "1.8925", "code": "Explanation explain(AtomicReaderContext doc) throws IOException { scorer(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 91, "n_pass": [233, 20, 20]}
{"time": "2021-02-13 15:10:07.594151", "score": "0.3108", "loss": "2.8192", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(contextreader().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 89, "n_pass": [243, 21, 21]}
{"time": "2021-02-13 15:10:16.998057", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs()); if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 88, "n_pass": [351, 23, 22]}
{"time": "2021-02-13 15:10:18.331245", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if (null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 87, "n_pass": [359, 24, 23]}
{"time": "2021-02-13 15:10:19.660573", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null) {  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 86, "n_pass": [361, 25, 24]}
{"time": "2021-02-13 15:10:20.999239", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){  ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 85, "n_pass": [365, 26, 25]}
{"time": "2021-02-13 15:10:22.336703", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){ ; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 84, "n_pass": [367, 27, 26]}
{"time": "2021-02-13 15:10:23.664103", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){; if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 83, "n_pass": [368, 28, 27]}
{"time": "2021-02-13 15:10:24.992286", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){ if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 82, "n_pass": [369, 29, 28]}
{"time": "2021-02-13 15:10:26.320872", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if (newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 81, "n_pass": [370, 30, 29]}
{"time": "2021-02-13 15:10:27.650538", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc == doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 80, "n_pass": [372, 31, 30]}
{"time": "2021-02-13 15:10:28.997402", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc== doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 79, "n_pass": [375, 32, 31]}
{"time": "2021-02-13 15:10:33.040390", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc==doc) { FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 78, "n_pass": [378, 35, 32]}
{"time": "2021-02-13 15:10:34.372207", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc==doc){ FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 77, "n_pass": [381, 36, 33]}
{"time": "2021-02-13 15:10:35.700792", "score": "0.3378", "loss": "2.6969", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc==doc){FlexibleScoreModelStrategy strategy = scorer.strategy.prepare(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 76, "n_pass": [383, 37, 34]}
{"time": "2021-02-13 15:10:41.027766", "score": "0.383", "loss": "2.4847", "code": "Explanation explain(AtomicReaderContext doc) throws IOException {(context().getLiveDocs());if(null){if(newDoc==doc){FlexibleScoreModelStrategy strategy = scorer.strategy(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 74, "n_pass": [389, 41, 35]}
{"time": "2021-02-13 15:10:43.509691", "score": "0.383", "loss": "2.4847", "code": "Explanation explain(AtomicReaderContext doc)throws IOException {(context().getLiveDocs());if(null){if(newDoc==doc){FlexibleScoreModelStrategy strategy = scorer.strategy(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 73, "n_pass": [412, 42, 36]}
{"time": "2021-02-13 15:10:44.867655", "score": "0.383", "loss": "2.4847", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc==doc){FlexibleScoreModelStrategy strategy = scorer.strategy(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 72, "n_pass": [416, 43, 37]}
{"time": "2021-02-13 15:10:51.540275", "score": "0.4445", "loss": "2.1395", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc==doc){FlexibleScoreModelStrategy strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 70, "n_pass": [445, 48, 38]}
{"time": "2021-02-13 15:10:53.998061", "score": "0.3271", "loss": "2.5217", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc=doc){FlexibleScoreModelStrategy strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 69, "n_pass": [490, 49, 39]}
{"time": "2021-02-13 15:10:55.323179", "score": "0.3629", "loss": "2.0473", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDocdoc){FlexibleScoreModelStrategy strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 68, "n_pass": [491, 50, 40]}
{"time": "2021-02-13 15:10:56.653456", "score": "0.4338", "loss": "1.8803", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy strategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 67, "n_pass": [492, 51, 41]}
{"time": "2021-02-13 15:10:59.329452", "score": "0.3152", "loss": "2.1677", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy = scorer(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 65, "n_pass": [496, 53, 42]}
{"time": "2021-02-13 15:11:00.646265", "score": "0.267", "loss": "2.8622", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc); } }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 63, "n_pass": [498, 54, 43]}
{"time": "2021-02-13 15:11:07.734201", "score": "0.267", "loss": "2.8622", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);} }new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 62, "n_pass": [577, 56, 44]}
{"time": "2021-02-13 15:11:09.102612", "score": "0.267", "loss": "2.8622", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}new ComplexExplanation(false, \"noterm\"); }", "n_tokens": 61, "n_pass": [579, 57, 45]}
{"time": "2021-02-13 15:11:10.428083", "score": "0.6243", "loss": "2.1647", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}} ComplexExplanation(false, \"noterm\"); }", "n_tokens": 60, "n_pass": [581, 58, 46]}
{"time": "2021-02-13 15:11:11.765841", "score": "0.6243", "loss": "2.1647", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}ComplexExplanation(false, \"noterm\"); }", "n_tokens": 59, "n_pass": [582, 59, 47]}
{"time": "2021-02-13 15:11:13.085714", "score": "0.6243", "loss": "2.1647", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}ComplexExplanation(false,\"noterm\"); }", "n_tokens": 58, "n_pass": [587, 60, 48]}
{"time": "2021-02-13 15:11:14.393503", "score": "0.7089", "loss": "2.134", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}ComplexExplanation(false,\"term\"); }", "n_tokens": 57, "n_pass": [589, 61, 49]}
{"time": "2021-02-13 15:11:15.700237", "score": "0.7031", "loss": "1.9916", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}ComplexExplanation(false,\"\"); }", "n_tokens": 56, "n_pass": [590, 62, 50]}
{"time": "2021-02-13 15:11:17.010298", "score": "0.7031", "loss": "1.9916", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy =(true);( doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 55, "n_pass": [594, 63, 51]}
{"time": "2021-02-13 15:11:19.424343", "score": "0.7031", "loss": "1.9916", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy=(true);( doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 54, "n_pass": [629, 64, 52]}
{"time": "2021-02-13 15:11:20.740008", "score": "0.6823", "loss": "1.7619", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy(true);( doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 53, "n_pass": [630, 65, 53]}
{"time": "2021-02-13 15:11:22.056653", "score": "0.7408", "loss": "1.4958", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy();( doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 52, "n_pass": [632, 66, 54]}
{"time": "2021-02-13 15:11:23.372873", "score": "0.7408", "loss": "1.4958", "code": "Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy();(doc);}}ComplexExplanation(false,\"\");}", "n_tokens": 51, "n_pass": [636, 67, 55]}

Minimal simplified code:
Explanation explain(AtomicReaderContext doc)throws IOException{(context().getLiveDocs());if(null){if(newDoc){FlexibleScoreModelStrategy();(doc);}}ComplexExplanation(false,"");}

