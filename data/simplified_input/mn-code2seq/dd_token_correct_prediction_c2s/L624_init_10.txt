
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/j2me/org/bouncycastle/crypto/encodings/PKCS1Encoding_init.java
method_name = init
method_body = public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this.forPrivateKey = kParam.isPrivate(); this.forEncryption = forEncryption; this.blockBuffer = new byte[engine.getOutputBlockSize()]; if (pLen > 0 && fallback == null && random == null) { throw new IllegalArgumentException("encoder requires random"); } }
predict, score, loss = init, 0.9213390946388245, 0.14363260567188263

Trace of simplified code(s):
{"time": "2021-02-13 19:10:45.522349", "score": "0.9138", "loss": "0.1726", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this.forPrivateKey = kParam.isPrivate(); this.forEncryption = forEncryption; this.blockBuffer = new byte[engine.getOutputBlockSize()]; if (pLen > 0 && fallback == null && random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 230, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:10:47.703741", "score": "0.8207", "loss": "0.4623", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this.forPrivateKey = kParam.isPrivate(); this.forEncryption[engine.getOutputBlockSize()]; if (pLen > 0 && fallback == null && random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 215, "n_pass": [55, 2, 2]}
{"time": "2021-02-13 19:10:49.072170", "score": "0.7872", "loss": "0.6469", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this.forPrivateKey = kParam.isPrivate(); this.forEncryption[engine.getOutputBlockSize()]; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 200, "n_pass": [57, 3, 3]}
{"time": "2021-02-13 19:10:50.832099", "score": "0.8304", "loss": "0.3851", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this[engine.getOutputBlockSize()]; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 185, "n_pass": [70, 4, 4]}
{"time": "2021-02-13 19:10:52.605350", "score": "0.8921", "loss": "0.2248", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.random = rParam.getRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 178, "n_pass": [110, 5, 5]}
{"time": "2021-02-13 19:10:53.974292", "score": "0.8409", "loss": "0.3198", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; thisgetRandom(); kParam = (AsymmetricKeyParameter) rParam.getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 171, "n_pass": [123, 6, 6]}
{"time": "2021-02-13 19:10:55.739792", "score": "0.8661", "loss": "0.2955", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; thisgetRandom(); kParam .getParameters(); } else { kParam = (AsymmetricKeyParameter) param; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 164, "n_pass": [125, 7, 7]}
{"time": "2021-02-13 19:10:57.102784", "score": "0.8466", "loss": "0.3537", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; thisgetRandom(); kParam .getParameters(); } else { kParam ; if (!kParam.isPrivate() && forEncryption) { this.random = new SecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 157, "n_pass": [128, 8, 8]}
{"time": "2021-02-13 19:10:58.464395", "score": "0.8356", "loss": "0.4347", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; thisgetRandom(); kParam .getParameters(); } else { kParam ; if (!kParam.isPrivate() && forEncryption) { thisSecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 150, "n_pass": [132, 9, 9]}
{"time": "2021-02-13 19:10:59.842097", "score": "0.8318", "loss": "0.4207", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) param; this.getParameters(); } else { kParam ; if (!kParam.isPrivate() && forEncryption) { thisSecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 143, "n_pass": [148, 10, 10]}
{"time": "2021-02-13 19:11:01.246594", "score": "0.808", "loss": "0.5517", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() && forEncryption) { thisSecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 140, "n_pass": [210, 11, 11]}
{"time": "2021-02-13 19:11:02.634970", "score": "0.7959", "loss": "0.5642", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { thisSecureRandom(); } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 136, "n_pass": [218, 12, 12]}
{"time": "2021-02-13 19:11:03.994986", "score": "0.8248", "loss": "0.5223", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param); this; if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 132, "n_pass": [220, 13, 13]}
{"time": "2021-02-13 19:11:05.350416", "score": "0.6579", "loss": "1.1809", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLen > random == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 128, "n_pass": [225, 14, 14]}
{"time": "2021-02-13 19:11:06.713100", "score": "0.7391", "loss": "0.932", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLen == null) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 124, "n_pass": [227, 15, 15]}
{"time": "2021-02-13 19:11:08.061706", "score": "0.7142", "loss": "1.0834", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { throw new IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 120, "n_pass": [228, 16, 16]}
{"time": "2021-02-13 19:11:09.407056", "score": "0.5928", "loss": "1.6811", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"encoder requires random\"); } }", "n_tokens": 116, "n_pass": [230, 17, 17]}
{"time": "2021-02-13 19:11:10.749711", "score": "0.5936", "loss": "1.4341", "code": "public void init(boolean forEncryption, CipherParameters param) { AsymmetricKeyParameter kParam; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 112, "n_pass": [232, 18, 18]}
{"time": "2021-02-13 19:11:12.467028", "score": "0.6918", "loss": "0.9725", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (param instanceof ParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 109, "n_pass": [241, 19, 19]}
{"time": "2021-02-13 19:11:13.837539", "score": "0.6201", "loss": "1.1469", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom rParam = (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 106, "n_pass": [244, 20, 20]}
{"time": "2021-02-13 19:11:15.185372", "score": "0.6789", "loss": "0.9381", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom) this.getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 103, "n_pass": [247, 21, 21]}
{"time": "2021-02-13 19:11:20.307128", "score": "0.6601", "loss": "1.0667", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters(); } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 101, "n_pass": [339, 22, 22]}
{"time": "2021-02-13 19:11:21.653977", "score": "0.6383", "loss": "1.1321", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } else { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 99, "n_pass": [341, 23, 23]}
{"time": "2021-02-13 19:11:22.997142", "score": "0.7886", "loss": "0.7457", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { kParam ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 97, "n_pass": [344, 24, 24]}
{"time": "2021-02-13 19:11:24.336517", "score": "0.809", "loss": "0.6622", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { ; if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 95, "n_pass": [346, 25, 25]}
{"time": "2021-02-13 19:11:25.703672", "score": "0.809", "loss": "0.6622", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!kParam.isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 93, "n_pass": [347, 26, 26]}
{"time": "2021-02-13 19:11:27.050437", "score": "0.7893", "loss": "0.6485", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { ; } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 91, "n_pass": [350, 27, 27]}
{"time": "2021-02-13 19:11:28.393470", "score": "0.7893", "loss": "0.6485", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } engine.init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 89, "n_pass": [355, 28, 28]}
{"time": "2021-02-13 19:11:29.737827", "score": "0.802", "loss": "0.6249", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init(forEncryption, param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 87, "n_pass": [358, 29, 29]}
{"time": "2021-02-13 19:11:31.124367", "score": "0.7681", "loss": "0.7372", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init( param);if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 85, "n_pass": [360, 30, 30]}
{"time": "2021-02-13 19:11:32.450176", "score": "0.6737", "loss": "1.0706", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) { IllegalArgumentException(\"random\"); } }", "n_tokens": 83, "n_pass": [361, 31, 31]}
{"time": "2021-02-13 19:11:33.878635", "score": "0.6992", "loss": "1.0921", "code": "public void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 81, "n_pass": [367, 32, 32]}
{"time": "2021-02-13 19:11:35.192922", "score": "0.6992", "loss": "1.0921", "code": " void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 80, "n_pass": [373, 33, 33]}
{"time": "2021-02-13 19:11:36.535696", "score": "0.6992", "loss": "1.0921", "code": "void init(boolean forEncryption, CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 79, "n_pass": [374, 34, 34]}
{"time": "2021-02-13 19:11:38.589296", "score": "0.6992", "loss": "1.0921", "code": "void init(boolean forEncryption,CipherParameters param) { ; if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 78, "n_pass": [383, 35, 35]}
{"time": "2021-02-13 19:11:39.928077", "score": "0.6992", "loss": "1.0921", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) { ParametersWithRandom= (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 76, "n_pass": [388, 36, 36]}
{"time": "2021-02-13 19:11:41.249276", "score": "0.6808", "loss": "1.0808", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom).getParameters; } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 74, "n_pass": [394, 37, 37]}
{"time": "2021-02-13 19:11:42.569944", "score": "0.729", "loss": "1.0426", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } { if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 72, "n_pass": [397, 38, 38]}
{"time": "2021-02-13 19:11:51.974741", "score": "0.729", "loss": "1.0426", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if (!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 71, "n_pass": [501, 39, 39]}
{"time": "2021-02-13 19:11:53.309277", "score": "0.729", "loss": "1.0426", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(!isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 70, "n_pass": [503, 40, 40]}
{"time": "2021-02-13 19:11:54.637565", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate() ) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 69, "n_pass": [505, 41, 41]}
{"time": "2021-02-13 19:11:55.960295", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()) { } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 68, "n_pass": [509, 42, 42]}
{"time": "2021-02-13 19:11:57.272306", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){ } } init();if (pLennull) {(\"random\"); } }", "n_tokens": 67, "n_pass": [511, 43, 43]}
{"time": "2021-02-13 19:11:58.593470", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){} } init();if (pLennull) {(\"random\"); } }", "n_tokens": 66, "n_pass": [513, 44, 44]}
{"time": "2021-02-13 19:11:59.956830", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}} init();if (pLennull) {(\"random\"); } }", "n_tokens": 65, "n_pass": [515, 45, 45]}
{"time": "2021-02-13 19:12:01.276659", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if (pLennull) {(\"random\"); } }", "n_tokens": 64, "n_pass": [517, 46, 46]}
{"time": "2021-02-13 19:12:02.598432", "score": "0.7623", "loss": "0.9449", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(pLennull) {(\"random\"); } }", "n_tokens": 63, "n_pass": [523, 47, 47]}
{"time": "2021-02-13 19:12:03.917255", "score": "0.6509", "loss": "1.0564", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null) {(\"random\"); } }", "n_tokens": 62, "n_pass": [525, 48, 48]}
{"time": "2021-02-13 19:12:05.226600", "score": "0.6509", "loss": "1.0564", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"random\"); } }", "n_tokens": 61, "n_pass": [528, 49, 49]}
{"time": "2021-02-13 19:12:06.554273", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\"); } }", "n_tokens": 60, "n_pass": [532, 50, 50]}
{"time": "2021-02-13 19:12:07.890355", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");} }", "n_tokens": 59, "n_pass": [536, 51, 51]}
{"time": "2021-02-13 19:12:09.237503", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param) { if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 58, "n_pass": [538, 52, 52]}
{"time": "2021-02-13 19:12:11.294234", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param){ if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 57, "n_pass": [552, 53, 53]}
{"time": "2021-02-13 19:12:12.615641", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param){if (paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 56, "n_pass": [554, 54, 54]}
{"time": "2021-02-13 19:12:13.934084", "score": "0.7127", "loss": "0.9938", "code": "void init(boolean forEncryption,CipherParameters param){if(paramParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 55, "n_pass": [556, 55, 55]}
{"time": "2021-02-13 19:12:15.282585", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom) {  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 54, "n_pass": [558, 56, 56]}
{"time": "2021-02-13 19:12:16.603170", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){  (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 53, "n_pass": [561, 57, 57]}
{"time": "2021-02-13 19:12:17.942205", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){ (ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 52, "n_pass": [563, 58, 58]}
{"time": "2021-02-13 19:12:19.256288", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){(ParametersWithRandom); } {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 51, "n_pass": [564, 59, 59]}
{"time": "2021-02-13 19:12:20.576046", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){(ParametersWithRandom);} {if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 50, "n_pass": [569, 60, 60]}
{"time": "2021-02-13 19:12:21.922163", "score": "0.7504", "loss": "0.841", "code": "void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){(ParametersWithRandom);}{if(isPrivate()){}}init();if(null){(\"\");}}", "n_tokens": 49, "n_pass": [571, 61, 61]}

Minimal simplified code:
void init(boolean forEncryption,CipherParameters param){if(ParametersWithRandom){(ParametersWithRandom);}{if(isPrivate()){}}init();if(null){("");}}

