
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_572_isSameTree.java
method_name = isSameTree
method_body = private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }
predict, score, loss = isSameTree, 0.8817868232727051, 0.5125696659088135

Trace of simplified code(s):
{"time": "2021-02-13 13:54:53.877969", "score": "0.8818", "loss": "0.5126", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 98, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 13:54:55.218441", "score": "0.8512", "loss": "0.6555", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { return p == q; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 86, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 13:54:56.591159", "score": "0.8933", "loss": "0.4632", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { returnq; } return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right); }", "n_tokens": 80, "n_pass": [44, 3, 3]}
{"time": "2021-02-13 13:54:57.931886", "score": "0.874", "loss": "0.6539", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (p =null) { returnq; } return p.val == q.val && isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 74, "n_pass": [49, 4, 4]}
{"time": "2021-02-13 13:54:59.645784", "score": "0.87", "loss": "0.7193", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == q.val && isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 71, "n_pass": [99, 5, 5]}
{"time": "2021-02-13 13:55:01.357305", "score": "0.9021", "loss": "0.5322", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == q&& isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 68, "n_pass": [107, 6, 6]}
{"time": "2021-02-13 13:55:02.684154", "score": "0.8592", "loss": "0.7115", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val == qisSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 65, "n_pass": [108, 7, 7]}
{"time": "2021-02-13 13:55:04.792766", "score": "0.819", "loss": "1.0537", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } return p.val =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 62, "n_pass": [129, 8, 8]}
{"time": "2021-02-13 13:55:06.486818", "score": "0.8244", "loss": "1.1142", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; } returnval =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 59, "n_pass": [148, 9, 9]}
{"time": "2021-02-13 13:55:10.569496", "score": "0.8239", "loss": "1.1074", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft) && isSameTree(p.right, q.right); }", "n_tokens": 57, "n_pass": [208, 10, 10]}
{"time": "2021-02-13 13:55:12.246825", "score": "0.8882", "loss": "0.6852", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree(p.right, q.right); }", "n_tokens": 55, "n_pass": [213, 11, 11]}
{"time": "2021-02-13 13:55:13.570412", "score": "0.8826", "loss": "0.7236", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree(right, q.right); }", "n_tokens": 53, "n_pass": [216, 12, 12]}
{"time": "2021-02-13 13:55:14.882425", "score": "0.8235", "loss": "1.209", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q.right); }", "n_tokens": 51, "n_pass": [217, 13, 13]}
{"time": "2021-02-13 13:55:16.215697", "score": "0.8168", "loss": "1.1945", "code": "private boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 49, "n_pass": [219, 14, 14]}
{"time": "2021-02-13 13:55:17.529312", "score": "0.8168", "loss": "1.1945", "code": " boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 48, "n_pass": [222, 15, 15]}
{"time": "2021-02-13 13:55:18.864303", "score": "0.8168", "loss": "1.1945", "code": "boolean isSameTree(TreeNode p, TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 47, "n_pass": [223, 16, 16]}
{"time": "2021-02-13 13:55:20.884320", "score": "0.8168", "loss": "1.1945", "code": "boolean isSameTree(TreeNode p,TreeNode q) { if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 46, "n_pass": [232, 17, 17]}
{"time": "2021-02-13 13:55:22.211608", "score": "0.8168", "loss": "1.1945", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { returnq; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 45, "n_pass": [237, 18, 18]}
{"time": "2021-02-13 13:55:23.516708", "score": "0.8361", "loss": "1.0249", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) {q; }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 43, "n_pass": [243, 19, 19]}
{"time": "2021-02-13 13:55:24.839891", "score": "0.823", "loss": "1.0581", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree( q); }", "n_tokens": 41, "n_pass": [244, 20, 20]}
{"time": "2021-02-13 13:55:26.513803", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree(); }", "n_tokens": 39, "n_pass": [252, 21, 21]}
{"time": "2021-02-13 13:55:31.562377", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){ if (null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 38, "n_pass": [306, 22, 22]}
{"time": "2021-02-13 13:55:33.576157", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){if (null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 37, "n_pass": [320, 23, 23]}
{"time": "2021-02-13 13:55:34.914125", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null) { }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 36, "n_pass": [322, 24, 24]}
{"time": "2021-02-13 13:55:36.256037", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){ }val =isSameTree(pleft)& isSameTree();}", "n_tokens": 35, "n_pass": [326, 25, 25]}
{"time": "2021-02-13 13:55:37.567962", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val =isSameTree(pleft)& isSameTree();}", "n_tokens": 34, "n_pass": [328, 26, 26]}
{"time": "2021-02-13 13:55:38.878127", "score": "0.8036", "loss": "1.1678", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=isSameTree(pleft)& isSameTree();}", "n_tokens": 33, "n_pass": [331, 27, 27]}
{"time": "2021-02-13 13:55:40.535579", "score": "0.7074", "loss": "1.7474", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(pleft)& isSameTree();}", "n_tokens": 32, "n_pass": [333, 28, 28]}
{"time": "2021-02-13 13:55:41.834212", "score": "0.7109", "loss": "1.8516", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)& isSameTree();}", "n_tokens": 31, "n_pass": [335, 29, 29]}
{"time": "2021-02-13 13:55:44.472839", "score": "0.7109", "loss": "1.8516", "code": "boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)&isSameTree();}", "n_tokens": 30, "n_pass": [339, 31, 30]}

Minimal simplified code:
boolean isSameTree(TreeNode p,TreeNode q){if(null){}val=(left)&isSameTree();}

