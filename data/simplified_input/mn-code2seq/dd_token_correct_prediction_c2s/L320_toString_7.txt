
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/RevokeNode_toString.java
method_name = toString
method_body = public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it = grantees.iterator(); it.hasNext(); ) { if (sb.length() > 0) sb.append(","); sb.append(it.next()); } return super.toString() + privileges.toString() + "TO: \n" + sb.toString() + "\n"; }
predict, score, loss = toString, 0.9988667964935303, 0.004444761201739311

Trace of simplified code(s):
{"time": "2021-02-13 13:52:29.740065", "score": "0.999", "loss": "0.0037", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it = grantees.iterator(); it.hasNext(); ) { if (sb.length() > 0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 134, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 13:52:31.469039", "score": "0.9991", "loss": "0.0036", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (sb.length() > 0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 126, "n_pass": [48, 2, 2]}
{"time": "2021-02-13 13:52:32.809056", "score": "0.9994", "loss": "0.0024", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + privileges.toString() + \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 118, "n_pass": [51, 3, 3]}
{"time": "2021-02-13 13:52:34.146781", "score": "0.9994", "loss": "0.0021", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString()+ \"TO: \\n\" + sb.toString() + \"\\n\"; }", "n_tokens": 109, "n_pass": [56, 4, 4]}
{"time": "2021-02-13 13:52:35.475886", "score": "0.9996", "loss": "0.0013", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString() + sb.toString() + \"\\n\"; }", "n_tokens": 100, "n_pass": [57, 5, 5]}
{"time": "2021-02-13 13:52:36.807007", "score": "0.9997", "loss": "0.0011", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\"); sb.append(it.next()); } return super.toString()+ \"\\n\"; }", "n_tokens": 91, "n_pass": [58, 6, 6]}
{"time": "2021-02-13 13:52:38.927715", "score": "0.9996", "loss": "0.0016", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it.next()); } return super.toString()+ \"\\n\"; }", "n_tokens": 87, "n_pass": [109, 7, 7]}
{"time": "2021-02-13 13:52:40.978773", "score": "0.9997", "loss": "0.0014", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it()); } return super.toString()+ \"\\n\"; }", "n_tokens": 85, "n_pass": [173, 8, 8]}
{"time": "2021-02-13 13:52:42.307052", "score": "0.9997", "loss": "0.0011", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString()+ \"\\n\"; }", "n_tokens": 83, "n_pass": [174, 9, 9]}
{"time": "2021-02-13 13:52:44.402747", "score": "0.9621", "loss": "0.0966", "code": "public String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 81, "n_pass": [180, 10, 10]}
{"time": "2021-02-13 13:52:45.735577", "score": "0.9621", "loss": "0.0966", "code": "String toString() { StringBuffer sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 79, "n_pass": [184, 11, 11]}
{"time": "2021-02-13 13:52:47.432601", "score": "0.9246", "loss": "0.1879", "code": "String toString() { sb = new StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 77, "n_pass": [189, 12, 12]}
{"time": "2021-02-13 13:52:48.776140", "score": "0.9689", "loss": "0.0782", "code": "String toString() { sb = StringBuffer(); for (Iterator<String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 75, "n_pass": [192, 13, 13]}
{"time": "2021-02-13 13:52:50.126501", "score": "0.9735", "loss": "0.07", "code": "String toString() { sb = StringBuffer(); for (String> it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 73, "n_pass": [197, 14, 14]}
{"time": "2021-02-13 13:52:51.434681", "score": "0.9731", "loss": "0.0702", "code": "String toString() { sb = StringBuffer(); for ( it; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 71, "n_pass": [198, 15, 15]}
{"time": "2021-02-13 13:52:52.762489", "score": "0.9422", "loss": "0.1535", "code": "String toString() { sb = StringBuffer(); for (; it.hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 69, "n_pass": [199, 16, 16]}
{"time": "2021-02-13 13:52:54.084809", "score": "0.9486", "loss": "0.1379", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0) sb.append(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 67, "n_pass": [201, 17, 17]}
{"time": "2021-02-13 13:52:55.399275", "score": "0.9256", "loss": "0.23", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0) sb(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 65, "n_pass": [210, 18, 18]}
{"time": "2021-02-13 13:52:57.478170", "score": "0.9265", "loss": "0.2068", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\",\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 63, "n_pass": [241, 19, 19]}
{"time": "2021-02-13 13:53:06.507628", "score": "0.9265", "loss": "0.2068", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it); } return super.toString+ \"\\n\"; }", "n_tokens": 62, "n_pass": [334, 20, 20]}
{"time": "2021-02-13 13:53:07.850391", "score": "0.9265", "loss": "0.2068", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);} return super.toString+ \"\\n\"; }", "n_tokens": 61, "n_pass": [341, 21, 21]}
{"time": "2021-02-13 13:53:09.166972", "score": "0.9265", "loss": "0.2068", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return super.toString+ \"\\n\"; }", "n_tokens": 60, "n_pass": [343, 22, 22]}
{"time": "2021-02-13 13:53:11.222722", "score": "0.863", "loss": "0.4587", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+ \"\\n\"; }", "n_tokens": 59, "n_pass": [347, 23, 23]}
{"time": "2021-02-13 13:53:12.536840", "score": "0.863", "loss": "0.4587", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\\n\"; }", "n_tokens": 58, "n_pass": [350, 24, 24]}
{"time": "2021-02-13 13:53:13.852023", "score": "0.863", "loss": "0.4587", "code": "String toString() { sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 56, "n_pass": [352, 25, 25]}
{"time": "2021-02-13 13:53:16.238018", "score": "0.863", "loss": "0.4587", "code": "String toString(){ sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 55, "n_pass": [360, 26, 26]}
{"time": "2021-02-13 13:53:17.553122", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb = StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 54, "n_pass": [362, 27, 27]}
{"time": "2021-02-13 13:53:18.866014", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb= StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 53, "n_pass": [364, 28, 28]}
{"time": "2021-02-13 13:53:20.185522", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer(); for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 52, "n_pass": [366, 29, 29]}
{"time": "2021-02-13 13:53:21.501672", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for (; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 51, "n_pass": [371, 30, 30]}
{"time": "2021-02-13 13:53:22.813590", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(; hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 50, "n_pass": [373, 31, 31]}
{"time": "2021-02-13 13:53:24.124964", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(;hasNext(); ) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 49, "n_pass": [376, 32, 32]}
{"time": "2021-02-13 13:53:25.439000", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(;hasNext();) { if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 48, "n_pass": [381, 33, 33]}
{"time": "2021-02-13 13:53:26.757627", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(;hasNext();){ if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 47, "n_pass": [383, 34, 34]}
{"time": "2021-02-13 13:53:28.075210", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if (0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 46, "n_pass": [385, 35, 35]}
{"time": "2021-02-13 13:53:29.388671", "score": "0.863", "loss": "0.4587", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return supertoString+\"\"; }", "n_tokens": 45, "n_pass": [387, 36, 36]}
{"time": "2021-02-13 13:53:31.428681", "score": "0.9448", "loss": "0.1682", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return toString+\"\"; }", "n_tokens": 44, "n_pass": [403, 37, 37]}
{"time": "2021-02-13 13:53:32.727431", "score": "0.7803", "loss": "0.7437", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return +\"\"; }", "n_tokens": 43, "n_pass": [404, 38, 38]}
{"time": "2021-02-13 13:53:34.045016", "score": "0.7731", "loss": "0.8631", "code": "String toString(){sb=StringBuffer();for(;hasNext();){if(0)(\"\");(it);}return \"\"; }", "n_tokens": 42, "n_pass": [405, 39, 39]}
{"time": "2021-02-13 13:53:36.420453", "score": "0.7654", "loss": "0.8189", "code": "String toString(){sbStringBuffer();for(;hasNext();){if(0)(\"\");(it);}return \"\"; }", "n_tokens": 41, "n_pass": [416, 40, 40]}
{"time": "2021-02-13 13:53:37.749773", "score": "0.7706", "loss": "0.8195", "code": "String toString(){sb();for(;hasNext();){if(0)(\"\");(it);}return \"\"; }", "n_tokens": 40, "n_pass": [417, 41, 41]}
{"time": "2021-02-13 13:53:39.098484", "score": "0.9118", "loss": "0.3116", "code": "String toString(){sb();for(;hasNext();){if(0)(\"\");(it);} \"\"; }", "n_tokens": 39, "n_pass": [444, 42, 42]}
{"time": "2021-02-13 13:53:40.401685", "score": "0.9118", "loss": "0.3116", "code": "String toString(){sb();for(;hasNext();){if(0)(\"\");(it);}\"\"; }", "n_tokens": 38, "n_pass": [445, 43, 43]}
{"time": "2021-02-13 13:53:43.457828", "score": "0.9118", "loss": "0.3116", "code": "String toString(){sb();for(;hasNext();){if(0)(\"\");(it);}\"\";}", "n_tokens": 37, "n_pass": [488, 44, 44]}

Minimal simplified code:
String toString(){sb();for(;hasNext();){if(0)("");(it);}"";}

