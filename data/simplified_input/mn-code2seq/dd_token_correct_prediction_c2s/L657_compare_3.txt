
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/core/LabelVector_compare.java
method_name = compare
method_body = public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) obj1).values; int[] v2 = ((LabelVector) obj2).values; if (A.sum(v1) > A.sum(v2)) { return -1; } else if (A.sum(v1) < A.sum(v2)) { return 1; } else { return 0; } }
predict, score, loss = compare, 0.993587851524353, 0.09839853644371033

Trace of simplified code(s):
{"time": "2021-02-13 19:50:24.585001", "score": "0.9945", "loss": "0.0985", "code": "public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) obj1).values; int[] v2 = ((LabelVector) obj2).values; if (A.sum(v1) > A.sum(v2)) { return -1; } else if (A.sum(v1) < A.sum(v2)) { return 1; } else { return 0; } }", "n_tokens": 139, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:50:25.932879", "score": "0.9832", "loss": "0.0625", "code": "public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) obj1).values; int[] v2 = ((LabelVector) obj2).values; if (A.sum(1) < A.sum(v2)) { return 1; } else { return 0; } }", "n_tokens": 104, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 19:50:27.635253", "score": "0.9841", "loss": "0.0574", "code": "public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) (LabelVector) obj2).values; if (A.sum(1) < A.sum(v2)) { return 1; } else { return 0; } }", "n_tokens": 87, "n_pass": [23, 3, 3]}
{"time": "2021-02-13 19:50:29.364571", "score": "0.9192", "loss": "0.1419", "code": "public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) (LabelVector) obj2).values; if (A.sum(v2)) { return 1; } else { return 0; } }", "n_tokens": 78, "n_pass": [41, 4, 4]}
{"time": "2021-02-13 19:50:30.703610", "score": "0.8942", "loss": "0.1821", "code": "public int compare(Object obj1, Object obj2) { int[] v1 = ((LabelVector) (LabelVector) obj2).values; if (A.sum(v2)) { } else { return 0; } }", "n_tokens": 73, "n_pass": [70, 5, 5]}
{"time": "2021-02-13 19:50:32.388180", "score": "0.608", "loss": "0.7479", "code": "public int compare(Object obj1, Object obj2) { v1 = ((LabelVector) (LabelVector) obj2).values; if (A.sum(v2)) { } else { return 0; } }", "n_tokens": 69, "n_pass": [79, 6, 6]}
{"time": "2021-02-13 19:50:33.708029", "score": "0.7177", "loss": "0.5186", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) (LabelVector) obj2).values; if (A.sum(v2)) { } else { return 0; } }", "n_tokens": 65, "n_pass": [80, 7, 7]}
{"time": "2021-02-13 19:50:35.020817", "score": "0.6733", "loss": "0.5683", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) obj2).values; if (A.sum(v2)) { } else { return 0; } }", "n_tokens": 61, "n_pass": [82, 8, 8]}
{"time": "2021-02-13 19:50:36.743460", "score": "0.5003", "loss": "1.0043", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) ).values; if (A.sum(v2)) { } else { return 0; } }", "n_tokens": 59, "n_pass": [126, 9, 9]}
{"time": "2021-02-13 19:50:38.094572", "score": "0.3443", "loss": "1.4013", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) ).values; if (sum(v2)) { } else { return 0; } }", "n_tokens": 57, "n_pass": [131, 10, 10]}
{"time": "2021-02-13 19:50:39.404657", "score": "0.4315", "loss": "1.1293", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) ).values; if (sum()) { } else { return 0; } }", "n_tokens": 55, "n_pass": [133, 11, 11]}
{"time": "2021-02-13 19:50:40.702745", "score": "0.3982", "loss": "1.3586", "code": "public int compare(Object obj1, Object obj2) {  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 52, "n_pass": [138, 12, 12]}
{"time": "2021-02-13 19:50:43.359832", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj1, Object obj2) {  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 50, "n_pass": [141, 14, 13]}
{"time": "2021-02-13 19:50:51.715602", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj, Object obj2) {  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 49, "n_pass": [218, 16, 14]}
{"time": "2021-02-13 19:50:53.017060", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj2) {  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 48, "n_pass": [220, 17, 15]}
{"time": "2021-02-13 19:50:54.344963", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj) {  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 47, "n_pass": [224, 18, 16]}
{"time": "2021-02-13 19:50:55.675647", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){  ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 46, "n_pass": [226, 19, 17]}
{"time": "2021-02-13 19:50:56.975903", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){ ((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 45, "n_pass": [228, 20, 18]}
{"time": "2021-02-13 19:50:58.289921", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector) ).values; if (sum()) { } else {0; } }", "n_tokens": 44, "n_pass": [229, 21, 19]}
{"time": "2021-02-13 19:50:59.592372", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values; if (sum()) { } else {0; } }", "n_tokens": 43, "n_pass": [234, 22, 20]}
{"time": "2021-02-13 19:51:00.898635", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if (sum()) { } else {0; } }", "n_tokens": 42, "n_pass": [239, 23, 21]}
{"time": "2021-02-13 19:51:02.227679", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()) { } else {0; } }", "n_tokens": 41, "n_pass": [241, 24, 22]}
{"time": "2021-02-13 19:51:03.534601", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){ } else {0; } }", "n_tokens": 40, "n_pass": [247, 25, 23]}
{"time": "2021-02-13 19:51:04.837685", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){} else {0; } }", "n_tokens": 39, "n_pass": [249, 26, 24]}
{"time": "2021-02-13 19:51:06.140972", "score": "0.3982", "loss": "1.3586", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){}else {0; } }", "n_tokens": 38, "n_pass": [251, 27, 25]}
{"time": "2021-02-13 19:51:07.440976", "score": "0.3903", "loss": "1.5292", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){} {0; } }", "n_tokens": 37, "n_pass": [252, 28, 26]}
{"time": "2021-02-13 19:51:12.134705", "score": "0.3903", "loss": "1.5292", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){} {0;} }", "n_tokens": 36, "n_pass": [295, 30, 27]}
{"time": "2021-02-13 19:51:13.461705", "score": "0.3903", "loss": "1.5292", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){} {0;}}", "n_tokens": 35, "n_pass": [296, 31, 28]}
{"time": "2021-02-13 19:51:15.495008", "score": "0.3903", "loss": "1.5292", "code": "int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){}{0;}}", "n_tokens": 34, "n_pass": [327, 32, 29]}

Minimal simplified code:
int compare(Object obj,Object obj){((LabelVector)).values;if(sum()){}{0;}}

