
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wnameless__json-flattener/src/main/java/com/github/wnameless/json/unflattener/JsonUnflattener_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }
predict, score, loss = equals, 0.9977430105209351, 0.0027127366047352552

Trace of simplified code(s):
{"time": "2021-02-13 16:00:37.347440", "score": "0.9977", "loss": "0.0027", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 69, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:00:38.671263", "score": "0.9935", "loss": "0.0081", "code": "@Override public boolean equals(Object o) { if(!(o instanceof JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 52, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 16:00:39.998417", "score": "0.9817", "loss": "0.0236", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener)) return false; return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 48, "n_pass": [37, 3, 3]}
{"time": "2021-02-13 16:00:41.339250", "score": "0.8854", "loss": "0.151", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener))  return root.equals(((JsonUnflattener) o).root); }", "n_tokens": 44, "n_pass": [39, 4, 4]}
{"time": "2021-02-13 16:00:42.641673", "score": "0.8052", "loss": "0.2993", "code": "@Override public boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 39, "n_pass": [40, 5, 5]}
{"time": "2021-02-13 16:00:43.940151", "score": "0.6268", "loss": "0.725", "code": " boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 35, "n_pass": [44, 6, 6]}
{"time": "2021-02-13 16:00:47.954684", "score": "0.6268", "loss": "0.725", "code": "boolean equals(Object o) { if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 34, "n_pass": [117, 7, 7]}
{"time": "2021-02-13 16:00:49.629570", "score": "0.6268", "loss": "0.725", "code": "boolean equals(Object o){ if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 33, "n_pass": [125, 8, 8]}
{"time": "2021-02-13 16:00:50.929243", "score": "0.6268", "loss": "0.725", "code": "boolean equals(Object o){if(!(JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 32, "n_pass": [127, 9, 9]}
{"time": "2021-02-13 16:00:52.246863", "score": "0.7371", "loss": "0.5327", "code": "boolean equals(Object o){if((JsonUnflattener)) equals(((JsonUnflattener) o).root); }", "n_tokens": 31, "n_pass": [130, 10, 10]}
{"time": "2021-02-13 16:00:53.548505", "score": "0.7371", "loss": "0.5327", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener) o).root); }", "n_tokens": 30, "n_pass": [135, 11, 11]}
{"time": "2021-02-13 16:00:56.179559", "score": "0.7371", "loss": "0.5327", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)o).root); }", "n_tokens": 29, "n_pass": [142, 13, 12]}
{"time": "2021-02-13 16:00:57.475111", "score": "0.4507", "loss": "1.3137", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)).root); }", "n_tokens": 28, "n_pass": [143, 14, 13]}
{"time": "2021-02-13 16:00:58.787197", "score": "0.4988", "loss": "1.1544", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener))); }", "n_tokens": 26, "n_pass": [145, 15, 14]}
{"time": "2021-02-13 16:01:02.772202", "score": "0.4988", "loss": "1.1544", "code": "boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)));}", "n_tokens": 25, "n_pass": [175, 17, 15]}

Minimal simplified code:
boolean equals(Object o){if((JsonUnflattener))equals(((JsonUnflattener)));}

