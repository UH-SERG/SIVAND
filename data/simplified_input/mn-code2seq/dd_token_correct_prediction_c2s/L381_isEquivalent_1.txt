
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/TernaryOperatorNode_isEquivalent.java
method_name = isEquivalent
method_body = protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }
predict, score, loss = isEquivalent, 0.7721874713897705, 0.6374018788337708

Trace of simplified code(s):
{"time": "2021-02-13 14:57:43.496287", "score": "0.7722", "loss": "0.6374", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equals(methodName) && other.receiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 139, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 14:57:44.924853", "score": "0.893", "loss": "0.2638", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand == null && other.rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 130, "n_pass": [50, 2, 2]}
{"time": "2021-02-13 14:57:46.272672", "score": "0.8661", "loss": "0.3327", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =rightOperand == null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 121, "n_pass": [54, 3, 3]}
{"time": "2021-02-13 14:57:47.640589", "score": "0.8238", "loss": "0.4576", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand != null && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 116, "n_pass": [98, 4, 4]}
{"time": "2021-02-13 14:57:48.986529", "score": "0.7621", "loss": "0.6861", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand && other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 111, "n_pass": [101, 5, 5]}
{"time": "2021-02-13 14:57:50.328504", "score": "0.8031", "loss": "0.5513", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (other.methodName.equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 106, "n_pass": [102, 6, 6]}
{"time": "2021-02-13 14:57:52.074988", "score": "0.8032", "loss": "0.5489", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return (equalsreceiver.isEquivalent(receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 102, "n_pass": [118, 7, 7]}
{"time": "2021-02-13 14:57:53.411203", "score": "0.7483", "loss": "0.7356", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver) && other.leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 98, "n_pass": [119, 8, 8]}
{"time": "2021-02-13 14:57:54.750957", "score": "0.8058", "loss": "0.5115", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver) .leftOperand.isEquivalent(leftOperand) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 94, "n_pass": [121, 9, 9]}
{"time": "2021-02-13 14:57:56.106162", "score": "0.7696", "loss": "0.6698", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver) (leftOperand) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 90, "n_pass": [122, 10, 10]}
{"time": "2021-02-13 14:57:57.439227", "score": "0.7438", "loss": "0.8261", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver) && ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 86, "n_pass": [123, 11, 11]}
{"time": "2021-02-13 14:57:59.166409", "score": "0.8399", "loss": "0.4422", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperand =null) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 84, "n_pass": [184, 12, 12]}
{"time": "2021-02-13 14:58:00.500031", "score": "0.7848", "loss": "0.7494", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull) || (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 82, "n_pass": [186, 13, 13]}
{"time": "2021-02-13 14:58:01.837088", "score": "0.8021", "loss": "0.6518", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)| (other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 80, "n_pass": [188, 14, 14]}
{"time": "2021-02-13 14:58:03.175841", "score": "0.8339", "loss": "0.4853", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.rightOperand.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 78, "n_pass": [189, 15, 15]}
{"time": "2021-02-13 14:58:04.504267", "score": "0.8073", "loss": "0.5982", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.rightOperand.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 76, "n_pass": [191, 16, 16]}
{"time": "2021-02-13 14:58:05.854132", "score": "0.8023", "loss": "0.5927", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } return false; }", "n_tokens": 74, "n_pass": [192, 17, 17]}
{"time": "2021-02-13 14:58:07.199814", "score": "0.8078", "loss": "0.6174", "code": "protected boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 71, "n_pass": [197, 18, 18]}
{"time": "2021-02-13 14:58:08.521174", "score": "0.8078", "loss": "0.6174", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { TernaryOperatorNode other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 69, "n_pass": [199, 19, 19]}
{"time": "2021-02-13 14:58:10.239833", "score": "0.8651", "loss": "0.6148", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) o; return ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 67, "n_pass": [213, 20, 20]}
{"time": "2021-02-13 14:58:11.551648", "score": "0.752", "loss": "0.9698", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) o; ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 65, "n_pass": [219, 21, 21]}
{"time": "2021-02-13 14:58:13.262879", "score": "0.7217", "loss": "1.0152", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode)  ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 63, "n_pass": [249, 22, 22]}
{"time": "2021-02-13 14:58:20.304224", "score": "0.7217", "loss": "1.0152", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)  ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 62, "n_pass": [337, 23, 23]}
{"time": "2021-02-13 14:58:21.646865", "score": "0.7217", "loss": "1.0152", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver) ((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 61, "n_pass": [341, 24, 24]}
{"time": "2021-02-13 14:58:22.952421", "score": "0.7217", "loss": "1.0152", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperandnull)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 60, "n_pass": [342, 25, 25]}
{"time": "2021-02-13 14:58:24.287041", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } ; }", "n_tokens": 59, "n_pass": [346, 26, 26]}
{"time": "2021-02-13 14:58:28.262450", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o) throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 57, "n_pass": [358, 29, 27]}
{"time": "2021-02-13 14:58:30.310845", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o)throws StandardException { if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 56, "n_pass": [368, 30, 28]}
{"time": "2021-02-13 14:58:31.628272", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o)throws StandardException{ if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 55, "n_pass": [372, 31, 29]}
{"time": "2021-02-13 14:58:32.953910", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if (isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 54, "n_pass": [374, 32, 30]}
{"time": "2021-02-13 14:58:34.286563", "score": "0.7867", "loss": "0.7002", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if(isSameNodeType(o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 53, "n_pass": [376, 33, 31]}
{"time": "2021-02-13 14:58:35.591664", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)) { other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 52, "n_pass": [378, 34, 32]}
{"time": "2021-02-13 14:58:36.914604", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){ other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 51, "n_pass": [383, 35, 33]}
{"time": "2021-02-13 14:58:38.220652", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other = (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 50, "n_pass": [385, 36, 34]}
{"time": "2021-02-13 14:58:39.555273", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other= (TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 49, "n_pass": [387, 37, 35]}
{"time": "2021-02-13 14:58:40.853360", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other=(TernaryOperatorNode) ((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 48, "n_pass": [389, 38, 36]}
{"time": "2021-02-13 14:58:42.160826", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other=(TernaryOperatorNode)((receiver)((rightOperand)(other.isEquivalent(rightOperand)))); } }", "n_tokens": 47, "n_pass": [393, 39, 37]}
{"time": "2021-02-13 14:58:47.873891", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other=(TernaryOperatorNode)((receiver)((rightOperand)(other.isEquivalent(rightOperand))));} }", "n_tokens": 46, "n_pass": [449, 42, 38]}
{"time": "2021-02-13 14:58:49.180156", "score": "0.6963", "loss": "1.0797", "code": "boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other=(TernaryOperatorNode)((receiver)((rightOperand)(other.isEquivalent(rightOperand))));}}", "n_tokens": 45, "n_pass": [450, 43, 39]}

Minimal simplified code:
boolean isEquivalent(ValueNode o)throws StandardException{if((o)){other=(TernaryOperatorNode)((receiver)((rightOperand)(other.isEquivalent(rightOperand))));}}

