
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/types/MultiInstanceList_lastIndexOf.java
method_name = lastIndexOf
method_body = public int lastIndexOf(Object elem) { for (int i = this.lists.length - 1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }
predict, score, loss = lastIndexOf, 0.865193784236908, 0.5608925819396973

Trace of simplified code(s):
{"time": "2021-02-13 11:49:11.620267", "score": "0.8652", "loss": "0.5609", "code": "public int lastIndexOf(Object elem) { for (int i = this.lists.length - 1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 106, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 11:49:14.747042", "score": "0.784", "loss": "0.9385", "code": "public int lastIndexOf() { for (int i = this.lists.length - 1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 103, "n_pass": [94, 3, 2]}
{"time": "2021-02-13 11:49:16.105411", "score": "0.7757", "loss": "0.9994", "code": "public int lastIndexOf() { for (int i =lists.length - 1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 100, "n_pass": [98, 4, 3]}
{"time": "2021-02-13 11:49:17.460474", "score": "0.7643", "loss": "1.0255", "code": "public int lastIndexOf() { for (int i = - 1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 97, "n_pass": [99, 5, 4]}
{"time": "2021-02-13 11:49:18.790855", "score": "0.7819", "loss": "0.9896", "code": "public int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists[i].lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 94, "n_pass": [100, 6, 5]}
{"time": "2021-02-13 11:49:20.154197", "score": "0.7736", "loss": "1.0792", "code": "public int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if (index != -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 91, "n_pass": [110, 7, 6]}
{"time": "2021-02-13 11:49:21.486229", "score": "0.7878", "loss": "0.9849", "code": "public int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return index + this.offsets[i]; } } return -1; }", "n_tokens": 87, "n_pass": [114, 8, 7]}
{"time": "2021-02-13 11:49:22.814931", "score": "0.8256", "loss": "0.7397", "code": "public int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } } return -1; }", "n_tokens": 83, "n_pass": [117, 9, 8]}
{"time": "2021-02-13 11:49:24.144957", "score": "0.7661", "loss": "1.2357", "code": "public int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 79, "n_pass": [121, 10, 9]}
{"time": "2021-02-13 11:49:30.189114", "score": "0.7661", "loss": "1.2357", "code": " int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 78, "n_pass": [196, 12, 10]}
{"time": "2021-02-13 11:49:31.500647", "score": "0.7661", "loss": "1.2357", "code": "int lastIndexOf() { for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 77, "n_pass": [197, 13, 11]}
{"time": "2021-02-13 11:49:33.201173", "score": "0.7661", "loss": "1.2357", "code": "int lastIndexOf(){ for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 76, "n_pass": [202, 14, 12]}
{"time": "2021-02-13 11:49:34.525357", "score": "0.7661", "loss": "1.2357", "code": "int lastIndexOf(){for (int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 75, "n_pass": [204, 15, 13]}
{"time": "2021-02-13 11:49:35.851060", "score": "0.7661", "loss": "1.2357", "code": "int lastIndexOf(){for(int i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 74, "n_pass": [206, 16, 14]}
{"time": "2021-02-13 11:49:37.196577", "score": "0.8243", "loss": "0.7972", "code": "int lastIndexOf(){for( i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 73, "n_pass": [208, 17, 15]}
{"time": "2021-02-13 11:49:38.518477", "score": "0.8243", "loss": "0.7972", "code": "int lastIndexOf(){for(i =1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 72, "n_pass": [209, 18, 16]}
{"time": "2021-02-13 11:49:39.845717", "score": "0.8243", "loss": "0.7972", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { int index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 71, "n_pass": [211, 19, 17]}
{"time": "2021-02-13 11:49:42.481160", "score": "0.8052", "loss": "0.8797", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lists.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 69, "n_pass": [221, 21, 18]}
{"time": "2021-02-13 11:49:43.827827", "score": "0.8536", "loss": "0.6458", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lastIndexOf(elem); if ( -1) { return this.offsets[i]; } }1; }", "n_tokens": 67, "n_pass": [225, 22, 19]}
{"time": "2021-02-13 11:49:45.516698", "score": "0.8942", "loss": "0.4433", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { return this.offsets[i]; } }1; }", "n_tokens": 65, "n_pass": [231, 23, 20]}
{"time": "2021-02-13 11:49:46.847709", "score": "0.7503", "loss": "1.6861", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { this.offsets[i]; } }1; }", "n_tokens": 63, "n_pass": [234, 24, 21]}
{"time": "2021-02-13 11:49:48.167098", "score": "0.7404", "loss": "1.8785", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } }1; }", "n_tokens": 61, "n_pass": [236, 25, 22]}
{"time": "2021-02-13 11:49:49.476983", "score": "0.7247", "loss": "1.92", "code": "int lastIndexOf(){for(i=1; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 59, "n_pass": [241, 26, 23]}
{"time": "2021-02-13 11:49:51.510620", "score": "0.6411", "loss": "2.5134", "code": "int lastIndexOf(){for(i; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 57, "n_pass": [252, 27, 24]}
{"time": "2021-02-13 11:49:53.911229", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >= 0; i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 56, "n_pass": [285, 28, 25]}
{"time": "2021-02-13 11:50:02.628431", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0; i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 55, "n_pass": [366, 29, 26]}
{"time": "2021-02-13 11:50:03.939502", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--) { index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 54, "n_pass": [368, 30, 27]}
{"time": "2021-02-13 11:50:05.238135", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){ index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 53, "n_pass": [373, 31, 28]}
{"time": "2021-02-13 11:50:06.562444", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index = this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 52, "n_pass": [375, 32, 29]}
{"time": "2021-02-13 11:50:07.892508", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index= this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 51, "n_pass": [377, 33, 30]}
{"time": "2021-02-13 11:50:09.197080", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem); if (1) { this[i]; } } }", "n_tokens": 50, "n_pass": [379, 34, 31]}
{"time": "2021-02-13 11:50:13.151081", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if (1) { this[i]; } } }", "n_tokens": 49, "n_pass": [387, 37, 32]}
{"time": "2021-02-13 11:50:14.453090", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1) { this[i]; } } }", "n_tokens": 48, "n_pass": [389, 38, 33]}
{"time": "2021-02-13 11:50:15.767942", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1){ this[i]; } } }", "n_tokens": 47, "n_pass": [393, 39, 34]}
{"time": "2021-02-13 11:50:17.077059", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1){this[i]; } } }", "n_tokens": 46, "n_pass": [395, 40, 35]}
{"time": "2021-02-13 11:50:18.404146", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1){this[i];} } }", "n_tokens": 45, "n_pass": [401, 41, 36]}
{"time": "2021-02-13 11:50:19.732236", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1){this[i];}} }", "n_tokens": 44, "n_pass": [403, 42, 37]}
{"time": "2021-02-13 11:50:21.046456", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(; i >=0;i--){index=this.lastIndexOf(elem);if(1){this[i];}}}", "n_tokens": 43, "n_pass": [405, 43, 38]}
{"time": "2021-02-13 11:50:23.081322", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(;i >=0;i--){index=this.lastIndexOf(elem);if(1){this[i];}}}", "n_tokens": 42, "n_pass": [416, 44, 39]}
{"time": "2021-02-13 11:50:24.388391", "score": "0.7132", "loss": "2.0835", "code": "int lastIndexOf(){for(;i>=0;i--){index=this.lastIndexOf(elem);if(1){this[i];}}}", "n_tokens": 41, "n_pass": [418, 45, 40]}

Minimal simplified code:
int lastIndexOf(){for(;i>=0;i--){index=this.lastIndexOf(elem);if(1){this[i];}}}

