
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/json-iterator__java/src/main/java/com/jsoniter/any/ListWrapperAny_next.java
method_name = next
method_body = @Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }
predict, score, loss = next, 0.9218335747718811, 0.15090033411979675

Trace of simplified code(s):
{"time": "2021-02-13 14:39:52.062740", "score": "0.9218", "loss": "0.1509", "code": "@Override public Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 92, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 14:39:53.768940", "score": "0.7705", "loss": "0.4443", "code": "Any next() { if (cache == null) { cache = new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 87, "n_pass": [44, 2, 2]}
{"time": "2021-02-13 14:39:55.852482", "score": "0.7851", "loss": "0.4228", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { cache.add(Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 84, "n_pass": [98, 3, 3]}
{"time": "2021-02-13 14:39:57.179200", "score": "0.719", "loss": "0.5409", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } return cache.get(index++); }", "n_tokens": 81, "n_pass": [108, 4, 4]}
{"time": "2021-02-13 14:39:58.491317", "score": "0.5522", "loss": "1.0055", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } returnget(index++); }", "n_tokens": 78, "n_pass": [115, 5, 5]}
{"time": "2021-02-13 14:40:04.166708", "score": "0.7545", "loss": "0.5915", "code": "Any next() { if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 76, "n_pass": [198, 6, 6]}
{"time": "2021-02-13 14:40:07.872870", "score": "0.7545", "loss": "0.5915", "code": "Any next(){ if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 75, "n_pass": [208, 8, 7]}
{"time": "2021-02-13 14:40:09.188970", "score": "0.7545", "loss": "0.5915", "code": "Any next(){if (cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 74, "n_pass": [210, 9, 8]}
{"time": "2021-02-13 14:40:10.509262", "score": "0.7545", "loss": "0.5915", "code": "Any next(){if(cache == null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 73, "n_pass": [212, 10, 9]}
{"time": "2021-02-13 14:40:11.847752", "score": "0.7545", "loss": "0.5915", "code": "Any next(){if(cache== null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 72, "n_pass": [215, 11, 10]}
{"time": "2021-02-13 14:40:13.168029", "score": "0.861", "loss": "0.4267", "code": "Any next(){if(cache= null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 71, "n_pass": [216, 12, 11]}
{"time": "2021-02-13 14:40:14.485553", "score": "0.861", "loss": "0.4267", "code": "Any next(){if(cache=null) {  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 70, "n_pass": [218, 13, 12]}
{"time": "2021-02-13 14:40:15.810059", "score": "0.861", "loss": "0.4267", "code": "Any next(){if(cache=null){  new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 69, "n_pass": [221, 14, 13]}
{"time": "2021-02-13 14:40:17.115629", "score": "0.861", "loss": "0.4267", "code": "Any next(){if(cache=null){ new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 68, "n_pass": [223, 15, 14]}
{"time": "2021-02-13 14:40:18.442526", "score": "0.861", "loss": "0.4267", "code": "Any next(){if(cache=null){new ArrayList<Any>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 67, "n_pass": [224, 16, 15]}
{"time": "2021-02-13 14:40:19.762513", "score": "0.8857", "loss": "0.3513", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (index == cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 66, "n_pass": [229, 17, 16]}
{"time": "2021-02-13 14:40:21.084237", "score": "0.9092", "loss": "0.2889", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (index= cache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 64, "n_pass": [237, 18, 17]}
{"time": "2021-02-13 14:40:22.397273", "score": "0.814", "loss": "0.4659", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexcache.size()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 62, "n_pass": [238, 19, 18]}
{"time": "2021-02-13 14:40:23.691660", "score": "0.859", "loss": "0.3729", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexsize()) { (Any.wrap(val.get(index))); } (index++); }", "n_tokens": 60, "n_pass": [239, 20, 19]}
{"time": "2021-02-13 14:40:25.012443", "score": "0.8655", "loss": "0.3528", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexsize()) { (wrap(val.get(index))); } (index++); }", "n_tokens": 58, "n_pass": [244, 21, 20]}
{"time": "2021-02-13 14:40:26.323103", "score": "0.8512", "loss": "0.3893", "code": "Any next(){if(cache=null){new ArrayList<>(); } if (indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 56, "n_pass": [246, 22, 21]}
{"time": "2021-02-13 14:40:30.032591", "score": "0.7701", "loss": "0.535", "code": "Any next(){if(cachenull){new ArrayList<>(); } if (indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 55, "n_pass": [265, 24, 22]}
{"time": "2021-02-13 14:40:31.341455", "score": "0.8445", "loss": "0.3424", "code": "Any next(){if(cache){new ArrayList<>(); } if (indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 54, "n_pass": [266, 25, 23]}
{"time": "2021-02-13 14:40:38.740078", "score": "0.8445", "loss": "0.3424", "code": "Any next(){if(cache){new ArrayList<>();} if (indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 53, "n_pass": [340, 27, 24]}
{"time": "2021-02-13 14:40:40.067938", "score": "0.8445", "loss": "0.3424", "code": "Any next(){if(cache){new ArrayList<>();}if (indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 52, "n_pass": [342, 28, 25]}
{"time": "2021-02-13 14:40:41.376304", "score": "0.8445", "loss": "0.3424", "code": "Any next(){if(cache){new ArrayList<>();}if(indexsize()) { (wrap(get(index))); } (index++); }", "n_tokens": 51, "n_pass": [344, 29, 26]}
{"time": "2021-02-13 14:40:42.686700", "score": "0.7873", "loss": "0.4334", "code": "Any next(){if(cache){new ArrayList<>();}if(size()) { (wrap(get(index))); } (index++); }", "n_tokens": 50, "n_pass": [346, 30, 27]}
{"time": "2021-02-13 14:40:44.003124", "score": "0.7873", "loss": "0.4334", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){ (wrap(get(index))); } (index++); }", "n_tokens": 49, "n_pass": [351, 31, 28]}
{"time": "2021-02-13 14:40:45.330856", "score": "0.7873", "loss": "0.4334", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){(wrap(get(index))); } (index++); }", "n_tokens": 48, "n_pass": [353, 32, 29]}
{"time": "2021-02-13 14:40:46.650168", "score": "0.8015", "loss": "0.4648", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){((get(index))); } (index++); }", "n_tokens": 47, "n_pass": [355, 33, 30]}
{"time": "2021-02-13 14:40:47.978610", "score": "0.759", "loss": "0.5758", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){(((index))); } (index++); }", "n_tokens": 46, "n_pass": [357, 34, 31]}
{"time": "2021-02-13 14:40:49.301035", "score": "0.759", "loss": "0.5758", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){(((index)));} (index++); }", "n_tokens": 45, "n_pass": [364, 35, 32]}
{"time": "2021-02-13 14:40:50.599085", "score": "0.759", "loss": "0.5758", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){(((index)));}(index++); }", "n_tokens": 44, "n_pass": [366, 36, 33]}
{"time": "2021-02-13 14:40:51.916388", "score": "0.759", "loss": "0.5758", "code": "Any next(){if(cache){new ArrayList<>();}if(size()){(((index)));}(index++);}", "n_tokens": 43, "n_pass": [373, 37, 34]}

Minimal simplified code:
Any next(){if(cache){new ArrayList<>();}if(size()){(((index)));}(index++);}

