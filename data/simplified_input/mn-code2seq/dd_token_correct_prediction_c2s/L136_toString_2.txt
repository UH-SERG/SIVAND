
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/http/src/main/java/org/kaazing/gateway/transport/http/HttpBindings_toString.java
method_name = toString
method_body = @Override public String toString() { Iterator<Entry<String, Binding>> i = bindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append("(\n"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(" ").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append("\n #").append(referenceCount()).append(")").toString(); sb.append(';').append('\n'); } }
predict, score, loss = toString, 0.9939321875572205, 0.014971453696489334

Trace of simplified code(s):
{"time": "2021-02-13 06:01:13.703617", "score": "0.9999", "loss": "0.0004", "code": "@Override public String toString() { Iterator<Entry<String, Binding>> i = bindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 238, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 06:01:15.133962", "score": "0.9987", "loss": "0.0032", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \").append(key); sb.append('='); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 224, "n_pass": [45, 2, 2]}
{"time": "2021-02-13 06:01:16.531569", "score": "0.9998", "loss": "0.0006", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n #\").append(referenceCount()).append(\")\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 209, "n_pass": [54, 3, 3]}
{"time": "2021-02-13 06:01:17.893378", "score": "0.9998", "loss": "0.0007", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append(';').append('\\n'); } }", "n_tokens": 194, "n_pass": [57, 4, 4]}
{"time": "2021-02-13 06:01:19.368819", "score": "0.9997", "loss": "0.0008", "code": "@Override public String toString() { IteratorbindingsByPath.entrySet().iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 186, "n_pass": [99, 5, 5]}
{"time": "2021-02-13 06:01:21.098583", "score": "0.9981", "loss": "0.0052", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb = new StringBuilder(); sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 179, "n_pass": [103, 6, 6]}
{"time": "2021-02-13 06:01:22.457196", "score": "0.9999", "loss": "0.0005", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e = i.next(); String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 172, "n_pass": [108, 7, 7]}
{"time": "2021-02-13 06:01:24.212913", "score": "0.9998", "loss": "0.0005", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = e.getKey(); Binding value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 165, "n_pass": [114, 8, 8]}
{"time": "2021-02-13 06:01:25.561413", "score": "0.9957", "loss": "0.0101", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  value = e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 157, "n_pass": [116, 9, 9]}
{"time": "2021-02-13 06:01:27.690424", "score": "0.9999", "loss": "0.0003", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValue(); sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 153, "n_pass": [180, 10, 10]}
{"time": "2021-02-13 06:01:29.062430", "score": "0.9999", "loss": "0.0005", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\").toString(); sb.append('n'); } }", "n_tokens": 149, "n_pass": [181, 11, 11]}
{"time": "2021-02-13 06:01:30.438805", "score": "0.9999", "loss": "0.0005", "code": "@Override public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 145, "n_pass": [192, 12, 12]}
{"time": "2021-02-13 06:01:31.811371", "score": "0.9984", "loss": "0.0052", "code": "public String toString() { Iterator(); if (!i.hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 142, "n_pass": [197, 13, 13]}
{"time": "2021-02-13 06:01:33.532487", "score": "0.9985", "loss": "0.0047", "code": "public String toString() { Iterator(); if (hasNext()) return super.toString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 139, "n_pass": [204, 14, 14]}
{"time": "2021-02-13 06:01:34.899632", "score": "0.792", "loss": "0.7598", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); StringBuilder sb ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 136, "n_pass": [207, 15, 15]}
{"time": "2021-02-13 06:01:36.268514", "score": "0.7944", "loss": "0.717", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key =  e.getValuesb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 132, "n_pass": [209, 16, 16]}
{"time": "2021-02-13 06:01:37.608390", "score": "0.8329", "loss": "0.6043", "code": "public String toString() { Iterator(); if (hasNext()) returntoString(); ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 128, "n_pass": [221, 17, 17]}
{"time": "2021-02-13 06:01:39.347002", "score": "0.8208", "loss": "0.6303", "code": "public String toString() { Iterator(); if (hasNext()) return ; sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 124, "n_pass": [244, 18, 18]}
{"time": "2021-02-13 06:01:44.089790", "score": "0.8175", "loss": "0.6532", "code": "public String toString() { Iterator(); if (hasNext()) return sb.append(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 122, "n_pass": [344, 19, 19]}
{"time": "2021-02-13 06:01:45.427813", "score": "0.8183", "loss": "0.6496", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"(\\n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 120, "n_pass": [345, 20, 20]}
{"time": "2021-02-13 06:01:46.763489", "score": "0.8272", "loss": "0.6887", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry<String, Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 118, "n_pass": [347, 21, 21]}
{"time": "2021-02-13 06:01:48.115088", "score": "0.8332", "loss": "0.6635", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; String key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 116, "n_pass": [357, 22, 22]}
{"time": "2021-02-13 06:01:49.822734", "score": "0.8321", "loss": "0.6379", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = sb.append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 114, "n_pass": [362, 23, 23]}
{"time": "2021-02-13 06:01:51.187050", "score": "0.8376", "loss": "0.6369", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); sb.append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 112, "n_pass": [365, 24, 24]}
{"time": "2021-02-13 06:01:52.527756", "score": "0.7689", "loss": "0.9717", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!i.hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 110, "n_pass": [370, 25, 25]}
{"time": "2021-02-13 06:01:53.906655", "score": "0.795", "loss": "0.861", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) return sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 108, "n_pass": [376, 26, 26]}
{"time": "2021-02-13 06:01:55.241975", "score": "0.8092", "loss": "0.7339", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb.append(\"\\n)\"); sb.append('n'); } }", "n_tokens": 106, "n_pass": [379, 27, 27]}
{"time": "2021-02-13 06:01:56.572982", "score": "0.7509", "loss": "1.1132", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\"\\n)\"); sb.append('n'); } }", "n_tokens": 104, "n_pass": [381, 28, 28]}
{"time": "2021-02-13 06:01:57.907535", "score": "0.7509", "loss": "1.1132", "code": "public String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 102, "n_pass": [383, 29, 29]}
{"time": "2021-02-13 06:02:00.602609", "score": "0.7509", "loss": "1.1132", "code": " String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 101, "n_pass": [393, 31, 30]}
{"time": "2021-02-13 06:02:01.929664", "score": "0.7509", "loss": "1.1132", "code": "String toString() { Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 100, "n_pass": [394, 32, 31]}
{"time": "2021-02-13 06:02:04.357299", "score": "0.7509", "loss": "1.1132", "code": "String toString(){ Iterator(); if (hasNext()) return sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 99, "n_pass": [400, 33, 32]}
{"time": "2021-02-13 06:02:05.705369", "score": "0.8129", "loss": "0.9335", "code": "String toString(){ Iterator(); if (hasNext()) sb(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 97, "n_pass": [408, 34, 33]}
{"time": "2021-02-13 06:02:07.027188", "score": "0.8214", "loss": "0.827", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext()) sb(\")\"); sb.append('n'); } }", "n_tokens": 95, "n_pass": [409, 35, 34]}
{"time": "2021-02-13 06:02:09.157154", "score": "0.8485", "loss": "0.628", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\"); sb.append('n'); } }", "n_tokens": 93, "n_pass": [437, 36, 35]}
{"time": "2021-02-13 06:02:10.519938", "score": "0.774", "loss": "1.1901", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\"); sb('n'); } }", "n_tokens": 91, "n_pass": [442, 37, 36]}
{"time": "2021-02-13 06:02:13.707312", "score": "0.7591", "loss": "1.1019", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n'); } }", "n_tokens": 89, "n_pass": [490, 38, 37]}
{"time": "2021-02-13 06:02:27.202089", "score": "0.7591", "loss": "1.1019", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');} }", "n_tokens": 88, "n_pass": [628, 39, 38]}
{"time": "2021-02-13 06:02:28.550044", "score": "0.7591", "loss": "1.1019", "code": "String toString(){ Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 87, "n_pass": [629, 40, 39]}
{"time": "2021-02-13 06:02:30.986302", "score": "0.7591", "loss": "1.1019", "code": "String toString(){Iterator(); if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 86, "n_pass": [637, 41, 40]}
{"time": "2021-02-13 06:02:32.336028", "score": "0.7591", "loss": "1.1019", "code": "String toString(){Iterator();if (hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 85, "n_pass": [642, 42, 41]}
{"time": "2021-02-13 06:02:33.663951", "score": "0.7591", "loss": "1.1019", "code": "String toString(){Iterator();if(hasNext())(\"n\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 84, "n_pass": [644, 43, 42]}
{"time": "2021-02-13 06:02:34.997993", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\"); for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 83, "n_pass": [652, 44, 43]}
{"time": "2021-02-13 06:02:36.329405", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for (; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 82, "n_pass": [656, 45, 44]}
{"time": "2021-02-13 06:02:37.659136", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(; ; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 81, "n_pass": [658, 46, 45]}
{"time": "2021-02-13 06:02:38.990797", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;; ) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 80, "n_pass": [661, 47, 46]}
{"time": "2021-02-13 06:02:40.321466", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;) { Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 79, "n_pass": [663, 48, 47]}
{"time": "2021-02-13 06:02:41.667076", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){ Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 78, "n_pass": [665, 49, 48]}
{"time": "2021-02-13 06:02:42.995545", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry< Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 77, "n_pass": [667, 50, 49]}
{"time": "2021-02-13 06:02:44.327443", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding> e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 76, "n_pass": [670, 51, 50]}
{"time": "2021-02-13 06:02:45.664187", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e ; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 75, "n_pass": [673, 52, 51]}
{"time": "2021-02-13 06:02:47.023463", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e; key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 74, "n_pass": [675, 53, 52]}
{"time": "2021-02-13 06:02:48.350974", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key = append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 73, "n_pass": [677, 54, 53]}
{"time": "2021-02-13 06:02:49.683074", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key= append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 72, "n_pass": [679, 55, 54]}
{"time": "2021-02-13 06:02:51.037779", "score": "0.7603", "loss": "1.0888", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=append(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 71, "n_pass": [681, 56, 55]}
{"time": "2021-02-13 06:02:52.363593", "score": "0.7829", "loss": "0.9931", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\" \"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 70, "n_pass": [682, 57, 56]}
{"time": "2021-02-13 06:02:53.678637", "score": "0.7785", "loss": "1.0279", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\"); append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 69, "n_pass": [685, 58, 57]}
{"time": "2021-02-13 06:02:55.004943", "score": "0.7785", "loss": "1.0279", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");append(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 68, "n_pass": [689, 59, 58]}
{"time": "2021-02-13 06:02:56.318871", "score": "0.7227", "loss": "1.0192", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");(value); if (!hasNext())(\")\");('n');}}", "n_tokens": 67, "n_pass": [690, 60, 59]}
{"time": "2021-02-13 06:02:57.670109", "score": "0.7227", "loss": "1.0192", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");(value);if (!hasNext())(\")\");('n');}}", "n_tokens": 66, "n_pass": [695, 61, 60]}
{"time": "2021-02-13 06:02:58.983968", "score": "0.7227", "loss": "1.0192", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");(value);if(!hasNext())(\")\");('n');}}", "n_tokens": 65, "n_pass": [697, 62, 61]}
{"time": "2021-02-13 06:03:00.298479", "score": "0.7349", "loss": "0.9173", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e;key=(\"\");(value);if(hasNext())(\")\");('n');}}", "n_tokens": 64, "n_pass": [699, 63, 62]}
{"time": "2021-02-13 06:03:05.137701", "score": "0.7241", "loss": "0.9536", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>ekey=(\"\");(value);if(hasNext())(\")\");('n');}}", "n_tokens": 63, "n_pass": [750, 65, 63]}
{"time": "2021-02-13 06:03:06.460332", "score": "0.7233", "loss": "0.9507", "code": "String toString(){Iterator();if(hasNext())(\"\");for(;;){Entry<Binding>e=(\"\");(value);if(hasNext())(\")\");('n');}}", "n_tokens": 62, "n_pass": [751, 66, 64]}

Minimal simplified code:
String toString(){Iterator();if(hasNext())("");for(;;){Entry<Binding>e=("");(value);if(hasNext())(")");('n');}}

