
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/sun/identity/entitlement/util/RelaxedURL_toString.java
method_name = toString
method_body = @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(protocol); builder.append("://"); builder.append(hostname); builder.append(':'); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }
predict, score, loss = toString, 0.9688284993171692, 0.08143693953752518

Trace of simplified code(s):
{"time": "2021-02-13 19:53:26.092869", "score": "0.962", "loss": "0.0945", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(protocol); builder.append(\"://\"); builder.append(hostname); builder.append(':'); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 123, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:53:27.454679", "score": "0.9687", "loss": "0.0778", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(); builder.append(port); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 92, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 19:53:28.809698", "score": "0.9557", "loss": "0.1167", "code": "@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 77, "n_pass": [18, 3, 3]}
{"time": "2021-02-13 19:53:30.535881", "score": "0.969", "loss": "0.0805", "code": "@Override public String toString() { StringBuilderStringBuilder(); builder.append(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 70, "n_pass": [42, 4, 4]}
{"time": "2021-02-13 19:53:31.860715", "score": "0.9546", "loss": "0.118", "code": "@Override public String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 62, "n_pass": [43, 5, 5]}
{"time": "2021-02-13 19:53:33.552839", "score": "0.7583", "loss": "0.7795", "code": "public String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 59, "n_pass": [80, 6, 6]}
{"time": "2021-02-13 19:53:35.910068", "score": "0.7583", "loss": "0.7795", "code": " String toString() { StringBuilder(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 58, "n_pass": [126, 7, 7]}
{"time": "2021-02-13 19:53:37.608136", "score": "0.7272", "loss": "0.9079", "code": " String toString() {(path); if (!query.isEmpty()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 56, "n_pass": [130, 8, 8]}
{"time": "2021-02-13 19:53:38.935825", "score": "0.7864", "loss": "0.6544", "code": " String toString() {(path); if (!query()) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 54, "n_pass": [136, 9, 9]}
{"time": "2021-02-13 19:53:40.269836", "score": "0.7847", "loss": "0.6263", "code": " String toString() {(path); if (!query) { builder.append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 52, "n_pass": [137, 10, 10]}
{"time": "2021-02-13 19:53:41.576969", "score": "0.8", "loss": "0.5804", "code": " String toString() {(path); if (!query) { append('?'); builder.append(query); } return builder.toString(); }", "n_tokens": 50, "n_pass": [140, 11, 11]}
{"time": "2021-02-13 19:53:42.898260", "score": "0.8241", "loss": "0.511", "code": " String toString() {(path); if (!query) { append('?'); append(query); } return builder.toString(); }", "n_tokens": 48, "n_pass": [145, 12, 12]}
{"time": "2021-02-13 19:53:44.205680", "score": "0.9034", "loss": "0.3155", "code": " String toString() {(path); if (!query) { append('?'); append(query); } builder.toString(); }", "n_tokens": 46, "n_pass": [150, 13, 13]}
{"time": "2021-02-13 19:53:45.505315", "score": "0.8871", "loss": "0.4761", "code": " String toString() {(path); if (!query) { append('?'); append(query); } toString(); }", "n_tokens": 44, "n_pass": [151, 14, 14]}
{"time": "2021-02-13 19:53:52.514173", "score": "0.8871", "loss": "0.4761", "code": " String toString() {(path); if (!query) { append('?'); append(query); } toString();}", "n_tokens": 43, "n_pass": [222, 15, 15]}
{"time": "2021-02-13 19:53:53.842862", "score": "0.8871", "loss": "0.4761", "code": "String toString() {(path); if (!query) { append('?'); append(query); } toString();}", "n_tokens": 42, "n_pass": [223, 16, 16]}
{"time": "2021-02-13 19:53:56.207582", "score": "0.8871", "loss": "0.4761", "code": "String toString(){(path); if (!query) { append('?'); append(query); } toString();}", "n_tokens": 41, "n_pass": [229, 17, 17]}
{"time": "2021-02-13 19:53:57.537910", "score": "0.8871", "loss": "0.4761", "code": "String toString(){(path);if (!query) { append('?'); append(query); } toString();}", "n_tokens": 40, "n_pass": [235, 18, 18]}
{"time": "2021-02-13 19:53:58.846108", "score": "0.8871", "loss": "0.4761", "code": "String toString(){(path);if(!query) { append('?'); append(query); } toString();}", "n_tokens": 39, "n_pass": [237, 19, 19]}
{"time": "2021-02-13 19:54:00.151794", "score": "0.8911", "loss": "0.4821", "code": "String toString(){(path);if(query) { append('?'); append(query); } toString();}", "n_tokens": 38, "n_pass": [239, 20, 20]}
{"time": "2021-02-13 19:54:01.470616", "score": "0.8911", "loss": "0.4821", "code": "String toString(){(path);if(query){ append('?'); append(query); } toString();}", "n_tokens": 37, "n_pass": [242, 21, 21]}
{"time": "2021-02-13 19:54:02.803709", "score": "0.8911", "loss": "0.4821", "code": "String toString(){(path);if(query){append('?'); append(query); } toString();}", "n_tokens": 36, "n_pass": [244, 22, 22]}
{"time": "2021-02-13 19:54:04.107273", "score": "0.8479", "loss": "0.7564", "code": "String toString(){(path);if(query){('?'); append(query); } toString();}", "n_tokens": 35, "n_pass": [245, 23, 23]}
{"time": "2021-02-13 19:54:05.740927", "score": "0.8479", "loss": "0.7564", "code": "String toString(){(path);if(query){('?');append(query); } toString();}", "n_tokens": 34, "n_pass": [252, 24, 24]}
{"time": "2021-02-13 19:54:07.053742", "score": "0.7509", "loss": "0.9032", "code": "String toString(){(path);if(query){('?');(query); } toString();}", "n_tokens": 33, "n_pass": [253, 25, 25]}
{"time": "2021-02-13 19:54:08.358323", "score": "0.7509", "loss": "0.9032", "code": "String toString(){(path);if(query){('?');(query);} toString();}", "n_tokens": 32, "n_pass": [258, 26, 26]}
{"time": "2021-02-13 19:54:09.660425", "score": "0.7509", "loss": "0.9032", "code": "String toString(){(path);if(query){('?');(query);}toString();}", "n_tokens": 31, "n_pass": [260, 27, 27]}

Minimal simplified code:
String toString(){(path);if(query){('?');(query);}toString();}

