
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/math/FloatArrays_min.java
method_name = min
method_body = public static float min(float... input) { validateArray(input); float min = input[0]; for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }
predict, score, loss = min, 0.82170569896698, 0.39172738790512085

Trace of simplified code(s):
{"time": "2021-02-13 22:08:49.393129", "score": "0.8217", "loss": "0.3917", "code": "public static float min(float... input) { validateArray(input); float min = input[0]; for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 99, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 22:08:51.142233", "score": "0.7092", "loss": "0.6444", "code": "public static float min(float... input) { validateArray(input); for (int i = 1; i < input.length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 87, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 22:08:52.544743", "score": "0.695", "loss": "0.6726", "code": "public static float min(float... input) { validateArray(input); for (int i = 1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 81, "n_pass": [46, 3, 3]}
{"time": "2021-02-13 22:08:54.314050", "score": "0.5984", "loss": "0.9003", "code": "public static float min(float... input) { for (int i = 1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 75, "n_pass": [56, 4, 4]}
{"time": "2021-02-13 22:08:56.070437", "score": "0.5469", "loss": "1.0747", "code": "public static float min(float... input) { for (int i1; length; i++) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 72, "n_pass": [95, 5, 5]}
{"time": "2021-02-13 22:08:57.402441", "score": "0.4971", "loss": "1.2248", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min = input[i]; } } return min; }", "n_tokens": 69, "n_pass": [97, 6, 6]}
{"time": "2021-02-13 22:09:00.141612", "score": "0.7789", "loss": "0.5086", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min [i]; } } return min; }", "n_tokens": 66, "n_pass": [105, 8, 7]}
{"time": "2021-02-13 22:09:01.516414", "score": "0.5693", "loss": "0.9479", "code": "public static float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 63, "n_pass": [106, 9, 8]}
{"time": "2021-02-13 22:09:02.902022", "score": "0.5693", "loss": "0.9479", "code": " float min(float... input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 60, "n_pass": [110, 10, 9]}
{"time": "2021-02-13 22:09:04.665072", "score": "0.5693", "loss": "0.9479", "code": " float min(float input) { for (int i1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 57, "n_pass": [113, 11, 10]}
{"time": "2021-02-13 22:09:06.059785", "score": "0.6461", "loss": "0.8244", "code": " float min(float input) { for (1; length; ) { if (input[i] < min) { min ; } } return min; }", "n_tokens": 54, "n_pass": [117, 12, 11]}
{"time": "2021-02-13 22:09:07.427707", "score": "0.571", "loss": "0.7945", "code": " float min(float input) { for (1; length; ) { if (input[i] ) { min ; } } return min; }", "n_tokens": 51, "n_pass": [124, 13, 12]}
{"time": "2021-02-13 22:09:08.789760", "score": "0.5459", "loss": "0.8409", "code": " float min(float input) { for (1; length; ) { if (input[i] ) {; } } return min; }", "n_tokens": 48, "n_pass": [126, 14, 13]}
{"time": "2021-02-13 22:09:12.947754", "score": "0.5459", "loss": "0.8409", "code": " float min(float input) { for (1; length; ) { if (input[i] ) {} } return min; }", "n_tokens": 46, "n_pass": [172, 15, 14]}
{"time": "2021-02-13 22:09:15.705671", "score": "0.5459", "loss": "0.8409", "code": "float min(float input) { for (1; length; ) { if (input[i] ) {} } return min; }", "n_tokens": 45, "n_pass": [177, 17, 15]}
{"time": "2021-02-13 22:09:17.777445", "score": "0.5459", "loss": "0.8409", "code": "float min(float input){ for (1; length; ) { if (input[i] ) {} } return min; }", "n_tokens": 44, "n_pass": [186, 18, 16]}
{"time": "2021-02-13 22:09:19.094247", "score": "0.5459", "loss": "0.8409", "code": "float min(float input){for (1; length; ) { if (input[i] ) {} } return min; }", "n_tokens": 43, "n_pass": [188, 19, 17]}
{"time": "2021-02-13 22:09:27.671298", "score": "0.5459", "loss": "0.8409", "code": "float min(float input){for (1;length; ) { if (input[i] ) {} } return min; }", "n_tokens": 42, "n_pass": [249, 21, 18]}
{"time": "2021-02-13 22:09:29.040223", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;; ) { if (input[i] ) {} } return min; }", "n_tokens": 41, "n_pass": [250, 22, 19]}
{"time": "2021-02-13 22:09:30.367295", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;) { if (input[i] ) {} } return min; }", "n_tokens": 40, "n_pass": [252, 23, 20]}
{"time": "2021-02-13 22:09:31.698261", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){ if (input[i] ) {} } return min; }", "n_tokens": 39, "n_pass": [254, 24, 21]}
{"time": "2021-02-13 22:09:33.091102", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if (input[i] ) {} } return min; }", "n_tokens": 38, "n_pass": [256, 25, 22]}
{"time": "2021-02-13 22:09:34.429587", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i] ) {} } return min; }", "n_tokens": 37, "n_pass": [258, 26, 23]}
{"time": "2021-02-13 22:09:35.779415", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i]) {} } return min; }", "n_tokens": 36, "n_pass": [264, 27, 24]}
{"time": "2021-02-13 22:09:37.139799", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i]){} } return min; }", "n_tokens": 35, "n_pass": [266, 28, 25]}
{"time": "2021-02-13 22:09:38.464404", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i]){}} return min; }", "n_tokens": 34, "n_pass": [269, 29, 26]}
{"time": "2021-02-13 22:09:39.808607", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i]){}}return min; }", "n_tokens": 33, "n_pass": [271, 30, 27]}
{"time": "2021-02-13 22:09:45.227068", "score": "0.64", "loss": "0.607", "code": "float min(float input){for (1;;){if(input[i]){}}return min;}", "n_tokens": 32, "n_pass": [276, 34, 28]}
{"time": "2021-02-13 22:09:47.357229", "score": "0.64", "loss": "0.607", "code": "float min(float input){for(1;;){if(input[i]){}}return min;}", "n_tokens": 31, "n_pass": [288, 35, 29]}

Minimal simplified code:
float min(float input){for(1;;){if(input[i]){}}return min;}

