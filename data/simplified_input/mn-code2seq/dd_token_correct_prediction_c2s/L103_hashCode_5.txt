
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-entitlements/src/main/java/com/sun/identity/entitlement/AttributeLookupCondition_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int code = super.hashCode(); if (key != null) { code = 31 * code + key.hashCode(); } if (value != null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }
predict, score, loss = hashCode, 0.9998946189880371, 0.0002339884522370994

Trace of simplified code(s):
{"time": "2021-02-13 05:29:24.063933", "score": "0.9999", "loss": "0.0002", "code": "@Override public int hashCode() { int code = super.hashCode(); if (key != null) { code = 31 * code + key.hashCode(); } if (value != null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 05:29:25.419052", "score": "0.9999", "loss": "0.0003", "code": "@Override public int hashCode() { int code = super.hashCode(); if (key !=  null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 103, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 05:29:27.505336", "score": "0.9969", "loss": "0.0078", "code": "@Override public int hashCode() { int code; if (key !=  null) { code = 31 * code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 95, "n_pass": [46, 3, 3]}
{"time": "2021-02-13 05:29:29.960529", "score": "0.997", "loss": "0.0078", "code": "@Override public int hashCode() { int code; if (key !=  null) { code =  code + value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 91, "n_pass": [85, 4, 4]}
{"time": "2021-02-13 05:29:31.307092", "score": "0.9984", "loss": "0.0041", "code": "@Override public int hashCode() { int code; if (key !=  null) { code =  value.hashCode(); } if (pConditionName != null) { code = 31 * code + pConditionName.hashCode(); } return code; }", "n_tokens": 87, "n_pass": [86, 5, 5]}
{"time": "2021-02-13 05:29:32.657416", "score": "0.9977", "loss": "0.0059", "code": "@Override public int hashCode() { int code; if (key !=  null) { code =  value.hashCode(); } if (pConditionName != null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 82, "n_pass": [93, 6, 6]}
{"time": "2021-02-13 05:29:36.660856", "score": "0.9928", "loss": "0.0171", "code": "@Override public int hashCode() {; if (key !=  null) { code =  value.hashCode(); } if (pConditionName != null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 78, "n_pass": [101, 9, 7]}
{"time": "2021-02-13 05:29:37.980625", "score": "0.9899", "loss": "0.0249", "code": "@Override public int hashCode() {; if (key !=  null) {  value.hashCode(); } if (pConditionName != null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 74, "n_pass": [106, 10, 8]}
{"time": "2021-02-13 05:29:42.621782", "score": "0.9368", "loss": "0.1536", "code": "@Override public int hashCode() {; if (key !=  null) {  value(); } if (pConditionName != null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 72, "n_pass": [159, 13, 9]}
{"time": "2021-02-13 05:29:43.945692", "score": "0.9369", "loss": "0.1496", "code": "@Override public int hashCode() {; if (key !=  null) {  value; } if (pConditionName != null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 70, "n_pass": [160, 14, 10]}
{"time": "2021-02-13 05:29:45.261015", "score": "0.9069", "loss": "0.2301", "code": "@Override public int hashCode() {; if (key !=  null) {  value; } if (pConditionName= null) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 68, "n_pass": [165, 15, 11]}
{"time": "2021-02-13 05:29:46.582222", "score": "0.9043", "loss": "0.2425", "code": "@Override public int hashCode() {; if (key !=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } return code; }", "n_tokens": 66, "n_pass": [166, 16, 12]}
{"time": "2021-02-13 05:29:50.585819", "score": "0.9925", "loss": "0.0226", "code": "@Override public int hashCode() {; if (key !=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 63, "n_pass": [176, 19, 13]}
{"time": "2021-02-13 05:29:51.903421", "score": "0.9448", "loss": "0.1906", "code": " public int hashCode() {; if (key !=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 61, "n_pass": [178, 20, 14]}
{"time": "2021-02-13 05:29:53.233827", "score": "0.9448", "loss": "0.1906", "code": " int hashCode() {; if (key !=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 59, "n_pass": [179, 21, 15]}
{"time": "2021-02-13 05:29:54.921922", "score": "0.9448", "loss": "0.1906", "code": " int hashCode() {if (key !=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 57, "n_pass": [184, 22, 16]}
{"time": "2021-02-13 05:29:56.234410", "score": "0.9393", "loss": "0.2601", "code": " int hashCode() {if (key=  null) {  value; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 55, "n_pass": [187, 23, 17]}
{"time": "2021-02-13 05:29:57.525090", "score": "0.7366", "loss": "1.4777", "code": " int hashCode() {if (key=  null) { ; } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 53, "n_pass": [192, 24, 18]}
{"time": "2021-02-13 05:29:58.833731", "score": "0.7366", "loss": "1.4777", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) { code = code + pConditionName.hashCode(); } ; }", "n_tokens": 51, "n_pass": [193, 25, 19]}
{"time": "2021-02-13 05:30:00.137126", "score": "0.6958", "loss": "1.7685", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) { code = + pConditionName.hashCode(); } ; }", "n_tokens": 49, "n_pass": [201, 26, 20]}
{"time": "2021-02-13 05:30:01.446387", "score": "0.9455", "loss": "0.2738", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) { code =pConditionName.hashCode(); } ; }", "n_tokens": 46, "n_pass": [202, 27, 21]}
{"time": "2021-02-13 05:30:03.129157", "score": "0.948", "loss": "0.3014", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) { codepConditionName.hashCode(); } ; }", "n_tokens": 44, "n_pass": [223, 28, 22]}
{"time": "2021-02-13 05:30:06.076766", "score": "0.9589", "loss": "0.2688", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) {pConditionName.hashCode(); } ; }", "n_tokens": 42, "n_pass": [243, 30, 23]}
{"time": "2021-02-13 05:30:13.020065", "score": "0.9589", "loss": "0.2688", "code": " int hashCode() {if (key=  null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 40, "n_pass": [307, 32, 24]}
{"time": "2021-02-13 05:30:14.303410", "score": "0.9589", "loss": "0.2688", "code": "int hashCode() {if (key=  null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 39, "n_pass": [309, 33, 25]}
{"time": "2021-02-13 05:30:16.316638", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if (key=  null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 38, "n_pass": [315, 34, 26]}
{"time": "2021-02-13 05:30:17.627142", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=  null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 37, "n_pass": [318, 35, 27]}
{"time": "2021-02-13 05:30:18.932153", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key= null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 36, "n_pass": [322, 36, 28]}
{"time": "2021-02-13 05:30:20.226605", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=null) { } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 35, "n_pass": [323, 37, 29]}
{"time": "2021-02-13 05:30:21.521161", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=null){ } if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 34, "n_pass": [326, 38, 30]}
{"time": "2021-02-13 05:30:22.842668", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=null){} if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 33, "n_pass": [328, 39, 31]}
{"time": "2021-02-13 05:30:24.142973", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=null){}if (pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 32, "n_pass": [330, 40, 32]}
{"time": "2021-02-13 05:30:25.455819", "score": "0.9589", "loss": "0.2688", "code": "int hashCode(){if(key=null){}if(pConditionNamenull) {pConditionName.hashCode(); } }", "n_tokens": 31, "n_pass": [332, 41, 33]}
{"time": "2021-02-13 05:30:26.751964", "score": "0.9099", "loss": "0.4474", "code": "int hashCode(){if(key=null){}if(null) {pConditionName.hashCode(); } }", "n_tokens": 30, "n_pass": [334, 42, 34]}
{"time": "2021-02-13 05:30:28.054575", "score": "0.9099", "loss": "0.4474", "code": "int hashCode(){if(key=null){}if(null){pConditionName.hashCode(); } }", "n_tokens": 29, "n_pass": [337, 43, 35]}
{"time": "2021-02-13 05:30:31.347615", "score": "0.9096", "loss": "0.4393", "code": "int hashCode(){if(keynull){}if(null){pConditionName.hashCode(); } }", "n_tokens": 28, "n_pass": [355, 45, 36]}
{"time": "2021-02-13 05:30:32.637166", "score": "0.8456", "loss": "0.7648", "code": "int hashCode(){if(key){}if(null){pConditionName.hashCode(); } }", "n_tokens": 27, "n_pass": [356, 46, 37]}
{"time": "2021-02-13 05:30:36.933368", "score": "0.8456", "loss": "0.7648", "code": "int hashCode(){if(key){}if(null){pConditionName.hashCode();} }", "n_tokens": 26, "n_pass": [389, 48, 38]}
{"time": "2021-02-13 05:30:38.223131", "score": "0.8456", "loss": "0.7648", "code": "int hashCode(){if(key){}if(null){pConditionName.hashCode();}}", "n_tokens": 25, "n_pass": [390, 49, 39]}

Minimal simplified code:
int hashCode(){if(key){}if(null){pConditionName.hashCode();}}

