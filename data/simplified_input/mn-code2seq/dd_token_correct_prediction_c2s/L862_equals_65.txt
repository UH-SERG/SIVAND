
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/a-student__BetterVectorDrawable/lib/src/main/java/com/bettervectordrawable/lib/graphics/Insets_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o; if (bottom != insets.bottom) return false; if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }
predict, score, loss = equals, 0.9993361830711365, 0.0007822090992704034

Trace of simplified code(s):
{"time": "2021-02-13 23:20:00.891189", "score": "0.9991", "loss": "0.0011", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o; if (bottom != insets.bottom) return false; if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 155, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:20:02.288131", "score": "0.9988", "loss": "0.0014", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Insets insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 136, "n_pass": [24, 2, 2]}
{"time": "2021-02-13 23:20:03.692065", "score": "0.9996", "loss": "0.0005", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return false; Insets insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 126, "n_pass": [56, 3, 3]}
{"time": "2021-02-13 23:20:05.099684", "score": "0.9996", "loss": "0.0005", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) return false; if (top != insets.top) return false; return true; }", "n_tokens": 121, "n_pass": [99, 4, 4]}
{"time": "2021-02-13 23:20:06.482214", "score": "0.9992", "loss": "0.0009", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top != insets.top) return false; return true; }", "n_tokens": 116, "n_pass": [108, 5, 5]}
{"time": "2021-02-13 23:20:07.853660", "score": "0.9985", "loss": "0.0018", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return false; return true; }", "n_tokens": 111, "n_pass": [110, 6, 6]}
{"time": "2021-02-13 23:20:09.237774", "score": "0.9978", "loss": "0.0025", "code": "@Override public boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 106, "n_pass": [112, 7, 7]}
{"time": "2021-02-13 23:20:10.585052", "score": "0.9944", "loss": "0.0068", "code": " boolean equals(Object o) { if (this == o) return true; if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 102, "n_pass": [114, 8, 8]}
{"time": "2021-02-13 23:20:11.924821", "score": "0.9873", "loss": "0.0171", "code": " boolean equals(Object o) { if (this == o) if (o() != o.getClass()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 97, "n_pass": [120, 9, 9]}
{"time": "2021-02-13 23:20:13.311291", "score": "0.988", "loss": "0.0158", "code": " boolean equals(Object o) { if (this == o) if (o() != o()) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 95, "n_pass": [188, 10, 10]}
{"time": "2021-02-13 23:20:14.655281", "score": "0.9868", "loss": "0.0175", "code": " boolean equals(Object o) { if (this == o) if (o() != o) return insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 93, "n_pass": [189, 11, 11]}
{"time": "2021-02-13 23:20:16.027570", "score": "0.99", "loss": "0.0132", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets = (Insets) o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 91, "n_pass": [191, 12, 12]}
{"time": "2021-02-13 23:20:17.383022", "score": "0.9807", "loss": "0.0267", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left) return false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 88, "n_pass": [194, 13, 13]}
{"time": "2021-02-13 23:20:18.753721", "score": "0.9531", "loss": "0.075", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)false; if (right != insets.right) if (top.top) return true; }", "n_tokens": 85, "n_pass": [200, 14, 14]}
{"time": "2021-02-13 23:20:20.112988", "score": "0.8403", "loss": "0.2976", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right) if (top.top) return true; }", "n_tokens": 82, "n_pass": [201, 15, 15]}
{"time": "2021-02-13 23:20:21.477236", "score": "0.8433", "loss": "0.2902", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right) if (top.top) ; }", "n_tokens": 79, "n_pass": [209, 16, 16]}
{"time": "2021-02-13 23:20:23.966783", "score": "0.9175", "loss": "0.134", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets.right)(top.top) ; }", "n_tokens": 76, "n_pass": [240, 17, 17]}
{"time": "2021-02-13 23:20:33.465005", "score": "0.9001", "loss": "0.1666", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insets)(top.top) ; }", "n_tokens": 74, "n_pass": [337, 18, 18]}
{"time": "2021-02-13 23:20:34.822397", "score": "0.8708", "loss": "0.2277", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop.top) ; }", "n_tokens": 72, "n_pass": [338, 19, 19]}
{"time": "2021-02-13 23:20:36.183406", "score": "0.8118", "loss": "0.3376", "code": " boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 70, "n_pass": [339, 20, 20]}
{"time": "2021-02-13 23:20:37.559050", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o) { if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 69, "n_pass": [343, 21, 21]}
{"time": "2021-02-13 23:20:39.650258", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){ if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 68, "n_pass": [352, 22, 22]}
{"time": "2021-02-13 23:20:41.013520", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if (this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 67, "n_pass": [354, 23, 23]}
{"time": "2021-02-13 23:20:42.372811", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this == o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 66, "n_pass": [356, 24, 24]}
{"time": "2021-02-13 23:20:43.706250", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this== o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 65, "n_pass": [359, 25, 25]}
{"time": "2021-02-13 23:20:45.787277", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o) if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 64, "n_pass": [362, 26, 26]}
{"time": "2021-02-13 23:20:47.125435", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if (o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 63, "n_pass": [365, 27, 27]}
{"time": "2021-02-13 23:20:48.453557", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o() != o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 62, "n_pass": [367, 28, 28]}
{"time": "2021-02-13 23:20:49.785002", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!= o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 61, "n_pass": [372, 29, 29]}
{"time": "2021-02-13 23:20:51.481240", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o) insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 60, "n_pass": [375, 30, 30]}
{"time": "2021-02-13 23:20:52.808611", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets =  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 59, "n_pass": [378, 31, 31]}
{"time": "2021-02-13 23:20:54.136249", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=  o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 58, "n_pass": [380, 32, 32]}
{"time": "2021-02-13 23:20:55.468380", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets= o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 57, "n_pass": [382, 33, 33]}
{"time": "2021-02-13 23:20:56.804868", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if (left != insets.left)if (right != insetstop) ; }", "n_tokens": 56, "n_pass": [383, 34, 34]}
{"time": "2021-02-13 23:20:58.151130", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left != insets.left)if (right != insetstop) ; }", "n_tokens": 55, "n_pass": [387, 35, 35]}
{"time": "2021-02-13 23:20:59.513044", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left!= insets.left)if (right != insetstop) ; }", "n_tokens": 54, "n_pass": [390, 36, 36]}
{"time": "2021-02-13 23:21:02.234788", "score": "0.8118", "loss": "0.3376", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left!=insets.left)if (right != insetstop) ; }", "n_tokens": 53, "n_pass": [393, 38, 37]}
{"time": "2021-02-13 23:21:03.582928", "score": "0.7374", "loss": "0.467", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left!=insets)if (right != insetstop) ; }", "n_tokens": 51, "n_pass": [395, 39, 38]}
{"time": "2021-02-13 23:21:04.937209", "score": "0.8348", "loss": "0.2822", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets=o;if(left!=insets)if (right !=top) ; }", "n_tokens": 49, "n_pass": [400, 40, 39]}
{"time": "2021-02-13 23:21:08.087360", "score": "0.8994", "loss": "0.1858", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insetso;if(left!=insets)if (right !=top) ; }", "n_tokens": 48, "n_pass": [430, 41, 40]}
{"time": "2021-02-13 23:21:09.402156", "score": "0.9334", "loss": "0.1056", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left!=insets)if (right !=top) ; }", "n_tokens": 47, "n_pass": [431, 42, 41]}
{"time": "2021-02-13 23:21:10.734254", "score": "0.8217", "loss": "0.3294", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left=insets)if (right !=top) ; }", "n_tokens": 46, "n_pass": [436, 43, 42]}
{"time": "2021-02-13 23:21:12.076839", "score": "0.7833", "loss": "0.4758", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(leftinsets)if (right !=top) ; }", "n_tokens": 45, "n_pass": [437, 44, 43]}
{"time": "2021-02-13 23:21:13.370582", "score": "0.8419", "loss": "0.2942", "code": "boolean equals(Object o){if(this==o)if(o()!=o)insets;if(left)if (right !=top) ; }", "n_tokens": 44, "n_pass": [438, 45, 44]}
{"time": "2021-02-13 23:21:16.563302", "score": "0.8519", "loss": "0.2896", "code": "boolean equals(Object o){if(this==o)if(o()!=o);if(left)if (right !=top) ; }", "n_tokens": 43, "n_pass": [471, 46, 45]}
{"time": "2021-02-13 23:21:17.914604", "score": "0.8503", "loss": "0.2894", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if (right !=top) ; }", "n_tokens": 42, "n_pass": [472, 47, 46]}
{"time": "2021-02-13 23:21:22.754677", "score": "0.8503", "loss": "0.2894", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right !=top) ; }", "n_tokens": 41, "n_pass": [522, 48, 47]}
{"time": "2021-02-13 23:21:24.108934", "score": "0.8503", "loss": "0.2894", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right!=top) ; }", "n_tokens": 40, "n_pass": [524, 49, 48]}
{"time": "2021-02-13 23:21:25.429211", "score": "0.5698", "loss": "0.9595", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right=top) ; }", "n_tokens": 39, "n_pass": [525, 50, 49]}
{"time": "2021-02-13 23:21:28.216436", "score": "0.5698", "loss": "0.9595", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right=top); }", "n_tokens": 38, "n_pass": [529, 52, 50]}
{"time": "2021-02-13 23:21:29.562702", "score": "0.5698", "loss": "0.9595", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)if(right=top);}", "n_tokens": 37, "n_pass": [531, 53, 51]}
{"time": "2021-02-13 23:21:32.701643", "score": "0.2635", "loss": "1.952", "code": "boolean equals(Object o){if(this==o)if(o()!=o)if(left)(right=top);}", "n_tokens": 36, "n_pass": [562, 54, 52]}

Minimal simplified code:
boolean equals(Object o){if(this==o)if(o()!=o)if(left)(right=top);}

