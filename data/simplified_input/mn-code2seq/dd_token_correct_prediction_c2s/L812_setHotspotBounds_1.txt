
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ozodrukh__RippleDrawable/app/src/main/java/codetail/graphics/drawables/LayerDrawable_setHotspotBounds.java
method_name = setHotspotBounds
method_body = @Override public void setHotspotBounds(int left, int top, int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }
predict, score, loss = setHotspotBounds, 0.9500460624694824, 0.23522347211837769

Trace of simplified code(s):
{"time": "2021-02-13 22:31:07.003592", "score": "0.9342", "loss": "0.3196", "code": "@Override public void setHotspotBounds(int left, int top, int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 172, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 22:31:08.607640", "score": "0.904", "loss": "0.4357", "code": "@Override public void setHotspotBounds(int right, int bottom) { final ChildDrawable[] array = mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 162, "n_pass": [45, 2, 2]}
{"time": "2021-02-13 22:31:10.236609", "score": "0.9198", "loss": "0.3801", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawable, left, top, right, bottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 152, "n_pass": [47, 3, 3]}
{"time": "2021-02-13 22:31:11.661617", "score": "0.869", "loss": "0.5686", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(array[i].mDrawablebottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 141, "n_pass": [53, 4, 4]}
{"time": "2021-02-13 22:31:13.239351", "score": "0.9457", "loss": "0.2666", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { mHotspotBounds = new Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 136, "n_pass": [93, 5, 5]}
{"time": "2021-02-13 22:31:14.806958", "score": "0.9445", "loss": "0.2998", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, top, right, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 130, "n_pass": [97, 6, 6]}
{"time": "2021-02-13 22:31:16.234376", "score": "0.9657", "loss": "0.1767", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top, right, bottom); } }", "n_tokens": 124, "n_pass": [99, 7, 7]}
{"time": "2021-02-13 22:31:17.617619", "score": "0.9677", "loss": "0.161", "code": "@Override public void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 118, "n_pass": [103, 8, 8]}
{"time": "2021-02-13 22:31:19.094661", "score": "0.9767", "loss": "0.1662", "code": "void setHotspotBounds(int right, int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 113, "n_pass": [105, 9, 9]}
{"time": "2021-02-13 22:31:20.538865", "score": "0.9611", "loss": "0.3119", "code": "void setHotspotBounds(int bottom) { mLayerState.mChildren; final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 108, "n_pass": [107, 10, 10]}
{"time": "2021-02-13 22:31:22.148375", "score": "0.9734", "loss": "0.1986", "code": "void setHotspotBounds(int bottom) { final int N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 103, "n_pass": [109, 11, 11]}
{"time": "2021-02-13 22:31:23.547266", "score": "0.974", "loss": "0.1681", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0; i < N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 98, "n_pass": [110, 12, 12]}
{"time": "2021-02-13 22:31:25.260045", "score": "0.9756", "loss": "0.1633", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; i++) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 93, "n_pass": [115, 13, 13]}
{"time": "2021-02-13 22:31:26.750753", "score": "0.9804", "loss": "0.1289", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) { DrawableCompat.setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 90, "n_pass": [169, 14, 14]}
{"time": "2021-02-13 22:31:28.170411", "score": "0.9494", "loss": "0.308", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(left, bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 87, "n_pass": [171, 15, 15]}
{"time": "2021-02-13 22:31:29.580101", "score": "0.9425", "loss": "0.3322", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else { mHotspotBounds.set(left, top); } }", "n_tokens": 84, "n_pass": [180, 16, 16]}
{"time": "2021-02-13 22:31:30.987769", "score": "0.8196", "loss": "1.0597", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left, top); } }", "n_tokens": 81, "n_pass": [184, 17, 17]}
{"time": "2021-02-13 22:31:32.359231", "score": "0.8071", "loss": "1.0894", "code": "void setHotspotBounds(int bottom) {N = mLayerState.mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 78, "n_pass": [186, 18, 18]}
{"time": "2021-02-13 22:31:34.128407", "score": "0.8365", "loss": "0.8682", "code": "void setHotspotBounds(int bottom) {N = mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 76, "n_pass": [196, 19, 19]}
{"time": "2021-02-13 22:31:36.124722", "score": "0.9869", "loss": "0.0946", "code": "void setHotspotBounds(int bottom) {N mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 74, "n_pass": [224, 20, 20]}
{"time": "2021-02-13 22:31:37.893141", "score": "0.946", "loss": "0.3469", "code": "void setHotspotBounds(int bottom) {mNum; for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 72, "n_pass": [251, 21, 21]}
{"time": "2021-02-13 22:31:39.541071", "score": "0.985", "loss": "0.0999", "code": "void setHotspotBounds(int bottom) { for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 70, "n_pass": [252, 22, 22]}
{"time": "2021-02-13 22:31:45.905825", "score": "0.985", "loss": "0.0999", "code": "void setHotspotBounds(int bottom) {for (int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 69, "n_pass": [328, 23, 23]}
{"time": "2021-02-13 22:31:47.304027", "score": "0.985", "loss": "0.0999", "code": "void setHotspotBounds(int bottom) {for(int i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 68, "n_pass": [330, 24, 24]}
{"time": "2021-02-13 22:31:48.879397", "score": "0.961", "loss": "0.2265", "code": "void setHotspotBounds(int bottom) {for( i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 67, "n_pass": [332, 25, 25]}
{"time": "2021-02-13 22:31:50.379912", "score": "0.961", "loss": "0.2265", "code": "void setHotspotBounds(int bottom) {for(i = 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 66, "n_pass": [333, 26, 26]}
{"time": "2021-02-13 22:31:51.767647", "score": "0.961", "loss": "0.2265", "code": "void setHotspotBounds(int bottom) {for(i= 0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 65, "n_pass": [335, 27, 27]}
{"time": "2021-02-13 22:31:53.179679", "score": "0.961", "loss": "0.2265", "code": "void setHotspotBounds(int bottom) {for(i=0;N; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 64, "n_pass": [337, 28, 28]}
{"time": "2021-02-13 22:31:54.564489", "score": "0.9605", "loss": "0.2147", "code": "void setHotspotBounds(int bottom) {for(i=0;; ) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 63, "n_pass": [340, 29, 29]}
{"time": "2021-02-13 22:31:55.944722", "score": "0.9605", "loss": "0.2147", "code": "void setHotspotBounds(int bottom) {for(i=0;;) {setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 62, "n_pass": [342, 30, 30]}
{"time": "2021-02-13 22:31:57.326497", "score": "0.9605", "loss": "0.2147", "code": "void setHotspotBounds(int bottom) {for(i=0;;){setHotspotBounds(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 61, "n_pass": [344, 31, 31]}
{"time": "2021-02-13 22:31:58.698651", "score": "0.6868", "loss": "1.9216", "code": "void setHotspotBounds(int bottom) {for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } else {set(left); } }", "n_tokens": 60, "n_pass": [346, 32, 32]}
{"time": "2021-02-13 22:32:00.143206", "score": "0.7506", "loss": "1.4939", "code": "void setHotspotBounds(int bottom) {for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 58, "n_pass": [362, 33, 33]}
{"time": "2021-02-13 22:32:02.251019", "score": "0.7506", "loss": "1.4939", "code": "void setHotspotBounds(int bottom){for(i=0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 57, "n_pass": [376, 34, 34]}
{"time": "2021-02-13 22:32:03.597102", "score": "0.795", "loss": "1.1721", "code": "void setHotspotBounds(int bottom){for(i0;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 56, "n_pass": [381, 35, 35]}
{"time": "2021-02-13 22:32:05.014624", "score": "0.795", "loss": "1.1721", "code": "void setHotspotBounds(int bottom){for(i;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 55, "n_pass": [382, 36, 36]}
{"time": "2021-02-13 22:32:07.165864", "score": "0.6612", "loss": "1.9378", "code": "void setHotspotBounds(int bottom){for(;;){(arraybottom); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 54, "n_pass": [418, 37, 37]}
{"time": "2021-02-13 22:32:15.761046", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array); } if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 53, "n_pass": [493, 39, 38]}
{"time": "2021-02-13 22:32:17.121810", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);} if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 52, "n_pass": [496, 40, 39]}
{"time": "2021-02-13 22:32:18.492293", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if (mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 51, "n_pass": [498, 41, 40]}
{"time": "2021-02-13 22:32:19.851198", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds == null) { Rect(bottom); } {set(left); } }", "n_tokens": 50, "n_pass": [500, 42, 41]}
{"time": "2021-02-13 22:32:21.224437", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds== null) { Rect(bottom); } {set(left); } }", "n_tokens": 49, "n_pass": [503, 43, 42]}
{"time": "2021-02-13 22:32:25.716928", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null) { Rect(bottom); } {set(left); } }", "n_tokens": 48, "n_pass": [506, 46, 43]}
{"time": "2021-02-13 22:32:27.160696", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){ Rect(bottom); } {set(left); } }", "n_tokens": 47, "n_pass": [509, 47, 44]}
{"time": "2021-02-13 22:32:28.581444", "score": "0.6018", "loss": "2.3731", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect(bottom); } {set(left); } }", "n_tokens": 46, "n_pass": [511, 48, 45]}
{"time": "2021-02-13 22:32:31.282793", "score": "0.6806", "loss": "1.896", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect(); } {set(left); } }", "n_tokens": 45, "n_pass": [514, 50, 46]}
{"time": "2021-02-13 22:32:32.637886", "score": "0.6806", "loss": "1.896", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();} {set(left); } }", "n_tokens": 44, "n_pass": [517, 51, 47]}
{"time": "2021-02-13 22:32:34.012152", "score": "0.6806", "loss": "1.896", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();}{set(left); } }", "n_tokens": 43, "n_pass": [519, 52, 48]}
{"time": "2021-02-13 22:32:36.756972", "score": "0.7213", "loss": "1.5072", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();}{set(); } }", "n_tokens": 42, "n_pass": [523, 54, 49]}
{"time": "2021-02-13 22:32:38.152669", "score": "0.7213", "loss": "1.5072", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();}{set();} }", "n_tokens": 41, "n_pass": [526, 55, 50]}
{"time": "2021-02-13 22:32:39.510999", "score": "0.7213", "loss": "1.5072", "code": "void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();}{set();}}", "n_tokens": 40, "n_pass": [528, 56, 51]}

Minimal simplified code:
void setHotspotBounds(int bottom){for(;;){(array);}if(mHotspotBounds==null){Rect();}{set();}}

