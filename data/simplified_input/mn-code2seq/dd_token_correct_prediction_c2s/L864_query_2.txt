
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/udacity__ud851-Sunshine/S09.03-Solution-ContentProviderDelete/app/src/main/java/com/example/android/sunshine/data/WeatherProvider_query.java
method_name = query
method_body = @Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + " = ? ", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException("Unknown uri: " + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }
predict, score, loss = query, 0.6041590571403503, 0.9227842092514038

Trace of simplified code(s):
{"time": "2021-02-16 20:46:17.075644", "score": "0.5471", "loss": "1.0368", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry.COLUMN_DATE + \" = ? \", selectionArguments, null, null, sortOrder); break; } case CODE_WEATHER: { cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 270, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 20:46:18.425132", "score": "0.7304", "loss": "0.6305", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection, WeatherContract.WeatherEntry, selectionArgs, null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 202, "n_pass": [10, 2, 2]}
{"time": "2021-02-16 20:46:19.802590", "score": "0.7317", "loss": "0.5746", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext().getContentResolver(), uri); return cursor; }", "n_tokens": 193, "n_pass": [74, 3, 3]}
{"time": "2021-02-16 20:46:21.126160", "score": "0.8525", "loss": "0.3065", "code": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 184, "n_pass": [80, 4, 4]}
{"time": "2021-02-16 20:46:22.459806", "score": "0.8021", "loss": "0.4057", "code": "@Override public Cursor query(@NonNull Uri uri,String selection, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 176, "n_pass": [84, 5, 5]}
{"time": "2021-02-16 20:46:23.828136", "score": "0.7632", "loss": "0.4691", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_WEATHER_WITH_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 172, "n_pass": [148, 6, 6]}
{"time": "2021-02-16 20:46:25.153365", "score": "0.6545", "loss": "0.7075", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri.getLastPathSegment(); String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 168, "n_pass": [157, 7, 7]}
{"time": "2021-02-16 20:46:26.484723", "score": "0.6916", "loss": "0.6726", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor = mOpenHelper.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 164, "n_pass": [161, 8, 8]}
{"time": "2021-02-16 20:46:27.821868", "score": "0.8388", "loss": "0.39", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.getReadableDatabase().query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 160, "n_pass": [168, 9, 9]}
{"time": "2021-02-16 20:46:29.153479", "score": "0.6387", "loss": "0.8038", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract.WeatherEntry.TABLE_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 156, "n_pass": [169, 10, 10]}
{"time": "2021-02-16 20:46:30.568143", "score": "0.7978", "loss": "0.401", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, projection,null, null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 152, "n_pass": [171, 11, 11]}
{"time": "2021-02-16 20:46:33.186440", "score": "0.5033", "loss": "1.054", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME,  null, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 148, "n_pass": [173, 13, 12]}
{"time": "2021-02-16 20:46:34.486925", "score": "0.498", "loss": "0.9994", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, sortOrder); break; } default: throw new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 144, "n_pass": [174, 14, 13]}
{"time": "2021-02-16 20:46:35.794140", "score": "0.8474", "loss": "0.2855", "code": "@Override public Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 139, "n_pass": [177, 15, 14]}
{"time": "2021-02-16 20:46:37.119607", "score": "0.5022", "loss": "1.1557", "code": " Cursor query(@NonNull Uri uri, String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 135, "n_pass": [185, 16, 15]}
{"time": "2021-02-16 20:46:38.415604", "score": "0.6673", "loss": "0.641", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString = uri; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 131, "n_pass": [188, 17, 16]}
{"time": "2021-02-16 20:46:39.719991", "score": "0.6516", "loss": "0.73", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContract_NAME, sortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 127, "n_pass": [200, 18, 17]}
{"time": "2021-02-16 20:46:41.021430", "score": "0.2484", "loss": "1.9161", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: { String normalizedUtcDateString; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 123, "n_pass": [208, 19, 18]}
{"time": "2021-02-16 20:46:42.352156", "score": "0.3432", "loss": "1.5816", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {; String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 119, "n_pass": [230, 20, 19]}
{"time": "2021-02-16 20:46:44.650453", "score": "0.2481", "loss": "1.9517", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { normalizedUtcDateString }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 117, "n_pass": [315, 21, 20]}
{"time": "2021-02-16 20:46:45.979443", "score": "0.3978", "loss": "1.4426", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder); break; } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 115, "n_pass": [323, 22, 21]}
{"time": "2021-02-16 20:46:48.566237", "score": "0.3503", "loss": "1.6497", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  } new UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 113, "n_pass": [330, 24, 22]}
{"time": "2021-02-16 20:46:49.883332", "score": "0.4764", "loss": "1.268", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  } UnsupportedOperationException(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 111, "n_pass": [332, 25, 23]}
{"time": "2021-02-16 20:46:51.167163", "score": "0.5169", "loss": "1.1094", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\"Unknown uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 109, "n_pass": [333, 26, 24]}
{"time": "2021-02-16 20:46:52.431764", "score": "0.4983", "loss": "1.184", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\"uri: \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 107, "n_pass": [335, 27, 25]}
{"time": "2021-02-16 20:46:53.735499", "score": "0.4647", "loss": "1.2646", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); } cursor.setNotificationUri(getContext); return cursor; }", "n_tokens": 105, "n_pass": [336, 28, 26]}
{"time": "2021-02-16 20:46:55.053323", "score": "0.6271", "loss": "0.8354", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); return cursor; }", "n_tokens": 102, "n_pass": [341, 29, 27]}
{"time": "2021-02-16 20:46:56.354939", "score": "0.6883", "loss": "0.9487", "code": " Cursor query(@NonNull  String[] selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 99, "n_pass": [344, 30, 28]}
{"time": "2021-02-16 20:46:58.363252", "score": "0.6349", "loss": "1.1972", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { Cursor cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 97, "n_pass": [351, 31, 29]}
{"time": "2021-02-16 20:46:59.659457", "score": "0.6881", "loss": "1.0102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) { cursor; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 95, "n_pass": [357, 32, 30]}
{"time": "2021-02-16 20:47:00.940561", "score": "0.591", "loss": "1.2233", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {; switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 93, "n_pass": [358, 33, 31]}
{"time": "2021-02-16 20:47:02.216988", "score": "0.591", "loss": "1.2233", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(sUriMatcher.match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 91, "n_pass": [359, 34, 32]}
{"time": "2021-02-16 20:47:03.499650", "score": "0.5426", "loss": "1.51", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case CODE_DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 89, "n_pass": [361, 35, 33]}
{"time": "2021-02-16 20:47:04.788728", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE: {String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 87, "n_pass": [367, 36, 34]}
{"time": "2021-02-16 20:47:17.407407", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[] selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 86, "n_pass": [493, 38, 35]}
{"time": "2021-02-16 20:47:18.705554", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments = new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 85, "n_pass": [497, 39, 36]}
{"time": "2021-02-16 20:47:19.985239", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments= new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 84, "n_pass": [499, 40, 37]}
{"time": "2021-02-16 20:47:21.264103", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[] { }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 83, "n_pass": [501, 41, 38]}
{"time": "2021-02-16 20:47:22.573071", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{ }; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 82, "n_pass": [507, 42, 39]}
{"time": "2021-02-16 20:47:23.890519", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{}; cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 81, "n_pass": [509, 43, 40]}
{"time": "2021-02-16 20:47:25.194463", "score": "0.5338", "loss": "1.441", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(WeatherContractsortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 80, "n_pass": [512, 44, 41]}
{"time": "2021-02-16 20:47:27.772518", "score": "0.4928", "loss": "1.2515", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);  }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 79, "n_pass": [517, 46, 42]}
{"time": "2021-02-16 20:47:30.405228", "score": "0.4928", "loss": "1.2515", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder); }(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 78, "n_pass": [521, 48, 43]}
{"time": "2021-02-16 20:47:31.678714", "score": "0.4928", "loss": "1.2515", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\" \" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 77, "n_pass": [522, 49, 44]}
{"time": "2021-02-16 20:47:32.972366", "score": "0.5429", "loss": "1.1102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\" + uri); }setNotificationUri(getContext); ; }", "n_tokens": 76, "n_pass": [526, 50, 45]}
{"time": "2021-02-16 20:47:34.243444", "score": "0.5429", "loss": "1.1102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+ uri); }setNotificationUri(getContext); ; }", "n_tokens": 75, "n_pass": [528, 51, 46]}
{"time": "2021-02-16 20:47:35.525334", "score": "0.5429", "loss": "1.1102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri); }setNotificationUri(getContext); ; }", "n_tokens": 74, "n_pass": [530, 52, 47]}
{"time": "2021-02-16 20:47:36.830761", "score": "0.5429", "loss": "1.1102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); ; }", "n_tokens": 73, "n_pass": [534, 53, 48]}
{"time": "2021-02-16 20:47:38.138985", "score": "0.5429", "loss": "1.1102", "code": " Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 71, "n_pass": [538, 54, 49]}
{"time": "2021-02-16 20:47:39.435693", "score": "0.5429", "loss": "1.1102", "code": "Cursor query(@NonNull  String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 70, "n_pass": [540, 55, 50]}
{"time": "2021-02-16 20:47:41.781720", "score": "0.5429", "loss": "1.1102", "code": "Cursor query(@NonNull String selectionArgs, String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 69, "n_pass": [547, 56, 51]}
{"time": "2021-02-16 20:47:43.081037", "score": "0.5429", "loss": "1.1102", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder) {switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 68, "n_pass": [553, 57, 52]}
{"time": "2021-02-16 20:47:44.393180", "score": "0.5429", "loss": "1.1102", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch(match(uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 67, "n_pass": [558, 58, 53]}
{"time": "2021-02-16 20:47:45.691190", "score": "0.4978", "loss": "1.2056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)) { case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 66, "n_pass": [562, 59, 54]}
{"time": "2021-02-16 20:47:46.971964", "score": "0.4978", "loss": "1.2056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){ case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 65, "n_pass": [567, 60, 55]}
{"time": "2021-02-16 20:47:48.257543", "score": "0.4978", "loss": "1.2056", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}setNotificationUri(getContext); }", "n_tokens": 64, "n_pass": [569, 61, 56]}
{"time": "2021-02-16 20:47:53.882649", "score": "0.5113", "loss": "1.1512", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}(getContext); }", "n_tokens": 63, "n_pass": [639, 64, 57]}
{"time": "2021-02-16 20:47:55.183430", "score": "0.5113", "loss": "1.1512", "code": "Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(\"\"+uri);}(getContext);}", "n_tokens": 62, "n_pass": [644, 65, 58]}

Minimal simplified code:
Cursor query(@NonNull String selectionArgs,String sortOrder){switch((uri)){case DATE:{String[]selectionArguments=new String[]{};cursor.query(sortOrder);}(""+uri);}(getContext);}

