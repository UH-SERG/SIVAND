
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/AndroidAlliance__EdgeEffectOverride/EdgeEffectOverride/src/main/java/uk/co/androidalliance/edgeeffectoverride/ContextWrapperEdgeEffect_getDrawable.java
method_name = getDrawable
method_body = @Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } else return super.getDrawable(resId); if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }
predict, score, loss = getDrawable, 0.9969491958618164, 0.009555299766361713

Trace of simplified code(s):
{"time": "2021-02-13 18:51:35.092881", "score": "0.9967", "loss": "0.0102", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } else return super.getDrawable(resId); if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 189, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 18:51:37.881219", "score": "0.7661", "loss": "1.0447", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 177, "n_pass": [56, 3, 2]}
{"time": "2021-02-13 18:51:39.272964", "score": "0.8946", "loss": "0.6653", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R.drawable.overscroll_glow); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 165, "n_pass": [68, 4, 3]}
{"time": "2021-02-13 18:51:40.657074", "score": "0.9078", "loss": "0.4344", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColor, PorterDuff.Mode.MULTIPLY); } return ret; }", "n_tokens": 159, "n_pass": [112, 5, 4]}
{"time": "2021-02-13 18:51:42.036151", "score": "0.8342", "loss": "0.7606", "code": "@Override public Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 153, "n_pass": [118, 6, 5]}
{"time": "2021-02-13 18:51:43.397638", "score": "0.7732", "loss": "1.3184", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { Drawable ret = null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 148, "n_pass": [121, 7, 6]}
{"time": "2021-02-13 18:51:44.747087", "score": "0.7695", "loss": "1.1791", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext().getResources().getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 142, "n_pass": [125, 8, 7]}
{"time": "2021-02-13 18:51:46.099201", "score": "0.814", "loss": "1.0287", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge); ret = mEdgeDrawable; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 136, "n_pass": [131, 9, 8]}
{"time": "2021-02-13 18:51:47.474713", "score": "0.7862", "loss": "1.1982", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId == this.overscroll_glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 130, "n_pass": [134, 10, 9]}
{"time": "2021-02-13 18:51:48.818187", "score": "0.6907", "loss": "1.596", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawable().getDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 124, "n_pass": [137, 11, 10]}
{"time": "2021-02-13 18:51:50.302537", "score": "0.6157", "loss": "2.1918", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R); ret = mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 121, "n_pass": [203, 12, 11]}
{"time": "2021-02-13 18:51:51.645407", "score": "0.6238", "loss": "2.2643", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  mGlowDrawable; } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 118, "n_pass": [205, 13, 12]}
{"time": "2021-02-13 18:51:53.015094", "score": "0.6265", "loss": "2.2093", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) { ret.setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 115, "n_pass": [206, 14, 13]}
{"time": "2021-02-13 18:51:54.366435", "score": "0.5898", "loss": "2.5654", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { null; if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 112, "n_pass": [212, 15, 14]}
{"time": "2021-02-13 18:51:58.747900", "score": "0.6412", "loss": "2.0821", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable = ContextWrapperEdgeEffect.this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 109, "n_pass": [224, 18, 15]}
{"time": "2021-02-13 18:52:02.788022", "score": "0.639", "loss": "2.1016", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable =this.getBaseContext.getDrawable(R.drawable.overscroll_edge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 106, "n_pass": [232, 21, 16]}
{"time": "2021-02-13 18:52:04.144582", "score": "0.7592", "loss": "1.2698", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable =this.getBaseContext.getDrawable(R.drawableedge);; } else if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 103, "n_pass": [236, 22, 17]}
{"time": "2021-02-13 18:52:05.483272", "score": "0.7507", "loss": "1.2269", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable =this.getBaseContext.getDrawable(R.drawableedge);; }if (resId =glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 100, "n_pass": [239, 23, 18]}
{"time": "2021-02-13 18:52:06.814483", "score": "0.7882", "loss": "1.1124", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == this.overscroll_edge) { mEdgeDrawable =this.getBaseContext.getDrawable(R.drawableedge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 97, "n_pass": [241, 24, 19]}
{"time": "2021-02-13 18:52:11.215126", "score": "0.7297", "loss": "1.2286", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == _edge) { mEdgeDrawable =this.getBaseContext.getDrawable(R.drawableedge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 94, "n_pass": [265, 27, 20]}
{"time": "2021-02-13 18:52:12.550675", "score": "0.5861", "loss": "2.233", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(R.drawableedge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 91, "n_pass": [268, 28, 21]}
{"time": "2021-02-13 18:52:13.881420", "score": "0.7129", "loss": "1.2796", "code": "Drawable getDrawable(int resId) throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 88, "n_pass": [271, 29, 22]}
{"time": "2021-02-13 18:52:16.935415", "score": "0.5878", "loss": "2.1537", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } return ret; }", "n_tokens": 85, "n_pass": [291, 31, 23]}
{"time": "2021-02-13 18:52:18.283135", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } ; }", "n_tokens": 82, "n_pass": [317, 32, 24]}
{"time": "2021-02-13 18:52:24.320756", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable() throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 80, "n_pass": [402, 33, 25]}
{"time": "2021-02-13 18:52:26.714367", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException { if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 79, "n_pass": [409, 34, 26]}
{"time": "2021-02-13 18:52:29.370108", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{ if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 78, "n_pass": [415, 36, 27]}
{"time": "2021-02-13 18:52:30.701821", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if (resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 77, "n_pass": [417, 37, 28]}
{"time": "2021-02-13 18:52:32.044493", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId == _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 76, "n_pass": [419, 38, 29]}
{"time": "2021-02-13 18:52:33.367724", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId== _edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 75, "n_pass": [422, 39, 30]}
{"time": "2021-02-13 18:52:37.393576", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==_edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 74, "n_pass": [425, 42, 31]}
{"time": "2021-02-13 18:52:38.715141", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge) { this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 73, "n_pass": [426, 43, 32]}
{"time": "2021-02-13 18:52:40.039010", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){ this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 72, "n_pass": [429, 44, 33]}
{"time": "2021-02-13 18:52:41.365042", "score": "0.1808", "loss": "5.3826", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getBaseContext.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 71, "n_pass": [431, 45, 34]}
{"time": "2021-02-13 18:52:44.027351", "score": "0.3867", "loss": "3.5274", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { mGlowDrawablegetDrawable(R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 69, "n_pass": [434, 47, 35]}
{"time": "2021-02-13 18:52:45.376572", "score": "0.5101", "loss": "2.5157", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);  } if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 67, "n_pass": [443, 48, 36]}
{"time": "2021-02-13 18:52:46.724949", "score": "0.5101", "loss": "2.5157", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (ret != null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 65, "n_pass": [446, 49, 37]}
{"time": "2021-02-13 18:52:48.046741", "score": "0.4691", "loss": "2.6665", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (ret= null) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 63, "n_pass": [450, 50, 38]}
{"time": "2021-02-13 18:52:49.355052", "score": "0.4814", "loss": "2.7501", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(mColorMULTIPLY); } }", "n_tokens": 61, "n_pass": [451, 51, 39]}
{"time": "2021-02-13 18:52:50.714598", "score": "0.6325", "loss": "1.6973", "code": "Drawable getDrawable()throws Resources.NotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 59, "n_pass": [455, 52, 40]}
{"time": "2021-02-13 18:52:53.117057", "score": "0.5662", "loss": "2.1095", "code": "Drawable getDrawable()throws ResourcesNotFoundException{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 58, "n_pass": [467, 53, 41]}
{"time": "2021-02-13 18:52:54.442081", "score": "0.6128", "loss": "1.754", "code": "Drawable getDrawable()throws Resources{if(resId==edge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 57, "n_pass": [468, 54, 42]}
{"time": "2021-02-13 18:52:55.754798", "score": "0.4661", "loss": "2.5478", "code": "Drawable getDrawable()throws Resources{if(resId=edge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 56, "n_pass": [473, 55, 43]}
{"time": "2021-02-13 18:52:57.066443", "score": "0.6431", "loss": "1.5177", "code": "Drawable getDrawable()throws Resources{if(resIdedge){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 55, "n_pass": [474, 56, 44]}
{"time": "2021-02-13 18:52:58.384261", "score": "0.6519", "loss": "1.4464", "code": "Drawable getDrawable()throws Resources{if(resId){this.getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 54, "n_pass": [475, 57, 45]}
{"time": "2021-02-13 18:52:59.721245", "score": "0.6046", "loss": "1.8875", "code": "Drawable getDrawable()throws Resources{if(resId){thisgetDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 53, "n_pass": [479, 58, 46]}
{"time": "2021-02-13 18:53:02.121785", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if (glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 52, "n_pass": [513, 59, 47]}
{"time": "2021-02-13 18:53:08.865241", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow) { (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 51, "n_pass": [586, 60, 48]}
{"time": "2021-02-13 18:53:10.177389", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){ (R);} if (retnull) {setColorFilter(); } }", "n_tokens": 50, "n_pass": [590, 61, 49]}
{"time": "2021-02-13 18:53:11.486527", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);} if (retnull) {setColorFilter(); } }", "n_tokens": 49, "n_pass": [592, 62, 50]}
{"time": "2021-02-13 18:53:12.819544", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if (retnull) {setColorFilter(); } }", "n_tokens": 48, "n_pass": [598, 63, 51]}
{"time": "2021-02-13 18:53:14.136687", "score": "0.7887", "loss": "0.8365", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if(retnull) {setColorFilter(); } }", "n_tokens": 47, "n_pass": [600, 64, 52]}
{"time": "2021-02-13 18:53:15.471189", "score": "0.6694", "loss": "1.3802", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if(null) {setColorFilter(); } }", "n_tokens": 46, "n_pass": [602, 65, 53]}
{"time": "2021-02-13 18:53:16.799577", "score": "0.6694", "loss": "1.3802", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if(null){setColorFilter(); } }", "n_tokens": 45, "n_pass": [605, 66, 54]}
{"time": "2021-02-13 18:53:18.133728", "score": "0.6694", "loss": "1.3802", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if(null){setColorFilter();} }", "n_tokens": 44, "n_pass": [611, 67, 55]}
{"time": "2021-02-13 18:53:19.461807", "score": "0.6694", "loss": "1.3802", "code": "Drawable getDrawable()throws Resources{if(resId){getDrawable(edge);; }if(glow){(R);}if(null){setColorFilter();}}", "n_tokens": 43, "n_pass": [613, 68, 56]}
{"time": "2021-02-13 18:53:21.838157", "score": "0.7624", "loss": "0.9124", "code": "Drawable getDrawable()throws Resources{if(resId){(edge);; }if(glow){(R);}if(null){setColorFilter();}}", "n_tokens": 42, "n_pass": [629, 69, 57]}
{"time": "2021-02-13 18:53:23.159192", "score": "0.7624", "loss": "0.9124", "code": "Drawable getDrawable()throws Resources{if(resId){(edge); }if(glow){(R);}if(null){setColorFilter();}}", "n_tokens": 41, "n_pass": [633, 70, 58]}
{"time": "2021-02-13 18:53:24.489910", "score": "0.7624", "loss": "0.9124", "code": "Drawable getDrawable()throws Resources{if(resId){(edge);}if(glow){(R);}if(null){setColorFilter();}}", "n_tokens": 40, "n_pass": [635, 71, 59]}

Minimal simplified code:
Drawable getDrawable()throws Resources{if(resId){(edge);}if(glow){(R);}if(null){setColorFilter();}}

