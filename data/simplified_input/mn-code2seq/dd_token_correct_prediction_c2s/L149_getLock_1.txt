
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/service/spi/src/main/java/org/kaazing/gateway/service/collections/MemoryCollectionsFactory_getLock.java
method_name = getLock
method_body = @Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl newLock = new ILockImpl(name); locks.put(name, newLock); lock = newLock; } assert (lock != null); return lock; } }
predict, score, loss = getLock, 0.7746074795722961, 0.6959364414215088

Trace of simplified code(s):
{"time": "2021-02-13 06:15:56.212186", "score": "0.7746", "loss": "0.6959", "code": "@Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl newLock = new ILockImpl(name); locks.put(name, newLock); lock = newLock; } assert (lock != null); return lock; } }", "n_tokens": 105, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 06:15:57.545149", "score": "0.9196", "loss": "0.2584", "code": "@Override public ILock getLock(String name) { synchronized (locks) { ILock lock = locks.get(name); if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 79, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 06:15:59.618629", "score": "0.8063", "loss": "0.5921", "code": "@Override public ILock getLock(String name) { synchronized (locks) { locks.get(name); if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 73, "n_pass": [45, 3, 3]}
{"time": "2021-02-13 06:16:00.942159", "score": "0.859", "loss": "0.4829", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl= newLock; } assert (lock != null); return lock; } }", "n_tokens": 66, "n_pass": [46, 4, 4]}
{"time": "2021-02-13 06:16:02.638044", "score": "0.8878", "loss": "0.3973", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (lock != null); return lock; } }", "n_tokens": 63, "n_pass": [82, 5, 5]}
{"time": "2021-02-13 06:16:03.958591", "score": "0.8669", "loss": "0.442", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull); return lock; } }", "n_tokens": 59, "n_pass": [85, 6, 6]}
{"time": "2021-02-13 06:16:05.288417", "score": "0.7751", "loss": "0.7745", "code": "@Override public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 55, "n_pass": [87, 7, 7]}
{"time": "2021-02-13 06:16:06.602389", "score": "0.768", "loss": "0.807", "code": "public ILock getLock(String name) { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 52, "n_pass": [89, 8, 8]}
{"time": "2021-02-13 06:16:08.281146", "score": "0.8764", "loss": "0.4769", "code": "public ILock getLock() { synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 49, "n_pass": [92, 9, 9]}
{"time": "2021-02-13 06:16:12.624879", "score": "0.8764", "loss": "0.4769", "code": "public ILock getLock(){ synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 48, "n_pass": [141, 10, 10]}
{"time": "2021-02-13 06:16:13.932900", "score": "0.8764", "loss": "0.4769", "code": "public ILock getLock(){synchronized (locks) {  if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 47, "n_pass": [143, 11, 11]}
{"time": "2021-02-13 06:16:15.236883", "score": "0.8764", "loss": "0.4769", "code": "public ILock getLock(){synchronized (locks) {if (lock == null) { ILockImpl; } assert (locknull);  } }", "n_tokens": 45, "n_pass": [148, 12, 12]}
{"time": "2021-02-13 06:16:19.161666", "score": "0.928", "loss": "0.4874", "code": "public ILock getLock(){synchronized (locks) {if (lock == null) {; } assert (locknull);  } }", "n_tokens": 43, "n_pass": [155, 15, 13]}
{"time": "2021-02-13 06:16:20.489551", "score": "0.928", "loss": "0.4874", "code": "public ILock getLock(){synchronized (locks) {if (lock == null) {} assert (locknull);  } }", "n_tokens": 41, "n_pass": [156, 16, 14]}
{"time": "2021-02-13 06:16:21.786463", "score": "0.9281", "loss": "0.4617", "code": "public ILock getLock(){synchronized (locks) {if (lock == null) {} (locknull);  } }", "n_tokens": 39, "n_pass": [158, 17, 15]}
{"time": "2021-02-13 06:16:23.098300", "score": "0.9281", "loss": "0.4617", "code": " ILock getLock(){synchronized (locks) {if (lock == null) {} (locknull);  } }", "n_tokens": 38, "n_pass": [164, 18, 16]}
{"time": "2021-02-13 06:16:24.389295", "score": "0.9281", "loss": "0.4617", "code": "ILock getLock(){synchronized (locks) {if (lock == null) {} (locknull);  } }", "n_tokens": 37, "n_pass": [165, 19, 17]}
{"time": "2021-02-13 06:16:26.756660", "score": "0.7738", "loss": "1.0681", "code": "ILock getLock(){synchronized (locks) {if (lock= null) {} (locknull);  } }", "n_tokens": 35, "n_pass": [178, 20, 18]}
{"time": "2021-02-13 06:16:28.085125", "score": "0.8424", "loss": "0.7217", "code": "ILock getLock(){synchronized (locks) {if (locknull) {} (locknull);  } }", "n_tokens": 33, "n_pass": [179, 21, 19]}
{"time": "2021-02-13 06:16:33.436205", "score": "0.8424", "loss": "0.7217", "code": "ILock getLock(){synchronized (locks) {if (locknull){} (locknull);  } }", "n_tokens": 32, "n_pass": [226, 22, 20]}
{"time": "2021-02-13 06:16:34.734997", "score": "0.8424", "loss": "0.7217", "code": "ILock getLock(){synchronized (locks) {if (locknull){}(locknull);  } }", "n_tokens": 31, "n_pass": [228, 23, 21]}
{"time": "2021-02-13 06:16:36.031954", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized (locks) {if (locknull){}(null);  } }", "n_tokens": 30, "n_pass": [230, 24, 22]}
{"time": "2021-02-13 06:16:37.359150", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized (locks) {if (locknull){}(null); } }", "n_tokens": 29, "n_pass": [234, 25, 23]}
{"time": "2021-02-13 06:16:38.686595", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized (locks) {if (locknull){}(null);} }", "n_tokens": 28, "n_pass": [235, 26, 24]}
{"time": "2021-02-13 06:16:39.982430", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized (locks) {if (locknull){}(null);}}", "n_tokens": 27, "n_pass": [237, 27, 25]}
{"time": "2021-02-13 06:16:42.351331", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized(locks) {if (locknull){}(null);}}", "n_tokens": 26, "n_pass": [246, 28, 26]}
{"time": "2021-02-13 06:16:43.654617", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized(locks){if (locknull){}(null);}}", "n_tokens": 25, "n_pass": [250, 29, 27]}
{"time": "2021-02-13 06:16:44.953917", "score": "0.8609", "loss": "0.7997", "code": "ILock getLock(){synchronized(locks){if(locknull){}(null);}}", "n_tokens": 24, "n_pass": [253, 30, 28]}
{"time": "2021-02-13 06:16:46.269032", "score": "0.7896", "loss": "1.0104", "code": "ILock getLock(){synchronized(locks){if(null){}(null);}}", "n_tokens": 23, "n_pass": [255, 31, 29]}

Minimal simplified code:
ILock getLock(){synchronized(locks){if(null){}(null);}}

