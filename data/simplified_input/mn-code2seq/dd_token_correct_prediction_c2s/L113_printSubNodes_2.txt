
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/CursorNode_printSubNodes.java
method_name = printSubNodes
method_body = public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, "orderByList: "); orderByList.treePrint(depth + 1); } if (offset != null) { printLabel(depth, "offset: "); offset.treePrint(depth + 1); } if (fetchFirst != null) { printLabel(depth, "fetchFirst: "); fetchFirst.treePrint(depth + 1); } }
predict, score, loss = printSubNodes, 0.9964221119880676, 0.011939085088670254

Trace of simplified code(s):
{"time": "2021-02-13 05:42:13.898172", "score": "0.9969", "loss": "0.0104", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null) { printLabel(depth, \"offset: \"); offset.treePrint(depth + 1); } if (fetchFirst != null) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 142, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 05:42:15.260281", "score": "0.997", "loss": "0.0103", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"); fetchFirst.treePrint(depth + 1); } }", "n_tokens": 106, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 05:42:16.614615", "score": "0.9971", "loss": "0.0101", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if (orderByList != null) { printLabel(depth, \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 97, "n_pass": [40, 3, 3]}
{"time": "2021-02-13 05:42:19.674226", "score": "0.9969", "loss": "0.0106", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel(depth, \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 93, "n_pass": [81, 5, 4]}
{"time": "2021-02-13 05:42:22.753594", "score": "0.9957", "loss": "0.0145", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \"orderByList: \"); orderByList.treePrint(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 91, "n_pass": [149, 7, 5]}
{"time": "2021-02-13 05:42:24.087206", "score": "0.9968", "loss": "0.0111", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \"); orderByList.treePrint(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 89, "n_pass": [150, 8, 6]}
{"time": "2021-02-13 05:42:25.420353", "score": "0.9926", "loss": "0.0244", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \"); orderByList(depth + 1); } if (offset != null!= null) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 87, "n_pass": [154, 9, 7]}
{"time": "2021-02-13 05:42:26.757498", "score": "0.9921", "loss": "0.0255", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \"); orderByList(depth + 1); } if (offset != nullnull) { printLabel(depth, \"fetchFirst: \"+ 1); } }", "n_tokens": 84, "n_pass": [165, 10, 8]}
{"time": "2021-02-13 05:42:28.114940", "score": "0.99", "loss": "0.0319", "code": "public void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \"); orderByList(depth + 1); } if (offset != nullnull) { printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 81, "n_pass": [171, 11, 9]}
{"time": "2021-02-13 05:42:29.464110", "score": "0.99", "loss": "0.0319", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \"); orderByList(depth + 1); } if (offset != nullnull) { printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 79, "n_pass": [174, 12, 10]}
{"time": "2021-02-13 05:42:31.503584", "score": "0.9924", "loss": "0.0248", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset != nullnull) { printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 77, "n_pass": [193, 13, 11]}
{"time": "2021-02-13 05:42:32.831490", "score": "0.9923", "loss": "0.0251", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null) { printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 75, "n_pass": [203, 14, 12]}
{"time": "2021-02-13 05:42:42.207227", "score": "0.9923", "loss": "0.0251", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){ printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 74, "n_pass": [308, 15, 13]}
{"time": "2021-02-13 05:42:43.529509", "score": "0.9923", "loss": "0.0251", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel(depth, \"fetchFirst: \"); } }", "n_tokens": 73, "n_pass": [310, 16, 14]}
{"time": "2021-02-13 05:42:44.852878", "score": "0.9789", "loss": "0.0672", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \"fetchFirst: \"); } }", "n_tokens": 71, "n_pass": [313, 17, 15]}
{"time": "2021-02-13 05:42:46.174193", "score": "0.9881", "loss": "0.038", "code": "void printSubNodes(int depth) { super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 69, "n_pass": [315, 18, 16]}
{"time": "2021-02-13 05:42:48.224811", "score": "0.9881", "loss": "0.038", "code": "void printSubNodes(int depth){ super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 68, "n_pass": [328, 19, 17]}
{"time": "2021-02-13 05:42:49.543703", "score": "0.9881", "loss": "0.038", "code": "void printSubNodes(int depth){super.printSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 67, "n_pass": [330, 20, 18]}
{"time": "2021-02-13 05:42:50.862568", "score": "0.7939", "loss": "1.1234", "code": "void printSubNodes(int depth){superprintSubNodes(depth); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 66, "n_pass": [332, 21, 19]}
{"time": "2021-02-13 05:42:52.519809", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes(); if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 65, "n_pass": [335, 22, 20]}
{"time": "2021-02-13 05:42:53.825386", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes();if ( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 64, "n_pass": [338, 23, 21]}
{"time": "2021-02-13 05:42:55.158945", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes();if( null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 63, "n_pass": [340, 24, 22]}
{"time": "2021-02-13 05:42:56.462439", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes();if(null) { printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 62, "n_pass": [342, 25, 23]}
{"time": "2021-02-13 05:42:57.766880", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){ printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 61, "n_pass": [345, 26, 24]}
{"time": "2021-02-13 05:42:59.073941", "score": "0.7091", "loss": "1.7908", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){printLabel( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 60, "n_pass": [347, 27, 25]}
{"time": "2021-02-13 05:43:00.377578", "score": "0.7544", "loss": "1.5131", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){( \" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 59, "n_pass": [348, 28, 26]}
{"time": "2021-02-13 05:43:01.702849", "score": "0.7544", "loss": "1.5131", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\" \");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 58, "n_pass": [350, 29, 27]}
{"time": "2021-02-13 05:43:03.032138", "score": "0.7711", "loss": "1.3761", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(depth + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 57, "n_pass": [352, 30, 28]}
{"time": "2021-02-13 05:43:04.371489", "score": "0.7934", "loss": "1.2576", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");( + 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 56, "n_pass": [357, 31, 29]}
{"time": "2021-02-13 05:43:05.691962", "score": "0.7934", "loss": "1.2576", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(+ 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 55, "n_pass": [358, 32, 30]}
{"time": "2021-02-13 05:43:07.016868", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");( 1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 54, "n_pass": [359, 33, 31]}
{"time": "2021-02-13 05:43:08.319195", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1); } if (offset !=null){printLabel( \" \"); } }", "n_tokens": 53, "n_pass": [360, 34, 32]}
{"time": "2021-02-13 05:43:09.626674", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);} if (offset !=null){printLabel( \" \"); } }", "n_tokens": 52, "n_pass": [364, 35, 33]}
{"time": "2021-02-13 05:43:10.933936", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if (offset !=null){printLabel( \" \"); } }", "n_tokens": 51, "n_pass": [366, 36, 34]}
{"time": "2021-02-13 05:43:12.238512", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offset !=null){printLabel( \" \"); } }", "n_tokens": 50, "n_pass": [368, 37, 35]}
{"time": "2021-02-13 05:43:13.543453", "score": "0.792", "loss": "1.2634", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offset!=null){printLabel( \" \"); } }", "n_tokens": 49, "n_pass": [371, 38, 36]}
{"time": "2021-02-13 05:43:14.847498", "score": "0.7257", "loss": "1.7433", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offset=null){printLabel( \" \"); } }", "n_tokens": 48, "n_pass": [372, 39, 37]}
{"time": "2021-02-13 05:43:16.160182", "score": "0.7357", "loss": "1.6345", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offsetnull){printLabel( \" \"); } }", "n_tokens": 47, "n_pass": [373, 40, 38]}
{"time": "2021-02-13 05:43:17.470754", "score": "0.7291", "loss": "1.636", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offset){printLabel( \" \"); } }", "n_tokens": 46, "n_pass": [374, 41, 39]}
{"time": "2021-02-13 05:43:18.784688", "score": "0.6127", "loss": "3.1769", "code": "void printSubNodes(int depth){superprintSubNodes();if(null){(\"\");(1);}if(offset){( \" \"); } }", "n_tokens": 45, "n_pass": [377, 42, 40]}
{"time": "2021-02-13 05:43:20.823018", "score": "0.8958", "loss": "0.5524", "code": "void printSubNodes(int depth){printSubNodes();if(null){(\"\");(1);}if(offset){( \" \"); } }", "n_tokens": 44, "n_pass": [393, 43, 41]}
{"time": "2021-02-13 05:43:24.570388", "score": "0.8958", "loss": "0.5524", "code": "void printSubNodes(int depth){printSubNodes();if(null){(\"\");(1);}if(offset){(\" \"); } }", "n_tokens": 43, "n_pass": [443, 44, 42]}
{"time": "2021-02-13 05:43:25.893173", "score": "0.9309", "loss": "0.3826", "code": "void printSubNodes(int depth){printSubNodes();if(null){(\"\");(1);}if(offset){(\"\"); } }", "n_tokens": 42, "n_pass": [444, 45, 43]}
{"time": "2021-02-13 05:43:27.225036", "score": "0.9309", "loss": "0.3826", "code": "void printSubNodes(int depth){printSubNodes();if(null){(\"\");(1);}if(offset){(\"\");} }", "n_tokens": 41, "n_pass": [448, 46, 44]}
{"time": "2021-02-13 05:43:28.523813", "score": "0.9309", "loss": "0.3826", "code": "void printSubNodes(int depth){printSubNodes();if(null){(\"\");(1);}if(offset){(\"\");}}", "n_tokens": 40, "n_pass": [450, 47, 45]}

Minimal simplified code:
void printSubNodes(int depth){printSubNodes();if(null){("");(1);}if(offset){("");}}

