
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/mem/MemStorageModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }
predict, score, loss = configure, 0.861046552658081, 0.21959523856639862

Trace of simplified code(s):
{"time": "2021-02-13 11:23:34.801521", "score": "0.8793", "loss": "0.1981", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); bindStore(JobUpdateStore.Mutable.class, MemJobUpdateStore.class); bindStore(HostMaintenanceStore.Mutable.class, MemHostMaintenanceStore.class); Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 219, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 11:23:36.200092", "score": "0.8775", "loss": "0.202", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); ; Key<Storage> storageKey = keyFactory.create(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 191, "n_pass": [25, 2, 2]}
{"time": "2021-02-13 11:23:37.568217", "score": "0.9191", "loss": "0.1322", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.class, MemTaskStore.class); bindStore(CronJobStore.Mutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 177, "n_pass": [47, 3, 3]}
{"time": "2021-02-13 11:23:38.940016", "score": "0.9222", "loss": "0.1229", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMutable.class, MemCronJobStore.class); bindStore(AttributeStore.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 163, "n_pass": [55, 4, 4]}
{"time": "2021-02-13 11:23:40.290694", "score": "0.9197", "loss": "0.1258", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.Mutable.Mutable.class, MemAttributeStore.class); bindStore(QuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 149, "n_pass": [56, 5, 5]}
{"time": "2021-02-13 11:23:41.660637", "score": "0.9113", "loss": "0.138", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(SchedulerStore.Mutable.class, MemSchedulerStore.class); (Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 135, "n_pass": [57, 6, 6]}
{"time": "2021-02-13 11:23:43.020663", "score": "0.9387", "loss": "0.0929", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStore(Storage.class); bind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 121, "n_pass": [59, 7, 7]}
{"time": "2021-02-13 11:23:44.376610", "score": "0.9282", "loss": "0.1198", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStorebind(storageKey).to(MemStorage.class); bind(MemStorage.class).in(Singleton.class); expose(storageKey); }", "n_tokens": 114, "n_pass": [87, 8, 8]}
{"time": "2021-02-13 11:23:45.717465", "score": "0.9139", "loss": "0.1392", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStorebind(storageKey).to(MemStorage.class); bind(Singleton.class); expose(storageKey); }", "n_tokens": 107, "n_pass": [89, 9, 9]}
{"time": "2021-02-13 11:23:47.069663", "score": "0.8733", "loss": "0.2277", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(SlowQueryThreshold.class).toInstance(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStorebind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 100, "n_pass": [90, 10, 10]}
{"time": "2021-02-13 11:23:48.779117", "score": "0.8159", "loss": "0.3511", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableQuotaStore.Mutable.class, MemQuotaStore.class); bindStorebind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 93, "n_pass": [98, 11, 11]}
{"time": "2021-02-13 11:23:50.120780", "score": "0.8255", "loss": "0.312", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStorebind(storageKey).to(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 86, "n_pass": [102, 12, 12]}
{"time": "2021-02-13 11:23:52.158301", "score": "0.7611", "loss": "0.3897", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Long, Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 82, "n_pass": [145, 13, 13]}
{"time": "2021-02-13 11:23:55.188807", "score": "0.8357", "loss": "0.2662", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() { }).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 79, "n_pass": [157, 15, 14]}
{"time": "2021-02-13 11:23:56.514867", "score": "0.8357", "loss": "0.2662", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L, Time.MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 76, "n_pass": [160, 16, 15]}
{"time": "2021-02-13 11:23:57.862387", "score": "0.8347", "loss": "0.2606", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS)); bindStore(TaskStore.MutableMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 73, "n_pass": [165, 17, 16]}
{"time": "2021-02-13 11:24:03.319396", "score": "0.6677", "loss": "0.603", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStore.MutableMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 71, "n_pass": [235, 19, 17]}
{"time": "2021-02-13 11:24:04.642064", "score": "0.6846", "loss": "0.5117", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreMemQuotaStore.class); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 69, "n_pass": [237, 20, 18]}
{"time": "2021-02-13 11:24:05.961846", "score": "0.4766", "loss": "0.9984", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); bindexpose(storageKey); }", "n_tokens": 67, "n_pass": [238, 21, 19]}
{"time": "2021-02-13 11:24:08.993737", "score": "0.577", "loss": "0.7456", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 65, "n_pass": [246, 23, 20]}
{"time": "2021-02-13 11:24:10.306130", "score": "0.2861", "loss": "1.9599", "code": "@Overrideprotected void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 64, "n_pass": [252, 24, 21]}
{"time": "2021-02-13 11:24:11.610971", "score": "0.577", "loss": "0.7456", "code": "@Override void configure() { bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 63, "n_pass": [253, 25, 22]}
{"time": "2021-02-13 11:24:14.006145", "score": "0.577", "loss": "0.7456", "code": "@Override void configure(){ bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 62, "n_pass": [260, 26, 23]}
{"time": "2021-02-13 11:24:15.308749", "score": "0.577", "loss": "0.7456", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(Amount.of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 61, "n_pass": [262, 27, 24]}
{"time": "2021-02-13 11:24:17.936099", "score": "0.7675", "loss": "0.377", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(25L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 59, "n_pass": [273, 29, 25]}
{"time": "2021-02-13 11:24:19.244183", "score": "0.7824", "loss": "0.3406", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(L,MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 57, "n_pass": [275, 30, 26]}
{"time": "2021-02-13 11:24:20.562336", "score": "0.7495", "loss": "0.3863", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(MILLISECONDS));(TaskStoreclass); bindStorebindto(MemStorage.class); (storageKey); }", "n_tokens": 55, "n_pass": [276, 31, 27]}
{"time": "2021-02-13 11:24:22.241235", "score": "0.8212", "loss": "0.3436", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(MILLISECONDS));(TaskStoreclass); to(MemStorage.class); (storageKey); }", "n_tokens": 53, "n_pass": [282, 32, 28]}
{"time": "2021-02-13 11:24:29.340272", "score": "0.4872", "loss": "1.022", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(MILLISECONDS));(TaskStoreclass); to(MemStorageclass); (storageKey); }", "n_tokens": 52, "n_pass": [358, 34, 29]}
{"time": "2021-02-13 11:24:31.988610", "score": "0.4872", "loss": "1.022", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(MILLISECONDS));(TaskStoreclass); to(MemStorageclass);(storageKey); }", "n_tokens": 51, "n_pass": [362, 36, 30]}
{"time": "2021-02-13 11:24:33.327496", "score": "0.4872", "loss": "1.022", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>() ).annotatedWith(of(MILLISECONDS));(TaskStoreclass); to(MemStorageclass);(storageKey);}", "n_tokens": 50, "n_pass": [367, 37, 31]}
{"time": "2021-02-13 11:24:37.025953", "score": "0.4872", "loss": "1.022", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of(MILLISECONDS));(TaskStoreclass); to(MemStorageclass);(storageKey);}", "n_tokens": 49, "n_pass": [391, 39, 32]}
{"time": "2021-02-13 11:24:39.615164", "score": "0.6096", "loss": "0.9119", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStoreclass); to(MemStorageclass);(storageKey);}", "n_tokens": 48, "n_pass": [398, 41, 33]}
{"time": "2021-02-13 11:24:40.918193", "score": "0.5896", "loss": "0.9131", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStore); to(MemStorageclass);(storageKey);}", "n_tokens": 47, "n_pass": [404, 42, 34]}
{"time": "2021-02-13 11:24:42.580122", "score": "0.5896", "loss": "0.9131", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStore);to(MemStorageclass);(storageKey);}", "n_tokens": 46, "n_pass": [407, 43, 35]}
{"time": "2021-02-13 11:24:43.887735", "score": "0.2854", "loss": "1.9715", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStore);(MemStorageclass);(storageKey);}", "n_tokens": 45, "n_pass": [408, 44, 36]}
{"time": "2021-02-13 11:24:45.238224", "score": "0.2588", "loss": "2.0385", "code": "@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStore);(MemStorage);(storageKey);}", "n_tokens": 44, "n_pass": [411, 45, 37]}

Minimal simplified code:
@Override void configure(){bind(new TypeLiteral<Amount<Time>>()).annotatedWith(of());(TaskStore);(MemStorage);(storageKey);}

