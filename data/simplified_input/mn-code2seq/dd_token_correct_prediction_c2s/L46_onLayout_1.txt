
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/JakeWharton__HanselAndGretel/library/src/android/support/v4/app/FragmentBreadCrumbs_onLayout.java
method_name = onLayout
method_body = @Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }
predict, score, loss = onLayout, 0.99800705909729, 0.0055329035967588425

Trace of simplified code(s):
{"time": "2021-02-13 04:26:27.476131", "score": "0.996", "loss": "0.0127", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); final int mPaddingBottom = getPaddingBottom(); final int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 203, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:26:29.998931", "score": "0.9958", "loss": "0.0125", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop();  for (int i = 0; i < childCount; i++) { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 178, "n_pass": [23, 2, 2]}
{"time": "2021-02-13 04:26:31.352832", "score": "0.9985", "loss": "0.0041", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); { final View child = getChildAt(i); int childRight = mPaddingLeft + child.getMeasuredWidth() - mPaddingRight; int childBottom = mPaddingTop + child.getMeasuredHeight() - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 153, "n_pass": [24, 3, 3]}
{"time": "2021-02-13 04:26:32.729669", "score": "0.9949", "loss": "0.0131", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingLeft = getPaddingLeft(); final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); { final View child = getChildAt(i); int childRight = mPaddingLeft +  - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 127, "n_pass": [26, 4, 4]}
{"time": "2021-02-13 04:26:35.128178", "score": "0.9968", "loss": "0.0085", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingRight = getPaddingRight(); final int mPaddingTop = getPaddingTop(); { final View child = getChildAt(i); int childRight = mPaddingLeft +  - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 114, "n_pass": [47, 5, 5]}
{"time": "2021-02-13 04:26:36.466420", "score": "0.9955", "loss": "0.0124", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { final int mPaddingTop = getPaddingTop(); { final View child = getChildAt(i); int childRight = mPaddingLeft +  - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 101, "n_pass": [48, 6, 6]}
{"time": "2021-02-13 04:26:37.797724", "score": "0.9958", "loss": "0.0122", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { { final View child = getChildAt(i); int childRight = mPaddingLeft +  - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 88, "n_pass": [49, 7, 7]}
{"time": "2021-02-13 04:26:43.578612", "score": "0.9952", "loss": "0.0131", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { { final View child = getChildAt(i);childRight = mPaddingLeft +  - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 85, "n_pass": [118, 11, 8]}
{"time": "2021-02-13 04:26:46.608503", "score": "0.9952", "loss": "0.0128", "code": "@Override protected void onLayout(boolean changed, int l, int t, int r, int b) { { final View child = getChildAt(i);childRight = mPaddingLeft - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 82, "n_pass": [121, 13, 9]}
{"time": "2021-02-13 04:26:50.604597", "score": "0.918", "loss": "0.2205", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { final View child = getChildAt(i);childRight = mPaddingLeft - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 79, "n_pass": [129, 16, 10]}
{"time": "2021-02-13 04:26:52.323775", "score": "0.8974", "loss": "0.3002", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight = mPaddingLeft - mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 76, "n_pass": [142, 17, 11]}
{"time": "2021-02-13 04:26:54.030340", "score": "0.8422", "loss": "0.489", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- mPaddingBottom; child.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 73, "n_pass": [147, 18, 12]}
{"time": "2021-02-13 04:26:55.355380", "score": "0.883", "loss": "0.3774", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- mPaddingBottom.layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 70, "n_pass": [149, 19, 13]}
{"time": "2021-02-13 04:26:59.737944", "score": "0.8787", "loss": "0.4122", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout(mPaddingLeft, mPaddingTop, childRight, childBottom); } }", "n_tokens": 68, "n_pass": [216, 20, 14]}
{"time": "2021-02-13 04:27:01.051110", "score": "0.8949", "loss": "0.3704", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTop, childRight, childBottom); } }", "n_tokens": 66, "n_pass": [218, 21, 15]}
{"time": "2021-02-13 04:27:02.380494", "score": "0.9148", "loss": "0.3167", "code": "protected void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 64, "n_pass": [220, 22, 16]}
{"time": "2021-02-13 04:27:03.693797", "score": "0.9148", "loss": "0.3167", "code": " void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 63, "n_pass": [226, 23, 17]}
{"time": "2021-02-13 04:27:05.000338", "score": "0.9148", "loss": "0.3167", "code": "void onLayout(boolean changed, int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 62, "n_pass": [227, 24, 18]}
{"time": "2021-02-13 04:27:07.038378", "score": "0.9148", "loss": "0.3167", "code": "void onLayout(boolean changed,int l, int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 61, "n_pass": [236, 25, 19]}
{"time": "2021-02-13 04:27:08.335767", "score": "0.9148", "loss": "0.3167", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =- layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 60, "n_pass": [241, 26, 20]}
{"time": "2021-02-13 04:27:11.687399", "score": "0.9001", "loss": "0.3062", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout( mPaddingTopchildRight, childBottom); } }", "n_tokens": 58, "n_pass": [259, 28, 21]}
{"time": "2021-02-13 04:27:13.021801", "score": "0.8747", "loss": "0.4169", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout(childRight, childBottom); } }", "n_tokens": 56, "n_pass": [261, 29, 22]}
{"time": "2021-02-13 04:27:14.363585", "score": "0.9174", "loss": "0.2808", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout( childBottom); } }", "n_tokens": 54, "n_pass": [262, 30, 23]}
{"time": "2021-02-13 04:27:15.667689", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout(); } }", "n_tokens": 52, "n_pass": [263, 31, 24]}
{"time": "2021-02-13 04:27:25.311703", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout();} }", "n_tokens": 51, "n_pass": [336, 34, 25]}
{"time": "2021-02-13 04:27:26.622797", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t, int r, int b) { { finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 50, "n_pass": [337, 35, 26]}
{"time": "2021-02-13 04:27:28.652487", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r, int b) { { finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 49, "n_pass": [355, 36, 27]}
{"time": "2021-02-13 04:27:29.989087", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b) { { finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 48, "n_pass": [360, 37, 28]}
{"time": "2021-02-13 04:27:31.294227", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){ { finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 47, "n_pass": [365, 38, 29]}
{"time": "2021-02-13 04:27:32.596828", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){{ finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 46, "n_pass": [367, 39, 30]}
{"time": "2021-02-13 04:27:33.905708", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){{finalchild = getChildAt(i);childRight =layout();}}", "n_tokens": 45, "n_pass": [369, 40, 31]}
{"time": "2021-02-13 04:27:36.508342", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){{finalchild= getChildAt(i);childRight =layout();}}", "n_tokens": 44, "n_pass": [372, 42, 32]}
{"time": "2021-02-13 04:27:37.844113", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){{finalchild=getChildAt(i);childRight =layout();}}", "n_tokens": 43, "n_pass": [374, 43, 33]}
{"time": "2021-02-13 04:27:41.768578", "score": "0.9341", "loss": "0.2612", "code": "void onLayout(boolean changed,int l,int t,int r,int b){{finalchild=getChildAt(i);childRight=layout();}}", "n_tokens": 42, "n_pass": [381, 46, 34]}

Minimal simplified code:
void onLayout(boolean changed,int l,int t,int r,int b){{finalchild=getChildAt(i);childRight=layout();}}

