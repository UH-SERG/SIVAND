
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/mina.core/core/src/main/java/org/apache/mina/filter/firewall/BlacklistFilter_sessionOpened.java
method_name = sessionOpened
method_body = @Override public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session); } else { blockSession(session); } }
predict, score, loss = sessionOpened, 0.947217583656311, 0.13705286383628845

Trace of simplified code(s):
{"time": "2021-02-13 21:18:39.677957", "score": "0.9472", "loss": "0.1371", "code": "@Override public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session); } else { blockSession(session); } }", "n_tokens": 60, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 21:18:42.700215", "score": "0.9317", "loss": "0.1794", "code": "@Override public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session);(session); } }", "n_tokens": 52, "n_pass": [26, 3, 2]}
{"time": "2021-02-13 21:18:45.708078", "score": "0.9693", "loss": "0.0766", "code": "@Override public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 48, "n_pass": [48, 5, 3]}
{"time": "2021-02-13 21:18:47.072351", "score": "0.907", "loss": "0.2808", "code": "public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 45, "n_pass": [49, 6, 4]}
{"time": "2021-02-13 21:18:48.775520", "score": "0.9533", "loss": "0.1307", "code": "public void sessionOpened(NextFilter nextFiltersession) throws Exception { if (!isBlocked(session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 41, "n_pass": [53, 7, 5]}
{"time": "2021-02-13 21:18:52.120011", "score": "0.979", "loss": "0.0548", "code": "public void sessionOpened(NextFilter nextFiltersession) throws Exception { if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 39, "n_pass": [93, 9, 6]}
{"time": "2021-02-13 21:18:54.824124", "score": "0.979", "loss": "0.0548", "code": " void sessionOpened(NextFilter nextFiltersession) throws Exception { if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 38, "n_pass": [102, 11, 7]}
{"time": "2021-02-13 21:18:56.166460", "score": "0.979", "loss": "0.0548", "code": "void sessionOpened(NextFilter nextFiltersession) throws Exception { if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 37, "n_pass": [103, 12, 8]}
{"time": "2021-02-13 21:19:03.514039", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session) throws Exception { if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 36, "n_pass": [164, 14, 9]}
{"time": "2021-02-13 21:19:04.843940", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception { if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 35, "n_pass": [167, 15, 10]}
{"time": "2021-02-13 21:19:06.168932", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception{ if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 34, "n_pass": [171, 16, 11]}
{"time": "2021-02-13 21:19:07.505160", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception{if ((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 33, "n_pass": [173, 17, 12]}
{"time": "2021-02-13 21:19:08.840899", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)) { nextFilter.sessionOpened(session); } }", "n_tokens": 32, "n_pass": [175, 18, 13]}
{"time": "2021-02-13 21:19:10.150892", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)){ nextFilter.sessionOpened(session); } }", "n_tokens": 31, "n_pass": [181, 19, 14]}
{"time": "2021-02-13 21:19:11.480302", "score": "0.9705", "loss": "0.0796", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)){nextFilter.sessionOpened(session); } }", "n_tokens": 30, "n_pass": [183, 20, 15]}
{"time": "2021-02-13 21:19:14.147295", "score": "0.8157", "loss": "0.7552", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)){nextFilter.sessionOpened(); } }", "n_tokens": 29, "n_pass": [188, 22, 16]}
{"time": "2021-02-13 21:19:15.454121", "score": "0.8157", "loss": "0.7552", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)){nextFilter.sessionOpened();} }", "n_tokens": 28, "n_pass": [191, 23, 17]}
{"time": "2021-02-13 21:19:16.792128", "score": "0.8157", "loss": "0.7552", "code": "void sessionOpened(NextFilter session)throws Exception{if((session)){nextFilter.sessionOpened();}}", "n_tokens": 27, "n_pass": [193, 24, 18]}

Minimal simplified code:
void sessionOpened(NextFilter session)throws Exception{if((session)){nextFilter.sessionOpened();}}

