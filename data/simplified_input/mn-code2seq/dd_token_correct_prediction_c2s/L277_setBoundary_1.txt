
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/tomcat/util/http/fileupload/MultipartStream_setBoundary.java
method_name = setBoundary
method_body = public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException("The length of a boundary token can not be changed"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }
predict, score, loss = setBoundary, 0.8059567213058472, 0.6832338571548462

Trace of simplified code(s):
{"time": "2021-02-13 13:05:23.871153", "score": "0.806", "loss": "0.6832", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 103, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 13:05:25.240713", "score": "0.8609", "loss": "0.5085", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"The length of a boundary token can not be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 90, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 13:05:26.571667", "score": "0.8462", "loss": "0.5626", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"The  be changed\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 77, "n_pass": [23, 3, 3]}
{"time": "2021-02-13 13:05:27.913351", "score": "0.7269", "loss": "1.0428", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length); }", "n_tokens": 71, "n_pass": [42, 4, 4]}
{"time": "2021-02-13 13:05:29.245522", "score": "0.6716", "loss": "1.2503", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throw new IllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, boundary.length); }", "n_tokens": 64, "n_pass": [46, 5, 5]}
{"time": "2021-02-13 13:05:31.045480", "score": "0.9052", "loss": "0.3366", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, 0, this.boundary, boundary.length); }", "n_tokens": 61, "n_pass": [89, 6, 6]}
{"time": "2021-02-13 13:05:32.374886", "score": "0.9241", "loss": "0.2614", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary,this.boundary, boundary.length); }", "n_tokens": 57, "n_pass": [94, 7, 7]}
{"time": "2021-02-13 13:05:33.697771", "score": "0.8917", "loss": "0.406", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary.length); }", "n_tokens": 53, "n_pass": [95, 8, 8]}
{"time": "2021-02-13 13:05:37.392785", "score": "0.9316", "loss": "0.2266", "code": "public void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 51, "n_pass": [148, 9, 9]}
{"time": "2021-02-13 13:05:38.712385", "score": "0.9316", "loss": "0.2266", "code": " void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 50, "n_pass": [151, 10, 10]}
{"time": "2021-02-13 13:05:40.046282", "score": "0.9316", "loss": "0.2266", "code": "void setBoundary(byte[] boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 49, "n_pass": [152, 11, 11]}
{"time": "2021-02-13 13:05:42.083022", "score": "0.9316", "loss": "0.2266", "code": "void setBoundary(byte[]boundary) throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 48, "n_pass": [160, 12, 12]}
{"time": "2021-02-13 13:05:43.392895", "score": "0.9316", "loss": "0.2266", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary.length) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 47, "n_pass": [163, 13, 13]}
{"time": "2021-02-13 13:05:44.710559", "score": "0.9407", "loss": "0.188", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { throwIllegalBoundaryException(\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 45, "n_pass": [170, 14, 14]}
{"time": "2021-02-13 13:05:46.024871", "score": "0.9026", "loss": "0.3511", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } System.arraycopy(boundary, boundary); }", "n_tokens": 43, "n_pass": [173, 15, 15]}
{"time": "2021-02-13 13:05:47.345345", "score": "0.9233", "loss": "0.2332", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy(boundary, boundary); }", "n_tokens": 41, "n_pass": [178, 16, 16]}
{"time": "2021-02-13 13:05:48.666683", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy( boundary); }", "n_tokens": 39, "n_pass": [180, 17, 17]}
{"time": "2021-02-13 13:05:57.008718", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException { if (boundary) { (\"\"); } arraycopy( boundary);}", "n_tokens": 38, "n_pass": [237, 20, 18]}
{"time": "2021-02-13 13:05:59.032722", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{ if (boundary) { (\"\"); } arraycopy( boundary);}", "n_tokens": 37, "n_pass": [250, 21, 19]}
{"time": "2021-02-13 13:06:00.322554", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if (boundary) { (\"\"); } arraycopy( boundary);}", "n_tokens": 36, "n_pass": [252, 22, 20]}
{"time": "2021-02-13 13:06:01.631703", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary) { (\"\"); } arraycopy( boundary);}", "n_tokens": 35, "n_pass": [254, 23, 21]}
{"time": "2021-02-13 13:06:02.963305", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){ (\"\"); } arraycopy( boundary);}", "n_tokens": 34, "n_pass": [258, 24, 22]}
{"time": "2021-02-13 13:06:04.291938", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\"); } arraycopy( boundary);}", "n_tokens": 33, "n_pass": [260, 25, 23]}
{"time": "2021-02-13 13:06:05.615005", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");} arraycopy( boundary);}", "n_tokens": 32, "n_pass": [266, 26, 24]}
{"time": "2021-02-13 13:06:06.913682", "score": "0.7457", "loss": "1.015", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");}arraycopy( boundary);}", "n_tokens": 31, "n_pass": [268, 27, 25]}
{"time": "2021-02-13 13:06:08.216674", "score": "0.7717", "loss": "1.1887", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");}( boundary);}", "n_tokens": 30, "n_pass": [269, 28, 26]}
{"time": "2021-02-13 13:06:09.512168", "score": "0.7717", "loss": "1.1887", "code": "void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){(\"\");}(boundary);}", "n_tokens": 29, "n_pass": [271, 29, 27]}

Minimal simplified code:
void setBoundary(byte[]boundary)throws IllegalBoundaryException{if(boundary){("");}(boundary);}

