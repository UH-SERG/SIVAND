
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/test/java/org/bouncycastle/jce/provider/test/CertPathTest_getEncoded.java
method_name = getEncoded
method_body = public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException("Encoding not supported: " + encoding); }
predict, score, loss = getEncoded, 0.7751365900039673, 0.6699420809745789

Trace of simplified code(s):
{"time": "2021-02-13 16:46:53.813729", "score": "0.7751", "loss": "0.6699", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return (byte[]) this.encoding.clone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:46:55.136640", "score": "0.8468", "loss": "0.539", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding not supported: \" + encoding); }", "n_tokens": 66, "n_pass": [24, 2, 2]}
{"time": "2021-02-13 16:46:56.485373", "score": "0.8168", "loss": "0.6497", "code": "public byte[] getEncoded(String encoding) throws CertificateEncodingException { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 61, "n_pass": [49, 3, 3]}
{"time": "2021-02-13 16:46:57.808803", "score": "0.7202", "loss": "1.1948", "code": "public byte[] getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 57, "n_pass": [55, 4, 4]}
{"time": "2021-02-13 16:47:00.480884", "score": "0.7202", "loss": "1.1948", "code": "byte[] getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 55, "n_pass": [110, 6, 5]}
{"time": "2021-02-13 16:47:06.800127", "score": "0.7202", "loss": "1.1948", "code": "byte[]getEncoded(String encoding) { if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 54, "n_pass": [182, 8, 6]}
{"time": "2021-02-13 16:47:08.122547", "score": "0.7202", "loss": "1.1948", "code": "byte[]getEncoded(String encoding){ if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 53, "n_pass": [189, 9, 7]}
{"time": "2021-02-13 16:47:09.442263", "score": "0.7202", "loss": "1.1948", "code": "byte[]getEncoded(String encoding){if (getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 52, "n_pass": [191, 10, 8]}
{"time": "2021-02-13 16:47:10.777682", "score": "0.7202", "loss": "1.1948", "code": "byte[]getEncoded(String encoding){if(getType().equals(encoding)) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 51, "n_pass": [193, 11, 9]}
{"time": "2021-02-13 16:47:12.107441", "score": "0.7157", "loss": "1.1943", "code": "byte[]getEncoded(String encoding){if(getType().equals()) { return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 50, "n_pass": [201, 12, 10]}
{"time": "2021-02-13 16:47:13.424767", "score": "0.7157", "loss": "1.1943", "code": "byte[]getEncoded(String encoding){if(getType().equals()){ return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 49, "n_pass": [204, 13, 11]}
{"time": "2021-02-13 16:47:14.750417", "score": "0.7157", "loss": "1.1943", "code": "byte[]getEncoded(String encoding){if(getType().equals()){return clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 48, "n_pass": [206, 14, 12]}
{"time": "2021-02-13 16:47:16.071297", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){ clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 47, "n_pass": [207, 15, 13]}
{"time": "2021-02-13 16:47:17.378167", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone(); } throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 46, "n_pass": [208, 16, 14]}
{"time": "2021-02-13 16:47:18.688718", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();} throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 45, "n_pass": [213, 17, 15]}
{"time": "2021-02-13 16:47:20.051903", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException(\"Encoding \" + encoding); }", "n_tokens": 44, "n_pass": [215, 18, 16]}
{"time": "2021-02-13 16:47:27.677319", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException(\"Encoding\" + encoding); }", "n_tokens": 43, "n_pass": [271, 22, 17]}
{"time": "2021-02-13 16:47:28.984465", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException(\"Encoding\"+ encoding); }", "n_tokens": 42, "n_pass": [272, 23, 18]}
{"time": "2021-02-13 16:47:30.287104", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException(\"Encoding\"+encoding); }", "n_tokens": 41, "n_pass": [274, 24, 19]}
{"time": "2021-02-13 16:47:31.609850", "score": "0.7566", "loss": "1.1359", "code": "byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException(\"Encoding\"+encoding);}", "n_tokens": 40, "n_pass": [278, 25, 20]}

Minimal simplified code:
byte[]getEncoded(String encoding){if(getType().equals()){clone();}throw new CertificateEncodingException("Encoding"+encoding);}

