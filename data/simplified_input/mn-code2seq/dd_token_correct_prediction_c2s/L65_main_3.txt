
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/examples/src/main/java/zemberek/examples/morphology/AnalyzeWords_main.java
method_name = main
method_body = public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults(); String word = "kalemi"; Log.info("Word = " + word); WordAnalysis results = morphology.analyze(word); for (SingleAnalysis result : results) { Log.info("Lexical and Surface : " + result.formatLong()); Log.info("Only Lexical : " + result.formatLexical()); Log.info("Oflazer style : " + AnalysisFormatters.OFLAZER_STYLE.format(result)); Log.info(); } }
predict, score, loss = main, 0.9772987961769104, 0.03353062644600868

Trace of simplified code(s):
{"time": "2021-02-13 04:45:48.708546", "score": "0.932", "loss": "0.0893", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults(); String word = \"kalemi\"; Log.info(\"Word = \" + word); WordAnalysis results = morphology.analyze(word); for (SingleAnalysis result : results) { Log.info(\"Lexical and Surface : \" + result.formatLong()); Log.info(\"Only Lexical : \" + result.formatLexical()); Log.info(\"Oflazer style : \" + AnalysisFormatters.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 176, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:45:50.063050", "score": "0.9965", "loss": "0.0057", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults(); String word = \"kalemi\";{ Log.info(\"Lexical and Surface : \" + result.formatLong()); Log.info(\"Only Lexical : \" + result.formatLexical()); Log.info(\"Oflazer style : \" + AnalysisFormatters.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 132, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 04:45:51.430391", "score": "0.9971", "loss": "0.0061", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults(); String word = \"kalemi\";{ Log.info(\"Lexical and Surface : \" + result.formatLongformatLexical()); Log.info(\"Oflazer style : \" + AnalysisFormatters.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 110, "n_pass": [19, 3, 3]}
{"time": "2021-02-13 04:45:52.789926", "score": "0.9989", "loss": "0.0026", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults(); String word = \"kalemi\";{ Log.info(\"Lexical and Surface : \" + result.formatLong.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 88, "n_pass": [20, 4, 4]}
{"time": "2021-02-13 04:45:54.497390", "score": "0.9937", "loss": "0.0131", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical and Surface : \" + result.formatLong.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 77, "n_pass": [38, 5, 5]}
{"time": "2021-02-13 04:45:55.852870", "score": "0.9892", "loss": "0.0209", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.formatLong.OFLAZER_STYLE.format(result)); Log.info(); } }", "n_tokens": 71, "n_pass": [61, 6, 6]}
{"time": "2021-02-13 04:45:57.180139", "score": "0.9851", "loss": "0.0278", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)); Log.info(); } }", "n_tokens": 65, "n_pass": [63, 7, 7]}
{"time": "2021-02-13 04:45:58.901254", "score": "0.9888", "loss": "0.0188", "code": "public static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 62, "n_pass": [102, 8, 8]}
{"time": "2021-02-13 04:46:00.221111", "score": "0.9888", "loss": "0.0188", "code": "static void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 60, "n_pass": [105, 9, 9]}
{"time": "2021-02-13 04:46:01.551249", "score": "0.9888", "loss": "0.0188", "code": "void main(String[] args) throws IOException { TurkishMorphology morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 58, "n_pass": [106, 10, 10]}
{"time": "2021-02-13 04:46:03.232203", "score": "0.9181", "loss": "0.1734", "code": "void main(String[] args) throws IOException {morphology = TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 55, "n_pass": [114, 11, 11]}
{"time": "2021-02-13 04:46:04.552666", "score": "0.9314", "loss": "0.1271", "code": "void main(String[] args) throws IOException { TurkishMorphology.createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 52, "n_pass": [115, 12, 12]}
{"time": "2021-02-13 04:46:05.874340", "score": "0.728", "loss": "0.4912", "code": "void main(String[] args) throws IOException {createWithDefaults();{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 49, "n_pass": [116, 13, 13]}
{"time": "2021-02-13 04:46:07.178520", "score": "0.8368", "loss": "0.3605", "code": "void main(String[] args) throws IOException {;{ Log.info(\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 46, "n_pass": [117, 14, 14]}
{"time": "2021-02-13 04:46:08.513606", "score": "0.7625", "loss": "0.6041", "code": "void main(String[] args) throws IOException {;{ (\"Lexical \" + result.format(result)).info(); } }", "n_tokens": 43, "n_pass": [119, 15, 15]}
{"time": "2021-02-13 04:46:09.823822", "score": "0.9125", "loss": "0.2332", "code": "void main(String[] args) throws IOException {;{ (\"Lexical \" .format(result)).info(); } }", "n_tokens": 40, "n_pass": [122, 16, 16]}
{"time": "2021-02-13 04:46:14.599307", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args) throws IOException {;{ (\"Lexical \" .format(result)).info(); } }", "n_tokens": 39, "n_pass": [185, 17, 17]}
{"time": "2021-02-13 04:46:15.938799", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args)throws IOException {;{ (\"Lexical \" .format(result)).info(); } }", "n_tokens": 38, "n_pass": [188, 18, 18]}
{"time": "2021-02-13 04:46:17.272173", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args)throws IOException{;{ (\"Lexical \" .format(result)).info(); } }", "n_tokens": 37, "n_pass": [192, 19, 19]}
{"time": "2021-02-13 04:46:18.585616", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args)throws IOException{{ (\"Lexical \" .format(result)).info(); } }", "n_tokens": 36, "n_pass": [194, 20, 20]}
{"time": "2021-02-13 04:46:19.897961", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args)throws IOException{{(\"Lexical \" .format(result)).info(); } }", "n_tokens": 35, "n_pass": [196, 21, 21]}
{"time": "2021-02-13 04:46:23.597234", "score": "0.9125", "loss": "0.2332", "code": "void main(String[]args)throws IOException{{(\"Lexical \".format(result)).info(); } }", "n_tokens": 34, "n_pass": [242, 22, 22]}
{"time": "2021-02-13 04:46:24.904009", "score": "0.9922", "loss": "0.0207", "code": "void main(String[]args)throws IOException{{(\"Lexical \".format()).info(); } }", "n_tokens": 33, "n_pass": [245, 23, 23]}
{"time": "2021-02-13 04:46:26.214303", "score": "0.9922", "loss": "0.0207", "code": "void main(String[]args)throws IOException{{(\"Lexical \".format()).info();} }", "n_tokens": 32, "n_pass": [253, 24, 24]}
{"time": "2021-02-13 04:46:27.547715", "score": "0.9922", "loss": "0.0207", "code": "void main(String[]args)throws IOException{{(\"Lexical \".format()).info();}}", "n_tokens": 31, "n_pass": [255, 25, 25]}
{"time": "2021-02-13 04:46:29.578385", "score": "0.9921", "loss": "0.0193", "code": "void main(String[]args)throws IOException{{(\" \".format()).info();}}", "n_tokens": 30, "n_pass": [273, 26, 26]}
{"time": "2021-02-13 04:46:30.882838", "score": "0.9931", "loss": "0.0175", "code": "void main(String[]args)throws IOException{{(\"\".format()).info();}}", "n_tokens": 29, "n_pass": [274, 27, 27]}

Minimal simplified code:
void main(String[]args)throws IOException{{("".format()).info();}}

