
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor_sendMessage.java
method_name = sendMessage
method_body = @Override public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException { int size = msg.getMessage().getLength(); boolean frag = (size > maxSize) && okToProcess(msg.getOptions()); if (frag) { frag(destination, msg, payload); } else { msg.getMessage().append(frag); super.sendMessage(destination, msg, payload); } }
predict, score, loss = sendMessage, 0.9379246234893799, 0.15206925570964813

Trace of simplified code(s):
{"time": "2021-02-13 12:35:54.606234", "score": "0.9807", "loss": "0.0478", "code": "@Override public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException { int size = msg.getMessage().getLength(); boolean frag = (size > maxSize) && okToProcess(msg.getOptions()); if (frag) { frag(destination, msg, payload); } else { msg.getMessage().append(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 131, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 12:35:55.936092", "score": "0.9562", "loss": "0.1052", "code": "@Override public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {  okToProcess(msg.getOptions()); if (frag) { frag(destination, msg, payload); } else { msg.getMessage().append(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 98, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 12:35:57.638788", "score": "0.9437", "loss": "0.1347", "code": "@Override public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { msg.getMessage().append(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 94, "n_pass": [73, 3, 3]}
{"time": "2021-02-13 12:35:58.979578", "score": "0.9586", "loss": "0.1043", "code": "@Override public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { msg.getMessage(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 90, "n_pass": [82, 4, 4]}
{"time": "2021-02-13 12:36:00.322238", "score": "0.9492", "loss": "0.1482", "code": " void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { msg.getMessage(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 86, "n_pass": [88, 5, 5]}
{"time": "2021-02-13 12:36:01.650216", "score": "0.9253", "loss": "0.2052", "code": " void sendMessage(Member[] destination,  InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { msg.getMessage(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 82, "n_pass": [92, 6, 6]}
{"time": "2021-02-13 12:36:02.981273", "score": "0.9329", "loss": "0.1816", "code": " void sendMessage(Member[] destination,  InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else {(frag); super.sendMessage(destination, msg, payload); } }", "n_tokens": 78, "n_pass": [104, 7, 7]}
{"time": "2021-02-13 12:36:04.301205", "score": "0.9362", "loss": "0.1738", "code": " void sendMessage(Member[] destination,  InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { super.sendMessage(destination, msg, payload); } }", "n_tokens": 74, "n_pass": [105, 8, 8]}
{"time": "2021-02-13 12:36:06.009352", "score": "0.9367", "loss": "0.1801", "code": " void sendMessage(Member[] destination,  InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { super.sendMessage(destinationmsg, payload); } }", "n_tokens": 72, "n_pass": [163, 9, 9]}
{"time": "2021-02-13 12:36:07.691988", "score": "0.9217", "loss": "0.218", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException {  okToProcess(msg); if (frag) { frag(destination, msg, payload); } else { super.sendMessage(destinationmsg, payload); } }", "n_tokens": 70, "n_pass": [171, 10, 10]}
{"time": "2021-02-13 12:36:09.059984", "score": "0.9594", "loss": "0.1152", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destination, msg, payload); } else { super.sendMessage(destinationmsg, payload); } }", "n_tokens": 68, "n_pass": [180, 11, 11]}
{"time": "2021-02-13 12:36:10.378286", "score": "0.9585", "loss": "0.1231", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); } else { super.sendMessage(destinationmsg, payload); } }", "n_tokens": 66, "n_pass": [189, 12, 12]}
{"time": "2021-02-13 12:36:11.691401", "score": "0.973", "loss": "0.0836", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); } { super.sendMessage(destinationmsg, payload); } }", "n_tokens": 64, "n_pass": [194, 13, 13]}
{"time": "2021-02-13 12:36:21.050948", "score": "0.973", "loss": "0.0836", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{ super.sendMessage(destinationmsg, payload); } }", "n_tokens": 63, "n_pass": [288, 14, 14]}
{"time": "2021-02-13 12:36:22.363165", "score": "0.973", "loss": "0.0836", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(destinationmsg, payload); } }", "n_tokens": 62, "n_pass": [289, 15, 15]}
{"time": "2021-02-13 12:36:25.036108", "score": "0.9742", "loss": "0.079", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg, payload); } }", "n_tokens": 61, "n_pass": [294, 17, 16]}
{"time": "2021-02-13 12:36:26.348246", "score": "0.9742", "loss": "0.079", "code": " void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 60, "n_pass": [297, 18, 17]}
{"time": "2021-02-13 12:36:27.665661", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,  InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 59, "n_pass": [303, 19, 18]}
{"time": "2021-02-13 12:36:29.707434", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination, InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 58, "n_pass": [312, 20, 19]}
{"time": "2021-02-13 12:36:31.019931", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload) throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 57, "n_pass": [313, 21, 20]}
{"time": "2021-02-13 12:36:32.341430", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException { (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 56, "n_pass": [318, 22, 21]}
{"time": "2021-02-13 12:36:33.677314", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{ (msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 55, "n_pass": [322, 23, 22]}
{"time": "2021-02-13 12:36:34.989313", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg); if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 54, "n_pass": [324, 24, 23]}
{"time": "2021-02-13 12:36:36.309629", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if (frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 53, "n_pass": [329, 25, 24]}
{"time": "2021-02-13 12:36:37.622413", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag) { frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 52, "n_pass": [331, 26, 25]}
{"time": "2021-02-13 12:36:38.936174", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){ frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 51, "n_pass": [335, 27, 26]}
{"time": "2021-02-13 12:36:40.247990", "score": "0.9742", "loss": "0.079", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(destinationmsg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 50, "n_pass": [337, 28, 27]}
{"time": "2021-02-13 12:36:41.585588", "score": "0.9766", "loss": "0.0722", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg, payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 49, "n_pass": [340, 29, 28]}
{"time": "2021-02-13 12:36:42.896642", "score": "0.9766", "loss": "0.0722", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg,payload); }{super.sendMessage(msg,payload); } }", "n_tokens": 48, "n_pass": [343, 30, 29]}
{"time": "2021-02-13 12:36:44.211897", "score": "0.9766", "loss": "0.0722", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg,payload);}{super.sendMessage(msg,payload); } }", "n_tokens": 47, "n_pass": [347, 31, 30]}
{"time": "2021-02-13 12:36:46.835227", "score": "0.9781", "loss": "0.0681", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg,payload);}{super.sendMessage(msgpayload); } }", "n_tokens": 46, "n_pass": [355, 33, 31]}
{"time": "2021-02-13 12:36:48.177243", "score": "0.975", "loss": "0.0744", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg,payload);}{super.sendMessage(msg); } }", "n_tokens": 45, "n_pass": [356, 34, 32]}
{"time": "2021-02-13 12:36:50.223966", "score": "0.9782", "loss": "0.0642", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msgpayload);}{super.sendMessage(msg); } }", "n_tokens": 44, "n_pass": [389, 35, 33]}
{"time": "2021-02-13 12:36:51.548453", "score": "0.9795", "loss": "0.0599", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg);}{super.sendMessage(msg); } }", "n_tokens": 43, "n_pass": [390, 36, 34]}
{"time": "2021-02-13 12:36:54.171478", "score": "0.9463", "loss": "0.1558", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){frag(msg);}{super.sendMessage(); } }", "n_tokens": 42, "n_pass": [399, 38, 35]}
{"time": "2021-02-13 12:36:56.208868", "score": "0.871", "loss": "0.3808", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){(msg);}{super.sendMessage(); } }", "n_tokens": 41, "n_pass": [429, 39, 36]}
{"time": "2021-02-13 12:37:00.230267", "score": "0.871", "loss": "0.3808", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){(msg);}{super.sendMessage();} }", "n_tokens": 40, "n_pass": [473, 41, 37]}
{"time": "2021-02-13 12:37:01.534071", "score": "0.871", "loss": "0.3808", "code": "void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){(msg);}{super.sendMessage();}}", "n_tokens": 39, "n_pass": [474, 42, 38]}

Minimal simplified code:
void sendMessage(Member destination,InterceptorPayload payload)throws ChannelException{(msg);if(frag){(msg);}{super.sendMessage();}}

