
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/tang-jie__NettyRPC/src/main/java/com/newlandframework/rpc/parallel/policy/RejectedPolicyType_fromString.java
method_name = fromString
method_body = public static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException("Mismatched type with value=" + value); }
predict, score, loss = fromString, 0.8700916767120361, 0.32845568656921387

Trace of simplified code(s):
{"time": "2021-02-14 02:58:34.321618", "score": "0.8701", "loss": "0.3285", "code": "public static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 87, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:58:36.083515", "score": "0.8701", "loss": "0.3285", "code": "static RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 85, "n_pass": [92, 2, 2]}
{"time": "2021-02-14 02:58:37.429111", "score": "0.8701", "loss": "0.3285", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValue().equalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 83, "n_pass": [93, 3, 3]}
{"time": "2021-02-14 02:58:39.143458", "score": "0.8767", "loss": "0.3278", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { return type; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 80, "n_pass": [108, 4, 4]}
{"time": "2021-02-14 02:58:40.498052", "score": "0.7982", "loss": "0.631", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched type with value=\" + value); }", "n_tokens": 77, "n_pass": [113, 5, 5]}
{"time": "2021-02-14 02:58:43.257258", "score": "0.7325", "loss": "0.8312", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched  value=\" + value); }", "n_tokens": 74, "n_pass": [119, 7, 6]}
{"time": "2021-02-14 02:58:44.617182", "score": "0.7661", "loss": "0.756", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (type.getValueequalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 71, "n_pass": [120, 8, 7]}
{"time": "2021-02-14 02:58:46.361436", "score": "0.7539", "loss": "0.7905", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()) { if (equalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 68, "n_pass": [137, 9, 8]}
{"time": "2021-02-14 02:58:53.609880", "score": "0.7539", "loss": "0.7905", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){ if (equalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 67, "n_pass": [213, 11, 9]}
{"time": "2021-02-14 02:58:54.952983", "score": "0.7539", "loss": "0.7905", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if (equalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 66, "n_pass": [215, 12, 10]}
{"time": "2021-02-14 02:58:56.328934", "score": "0.7539", "loss": "0.7905", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(value.trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 65, "n_pass": [217, 13, 11]}
{"time": "2021-02-14 02:58:57.687112", "score": "0.7555", "loss": "0.8223", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { ; } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 63, "n_pass": [220, 14, 12]}
{"time": "2021-02-14 02:58:59.014219", "score": "0.7555", "loss": "0.8223", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw new IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 61, "n_pass": [225, 15, 13]}
{"time": "2021-02-14 02:59:01.718957", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value) { for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 59, "n_pass": [229, 17, 14]}
{"time": "2021-02-14 02:59:04.351340", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value){ for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 58, "n_pass": [245, 18, 15]}
{"time": "2021-02-14 02:59:05.676863", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value){for (RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 57, "n_pass": [247, 19, 16]}
{"time": "2021-02-14 02:59:07.070027", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type : RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 56, "n_pass": [249, 20, 17]}
{"time": "2021-02-14 02:59:08.450123", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type: RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 55, "n_pass": [254, 21, 18]}
{"time": "2021-02-14 02:59:09.793802", "score": "0.6454", "loss": "1.4489", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType.values()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 54, "n_pass": [256, 22, 19]}
{"time": "2021-02-14 02:59:11.177581", "score": "0.556", "loss": "2.1135", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyTypevalues()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 53, "n_pass": [258, 23, 20]}
{"time": "2021-02-14 02:59:12.508865", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())) { } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 52, "n_pass": [259, 24, 21]}
{"time": "2021-02-14 02:59:21.035881", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){ } } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 51, "n_pass": [334, 27, 22]}
{"time": "2021-02-14 02:59:22.363666", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){} } throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 50, "n_pass": [336, 28, 23]}
{"time": "2021-02-14 02:59:23.702109", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}} throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 49, "n_pass": [338, 29, 24]}
{"time": "2021-02-14 02:59:25.067846", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"Mismatched \" + value); }", "n_tokens": 48, "n_pass": [340, 30, 25]}
{"time": "2021-02-14 02:59:31.864461", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"Mismatched\" + value); }", "n_tokens": 47, "n_pass": [347, 35, 26]}
{"time": "2021-02-14 02:59:33.226534", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"Mismatched\"+ value); }", "n_tokens": 46, "n_pass": [349, 36, 27]}
{"time": "2021-02-14 02:59:34.708801", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"Mismatched\"+value); }", "n_tokens": 45, "n_pass": [351, 37, 28]}
{"time": "2021-02-14 02:59:36.077314", "score": "0.6011", "loss": "1.7252", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"Mismatched\"+value);}", "n_tokens": 44, "n_pass": [355, 38, 29]}
{"time": "2021-02-14 02:59:43.939397", "score": "0.6064", "loss": "1.5254", "code": "RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(\"\"+value);}", "n_tokens": 43, "n_pass": [394, 43, 30]}

Minimal simplified code:
RejectedPolicyType fromString(String value){for(RejectedPolicyType type:RejectedPolicyType()){if(equalsIgnoreCase(trim())){}}throw IllegalArgumentException(""+value);}

