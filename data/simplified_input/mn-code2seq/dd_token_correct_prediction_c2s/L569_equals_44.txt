
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/sections/sections-app-util/src/java/org/sakaiproject/tool/section/jsf/MessagingBean_equals.java
method_name = equals
method_body = public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecorator other = (MessageDecorator) obj; return new EqualsBuilder().append(getSeverity(), other.getSeverity()).append(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }
predict, score, loss = equals, 0.999110758304596, 0.0011027248110622168

Trace of simplified code(s):
{"time": "2021-02-13 18:12:12.003424", "score": "0.999", "loss": "0.0012", "code": "public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecorator other = (MessageDecorator) obj; return new EqualsBuilder().append(getSeverity(), other.getSeverity()).append(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 136, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 18:12:13.341695", "score": "0.9934", "loss": "0.009", "code": "public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 102, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 18:12:14.685173", "score": "0.9812", "loss": "0.0254", "code": "public boolean equals(Object obj) { if (this== null) return false; if (getClass() != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 85, "n_pass": [22, 3, 3]}
{"time": "2021-02-13 18:12:16.013313", "score": "0.9632", "loss": "0.0544", "code": "public boolean equals(Object obj) { if (this != obj.getClass()) return false; MessageDecoratorappend(getDetail(), other.getDetail()).append(getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 68, "n_pass": [23, 4, 4]}
{"time": "2021-02-13 18:12:17.344732", "score": "0.9111", "loss": "0.1274", "code": "public boolean equals(Object obj) { if (this != obj.getClass()) return false; MessageDecoratorappend(getDetail(), getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 59, "n_pass": [39, 5, 5]}
{"time": "2021-02-13 18:12:19.040331", "score": "0.5165", "loss": "0.8189", "code": "public boolean equals(Object obj) { if ( obj.getClass()) return false; MessageDecoratorappend(getDetail(), getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 55, "n_pass": [69, 6, 6]}
{"time": "2021-02-13 18:12:21.695323", "score": "0.6322", "loss": "0.5964", "code": "public boolean equals(Object obj) { if ( obj.getClass()) return false; MessageDecoratorappend( getSummary(), other.getSummary()).isEquals(); }", "n_tokens": 51, "n_pass": [73, 8, 7]}
{"time": "2021-02-13 18:12:24.713395", "score": "0.5789", "loss": "0.75", "code": "public boolean equals(Object obj) { if ( obj.getClass()) return false; MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 49, "n_pass": [111, 10, 8]}
{"time": "2021-02-13 18:12:28.653393", "score": "0.5789", "loss": "0.75", "code": "boolean equals(Object obj) { if ( obj.getClass()) return false; MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 47, "n_pass": [118, 13, 9]}
{"time": "2021-02-13 18:12:30.317998", "score": "0.5876", "loss": "0.6522", "code": "boolean equals(Object obj) { if ( obj()) return false; MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 45, "n_pass": [127, 14, 10]}
{"time": "2021-02-13 18:12:31.627828", "score": "0.6502", "loss": "0.5373", "code": "boolean equals(Object obj) { if ( obj) return false; MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 43, "n_pass": [128, 15, 11]}
{"time": "2021-02-13 18:12:32.937313", "score": "0.445", "loss": "1.1002", "code": "boolean equals(Object obj) { if ( obj) false; MessageDecoratorappend( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 41, "n_pass": [130, 16, 12]}
{"time": "2021-02-13 18:12:35.552216", "score": "0.7294", "loss": "0.4632", "code": "boolean equals(Object obj) { if ( obj) false;append( getSummary, other.getSummary()).isEquals(); }", "n_tokens": 39, "n_pass": [132, 18, 13]}
{"time": "2021-02-13 18:12:36.908225", "score": "0.7177", "loss": "0.5551", "code": "boolean equals(Object obj) { if ( obj) false;append( getSummaryother.getSummary()).isEquals(); }", "n_tokens": 37, "n_pass": [135, 19, 14]}
{"time": "2021-02-13 18:12:38.212839", "score": "0.6198", "loss": "0.6368", "code": "boolean equals(Object obj) { if ( obj) false;append( getSummarygetSummary()).isEquals(); }", "n_tokens": 35, "n_pass": [136, 20, 15]}
{"time": "2021-02-13 18:12:41.551672", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj) { if ( obj) false;append(getSummary()).isEquals(); }", "n_tokens": 33, "n_pass": [152, 22, 16]}
{"time": "2021-02-13 18:12:48.283966", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj){ if ( obj) false;append(getSummary()).isEquals(); }", "n_tokens": 32, "n_pass": [214, 24, 17]}
{"time": "2021-02-13 18:12:49.594240", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj){if ( obj) false;append(getSummary()).isEquals(); }", "n_tokens": 31, "n_pass": [215, 25, 18]}
{"time": "2021-02-13 18:12:51.284474", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj){if( obj) false;append(getSummary()).isEquals(); }", "n_tokens": 30, "n_pass": [217, 26, 19]}
{"time": "2021-02-13 18:12:52.595688", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj){if(obj) false;append(getSummary()).isEquals(); }", "n_tokens": 29, "n_pass": [219, 27, 20]}
{"time": "2021-02-13 18:12:53.944749", "score": "0.6678", "loss": "0.4975", "code": "boolean equals(Object obj){if(obj)false;append(getSummary()).isEquals(); }", "n_tokens": 28, "n_pass": [222, 28, 21]}
{"time": "2021-02-13 18:12:57.863021", "score": "0.7442", "loss": "0.3839", "code": "boolean equals(Object obj){if(obj)false;(getSummary()).isEquals(); }", "n_tokens": 27, "n_pass": [225, 31, 22]}
{"time": "2021-02-13 18:13:02.199740", "score": "0.7442", "loss": "0.3839", "code": "boolean equals(Object obj){if(obj)false;(getSummary()).isEquals();}", "n_tokens": 26, "n_pass": [260, 33, 23]}

Minimal simplified code:
boolean equals(Object obj){if(obj)false;(getSummary()).isEquals();}

