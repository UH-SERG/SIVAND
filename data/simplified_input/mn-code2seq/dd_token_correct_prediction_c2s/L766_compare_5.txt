
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/protyposis__MediaPlayer-Extended/MediaPlayer/src/main/java/net/protyposis/android/mediaplayer/Timeline_compare.java
method_name = compare
method_body = @Override public int compare(Cue lhs, Cue rhs) { if (lhs.getTime() == rhs.getTime()) { return 0; } else if (lhs.getTime() < rhs.getTime()) { return -1; } else { return 1; } }
predict, score, loss = compare, 0.9992283582687378, 0.00443678954616189

Trace of simplified code(s):
{"time": "2021-02-13 21:43:19.102752", "score": "0.9992", "loss": "0.0044", "code": "@Override public int compare(Cue lhs, Cue rhs) { if (lhs.getTime() == rhs.getTime()) { return 0; } else if (lhs.getTime() < rhs.getTime()) { return -1; } else { return 1; } }", "n_tokens": 91, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 21:43:20.435312", "score": "0.998", "loss": "0.0088", "code": "@Override public int compare(Cue lhs, Cue rhs) { if (lhs.getTime() == rhs.getTime()) { return 0; } else if (lhs) { return -1; } else { return 1; } }", "n_tokens": 79, "n_pass": [25, 2, 2]}
{"time": "2021-02-13 21:43:21.748603", "score": "0.9898", "loss": "0.0893", "code": "int compare(Cue lhs, Cue rhs) { if (lhs.getTime() == rhs.getTime()) { return 0; } else if (lhs) { return -1; } else { return 1; } }", "n_tokens": 74, "n_pass": [51, 3, 3]}
{"time": "2021-02-13 21:43:24.410468", "score": "0.9626", "loss": "0.1801", "code": "int compare(Cue lhs, Cue rhs) { if (lhs= rhs.getTime()) { return 0; } else if (lhs) { return -1; } else { return 1; } }", "n_tokens": 68, "n_pass": [56, 5, 4]}
{"time": "2021-02-13 21:43:27.057835", "score": "0.9505", "loss": "0.1904", "code": "int compare(Cue lhs, Cue rhs) { if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else { return 1; } }", "n_tokens": 65, "n_pass": [93, 7, 5]}
{"time": "2021-02-13 21:43:28.747130", "score": "0.9525", "loss": "0.1807", "code": "int compare(Cue lhs, Cue rhs) { if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {1; } }", "n_tokens": 62, "n_pass": [105, 8, 6]}
{"time": "2021-02-13 21:43:30.072968", "score": "0.9421", "loss": "0.2227", "code": "int compare(Cue lhs, Cue rhs) { if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 59, "n_pass": [106, 9, 7]}
{"time": "2021-02-13 21:43:36.182236", "score": "0.9421", "loss": "0.2227", "code": "int compare(Cue lhs,Cue rhs) { if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 58, "n_pass": [180, 10, 8]}
{"time": "2021-02-13 21:43:37.483774", "score": "0.9421", "loss": "0.2227", "code": "int compare(Cue lhs,Cue rhs){ if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 57, "n_pass": [185, 11, 9]}
{"time": "2021-02-13 21:43:38.790785", "score": "0.9421", "loss": "0.2227", "code": "int compare(Cue lhs,Cue rhs){if (lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 56, "n_pass": [187, 12, 10]}
{"time": "2021-02-13 21:43:40.095752", "score": "0.9421", "loss": "0.2227", "code": "int compare(Cue lhs,Cue rhs){if(lhs.getTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 55, "n_pass": [189, 13, 11]}
{"time": "2021-02-13 21:43:41.408281", "score": "0.9292", "loss": "0.5471", "code": "int compare(Cue lhs,Cue rhs){if(lhsgetTime()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 54, "n_pass": [192, 14, 12]}
{"time": "2021-02-13 21:43:42.712285", "score": "0.9235", "loss": "0.4804", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) { return 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 53, "n_pass": [193, 15, 13]}
{"time": "2021-02-13 21:43:44.063974", "score": "0.8753", "loss": "0.5072", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) { 0; } else if (lhs) { return -1; } else {} }", "n_tokens": 51, "n_pass": [198, 16, 14]}
{"time": "2021-02-13 21:43:45.351664", "score": "0.8638", "loss": "0.6213", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {; } else if (lhs) { return -1; } else {} }", "n_tokens": 49, "n_pass": [199, 17, 15]}
{"time": "2021-02-13 21:43:46.653633", "score": "0.8638", "loss": "0.6213", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} else if (lhs) { return -1; } else {} }", "n_tokens": 47, "n_pass": [200, 18, 16]}
{"time": "2021-02-13 21:43:47.972627", "score": "0.7839", "loss": "0.6846", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { return -1; } else {} }", "n_tokens": 45, "n_pass": [202, 19, 17]}
{"time": "2021-02-13 21:43:49.635485", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { return ; } else {} }", "n_tokens": 43, "n_pass": [208, 20, 18]}
{"time": "2021-02-13 21:43:50.938382", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { return ; } {} }", "n_tokens": 41, "n_pass": [211, 21, 19]}
{"time": "2021-02-13 21:43:52.234038", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { return ; }  }", "n_tokens": 39, "n_pass": [212, 22, 20]}
{"time": "2021-02-13 21:43:54.249236", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { ; }  }", "n_tokens": 37, "n_pass": [239, 23, 21]}
{"time": "2021-02-13 21:43:55.574844", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { }  }", "n_tokens": 35, "n_pass": [240, 24, 22]}
{"time": "2021-02-13 21:43:59.943966", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { } }", "n_tokens": 34, "n_pass": [284, 25, 23]}
{"time": "2021-02-13 21:44:01.262779", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()) {} if (lhs) { }}", "n_tokens": 33, "n_pass": [285, 26, 24]}
{"time": "2021-02-13 21:44:03.288624", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()){} if (lhs) { }}", "n_tokens": 32, "n_pass": [306, 27, 25]}
{"time": "2021-02-13 21:44:04.585889", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()){}if (lhs) { }}", "n_tokens": 31, "n_pass": [309, 28, 26]}
{"time": "2021-02-13 21:44:05.889297", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()){}if(lhs) { }}", "n_tokens": 30, "n_pass": [311, 29, 27]}
{"time": "2021-02-13 21:44:07.188084", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()){}if(lhs){ }}", "n_tokens": 29, "n_pass": [315, 30, 28]}
{"time": "2021-02-13 21:44:08.498845", "score": "0.7268", "loss": "0.9032", "code": "int compare(Cue lhs,Cue rhs){if(lhs()){}if(lhs){}}", "n_tokens": 28, "n_pass": [317, 31, 29]}

Minimal simplified code:
int compare(Cue lhs,Cue rhs){if(lhs()){}if(lhs){}}

