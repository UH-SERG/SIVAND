
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey_equals.java
method_name = equals
method_body = public boolean equals(Object o) { if (o == this) { return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey) o; return treeDigest.equals(otherKey.treeDigest) && Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }
predict, score, loss = equals, 0.9758007526397705, 0.034973371773958206

Trace of simplified code(s):
{"time": "2021-02-14 03:28:21.379607", "score": "0.9758", "loss": "0.035", "code": "public boolean equals(Object o) { if (o == this) { return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey) o; return treeDigest.equals(otherKey.treeDigest) && Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 101, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 03:28:23.058459", "score": "0.9294", "loss": "0.101", "code": "public boolean equals(Object o) {{ return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey) o; return treeDigest.equals(otherKey.treeDigest) && Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 89, "n_pass": [21, 2, 2]}
{"time": "2021-02-14 03:28:24.383657", "score": "0.9089", "loss": "0.1696", "code": "public boolean equals(Object o) {{ return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey)treeDigest.equals(otherKey.treeDigest) && Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 83, "n_pass": [48, 3, 3]}
{"time": "2021-02-14 03:28:25.725367", "score": "0.893", "loss": "0.1922", "code": "public boolean equals(Object o) {{ return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey)(otherKey.treeDigest) && Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 80, "n_pass": [88, 4, 4]}
{"time": "2021-02-14 03:28:27.029886", "score": "0.8561", "loss": "0.2695", "code": "public boolean equals(Object o) {{ return true; } if (o instanceof BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey)(otherKey.treeDigest) Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 77, "n_pass": [90, 5, 5]}
{"time": "2021-02-14 03:28:30.090142", "score": "0.6653", "loss": "0.721", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (BCXMSSPrivateKey)(otherKey.treeDigest) Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 74, "n_pass": [107, 7, 6]}
{"time": "2021-02-14 03:28:31.387881", "score": "0.601", "loss": "0.7861", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (otherKey.treeDigest) Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 71, "n_pass": [112, 8, 7]}
{"time": "2021-02-14 03:28:38.342221", "score": "0.48", "loss": "1.0681", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest) Arrays.areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 69, "n_pass": [182, 11, 8]}
{"time": "2021-02-14 03:28:39.626191", "score": "0.5258", "loss": "0.9299", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams.toByteArray(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 67, "n_pass": [184, 12, 9]}
{"time": "2021-02-14 03:28:40.911790", "score": "0.4788", "loss": "1.0441", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), otherKey.keyParams.toByteArray()); } return false; }", "n_tokens": 65, "n_pass": [187, 13, 10]}
{"time": "2021-02-14 03:28:43.519525", "score": "0.3994", "loss": "1.2659", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), keyParams.toByteArray()); } return false; }", "n_tokens": 63, "n_pass": [190, 15, 11]}
{"time": "2021-02-14 03:28:44.798673", "score": "0.4448", "loss": "1.0646", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); } return false; }", "n_tokens": 61, "n_pass": [191, 16, 12]}
{"time": "2021-02-14 03:28:46.102908", "score": "0.6317", "loss": "0.7304", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); } false; }", "n_tokens": 59, "n_pass": [196, 17, 13]}
{"time": "2021-02-14 03:28:47.379533", "score": "0.4444", "loss": "1.187", "code": "public boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 57, "n_pass": [197, 18, 14]}
{"time": "2021-02-14 03:28:48.663727", "score": "0.4444", "loss": "1.187", "code": " boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 56, "n_pass": [199, 19, 15]}
{"time": "2021-02-14 03:28:49.972950", "score": "0.4444", "loss": "1.187", "code": "boolean equals(Object o) {{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 55, "n_pass": [200, 20, 16]}
{"time": "2021-02-14 03:28:51.986938", "score": "0.4444", "loss": "1.187", "code": "boolean equals(Object o){{ return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 54, "n_pass": [209, 21, 17]}
{"time": "2021-02-14 03:28:53.274515", "score": "0.4444", "loss": "1.187", "code": "boolean equals(Object o){{return true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 53, "n_pass": [212, 22, 18]}
{"time": "2021-02-14 03:28:54.558522", "score": "0.4159", "loss": "1.4326", "code": "boolean equals(Object o){{ true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 52, "n_pass": [213, 23, 19]}
{"time": "2021-02-14 03:28:55.870971", "score": "0.4159", "loss": "1.4326", "code": "boolean equals(Object o){{true; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 51, "n_pass": [214, 24, 20]}
{"time": "2021-02-14 03:28:57.153724", "score": "0.4214", "loss": "1.4551", "code": "boolean equals(Object o){{; } if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 50, "n_pass": [215, 25, 21]}
{"time": "2021-02-14 03:28:58.432989", "score": "0.4214", "loss": "1.4551", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { BCXMSSPrivateKey otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 48, "n_pass": [216, 26, 22]}
{"time": "2021-02-14 03:28:59.702927", "score": "0.4554", "loss": "1.2381", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey = (treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 46, "n_pass": [222, 27, 23]}
{"time": "2021-02-14 03:29:08.240800", "score": "0.4554", "loss": "1.2381", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest).areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 45, "n_pass": [287, 30, 24]}
{"time": "2021-02-14 03:29:09.509812", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(), toByteArray()); }  }", "n_tokens": 44, "n_pass": [290, 31, 25]}
{"time": "2021-02-14 03:29:10.801903", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray()); }  }", "n_tokens": 43, "n_pass": [297, 32, 26]}
{"time": "2021-02-14 03:29:12.116664", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}  }", "n_tokens": 42, "n_pass": [303, 33, 27]}
{"time": "2021-02-14 03:29:13.387462", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());} }", "n_tokens": 41, "n_pass": [305, 34, 28]}
{"time": "2021-02-14 03:29:14.656564", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{} if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 40, "n_pass": [306, 35, 29]}
{"time": "2021-02-14 03:29:16.654316", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if ( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 39, "n_pass": [319, 36, 30]}
{"time": "2021-02-14 03:29:17.928064", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if( BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 38, "n_pass": [321, 37, 31]}
{"time": "2021-02-14 03:29:19.192067", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if(BCXMSSPrivateKey) { otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 37, "n_pass": [323, 38, 32]}
{"time": "2021-02-14 03:29:20.462544", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if(BCXMSSPrivateKey){ otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 36, "n_pass": [326, 39, 33]}
{"time": "2021-02-14 03:29:21.737974", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if(BCXMSSPrivateKey){otherKey =(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 35, "n_pass": [328, 40, 34]}
{"time": "2021-02-14 03:29:23.008989", "score": "0.4157", "loss": "1.315", "code": "boolean equals(Object o){{}if(BCXMSSPrivateKey){otherKey=(treeDigest)areEqual(keyParams(),toByteArray());}}", "n_tokens": 34, "n_pass": [330, 41, 35]}

Minimal simplified code:
boolean equals(Object o){{}if(BCXMSSPrivateKey){otherKey=(treeDigest)areEqual(keyParams(),toByteArray());}}

