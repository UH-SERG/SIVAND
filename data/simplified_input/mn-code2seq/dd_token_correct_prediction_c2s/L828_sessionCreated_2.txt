
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/kaazing__gateway/transport/spi/src/main/java/org/kaazing/gateway/transport/LoggingFilter_sessionCreated.java
method_name = sessionCreated
method_body = @Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session); IoFilterChain filterChain = session.getFilterChain(); Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }
predict, score, loss = sessionCreated, 0.9985990524291992, 0.0032955852802842855

Trace of simplified code(s):
{"time": "2021-02-13 22:50:40.535952", "score": "0.9872", "loss": "0.035", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session); IoFilterChain filterChain = session.getFilterChain(); Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 111, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 22:50:42.673923", "score": "0.998", "loss": "0.0046", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);Entry entry = filterChain.getEntry(this); if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 97, "n_pass": [23, 2, 2]}
{"time": "2021-02-13 22:50:44.061979", "score": "0.999", "loss": "0.0024", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.remove(); filterChain.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 83, "n_pass": [24, 3, 3]}
{"time": "2021-02-13 22:50:45.506607", "score": "0.9983", "loss": "0.0041", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName(), entry.getFilter()); } }", "n_tokens": 76, "n_pass": [45, 4, 4]}
{"time": "2021-02-13 22:50:46.882643", "score": "0.9983", "loss": "0.004", "code": "@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 69, "n_pass": [46, 5, 5]}
{"time": "2021-02-13 22:50:48.722042", "score": "0.9973", "loss": "0.0064", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session); super.sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 66, "n_pass": [79, 6, 6]}
{"time": "2021-02-13 22:50:50.115408", "score": "0.8336", "loss": "0.6659", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entry != null) { entry.addLast(entry.getName()); } }", "n_tokens": 63, "n_pass": [88, 7, 7]}
{"time": "2021-02-13 22:50:51.500445", "score": "0.7507", "loss": "1.0405", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) { entry.addLast(entry.getName()); } }", "n_tokens": 59, "n_pass": [92, 8, 8]}
{"time": "2021-02-13 22:50:52.845310", "score": "0.8658", "loss": "0.5738", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry.getName()); } }", "n_tokens": 55, "n_pass": [94, 9, 9]}
{"time": "2021-02-13 22:50:55.619363", "score": "0.8459", "loss": "0.673", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry()); } }", "n_tokens": 53, "n_pass": [144, 10, 10]}
{"time": "2021-02-13 22:50:56.993944", "score": "0.802", "loss": "0.8966", "code": "public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 51, "n_pass": [145, 11, 11]}
{"time": "2021-02-13 22:50:58.383453", "score": "0.802", "loss": "0.8966", "code": " void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 50, "n_pass": [149, 12, 12]}
{"time": "2021-02-13 22:50:59.716783", "score": "0.802", "loss": "0.8966", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception { logSessionCreated(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 49, "n_pass": [150, 13, 13]}
{"time": "2021-02-13 22:51:01.824093", "score": "0.9361", "loss": "0.2821", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated(nextFilter, session);if (entrynull) {(entry); } }", "n_tokens": 47, "n_pass": [164, 14, 14]}
{"time": "2021-02-13 22:51:03.194739", "score": "0.8863", "loss": "0.537", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated( session);if (entrynull) {(entry); } }", "n_tokens": 45, "n_pass": [168, 15, 15]}
{"time": "2021-02-13 22:51:04.563646", "score": "0.687", "loss": "1.5161", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if (entrynull) {(entry); } }", "n_tokens": 43, "n_pass": [169, 16, 16]}
{"time": "2021-02-13 22:51:10.768213", "score": "0.687", "loss": "1.5161", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(entrynull) {(entry); } }", "n_tokens": 42, "n_pass": [232, 17, 17]}
{"time": "2021-02-13 22:51:12.135944", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null) {(entry); } }", "n_tokens": 41, "n_pass": [234, 18, 18]}
{"time": "2021-02-13 22:51:13.506169", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry); } }", "n_tokens": 40, "n_pass": [237, 19, 19]}
{"time": "2021-02-13 22:51:14.849695", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);} }", "n_tokens": 39, "n_pass": [243, 20, 20]}
{"time": "2021-02-13 22:51:16.212228", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 38, "n_pass": [245, 21, 21]}
{"time": "2021-02-13 22:51:18.312379", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 37, "n_pass": [255, 22, 22]}
{"time": "2021-02-13 22:51:19.685689", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception {(session);sessionCreated();if(null){(entry);}}", "n_tokens": 36, "n_pass": [260, 23, 23]}
{"time": "2021-02-13 22:51:21.121217", "score": "0.7876", "loss": "0.9807", "code": "void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception{(session);sessionCreated();if(null){(entry);}}", "n_tokens": 35, "n_pass": [264, 24, 24]}

Minimal simplified code:
void sessionCreated(NextFilter nextFilter,IoSession session)throws Exception{(session);sessionCreated();if(null){(entry);}}

