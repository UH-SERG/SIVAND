
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jayrambhia__Tooltip/tooltip/src/main/java/com/fenchtose/tooltip/Tooltip_onMeasure.java
method_name = onMeasure
method_body = @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); View child = getChildAt(0); measureChild(child, widthMeasureSpec, heightMeasureSpec); if (debug) { Log.i(TAG, "child measured width: " + child.getMeasuredWidth()); } }
predict, score, loss = onMeasure, 0.999126672744751, 0.0017631746595725417

Trace of simplified code(s):
{"time": "2021-02-13 23:05:58.461812", "score": "0.9991", "loss": "0.0018", "code": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); View child = getChildAt(0); measureChild(child, widthMeasureSpec, heightMeasureSpec); if (debug) { Log.i(TAG, \"child measured width: \" + child.getMeasuredWidth()); } }", "n_tokens": 94, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:05:59.832237", "score": "0.9321", "loss": "0.1497", "code": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(0); measureChild(child, widthMeasureSpec, heightMeasureSpec); if (debug) { Log.i(TAG, \"child measured width: \" + child.getMeasuredWidth()); } }", "n_tokens": 82, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 23:06:01.192078", "score": "0.8999", "loss": "0.2277", "code": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(0); measureChild(child, widthMeasureSpec, heightMeasureSpec); if (debug) { Log.i(TAG, child.getMeasuredWidth()); } }", "n_tokens": 70, "n_pass": [26, 3, 3]}
{"time": "2021-02-13 23:06:03.880312", "score": "0.9804", "loss": "0.0458", "code": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(child, widthMeasureSpec, heightMeasureSpec); if (debug) { Log.i(TAG, child.getMeasuredWidth()); } }", "n_tokens": 64, "n_pass": [52, 5, 4]}
{"time": "2021-02-13 23:06:05.234422", "score": "0.9916", "loss": "0.023", "code": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG, child.getMeasuredWidth()); } }", "n_tokens": 58, "n_pass": [53, 6, 5]}
{"time": "2021-02-13 23:06:06.578615", "score": "0.8494", "loss": "0.5773", "code": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG, child.getMeasuredWidth()); } }", "n_tokens": 53, "n_pass": [59, 7, 6]}
{"time": "2021-02-13 23:06:08.326708", "score": "0.8662", "loss": "0.5105", "code": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG,getMeasuredWidth()); } }", "n_tokens": 50, "n_pass": [101, 8, 7]}
{"time": "2021-02-13 23:06:12.065691", "score": "0.8631", "loss": "0.4939", "code": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG()); } }", "n_tokens": 48, "n_pass": [153, 9, 8]}
{"time": "2021-02-13 23:06:13.372596", "score": "0.8392", "loss": "0.6251", "code": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 46, "n_pass": [154, 10, 9]}
{"time": "2021-02-13 23:06:15.438595", "score": "0.8392", "loss": "0.6251", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec) { superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 45, "n_pass": [166, 11, 10]}
{"time": "2021-02-13 23:06:16.823110", "score": "0.8392", "loss": "0.6251", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){ superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 44, "n_pass": [171, 12, 11]}
{"time": "2021-02-13 23:06:18.163656", "score": "0.8392", "loss": "0.6251", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){superchild = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 43, "n_pass": [173, 13, 12]}
{"time": "2021-02-13 23:06:19.475235", "score": "0.9195", "loss": "0.2988", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){child = getChildAt(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 42, "n_pass": [174, 14, 13]}
{"time": "2021-02-13 23:06:20.830452", "score": "0.9209", "loss": "0.3236", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){child =(heightMeasureSpec); if (debug) { Log.i(TAG); } }", "n_tokens": 40, "n_pass": [177, 15, 14]}
{"time": "2021-02-13 23:06:22.173851", "score": "0.9679", "loss": "0.1151", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){child =(heightMeasureSpec); if (debug) { Log(TAG); } }", "n_tokens": 38, "n_pass": [185, 16, 15]}
{"time": "2021-02-13 23:06:24.228119", "score": "0.959", "loss": "0.1379", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){child(heightMeasureSpec); if (debug) { Log(TAG); } }", "n_tokens": 36, "n_pass": [204, 17, 16]}
{"time": "2021-02-13 23:06:25.583466", "score": "0.9785", "loss": "0.0858", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){child(heightMeasureSpec); if (debug) {(TAG); } }", "n_tokens": 34, "n_pass": [211, 18, 17]}
{"time": "2021-02-13 23:06:27.633443", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec); if (debug) {(TAG); } }", "n_tokens": 33, "n_pass": [229, 19, 18]}
{"time": "2021-02-13 23:06:32.048382", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec); if(debug) {(TAG); } }", "n_tokens": 32, "n_pass": [274, 20, 19]}
{"time": "2021-02-13 23:06:33.379662", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec); if(debug){(TAG); } }", "n_tokens": 31, "n_pass": [277, 21, 20]}
{"time": "2021-02-13 23:06:34.711695", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec); if(debug){(TAG);} }", "n_tokens": 30, "n_pass": [283, 22, 21]}
{"time": "2021-02-13 23:06:36.046573", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec); if(debug){(TAG);}}", "n_tokens": 29, "n_pass": [285, 23, 22]}
{"time": "2021-02-13 23:06:38.101376", "score": "0.9785", "loss": "0.112", "code": "void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec);if(debug){(TAG);}}", "n_tokens": 28, "n_pass": [304, 24, 23]}

Minimal simplified code:
void onMeasure(int widthMeasureSpec,int heightMeasureSpec){(heightMeasureSpec);if(debug){(TAG);}}

