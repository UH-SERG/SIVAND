
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/org/forgerock/openam/sm/config/CacheKey_equals.java
method_name = equals
method_body = @Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals(source, cacheKey.source) && Objects.equals(realm, cacheKey.realm); }
predict, score, loss = equals, 0.9943554401397705, 0.006943483371287584

Trace of simplified code(s):
{"time": "2021-02-13 04:53:06.198408", "score": "0.9944", "loss": "0.0069", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals(source, cacheKey.source) && Objects.equals(realm, cacheKey.realm); }", "n_tokens": 102, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:53:07.544176", "score": "0.9964", "loss": "0.0045", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKey = (CacheKey) other; return Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 89, "n_pass": [26, 2, 2]}
{"time": "2021-02-13 04:53:09.269070", "score": "0.9914", "loss": "0.0104", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother; return Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 82, "n_pass": [59, 3, 3]}
{"time": "2021-02-13 04:53:10.989063", "score": "0.9882", "loss": "0.0151", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;Objects.equals.equals(realm, cacheKey.realm); }", "n_tokens": 79, "n_pass": [100, 4, 4]}
{"time": "2021-02-13 04:53:12.320573", "score": "0.9907", "loss": "0.0121", "code": "@Override public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 75, "n_pass": [101, 5, 5]}
{"time": "2021-02-13 04:53:13.657559", "score": "0.9843", "loss": "0.0228", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(other instanceof CacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 72, "n_pass": [105, 6, 6]}
{"time": "2021-02-13 04:53:16.688100", "score": "0.9601", "loss": "0.0597", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { return false; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 69, "n_pass": [119, 8, 7]}
{"time": "2021-02-13 04:53:18.004756", "score": "0.93", "loss": "0.1061", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; } CacheKey cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 66, "n_pass": [122, 9, 8]}
{"time": "2021-02-13 04:53:19.353706", "score": "0.6592", "loss": "0.6947", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }cacheKeyother;equals(realm, cacheKey.realm); }", "n_tokens": 63, "n_pass": [124, 10, 9]}
{"time": "2021-02-13 04:53:20.666987", "score": "0.9135", "loss": "0.1376", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals(realm, cacheKey.realm); }", "n_tokens": 60, "n_pass": [125, 11, 10]}
{"time": "2021-02-13 04:53:26.018607", "score": "0.931", "loss": "0.1129", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey.realm); }", "n_tokens": 58, "n_pass": [184, 13, 11]}
{"time": "2021-02-13 04:53:27.329853", "score": "0.8778", "loss": "0.2332", "code": "public boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 56, "n_pass": [186, 14, 12]}
{"time": "2021-02-13 04:53:28.640610", "score": "0.8778", "loss": "0.2332", "code": " boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 55, "n_pass": [189, 15, 13]}
{"time": "2021-02-13 04:53:29.951752", "score": "0.8778", "loss": "0.2332", "code": "boolean equals(Object other) { if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 54, "n_pass": [190, 16, 14]}
{"time": "2021-02-13 04:53:32.011654", "score": "0.8778", "loss": "0.2332", "code": "boolean equals(Object other){ if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 53, "n_pass": [199, 17, 15]}
{"time": "2021-02-13 04:53:33.316799", "score": "0.8778", "loss": "0.2332", "code": "boolean equals(Object other){if (this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 52, "n_pass": [201, 18, 16]}
{"time": "2021-02-13 04:53:34.635780", "score": "0.8778", "loss": "0.2332", "code": "boolean equals(Object other){if(this == other) { return true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 51, "n_pass": [203, 19, 17]}
{"time": "2021-02-13 04:53:35.975034", "score": "0.7883", "loss": "0.4292", "code": "boolean equals(Object other){if(this == other) { true; } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 49, "n_pass": [210, 20, 18]}
{"time": "2021-02-13 04:53:37.276737", "score": "0.8065", "loss": "0.3938", "code": "boolean equals(Object other){if(this == other) {  } if (!(otherCacheKey)) { ; }equals( cacheKey); }", "n_tokens": 47, "n_pass": [211, 21, 19]}
{"time": "2021-02-13 04:53:38.591281", "score": "0.8065", "loss": "0.3938", "code": "boolean equals(Object other){if(this == other) {  } if (!(otherCacheKey)) { }equals( cacheKey); }", "n_tokens": 45, "n_pass": [219, 22, 20]}
{"time": "2021-02-13 04:53:39.907805", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this == other) {  } if (!(otherCacheKey)) { }equals(); }", "n_tokens": 43, "n_pass": [222, 23, 21]}
{"time": "2021-02-13 04:53:45.603141", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this == other) {  } if (!(otherCacheKey)) { }equals();}", "n_tokens": 42, "n_pass": [284, 24, 22]}
{"time": "2021-02-13 04:53:47.665725", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this== other) {  } if (!(otherCacheKey)) { }equals();}", "n_tokens": 41, "n_pass": [297, 25, 23]}
{"time": "2021-02-13 04:53:49.694596", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other) {  } if (!(otherCacheKey)) { }equals();}", "n_tokens": 40, "n_pass": [300, 26, 24]}
{"time": "2021-02-13 04:53:50.996150", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other){  } if (!(otherCacheKey)) { }equals();}", "n_tokens": 39, "n_pass": [303, 27, 25]}
{"time": "2021-02-13 04:53:52.324657", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other){ } if (!(otherCacheKey)) { }equals();}", "n_tokens": 38, "n_pass": [305, 28, 26]}
{"time": "2021-02-13 04:53:53.630436", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other){} if (!(otherCacheKey)) { }equals();}", "n_tokens": 37, "n_pass": [306, 29, 27]}
{"time": "2021-02-13 04:53:54.977887", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other){}if (!(otherCacheKey)) { }equals();}", "n_tokens": 36, "n_pass": [308, 30, 28]}
{"time": "2021-02-13 04:53:56.294342", "score": "0.7938", "loss": "0.394", "code": "boolean equals(Object other){if(this==other){}if(!(otherCacheKey)) { }equals();}", "n_tokens": 35, "n_pass": [310, 31, 29]}
{"time": "2021-02-13 04:53:57.596201", "score": "0.781", "loss": "0.4255", "code": "boolean equals(Object other){if(this==other){}if((otherCacheKey)) { }equals();}", "n_tokens": 34, "n_pass": [312, 32, 30]}
{"time": "2021-02-13 04:53:58.893566", "score": "0.8158", "loss": "0.3658", "code": "boolean equals(Object other){if(this==other){}if((CacheKey)) { }equals();}", "n_tokens": 33, "n_pass": [314, 33, 31]}
{"time": "2021-02-13 04:54:00.220567", "score": "0.8158", "loss": "0.3658", "code": "boolean equals(Object other){if(this==other){}if((CacheKey)){ }equals();}", "n_tokens": 32, "n_pass": [318, 34, 32]}
{"time": "2021-02-13 04:54:01.518799", "score": "0.8158", "loss": "0.3658", "code": "boolean equals(Object other){if(this==other){}if((CacheKey)){}equals();}", "n_tokens": 31, "n_pass": [320, 35, 33]}

Minimal simplified code:
boolean equals(Object other){if(this==other){}if((CacheKey)){}equals();}

