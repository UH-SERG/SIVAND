
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/googlesamples__androidtv-Leanback/app/src/main/java/com/example/android/tvleanback/ui/SearchFragment_onActivityResult.java
method_name = onActivityResult
method_body = @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true); break; default: if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, "Voice search canceled"); getView().findViewById(R.id.lb_search_bar_speech_orb).requestFocus(); } } break; } break; } }
predict, score, loss = onActivityResult, 0.9828733801841736, 0.05826648324728012

Trace of simplified code(s):
{"time": "2021-02-14 01:49:50.804285", "score": "0.9829", "loss": "0.0583", "code": "@Override public void onActivityResult(int requestCode, int resultCode, Intent data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true); break; default: if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"Voice search canceled\"); getView().findViewById(R.id.lb_search_bar_speech_orb).requestFocus(); } } break; } break; } }", "n_tokens": 160, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 01:49:52.193729", "score": "0.9857", "loss": "0.0473", "code": "@Override public void onActivityResult(int requestCode, int resultCode, Intent data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true); break; default: if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"Voice search canceled\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 140, "n_pass": [26, 2, 2]}
{"time": "2021-02-14 01:49:53.567062", "score": "0.6062", "loss": "2.7077", "code": "@Override public void onActivityResult(int data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true); break; default: if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"Voice search canceled\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 130, "n_pass": [50, 3, 3]}
{"time": "2021-02-14 01:49:54.963615", "score": "0.6187", "loss": "2.561", "code": "@Override public void onActivityResult(int data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"Voice search canceled\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 125, "n_pass": [98, 4, 4]}
{"time": "2021-02-14 01:49:57.672811", "score": "0.6517", "loss": "2.114", "code": "@Override public void onActivityResult(int data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 120, "n_pass": [107, 6, 5]}
{"time": "2021-02-14 01:49:59.048701", "score": "0.5041", "loss": "3.6516", "code": "void onActivityResult(int data) { switch(requestCode) { case REQUEST_SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 115, "n_pass": [113, 7, 6]}
{"time": "2021-02-14 01:50:02.298062", "score": "0.4988", "loss": "3.7956", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.RESULT_OK: setSearchQuery(data, true);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 113, "n_pass": [193, 9, 7]}
{"time": "2021-02-14 01:50:05.129563", "score": "0.4751", "loss": "3.9839", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK: setSearchQuery(data, true);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 111, "n_pass": [201, 11, 8]}
{"time": "2021-02-14 01:50:06.504527", "score": "0.4351", "loss": "4.3956", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK: setSearchQuery(datatrue);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } break; } break; } }", "n_tokens": 109, "n_pass": [205, 12, 9]}
{"time": "2021-02-14 01:50:10.719957", "score": "0.4351", "loss": "4.3956", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK: setSearchQuery(datatrue);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } break; } }", "n_tokens": 106, "n_pass": [225, 15, 10]}
{"time": "2021-02-14 01:50:12.058268", "score": "0.4351", "loss": "4.3956", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK: setSearchQuery(datatrue);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 103, "n_pass": [227, 16, 11]}
{"time": "2021-02-14 01:50:15.195412", "score": "0.3971", "loss": "4.9975", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON_RECOGNIZER_CANCELED) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 101, "n_pass": [247, 18, 12]}
{"time": "2021-02-14 01:50:17.878744", "score": "0.3128", "loss": "6.3438", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON_) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 98, "n_pass": [253, 20, 13]}
{"time": "2021-02-14 01:50:32.322513", "score": "0.3128", "loss": "6.3438", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON) { if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 97, "n_pass": [374, 26, 14]}
{"time": "2021-02-14 01:50:33.655983", "score": "0.3128", "loss": "6.3438", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){ if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 96, "n_pass": [376, 27, 15]}
{"time": "2021-02-14 01:50:34.998101", "score": "0.3128", "loss": "6.3438", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if (!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 95, "n_pass": [378, 28, 16]}
{"time": "2021-02-14 01:50:36.330586", "score": "0.3128", "loss": "6.3438", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(!hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 94, "n_pass": [380, 29, 17]}
{"time": "2021-02-14 01:50:37.666609", "score": "0.3085", "loss": "6.4601", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log.v(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 93, "n_pass": [382, 30, 18]}
{"time": "2021-02-14 01:50:39.402313", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data) { switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 91, "n_pass": [390, 31, 19]}
{"time": "2021-02-14 01:50:42.844528", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){ switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 90, "n_pass": [411, 33, 20]}
{"time": "2021-02-14 01:50:44.211549", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode) { case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 89, "n_pass": [413, 34, 21]}
{"time": "2021-02-14 01:50:45.547288", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode){ case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 88, "n_pass": [418, 35, 22]}
{"time": "2021-02-14 01:50:46.888011", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH: switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 87, "n_pass": [420, 36, 23]}
{"time": "2021-02-14 01:50:48.220965", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode) { case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 86, "n_pass": [425, 37, 24]}
{"time": "2021-02-14 01:50:49.571249", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){ case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 85, "n_pass": [430, 38, 25]}
{"time": "2021-02-14 01:50:50.964554", "score": "0.3001", "loss": "6.3434", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(datatrue);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 84, "n_pass": [432, 39, 26]}
{"time": "2021-02-14 01:50:55.009875", "score": "0.2948", "loss": "6.3806", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);  if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 83, "n_pass": [441, 42, 27]}
{"time": "2021-02-14 01:50:56.350929", "score": "0.2948", "loss": "6.3806", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data); if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 82, "n_pass": [444, 43, 28]}
{"time": "2021-02-14 01:50:57.750846", "score": "0.2948", "loss": "6.3806", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if (FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 81, "n_pass": [445, 44, 29]}
{"time": "2021-02-14 01:50:59.123982", "score": "0.2948", "loss": "6.3806", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH_ON){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 80, "n_pass": [447, 45, 30]}
{"time": "2021-02-14 01:51:03.206997", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH_){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 79, "n_pass": [451, 48, 31]}
{"time": "2021-02-14 01:51:09.744855", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if (DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 78, "n_pass": [511, 52, 32]}
{"time": "2021-02-14 01:51:19.833504", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG) Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 77, "n_pass": [610, 55, 33]}
{"time": "2021-02-14 01:51:21.195953", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG, \"\"); getViewrequestFocus(); } } } } }", "n_tokens": 76, "n_pass": [613, 56, 34]}
{"time": "2021-02-14 01:51:22.549288", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\"); getViewrequestFocus(); } } } } }", "n_tokens": 75, "n_pass": [618, 57, 35]}
{"time": "2021-02-14 01:51:23.911985", "score": "0.2775", "loss": "6.5802", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getViewrequestFocus(); } } } } }", "n_tokens": 74, "n_pass": [623, 58, 36]}
{"time": "2021-02-14 01:51:26.630482", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView(); } } } } }", "n_tokens": 73, "n_pass": [625, 60, 37]}
{"time": "2021-02-14 01:51:27.978018", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView();} } } } }", "n_tokens": 72, "n_pass": [629, 61, 38]}
{"time": "2021-02-14 01:51:29.318531", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView();}} } } }", "n_tokens": 71, "n_pass": [631, 62, 39]}
{"time": "2021-02-14 01:51:30.681244", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView();}}} } }", "n_tokens": 70, "n_pass": [633, 63, 40]}
{"time": "2021-02-14 01:51:32.041559", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView();}}}} }", "n_tokens": 69, "n_pass": [635, 64, 41]}
{"time": "2021-02-14 01:51:33.403655", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()) { if(DEBUG)Log(TAG,\"\");getView();}}}}}", "n_tokens": 68, "n_pass": [637, 65, 42]}
{"time": "2021-02-14 01:51:36.906778", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()){ if(DEBUG)Log(TAG,\"\");getView();}}}}}", "n_tokens": 67, "n_pass": [683, 67, 43]}
{"time": "2021-02-14 01:51:38.240439", "score": "0.2938", "loss": "6.1985", "code": "void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()){if(DEBUG)Log(TAG,\"\");getView();}}}}}", "n_tokens": 66, "n_pass": [685, 68, 44]}

Minimal simplified code:
void onActivityResult(int data){switch(requestCode){case SPEECH:switch(resultCode){case Activity.OK:(data);if(FINISH){if(hasResults()){if(DEBUG)Log(TAG,"");getView();}}}}}

