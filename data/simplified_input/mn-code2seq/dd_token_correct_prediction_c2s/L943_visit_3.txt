
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/jasper/compiler/TextOptimizer_visit.java
method_name = visit
method_body = @Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) { n.setText(EMPTY_TEXT); return; } if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }
predict, score, loss = visit, 0.9955574870109558, 0.0165216326713562

Trace of simplified code(s):
{"time": "2021-02-14 02:33:41.766277", "score": "0.9956", "loss": "0.0165", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) { n.setText(EMPTY_TEXT); return; } if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 138, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:33:43.481267", "score": "0.993", "loss": "0.0206", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); } else { textBuffer.append(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 121, "n_pass": [23, 2, 2]}
{"time": "2021-02-14 02:33:44.829052", "score": "0.9884", "loss": "0.0377", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getText()); n.setText(EMPTY_TEXT); } }", "n_tokens": 103, "n_pass": [26, 3, 3]}
{"time": "2021-02-14 02:33:46.206408", "score": "0.9885", "loss": "0.0338", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() || pageInfo.isTrimDirectiveWhitespaces()) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 94, "n_pass": [45, 4, 4]}
{"time": "2021-02-14 02:33:47.618742", "score": "0.9941", "loss": "0.0225", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() ) && n.isAllSpace()) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 86, "n_pass": [50, 5, 5]}
{"time": "2021-02-14 02:33:48.962521", "score": "0.9921", "loss": "0.0339", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() )) if (textNodeCount++ == 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 77, "n_pass": [51, 6, 6]}
{"time": "2021-02-14 02:33:50.307585", "score": "0.9908", "loss": "0.0328", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() )) if (textNodeCount+ 0) { firstTextNode = n; textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 73, "n_pass": [81, 7, 7]}
{"time": "2021-02-14 02:33:51.640109", "score": "0.99", "loss": "0.027", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() )) if (textNodeCount+ 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 68, "n_pass": [84, 8, 8]}
{"time": "2021-02-14 02:33:52.984253", "score": "0.6439", "loss": "0.9174", "code": " void visit(Node.TemplateText n) throws JasperException { if ((options.getTrimSpaces() )) if (textNodeCount+ 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 64, "n_pass": [89, 9, 9]}
{"time": "2021-02-14 02:33:54.434641", "score": "0.2303", "loss": "3.054", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if (textNodeCount+ 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 60, "n_pass": [93, 10, 10]}
{"time": "2021-02-14 02:33:57.190200", "score": "0.35", "loss": "2.2695", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if ( 0) { firstTextNode textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 58, "n_pass": [145, 12, 11]}
{"time": "2021-02-14 02:33:58.533445", "score": "0.5791", "loss": "1.2565", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if ( 0) { textBuffer = new StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 56, "n_pass": [149, 13, 12]}
{"time": "2021-02-14 02:33:59.845233", "score": "0.6679", "loss": "1.0276", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if ( 0) { textBuffer = StringBuilder(n.getTextEMPTY_TEXT); } }", "n_tokens": 54, "n_pass": [152, 14, 13]}
{"time": "2021-02-14 02:34:01.178584", "score": "0.3511", "loss": "2.2068", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if ( 0) { textBuffer = StringBuilder(EMPTY_TEXT); } }", "n_tokens": 51, "n_pass": [154, 15, 14]}
{"time": "2021-02-14 02:34:02.493653", "score": "0.5466", "loss": "1.5098", "code": " void visit(Node.TemplateText n) { if ((options.getTrimSpaces() )) if ( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 48, "n_pass": [155, 16, 15]}
{"time": "2021-02-14 02:34:04.208136", "score": "0.3272", "loss": "2.1595", "code": " void visit(Node n) { if ((options.getTrimSpaces() )) if ( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 46, "n_pass": [161, 17, 16]}
{"time": "2021-02-14 02:34:05.523657", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces() )) if ( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 44, "n_pass": [167, 18, 17]}
{"time": "2021-02-14 02:34:12.216273", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces())) if ( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 43, "n_pass": [234, 19, 18]}
{"time": "2021-02-14 02:34:13.543886", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if ( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 42, "n_pass": [237, 20, 19]}
{"time": "2021-02-14 02:34:14.885768", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if( 0) { textBuffer = StringBuilder(); } }", "n_tokens": 41, "n_pass": [239, 21, 20]}
{"time": "2021-02-14 02:34:16.208437", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if(0) { textBuffer = StringBuilder(); } }", "n_tokens": 40, "n_pass": [241, 22, 21]}
{"time": "2021-02-14 02:34:17.516814", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if(0){ textBuffer = StringBuilder(); } }", "n_tokens": 39, "n_pass": [244, 23, 22]}
{"time": "2021-02-14 02:34:18.824448", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if(0){textBuffer = StringBuilder(); } }", "n_tokens": 38, "n_pass": [246, 24, 23]}
{"time": "2021-02-14 02:34:20.130701", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if(0){textBuffer= StringBuilder(); } }", "n_tokens": 37, "n_pass": [248, 25, 24]}
{"time": "2021-02-14 02:34:21.457786", "score": "0.2997", "loss": "2.3771", "code": " void visit(Node n) { if ((getTrimSpaces()))if(0){textBuffer=StringBuilder(); } }", "n_tokens": 36, "n_pass": [250, 26, 25]}
{"time": "2021-02-14 02:34:22.779848", "score": "0.2997", "loss": "2.3771", "code": "void visit(Node n) { if ((getTrimSpaces()))if(0){textBuffer=StringBuilder(); } }", "n_tokens": 35, "n_pass": [257, 27, 26]}
{"time": "2021-02-14 02:34:24.808903", "score": "0.2997", "loss": "2.3771", "code": "void visit(Node n){ if ((getTrimSpaces()))if(0){textBuffer=StringBuilder(); } }", "n_tokens": 34, "n_pass": [266, 28, 27]}
{"time": "2021-02-14 02:34:26.134805", "score": "0.2997", "loss": "2.3771", "code": "void visit(Node n){if ((getTrimSpaces()))if(0){textBuffer=StringBuilder(); } }", "n_tokens": 33, "n_pass": [268, 29, 28]}
{"time": "2021-02-14 02:34:27.450034", "score": "0.2997", "loss": "2.3771", "code": "void visit(Node n){if((getTrimSpaces()))if(0){textBuffer=StringBuilder(); } }", "n_tokens": 32, "n_pass": [270, 30, 29]}
{"time": "2021-02-14 02:34:28.797546", "score": "0.2516", "loss": "2.4497", "code": "void visit(Node n){if((getTrimSpaces()))if(0){textBufferStringBuilder(); } }", "n_tokens": 31, "n_pass": [284, 31, 30]}
{"time": "2021-02-14 02:34:30.135307", "score": "0.2603", "loss": "2.4239", "code": "void visit(Node n){if((getTrimSpaces()))if(0){textBuffer(); } }", "n_tokens": 30, "n_pass": [285, 32, 31]}
{"time": "2021-02-14 02:34:32.905913", "score": "0.2603", "loss": "2.4239", "code": "void visit(Node n){if((getTrimSpaces()))if(0){textBuffer();} }", "n_tokens": 29, "n_pass": [318, 33, 32]}
{"time": "2021-02-14 02:34:34.242734", "score": "0.2603", "loss": "2.4239", "code": "void visit(Node n){if((getTrimSpaces()))if(0){textBuffer();}}", "n_tokens": 28, "n_pass": [319, 34, 33]}

Minimal simplified code:
void visit(Node n){if((getTrimSpaces()))if(0){textBuffer();}}

