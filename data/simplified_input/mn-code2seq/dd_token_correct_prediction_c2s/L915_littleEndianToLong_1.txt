
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/util/Pack_littleEndianToLong.java
method_name = littleEndianToLong
method_body = public static void littleEndianToLong(byte[] bs, int off, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }
predict, score, loss = littleEndianToLong, 0.8890136480331421, 0.5728404521942139

Trace of simplified code(s):
{"time": "2021-02-14 02:04:36.855256", "score": "0.889", "loss": "0.5728", "code": "public static void littleEndianToLong(byte[] bs, int off, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 84, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:04:38.599741", "score": "0.8585", "loss": "0.7563", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0; i < ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 79, "n_pass": [47, 2, 2]}
{"time": "2021-02-14 02:04:39.974226", "score": "0.8671", "loss": "0.6909", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off); off += 8; } }", "n_tokens": 74, "n_pass": [52, 3, 3]}
{"time": "2021-02-14 02:04:41.325480", "score": "0.8922", "loss": "0.5658", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off);8; } }", "n_tokens": 68, "n_pass": [58, 4, 4]}
{"time": "2021-02-14 02:04:43.046061", "score": "0.8941", "loss": "0.5221", "code": "public static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off);} }", "n_tokens": 65, "n_pass": [98, 5, 5]}
{"time": "2021-02-14 02:04:44.411090", "score": "0.8941", "loss": "0.5221", "code": "static void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off);} }", "n_tokens": 63, "n_pass": [99, 6, 6]}
{"time": "2021-02-14 02:04:45.781127", "score": "0.8941", "loss": "0.5221", "code": "void littleEndianToLong(byte[] bs, long[] ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off);} }", "n_tokens": 61, "n_pass": [100, 7, 7]}
{"time": "2021-02-14 02:04:47.492466", "score": "0.9082", "loss": "0.4581", "code": "void littleEndianToLong(byte[] bs, long ns) { for (int i = 0;ns.length; ++i) { ns[i] = littleEndianToLong(bs, off);} }", "n_tokens": 59, "n_pass": [107, 8, 8]}
{"time": "2021-02-14 02:04:48.845794", "score": "0.8828", "loss": "0.6364", "code": "void littleEndianToLong(byte[] bs, long ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(bs, off);} }", "n_tokens": 56, "n_pass": [114, 9, 9]}
{"time": "2021-02-14 02:04:50.189821", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[] bs, long ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 53, "n_pass": [121, 10, 10]}
{"time": "2021-02-14 02:04:56.471194", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs, long ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 52, "n_pass": [193, 11, 11]}
{"time": "2021-02-14 02:04:57.823005", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns) { for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 51, "n_pass": [196, 12, 12]}
{"time": "2021-02-14 02:04:59.176268", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){ for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 50, "n_pass": [201, 13, 13]}
{"time": "2021-02-14 02:05:00.497973", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for (int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 49, "n_pass": [203, 14, 14]}
{"time": "2021-02-14 02:05:01.828642", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i = 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 48, "n_pass": [205, 15, 15]}
{"time": "2021-02-14 02:05:05.885243", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i= 0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 47, "n_pass": [210, 18, 16]}
{"time": "2021-02-14 02:05:07.282899", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i) { ns[i] = littleEndianToLong(off);} }", "n_tokens": 46, "n_pass": [212, 19, 17]}
{"time": "2021-02-14 02:05:17.803462", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ ns[i] = littleEndianToLong(off);} }", "n_tokens": 45, "n_pass": [273, 24, 18]}
{"time": "2021-02-14 02:05:19.143638", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ns[i] = littleEndianToLong(off);} }", "n_tokens": 44, "n_pass": [274, 25, 19]}
{"time": "2021-02-14 02:05:20.484806", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ns[i]= littleEndianToLong(off);} }", "n_tokens": 43, "n_pass": [279, 26, 20]}
{"time": "2021-02-14 02:05:21.885470", "score": "0.7138", "loss": "2.4213", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ns[i]=littleEndianToLong(off);} }", "n_tokens": 42, "n_pass": [281, 27, 21]}
{"time": "2021-02-14 02:05:24.570956", "score": "0.7945", "loss": "1.4196", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ns[i]=littleEndianToLong();} }", "n_tokens": 41, "n_pass": [284, 29, 22]}
{"time": "2021-02-14 02:05:25.959630", "score": "0.7945", "loss": "1.4196", "code": "void littleEndianToLong(byte[]bs,long ns){for(int i=0;; ++i){ns[i]=littleEndianToLong();}}", "n_tokens": 40, "n_pass": [288, 30, 23]}
{"time": "2021-02-14 02:05:28.047713", "score": "0.7419", "loss": "1.6582", "code": "void littleEndianToLong(byte[]bs,long ns){for( i=0;; ++i){ns[i]=littleEndianToLong();}}", "n_tokens": 39, "n_pass": [306, 31, 24]}
{"time": "2021-02-14 02:05:29.369574", "score": "0.7419", "loss": "1.6582", "code": "void littleEndianToLong(byte[]bs,long ns){for(i=0;; ++i){ns[i]=littleEndianToLong();}}", "n_tokens": 38, "n_pass": [307, 32, 25]}
{"time": "2021-02-14 02:05:30.688727", "score": "0.7425", "loss": "1.7818", "code": "void littleEndianToLong(byte[]bs,long ns){for(i0;; ++i){ns[i]=littleEndianToLong();}}", "n_tokens": 37, "n_pass": [309, 33, 26]}
{"time": "2021-02-14 02:05:32.007445", "score": "0.7425", "loss": "1.7818", "code": "void littleEndianToLong(byte[]bs,long ns){for(i;; ++i){ns[i]=littleEndianToLong();}}", "n_tokens": 36, "n_pass": [310, 34, 27]}
{"time": "2021-02-14 02:05:33.342820", "score": "0.7425", "loss": "1.7818", "code": "void littleEndianToLong(byte[]bs,long ns){for(i;;++i){ns[i]=littleEndianToLong();}}", "n_tokens": 35, "n_pass": [313, 35, 28]}
{"time": "2021-02-14 02:05:34.675129", "score": "0.761", "loss": "1.5815", "code": "void littleEndianToLong(byte[]bs,long ns){for(i;;+i){ns[i]=littleEndianToLong();}}", "n_tokens": 34, "n_pass": [314, 36, 29]}
{"time": "2021-02-14 02:05:38.207951", "score": "0.8177", "loss": "1.0597", "code": "void littleEndianToLong(byte[]bs,long ns){for(;;+i){ns[i]=littleEndianToLong();}}", "n_tokens": 33, "n_pass": [346, 38, 30]}

Minimal simplified code:
void littleEndianToLong(byte[]bs,long ns){for(;;+i){ns[i]=littleEndianToLong();}}

