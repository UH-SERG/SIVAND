
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/signers/X931Signer_init.java
method_name = init
method_body = public void init(boolean forSigning, CipherParameters param) { kParam = (RSAKeyParameters) param; cipher.init(forSigning, kParam); keyBits = kParam.getModulus().bitLength(); block = new byte[(keyBits + 7) / 8]; reset(); }
predict, score, loss = init, 0.9758915901184082, 0.11197598278522491

Trace of simplified code(s):
{"time": "2021-02-13 19:13:47.233105", "score": "0.9759", "loss": "0.112", "code": "public void init(boolean forSigning, CipherParameters param) { kParam = (RSAKeyParameters) param; cipher.init(forSigning, kParam); keyBits = kParam.getModulus().bitLength(); block = new byte[(keyBits + 7) / 8]; reset(); }", "n_tokens": 83, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:13:48.564681", "score": "0.3358", "loss": "1.2455", "code": "public void init(boolean forSigning, CipherParameters param) { kParam  = kParam.getModulus().bitLength(); block = new byte[(keyBits + 7) / 8]; reset(); }", "n_tokens": 62, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 19:13:56.556097", "score": "0.3738", "loss": "1.2113", "code": "public void init(boolean forSigning, CipherParameters param) { kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits + 7) / 8]; reset(); }", "n_tokens": 59, "n_pass": [76, 8, 3]}
{"time": "2021-02-13 19:13:59.552644", "score": "0.3646", "loss": "1.2016", "code": "public void init(boolean forSigning, CipherParameters param) { kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 56, "n_pass": [82, 10, 4]}
{"time": "2021-02-13 19:14:03.521950", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning, CipherParameters param) { kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 54, "n_pass": [88, 13, 5]}
{"time": "2021-02-13 19:14:15.603169", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param) { kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 53, "n_pass": [160, 18, 6]}
{"time": "2021-02-13 19:14:16.938024", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param){ kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 52, "n_pass": [164, 19, 7]}
{"time": "2021-02-13 19:14:18.250400", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param){kParam  = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 51, "n_pass": [166, 20, 8]}
{"time": "2021-02-13 19:14:19.562791", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param){kParam = kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 50, "n_pass": [168, 21, 9]}
{"time": "2021-02-13 19:14:20.871094", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param){kParam= kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 49, "n_pass": [169, 22, 10]}
{"time": "2021-02-13 19:14:22.208837", "score": "0.3646", "loss": "1.2016", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulusbitLength(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 48, "n_pass": [171, 23, 11]}
{"time": "2021-02-13 19:14:26.171381", "score": "0.3669", "loss": "1.147", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus(); block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 47, "n_pass": [175, 26, 12]}
{"time": "2021-02-13 19:14:27.483408", "score": "0.3669", "loss": "1.147", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block = new byte[(keyBits7) / 8]; reset(); }", "n_tokens": 46, "n_pass": [179, 27, 13]}
{"time": "2021-02-13 19:14:28.795146", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block = new byte[(keyBits7) 8]; reset(); }", "n_tokens": 44, "n_pass": [187, 28, 14]}
{"time": "2021-02-13 19:14:36.146065", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block = new byte[(keyBits7) 8];reset(); }", "n_tokens": 43, "n_pass": [243, 31, 15]}
{"time": "2021-02-13 19:14:37.473627", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block = new byte[(keyBits7) 8];reset();}", "n_tokens": 42, "n_pass": [248, 32, 16]}
{"time": "2021-02-13 19:14:42.171772", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block= new byte[(keyBits7) 8];reset();}", "n_tokens": 41, "n_pass": [272, 35, 17]}
{"time": "2021-02-13 19:14:43.479646", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block=new byte[(keyBits7) 8];reset();}", "n_tokens": 40, "n_pass": [274, 36, 18]}
{"time": "2021-02-13 19:14:46.088878", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block=new byte[(keyBits) 8];reset();}", "n_tokens": 39, "n_pass": [281, 38, 19]}
{"time": "2021-02-13 19:14:47.396795", "score": "0.4086", "loss": "1.0405", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block=new byte[(keyBits)8];reset();}", "n_tokens": 38, "n_pass": [283, 39, 20]}
{"time": "2021-02-13 19:14:48.703267", "score": "0.3592", "loss": "1.1575", "code": "void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block=new byte[(keyBits)];reset();}", "n_tokens": 37, "n_pass": [284, 40, 21]}

Minimal simplified code:
void init(boolean forSigning,CipherParameters param){kParam=kParam.getModulus();block=new byte[(keyBits)];reset();}

