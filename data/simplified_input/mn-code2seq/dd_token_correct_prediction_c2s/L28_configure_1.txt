
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__aurora/src/main/java/org/apache/aurora/scheduler/storage/log/LogPersistenceModule_configure.java
method_name = configure
method_body = @Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class).in(Singleton.class); bind(LogPersistence.class).in(Singleton.class); bind(Persistence.class).to(LogPersistence.class); expose(Persistence.class); expose(LogPersistence.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings("deprecation") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }
predict, score, loss = configure, 0.969303548336029, 0.05323425680398941

Trace of simplified code(s):
{"time": "2021-02-13 04:07:52.876651", "score": "0.9577", "loss": "0.0691", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class).in(Singleton.class); bind(LogPersistence.class).in(Singleton.class); bind(Persistence.class).to(LogPersistence.class); expose(Persistence.class); expose(LogPersistence.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings(\"deprecation\") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 213, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:07:54.241162", "score": "0.9142", "loss": "0.1379", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManager.class); bind(EntrySerializer.class).to(EntrySerializerImpl.class); @SuppressWarnings(\"deprecation\") HashFunction hashFunction = Hashing.md5(); bind(HashFunction.class).annotatedWith(LogEntryHashFunction.class).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 160, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 04:07:55.596658", "score": "0.9475", "loss": "0.0811", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).toInstance(options.maxLogEntrySize); bind(LogManagerclass).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 107, "n_pass": [10, 3, 3]}
{"time": "2021-02-13 04:07:56.945735", "score": "0.9291", "loss": "0.1063", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.LogManagerclass).toInstance(hashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 94, "n_pass": [34, 4, 4]}
{"time": "2021-02-13 04:07:58.306334", "score": "0.9356", "loss": "0.099", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySizehashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class).build(StreamManagerFactory.class)); }", "n_tokens": 87, "n_pass": [56, 5, 5]}
{"time": "2021-02-13 04:08:02.312796", "score": "0.9631", "loss": "0.0627", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySizehashFunction); bind(SnapshotDeduplicator.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 80, "n_pass": [62, 8, 6]}
{"time": "2021-02-13 04:08:04.019924", "score": "0.9613", "loss": "0.0607", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManager.class, StreamManagerImpl.class)); }", "n_tokens": 73, "n_pass": [70, 9, 7]}
{"time": "2021-02-13 04:08:07.371605", "score": "0.9391", "loss": "0.0926", "code": "@Override protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 69, "n_pass": [111, 11, 8]}
{"time": "2021-02-13 04:08:08.723024", "score": "0.6242", "loss": "0.5844", "code": "protected void configure() { bind(new TypeLiteral<Amount<Integer, Data>>() { }).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 66, "n_pass": [114, 12, 9]}
{"time": "2021-02-13 04:08:10.401016", "score": "0.614", "loss": "0.61", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() { }).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 63, "n_pass": [121, 13, 10]}
{"time": "2021-02-13 04:08:11.717788", "score": "0.614", "loss": "0.61", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl.class); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 60, "n_pass": [124, 14, 11]}
{"time": "2021-02-13 04:08:14.837716", "score": "0.4675", "loss": "1.0232", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl); install(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 58, "n_pass": [187, 15, 12]}
{"time": "2021-02-13 04:08:16.173901", "score": "0.3491", "loss": "1.4738", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder().implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 56, "n_pass": [188, 16, 13]}
{"time": "2021-02-13 04:08:17.510976", "score": "0.5673", "loss": "1.0151", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder.implement(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 54, "n_pass": [191, 17, 14]}
{"time": "2021-02-13 04:08:18.825672", "score": "0.4289", "loss": "1.254", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerStreamManagerImpl.class)); }", "n_tokens": 52, "n_pass": [192, 18, 15]}
{"time": "2021-02-13 04:08:20.146284", "score": "0.3271", "loss": "1.5379", "code": "protected void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 50, "n_pass": [194, 19, 16]}
{"time": "2021-02-13 04:08:21.448164", "score": "0.3271", "loss": "1.5379", "code": " void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 49, "n_pass": [198, 20, 17]}
{"time": "2021-02-13 04:08:22.754416", "score": "0.3271", "loss": "1.5379", "code": "void configure() { bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 48, "n_pass": [199, 21, 18]}
{"time": "2021-02-13 04:08:24.788500", "score": "0.3271", "loss": "1.5379", "code": "void configure(){ bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 47, "n_pass": [205, 22, 19]}
{"time": "2021-02-13 04:08:26.088696", "score": "0.3271", "loss": "1.5379", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>() ).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 46, "n_pass": [207, 23, 20]}
{"time": "2021-02-13 04:08:31.435485", "score": "0.3271", "loss": "1.5379", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(new FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 45, "n_pass": [282, 25, 21]}
{"time": "2021-02-13 04:08:35.368041", "score": "0.4487", "loss": "1.3492", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);( FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 44, "n_pass": [298, 28, 22]}
{"time": "2021-02-13 04:08:36.701486", "score": "0.4487", "loss": "1.3492", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);(FactoryModuleBuilder(StreamManagerclass)); }", "n_tokens": 43, "n_pass": [299, 29, 23]}
{"time": "2021-02-13 04:08:37.999961", "score": "0.4514", "loss": "1.7507", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);((StreamManagerclass)); }", "n_tokens": 42, "n_pass": [300, 30, 24]}
{"time": "2021-02-13 04:08:39.300626", "score": "0.4595", "loss": "1.6508", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);((StreamManager)); }", "n_tokens": 41, "n_pass": [303, 31, 25]}
{"time": "2021-02-13 04:08:40.611066", "score": "0.4595", "loss": "1.6508", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to(SnapshotDeduplicatorImpl);((StreamManager));}", "n_tokens": 40, "n_pass": [307, 32, 26]}
{"time": "2021-02-13 04:08:45.264734", "score": "0.785", "loss": "0.3799", "code": "void configure(){bind(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to();((StreamManager));}", "n_tokens": 39, "n_pass": [339, 35, 27]}
{"time": "2021-02-13 04:08:47.276234", "score": "0.4486", "loss": "1.6628", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize.class).to();((StreamManager));}", "n_tokens": 38, "n_pass": [355, 36, 28]}
{"time": "2021-02-13 04:08:48.577448", "score": "0.2724", "loss": "2.3776", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySizeclass).to();((StreamManager));}", "n_tokens": 37, "n_pass": [373, 37, 29]}
{"time": "2021-02-13 04:08:49.868527", "score": "0.1939", "loss": "2.7481", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith(MaxEntrySize).to();((StreamManager));}", "n_tokens": 36, "n_pass": [374, 38, 30]}
{"time": "2021-02-13 04:08:51.931995", "score": "0.34", "loss": "1.9591", "code": "void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith().to();((StreamManager));}", "n_tokens": 35, "n_pass": [410, 39, 31]}

Minimal simplified code:
void configure(){(new TypeLiteral<Amount<Data>>()).annotatedWith().to();((StreamManager));}

