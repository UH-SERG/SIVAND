
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/drewnoakes__metadata-extractor/Source/com/drew/metadata/exif/makernotes/OlympusEquipmentMakernoteDescriptor_getDescription.java
method_name = getDescription
method_body = @Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }
predict, score, loss = getDescription, 0.9939935207366943, 0.06947223842144012

Trace of simplified code(s):
{"time": "2021-02-16 20:59:41.435286", "score": "0.9951", "loss": "0.0444", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCAL_PLANE_DIAGONAL: return getFocalPlaneDiagonalDescription(); case TAG_BODY_FIRMWARE_VERSION: return getBodyFirmwareVersionDescription(); case TAG_LENS_TYPE: return getLensTypeDescription(); case TAG_LENS_FIRMWARE_VERSION: return getLensFirmwareVersionDescription(); case TAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 270, "n_pass": [1, 1, 1]}
{"time": "2021-02-16 20:59:42.716407", "score": "0.9981", "loss": "0.0063", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: return getMaxApertureAtMaxFocalDescription(); case TAG_MAX_APERTURE: return getMaxApertureDescription(); case TAG_LENS_PROPERTIES: return getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 203, "n_pass": [9, 2, 2]}
{"time": "2021-02-16 20:59:44.021540", "score": "0.9982", "loss": "0.0053", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: getLensPropertiesDescription(); case TAG_EXTENDER: return getExtenderDescription(); case TAG_FLASH_TYPE: return getFlashTypeDescription(); case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 169, "n_pass": [20, 3, 3]}
{"time": "2021-02-16 20:59:45.297461", "score": "0.9988", "loss": "0.0048", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSION: return getEquipmentVersionDescription(); case TAG_CAMERA_TYPE_2: return getCameraType2Description(); case TAG_FOCALTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL:; case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 135, "n_pass": [21, 4, 4]}
{"time": "2021-02-16 20:59:46.583264", "score": "0.999", "loss": "0.005", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL:; case TAG_FLASH_MODEL: return getFlashModelDescription(); default: return super.getDescription(tagType); } }", "n_tokens": 101, "n_pass": [24, 5, 5]}
{"time": "2021-02-16 20:59:47.869319", "score": "0.9992", "loss": "0.006", "code": "@Override @Nullable public String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 84, "n_pass": [36, 6, 6]}
{"time": "2021-02-16 20:59:49.471501", "score": "0.9984", "loss": "0.027", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT_VERSIONTAG_MAX_APERTURE_AT_MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 76, "n_pass": [53, 7, 7]}
{"time": "2021-02-16 20:59:50.740413", "score": "0.9984", "loss": "0.0338", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_MAX_APERTURE_AT_MAX_FOCAL: default: return super.getDescription(tagType); } }", "n_tokens": 68, "n_pass": [56, 8, 8]}
{"time": "2021-02-16 20:59:51.999040", "score": "0.9982", "loss": "0.0317", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG_: default: return super.getDescription(tagType); } }", "n_tokens": 59, "n_pass": [59, 9, 9]}
{"time": "2021-02-16 20:59:53.609284", "score": "0.998", "loss": "0.0376", "code": "String getDescription(int tagType) { switch(tagType) { case TAG_EQUIPMENT__MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 55, "n_pass": [81, 10, 10]}
{"time": "2021-02-16 20:59:54.872655", "score": "0.9976", "loss": "0.038", "code": "String getDescription(int tagType) { switch(tagType) { case _MIN_FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 51, "n_pass": [90, 11, 11]}
{"time": "2021-02-16 20:59:56.167237", "score": "0.9975", "loss": "0.0387", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: return getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 49, "n_pass": [127, 12, 12]}
{"time": "2021-02-16 20:59:57.443839", "score": "0.9979", "loss": "0.033", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); case TAG: return super.getDescription(tagType); } }", "n_tokens": 47, "n_pass": [129, 13, 13]}
{"time": "2021-02-16 20:59:58.692862", "score": "0.9985", "loss": "0.0171", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: return super.getDescription(tagType); } }", "n_tokens": 45, "n_pass": [132, 14, 14]}
{"time": "2021-02-16 20:59:59.939371", "score": "0.9589", "loss": "0.3226", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAG: super.getDescription(tagType); } }", "n_tokens": 43, "n_pass": [135, 15, 15]}
{"time": "2021-02-16 21:00:02.783899", "score": "0.7631", "loss": "1.7005", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription(); TAGsuper.getDescription(tagType); } }", "n_tokens": 41, "n_pass": [155, 17, 16]}
{"time": "2021-02-16 21:00:05.652470", "score": "0.9396", "loss": "0.514", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(tagType); } }", "n_tokens": 39, "n_pass": [174, 19, 17]}
{"time": "2021-02-16 21:00:12.685376", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType) { switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 38, "n_pass": [233, 22, 18]}
{"time": "2021-02-16 21:00:14.970715", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){ switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 37, "n_pass": [245, 23, 19]}
{"time": "2021-02-16 21:00:16.243470", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType) { case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 36, "n_pass": [247, 24, 20]}
{"time": "2021-02-16 21:00:17.492765", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){ case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 35, "n_pass": [252, 25, 21]}
{"time": "2021-02-16 21:00:18.727024", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){case _FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 34, "n_pass": [254, 26, 22]}
{"time": "2021-02-16 21:00:19.995966", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){case FOCAL: getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 33, "n_pass": [257, 27, 23]}
{"time": "2021-02-16 21:00:21.244908", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();super.getDescription(); } }", "n_tokens": 32, "n_pass": [260, 28, 24]}
{"time": "2021-02-16 21:00:25.807489", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();super.getDescription();} }", "n_tokens": 31, "n_pass": [298, 30, 25]}
{"time": "2021-02-16 21:00:27.062556", "score": "0.6101", "loss": "2.4641", "code": "String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();super.getDescription();}}", "n_tokens": 30, "n_pass": [299, 31, 26]}

Minimal simplified code:
String getDescription(int tagType){switch(tagType){case FOCAL:getMaxApertureAtMinFocalDescription();super.getDescription();}}

