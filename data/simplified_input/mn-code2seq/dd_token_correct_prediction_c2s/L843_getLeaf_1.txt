
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/classify/DecisionTree_getLeaf.java
method_name = getLeaf
method_body = private Node getLeaf(Node node, FeatureVector fv) { if (node.child0 == null) return node; else if (fv.value(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }
predict, score, loss = getLeaf, 0.9803285002708435, 0.12655559182167053

Trace of simplified code(s):
{"time": "2021-02-13 23:04:38.277892", "score": "0.9803", "loss": "0.1266", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node.child0 == null) return node; else if (fv.value(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 88, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:04:39.642331", "score": "0.9813", "loss": "0.105", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (nodevalue(node.featureIndex) != 0) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 66, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 23:04:40.995140", "score": "0.9789", "loss": "0.1543", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(node.child1, fv); else return getLeaf(node.child0, fv); }", "n_tokens": 55, "n_pass": [18, 3, 3]}
{"time": "2021-02-13 23:04:42.349204", "score": "0.9668", "loss": "0.2746", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(node.child1,node.child0, fv); }", "n_tokens": 44, "n_pass": [19, 4, 4]}
{"time": "2021-02-13 23:04:43.712868", "score": "0.8801", "loss": "0.8106", "code": "private Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(node.child1child0, fv); }", "n_tokens": 41, "n_pass": [56, 5, 5]}
{"time": "2021-02-13 23:04:45.026100", "score": "0.8801", "loss": "0.8106", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node) return getLeaf(node.child1child0, fv); }", "n_tokens": 39, "n_pass": [59, 6, 6]}
{"time": "2021-02-13 23:04:46.717698", "score": "0.8533", "loss": "0.9369", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node)getLeaf(node.child1child0, fv); }", "n_tokens": 36, "n_pass": [68, 7, 7]}
{"time": "2021-02-13 23:04:48.016589", "score": "0.8851", "loss": "0.8818", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node)getLeaf(nodechild0, fv); }", "n_tokens": 33, "n_pass": [70, 8, 8]}
{"time": "2021-02-13 23:04:51.717260", "score": "0.8547", "loss": "1.2306", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node)getLeaf(0, fv); }", "n_tokens": 31, "n_pass": [108, 9, 9]}
{"time": "2021-02-13 23:04:53.058246", "score": "0.69", "loss": "2.1513", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node)getLeaf( fv); }", "n_tokens": 29, "n_pass": [109, 10, 10]}
{"time": "2021-02-13 23:04:54.361789", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node, FeatureVector fv) { if (node)getLeaf(); }", "n_tokens": 27, "n_pass": [110, 11, 11]}
{"time": "2021-02-13 23:04:56.743061", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node,FeatureVector fv) { if (node)getLeaf(); }", "n_tokens": 26, "n_pass": [121, 12, 12]}
{"time": "2021-02-13 23:04:58.077144", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node,FeatureVector fv){ if (node)getLeaf(); }", "n_tokens": 25, "n_pass": [126, 13, 13]}
{"time": "2021-02-13 23:05:02.197437", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node,FeatureVector fv){ if(node)getLeaf(); }", "n_tokens": 24, "n_pass": [158, 14, 14]}
{"time": "2021-02-13 23:05:03.503821", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node,FeatureVector fv){ if(node)getLeaf();}", "n_tokens": 23, "n_pass": [165, 15, 15]}
{"time": "2021-02-13 23:05:05.917339", "score": "0.5408", "loss": "3.0883", "code": "Node getLeaf(Node node,FeatureVector fv){if(node)getLeaf();}", "n_tokens": 22, "n_pass": [180, 16, 16]}

Minimal simplified code:
Node getLeaf(Node node,FeatureVector fv){if(node)getLeaf();}

