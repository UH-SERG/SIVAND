
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/solutions/_298_dfs.java
method_name = dfs
method_body = private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }
predict, score, loss = dfs, 0.9998639822006226, 0.011143824085593224

Trace of simplified code(s):
{"time": "2021-02-13 16:59:45.254513", "score": "0.9999", "loss": "0.0091", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null) { return; } if (root.val == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 132, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:59:46.618190", "score": "0.9999", "loss": "0.0148", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, curr, root.val + 1); dfs(root.right, curr, root.val + 1); }", "n_tokens": 116, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 16:59:47.951520", "score": "0.9998", "loss": "0.0098", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left, right, curr, root.val + 1); }", "n_tokens": 99, "n_pass": [26, 3, 3]}
{"time": "2021-02-13 16:59:49.319448", "score": "0.9997", "loss": "0.0124", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left,val + 1); }", "n_tokens": 90, "n_pass": [45, 4, 4]}
{"time": "2021-02-13 16:59:52.036636", "score": "0.992", "loss": "0.065", "code": "private void dfs(TreeNode root, int curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 85, "n_pass": [79, 6, 5]}
{"time": "2021-02-13 16:59:53.737102", "score": "0.9934", "loss": "0.0579", "code": "private void dfs(TreeNode  curr, int target) { if (root == null== target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 81, "n_pass": [83, 7, 6]}
{"time": "2021-02-13 16:59:55.106782", "score": "0.9927", "loss": "0.0674", "code": "private void dfs(TreeNode  curr, int target) { if (root == target) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 77, "n_pass": [88, 8, 7]}
{"time": "2021-02-13 16:59:56.439188", "score": "0.9935", "loss": "0.0498", "code": "private void dfs(TreeNode  curr, int target) { if (root ) { curr++; } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 73, "n_pass": [89, 9, 8]}
{"time": "2021-02-13 16:59:57.774066", "score": "0.9776", "loss": "0.0951", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr = 1; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 69, "n_pass": [91, 10, 9]}
{"time": "2021-02-13 16:59:59.129444", "score": "0.9681", "loss": "0.118", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } max = Math.max(max, curr); dfs(root.left1); }", "n_tokens": 65, "n_pass": [94, 11, 10]}
{"time": "2021-02-13 17:00:00.442636", "score": "0.9722", "loss": "0.1034", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(max, curr); dfs(root.left1); }", "n_tokens": 61, "n_pass": [96, 12, 11]}
{"time": "2021-02-13 17:00:01.750445", "score": "0.9966", "loss": "0.0265", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root.left1); }", "n_tokens": 57, "n_pass": [98, 13, 12]}
{"time": "2021-02-13 17:00:05.119717", "score": "0.9843", "loss": "0.0838", "code": "private void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root1); }", "n_tokens": 55, "n_pass": [144, 15, 13]}
{"time": "2021-02-13 17:00:06.431622", "score": "0.9843", "loss": "0.0838", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } else { curr; } Math.max(); dfs(root1); }", "n_tokens": 53, "n_pass": [147, 16, 14]}
{"time": "2021-02-13 17:00:08.110168", "score": "0.9574", "loss": "0.1986", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } { curr; } Math.max(); dfs(root1); }", "n_tokens": 51, "n_pass": [162, 17, 15]}
{"time": "2021-02-13 17:00:09.416288", "score": "0.9154", "loss": "0.3267", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {; } Math.max(); dfs(root1); }", "n_tokens": 49, "n_pass": [164, 18, 16]}
{"time": "2021-02-13 17:00:10.712959", "score": "0.9154", "loss": "0.3267", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} Math.max(); dfs(root1); }", "n_tokens": 47, "n_pass": [165, 19, 17]}
{"time": "2021-02-13 17:00:12.020837", "score": "0.9264", "loss": "0.3145", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max(); dfs(root1); }", "n_tokens": 45, "n_pass": [167, 20, 18]}
{"time": "2021-02-13 17:00:20.680990", "score": "0.9264", "loss": "0.3145", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max();dfs(root1); }", "n_tokens": 44, "n_pass": [238, 22, 19]}
{"time": "2021-02-13 17:00:21.977362", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode  curr, int target) { if (root ) {  } {} max();dfs(1); }", "n_tokens": 43, "n_pass": [240, 23, 20]}
{"time": "2021-02-13 17:00:25.295460", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr, int target) { if (root ) {  } {} max();dfs(1); }", "n_tokens": 42, "n_pass": [250, 25, 21]}
{"time": "2021-02-13 17:00:26.612745", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target) { if (root ) {  } {} max();dfs(1); }", "n_tokens": 41, "n_pass": [254, 26, 22]}
{"time": "2021-02-13 17:00:27.913545", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){ if (root ) {  } {} max();dfs(1); }", "n_tokens": 40, "n_pass": [259, 27, 23]}
{"time": "2021-02-13 17:00:29.211921", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if (root ) {  } {} max();dfs(1); }", "n_tokens": 39, "n_pass": [261, 28, 24]}
{"time": "2021-02-13 17:00:30.522492", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root ) {  } {} max();dfs(1); }", "n_tokens": 38, "n_pass": [263, 29, 25]}
{"time": "2021-02-13 17:00:31.813927", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root) {  } {} max();dfs(1); }", "n_tokens": 37, "n_pass": [266, 30, 26]}
{"time": "2021-02-13 17:00:33.109751", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){  } {} max();dfs(1); }", "n_tokens": 36, "n_pass": [268, 31, 27]}
{"time": "2021-02-13 17:00:34.417262", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){ } {} max();dfs(1); }", "n_tokens": 35, "n_pass": [270, 32, 28]}
{"time": "2021-02-13 17:00:35.742497", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){} {} max();dfs(1); }", "n_tokens": 34, "n_pass": [271, 33, 29]}
{"time": "2021-02-13 17:00:37.087139", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){}{} max();dfs(1); }", "n_tokens": 33, "n_pass": [273, 34, 30]}
{"time": "2021-02-13 17:00:38.384831", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){}{}max();dfs(1); }", "n_tokens": 32, "n_pass": [276, 35, 31]}
{"time": "2021-02-13 17:00:43.392436", "score": "0.9028", "loss": "0.3698", "code": "void dfs(TreeNode curr,int target){if(root){}{}max();dfs(1);}", "n_tokens": 31, "n_pass": [310, 38, 32]}

Minimal simplified code:
void dfs(TreeNode curr,int target){if(root){}{}max();dfs(1);}

