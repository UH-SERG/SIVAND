
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wildfly__jandex/src/main/java/org/jboss/jandex/WildcardType_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int hash = this.hash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }
predict, score, loss = hashCode, 0.9998815059661865, 0.00033636001171544194

Trace of simplified code(s):
{"time": "2021-02-13 21:08:03.055900", "score": "0.9999", "loss": "0.0003", "code": "@Override public int hashCode() { int hash = this.hash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 113, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 21:08:04.810137", "score": "0.9999", "loss": "0.0004", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends ? 1 : 0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 106, "n_pass": [46, 2, 2]}
{"time": "2021-02-13 21:08:06.152950", "score": "0.9998", "loss": "0.0006", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = 31 * hash + bound.hashCode(); return this.hash = hash; }", "n_tokens": 99, "n_pass": [53, 3, 3]}
{"time": "2021-02-13 21:08:07.487252", "score": "0.9999", "loss": "0.0004", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); return this.hash = hash; }", "n_tokens": 92, "n_pass": [55, 4, 4]}
{"time": "2021-02-13 21:08:09.228672", "score": "0.9999", "loss": "0.0003", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash = hash; }", "n_tokens": 88, "n_pass": [98, 5, 5]}
{"time": "2021-02-13 21:08:10.561967", "score": "0.9999", "loss": "0.0003", "code": "@Override public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 84, "n_pass": [99, 6, 6]}
{"time": "2021-02-13 21:08:11.895115", "score": "0.9997", "loss": "0.001", "code": "public int hashCode() { inthash; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 81, "n_pass": [101, 7, 7]}
{"time": "2021-02-13 21:08:13.611256", "score": "0.9998", "loss": "0.0008", "code": "public int hashCode() {; if (hash != 0) { return hash; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 78, "n_pass": [105, 8, 8]}
{"time": "2021-02-13 21:08:14.939171", "score": "0.9989", "loss": "0.0038", "code": "public int hashCode() {; if (hash != 0) { ; } hash = super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 75, "n_pass": [111, 9, 9]}
{"time": "2021-02-13 21:08:16.265031", "score": "0.9995", "loss": "0.0015", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCode(); hash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 71, "n_pass": [113, 10, 10]}
{"time": "2021-02-13 21:08:17.606655", "score": "0.9911", "loss": "0.0365", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash = 31 * hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 67, "n_pass": [115, 11, 11]}
{"time": "2021-02-13 21:08:19.278653", "score": "0.9728", "loss": "0.1187", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  hash + (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 63, "n_pass": [117, 12, 12]}
{"time": "2021-02-13 21:08:20.600309", "score": "0.992", "loss": "0.0417", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  (isExtends0); hash = + bound.hashCode(); hash; }", "n_tokens": 59, "n_pass": [118, 13, 13]}
{"time": "2021-02-13 21:08:21.911869", "score": "0.5663", "loss": "2.4078", "code": "public int hashCode() {; if (hash != 0) { ; } super.hashCodehash =  (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 55, "n_pass": [123, 14, 14]}
{"time": "2021-02-13 21:08:23.606518", "score": "0.7228", "loss": "1.489", "code": "public int hashCode() {; if (hash != 0) { ; }hash =  (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 51, "n_pass": [134, 15, 15]}
{"time": "2021-02-13 21:08:24.940744", "score": "0.6824", "loss": "1.6", "code": "public int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = + bound.hashCodehash; }", "n_tokens": 47, "n_pass": [135, 16, 16]}
{"time": "2021-02-13 21:08:26.242274", "score": "0.8891", "loss": "0.551", "code": "public int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 43, "n_pass": [139, 17, 17]}
{"time": "2021-02-13 21:08:30.883606", "score": "0.8891", "loss": "0.551", "code": " int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 42, "n_pass": [181, 19, 18]}
{"time": "2021-02-13 21:08:32.191430", "score": "0.8891", "loss": "0.551", "code": "int hashCode() {; if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 41, "n_pass": [182, 20, 19]}
{"time": "2021-02-13 21:08:33.865366", "score": "0.8891", "loss": "0.551", "code": "int hashCode(){; if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 40, "n_pass": [187, 21, 20]}
{"time": "2021-02-13 21:08:35.191084", "score": "0.8891", "loss": "0.551", "code": "int hashCode(){if (hash != 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 38, "n_pass": [189, 22, 21]}
{"time": "2021-02-13 21:08:36.485024", "score": "0.8024", "loss": "0.903", "code": "int hashCode(){if (hash= 0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 36, "n_pass": [192, 23, 22]}
{"time": "2021-02-13 21:08:37.765571", "score": "0.9273", "loss": "0.385", "code": "int hashCode(){if (hash0) { ; } (isExtends0); hash = +hash; }", "n_tokens": 34, "n_pass": [193, 24, 23]}
{"time": "2021-02-13 21:08:39.070207", "score": "0.9273", "loss": "0.385", "code": "int hashCode(){if (hash0) { } (isExtends0); hash = +hash; }", "n_tokens": 32, "n_pass": [196, 25, 24]}
{"time": "2021-02-13 21:08:40.687491", "score": "0.9753", "loss": "0.1007", "code": "int hashCode(){if (hash0) { } (isExtends0); hash =hash; }", "n_tokens": 30, "n_pass": [203, 26, 25]}
{"time": "2021-02-13 21:08:46.959250", "score": "0.9753", "loss": "0.1007", "code": "int hashCode(){if (hash0) { } (isExtends0); hash =hash;}", "n_tokens": 29, "n_pass": [248, 28, 26]}
{"time": "2021-02-13 21:08:48.932764", "score": "0.9753", "loss": "0.1007", "code": "int hashCode(){if(hash0) { } (isExtends0); hash =hash;}", "n_tokens": 28, "n_pass": [256, 29, 27]}
{"time": "2021-02-13 21:08:50.214294", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0) { } (isExtends0); hash =hash;}", "n_tokens": 27, "n_pass": [258, 30, 28]}
{"time": "2021-02-13 21:08:51.517997", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){ } (isExtends0); hash =hash;}", "n_tokens": 26, "n_pass": [261, 31, 29]}
{"time": "2021-02-13 21:08:52.800064", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){} (isExtends0); hash =hash;}", "n_tokens": 25, "n_pass": [263, 32, 30]}
{"time": "2021-02-13 21:08:54.081364", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){}(isExtends0); hash =hash;}", "n_tokens": 24, "n_pass": [265, 33, 31]}
{"time": "2021-02-13 21:08:56.638554", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){}(isExtends); hash =hash;}", "n_tokens": 23, "n_pass": [268, 35, 32]}
{"time": "2021-02-13 21:08:58.276077", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){}(isExtends);hash =hash;}", "n_tokens": 22, "n_pass": [271, 36, 33]}
{"time": "2021-02-13 21:08:59.563152", "score": "0.9262", "loss": "0.2921", "code": "int hashCode(){if(0){}(isExtends);hash=hash;}", "n_tokens": 21, "n_pass": [273, 37, 34]}

Minimal simplified code:
int hashCode(){if(0){}(isExtends);hash=hash;}

