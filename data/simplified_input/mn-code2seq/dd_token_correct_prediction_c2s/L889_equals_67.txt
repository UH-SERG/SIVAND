
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/jopt-simple__jopt-simple/src/main/java/joptsimple/ArgumentAcceptingOptionSpec_equals.java
method_name = equals
method_body = @Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; return requiresArgument() == other.requiresArgument(); }
predict, score, loss = equals, 0.9993851184844971, 0.0009047825005836785

Trace of simplified code(s):
{"time": "2021-02-13 23:48:49.267062", "score": "0.9994", "loss": "0.0009", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; return requiresArgument() == other.requiresArgument(); }", "n_tokens": 69, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:48:51.096569", "score": "0.999", "loss": "0.0013", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other = (ArgumentAcceptingOptionSpec<?>) that; other.requiresArgument(); }", "n_tokens": 60, "n_pass": [26, 2, 2]}
{"time": "2021-02-13 23:48:52.829426", "score": "0.9983", "loss": "0.002", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false; ArgumentAcceptingOptionSpec<?> other =  other.requiresArgument(); }", "n_tokens": 51, "n_pass": [32, 3, 3]}
{"time": "2021-02-13 23:48:54.206845", "score": "0.9933", "loss": "0.0089", "code": "@Override public boolean equals(Object that) { if (!super.equals(that)) return false;  other.requiresArgument(); }", "n_tokens": 42, "n_pass": [38, 4, 4]}
{"time": "2021-02-13 23:48:55.567224", "score": "0.9537", "loss": "0.07", "code": " boolean equals(Object that) { if (!super.equals(that)) return false;  other.requiresArgument(); }", "n_tokens": 38, "n_pass": [56, 5, 5]}
{"time": "2021-02-13 23:48:56.877248", "score": "0.5992", "loss": "0.7711", "code": " boolean equals(Object that) { if (!super.equals(that))   other.requiresArgument(); }", "n_tokens": 34, "n_pass": [62, 6, 6]}
{"time": "2021-02-13 23:48:58.563935", "score": "0.5992", "loss": "0.7711", "code": " boolean equals(Object that) { if (!super.equals(that)) other.requiresArgument(); }", "n_tokens": 32, "n_pass": [87, 7, 7]}
{"time": "2021-02-13 23:48:59.895076", "score": "0.7277", "loss": "0.487", "code": " boolean equals(Object that) { if (!super.equals(that)) requiresArgument(); }", "n_tokens": 30, "n_pass": [88, 8, 8]}
{"time": "2021-02-13 23:49:01.213013", "score": "0.7951", "loss": "0.3338", "code": " boolean equals(Object that) { if (!super.equals(that)) ; }", "n_tokens": 27, "n_pass": [89, 9, 9]}
{"time": "2021-02-13 23:49:02.869921", "score": "0.4848", "loss": "0.9741", "code": " boolean equals(Object that) { (!super.equals(that)) ; }", "n_tokens": 25, "n_pass": [97, 10, 10]}
{"time": "2021-02-13 23:49:04.185284", "score": "0.3248", "loss": "1.9887", "code": " boolean equals(Object that) { (!equals(that)) ; }", "n_tokens": 23, "n_pass": [99, 11, 11]}
{"time": "2021-02-13 23:49:08.216360", "score": "0.4498", "loss": "1.6984", "code": " boolean equals(Object that) { (!(that)) ; }", "n_tokens": 22, "n_pass": [133, 12, 12]}
{"time": "2021-02-13 23:49:09.535441", "score": "0.4498", "loss": "1.6984", "code": " boolean equals(Object that) { (!(that)); }", "n_tokens": 21, "n_pass": [137, 13, 13]}
{"time": "2021-02-13 23:49:10.864932", "score": "0.4498", "loss": "1.6984", "code": "boolean equals(Object that) { (!(that)); }", "n_tokens": 20, "n_pass": [140, 14, 14]}
{"time": "2021-02-13 23:49:12.902028", "score": "0.4498", "loss": "1.6984", "code": "boolean equals(Object that){ (!(that)); }", "n_tokens": 19, "n_pass": [149, 15, 15]}
{"time": "2021-02-13 23:49:14.224397", "score": "0.4498", "loss": "1.6984", "code": "boolean equals(Object that){(!(that)); }", "n_tokens": 18, "n_pass": [151, 16, 16]}
{"time": "2021-02-13 23:49:15.545522", "score": "0.7756", "loss": "0.4545", "code": "boolean equals(Object that){((that)); }", "n_tokens": 17, "n_pass": [153, 17, 17]}
{"time": "2021-02-13 23:49:17.926723", "score": "0.7756", "loss": "0.4545", "code": "boolean equals(Object that){((that));}", "n_tokens": 16, "n_pass": [172, 18, 18]}

Minimal simplified code:
boolean equals(Object that){((that));}

