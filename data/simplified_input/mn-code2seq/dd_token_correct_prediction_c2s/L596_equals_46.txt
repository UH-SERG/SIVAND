
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/javaee__javamail/mail/src/main/java/javax/mail/search/OrTerm_equals.java
method_name = equals
method_body = @Override public boolean equals(Object obj) { if (!(obj instanceof OrTerm)) return false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }
predict, score, loss = equals, 0.9967151880264282, 0.004570783581584692

Trace of simplified code(s):
{"time": "2021-02-13 18:39:23.037853", "score": "0.9977", "loss": "0.0034", "code": "@Override public boolean equals(Object obj) { if (!(obj instanceof OrTerm)) return false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 126, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 18:39:24.396718", "score": "0.9932", "loss": "0.0094", "code": "@Override public boolean equals(Object obj) { false; OrTerm ot = (OrTerm) obj; if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 111, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 18:39:25.746742", "score": "0.9875", "loss": "0.0168", "code": "@Override public boolean equals(Object obj) { if (ot.terms.length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 95, "n_pass": [22, 3, 3]}
{"time": "2021-02-13 18:39:27.475817", "score": "0.9802", "loss": "0.0261", "code": "@Override public boolean equals(Object obj) { if (length != terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 91, "n_pass": [78, 4, 4]}
{"time": "2021-02-13 18:39:28.818636", "score": "0.9593", "loss": "0.0558", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i < terms.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 87, "n_pass": [79, 5, 5]}
{"time": "2021-02-13 18:39:30.193538", "score": "0.9581", "loss": "0.0574", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i])) return false; return true; }", "n_tokens": 83, "n_pass": [86, 6, 6]}
{"time": "2021-02-13 18:39:31.549664", "score": "0.9224", "loss": "0.1164", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i])); return true; }", "n_tokens": 79, "n_pass": [94, 7, 7]}
{"time": "2021-02-13 18:39:32.881672", "score": "0.9215", "loss": "0.1393", "code": "@Override public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 75, "n_pass": [95, 8, 8]}
{"time": "2021-02-13 18:39:34.237382", "score": "0.7954", "loss": "0.5712", "code": "public boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 72, "n_pass": [97, 9, 9]}
{"time": "2021-02-13 18:39:36.298684", "score": "0.7954", "loss": "0.5712", "code": "boolean equals(Object obj) { if ( terms.length) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 70, "n_pass": [152, 10, 10]}
{"time": "2021-02-13 18:39:37.630137", "score": "0.7851", "loss": "0.587", "code": "boolean equals(Object obj) { if ( terms) return false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 68, "n_pass": [160, 11, 11]}
{"time": "2021-02-13 18:39:38.956095", "score": "0.6821", "loss": "0.8422", "code": "boolean equals(Object obj) { if ( terms) false; for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 66, "n_pass": [162, 12, 12]}
{"time": "2021-02-13 18:39:40.278213", "score": "0.3939", "loss": "1.9326", "code": "boolean equals(Object obj) { if ( terms)  for (int i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 64, "n_pass": [163, 13, 13]}
{"time": "2021-02-13 18:39:41.600050", "score": "0.3081", "loss": "2.2126", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0; i.length; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 62, "n_pass": [166, 14, 14]}
{"time": "2021-02-13 18:39:42.923674", "score": "0.3247", "loss": "2.1506", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0; i; i++) if (!terms[i].equals(ot.terms[i]))true; }", "n_tokens": 60, "n_pass": [171, 15, 15]}
{"time": "2021-02-13 18:39:44.236198", "score": "0.2832", "loss": "2.5102", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0; i; i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 58, "n_pass": [181, 16, 16]}
{"time": "2021-02-13 18:39:45.921030", "score": "0.2082", "loss": "2.8233", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;; i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 56, "n_pass": [201, 17, 17]}
{"time": "2021-02-13 18:39:53.591683", "score": "0.2082", "loss": "2.8233", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++) if (!terms[i].equals(terms[i]))true; }", "n_tokens": 55, "n_pass": [287, 18, 18]}
{"time": "2021-02-13 18:39:54.900372", "score": "0.2082", "loss": "2.8233", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++)if (!terms[i].equals(terms[i]))true; }", "n_tokens": 54, "n_pass": [292, 19, 19]}
{"time": "2021-02-13 18:39:56.226008", "score": "0.2082", "loss": "2.8233", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++)if(!terms[i].equals(terms[i]))true; }", "n_tokens": 53, "n_pass": [294, 20, 20]}
{"time": "2021-02-13 18:39:57.561489", "score": "0.2244", "loss": "2.5756", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]))true; }", "n_tokens": 52, "n_pass": [296, 21, 21]}
{"time": "2021-02-13 18:39:58.878243", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i])); }", "n_tokens": 51, "n_pass": [310, 22, 22]}
{"time": "2021-02-13 18:40:00.189085", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj) { if ( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 50, "n_pass": [312, 23, 23]}
{"time": "2021-02-13 18:40:02.231829", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){ if ( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 49, "n_pass": [322, 24, 24]}
{"time": "2021-02-13 18:40:03.547131", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if ( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 48, "n_pass": [324, 25, 25]}
{"time": "2021-02-13 18:40:04.873592", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if( terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 47, "n_pass": [326, 26, 26]}
{"time": "2021-02-13 18:40:06.170718", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms)  for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 46, "n_pass": [328, 27, 27]}
{"time": "2021-02-13 18:40:07.499598", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms) for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 45, "n_pass": [331, 28, 28]}
{"time": "2021-02-13 18:40:08.841267", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms)for (i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 44, "n_pass": [332, 29, 29]}
{"time": "2021-02-13 18:40:10.150076", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms)for(i = 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 43, "n_pass": [334, 30, 30]}
{"time": "2021-02-13 18:40:11.457170", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms)for(i= 0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 42, "n_pass": [337, 31, 31]}
{"time": "2021-02-13 18:40:12.778364", "score": "0.271", "loss": "2.2506", "code": "boolean equals(Object obj){if(terms)for(i=0;;i++)if(terms[i].equals(terms[i]));}", "n_tokens": 41, "n_pass": [339, 32, 32]}
{"time": "2021-02-13 18:40:14.099587", "score": "0.7719", "loss": "0.5454", "code": "boolean equals(Object obj){if(terms)for(i=0;;i++)(terms[i].equals(terms[i]));}", "n_tokens": 40, "n_pass": [347, 33, 33]}
{"time": "2021-02-13 18:40:16.142718", "score": "0.7925", "loss": "0.4574", "code": "boolean equals(Object obj){if(terms)for(i0;;i++)(terms[i].equals(terms[i]));}", "n_tokens": 39, "n_pass": [380, 34, 34]}
{"time": "2021-02-13 18:40:17.435164", "score": "0.7925", "loss": "0.4574", "code": "boolean equals(Object obj){if(terms)for(i;;i++)(terms[i].equals(terms[i]));}", "n_tokens": 38, "n_pass": [381, 35, 35]}
{"time": "2021-02-13 18:40:19.496357", "score": "0.731", "loss": "0.608", "code": "boolean equals(Object obj){if(terms)for(;;i++)(terms[i].equals(terms[i]));}", "n_tokens": 37, "n_pass": [419, 36, 36]}

Minimal simplified code:
boolean equals(Object obj){if(terms)for(;;i++)(terms[i].equals(terms[i]));}

