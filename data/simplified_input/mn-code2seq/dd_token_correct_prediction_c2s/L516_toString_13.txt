
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/SINTEF-9012__JArduino/jarduino.core/src/main/java/org/sintef/jarduino/msg/AnalogReadMsg_toString.java
method_name = toString
method_body = @Override public String toString() { String myString = "analogRead:"; myString += " [pin: " + pin + "]"; return myString; }
predict, score, loss = toString, 0.9807133674621582, 0.043996769934892654

Trace of simplified code(s):
{"time": "2021-02-13 17:13:20.043021", "score": "0.9807", "loss": "0.044", "code": "@Override public String toString() { String myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 55, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 17:13:22.075309", "score": "0.8966", "loss": "0.2659", "code": "public String toString() { String myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 52, "n_pass": [44, 2, 2]}
{"time": "2021-02-13 17:13:23.397882", "score": "0.8899", "loss": "0.2815", "code": "public String toString() {myString = \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 49, "n_pass": [47, 3, 3]}
{"time": "2021-02-13 17:13:24.697426", "score": "0.9171", "loss": "0.2061", "code": "public String toString() { \"analogRead:\"; myString += \" [pin: \" + pin + \"]\"; return myString; }", "n_tokens": 46, "n_pass": [48, 4, 4]}
{"time": "2021-02-13 17:13:26.021260", "score": "0.9092", "loss": "0.2296", "code": "public String toString() { \"analogRead:\"; myString += \" \" + pin + \"]\"; return myString; }", "n_tokens": 42, "n_pass": [53, 5, 5]}
{"time": "2021-02-13 17:13:27.344787", "score": "0.8525", "loss": "0.3927", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\"; return myString; }", "n_tokens": 38, "n_pass": [55, 6, 6]}
{"time": "2021-02-13 17:13:30.323027", "score": "0.8134", "loss": "0.4971", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\"; myString; }", "n_tokens": 36, "n_pass": [92, 7, 7]}
{"time": "2021-02-13 17:13:31.615801", "score": "0.8374", "loss": "0.4191", "code": "public String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 34, "n_pass": [93, 8, 8]}
{"time": "2021-02-13 17:13:32.899151", "score": "0.8374", "loss": "0.4191", "code": " String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 33, "n_pass": [95, 9, 9]}
{"time": "2021-02-13 17:13:34.182639", "score": "0.8374", "loss": "0.4191", "code": "String toString() { \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 32, "n_pass": [96, 10, 10]}
{"time": "2021-02-13 17:13:40.502955", "score": "0.8374", "loss": "0.4191", "code": "String toString(){ \"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 31, "n_pass": [144, 11, 11]}
{"time": "2021-02-13 17:13:41.779104", "score": "0.8374", "loss": "0.4191", "code": "String toString(){\"analogRead:\"; myString += \" \" + \"]\";  }", "n_tokens": 30, "n_pass": [146, 12, 12]}
{"time": "2021-02-13 17:13:43.057844", "score": "0.889", "loss": "0.279", "code": "String toString(){\":\"; myString += \" \" + \"]\";  }", "n_tokens": 29, "n_pass": [148, 13, 13]}
{"time": "2021-02-13 17:13:44.333869", "score": "0.8962", "loss": "0.2629", "code": "String toString(){\"\"; myString += \" \" + \"]\";  }", "n_tokens": 28, "n_pass": [149, 14, 14]}
{"time": "2021-02-13 17:13:45.612487", "score": "0.8962", "loss": "0.2629", "code": "String toString(){\"\";myString += \" \" + \"]\";  }", "n_tokens": 27, "n_pass": [152, 15, 15]}
{"time": "2021-02-13 17:13:46.887686", "score": "0.8962", "loss": "0.2629", "code": "String toString(){\"\";myString+= \" \" + \"]\";  }", "n_tokens": 26, "n_pass": [154, 16, 16]}
{"time": "2021-02-13 17:13:48.171249", "score": "0.8262", "loss": "0.5059", "code": "String toString(){\"\";myString= \" \" + \"]\";  }", "n_tokens": 25, "n_pass": [155, 17, 17]}
{"time": "2021-02-13 17:13:49.448547", "score": "0.8262", "loss": "0.5059", "code": "String toString(){\"\";myString=\" \" + \"]\";  }", "n_tokens": 24, "n_pass": [157, 18, 18]}
{"time": "2021-02-13 17:13:50.722954", "score": "0.7927", "loss": "0.6448", "code": "String toString(){\"\";myString=\"\" + \"]\";  }", "n_tokens": 23, "n_pass": [159, 19, 19]}
{"time": "2021-02-13 17:13:52.000305", "score": "0.7927", "loss": "0.6448", "code": "String toString(){\"\";myString=\"\"+ \"]\";  }", "n_tokens": 22, "n_pass": [161, 20, 20]}
{"time": "2021-02-13 17:13:53.275044", "score": "0.7927", "loss": "0.6448", "code": "String toString(){\"\";myString=\"\"+\"]\";  }", "n_tokens": 21, "n_pass": [163, 21, 21]}
{"time": "2021-02-13 17:13:55.827667", "score": "0.7927", "loss": "0.6448", "code": "String toString(){\"\";myString=\"\"+\"]\"; }", "n_tokens": 20, "n_pass": [168, 23, 22]}
{"time": "2021-02-13 17:13:57.141318", "score": "0.7927", "loss": "0.6448", "code": "String toString(){\"\";myString=\"\"+\"]\";}", "n_tokens": 19, "n_pass": [169, 24, 23]}

Minimal simplified code:
String toString(){"";myString=""+"]";}

