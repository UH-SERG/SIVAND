
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Othershe__DUtil/dutil/src/main/java/com/othershe/dutil/upload/UploadProgressHandler_handleMessage.java
method_name = handleMessage
method_body = @Override public void handleMessage(Message msg) { super.handleMessage(msg); switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg.arg1, msg.arg2)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); break; case ERROR: uploadCallback.onError(msg.obj.toString()); break; } }
predict, score, loss = handleMessage, 0.9993091821670532, 0.0014311070553958416

Trace of simplified code(s):
{"time": "2021-02-13 16:19:32.894831", "score": "0.9992", "loss": "0.0017", "code": "@Override public void handleMessage(Message msg) { super.handleMessage(msg); switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg.arg1, msg.arg2)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); break; case ERROR: uploadCallback.onError(msg.obj.toString()); break; } }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:19:34.268271", "score": "0.9946", "loss": "0.0117", "code": "@Override public void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg.arg1, msg.arg2)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); break; case ERROR: uploadCallback.onError(msg.obj.toString()); break; } }", "n_tokens": 129, "n_pass": [46, 2, 2]}
{"time": "2021-02-13 16:19:35.618104", "score": "0.9925", "loss": "0.0162", "code": "@Override public void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); break; case ERROR: uploadCallback.onError(msg.obj.toString()); break; } }", "n_tokens": 120, "n_pass": [53, 3, 3]}
{"time": "2021-02-13 16:19:36.960798", "score": "0.8876", "loss": "0.2604", "code": "@Override public void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 111, "n_pass": [57, 4, 4]}
{"time": "2021-02-13 16:19:38.340104", "score": "0.9792", "loss": "0.0625", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); break; case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 107, "n_pass": [101, 5, 5]}
{"time": "2021-02-13 16:19:39.711717", "score": "0.9767", "loss": "0.0725", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart();case PROGRESS: uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 103, "n_pass": [109, 6, 6]}
{"time": "2021-02-13 16:19:41.072771", "score": "0.9731", "loss": "0.078", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); uploadCallback.onProgress(msg.arg1, msg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 99, "n_pass": [110, 7, 7]}
{"time": "2021-02-13 16:19:42.405456", "score": "0.9704", "loss": "0.0891", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); uploadCallback.onProgress(msg.arg.arg2, Utils.getPercentage(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 95, "n_pass": [113, 8, 8]}
{"time": "2021-02-13 16:19:43.738703", "score": "0.9734", "loss": "0.0776", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback.onStart(); uploadCallback.onProgress(msg.arg.arg2,(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 91, "n_pass": [115, 9, 9]}
{"time": "2021-02-13 16:19:45.083070", "score": "0.9745", "loss": "0.0734", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg.arg2,(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 87, "n_pass": [133, 10, 10]}
{"time": "2021-02-13 16:19:46.418183", "score": "0.965", "loss": "0.1062", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg)); break; case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 83, "n_pass": [136, 11, 11]}
{"time": "2021-02-13 16:19:48.105174", "score": "0.965", "loss": "0.1062", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  case FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 81, "n_pass": [197, 12, 12]}
{"time": "2021-02-13 16:19:49.464122", "score": "0.9637", "loss": "0.1135", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISH: uploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 79, "n_pass": [198, 13, 13]}
{"time": "2021-02-13 16:19:50.825871", "score": "0.9669", "loss": "0.1037", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHuploadCallback.onFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 77, "n_pass": [200, 14, 14]}
{"time": "2021-02-13 16:19:52.162449", "score": "0.9693", "loss": "0.0937", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(msg.obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 75, "n_pass": [201, 15, 15]}
{"time": "2021-02-13 16:19:53.489825", "score": "0.9699", "loss": "0.0878", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(obj.toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 73, "n_pass": [203, 16, 16]}
{"time": "2021-02-13 16:19:54.813391", "score": "0.9667", "loss": "0.1094", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg.obj.toString()); break; } }", "n_tokens": 71, "n_pass": [204, 17, 17]}
{"time": "2021-02-13 16:19:56.157187", "score": "0.9679", "loss": "0.1087", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msgtoString()); break; } }", "n_tokens": 68, "n_pass": [209, 18, 18]}
{"time": "2021-02-13 16:19:57.498723", "score": "0.9669", "loss": "0.115", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg); break; } }", "n_tokens": 65, "n_pass": [210, 19, 19]}
{"time": "2021-02-13 16:19:58.818770", "score": "0.9669", "loss": "0.115", "code": " void handleMessage(Message msg) { switch(msg.what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg); } }", "n_tokens": 62, "n_pass": [212, 20, 20]}
{"time": "2021-02-13 16:20:00.502986", "score": "0.9158", "loss": "0.3269", "code": " void handleMessage(Message msg) { switch(what) { case START: uploadCallback. uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg); } }", "n_tokens": 60, "n_pass": [221, 21, 21]}
{"time": "2021-02-13 16:20:01.826425", "score": "0.9346", "loss": "0.2315", "code": " void handleMessage(Message msg) { switch(what) { case START:  uploadCallback.onProgress(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg); } }", "n_tokens": 58, "n_pass": [227, 22, 22]}
{"time": "2021-02-13 16:20:03.149462", "score": "0.9627", "loss": "0.1283", "code": " void handleMessage(Message msg) { switch(what) { case START:  uploadCallback(msg.arg(msg));  FINISHonFinish(toString()); breakonError(msg); } }", "n_tokens": 56, "n_pass": [229, 23, 23]}
{"time": "2021-02-13 16:20:04.487359", "score": "0.9578", "loss": "0.1582", "code": " void handleMessage(Message msg) { switch(what) { case START:  uploadCallback(msg(msg));  FINISHonFinish(toString()); breakonError(msg); } }", "n_tokens": 54, "n_pass": [231, 24, 24]}
{"time": "2021-02-13 16:20:05.790936", "score": "0.954", "loss": "0.1738", "code": " void handleMessage(Message msg) { switch(what) { case START:  uploadCallback(msg(msg)); onFinish(toString()); breakonError(msg); } }", "n_tokens": 52, "n_pass": [235, 25, 25]}
{"time": "2021-02-13 16:20:07.518372", "score": "0.8794", "loss": "0.4414", "code": " void handleMessage(Message msg) { switch(what) { case START: (msg(msg)); onFinish(toString()); breakonError(msg); } }", "n_tokens": 50, "n_pass": [255, 26, 26]}
{"time": "2021-02-13 16:20:13.519572", "score": "0.9071", "loss": "0.3185", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg)); onFinish(toString()); breakonError(msg); } }", "n_tokens": 49, "n_pass": [326, 27, 27]}
{"time": "2021-02-13 16:20:14.866691", "score": "0.9071", "loss": "0.3185", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg));onFinish(toString()); breakonError(msg); } }", "n_tokens": 48, "n_pass": [332, 28, 28]}
{"time": "2021-02-13 16:20:16.200800", "score": "0.76", "loss": "0.8551", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg));(toString()); breakonError(msg); } }", "n_tokens": 47, "n_pass": [333, 29, 29]}
{"time": "2021-02-13 16:20:17.515077", "score": "0.76", "loss": "0.8551", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg));(toString());breakonError(msg); } }", "n_tokens": 46, "n_pass": [340, 30, 30]}
{"time": "2021-02-13 16:20:18.829038", "score": "0.8133", "loss": "0.6292", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg));(toString());onError(msg); } }", "n_tokens": 45, "n_pass": [341, 31, 31]}
{"time": "2021-02-13 16:20:20.143092", "score": "0.713", "loss": "1.0412", "code": " void handleMessage(Message msg) { switch(what) { case START: ((msg));(toString());(msg); } }", "n_tokens": 44, "n_pass": [342, 32, 32]}
{"time": "2021-02-13 16:20:21.474469", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg) { switch(what) { case START: ((msg));(toString());(msg); } }", "n_tokens": 43, "n_pass": [347, 33, 33]}
{"time": "2021-02-13 16:20:23.506148", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){ switch(what) { case START: ((msg));(toString());(msg); } }", "n_tokens": 42, "n_pass": [356, 34, 34]}
{"time": "2021-02-13 16:20:24.822296", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what) { case START: ((msg));(toString());(msg); } }", "n_tokens": 41, "n_pass": [358, 35, 35]}
{"time": "2021-02-13 16:20:26.142153", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what){ case START: ((msg));(toString());(msg); } }", "n_tokens": 40, "n_pass": [363, 36, 36]}
{"time": "2021-02-13 16:20:27.448865", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what){case START: ((msg));(toString());(msg); } }", "n_tokens": 39, "n_pass": [365, 37, 37]}
{"time": "2021-02-13 16:20:28.773592", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what){case START:((msg));(toString());(msg); } }", "n_tokens": 38, "n_pass": [370, 38, 38]}
{"time": "2021-02-13 16:20:31.809286", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what){case START:((msg));(toString());(msg);} }", "n_tokens": 37, "n_pass": [417, 39, 39]}
{"time": "2021-02-13 16:20:33.117238", "score": "0.713", "loss": "1.0412", "code": "void handleMessage(Message msg){switch(what){case START:((msg));(toString());(msg);}}", "n_tokens": 36, "n_pass": [418, 40, 40]}

Minimal simplified code:
void handleMessage(Message msg){switch(what){case START:((msg));(toString());(msg);}}

