
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/core/LabelSet_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { LabelSet l2 = (LabelSet) o; if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }
predict, score, loss = equals, 0.9669485092163086, 0.0406835712492466

Trace of simplified code(s):
{"time": "2021-02-13 19:40:38.906907", "score": "0.9669", "loss": "0.0407", "code": "@Override public boolean equals(Object o) { LabelSet l2 = (LabelSet) o; if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 124, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 19:40:40.635707", "score": "0.9675", "loss": "0.0389", "code": "@Override public boolean equals(Object o) {if (indices.length != l2.indices.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 109, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 19:40:42.321445", "score": "0.8757", "loss": "0.1587", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0; i < indices.length; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 101, "n_pass": [44, 3, 3]}
{"time": "2021-02-13 19:40:43.658727", "score": "0.936", "loss": "0.0808", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i] != l2.indices[i]) { return false; } } } return true; }", "n_tokens": 93, "n_pass": [48, 4, 4]}
{"time": "2021-02-13 19:40:44.988900", "score": "0.6719", "loss": "0.4568", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) { return false; } } } return true; }", "n_tokens": 85, "n_pass": [51, 5, 5]}
{"time": "2021-02-13 19:40:49.407874", "score": "0.8131", "loss": "0.2677", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) { false; } } } return true; }", "n_tokens": 83, "n_pass": [154, 7, 6]}
{"time": "2021-02-13 19:40:50.768160", "score": "0.6728", "loss": "0.4778", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {; } } } return true; }", "n_tokens": 81, "n_pass": [155, 8, 7]}
{"time": "2021-02-13 19:40:52.128984", "score": "0.6728", "loss": "0.4778", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } } return true; }", "n_tokens": 79, "n_pass": [156, 9, 8]}
{"time": "2021-02-13 19:40:53.452460", "score": "0.8185", "loss": "0.3567", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } } true; }", "n_tokens": 77, "n_pass": [160, 10, 9]}
{"time": "2021-02-13 19:40:54.797561", "score": "0.6869", "loss": "0.5384", "code": "@Override public boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 75, "n_pass": [161, 11, 10]}
{"time": "2021-02-13 19:40:56.124179", "score": "0.354", "loss": "1.4437", "code": "@Overridepublic boolean equals(Object o) {if (indices.length.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 74, "n_pass": [165, 12, 11]}
{"time": "2021-02-13 19:40:58.177741", "score": "0.3461", "loss": "1.3632", "code": "@Overridepublic boolean equals(Object o) {if (indices.length) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 72, "n_pass": [174, 13, 12]}
{"time": "2021-02-13 19:40:59.488439", "score": "0.3376", "loss": "1.3579", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; else { for (int i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 70, "n_pass": [175, 14, 13]}
{"time": "2021-02-13 19:41:02.133942", "score": "0.4658", "loss": "0.943", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (int i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 68, "n_pass": [179, 16, 14]}
{"time": "2021-02-13 19:41:03.453228", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i = 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 66, "n_pass": [183, 17, 15]}
{"time": "2021-02-13 19:41:14.863043", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i= 0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 65, "n_pass": [282, 19, 16]}
{"time": "2021-02-13 19:41:16.182864", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;; i++) { if (indices[i][i]) {} } }  }", "n_tokens": 64, "n_pass": [284, 20, 17]}
{"time": "2021-02-13 19:41:17.502358", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++) { if (indices[i][i]) {} } }  }", "n_tokens": 63, "n_pass": [288, 21, 18]}
{"time": "2021-02-13 19:41:18.845788", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){ if (indices[i][i]) {} } }  }", "n_tokens": 62, "n_pass": [293, 22, 19]}
{"time": "2021-02-13 19:41:20.164477", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if (indices[i][i]) {} } }  }", "n_tokens": 61, "n_pass": [295, 23, 20]}
{"time": "2021-02-13 19:41:21.499469", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]) {} } }  }", "n_tokens": 60, "n_pass": [297, 24, 21]}
{"time": "2021-02-13 19:41:22.823311", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){} } }  }", "n_tokens": 59, "n_pass": [307, 25, 22]}
{"time": "2021-02-13 19:41:24.134339", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}} }  }", "n_tokens": 58, "n_pass": [310, 26, 23]}
{"time": "2021-02-13 19:41:25.453706", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}}}  }", "n_tokens": 57, "n_pass": [312, 27, 24]}
{"time": "2021-02-13 19:41:26.804075", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}}} }", "n_tokens": 56, "n_pass": [314, 28, 25]}
{"time": "2021-02-13 19:41:28.120530", "score": "0.3768", "loss": "1.3035", "code": "@Overridepublic boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 55, "n_pass": [315, 29, 26]}
{"time": "2021-02-13 19:41:29.440413", "score": "0.7113", "loss": "0.4401", "code": "@Override boolean equals(Object o) {if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 54, "n_pass": [319, 30, 27]}
{"time": "2021-02-13 19:41:31.859663", "score": "0.7113", "loss": "0.4401", "code": "@Override boolean equals(Object o){if (indices) return false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 53, "n_pass": [329, 31, 28]}
{"time": "2021-02-13 19:41:33.208933", "score": "0.7113", "loss": "0.4401", "code": "@Override boolean equals(Object o){if(indices) return false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 52, "n_pass": [332, 32, 29]}
{"time": "2021-02-13 19:41:34.528146", "score": "0.7113", "loss": "0.4401", "code": "@Override boolean equals(Object o){if(indices)return false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 51, "n_pass": [336, 33, 30]}
{"time": "2021-02-13 19:41:35.858613", "score": "0.1837", "loss": "2.0398", "code": "@Override boolean equals(Object o){if(indices) false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 50, "n_pass": [337, 34, 31]}
{"time": "2021-02-13 19:41:37.201695", "score": "0.1837", "loss": "2.0398", "code": "@Override boolean equals(Object o){if(indices)false; { for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 49, "n_pass": [338, 35, 32]}
{"time": "2021-02-13 19:41:39.837174", "score": "0.1837", "loss": "2.0398", "code": "@Override boolean equals(Object o){if(indices)false;{ for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 48, "n_pass": [341, 37, 33]}
{"time": "2021-02-13 19:41:41.178419", "score": "0.1837", "loss": "2.0398", "code": "@Override boolean equals(Object o){if(indices)false;{for (i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 47, "n_pass": [343, 38, 34]}
{"time": "2021-02-13 19:41:42.520087", "score": "0.1837", "loss": "2.0398", "code": "@Override boolean equals(Object o){if(indices)false;{for(i=0;;i++){if(indices[i][i]){}}}}", "n_tokens": 46, "n_pass": [345, 39, 35]}
{"time": "2021-02-13 19:41:43.813779", "score": "0.3241", "loss": "1.4237", "code": "@Override boolean equals(Object o){if(indices)false;{for(i0;;i++){if(indices[i][i]){}}}}", "n_tokens": 45, "n_pass": [348, 40, 36]}
{"time": "2021-02-13 19:41:45.154833", "score": "0.3241", "loss": "1.4237", "code": "@Override boolean equals(Object o){if(indices)false;{for(i;;i++){if(indices[i][i]){}}}}", "n_tokens": 44, "n_pass": [349, 41, 37]}
{"time": "2021-02-13 19:41:47.973165", "score": "0.1977", "loss": "1.9568", "code": "@Override boolean equals(Object o){if(indices);{for(i;;i++){if(indices[i][i]){}}}}", "n_tokens": 43, "n_pass": [388, 42, 38]}

Minimal simplified code:
@Override boolean equals(Object o){if(indices);{for(i;;i++){if(indices[i][i]){}}}}

