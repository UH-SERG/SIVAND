
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/qqchenjian318__VideoEditor-For-Android/app/src/main/java/com/example/cj/videoeditor/record/video/VideoEncoderCore_getOutputBuffer.java
method_name = getOutputBuffer
method_body = private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }
predict, score, loss = getOutputBuffer, 0.9616789221763611, 0.21408849954605103

Trace of simplified code(s):
{"time": "2021-02-13 04:57:39.648159", "score": "0.9617", "loss": "0.2141", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 74, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:57:41.005481", "score": "0.9487", "loss": "0.2714", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers()[index]; } }", "n_tokens": 65, "n_pass": [23, 2, 2]}
{"time": "2021-02-13 04:57:42.337614", "score": "0.9311", "loss": "0.3308", "code": "private ByteBuffer getOutputBuffer(MediaCodec codec, int index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers; } }", "n_tokens": 60, "n_pass": [50, 3, 3]}
{"time": "2021-02-13 04:57:44.026033", "score": "0.9392", "loss": "0.2701", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { return codec.getOutputBuffers; } }", "n_tokens": 56, "n_pass": [53, 4, 4]}
{"time": "2021-02-13 04:57:45.350460", "score": "0.9541", "loss": "0.1865", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else { ; } }", "n_tokens": 51, "n_pass": [62, 5, 5]}
{"time": "2021-02-13 04:57:47.385053", "score": "0.9541", "loss": "0.1865", "code": "private ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 48, "n_pass": [96, 6, 6]}
{"time": "2021-02-13 04:57:48.709889", "score": "0.9541", "loss": "0.1865", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.VERSION.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 46, "n_pass": [98, 7, 7]}
{"time": "2021-02-13 04:57:50.380733", "score": "0.9444", "loss": "0.2251", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.SDK_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 44, "n_pass": [107, 8, 8]}
{"time": "2021-02-13 04:57:51.686165", "score": "0.9327", "loss": "0.2746", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build_CODES.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 42, "n_pass": [108, 9, 9]}
{"time": "2021-02-13 04:57:53.000400", "score": "0.9281", "loss": "0.2888", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build.LOLLIPOP) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 40, "n_pass": [109, 10, 10]}
{"time": "2021-02-13 04:57:54.306419", "score": "0.9498", "loss": "0.2066", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build) { return codec.getOutputBuffer(index); } else {} }", "n_tokens": 38, "n_pass": [110, 11, 11]}
{"time": "2021-02-13 04:57:59.623553", "score": "0.9498", "loss": "0.2066", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){ return codec.getOutputBuffer(index); } else {} }", "n_tokens": 37, "n_pass": [160, 12, 12]}
{"time": "2021-02-13 04:58:00.949773", "score": "0.9498", "loss": "0.2066", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){return codec.getOutputBuffer(index); } else {} }", "n_tokens": 36, "n_pass": [162, 13, 13]}
{"time": "2021-02-13 04:58:02.282923", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){ codec.getOutputBuffer(index); } else {} }", "n_tokens": 35, "n_pass": [163, 14, 14]}
{"time": "2021-02-13 04:58:03.585528", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); } else {} }", "n_tokens": 34, "n_pass": [164, 15, 15]}
{"time": "2021-02-13 04:58:06.222316", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); } {} }", "n_tokens": 32, "n_pass": [172, 17, 16]}
{"time": "2021-02-13 04:58:07.512868", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec  index) { if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 30, "n_pass": [173, 18, 17]}
{"time": "2021-02-13 04:58:09.868021", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec index) { if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 29, "n_pass": [180, 19, 18]}
{"time": "2021-02-13 04:58:11.170256", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec index){ if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 28, "n_pass": [184, 20, 19]}
{"time": "2021-02-13 04:58:12.472973", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if (Build){codec.getOutputBuffer(index); }  }", "n_tokens": 27, "n_pass": [186, 21, 20]}
{"time": "2021-02-13 04:58:13.780080", "score": "0.9389", "loss": "0.3341", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer(index); }  }", "n_tokens": 26, "n_pass": [188, 22, 21]}
{"time": "2021-02-13 04:58:18.780652", "score": "0.836", "loss": "0.8926", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer(); }  }", "n_tokens": 25, "n_pass": [219, 24, 22]}
{"time": "2021-02-13 04:58:20.084535", "score": "0.836", "loss": "0.8926", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}  }", "n_tokens": 24, "n_pass": [221, 25, 23]}
{"time": "2021-02-13 04:58:21.384114", "score": "0.836", "loss": "0.8926", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();} }", "n_tokens": 23, "n_pass": [223, 26, 24]}
{"time": "2021-02-13 04:58:22.704558", "score": "0.836", "loss": "0.8926", "code": "ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}}", "n_tokens": 22, "n_pass": [224, 27, 25]}

Minimal simplified code:
ByteBuffer getOutputBuffer(MediaCodec index){if(Build){codec.getOutputBuffer();}}

