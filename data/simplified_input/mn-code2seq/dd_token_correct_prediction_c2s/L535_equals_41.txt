
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/text/TokenSequence_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }
predict, score, loss = equals, 0.9951876401901245, 0.005360971204936504

Trace of simplified code(s):
{"time": "2021-02-13 17:32:17.178923", "score": "0.9952", "loss": "0.0054", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 101, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 17:32:18.543354", "score": "0.9924", "loss": "0.0084", "code": "@Override public boolean equals(Object o) { if (this == o() != o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 76, "n_pass": [9, 2, 2]}
{"time": "2021-02-13 17:32:19.914977", "score": "0.9838", "loss": "0.0177", "code": "@Override public boolean equals(Object o) { if (this ==  o.getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 70, "n_pass": [36, 3, 3]}
{"time": "2021-02-13 17:32:21.613990", "score": "0.9838", "loss": "0.0175", "code": "@Override public boolean equals(Object o) { if (this == getClass()) { return false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 67, "n_pass": [70, 4, 4]}
{"time": "2021-02-13 17:32:22.943731", "score": "0.9568", "loss": "0.0471", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {false; } TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 64, "n_pass": [72, 5, 5]}
{"time": "2021-02-13 17:32:24.294746", "score": "0.9286", "loss": "0.0781", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {} TokenSequence sequence = (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 61, "n_pass": [73, 6, 6]}
{"time": "2021-02-13 17:32:25.625399", "score": "0.9149", "loss": "0.0977", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) o; return Arrays.equals(words, sequence.words); }", "n_tokens": 58, "n_pass": [75, 7, 7]}
{"time": "2021-02-13 17:32:26.944228", "score": "0.9234", "loss": "0.0976", "code": "@Override public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 54, "n_pass": [79, 8, 8]}
{"time": "2021-02-13 17:32:28.283951", "score": "0.9185", "loss": "0.1212", "code": "public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) o; equals(words, sequence.words); }", "n_tokens": 51, "n_pass": [83, 9, 9]}
{"time": "2021-02-13 17:32:31.288771", "score": "0.8771", "loss": "0.1578", "code": "public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) equals(words, sequence.words); }", "n_tokens": 48, "n_pass": [96, 11, 10]}
{"time": "2021-02-13 17:32:35.987777", "score": "0.862", "loss": "0.1885", "code": "public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) equals( sequence.words); }", "n_tokens": 46, "n_pass": [143, 13, 11]}
{"time": "2021-02-13 17:32:37.306445", "score": "0.8379", "loss": "0.2369", "code": "public boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 44, "n_pass": [145, 14, 12]}
{"time": "2021-02-13 17:32:38.633376", "score": "0.8379", "loss": "0.2369", "code": " boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 43, "n_pass": [148, 15, 13]}
{"time": "2021-02-13 17:32:39.933445", "score": "0.8379", "loss": "0.2369", "code": "boolean equals(Object o) { if (this == getClass()) {} TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 42, "n_pass": [149, 16, 14]}
{"time": "2021-02-13 17:32:41.977737", "score": "0.8379", "loss": "0.2369", "code": "boolean equals(Object o){ if (this == getClass()) {} TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 41, "n_pass": [158, 17, 15]}
{"time": "2021-02-13 17:32:43.313752", "score": "0.8342", "loss": "0.228", "code": "boolean equals(Object o){ if (this == getClass) {} TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 39, "n_pass": [165, 18, 16]}
{"time": "2021-02-13 17:32:44.663620", "score": "0.8496", "loss": "0.2428", "code": "boolean equals(Object o){ if (this == getClass)  TokenSequence= (TokenSequence) equals( sequence); }", "n_tokens": 37, "n_pass": [167, 19, 17]}
{"time": "2021-02-13 17:32:45.976993", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){ if (this == getClass)  TokenSequence= (TokenSequence) equals(); }", "n_tokens": 35, "n_pass": [173, 20, 18]}
{"time": "2021-02-13 17:32:51.355034", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){ if (this == getClass)  TokenSequence= (TokenSequence) equals();}", "n_tokens": 34, "n_pass": [224, 21, 19]}
{"time": "2021-02-13 17:32:53.397204", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if (this == getClass)  TokenSequence= (TokenSequence) equals();}", "n_tokens": 33, "n_pass": [234, 22, 20]}
{"time": "2021-02-13 17:32:54.740125", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this == getClass)  TokenSequence= (TokenSequence) equals();}", "n_tokens": 32, "n_pass": [236, 23, 21]}
{"time": "2021-02-13 17:32:56.063682", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this== getClass)  TokenSequence= (TokenSequence) equals();}", "n_tokens": 31, "n_pass": [239, 24, 22]}
{"time": "2021-02-13 17:32:58.097606", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this==getClass)  TokenSequence= (TokenSequence) equals();}", "n_tokens": 30, "n_pass": [242, 25, 23]}
{"time": "2021-02-13 17:32:59.426996", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this==getClass) TokenSequence= (TokenSequence) equals();}", "n_tokens": 29, "n_pass": [245, 26, 24]}
{"time": "2021-02-13 17:33:00.737062", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this==getClass)TokenSequence= (TokenSequence) equals();}", "n_tokens": 28, "n_pass": [246, 27, 25]}
{"time": "2021-02-13 17:33:02.067178", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this==getClass)TokenSequence=(TokenSequence) equals();}", "n_tokens": 27, "n_pass": [249, 28, 26]}
{"time": "2021-02-13 17:33:03.375142", "score": "0.893", "loss": "0.1787", "code": "boolean equals(Object o){if(this==getClass)TokenSequence=(TokenSequence)equals();}", "n_tokens": 26, "n_pass": [253, 29, 27]}

Minimal simplified code:
boolean equals(Object o){if(this==getClass)TokenSequence=(TokenSequence)equals();}

