
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout_setQueryTimeout.java
method_name = setQueryTimeout
method_body = @Override public void setQueryTimeout(int seconds) throws SQLException { super.setQueryTimeout(seconds); Assert.assertEquals(TIMEOUT, seconds); isTimeoutSet = true; }
predict, score, loss = setQueryTimeout, 0.9990246295928955, 0.003462683642283082

Trace of simplified code(s):
{"time": "2021-02-13 05:18:27.345759", "score": "0.999", "loss": "0.0035", "code": "@Override public void setQueryTimeout(int seconds) throws SQLException { super.setQueryTimeout(seconds); Assert.assertEquals(TIMEOUT, seconds); isTimeoutSet = true; }", "n_tokens": 47, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 05:18:28.658106", "score": "0.9977", "loss": "0.0101", "code": "void setQueryTimeout(int seconds) throws SQLException { super.setQueryTimeout(seconds); Assert.assertEquals(TIMEOUT, seconds); isTimeoutSet = true; }", "n_tokens": 42, "n_pass": [20, 2, 2]}
{"time": "2021-02-13 05:18:31.286606", "score": "0.9953", "loss": "0.0169", "code": "void setQueryTimeout(int seconds)  { super.setQueryTimeout(seconds); Assert.assertEquals(TIMEOUT, seconds); isTimeoutSet = true; }", "n_tokens": 39, "n_pass": [44, 4, 3]}
{"time": "2021-02-13 05:18:36.559677", "score": "0.9973", "loss": "0.0098", "code": "void setQueryTimeout(int seconds)  { super.setQueryTimeout(seconds); Assert.assertEquals(seconds); isTimeoutSet = true; }", "n_tokens": 36, "n_pass": [50, 8, 4]}
{"time": "2021-02-13 05:18:37.870952", "score": "0.9965", "loss": "0.0149", "code": "void setQueryTimeout(int seconds)  { super.setQueryTimeout(seconds); Assert.assertEquals(seconds); isTimeoutSet ; }", "n_tokens": 33, "n_pass": [53, 9, 5]}
{"time": "2021-02-13 05:18:40.505185", "score": "0.7002", "loss": "1.7327", "code": "void setQueryTimeout(int seconds)  { super.setQueryTimeout; Assert.assertEquals(seconds); isTimeoutSet ; }", "n_tokens": 30, "n_pass": [60, 11, 6]}
{"time": "2021-02-13 05:18:43.117520", "score": "0.7685", "loss": "1.2477", "code": "void setQueryTimeout(int seconds)  { super.setQueryTimeout; Assert.assertEquals(seconds);; }", "n_tokens": 27, "n_pass": [64, 13, 7]}
{"time": "2021-02-13 05:18:49.394801", "score": "0.7685", "loss": "1.2477", "code": "void setQueryTimeout(int seconds) { super.setQueryTimeout; Assert.assertEquals(seconds);; }", "n_tokens": 26, "n_pass": [102, 16, 8]}
{"time": "2021-02-13 05:18:51.990563", "score": "0.8318", "loss": "0.8463", "code": "void setQueryTimeout(int seconds) { super.setQueryTimeout; assertEquals(seconds);; }", "n_tokens": 24, "n_pass": [107, 18, 9]}
{"time": "2021-02-13 05:18:57.667696", "score": "0.8908", "loss": "0.6518", "code": "void setQueryTimeout(int seconds) { super.setQueryTimeout; assertEquals();; }", "n_tokens": 23, "n_pass": [140, 20, 10]}
{"time": "2021-02-13 05:18:58.961250", "score": "0.8908", "loss": "0.6518", "code": "void setQueryTimeout(int seconds) { super.setQueryTimeout; assertEquals(); }", "n_tokens": 22, "n_pass": [141, 21, 11]}
{"time": "2021-02-13 05:19:00.263058", "score": "0.8908", "loss": "0.6518", "code": "void setQueryTimeout(int seconds) { super.setQueryTimeout; assertEquals();}", "n_tokens": 21, "n_pass": [143, 22, 12]}
{"time": "2021-02-13 05:19:02.281478", "score": "0.8908", "loss": "0.6518", "code": "void setQueryTimeout(int seconds){ super.setQueryTimeout; assertEquals();}", "n_tokens": 20, "n_pass": [153, 23, 13]}
{"time": "2021-02-13 05:19:03.573268", "score": "0.8908", "loss": "0.6518", "code": "void setQueryTimeout(int seconds){super.setQueryTimeout; assertEquals();}", "n_tokens": 19, "n_pass": [155, 24, 14]}
{"time": "2021-02-13 05:19:04.865447", "score": "0.8078", "loss": "1.2097", "code": "void setQueryTimeout(int seconds){supersetQueryTimeout; assertEquals();}", "n_tokens": 18, "n_pass": [157, 25, 15]}
{"time": "2021-02-13 05:19:06.159038", "score": "0.8078", "loss": "1.2097", "code": "void setQueryTimeout(int seconds){supersetQueryTimeout;assertEquals();}", "n_tokens": 17, "n_pass": [160, 26, 16]}
{"time": "2021-02-13 05:19:08.163806", "score": "0.9448", "loss": "0.2874", "code": "void setQueryTimeout(int seconds){setQueryTimeout;assertEquals();}", "n_tokens": 16, "n_pass": [175, 27, 17]}

Minimal simplified code:
void setQueryTimeout(int seconds){setQueryTimeout;assertEquals();}

