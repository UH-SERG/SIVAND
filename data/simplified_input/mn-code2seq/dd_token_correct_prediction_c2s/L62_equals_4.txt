
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/fishercoder1534__Leetcode/src/main/java/com/fishercoder/common/classes/UndirectedGraphNode_equals.java
method_name = equals
method_body = @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } UndirectedGraphNode that = (UndirectedGraphNode) o; if (label != that.label) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }
predict, score, loss = equals, 0.9959102869033813, 0.004803342279046774

Trace of simplified code(s):
{"time": "2021-02-13 04:41:53.196082", "score": "0.9984", "loss": "0.0019", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } UndirectedGraphNode that = (UndirectedGraphNode) o; if (label != that.label) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 140, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:41:54.540844", "score": "0.9965", "loss": "0.0043", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 105, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 04:41:55.896103", "score": "0.9954", "loss": "0.0057", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { return false; } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 96, "n_pass": [47, 3, 3]}
{"time": "2021-02-13 04:41:57.277074", "score": "0.9921", "loss": "0.0093", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { } return neighbors != null ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 91, "n_pass": [82, 4, 4]}
{"time": "2021-02-13 04:41:58.604335", "score": "0.9879", "loss": "0.0151", "code": "@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 86, "n_pass": [84, 5, 5]}
{"time": "2021-02-13 04:41:59.934703", "score": "0.9657", "loss": "0.0498", "code": " boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 82, "n_pass": [90, 6, 6]}
{"time": "2021-02-13 04:42:01.263972", "score": "0.7891", "loss": "0.3954", "code": " boolean equals(Object o) { if (thiso) { return true; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 78, "n_pass": [95, 7, 7]}
{"time": "2021-02-13 04:42:02.587507", "score": "0.6962", "loss": "0.6043", "code": " boolean equals(Object o) { if (thiso) {; } if (o == null || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 74, "n_pass": [97, 8, 8]}
{"time": "2021-02-13 04:42:03.936707", "score": "0.6568", "loss": "0.7074", "code": " boolean equals(Object o) { if (thiso) {; } if (onull || getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 70, "n_pass": [100, 9, 9]}
{"time": "2021-02-13 04:42:05.615603", "score": "0.7822", "loss": "0.4282", "code": " boolean equals(Object o) { if (thiso) {; } if (o|| getClass()) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 68, "n_pass": [149, 10, 10]}
{"time": "2021-02-13 04:42:06.944904", "score": "0.7806", "loss": "0.4337", "code": " boolean equals(Object o) { if (thiso) {; } if (o|| getClass) { } return neighbors ? neighbors.equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 66, "n_pass": [151, 11, 11]}
{"time": "2021-02-13 04:42:08.628797", "score": "0.8494", "loss": "0.2664", "code": " boolean equals(Object o) { if (thiso) {; } if (o|| getClass) { } return neighbors ? equals(that.neighbors) : that.neighbors == null; }", "n_tokens": 64, "n_pass": [158, 12, 12]}
{"time": "2021-02-13 04:42:09.963301", "score": "0.3636", "loss": "1.5064", "code": " boolean equals(Object o) { if (thiso) {; } if (o|| getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 61, "n_pass": [160, 13, 13]}
{"time": "2021-02-13 04:42:12.956680", "score": "0.3636", "loss": "1.5064", "code": " boolean equals(Object o) { if (thiso) {} if (o|| getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 59, "n_pass": [176, 15, 14]}
{"time": "2021-02-13 04:42:22.321799", "score": "0.3636", "loss": "1.5064", "code": " boolean equals(Object o) { if (thiso) {}if (o|| getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 58, "n_pass": [259, 17, 15]}
{"time": "2021-02-13 04:42:23.634346", "score": "0.3636", "loss": "1.5064", "code": " boolean equals(Object o) { if (thiso) {}if(o|| getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 57, "n_pass": [261, 18, 16]}
{"time": "2021-02-13 04:42:24.942254", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o| getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 56, "n_pass": [264, 19, 17]}
{"time": "2021-02-13 04:42:26.251222", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass) { } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 55, "n_pass": [266, 20, 18]}
{"time": "2021-02-13 04:42:27.561536", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){ } return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 54, "n_pass": [269, 21, 19]}
{"time": "2021-02-13 04:42:28.868365", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){} return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 53, "n_pass": [271, 22, 20]}
{"time": "2021-02-13 04:42:30.188605", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors ? equals() : that.neighbors == null; }", "n_tokens": 52, "n_pass": [273, 23, 21]}
{"time": "2021-02-13 04:42:32.214803", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors? equals() : that.neighbors == null; }", "n_tokens": 51, "n_pass": [277, 24, 22]}
{"time": "2021-02-13 04:42:33.518025", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors?equals() : that.neighbors == null; }", "n_tokens": 50, "n_pass": [279, 25, 23]}
{"time": "2021-02-13 04:42:34.827729", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors?equals(): that.neighbors == null; }", "n_tokens": 49, "n_pass": [283, 26, 24]}
{"time": "2021-02-13 04:42:36.132966", "score": "0.444", "loss": "1.2943", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors?equals():that.neighbors == null; }", "n_tokens": 48, "n_pass": [285, 27, 25]}
{"time": "2021-02-13 04:42:37.461546", "score": "0.4394", "loss": "1.4336", "code": " boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 46, "n_pass": [287, 28, 26]}
{"time": "2021-02-13 04:42:39.508849", "score": "0.4394", "loss": "1.4336", "code": "boolean equals(Object o) { if (thiso) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 45, "n_pass": [292, 29, 27]}
{"time": "2021-02-13 04:42:41.547948", "score": "0.4394", "loss": "1.4336", "code": "boolean equals(Object o){ if (thiso) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 44, "n_pass": [301, 30, 28]}
{"time": "2021-02-13 04:42:42.884275", "score": "0.4394", "loss": "1.4336", "code": "boolean equals(Object o){if (thiso) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 43, "n_pass": [303, 31, 29]}
{"time": "2021-02-13 04:42:44.201610", "score": "0.4394", "loss": "1.4336", "code": "boolean equals(Object o){if(thiso) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 42, "n_pass": [305, 32, 30]}
{"time": "2021-02-13 04:42:45.516474", "score": "0.4751", "loss": "1.2817", "code": "boolean equals(Object o){if(o) {}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 41, "n_pass": [307, 33, 31]}
{"time": "2021-02-13 04:42:46.829174", "score": "0.4751", "loss": "1.2817", "code": "boolean equals(Object o){if(o){}if(o|getClass){}return neighbors?equals():that == null; }", "n_tokens": 40, "n_pass": [310, 34, 32]}
{"time": "2021-02-13 04:42:48.176455", "score": "0.4977", "loss": "1.1216", "code": "boolean equals(Object o){if(o){}if(ogetClass){}return neighbors?equals():that == null; }", "n_tokens": 39, "n_pass": [316, 35, 33]}
{"time": "2021-02-13 04:42:49.505395", "score": "0.4563", "loss": "1.3023", "code": "boolean equals(Object o){if(o){}if(o){}return neighbors?equals():that == null; }", "n_tokens": 38, "n_pass": [317, 36, 34]}
{"time": "2021-02-13 04:42:54.319849", "score": "0.4563", "loss": "1.3023", "code": "boolean equals(Object o){if(o){}if(o){}return neighbors?equals():that== null; }", "n_tokens": 37, "n_pass": [360, 37, 35]}
{"time": "2021-02-13 04:42:56.024096", "score": "0.4563", "loss": "1.3023", "code": "boolean equals(Object o){if(o){}if(o){}return neighbors?equals():that==null; }", "n_tokens": 36, "n_pass": [362, 38, 36]}
{"time": "2021-02-13 04:42:57.354411", "score": "0.4563", "loss": "1.3023", "code": "boolean equals(Object o){if(o){}if(o){}return neighbors?equals():that==null;}", "n_tokens": 35, "n_pass": [365, 39, 37]}

Minimal simplified code:
boolean equals(Object o){if(o){}if(o){}return neighbors?equals():that==null;}

