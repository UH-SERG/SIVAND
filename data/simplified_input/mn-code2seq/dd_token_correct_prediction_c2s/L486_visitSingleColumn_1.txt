
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/rakam-io__rakam/rakam-parser/src/main/java/com/facebook/presto/sql/RakamSqlFormatter_visitSingleColumn.java
method_name = visitSingleColumn
method_body = @Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }
predict, score, loss = visitSingleColumn, 0.9698457717895508, 0.11071144789457321

Trace of simplified code(s):
{"time": "2021-02-13 16:44:25.001157", "score": "0.9747", "loss": "0.0955", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 110, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:44:26.738521", "score": "0.9827", "loss": "0.0704", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(' ').append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 103, "n_pass": [49, 2, 2]}
{"time": "2021-02-13 16:44:28.112332", "score": "0.9871", "loss": "0.053", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.getAlias().get(), tableNameMapper, columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 96, "n_pass": [54, 3, 3]}
{"time": "2021-02-13 16:44:29.449823", "score": "0.9895", "loss": "0.0458", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.getAlias(), columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 89, "n_pass": [56, 4, 4]}
{"time": "2021-02-13 16:44:31.166626", "score": "0.9897", "loss": "0.0448", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node. columnNameMapper, queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 85, "n_pass": [96, 5, 5]}
{"time": "2021-02-13 16:44:32.501827", "score": "0.9905", "loss": "0.0415", "code": "@Override protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 81, "n_pass": [97, 6, 6]}
{"time": "2021-02-13 16:44:33.856510", "score": "0.9465", "loss": "0.2835", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { builder.append(formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 78, "n_pass": [102, 7, 7]}
{"time": "2021-02-13 16:44:35.557379", "score": "0.9212", "loss": "0.4084", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpression(),queryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 75, "n_pass": [109, 8, 8]}
{"time": "2021-02-13 16:44:36.896486", "score": "0.911", "loss": "0.4463", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionqueryWithTables, escapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 72, "n_pass": [112, 9, 9]}
{"time": "2021-02-13 16:44:38.227620", "score": "0.9329", "loss": "0.3676", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node.getAlias().isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 69, "n_pass": [113, 10, 10]}
{"time": "2021-02-13 16:44:39.588434", "score": "0.9352", "loss": "0.3571", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node.isPresent()) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 65, "n_pass": [117, 11, 11]}
{"time": "2021-02-13 16:44:40.919738", "score": "0.9193", "loss": "0.4368", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(node.getExpressionescapeIdentifier)); if (node) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 61, "n_pass": [118, 12, 12]}
{"time": "2021-02-13 16:44:42.629456", "score": "0.9215", "loss": "0.4173", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { builder.append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 58, "n_pass": [133, 13, 13]}
{"time": "2021-02-13 16:44:46.028321", "score": "0.9113", "loss": "0.4543", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression(node.queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 56, "n_pass": [193, 14, 14]}
{"time": "2021-02-13 16:44:47.389251", "score": "0.927", "loss": "0.3852", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression(queryWithTables, escapeIdentifier)); } return null; }", "n_tokens": 54, "n_pass": [195, 15, 15]}
{"time": "2021-02-13 16:44:48.709739", "score": "0.9471", "loss": "0.3024", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression( escapeIdentifier)); } return null; }", "n_tokens": 52, "n_pass": [196, 16, 16]}
{"time": "2021-02-13 16:44:50.055899", "score": "0.9429", "loss": "0.3353", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } return null; }", "n_tokens": 50, "n_pass": [197, 17, 17]}
{"time": "2021-02-13 16:44:51.386007", "score": "0.8599", "loss": "0.8442", "code": "protected Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 48, "n_pass": [201, 18, 18]}
{"time": "2021-02-13 16:44:54.013174", "score": "0.8599", "loss": "0.8442", "code": " Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 47, "n_pass": [204, 20, 19]}
{"time": "2021-02-13 16:44:55.355551", "score": "0.8599", "loss": "0.8442", "code": "Void visitSingleColumn(SingleColumn node, Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 46, "n_pass": [205, 21, 20]}
{"time": "2021-02-13 16:45:03.713217", "score": "0.8599", "loss": "0.8442", "code": "Void visitSingleColumn(SingleColumn node,Integer indent) { (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 45, "n_pass": [271, 23, 21]}
{"time": "2021-02-13 16:45:05.027535", "score": "0.8599", "loss": "0.8442", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){ (formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 44, "n_pass": [275, 24, 22]}
{"time": "2021-02-13 16:45:06.332679", "score": "0.8599", "loss": "0.8442", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){(formatExpression(escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 43, "n_pass": [277, 25, 23]}
{"time": "2021-02-13 16:45:07.633540", "score": "0.7451", "loss": "1.5082", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier)); if (node) { append(formatExpression()); } null; }", "n_tokens": 42, "n_pass": [279, 26, 24]}
{"time": "2021-02-13 16:45:08.939126", "score": "0.7451", "loss": "1.5082", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if (node) { append(formatExpression()); } null; }", "n_tokens": 41, "n_pass": [285, 27, 25]}
{"time": "2021-02-13 16:45:10.271102", "score": "0.7451", "loss": "1.5082", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node) { append(formatExpression()); } null; }", "n_tokens": 40, "n_pass": [287, 28, 26]}
{"time": "2021-02-13 16:45:11.580821", "score": "0.7451", "loss": "1.5082", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){ append(formatExpression()); } null; }", "n_tokens": 39, "n_pass": [291, 29, 27]}
{"time": "2021-02-13 16:45:12.905342", "score": "0.7451", "loss": "1.5082", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){append(formatExpression()); } null; }", "n_tokens": 38, "n_pass": [293, 30, 28]}
{"time": "2021-02-13 16:45:14.207141", "score": "0.6203", "loss": "2.482", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression()); } null; }", "n_tokens": 37, "n_pass": [294, 31, 29]}
{"time": "2021-02-13 16:45:15.510629", "score": "0.6203", "loss": "2.482", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());} null; }", "n_tokens": 36, "n_pass": [301, 32, 30]}
{"time": "2021-02-13 16:45:16.838956", "score": "0.6203", "loss": "2.482", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}null; }", "n_tokens": 35, "n_pass": [303, 33, 31]}
{"time": "2021-02-13 16:45:19.499913", "score": "0.6203", "loss": "2.482", "code": "Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}null;}", "n_tokens": 34, "n_pass": [306, 35, 32]}

Minimal simplified code:
Void visitSingleColumn(SingleColumn node,Integer indent){((escapeIdentifier));if(node){(formatExpression());}null;}

