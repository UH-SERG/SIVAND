
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/mimno__Mallet/src/cc/mallet/pipe/AddClassifierTokenPredictions_classify.java
method_name = classify
method_body = public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKey(instName)) return m_tokenClassifier.classify(instance); Classifier classifier = (Classifier) m_table.get(instName); return classifier.classify(instance); }
predict, score, loss = classify, 0.9995679259300232, 0.14913859963417053

Trace of simplified code(s):
{"time": "2021-02-13 23:01:49.116512", "score": "0.9996", "loss": "0.1491", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKey(instName)) return m_tokenClassifier.classify(instance); Classifier classifier = (Classifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 94, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 23:01:50.465388", "score": "0.9975", "loss": "0.2164", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (!useOutOfFold || !m_table.containsKeyClassifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 70, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 23:01:51.796168", "score": "0.9975", "loss": "0.0977", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName); return classifier.classify(instance); }", "n_tokens": 58, "n_pass": [25, 3, 3]}
{"time": "2021-02-13 23:01:54.486189", "score": "0.9877", "loss": "0.2977", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName);classifier.classify(instance); }", "n_tokens": 55, "n_pass": [75, 5, 4]}
{"time": "2021-02-13 23:01:55.810697", "score": "0.9634", "loss": "0.7479", "code": "public Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 52, "n_pass": [76, 6, 5]}
{"time": "2021-02-13 23:01:57.141189", "score": "0.9634", "loss": "0.7479", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object instName = instance.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 50, "n_pass": [78, 7, 6]}
{"time": "2021-02-13 23:01:58.792289", "score": "0.9115", "loss": "0.7159", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object= instance.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 47, "n_pass": [85, 8, 7]}
{"time": "2021-02-13 23:02:00.102884", "score": "0.9262", "loss": "0.5766", "code": "Classification classify(Instance instance, boolean useOutOfFold) { Object.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 44, "n_pass": [86, 9, 8]}
{"time": "2021-02-13 23:02:05.092202", "score": "0.9262", "loss": "0.5766", "code": "Classification classify(Instance instance, boolean useOutOfFold){ Object.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 43, "n_pass": [133, 11, 9]}
{"time": "2021-02-13 23:02:06.426654", "score": "0.9262", "loss": "0.5766", "code": "Classification classify(Instance instance, boolean useOutOfFold){Object.getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 42, "n_pass": [135, 12, 10]}
{"time": "2021-02-13 23:02:07.766465", "score": "0.9464", "loss": "0.5369", "code": "Classification classify(Instance instance, boolean useOutOfFold){getName(); if (Classifier) m_table.get(instName);classifier.classify; }", "n_tokens": 40, "n_pass": [136, 13, 11]}
{"time": "2021-02-13 23:02:09.454521", "score": "0.9584", "loss": "0.4949", "code": "Classification classify(Instance instance, boolean useOutOfFold){getName(); if (Classifier)_table.get(instName);classifier.classify; }", "n_tokens": 38, "n_pass": [142, 14, 12]}
{"time": "2021-02-13 23:02:10.836003", "score": "0.9904", "loss": "0.4327", "code": "Classification classify(Instance instance, boolean useOutOfFold){getName(); if (Classifier)_table(instName);classifier.classify; }", "n_tokens": 36, "n_pass": [144, 15, 13]}
{"time": "2021-02-13 23:02:12.163312", "score": "0.9425", "loss": "0.3885", "code": "Classification classify(Instance instance, boolean useOutOfFold){getName(); if (Classifier)_table(instName);classify; }", "n_tokens": 34, "n_pass": [147, 16, 14]}
{"time": "2021-02-13 23:02:15.876605", "score": "0.9425", "loss": "0.3885", "code": "Classification classify(Instance instance,boolean useOutOfFold){getName(); if (Classifier)_table(instName);classify; }", "n_tokens": 33, "n_pass": [158, 18, 15]}
{"time": "2021-02-13 23:02:17.543079", "score": "0.6717", "loss": "0.8607", "code": "Classification classify(Instance instance,boolean useOutOfFold){getName(); if (Classifier)(instName);classify; }", "n_tokens": 31, "n_pass": [169, 19, 16]}
{"time": "2021-02-13 23:02:25.303870", "score": "0.6717", "loss": "0.8607", "code": "Classification classify(Instance instance,boolean useOutOfFold){getName(); if (Classifier)(instName);classify;}", "n_tokens": 30, "n_pass": [214, 22, 17]}
{"time": "2021-02-13 23:02:27.695038", "score": "0.6717", "loss": "0.8607", "code": "Classification classify(Instance instance,boolean useOutOfFold){getName();if (Classifier)(instName);classify;}", "n_tokens": 29, "n_pass": [232, 23, 18]}
{"time": "2021-02-13 23:02:29.354973", "score": "0.6717", "loss": "0.8607", "code": "Classification classify(Instance instance,boolean useOutOfFold){getName();if(Classifier)(instName);classify;}", "n_tokens": 28, "n_pass": [234, 24, 19]}

Minimal simplified code:
Classification classify(Instance instance,boolean useOutOfFold){getName();if(Classifier)(instName);classify;}

