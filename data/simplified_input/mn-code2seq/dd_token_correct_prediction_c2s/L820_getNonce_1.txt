
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-oauth2-common/oauth2-core/src/main/java/org/forgerock/oauth2/core/AccessToken_getNonce.java
method_name = getNonce
method_body = public String getNonce() { if (isDefined(OAuth2Constants.Custom.NONCE)) { return get(OAuth2Constants.Custom.NONCE).asString(); } return null; }
predict, score, loss = getNonce, 0.9903743267059326, 0.09272683411836624

Trace of simplified code(s):
{"time": "2021-02-13 22:41:25.623168", "score": "0.9904", "loss": "0.0927", "code": "public String getNonce() { if (isDefined(OAuth2Constants.Custom.NONCE)) { return get(OAuth2Constants.Custom.NONCE).asString(); } return null; }", "n_tokens": 53, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 22:41:27.355472", "score": "0.9895", "loss": "0.1264", "code": "public String getNonce() { if (isDefined(OAuth2ConstantsNONCE)) { return get(OAuth2Constants.Custom.NONCE).asString(); } return null; }", "n_tokens": 50, "n_pass": [50, 2, 2]}
{"time": "2021-02-13 22:41:28.728813", "score": "0.9831", "loss": "0.2876", "code": "public String getNonce() { if (isDefined(OAuth2ConstantsNONCE)) { (OAuth2Constants.Custom.NONCE).asString(); } return null; }", "n_tokens": 47, "n_pass": [53, 3, 3]}
{"time": "2021-02-13 22:41:30.091493", "score": "0.8946", "loss": "0.6134", "code": "public String getNonce() { if (isDefined(OAuth2ConstantsNONCE)) { (OAuth2NONCE).asString(); } return null; }", "n_tokens": 43, "n_pass": [55, 4, 4]}
{"time": "2021-02-13 22:41:31.831466", "score": "0.9861", "loss": "0.1308", "code": "public String getNonce() { if (isDefined(NONCE)) { (OAuth2NONCE).asString(); } return null; }", "n_tokens": 40, "n_pass": [65, 5, 5]}
{"time": "2021-02-13 22:41:34.935123", "score": "0.9839", "loss": "0.1966", "code": "public String getNonce() { if (isDefined(NONCE)) { (NONCE).asString(); } return null; }", "n_tokens": 38, "n_pass": [107, 6, 6]}
{"time": "2021-02-13 22:41:36.298422", "score": "0.9831", "loss": "0.2525", "code": "public String getNonce() { if (isDefined(NONCE)) { (NONCE).asString; } return null; }", "n_tokens": 36, "n_pass": [110, 7, 7]}
{"time": "2021-02-13 22:41:37.676815", "score": "0.8741", "loss": "0.8573", "code": "public String getNonce() { if (isDefined(NONCE)) { (NONCE).asString; } null; }", "n_tokens": 34, "n_pass": [113, 8, 8]}
{"time": "2021-02-13 22:41:39.053895", "score": "0.9781", "loss": "0.2254", "code": "public String getNonce() { if (isDefined(NONCE)) { (NONCE).asString; }  }", "n_tokens": 32, "n_pass": [114, 9, 9]}
{"time": "2021-02-13 22:41:40.417029", "score": "0.9781", "loss": "0.2254", "code": " String getNonce() { if (isDefined(NONCE)) { (NONCE).asString; }  }", "n_tokens": 31, "n_pass": [116, 10, 10]}
{"time": "2021-02-13 22:41:41.768082", "score": "0.9781", "loss": "0.2254", "code": "String getNonce() { if (isDefined(NONCE)) { (NONCE).asString; }  }", "n_tokens": 30, "n_pass": [117, 11, 11]}
{"time": "2021-02-13 22:41:44.203441", "score": "0.9781", "loss": "0.2254", "code": "String getNonce(){ if (isDefined(NONCE)) { (NONCE).asString; }  }", "n_tokens": 29, "n_pass": [123, 12, 12]}
{"time": "2021-02-13 22:41:45.568785", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){ if (isDefined(NONCE)) { (NONCE); }  }", "n_tokens": 27, "n_pass": [132, 13, 13]}
{"time": "2021-02-13 22:41:50.844841", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){ if (isDefined(NONCE)) { (NONCE);}  }", "n_tokens": 26, "n_pass": [172, 14, 14]}
{"time": "2021-02-13 22:41:52.174878", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){ if (isDefined(NONCE)) { (NONCE);} }", "n_tokens": 25, "n_pass": [174, 15, 15]}
{"time": "2021-02-13 22:41:53.508707", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){ if (isDefined(NONCE)) { (NONCE);}}", "n_tokens": 24, "n_pass": [175, 16, 16]}
{"time": "2021-02-13 22:41:55.936744", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){if (isDefined(NONCE)) { (NONCE);}}", "n_tokens": 23, "n_pass": [183, 17, 17]}
{"time": "2021-02-13 22:41:57.288248", "score": "0.9961", "loss": "0.0652", "code": "String getNonce(){if(isDefined(NONCE)) { (NONCE);}}", "n_tokens": 22, "n_pass": [185, 18, 18]}
{"time": "2021-02-13 22:41:58.630582", "score": "0.9981", "loss": "0.0322", "code": "String getNonce(){if((NONCE)) { (NONCE);}}", "n_tokens": 21, "n_pass": [187, 19, 19]}
{"time": "2021-02-13 22:41:59.944275", "score": "0.9981", "loss": "0.0322", "code": "String getNonce(){if((NONCE)){ (NONCE);}}", "n_tokens": 20, "n_pass": [192, 20, 20]}
{"time": "2021-02-13 22:42:01.284910", "score": "0.9981", "loss": "0.0322", "code": "String getNonce(){if((NONCE)){(NONCE);}}", "n_tokens": 19, "n_pass": [194, 21, 21]}

Minimal simplified code:
String getNonce(){if((NONCE)){(NONCE);}}

