
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/com/o3dr/services/android/lib/drone/property/Speed_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(airSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }
predict, score, loss = hashCode, 0.9961079359054565, 0.009450334124267101

Trace of simplified code(s):
{"time": "2021-02-13 22:09:56.479407", "score": "0.9943", "loss": "0.0137", "code": "@Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(airSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 161, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 22:09:58.314385", "score": "0.9972", "loss": "0.0067", "code": "@Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 151, "n_pass": [55, 2, 2]}
{"time": "2021-02-13 22:10:00.505240", "score": "0.9955", "loss": "0.0109", "code": "@Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 146, "n_pass": [101, 3, 3]}
{"time": "2021-02-13 22:10:01.932371", "score": "0.9191", "loss": "0.2313", "code": "int hashCode() { int result; long temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 141, "n_pass": [108, 4, 4]}
{"time": "2021-02-13 22:10:03.721746", "score": "0.9298", "loss": "0.1988", "code": "int hashCode() { int temp; temp = Double.doubleToLongBits(verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 136, "n_pass": [111, 5, 5]}
{"time": "2021-02-13 22:10:05.136574", "score": "0.9557", "loss": "0.1216", "code": "int hashCode() { int temp; temp (verticalSpeed); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 131, "n_pass": [113, 6, 6]}
{"time": "2021-02-13 22:10:06.546376", "score": "0.9707", "loss": "0.0764", "code": "int hashCode() { int temp; temp result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 126, "n_pass": [114, 7, 7]}
{"time": "2021-02-13 22:10:07.952054", "score": "0.9615", "loss": "0.1005", "code": "int hashCode() { int temp; temp result = (int) (temp ^ (temp32)); temp = Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 121, "n_pass": [118, 8, 8]}
{"time": "2021-02-13 22:10:09.373201", "score": "0.9638", "loss": "0.0967", "code": "int hashCode() { int temp; temp result = (int) (temp ^ (temp32));Double.doubleToLongBits(groundSpeed); result = 31 * result + (int) (temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 116, "n_pass": [120, 9, 9]}
{"time": "2021-02-13 22:10:11.139918", "score": "0.9487", "loss": "0.1362", "code": "int hashCode() { int temp; temp result = (int) (temp ^ (temp32));Double.doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 111, "n_pass": [125, 10, 10]}
{"time": "2021-02-13 22:10:13.300039", "score": "0.9756", "loss": "0.0639", "code": "int hashCode() { int result = (int) (temp ^ (temp32));Double.doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 106, "n_pass": [139, 11, 11]}
{"time": "2021-02-13 22:10:16.180698", "score": "0.989", "loss": "0.0284", "code": "int hashCode() { result = (int) (temp ^ (temp32));Double.doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 104, "n_pass": [203, 12, 12]}
{"time": "2021-02-13 22:10:17.572995", "score": "0.9562", "loss": "0.118", "code": "int hashCode() { result = (int) (temp (temp32));Double.doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 102, "n_pass": [209, 13, 13]}
{"time": "2021-02-13 22:10:19.001460", "score": "0.9384", "loss": "0.1653", "code": "int hashCode() { result = (int) (temp (2));Double.doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 100, "n_pass": [211, 14, 14]}
{"time": "2021-02-13 22:10:20.385394", "score": "0.9371", "loss": "0.1667", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 * result +(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 98, "n_pass": [214, 15, 15]}
{"time": "2021-02-13 22:10:21.773368", "score": "0.7997", "loss": "0.6437", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 *+(temp ^ (temp >>> 32)); temp result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 95, "n_pass": [221, 16, 16]}
{"time": "2021-02-13 22:10:24.561417", "score": "0.8747", "loss": "0.4079", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 *+(temp ^ (temp >>> 32));result = 3 + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 92, "n_pass": [228, 18, 17]}
{"time": "2021-02-13 22:10:26.297868", "score": "0.8644", "loss": "0.4904", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 *+(temp ^ (temp >>> 32));result =+ (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 89, "n_pass": [230, 19, 18]}
{"time": "2021-02-13 22:10:27.690803", "score": "0.7818", "loss": "0.8599", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 *+(temp ^ (temp >>> 32));result =+ (int) (temp ^ (temp >32)); return result; }", "n_tokens": 86, "n_pass": [236, 20, 19]}
{"time": "2021-02-13 22:10:29.086211", "score": "0.7636", "loss": "0.9836", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 31 *+(temp ^ (temp >>> 32));result =+ (int) (temp ^ (temp >32)); ; }", "n_tokens": 83, "n_pass": [239, 21, 20]}
{"time": "2021-02-13 22:10:30.848857", "score": "0.8721", "loss": "0.4824", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp ^ (temp >>> 32));result =+ (int) (temp ^ (temp >32)); ; }", "n_tokens": 80, "n_pass": [258, 22, 21]}
{"time": "2021-02-13 22:10:32.252792", "score": "0.5912", "loss": "2.2729", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (temp >32)); ; }", "n_tokens": 77, "n_pass": [260, 23, 22]}
{"time": "2021-02-13 22:10:33.995626", "score": "0.5813", "loss": "2.3991", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); ; }", "n_tokens": 74, "n_pass": [270, 24, 23]}
{"time": "2021-02-13 22:10:42.967495", "score": "0.5813", "loss": "2.3991", "code": "int hashCode() { result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 72, "n_pass": [365, 26, 24]}
{"time": "2021-02-13 22:10:45.095142", "score": "0.5813", "loss": "2.3991", "code": "int hashCode(){ result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 71, "n_pass": [372, 27, 25]}
{"time": "2021-02-13 22:10:46.466988", "score": "0.5813", "loss": "2.3991", "code": "int hashCode(){result = (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 70, "n_pass": [374, 28, 26]}
{"time": "2021-02-13 22:10:47.856257", "score": "0.5813", "loss": "2.3991", "code": "int hashCode(){result= (int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 69, "n_pass": [376, 29, 27]}
{"time": "2021-02-13 22:10:49.243651", "score": "0.5813", "loss": "2.3991", "code": "int hashCode(){result=(int) (temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 68, "n_pass": [378, 30, 28]}
{"time": "2021-02-13 22:10:50.610447", "score": "0.5813", "loss": "2.3991", "code": "int hashCode(){result=(int)(temp (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 67, "n_pass": [382, 31, 29]}
{"time": "2021-02-13 22:10:51.980156", "score": "0.676", "loss": "1.6167", "code": "int hashCode(){result=(int)( (2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 66, "n_pass": [384, 32, 30]}
{"time": "2021-02-13 22:10:53.365260", "score": "0.676", "loss": "1.6167", "code": "int hashCode(){result=(int)((2));doubleToLongBits(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 65, "n_pass": [385, 33, 31]}
{"time": "2021-02-13 22:10:54.757859", "score": "0.8836", "loss": "0.4921", "code": "int hashCode(){result=(int)((2));(groundSpeed); result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 64, "n_pass": [391, 34, 32]}
{"time": "2021-02-13 22:10:56.512205", "score": "0.8836", "loss": "0.4921", "code": "int hashCode(){result=(int)((2));(groundSpeed);result = 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 63, "n_pass": [396, 35, 33]}
{"time": "2021-02-13 22:10:57.882648", "score": "0.8836", "loss": "0.4921", "code": "int hashCode(){result=(int)((2));(groundSpeed);result= 3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 62, "n_pass": [398, 36, 34]}
{"time": "2021-02-13 22:10:59.265306", "score": "0.8836", "loss": "0.4921", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=3+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 61, "n_pass": [400, 37, 35]}
{"time": "2021-02-13 22:11:00.606507", "score": "0.8526", "loss": "0.6997", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=+(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 60, "n_pass": [401, 38, 36]}
{"time": "2021-02-13 22:11:02.021577", "score": "0.7614", "loss": "1.2838", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=(temp(temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 59, "n_pass": [402, 39, 37]}
{"time": "2021-02-13 22:11:03.356437", "score": "0.9226", "loss": "0.3358", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp >>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 58, "n_pass": [404, 40, 38]}
{"time": "2021-02-13 22:11:04.745174", "score": "0.9226", "loss": "0.3358", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp>>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 57, "n_pass": [407, 41, 39]}
{"time": "2021-02-13 22:11:06.113323", "score": "0.9064", "loss": "0.4076", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp>> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 56, "n_pass": [408, 42, 40]}
{"time": "2021-02-13 22:11:07.505120", "score": "0.8498", "loss": "0.7271", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp> 32));result =+ (int) (temp ^ (32)); }", "n_tokens": 55, "n_pass": [409, 43, 41]}
{"time": "2021-02-13 22:11:08.872516", "score": "0.8498", "loss": "0.7271", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp>32));result =+ (int) (temp ^ (32)); }", "n_tokens": 54, "n_pass": [411, 44, 42]}
{"time": "2021-02-13 22:11:10.243400", "score": "0.8314", "loss": "0.8265", "code": "int hashCode(){result=(int)((2));(groundSpeed);result=((temp>2));result =+ (int) (temp ^ (32)); }", "n_tokens": 53, "n_pass": [412, 45, 43]}
{"time": "2021-02-13 22:11:14.161981", "score": "0.6619", "loss": "1.9183", "code": "int hashCode(){result=(int)((2));(groundSpeed);result((temp>2));result =+ (int) (temp ^ (32)); }", "n_tokens": 52, "n_pass": [448, 47, 44]}
{"time": "2021-02-13 22:11:15.534545", "score": "0.803", "loss": "0.9254", "code": "int hashCode(){result=(int)((2));(groundSpeed);result((temp2));result =+ (int) (temp ^ (32)); }", "n_tokens": 51, "n_pass": [452, 48, 45]}
{"time": "2021-02-13 22:11:19.421946", "score": "0.836", "loss": "0.8552", "code": "int hashCode(){result=(int)((2));(groundSpeed);((temp2));result =+ (int) (temp ^ (32)); }", "n_tokens": 50, "n_pass": [487, 50, 46]}
{"time": "2021-02-13 22:11:20.815101", "score": "0.7442", "loss": "1.3063", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+ (int) (temp ^ (32)); }", "n_tokens": 49, "n_pass": [490, 51, 47]}
{"time": "2021-02-13 22:11:27.481732", "score": "0.7442", "loss": "1.3063", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int) (temp ^ (32)); }", "n_tokens": 48, "n_pass": [553, 53, 48]}
{"time": "2021-02-13 22:11:28.836479", "score": "0.7442", "loss": "1.3063", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int)(temp ^ (32)); }", "n_tokens": 47, "n_pass": [556, 54, 49]}
{"time": "2021-02-13 22:11:30.227982", "score": "0.7442", "loss": "1.3063", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int)(temp^ (32)); }", "n_tokens": 46, "n_pass": [559, 55, 50]}
{"time": "2021-02-13 22:11:32.975141", "score": "0.7442", "loss": "1.3063", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int)(temp^(32)); }", "n_tokens": 45, "n_pass": [561, 57, 51]}
{"time": "2021-02-13 22:11:34.338836", "score": "0.7229", "loss": "1.4375", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int)(temp^(2)); }", "n_tokens": 44, "n_pass": [563, 58, 52]}
{"time": "2021-02-13 22:11:35.751662", "score": "0.7229", "loss": "1.4375", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result =+(int)(temp^(2));}", "n_tokens": 43, "n_pass": [568, 59, 53]}
{"time": "2021-02-13 22:11:38.278292", "score": "0.7229", "loss": "1.4375", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result=+(int)(temp^(2));}", "n_tokens": 42, "n_pass": [598, 60, 54]}
{"time": "2021-02-13 22:11:39.977922", "score": "0.818", "loss": "0.9457", "code": "int hashCode(){result=(int)((2));(groundSpeed);((2));result=(int)(temp^(2));}", "n_tokens": 41, "n_pass": [600, 61, 55]}

Minimal simplified code:
int hashCode(){result=(int)((2));(groundSpeed);((2));result=(int)(temp^(2));}

