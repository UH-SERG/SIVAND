
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/etsy__oculus/resources/elasticsearch-oculus-plugin/com/dtw/WarpPath_equals.java
method_name = equals
method_body = public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI() == this.maxI()) && (p.maxJ() == this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }
predict, score, loss = equals, 0.9586886167526245, 0.06269065290689468

Trace of simplified code(s):
{"time": "2021-02-13 16:07:16.936278", "score": "0.9587", "loss": "0.0627", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI() == this.maxI()) && (p.maxJ() == this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 186, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 16:07:18.328095", "score": "0.9636", "loss": "0.0543", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxI== this.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 163, "n_pass": [23, 2, 2]}
{"time": "2021-02-13 16:07:20.120899", "score": "0.9082", "loss": "0.1538", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (int x = 0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 157, "n_pass": [86, 3, 3]}
{"time": "2021-02-13 16:07:21.479211", "score": "0.875", "loss": "0.237", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x)))) return false; return true; } else return false; } else return false; }", "n_tokens": 151, "n_pass": [88, 4, 4]}
{"time": "2021-02-13 16:07:22.836594", "score": "0.893", "loss": "0.1941", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; } else return false; } else return false; }", "n_tokens": 145, "n_pass": [96, 5, 5]}
{"time": "2021-02-13 16:07:24.184790", "score": "0.8936", "loss": "0.1907", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size() == this.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 139, "n_pass": [98, 6, 6]}
{"time": "2021-02-13 16:07:25.545677", "score": "0.794", "loss": "0.4035", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.sizethis.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 133, "n_pass": [110, 7, 7]}
{"time": "2021-02-13 16:07:26.938529", "score": "0.8318", "loss": "0.3247", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; x < this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 130, "n_pass": [180, 8, 8]}
{"time": "2021-02-13 16:07:28.292834", "score": "0.927", "loss": "0.1407", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0;  this.size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 127, "n_pass": [188, 9, 9]}
{"time": "2021-02-13 16:07:29.640025", "score": "0.8784", "loss": "0.2356", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; size(); x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 124, "n_pass": [189, 10, 10]}
{"time": "2021-02-13 16:07:30.980644", "score": "0.7751", "loss": "0.4377", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!(this.get(x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 121, "n_pass": [190, 11, 11]}
{"time": "2021-02-13 16:07:32.324851", "score": "0.7933", "loss": "0.3802", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals(p.get(x))))return true; }; } else return false; }", "n_tokens": 118, "n_pass": [195, 12, 12]}
{"time": "2021-02-13 16:07:33.664566", "score": "0.8377", "loss": "0.2904", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals((x))))return true; }; } else return false; }", "n_tokens": 115, "n_pass": [198, 13, 13]}
{"time": "2021-02-13 16:07:35.001488", "score": "0.7849", "loss": "0.3781", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals()))return true; }; } else return false; }", "n_tokens": 112, "n_pass": [199, 14, 14]}
{"time": "2021-02-13 16:07:36.342028", "score": "0.7517", "loss": "0.4197", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; } else return false; }", "n_tokens": 109, "n_pass": [201, 15, 15]}
{"time": "2021-02-13 16:07:37.671065", "score": "0.6977", "loss": "0.475", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }return false; }", "n_tokens": 106, "n_pass": [204, 16, 16]}
{"time": "2021-02-13 16:07:39.005185", "score": "0.6055", "loss": "0.7767", "code": "public boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }; }", "n_tokens": 103, "n_pass": [205, 17, 17]}
{"time": "2021-02-13 16:07:40.329973", "score": "0.6055", "loss": "0.7767", "code": "boolean equals(Object obj) { if ((obj instanceof WarpPath)) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }; }", "n_tokens": 101, "n_pass": [207, 18, 18]}
{"time": "2021-02-13 16:07:42.034444", "score": "0.6844", "loss": "0.8204", "code": "boolean equals(Object obj) { if ((obj )) { final WarpPath p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }; }", "n_tokens": 98, "n_pass": [215, 19, 19]}
{"time": "2021-02-13 16:07:43.353210", "score": "0.4248", "loss": "1.7257", "code": "boolean equals(Object obj) { if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++) if (!((x).equals())); }; }; }", "n_tokens": 95, "n_pass": [218, 20, 20]}
{"time": "2021-02-13 16:07:44.706455", "score": "0.3357", "loss": "2.0184", "code": "boolean equals(Object obj) { if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x++)(!((x).equals())); }; }; }", "n_tokens": 92, "n_pass": [235, 21, 21]}
{"time": "2021-02-13 16:07:51.755823", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj) { if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }; }; }", "n_tokens": 90, "n_pass": [334, 22, 22]}
{"time": "2021-02-13 16:07:53.083693", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj) { if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 88, "n_pass": [343, 23, 23]}
{"time": "2021-02-13 16:07:55.140741", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){ if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 87, "n_pass": [354, 24, 24]}
{"time": "2021-02-13 16:07:56.456941", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){if ((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 86, "n_pass": [356, 25, 25]}
{"time": "2021-02-13 16:07:57.781053", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){if((obj )) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 85, "n_pass": [358, 26, 26]}
{"time": "2021-02-13 16:07:59.100186", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){if((obj)) { finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 84, "n_pass": [362, 27, 27]}
{"time": "2021-02-13 16:08:00.416826", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){if((obj)){ finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 83, "n_pass": [365, 28, 28]}
{"time": "2021-02-13 16:08:01.768847", "score": "0.3255", "loss": "1.9757", "code": "boolean equals(Object obj){if((obj)){finalp = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 82, "n_pass": [367, 29, 29]}
{"time": "2021-02-13 16:08:03.109408", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p = (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 81, "n_pass": [368, 30, 30]}
{"time": "2021-02-13 16:08:04.455828", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p= (WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 80, "n_pass": [370, 31, 31]}
{"time": "2021-02-13 16:08:05.773901", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath) obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 79, "n_pass": [372, 32, 32]}
{"time": "2021-02-13 16:08:07.096320", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj; if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 78, "n_pass": [376, 33, 33]}
{"time": "2021-02-13 16:08:09.757682", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if ((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 77, "n_pass": [379, 35, 34]}
{"time": "2021-02-13 16:08:11.074315", "score": "0.3208", "loss": "2.0068", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((p.size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 76, "n_pass": [381, 36, 35]}
{"time": "2021-02-13 16:08:12.395198", "score": "0.334", "loss": "1.9137", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size()) && (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 74, "n_pass": [383, 37, 36]}
{"time": "2021-02-13 16:08:13.738726", "score": "0.2634", "loss": "2.1801", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size())& (p.maxJ())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 72, "n_pass": [386, 38, 37]}
{"time": "2021-02-13 16:08:15.082176", "score": "0.6423", "loss": "0.8791", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size())& (p())) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 70, "n_pass": [389, 39, 38]}
{"time": "2021-02-13 16:08:16.400980", "score": "0.5531", "loss": "1.1244", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size())& (p)) { for (0; ; x)(!((x).equals())); }}; }", "n_tokens": 68, "n_pass": [390, 40, 39]}
{"time": "2021-02-13 16:08:17.719449", "score": "0.6191", "loss": "0.8348", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size())& (p)) { for (0; ;)(!((x).equals())); }}; }", "n_tokens": 66, "n_pass": [397, 41, 40]}
{"time": "2021-02-13 16:08:19.054943", "score": "0.6889", "loss": "0.6542", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath)obj;if((size())& (p)) { for (0; ;!((x).equals())); }}; }", "n_tokens": 64, "n_pass": [398, 42, 41]}
{"time": "2021-02-13 16:08:21.140601", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())& (p)) { for (0; ;!((x).equals())); }}; }", "n_tokens": 63, "n_pass": [429, 43, 42]}
{"time": "2021-02-13 16:08:28.172365", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)) { for (0; ;!((x).equals())); }}; }", "n_tokens": 62, "n_pass": [513, 45, 43]}
{"time": "2021-02-13 16:08:29.487037", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){ for (0; ;!((x).equals())); }}; }", "n_tokens": 61, "n_pass": [518, 46, 44]}
{"time": "2021-02-13 16:08:30.812997", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for (0; ;!((x).equals())); }}; }", "n_tokens": 60, "n_pass": [520, 47, 45]}
{"time": "2021-02-13 16:08:32.124169", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0; ;!((x).equals())); }}; }", "n_tokens": 59, "n_pass": [522, 48, 46]}
{"time": "2021-02-13 16:08:34.760012", "score": "0.4623", "loss": "1.1573", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;!((x).equals())); }}; }", "n_tokens": 58, "n_pass": [526, 50, 47]}
{"time": "2021-02-13 16:08:36.074050", "score": "0.5575", "loss": "0.9007", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;((x).equals())); }}; }", "n_tokens": 57, "n_pass": [528, 51, 48]}
{"time": "2021-02-13 16:08:37.387279", "score": "0.6699", "loss": "0.6776", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;((x)equals())); }}; }", "n_tokens": 56, "n_pass": [533, 52, 49]}
{"time": "2021-02-13 16:08:38.796934", "score": "0.6699", "loss": "0.6776", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;((x)equals()));}}; }", "n_tokens": 55, "n_pass": [540, 53, 50]}
{"time": "2021-02-13 16:08:40.138195", "score": "0.6699", "loss": "0.6776", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;((x)equals()));}} }", "n_tokens": 54, "n_pass": [543, 54, 51]}
{"time": "2021-02-13 16:08:41.452996", "score": "0.6699", "loss": "0.6776", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(0;;((x)equals()));}}}", "n_tokens": 53, "n_pass": [544, 55, 52]}
{"time": "2021-02-13 16:08:44.823695", "score": "0.4908", "loss": "1.0889", "code": "boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(;;((x)equals()));}}}", "n_tokens": 52, "n_pass": [583, 57, 53]}

Minimal simplified code:
boolean equals(Object obj){if((obj)){p=(WarpPath);if((size())&(p)){for(;;((x)equals()));}}}

