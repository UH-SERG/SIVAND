
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/dronekit__dronekit-android/ClientLib/src/main/java/com/o3dr/services/android/lib/coordinate/LatLong_hashCode.java
method_name = hashCode
method_body = @Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(latitude); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(longitude); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }
predict, score, loss = hashCode, 0.9980776309967041, 0.004830562509596348

Trace of simplified code(s):
{"time": "2021-02-13 12:44:33.167706", "score": "0.9981", "loss": "0.0048", "code": "@Override public int hashCode() { int result; long temp; temp = Double.doubleToLongBits(latitude); result = (int) (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(longitude); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 114, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 12:44:34.518659", "score": "0.9958", "loss": "0.0103", "code": "@Override public int hashCode() { int result; long temp; temp = Double (temp ^ (temp >>> 32)); temp = Double.doubleToLongBits(longitude); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 100, "n_pass": [22, 2, 2]}
{"time": "2021-02-13 12:44:35.859301", "score": "0.9957", "loss": "0.0104", "code": "@Override public int hashCode() { int result; long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 93, "n_pass": [44, 3, 3]}
{"time": "2021-02-13 12:44:37.227862", "score": "0.9867", "loss": "0.0362", "code": "@Override public int hashCode() { int result; long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (int) (temp ^ (temp >>> 32)); return result; }", "n_tokens": 86, "n_pass": [48, 4, 4]}
{"time": "2021-02-13 12:44:38.937774", "score": "0.9496", "loss": "0.1405", "code": "@Override public int hashCode() { int result; long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 82, "n_pass": [86, 5, 5]}
{"time": "2021-02-13 12:44:40.295241", "score": "0.7367", "loss": "1.0239", "code": "public int hashCode() { int result; long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 79, "n_pass": [93, 6, 6]}
{"time": "2021-02-13 12:44:41.991282", "score": "0.6934", "loss": "1.2156", "code": "public int hashCode() {result; long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 76, "n_pass": [97, 7, 7]}
{"time": "2021-02-13 12:44:43.326576", "score": "0.6854", "loss": "1.2766", "code": "public int hashCode() {long temp; temp = Double (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 73, "n_pass": [98, 8, 8]}
{"time": "2021-02-13 12:44:47.304115", "score": "0.6607", "loss": "1.4846", "code": "public int hashCode() {long temp; tempDouble (temp ^ (2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 70, "n_pass": [101, 11, 9]}
{"time": "2021-02-13 12:44:48.628591", "score": "0.6292", "loss": "1.7572", "code": "public int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result = + (temp ^ (temp >>> 32)); return result; }", "n_tokens": 66, "n_pass": [103, 12, 10]}
{"time": "2021-02-13 12:44:50.717335", "score": "0.6051", "loss": "1.8877", "code": "public int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32)); return result; }", "n_tokens": 62, "n_pass": [109, 13, 11]}
{"time": "2021-02-13 12:45:00.172537", "score": "0.6515", "loss": "1.7729", "code": "public int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32)); result; }", "n_tokens": 60, "n_pass": [170, 18, 12]}
{"time": "2021-02-13 12:45:01.499256", "score": "0.6043", "loss": "2.2948", "code": "public int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32));  }", "n_tokens": 58, "n_pass": [171, 19, 13]}
{"time": "2021-02-13 12:45:02.823046", "score": "0.6043", "loss": "2.2948", "code": " int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32));  }", "n_tokens": 57, "n_pass": [173, 20, 14]}
{"time": "2021-02-13 12:45:04.138790", "score": "0.6043", "loss": "2.2948", "code": "int hashCode() {long temp; tempDouble ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32));  }", "n_tokens": 56, "n_pass": [174, 21, 15]}
{"time": "2021-02-13 12:45:06.194098", "score": "0.7415", "loss": "1.3111", "code": "int hashCode() {long temp;  ((2)); temp = Double.doubleToLongBits(longitude); result (temp ^ (temp >>> 32));  }", "n_tokens": 54, "n_pass": [183, 22, 16]}
{"time": "2021-02-13 12:45:07.512804", "score": "0.7635", "loss": "1.2672", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); result (temp ^ (temp >>> 32));  }", "n_tokens": 52, "n_pass": [190, 23, 17]}
{"time": "2021-02-13 12:45:08.843400", "score": "0.901", "loss": "0.4076", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >>> 32));  }", "n_tokens": 50, "n_pass": [194, 24, 18]}
{"time": "2021-02-13 12:45:11.491001", "score": "0.7635", "loss": "1.1826", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp > 32));  }", "n_tokens": 48, "n_pass": [199, 26, 19]}
{"time": "2021-02-13 12:45:20.846415", "score": "0.7635", "loss": "1.1826", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >32));  }", "n_tokens": 47, "n_pass": [271, 28, 20]}
{"time": "2021-02-13 12:45:22.159243", "score": "0.7405", "loss": "1.3552", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));  }", "n_tokens": 46, "n_pass": [272, 29, 21]}
{"time": "2021-02-13 12:45:23.491545", "score": "0.7405", "loss": "1.3552", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2)); }", "n_tokens": 45, "n_pass": [277, 30, 22]}
{"time": "2021-02-13 12:45:24.801536", "score": "0.7405", "loss": "1.3552", "code": "int hashCode() {long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 44, "n_pass": [278, 31, 23]}
{"time": "2021-02-13 12:45:26.829123", "score": "0.7405", "loss": "1.3552", "code": "int hashCode(){long temp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 43, "n_pass": [285, 32, 24]}
{"time": "2021-02-13 12:45:29.451899", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp;  ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 42, "n_pass": [288, 34, 25]}
{"time": "2021-02-13 12:45:32.075289", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp; ((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 41, "n_pass": [291, 36, 26]}
{"time": "2021-02-13 12:45:33.370541", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp;((2)); temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 40, "n_pass": [292, 37, 27]}
{"time": "2021-02-13 12:45:34.680173", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp;((2));temp = doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 39, "n_pass": [299, 38, 28]}
{"time": "2021-02-13 12:45:35.980418", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp;((2));temp= doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 38, "n_pass": [301, 39, 29]}
{"time": "2021-02-13 12:45:37.312540", "score": "0.658", "loss": "1.8622", "code": "int hashCode(){longtemp;((2));temp=doubleToLongBits(longitude); (temp ^ (temp >2));}", "n_tokens": 37, "n_pass": [303, 40, 30]}
{"time": "2021-02-13 12:45:38.614568", "score": "0.6826", "loss": "1.5156", "code": "int hashCode(){longtemp;((2));temp=(longitude); (temp ^ (temp >2));}", "n_tokens": 36, "n_pass": [304, 41, 31]}
{"time": "2021-02-13 12:45:39.911590", "score": "0.7753", "loss": "1.0796", "code": "int hashCode(){longtemp;((2));temp=(longitude) (temp ^ (temp >2));}", "n_tokens": 35, "n_pass": [308, 42, 32]}
{"time": "2021-02-13 12:45:41.249316", "score": "0.7753", "loss": "1.0796", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp ^ (temp >2));}", "n_tokens": 34, "n_pass": [309, 43, 33]}
{"time": "2021-02-13 12:45:42.548251", "score": "0.7753", "loss": "1.0796", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp^ (temp >2));}", "n_tokens": 33, "n_pass": [312, 44, 34]}
{"time": "2021-02-13 12:45:45.152660", "score": "0.7753", "loss": "1.0796", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp^(temp >2));}", "n_tokens": 32, "n_pass": [314, 46, 35]}
{"time": "2021-02-13 12:45:46.450077", "score": "0.7753", "loss": "1.0796", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp^(temp>2));}", "n_tokens": 31, "n_pass": [317, 47, 36]}
{"time": "2021-02-13 12:45:47.743791", "score": "0.8813", "loss": "0.5921", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp^(temp2));}", "n_tokens": 30, "n_pass": [318, 48, 37]}
{"time": "2021-02-13 12:45:49.050507", "score": "0.8813", "loss": "0.5921", "code": "int hashCode(){longtemp;((2));temp=(longitude)(temp^(temp));}", "n_tokens": 29, "n_pass": [319, 49, 38]}
{"time": "2021-02-13 12:45:51.059383", "score": "0.8902", "loss": "0.489", "code": "int hashCode(){temp;((2));temp=(longitude)(temp^(temp));}", "n_tokens": 28, "n_pass": [330, 50, 39]}
{"time": "2021-02-13 12:45:52.367817", "score": "0.9748", "loss": "0.1201", "code": "int hashCode(){;((2));temp=(longitude)(temp^(temp));}", "n_tokens": 27, "n_pass": [331, 51, 40]}
{"time": "2021-02-13 12:45:53.683266", "score": "0.9748", "loss": "0.1201", "code": "int hashCode(){((2));temp=(longitude)(temp^(temp));}", "n_tokens": 26, "n_pass": [332, 52, 41]}

Minimal simplified code:
int hashCode(){((2));temp=(longitude)(temp^(temp));}

