
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/core-utilities/src/main/java/edu/illinois/cs/cogcomp/core/datastructures/vectors/OVector_toString.java
method_name = toString
method_body = public String toString() { StringBuffer result = new StringBuffer(); result.append("["); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(", "); } result.append("]"); return result.toString(); }
predict, score, loss = toString, 0.9779009819030762, 0.06662318110466003

Trace of simplified code(s):
{"time": "2021-02-13 04:36:07.798040", "score": "0.9704", "loss": "0.0919", "code": "public String toString() { StringBuffer result = new StringBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) { result.append(vector[i]); if (i + 1 < size) result.append(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 117, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 04:36:09.137182", "score": "0.9563", "loss": "0.1434", "code": "public String toString() { StringBuffer result = new StringBuffer(); result.append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 88, "n_pass": [10, 2, 2]}
{"time": "2021-02-13 04:36:10.852357", "score": "0.9631", "loss": "0.1187", "code": "public String toString() { StringBuffer result ; result.append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 81, "n_pass": [43, 3, 3]}
{"time": "2021-02-13 04:36:12.555933", "score": "0.9408", "loss": "0.1994", "code": "public String toString() { StringBuffer result ;append(\"[\"); for (int i = 0; i < size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 78, "n_pass": [77, 4, 4]}
{"time": "2021-02-13 04:36:13.897760", "score": "0.9341", "loss": "0.2178", "code": "public String toString() { StringBuffer result ;append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 74, "n_pass": [83, 5, 5]}
{"time": "2021-02-13 04:36:15.645699", "score": "0.9266", "loss": "0.2422", "code": "public String toString() {result ;append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 71, "n_pass": [97, 6, 6]}
{"time": "2021-02-13 04:36:16.970271", "score": "0.9474", "loss": "0.1724", "code": "public String toString() {append(\"[\"); for (int i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 68, "n_pass": [98, 7, 7]}
{"time": "2021-02-13 04:36:20.330290", "score": "0.9614", "loss": "0.1196", "code": "public String toString() {append(\"[\"); for (i = 0; size; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 66, "n_pass": [159, 8, 8]}
{"time": "2021-02-13 04:36:21.643018", "score": "0.965", "loss": "0.1167", "code": "public String toString() {append(\"[\"); for (i = 0;; ++i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 64, "n_pass": [162, 9, 9]}
{"time": "2021-02-13 04:36:22.982600", "score": "0.9779", "loss": "0.0724", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\", \"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 62, "n_pass": [164, 10, 10]}
{"time": "2021-02-13 04:36:24.303179", "score": "0.9747", "loss": "0.0846", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } result.append(\"]\"); return result.toString(); }", "n_tokens": 60, "n_pass": [168, 11, 11]}
{"time": "2021-02-13 04:36:25.615168", "score": "0.982", "loss": "0.0629", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); return result.toString(); }", "n_tokens": 58, "n_pass": [172, 12, 12]}
{"time": "2021-02-13 04:36:26.944621", "score": "0.9893", "loss": "0.04", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); result.toString(); }", "n_tokens": 56, "n_pass": [177, 13, 13]}
{"time": "2021-02-13 04:36:28.261647", "score": "0.968", "loss": "0.1184", "code": "public String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 54, "n_pass": [178, 14, 14]}
{"time": "2021-02-13 04:36:29.582556", "score": "0.968", "loss": "0.1184", "code": " String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 53, "n_pass": [182, 15, 15]}
{"time": "2021-02-13 04:36:30.896867", "score": "0.968", "loss": "0.1184", "code": "String toString() {append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 52, "n_pass": [183, 16, 16]}
{"time": "2021-02-13 04:36:38.954305", "score": "0.968", "loss": "0.1184", "code": "String toString(){append(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 51, "n_pass": [264, 17, 17]}
{"time": "2021-02-13 04:36:40.265037", "score": "0.9752", "loss": "0.0991", "code": "String toString(){(\"[\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 50, "n_pass": [266, 18, 18]}
{"time": "2021-02-13 04:36:41.576584", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\"); for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 49, "n_pass": [269, 19, 19]}
{"time": "2021-02-13 04:36:42.898996", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\");for (i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 48, "n_pass": [273, 20, 20]}
{"time": "2021-02-13 04:36:44.208952", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\");for(i = 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 47, "n_pass": [275, 21, 21]}
{"time": "2021-02-13 04:36:45.521830", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\");for(i= 0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 46, "n_pass": [278, 22, 22]}
{"time": "2021-02-13 04:36:46.839572", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\");for(i=0;; i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 45, "n_pass": [280, 23, 23]}
{"time": "2021-02-13 04:36:48.171355", "score": "0.9852", "loss": "0.0618", "code": "String toString(){(\"\");for(i=0;;i) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 44, "n_pass": [284, 24, 24]}
{"time": "2021-02-13 04:36:49.477400", "score": "0.9869", "loss": "0.0602", "code": "String toString(){(\"\");for(i=0;;) {(\"\"); } append(\"]\"); toString(); }", "n_tokens": 43, "n_pass": [285, 25, 25]}
{"time": "2021-02-13 04:36:50.805187", "score": "0.9869", "loss": "0.0602", "code": "String toString(){(\"\");for(i=0;;){(\"\"); } append(\"]\"); toString(); }", "n_tokens": 42, "n_pass": [287, 26, 26]}
{"time": "2021-02-13 04:36:52.137931", "score": "0.9869", "loss": "0.0602", "code": "String toString(){(\"\");for(i=0;;){(\"\");} append(\"]\"); toString(); }", "n_tokens": 41, "n_pass": [294, 27, 27]}
{"time": "2021-02-13 04:36:53.442409", "score": "0.9869", "loss": "0.0602", "code": "String toString(){(\"\");for(i=0;;){(\"\");}append(\"]\"); toString(); }", "n_tokens": 40, "n_pass": [296, 28, 28]}
{"time": "2021-02-13 04:36:54.733128", "score": "0.9638", "loss": "0.1616", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"]\"); toString(); }", "n_tokens": 39, "n_pass": [297, 29, 29]}
{"time": "2021-02-13 04:36:56.030847", "score": "0.926", "loss": "0.3561", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\"); toString(); }", "n_tokens": 38, "n_pass": [300, 30, 30]}
{"time": "2021-02-13 04:36:57.330360", "score": "0.926", "loss": "0.3561", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\");toString(); }", "n_tokens": 37, "n_pass": [304, 31, 31]}
{"time": "2021-02-13 04:36:58.629785", "score": "0.926", "loss": "0.3561", "code": "String toString(){(\"\");for(i=0;;){(\"\");}(\"\");toString();}", "n_tokens": 36, "n_pass": [309, 32, 32]}
{"time": "2021-02-13 04:37:01.000033", "score": "0.8994", "loss": "0.4457", "code": "String toString(){(\"\");for(i0;;){(\"\");}(\"\");toString();}", "n_tokens": 35, "n_pass": [325, 33, 33]}
{"time": "2021-02-13 04:37:02.323015", "score": "0.8994", "loss": "0.4457", "code": "String toString(){(\"\");for(i;;){(\"\");}(\"\");toString();}", "n_tokens": 34, "n_pass": [326, 34, 34]}
{"time": "2021-02-13 04:37:04.699212", "score": "0.7839", "loss": "0.8757", "code": "String toString(){(\"\");for(;;){(\"\");}(\"\");toString();}", "n_tokens": 33, "n_pass": [360, 35, 35]}

Minimal simplified code:
String toString(){("");for(;;){("");}("");toString();}

