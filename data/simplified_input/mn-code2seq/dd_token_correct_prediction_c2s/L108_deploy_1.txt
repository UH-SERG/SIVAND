
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/henryyan__activiti-in-action-codes/chapter13-query/src/main/java/me/kafeitu/activiti/web/chapter5/deployment/DeploymentController_deploy.java
method_name = deploy
method_body = @RequestMapping(value = "/deploy") public String deploy(@RequestParam(value = "file", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals("zip") || extension.equals("bar")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error("error on deploy process, because of file input stream"); } return "redirect:process-list"; }
predict, score, loss = deploy, 0.9403171539306641, 0.3026936650276184

Trace of simplified code(s):
{"time": "2021-02-13 05:34:11.203948", "score": "0.9675", "loss": "0.2012", "code": "@RequestMapping(value = \"/deploy\") public String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 230, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 05:34:13.017996", "score": "0.6263", "loss": "1.0407", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(fileName); DeploymentBuilder deployment = repositoryService.createDeployment(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 216, "n_pass": [44, 2, 2]}
{"time": "2021-02-13 05:34:14.392754", "score": "0.517", "loss": "1.236", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else { deployment.addInputStream(fileName, fileInputStream); } deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 202, "n_pass": [49, 3, 3]}
{"time": "2021-02-13 05:34:15.754856", "score": "0.3813", "loss": "1.7291", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName = file.getOriginalFilename(); try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 187, "n_pass": [54, 4, 4]}
{"time": "2021-02-13 05:34:18.502352", "score": "0.425", "loss": "1.708", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream fileInputStream = file.getInputStream(); String extension = FilenameUtils.getExtension(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 180, "n_pass": [107, 6, 5]}
{"time": "2021-02-13 05:34:19.907658", "score": "0.5616", "loss": "1.1775", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamgetInputStream(); String extension = FilenameUtils.getExtension(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 173, "n_pass": [109, 7, 6]}
{"time": "2021-02-13 05:34:21.262518", "score": "0.5297", "loss": "1.1428", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStreamextension = FilenameUtils.getExtension(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 166, "n_pass": [110, 8, 7]}
{"time": "2021-02-13 05:34:22.610509", "score": "0.3761", "loss": "1.7035", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStream); deployment.addZipInputStream(zip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 159, "n_pass": [111, 9, 8]}
{"time": "2021-02-13 05:34:23.982408", "score": "0.6406", "loss": "1.0098", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"error on deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 152, "n_pass": [118, 10, 9]}
{"time": "2021-02-13 05:34:26.707784", "score": "0.8385", "loss": "0.6969", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of file input stream\"); } return \"redirect:process-list\"; }", "n_tokens": 148, "n_pass": [191, 12, 10]}
{"time": "2021-02-13 05:34:30.737129", "score": "0.8691", "loss": "0.7673", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of stream\"); } return \"redirect:process-list\"; }", "n_tokens": 144, "n_pass": [194, 15, 11]}
{"time": "2021-02-13 05:34:32.108209", "score": "0.7143", "loss": "1.0026", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { String fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of stream\"); } return \"redirect\"; }", "n_tokens": 140, "n_pass": [198, 16, 12]}
{"time": "2021-02-13 05:34:33.839947", "score": "0.7491", "loss": "0.8604", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) {fileName ; try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of stream\"); } return \"redirect\"; }", "n_tokens": 137, "n_pass": [210, 17, 13]}
{"time": "2021-02-13 05:34:35.185250", "score": "0.6691", "loss": "1.0441", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") || extension.equals(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of stream\"); } return \"redirect\"; }", "n_tokens": 134, "n_pass": [211, 18, 14]}
{"time": "2021-02-13 05:34:36.545433", "score": "0.6865", "loss": "1.0162", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, because of stream\"); } return \"redirect\"; }", "n_tokens": 130, "n_pass": [219, 19, 15]}
{"time": "2021-02-13 05:34:39.226933", "score": "0.7184", "loss": "1.2877", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process, stream\"); } return \"redirect\"; }", "n_tokens": 126, "n_pass": [234, 21, 16]}
{"time": "2021-02-13 05:34:44.701948", "score": "0.6907", "loss": "0.7214", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } return \"redirect\"; }", "n_tokens": 124, "n_pass": [340, 23, 17]}
{"time": "2021-02-13 05:34:46.046314", "score": "0.5624", "loss": "1.0303", "code": " String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 122, "n_pass": [343, 24, 18]}
{"time": "2021-02-13 05:34:47.358811", "score": "0.5624", "loss": "1.0303", "code": "String deploy(@RequestParam(value = \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 121, "n_pass": [347, 25, 19]}
{"time": "2021-02-13 05:34:49.840890", "score": "0.5624", "loss": "1.0303", "code": "String deploy(@RequestParam(value= \"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 120, "n_pass": [356, 26, 20]}
{"time": "2021-02-13 05:34:51.181263", "score": "0.5624", "loss": "1.0303", "code": "String deploy(@RequestParam(value=\"file\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 119, "n_pass": [358, 27, 21]}
{"time": "2021-02-13 05:34:52.520027", "score": "0.68", "loss": "0.7083", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream(); if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 118, "n_pass": [360, 28, 22]}
{"time": "2021-02-13 05:34:53.899478", "score": "0.7321", "loss": "0.679", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension.equals(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 116, "n_pass": [372, 29, 23]}
{"time": "2021-02-13 05:34:55.261459", "score": "0.8118", "loss": "0.5066", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { ZipInputStream zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 114, "n_pass": [376, 30, 24]}
{"time": "2021-02-13 05:34:56.610101", "score": "0.8227", "loss": "0.4341", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip = new ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 112, "n_pass": [385, 31, 25]}
{"time": "2021-02-13 05:34:57.946319", "score": "0.8777", "loss": "0.41", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip = ZipInputStream(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 110, "n_pass": [388, 32, 26]}
{"time": "2021-02-13 05:34:59.279693", "score": "0.8828", "loss": "0.352", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } else deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 108, "n_pass": [389, 33, 27]}
{"time": "2021-02-13 05:35:00.648824", "score": "0.9736", "loss": "0.1761", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deployment.deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 106, "n_pass": [394, 34, 28]}
{"time": "2021-02-13 05:35:02.005796", "score": "0.8381", "loss": "0.4131", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deploy(); } catch (Exception e) { logger.error(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 104, "n_pass": [395, 35, 29]}
{"time": "2021-02-13 05:35:03.369524", "score": "0.8144", "loss": "0.6944", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deploy(); } catch (Exception e) { logger(\"deploy process,\"); } \"redirect\"; }", "n_tokens": 102, "n_pass": [405, 36, 30]}
{"time": "2021-02-13 05:35:06.070486", "score": "0.8873", "loss": "0.4427", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try { InputStream; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deploy(); } catch (Exception e) { logger(\"deploy \"); } \"redirect\"; }", "n_tokens": 100, "n_pass": [408, 38, 31]}
{"time": "2021-02-13 05:35:08.521133", "score": "0.7607", "loss": "0.7923", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {; if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deploy(); } catch (Exception e) { logger(\"deploy \"); } \"redirect\"; }", "n_tokens": 98, "n_pass": [435, 39, 32]}
{"time": "2021-02-13 05:35:09.847556", "score": "0.7607", "loss": "0.7923", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) { zip =(fileInputStreamzip); } deploy(); } catch (Exception e) { logger(\"deploy \"); } \"redirect\"; }", "n_tokens": 96, "n_pass": [436, 40, 33]}
{"time": "2021-02-13 05:35:11.205797", "score": "0.5936", "loss": "1.2743", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) { zip(fileInputStreamzip); } deploy(); } catch (Exception e) { logger(\"deploy \"); } \"redirect\"; }", "n_tokens": 94, "n_pass": [448, 41, 34]}
{"time": "2021-02-13 05:35:12.543437", "score": "0.2885", "loss": "2.4128", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) { zip(fileInputStreamzip); } deploy(); } catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 92, "n_pass": [461, 42, 35]}
{"time": "2021-02-13 05:35:16.316572", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip); } deploy(); } catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 90, "n_pass": [500, 44, 36]}
{"time": "2021-02-13 05:35:28.741696", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);} deploy(); } catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 89, "n_pass": [632, 46, 37]}
{"time": "2021-02-13 05:35:30.103515", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy(); } catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 88, "n_pass": [634, 47, 38]}
{"time": "2021-02-13 05:35:31.468091", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();} catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 87, "n_pass": [639, 48, 39]}
{"time": "2021-02-13 05:35:32.796286", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch (Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 86, "n_pass": [641, 49, 40]}
{"time": "2021-02-13 05:35:34.160504", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e) {(\"deploy \"); } \"redirect\"; }", "n_tokens": 85, "n_pass": [643, 50, 41]}
{"time": "2021-02-13 05:35:35.492992", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy \"); } \"redirect\"; }", "n_tokens": 84, "n_pass": [649, 51, 42]}
{"time": "2021-02-13 05:35:38.154654", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\"); } \"redirect\"; }", "n_tokens": 83, "n_pass": [654, 53, 43]}
{"time": "2021-02-13 05:35:39.482428", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");} \"redirect\"; }", "n_tokens": 82, "n_pass": [658, 54, 44]}
{"time": "2021-02-13 05:35:40.818321", "score": "0.406", "loss": "1.8621", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"redirect\"; }", "n_tokens": 81, "n_pass": [660, 55, 45]}
{"time": "2021-02-13 05:35:42.144129", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\"; }", "n_tokens": 80, "n_pass": [662, 56, 46]}
{"time": "2021-02-13 05:35:43.473873", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\", required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 79, "n_pass": [665, 57, 47]}
{"time": "2021-02-13 05:35:45.930659", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required = true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 78, "n_pass": [679, 58, 48]}
{"time": "2021-02-13 05:35:47.258008", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required= true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 77, "n_pass": [681, 59, 49]}
{"time": "2021-02-13 05:35:48.614397", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true) MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 76, "n_pass": [683, 60, 50]}
{"time": "2021-02-13 05:35:49.969680", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file) { try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 75, "n_pass": [686, 61, 51]}
{"time": "2021-02-13 05:35:51.396663", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){ try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 74, "n_pass": [691, 62, 52]}
{"time": "2021-02-13 05:35:52.752656", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try {if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 73, "n_pass": [693, 63, 53]}
{"time": "2021-02-13 05:35:54.102470", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if (extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 72, "n_pass": [695, 64, 54]}
{"time": "2021-02-13 05:35:55.430259", "score": "0.6045", "loss": "1.2515", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if(extension(\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 71, "n_pass": [698, 65, 55]}
{"time": "2021-02-13 05:35:56.776785", "score": "0.3827", "loss": "1.9686", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"zip\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 70, "n_pass": [700, 66, 56]}
{"time": "2021-02-13 05:35:58.095232", "score": "0.3537", "loss": "2.0641", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\") ||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 69, "n_pass": [703, 67, 57]}
{"time": "2021-02-13 05:35:59.433093", "score": "0.3537", "loss": "2.0641", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\")||(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 68, "n_pass": [706, 68, 58]}
{"time": "2021-02-13 05:36:00.776036", "score": "0.4804", "loss": "1.6123", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\")|(\"bar\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 67, "n_pass": [707, 69, 59]}
{"time": "2021-02-13 05:36:02.104784", "score": "0.5194", "loss": "1.4597", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\")|(\"\")) {(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 66, "n_pass": [711, 70, 60]}
{"time": "2021-02-13 05:36:03.454732", "score": "0.5194", "loss": "1.4597", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\")|(\"\")){(fileInputStreamzip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 65, "n_pass": [715, 71, 61]}
{"time": "2021-02-13 05:36:04.777138", "score": "0.4612", "loss": "1.6033", "code": "String deploy(@RequestParam(value=\"\",required=true)MultipartFile file){try{if((\"\")|(\"\")){(zip);}deploy();}catch(Exception e){(\"deploy\");}\"\";}", "n_tokens": 64, "n_pass": [718, 72, 62]}

Minimal simplified code:
String deploy(@RequestParam(value="",required=true)MultipartFile file){try{if(("")|("")){(zip);}deploy();}catch(Exception e){("deploy");}"";}

