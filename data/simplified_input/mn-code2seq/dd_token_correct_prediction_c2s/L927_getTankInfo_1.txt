
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorCoolantPort_getTankInfo.java
method_name = getTankInfo
method_body = @Override public FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }
predict, score, loss = getTankInfo, 0.9873657822608948, 0.05537762865424156

Trace of simplified code(s):
{"time": "2021-02-14 02:17:24.668986", "score": "0.9874", "loss": "0.0554", "code": "@Override public FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 76, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:17:26.444873", "score": "0.9817", "loss": "0.096", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() || from != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 72, "n_pass": [44, 2, 2]}
{"time": "2021-02-14 02:17:28.195641", "score": "0.9806", "loss": "0.097", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { return emptyTankArray; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 67, "n_pass": [50, 3, 3]}
{"time": "2021-02-14 02:17:29.549649", "score": "0.9892", "loss": "0.0565", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.getTankInfo(getConnectedTank()); }", "n_tokens": 62, "n_pass": [53, 4, 4]}
{"time": "2021-02-14 02:17:30.904670", "score": "0.9849", "loss": "0.0875", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainer().getTankInfo(getConnectedTank()); }", "n_tokens": 57, "n_pass": [57, 5, 5]}
{"time": "2021-02-14 02:17:32.971528", "score": "0.985", "loss": "0.0831", "code": " FluidTankInfo[] getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 54, "n_pass": [94, 6, 6]}
{"time": "2021-02-14 02:17:34.286385", "score": "0.9857", "loss": "0.0883", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir()) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 52, "n_pass": [99, 7, 7]}
{"time": "2021-02-14 02:17:36.015873", "score": "0.9808", "loss": "0.1228", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { } CoolantContainer cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 50, "n_pass": [111, 8, 8]}
{"time": "2021-02-14 02:17:37.360742", "score": "0.9437", "loss": "0.3171", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { }cc = getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 47, "n_pass": [114, 9, 9]}
{"time": "2021-02-14 02:17:38.702055", "score": "0.9866", "loss": "0.087", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) { } getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 44, "n_pass": [115, 10, 10]}
{"time": "2021-02-14 02:17:40.790286", "score": "0.974", "loss": "0.1658", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir)  getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 41, "n_pass": [134, 11, 11]}
{"time": "2021-02-14 02:17:46.217917", "score": "0.974", "loss": "0.1658", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank()); }", "n_tokens": 40, "n_pass": [189, 12, 12]}
{"time": "2021-02-14 02:17:47.645534", "score": "0.9843", "loss": "0.0809", "code": " FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 38, "n_pass": [196, 13, 13]}
{"time": "2021-02-14 02:17:48.962970", "score": "0.9843", "loss": "0.0809", "code": "FluidTankInfo getTankInfo(ForgeDirection from) { if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 37, "n_pass": [199, 14, 14]}
{"time": "2021-02-14 02:17:51.364312", "score": "0.9843", "loss": "0.0809", "code": "FluidTankInfo getTankInfo(ForgeDirection from){ if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 36, "n_pass": [208, 15, 15]}
{"time": "2021-02-14 02:17:52.701401", "score": "0.9843", "loss": "0.0809", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if (!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 35, "n_pass": [210, 16, 16]}
{"time": "2021-02-14 02:17:54.050211", "score": "0.9843", "loss": "0.0809", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(!isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 34, "n_pass": [212, 17, 17]}
{"time": "2021-02-14 02:17:55.390892", "score": "0.9851", "loss": "0.0757", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected() != getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 33, "n_pass": [214, 18, 18]}
{"time": "2021-02-14 02:17:56.737018", "score": "0.9851", "loss": "0.0757", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!= getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 32, "n_pass": [218, 19, 19]}
{"time": "2021-02-14 02:17:58.527447", "score": "0.9851", "loss": "0.0757", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir) getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 31, "n_pass": [221, 20, 20]}
{"time": "2021-02-14 02:17:59.871449", "score": "0.9851", "loss": "0.0757", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getCoolantContainergetTankInfo(getConnectedTank); }", "n_tokens": 30, "n_pass": [224, 21, 21]}
{"time": "2021-02-14 02:18:03.537478", "score": "0.9881", "loss": "0.0722", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo(getConnectedTank); }", "n_tokens": 29, "n_pass": [259, 22, 22]}
{"time": "2021-02-14 02:18:04.902365", "score": "0.9807", "loss": "0.1424", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo(); }", "n_tokens": 28, "n_pass": [261, 23, 23]}
{"time": "2021-02-14 02:18:06.214671", "score": "0.9807", "loss": "0.1424", "code": "FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo();}", "n_tokens": 27, "n_pass": [264, 24, 24]}

Minimal simplified code:
FluidTankInfo getTankInfo(ForgeDirection from){if(isConnected()!=getOutwardsDir)getReactorController().getTankInfo();}

