
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/simplemagic/src/main/java/com/j256/simplemagic/ContentInfoInputStreamWrapper_read.java
method_name = read
method_body = @Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }
predict, score, loss = read, 0.9841629266738892, 0.03504157438874245

Trace of simplified code(s):
{"time": "2021-02-13 13:33:29.826440", "score": "0.9724", "loss": "0.0552", "code": "@Override public int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 141, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 13:33:31.601290", "score": "0.9821", "loss": "0.2653", "code": " int read(byte[] b, int off, int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 137, "n_pass": [92, 2, 2]}
{"time": "2021-02-13 13:33:32.949023", "score": "0.9785", "loss": "0.2371", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b, off, len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 133, "n_pass": [95, 3, 3]}
{"time": "2021-02-13 13:33:34.328030", "score": "0.9732", "loss": "0.2613", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.length - byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 129, "n_pass": [102, 4, 4]}
{"time": "2021-02-13 13:33:35.677717", "score": "0.9539", "loss": "0.3588", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for (int i = off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 125, "n_pass": [106, 5, 5]}
{"time": "2021-02-13 13:33:37.026493", "score": "0.9676", "loss": "0.3057", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off; i < off + left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 120, "n_pass": [113, 6, 6]}
{"time": "2021-02-13 13:33:38.365470", "score": "0.9641", "loss": "0.2952", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off; i+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 115, "n_pass": [115, 7, 7]}
{"time": "2021-02-13 13:33:40.430471", "score": "0.969", "loss": "0.2424", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;+ left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 113, "n_pass": [195, 8, 8]}
{"time": "2021-02-13 13:33:41.773658", "score": "0.9702", "loss": "0.2241", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; i++) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 111, "n_pass": [196, 9, 9]}
{"time": "2021-02-13 13:33:43.115275", "score": "0.966", "loss": "0.2063", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } return numRead; }", "n_tokens": 108, "n_pass": [198, 10, 10]}
{"time": "2021-02-13 13:33:44.463720", "score": "0.8476", "loss": "0.5551", "code": " int read(byte[] b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 105, "n_pass": [206, 11, 11]}
{"time": "2021-02-13 13:33:46.179912", "score": "0.8349", "loss": "0.4449", "code": " int read(byte b,  int len) throws IOException { int numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 103, "n_pass": [211, 12, 12]}
{"time": "2021-02-13 13:33:47.541797", "score": "0.9116", "loss": "0.3455", "code": " int read(byte b,  int len) throws IOException { numRead = delegate.read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 101, "n_pass": [220, 13, 13]}
{"time": "2021-02-13 13:33:48.866671", "score": "0.8988", "loss": "0.3728", "code": " int read(byte b,  int len) throws IOException { numRead = read(b,len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 99, "n_pass": [223, 14, 14]}
{"time": "2021-02-13 13:33:50.224941", "score": "0.8369", "loss": "0.4374", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); int left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 97, "n_pass": [225, 15, 15]}
{"time": "2021-02-13 13:33:51.577077", "score": "0.8901", "loss": "0.2669", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = firstBytes.byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 95, "n_pass": [228, 16, 16]}
{"time": "2021-02-13 13:33:52.924510", "score": "0.863", "loss": "0.2659", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left = numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 93, "n_pass": [231, 17, 17]}
{"time": "2021-02-13 13:33:54.260133", "score": "0.8729", "loss": "0.4108", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left numRead; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 91, "n_pass": [240, 18, 18]}
{"time": "2021-02-13 13:33:55.585397", "score": "0.9285", "loss": "0.2131", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left = byteCount; if (left > numRead) { left; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 89, "n_pass": [241, 19, 19]}
{"time": "2021-02-13 13:33:57.332659", "score": "0.9341", "loss": "0.4461", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) { left; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 87, "n_pass": [273, 20, 20]}
{"time": "2021-02-13 13:33:58.667351", "score": "0.8901", "loss": "0.7613", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) {; } for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 85, "n_pass": [281, 21, 21]}
{"time": "2021-02-13 13:33:59.984606", "score": "0.8901", "loss": "0.7613", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); left byteCount; if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 83, "n_pass": [282, 22, 22]}
{"time": "2021-02-13 13:34:01.741963", "score": "0.9151", "loss": "0.4886", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); byteCount; if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 81, "n_pass": [312, 23, 23]}
{"time": "2021-02-13 13:34:03.052075", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len);  if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 79, "n_pass": [313, 24, 24]}
{"time": "2021-02-13 13:34:14.094984", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if (left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 78, "n_pass": [419, 25, 25]}
{"time": "2021-02-13 13:34:15.404815", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left > numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 77, "n_pass": [420, 26, 26]}
{"time": "2021-02-13 13:34:16.716408", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left> numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 76, "n_pass": [423, 27, 27]}
{"time": "2021-02-13 13:34:18.029620", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead) {} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 75, "n_pass": [425, 28, 28]}
{"time": "2021-02-13 13:34:19.371110", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){} for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 74, "n_pass": [428, 29, 29]}
{"time": "2021-02-13 13:34:20.777216", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for ( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 73, "n_pass": [431, 30, 30]}
{"time": "2021-02-13 13:34:22.105189", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for( off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 72, "n_pass": [433, 31, 31]}
{"time": "2021-02-13 13:34:23.446720", "score": "0.8879", "loss": "0.6605", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(off;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 71, "n_pass": [435, 32, 32]}
{"time": "2021-02-13 13:34:24.771206", "score": "0.923", "loss": "0.4922", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;left; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 70, "n_pass": [436, 33, 33]}
{"time": "2021-02-13 13:34:26.117022", "score": "0.9406", "loss": "0.4638", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;; ) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 69, "n_pass": [438, 34, 34]}
{"time": "2021-02-13 13:34:27.445408", "score": "0.9406", "loss": "0.4638", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;) { firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 68, "n_pass": [440, 35, 35]}
{"time": "2021-02-13 13:34:28.760501", "score": "0.9406", "loss": "0.4638", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){ firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 67, "n_pass": [442, 36, 36]}
{"time": "2021-02-13 13:34:30.086321", "score": "0.9406", "loss": "0.4638", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } ; }", "n_tokens": 66, "n_pass": [444, 37, 37]}
{"time": "2021-02-13 13:34:31.421565", "score": "0.9406", "loss": "0.4638", "code": " int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 64, "n_pass": [454, 38, 38]}
{"time": "2021-02-13 13:34:32.763424", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,  int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 63, "n_pass": [456, 39, 39]}
{"time": "2021-02-13 13:34:34.811720", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b, int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 62, "n_pass": [465, 40, 40]}
{"time": "2021-02-13 13:34:36.155144", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len) throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 61, "n_pass": [466, 41, 41]}
{"time": "2021-02-13 13:34:37.473673", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len)throws IOException { numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 60, "n_pass": [471, 42, 42]}
{"time": "2021-02-13 13:34:38.795137", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len)throws IOException{ numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 59, "n_pass": [475, 43, 43]}
{"time": "2021-02-13 13:34:40.113164", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len)throws IOException{numRead = read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 58, "n_pass": [477, 44, 44]}
{"time": "2021-02-13 13:34:41.431465", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len)throws IOException{numRead= read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 57, "n_pass": [479, 45, 45]}
{"time": "2021-02-13 13:34:42.750442", "score": "0.9406", "loss": "0.4638", "code": "int read(byte b,int len)throws IOException{numRead=read(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 56, "n_pass": [481, 46, 46]}
{"time": "2021-02-13 13:34:44.075320", "score": "0.8376", "loss": "0.4411", "code": "int read(byte b,int len)throws IOException{numRead=(len); if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 55, "n_pass": [482, 47, 47]}
{"time": "2021-02-13 13:34:45.403909", "score": "0.8376", "loss": "0.4411", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(left>numRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 54, "n_pass": [487, 48, 48]}
{"time": "2021-02-13 13:34:46.718483", "score": "0.7978", "loss": "0.5217", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(leftnumRead){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 53, "n_pass": [491, 49, 49]}
{"time": "2021-02-13 13:34:48.030576", "score": "0.7079", "loss": "0.6286", "code": "int read(byte b,int len)throws IOException{numRead=(len);if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 52, "n_pass": [492, 50, 50]}
{"time": "2021-02-13 13:34:50.084920", "score": "0.7422", "loss": "0.7884", "code": "int read(byte b,int len)throws IOException{numRead(len);if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 51, "n_pass": [529, 51, 51]}
{"time": "2021-02-13 13:34:51.387638", "score": "0.5693", "loss": "0.9641", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++] = b[i]; } }", "n_tokens": 50, "n_pass": [531, 52, 52]}
{"time": "2021-02-13 13:34:55.106264", "score": "0.5693", "loss": "0.9641", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]= b[i]; } }", "n_tokens": 49, "n_pass": [594, 53, 53]}
{"time": "2021-02-13 13:34:56.410546", "score": "0.5693", "loss": "0.9641", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i]; } }", "n_tokens": 48, "n_pass": [595, 54, 54]}
{"time": "2021-02-13 13:34:57.738134", "score": "0.5693", "loss": "0.9641", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];} }", "n_tokens": 47, "n_pass": [601, 55, 55]}
{"time": "2021-02-13 13:34:59.045826", "score": "0.5693", "loss": "0.9641", "code": "int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];}}", "n_tokens": 46, "n_pass": [603, 56, 56]}

Minimal simplified code:
int read(byte b,int len)throws IOException{numRead();if(left){}for(;;){firstBytes[byteCount++]=b[i];}}

