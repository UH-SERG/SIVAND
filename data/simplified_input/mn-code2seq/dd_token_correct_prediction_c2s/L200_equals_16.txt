
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/jdk1.1/java/util/AbstractSet_equals.java
method_name = equals
method_body = public boolean equals(Object o) { if (this == o) return true; if (o == null) return false; if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return false; return containsAll((Collection) o); }
predict, score, loss = equals, 0.980560302734375, 0.020800413563847542

Trace of simplified code(s):
{"time": "2021-02-13 11:43:29.181880", "score": "0.9806", "loss": "0.0208", "code": "public boolean equals(Object o) { if (this == o) return true; if (o == null) return false; if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return false; return containsAll((Collection) o); }", "n_tokens": 104, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 11:43:30.525175", "score": "0.8708", "loss": "0.1429", "code": "public boolean equals(Object o) { true; if (o == null) return false; if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return false; return containsAll((Collection) o); }", "n_tokens": 91, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 11:43:31.879155", "score": "0.724", "loss": "0.3288", "code": "public boolean equals(Object o) {  return false; if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return false; return containsAll((Collection) o); }", "n_tokens": 78, "n_pass": [22, 3, 3]}
{"time": "2021-02-13 11:43:33.233522", "score": "0.548", "loss": "0.6096", "code": "public boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return false; return containsAll((Collection) o); }", "n_tokens": 72, "n_pass": [41, 4, 4]}
{"time": "2021-02-13 11:43:37.219667", "score": "0.6283", "loss": "0.4786", "code": "public boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return  containsAll((Collection) o); }", "n_tokens": 68, "n_pass": [89, 7, 5]}
{"time": "2021-02-13 11:43:43.604995", "score": "0.9599", "loss": "0.0698", "code": "public boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection) o); }", "n_tokens": 66, "n_pass": [153, 10, 6]}
{"time": "2021-02-13 11:43:44.949284", "score": "0.9691", "loss": "0.054", "code": "public boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 64, "n_pass": [155, 11, 7]}
{"time": "2021-02-13 11:43:46.265416", "score": "0.9691", "loss": "0.054", "code": " boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 63, "n_pass": [158, 12, 8]}
{"time": "2021-02-13 11:43:47.598176", "score": "0.9691", "loss": "0.054", "code": "boolean equals(Object o) { if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 62, "n_pass": [159, 13, 9]}
{"time": "2021-02-13 11:43:49.640145", "score": "0.9691", "loss": "0.054", "code": "boolean equals(Object o){ if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 61, "n_pass": [168, 14, 10]}
{"time": "2021-02-13 11:43:50.961036", "score": "0.9691", "loss": "0.054", "code": "boolean equals(Object o){if (!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 60, "n_pass": [170, 15, 11]}
{"time": "2021-02-13 11:43:52.266738", "score": "0.9691", "loss": "0.054", "code": "boolean equals(Object o){if(!(o instanceof Set)) return false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 59, "n_pass": [172, 16, 12]}
{"time": "2021-02-13 11:43:53.586130", "score": "0.8503", "loss": "0.3038", "code": "boolean equals(Object o){if(!(o instanceof Set)) false; if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 57, "n_pass": [179, 17, 13]}
{"time": "2021-02-13 11:43:54.886586", "score": "0.8255", "loss": "0.342", "code": "boolean equals(Object o){if(!(o instanceof Set))  if (((Set) o).size() != size()) return ((Collection)); }", "n_tokens": 55, "n_pass": [180, 18, 14]}
{"time": "2021-02-13 11:43:56.200759", "score": "0.6921", "loss": "0.6693", "code": "boolean equals(Object o){if(!(o instanceof Set))  if (((Set)).size() != size()) return ((Collection)); }", "n_tokens": 53, "n_pass": [185, 19, 15]}
{"time": "2021-02-13 11:43:57.522689", "score": "0.527", "loss": "1.0769", "code": "boolean equals(Object o){if(!(o instanceof Set))  if (((Set)).size() != size) return ((Collection)); }", "n_tokens": 51, "n_pass": [191, 20, 16]}
{"time": "2021-02-13 11:43:58.833952", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))  if (((Set)).size() != size) ((Collection)); }", "n_tokens": 49, "n_pass": [193, 21, 17]}
{"time": "2021-02-13 11:44:04.245631", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))  if (((Set)).size() != size) ((Collection));}", "n_tokens": 48, "n_pass": [267, 22, 18]}
{"time": "2021-02-13 11:44:07.609611", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set)) if (((Set)).size() != size) ((Collection));}", "n_tokens": 47, "n_pass": [288, 24, 19]}
{"time": "2021-02-13 11:44:08.928114", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))if (((Set)).size() != size) ((Collection));}", "n_tokens": 46, "n_pass": [289, 25, 20]}
{"time": "2021-02-13 11:44:10.264723", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))if(((Set)).size() != size) ((Collection));}", "n_tokens": 45, "n_pass": [291, 26, 21]}
{"time": "2021-02-13 11:44:11.611143", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))if(((Set)).size()!= size) ((Collection));}", "n_tokens": 44, "n_pass": [302, 27, 22]}
{"time": "2021-02-13 11:44:13.310002", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))if(((Set)).size()!=size) ((Collection));}", "n_tokens": 43, "n_pass": [305, 28, 23]}
{"time": "2021-02-13 11:44:14.645963", "score": "0.561", "loss": "0.93", "code": "boolean equals(Object o){if(!(o instanceof Set))if(((Set)).size()!=size)((Collection));}", "n_tokens": 42, "n_pass": [308, 29, 24]}

Minimal simplified code:
boolean equals(Object o){if(!(o instanceof Set))if(((Set)).size()!=size)((Collection));}

