
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ahmetaa__zemberek-nlp/core/src/main/java/zemberek/core/collections/Trie_addChild.java
method_name = addChild
method_body = void addChild(Node<T> node) { if (children == null) { children = new IntMap<>(4); } children.put(node.getChar(), node); }
predict, score, loss = addChild, 0.7896736860275269, 0.6373018026351929

Trace of simplified code(s):
{"time": "2021-02-14 02:36:35.775698", "score": "0.7897", "loss": "0.6373", "code": "void addChild(Node<T> node) { if (children == null) { children = new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 59, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:36:37.496633", "score": "0.6904", "loss": "0.9855", "code": "void addChild(Node<T> node) { if (children ) { children = new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 55, "n_pass": [50, 2, 2]}
{"time": "2021-02-14 02:36:38.815074", "score": "0.6597", "loss": "1.0906", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(node.getChar(), node); }", "n_tokens": 51, "n_pass": [52, 3, 3]}
{"time": "2021-02-14 02:36:42.265292", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(), node); }", "n_tokens": 49, "n_pass": [103, 5, 4]}
{"time": "2021-02-14 02:36:50.396043", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node); }", "n_tokens": 48, "n_pass": [178, 7, 5]}
{"time": "2021-02-14 02:36:51.732405", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T> node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 47, "n_pass": [181, 8, 6]}
{"time": "2021-02-14 02:36:53.788045", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node) { if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 46, "n_pass": [191, 9, 7]}
{"time": "2021-02-14 02:36:55.169969", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){ if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 45, "n_pass": [194, 10, 8]}
{"time": "2021-02-14 02:36:56.524462", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){if (children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 44, "n_pass": [196, 11, 9]}
{"time": "2021-02-14 02:36:57.898611", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){if(children ) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 43, "n_pass": [198, 12, 10]}
{"time": "2021-02-14 02:36:59.221173", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){if(children) { new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 42, "n_pass": [201, 13, 11]}
{"time": "2021-02-14 02:37:00.589190", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){if(children){ new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 41, "n_pass": [203, 14, 12]}
{"time": "2021-02-14 02:37:01.937549", "score": "0.6564", "loss": "1.1104", "code": "void addChild(Node<T>node){if(children){new IntMap<>(4); } children.put(getChar(),node);}", "n_tokens": 40, "n_pass": [205, 15, 13]}
{"time": "2021-02-14 02:37:03.309818", "score": "0.6756", "loss": "0.986", "code": "void addChild(Node<T>node){if(children){new IntMap<>(); } children.put(getChar(),node);}", "n_tokens": 39, "n_pass": [212, 16, 14]}
{"time": "2021-02-14 02:37:04.656906", "score": "0.6756", "loss": "0.986", "code": "void addChild(Node<T>node){if(children){new IntMap<>();} children.put(getChar(),node);}", "n_tokens": 38, "n_pass": [215, 17, 15]}
{"time": "2021-02-14 02:37:06.005191", "score": "0.6756", "loss": "0.986", "code": "void addChild(Node<T>node){if(children){new IntMap<>();}children.put(getChar(),node);}", "n_tokens": 37, "n_pass": [217, 18, 16]}

Minimal simplified code:
void addChild(Node<T>node){if(children){new IntMap<>();}children.put(getChar(),node);}

