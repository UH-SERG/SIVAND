
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/util/AsymmetricBlockCipher_doFinal.java
method_name = doFinal
method_body = public final int doFinal(byte[] input, int inOff, int inLen, byte[] output, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException("Output buffer too short."); } byte[] out = doFinal(input, inOff, inLen); System.arraycopy(out, 0, output, outOff, out.length); return out.length; }
predict, score, loss = doFinal, 0.9732143878936768, 0.08222807943820953

Trace of simplified code(s):
{"time": "2021-02-13 20:39:30.396493", "score": "0.9694", "loss": "0.1009", "code": "public final int doFinal(byte[] input, int inOff, int inLen, byte[] output, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, inLen); System.arraycopy(out, 0, output, outOff, out.length); return out.length; }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 20:39:33.116788", "score": "0.984", "loss": "0.0427", "code": "public final int doFinal(byte[] input, int inOff, int inLen, byte[] output, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 120, "n_pass": [26, 3, 2]}
{"time": "2021-02-13 20:39:34.459513", "score": "0.9502", "loss": "0.1732", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 103, "n_pass": [28, 4, 3]}
{"time": "2021-02-13 20:39:35.850368", "score": "0.9544", "loss": "0.1678", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { throw new ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 99, "n_pass": [85, 5, 4]}
{"time": "2021-02-13 20:39:37.192006", "score": "0.9796", "loss": "0.0731", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"Output buffer too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 95, "n_pass": [90, 6, 5]}
{"time": "2021-02-13 20:39:38.539800", "score": "0.9775", "loss": "0.0784", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"too short.\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 91, "n_pass": [92, 7, 6]}
{"time": "2021-02-13 20:39:39.902716", "score": "0.9754", "loss": "0.083", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input, inOff, outOff, out.length); return out.length; }", "n_tokens": 87, "n_pass": [93, 8, 7]}
{"time": "2021-02-13 20:39:41.250713", "score": "0.9685", "loss": "0.081", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length); return out.length; }", "n_tokens": 82, "n_pass": [98, 9, 8]}
{"time": "2021-02-13 20:39:42.576452", "score": "0.9623", "loss": "0.092", "code": "public final int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 77, "n_pass": [100, 10, 9]}
{"time": "2021-02-13 20:39:43.908527", "score": "0.9623", "loss": "0.092", "code": "int doFinal(byte[] input, int outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 73, "n_pass": [102, 11, 10]}
{"time": "2021-02-13 20:39:45.237449", "score": "0.9544", "loss": "0.1109", "code": "int doFinal(byte[]  outOff) throws ShortBufferException,BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 69, "n_pass": [105, 12, 11]}
{"time": "2021-02-13 20:39:46.943258", "score": "0.9327", "loss": "0.1644", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output.length < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 67, "n_pass": [157, 13, 12]}
{"time": "2021-02-13 20:39:48.273987", "score": "0.9404", "loss": "0.1462", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output < getOutputSize(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 65, "n_pass": [162, 14, 13]}
{"time": "2021-02-13 20:39:49.637338", "score": "0.9354", "loss": "0.157", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) { ShortBufferException(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 63, "n_pass": [164, 15, 14]}
{"time": "2021-02-13 20:39:50.964940", "score": "0.9037", "loss": "0.2697", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) {(\"\"); } byte[] out = doFinal(input,  out.length).length; }", "n_tokens": 61, "n_pass": [168, 16, 15]}
{"time": "2021-02-13 20:39:52.311614", "score": "0.9047", "loss": "0.2657", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) {(\"\"); } byte[] out = doFinal(inputout.length).length; }", "n_tokens": 58, "n_pass": [178, 17, 16]}
{"time": "2021-02-13 20:39:53.623446", "score": "0.9085", "loss": "0.243", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output <(inLen)) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 55, "n_pass": [179, 18, 17]}
{"time": "2021-02-13 20:39:55.310312", "score": "0.9193", "loss": "0.1971", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output(inLen)) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 53, "n_pass": [193, 19, 18]}
{"time": "2021-02-13 20:40:02.011971", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()) {(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 52, "n_pass": [270, 20, 19]}
{"time": "2021-02-13 20:40:03.323560", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\"); } byte[] out = doFinal(input).length; }", "n_tokens": 51, "n_pass": [273, 21, 20]}
{"time": "2021-02-13 20:40:04.676190", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");} byte[] out = doFinal(input).length; }", "n_tokens": 50, "n_pass": [280, 22, 21]}
{"time": "2021-02-13 20:40:06.016668", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[] out = doFinal(input).length; }", "n_tokens": 49, "n_pass": [282, 23, 22]}
{"time": "2021-02-13 20:40:07.336717", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out = doFinal(input).length; }", "n_tokens": 48, "n_pass": [286, 24, 23]}
{"time": "2021-02-13 20:40:08.648902", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out= doFinal(input).length; }", "n_tokens": 47, "n_pass": [288, 25, 24]}
{"time": "2021-02-13 20:40:09.960690", "score": "0.9266", "loss": "0.1778", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal(input).length; }", "n_tokens": 46, "n_pass": [290, 26, 25]}
{"time": "2021-02-13 20:40:12.650905", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]  outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 45, "n_pass": [293, 28, 26]}
{"time": "2021-02-13 20:40:14.745788", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[] outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 44, "n_pass": [304, 29, 27]}
{"time": "2021-02-13 20:40:16.075541", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff) throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 43, "n_pass": [305, 30, 28]}
{"time": "2021-02-13 20:40:17.398032", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff)throws BadPaddingException { if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 42, "n_pass": [308, 31, 29]}
{"time": "2021-02-13 20:40:18.719375", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff)throws BadPaddingException{ if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 41, "n_pass": [312, 32, 30]}
{"time": "2021-02-13 20:40:20.039097", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if (output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 40, "n_pass": [314, 33, 31]}
{"time": "2021-02-13 20:40:21.360863", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=doFinal().length; }", "n_tokens": 39, "n_pass": [316, 34, 32]}
{"time": "2021-02-13 20:40:24.128059", "score": "0.9043", "loss": "0.3833", "code": "int doFinal(byte[]outOff)throws BadPaddingException{if(output()){(\"\");}byte[]out=doFinal().length;}", "n_tokens": 38, "n_pass": [363, 35, 33]}

Minimal simplified code:
int doFinal(byte[]outOff)throws BadPaddingException{if(output()){("");}byte[]out=doFinal().length;}

