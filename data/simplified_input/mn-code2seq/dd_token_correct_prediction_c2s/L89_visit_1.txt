
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/jasper/compiler/SmapUtil_visit.java
method_name = visit
method_body = @Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); if (mark == null) { return; } String fileName = mark.getFile(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }
predict, score, loss = visit, 0.9565921425819397, 0.1004321351647377

Trace of simplified code(s):
{"time": "2021-02-13 05:09:30.708566", "score": "0.6309", "loss": "0.8072", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); if (mark == null) { return; } String fileName = mark.getFile(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 252, "n_pass": [1, 1, 1]}
{"time": "2021-02-13 05:09:32.102231", "score": "0.8871", "loss": "0.2734", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smap.addLineData(iInputStartLine, fileName, 1, iOutputStartLine, iOutputLineIncrement); java.util.ArrayList<Integer> extraSmap = n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 221, "n_pass": [21, 2, 2]}
{"time": "2021-02-13 05:09:33.474549", "score": "0.9248", "loss": "0.179", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); int iOutputStartLine = n.getBeginJavaLine(); int iOutputLineIncrement = breakAtLF ? 1 : 0; smapn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 189, "n_pass": [24, 3, 3]}
{"time": "2021-02-13 05:09:34.841747", "score": "0.9335", "loss": "0.1484", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStart(); smap.addFile(unqualify(fileName), fileName); int iInputStartLine = mark.getLineNumber(); n.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 158, "n_pass": [30, 4, 4]}
{"time": "2021-02-13 05:09:36.228186", "score": "0.9336", "loss": "0.1459", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStartn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine + extraSmap.get(i).intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 127, "n_pass": [35, 5, 5]}
{"time": "2021-02-13 05:09:37.620311", "score": "0.9337", "loss": "0.1591", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Mark mark = n.getStartn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 119, "n_pass": [80, 6, 6]}
{"time": "2021-02-13 05:09:39.337432", "score": "0.9117", "loss": "0.2113", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap != null) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 111, "n_pass": [86, 7, 7]}
{"time": "2021-02-13 05:09:41.084299", "score": "0.9445", "loss": "0.1213", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; i < extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 107, "n_pass": [132, 8, 8]}
{"time": "2021-02-13 05:09:42.431438", "score": "0.9468", "loss": "0.1155", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine += iOutputLineIncrement; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 103, "n_pass": [137, 9, 9]}
{"time": "2021-02-13 05:09:43.781709", "score": "0.938", "loss": "0.1206", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine .intValue(), fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 99, "n_pass": [142, 10, 10]}
{"time": "2021-02-13 05:09:45.148011", "score": "0.9045", "loss": "0.1841", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName, 1, iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 95, "n_pass": [145, 11, 11]}
{"time": "2021-02-13 05:09:46.482926", "score": "0.8977", "loss": "0.2012", "code": "@Override public void visit(Node.TemplateText n) throws JasperException { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 91, "n_pass": [147, 12, 12]}
{"time": "2021-02-13 05:09:49.558490", "score": "0.7687", "loss": "0.6027", "code": "@Override public void visit(Node.TemplateText n) { Markn.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 87, "n_pass": [155, 14, 13]}
{"time": "2021-02-13 05:09:53.333967", "score": "0.8678", "loss": "0.3336", "code": "@Override public void visit(Node.TemplateText n) {n.getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 85, "n_pass": [223, 16, 14]}
{"time": "2021-02-13 05:09:54.690779", "score": "0.7767", "loss": "0.5539", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; extraSmap.size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 83, "n_pass": [224, 17, 15]}
{"time": "2021-02-13 05:09:56.035004", "score": "0.7846", "loss": "0.5674", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i++) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 81, "n_pass": [238, 18, 16]}
{"time": "2021-02-13 05:09:57.381271", "score": "0.8041", "loss": "0.5313", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { iOutputStartLine ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 79, "n_pass": [242, 19, 17]}
{"time": "2021-02-13 05:09:58.713146", "score": "0.7894", "loss": "0.5662", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { ; smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 77, "n_pass": [245, 20, 18]}
{"time": "2021-02-13 05:10:00.064202", "score": "0.7894", "loss": "0.5662", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { smap.addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 75, "n_pass": [246, 21, 19]}
{"time": "2021-02-13 05:10:01.396006", "score": "0.7934", "loss": "0.6199", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine , fileName,iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 73, "n_pass": [247, 22, 20]}
{"time": "2021-02-13 05:10:02.719460", "score": "0.7557", "loss": "0.8063", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine , iOutputStartLine, iOutputLineIncrement); } } }", "n_tokens": 71, "n_pass": [251, 23, 21]}
{"time": "2021-02-13 05:10:04.064674", "score": "0.6992", "loss": "0.7655", "code": "@Override public void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 69, "n_pass": [252, 24, 22]}
{"time": "2021-02-13 05:10:05.384107", "score": "0.6992", "loss": "0.7655", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size(); i) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 67, "n_pass": [260, 25, 23]}
{"time": "2021-02-13 05:10:08.419887", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();) { addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 65, "n_pass": [282, 27, 24]}
{"time": "2021-02-13 05:10:20.115168", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){ addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 64, "n_pass": [381, 29, 25]}
{"time": "2021-02-13 05:10:21.429967", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine ,  iOutputLineIncrement); } } }", "n_tokens": 63, "n_pass": [383, 30, 26]}
{"time": "2021-02-13 05:10:22.743807", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,  iOutputLineIncrement); } } }", "n_tokens": 62, "n_pass": [387, 31, 27]}
{"time": "2021-02-13 05:10:24.063600", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine, iOutputLineIncrement); } } }", "n_tokens": 61, "n_pass": [389, 32, 28]}
{"time": "2021-02-13 05:10:25.376246", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement); } } }", "n_tokens": 60, "n_pass": [390, 33, 29]}
{"time": "2021-02-13 05:10:26.703538", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);} } }", "n_tokens": 59, "n_pass": [394, 34, 30]}
{"time": "2021-02-13 05:10:28.024718", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}} }", "n_tokens": 58, "n_pass": [396, 35, 31]}
{"time": "2021-02-13 05:10:29.345752", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n) {getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 57, "n_pass": [398, 36, 32]}
{"time": "2021-02-13 05:10:33.092563", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap(); if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 56, "n_pass": [413, 38, 33]}
{"time": "2021-02-13 05:10:34.407377", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if (extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 55, "n_pass": [419, 39, 34]}
{"time": "2021-02-13 05:10:35.722957", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap ) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 54, "n_pass": [421, 40, 35]}
{"time": "2021-02-13 05:10:37.036643", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap) { for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 53, "n_pass": [424, 41, 36]}
{"time": "2021-02-13 05:10:38.357592", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){ for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 52, "n_pass": [426, 42, 37]}
{"time": "2021-02-13 05:10:39.700756", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for (int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 51, "n_pass": [428, 43, 38]}
{"time": "2021-02-13 05:10:41.020881", "score": "0.5717", "loss": "1.0561", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(int i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 50, "n_pass": [430, 44, 39]}
{"time": "2021-02-13 05:10:42.369609", "score": "0.6379", "loss": "1.0468", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for( i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 49, "n_pass": [432, 45, 40]}
{"time": "2021-02-13 05:10:43.690451", "score": "0.6379", "loss": "1.0468", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i = 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 48, "n_pass": [433, 46, 41]}
{"time": "2021-02-13 05:10:45.024268", "score": "0.6379", "loss": "1.0468", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i= 0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 47, "n_pass": [435, 47, 42]}
{"time": "2021-02-13 05:10:46.348488", "score": "0.6379", "loss": "1.0468", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i=0; size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 46, "n_pass": [437, 48, 43]}
{"time": "2021-02-13 05:10:47.672237", "score": "0.6379", "loss": "1.0468", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLine,iOutputLineIncrement);}}}", "n_tokens": 45, "n_pass": [440, 49, 44]}
{"time": "2021-02-13 05:10:48.989269", "score": "0.7231", "loss": "0.6415", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLineiOutputLineIncrement);}}}", "n_tokens": 44, "n_pass": [450, 50, 45]}
{"time": "2021-02-13 05:10:50.314713", "score": "0.7356", "loss": "0.5605", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i=0;size();){addLineData(iInputStartLine);}}}", "n_tokens": 43, "n_pass": [451, 51, 46]}
{"time": "2021-02-13 05:10:54.047221", "score": "0.8504", "loss": "0.3173", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i0;size();){addLineData(iInputStartLine);}}}", "n_tokens": 42, "n_pass": [483, 53, 47]}
{"time": "2021-02-13 05:10:55.360825", "score": "0.8504", "loss": "0.3173", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i;size();){addLineData(iInputStartLine);}}}", "n_tokens": 41, "n_pass": [484, 54, 48]}
{"time": "2021-02-13 05:10:56.679613", "score": "0.9043", "loss": "0.3207", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(i;size();){(iInputStartLine);}}}", "n_tokens": 40, "n_pass": [492, 55, 49]}
{"time": "2021-02-13 05:11:00.403445", "score": "0.9542", "loss": "0.1347", "code": "@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(;size();){(iInputStartLine);}}}", "n_tokens": 39, "n_pass": [525, 57, 50]}

Minimal simplified code:
@Override void visit(Node.TemplateText n){getExtraSmap();if(extraSmap){for(;size();){(iInputStartLine);}}}

