
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/erogenousbeef__BigReactors/src/main/java/erogenousbeef/bigreactors/common/multiblock/tileentity/TileEntityReactorCoolantPort_canFill.java
method_name = canFill
method_body = @Override public boolean canFill(ForgeDirection from, Fluid fluid) { if (!isConnected() || from != getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }
predict, score, loss = canFill, 0.9683836698532104, 0.14347189664840698

Trace of simplified code(s):
{"time": "2021-02-14 02:59:53.327859", "score": "0.9684", "loss": "0.1435", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if (!isConnected() || from != getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 98, "n_pass": [1, 1, 1]}
{"time": "2021-02-14 02:59:54.706902", "score": "0.9598", "loss": "0.1801", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false; } if (!inlet) { return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 86, "n_pass": [22, 2, 2]}
{"time": "2021-02-14 02:59:56.071192", "score": "0.9473", "loss": "0.2071", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } CoolantContainer cc = getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 74, "n_pass": [23, 3, 3]}
{"time": "2021-02-14 02:59:57.440808", "score": "0.9724", "loss": "0.095", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } getReactorController().getCoolantContainer(); return cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 68, "n_pass": [43, 4, 4]}
{"time": "2021-02-14 02:59:58.831357", "score": "0.9378", "loss": "0.2703", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; } getReactorController().getCoolantContainercc.canFill(getConnectedTank(), fluid); }", "n_tokens": 62, "n_pass": [45, 5, 5]}
{"time": "2021-02-14 03:00:00.521248", "score": "0.9002", "loss": "0.3319", "code": "@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 56, "n_pass": [55, 6, 6]}
{"time": "2021-02-14 03:00:02.253580", "score": "0.87", "loss": "0.6002", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;return false; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 53, "n_pass": [87, 7, 7]}
{"time": "2021-02-14 03:00:03.731145", "score": "0.8719", "loss": "0.5549", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return false;; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 50, "n_pass": [98, 8, 8]}
{"time": "2021-02-14 03:00:05.438340", "score": "0.8789", "loss": "0.5304", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) { return; }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 47, "n_pass": [114, 9, 9]}
{"time": "2021-02-14 03:00:08.855632", "score": "0.8789", "loss": "0.5304", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }cc.canFill(getConnectedTank(), fluid); }", "n_tokens": 45, "n_pass": [161, 10, 10]}
{"time": "2021-02-14 03:00:10.198256", "score": "0.9262", "loss": "0.337", "code": "public boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 43, "n_pass": [163, 11, 11]}
{"time": "2021-02-14 03:00:11.569363", "score": "0.9262", "loss": "0.337", "code": " boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 42, "n_pass": [170, 12, 12]}
{"time": "2021-02-14 03:00:12.896682", "score": "0.9262", "loss": "0.337", "code": "boolean canFill(ForgeDirection from, Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 41, "n_pass": [171, 13, 13]}
{"time": "2021-02-14 03:00:15.025783", "score": "0.9262", "loss": "0.337", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir()) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 40, "n_pass": [180, 14, 14]}
{"time": "2021-02-14 03:00:16.342812", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {  }canFill(getConnectedTank(), fluid); }", "n_tokens": 38, "n_pass": [188, 15, 15]}
{"time": "2021-02-14 03:00:21.783859", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) { }canFill(getConnectedTank(), fluid); }", "n_tokens": 37, "n_pass": [241, 16, 16]}
{"time": "2021-02-14 03:00:23.121302", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(), fluid); }", "n_tokens": 36, "n_pass": [242, 17, 17]}
{"time": "2021-02-14 03:00:24.435558", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid); }", "n_tokens": 35, "n_pass": [250, 18, 18]}
{"time": "2021-02-14 03:00:25.778490", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid) { if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 34, "n_pass": [254, 19, 19]}
{"time": "2021-02-14 03:00:27.835749", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid){ if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 33, "n_pass": [268, 20, 20]}
{"time": "2021-02-14 03:00:29.170544", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if ( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 32, "n_pass": [270, 21, 21]}
{"time": "2021-02-14 03:00:30.511130", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if( getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 31, "n_pass": [272, 22, 22]}
{"time": "2021-02-14 03:00:31.870511", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir) {}canFill(getConnectedTank(),fluid);}", "n_tokens": 30, "n_pass": [274, 23, 23]}
{"time": "2021-02-14 03:00:33.235996", "score": "0.9061", "loss": "0.427", "code": "boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir){}canFill(getConnectedTank(),fluid);}", "n_tokens": 29, "n_pass": [277, 24, 24]}

Minimal simplified code:
boolean canFill(ForgeDirection from,Fluid fluid){if(getOutwardsDir){}canFill(getConnectedTank(),fluid);}

