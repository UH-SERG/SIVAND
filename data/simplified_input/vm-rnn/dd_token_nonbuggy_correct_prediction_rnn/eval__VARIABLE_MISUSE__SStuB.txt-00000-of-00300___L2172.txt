
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 2, 12], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "StackStorm/st2/st2tests/st2tests/mocks/sensor.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2172, "results": {"model": "rnn", "prob": {"loc": [[0.9994625449180603, 6.238647074496839e-07, 2.4496837340848288e-06, 2.2063306914787972e-07, 1.1392467058612965e-06, 2.1548336448518057e-08, 1.2200740862056136e-08, 5.90281445056462e-07, 1.9190919431366638e-07, 5.63649223295215e-07, 2.2722764470017864e-07, 6.200161806191318e-08, 0.0005312355933710933, 1.0045861920104926e-08, 1.1662548615731794e-07]], "pointer": [[0.0, 0.0, 0.0045225112698972225, 0.0, 0.9950992465019226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003782722051255405, 0.0, 0.0]], "target": [0.0]}, "loss": [0.000537727726623416, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:10:00.627917", "n_pass": [1, 1, 1], "n_token": 15, "loss": [0.000537727726623416, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Return mock logger instance.\\n\\n        Keep in mind that this method returns Mock class instance which means you can use all the\\n        usual Mock class methods to assert that a particular message has been logged / logger has\\n        been called with particular arguments.\\n        '", "#NEWLINE#", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 12]}}
{"prediction": {"error_location": 0.9994625449180603, "repair_targets": [], "repair_candidates": [0.0045225112698972225, 0.9950992465019226, 0.0003782722051255405], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:00.681202", "n_pass": [10, 2, 2], "n_token": 11, "loss": [0.00010251473577227443, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", ")", ":", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 8]}}
{"prediction": {"error_location": 0.9998974800109863, "repair_targets": [], "repair_candidates": [0.043038442730903625, 0.9554580450057983, 0.0015035757096484303], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:00.787745", "n_pass": [24, 4, 3], "n_token": 9, "loss": [7.1403817855753e-05, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", "return", "self", ".", "_logger"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 6]}}
{"prediction": {"error_location": 0.9999285936355591, "repair_targets": [], "repair_candidates": [0.698675274848938, 0.29724791646003723, 0.004076794255524874], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:00.838264", "n_pass": [26, 5, 4], "n_token": 7, "loss": [0.2912147641181946, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", ",", "name", "return", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 2, 6]}}
{"prediction": {"error_location": 0.7473551630973816, "repair_targets": [], "repair_candidates": [0.07343190908432007, 0.8849146962165833, 0.041653379797935486], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:00.939009", "n_pass": [39, 7, 5], "n_token": 6, "loss": [0.26193058490753174, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", "name", "return", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 2, 5]}}
{"prediction": {"error_location": 0.7695644497871399, "repair_targets": [], "repair_candidates": [0.42895153164863586, 0.5619006752967834, 0.009147743694484234], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:00.989466", "n_pass": [40, 8, 6], "n_token": 5, "loss": [0.0003711488388944417, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_logger(", "self", "name", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 2, 4]}}
{"prediction": {"error_location": 0.9996289014816284, "repair_targets": [], "repair_candidates": [0.6222907304763794, 0.34502553939819336, 0.03268369287252426], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:10:01.039183", "n_pass": [43, 9, 7], "n_token": 4, "loss": [0.05672649294137955, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 1, 3]}}
{"prediction": {"error_location": 0.9448524713516235, "repair_targets": [], "repair_candidates": [0.017962457612156868, 0.6231920719146729, 0.3588455319404602], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'name', 'self']
