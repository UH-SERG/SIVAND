
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Informs cairo of the new size of the X Drawable underlying the surface.\\n        For a surface created for a Window (rather than a Pixmap), this\\n        function must be called each time the size of the window changes (for\\n        a subwindow, you are normally resizing the window yourself, but for a\\n        toplevel window, it is necessary to listen for\\n        :class:`xcffib.xproto.ConfigureNotifyEvent`'s).\\n\\n        A Pixmap can never change size, so it is never necessary to call this\\n        function on a surface created for a Pixmap.\\n\\n        :param width: integer\\n        :param height: integer\\n        \"", "#NEWLINE#", "cairo", ".", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 17, 26, 6, 23, 4, 21], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "SimonSapin/cairocffi/cairocffi/xcb.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 255, "results": {"model": "rnn", "prob": {"loc": [[0.9993353486061096, 3.3628480196057353e-06, 1.1865627129736822e-05, 1.976580676910089e-08, 1.5276878002623562e-06, 3.431346229376686e-08, 5.800431608804502e-06, 6.895603377188309e-08, 1.0791753268790671e-08, 1.752694771539609e-07, 6.660413731651715e-08, 5.4844889518790296e-08, 6.715328026984935e-08, 3.373724055677485e-08, 1.8789283018350034e-08, 7.386111722240685e-09, 2.641446839035666e-09, 1.2997090379940346e-05, 8.633422865500506e-10, 1.42167976946439e-07, 2.894669819397677e-07, 0.0004981178208254278, 6.566156116605271e-07, 0.00012102131586289033, 8.100793138510198e-07, 1.244113292386828e-07, 2.0553549973101326e-07, 1.069662580732711e-08, 3.793788039274659e-08, 7.152184480219148e-07, 6.346932423184626e-06]], "pointer": [[0.0, 0.0, 0.009251139126718044, 0.0, 0.778774082660675, 0.0, 0.20463187992572784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002593231329228729, 0.0, 0.0, 0.0, 0.002399439224973321, 0.0, 0.003034865250810981, 0.0, 0.0, 0.0016492480644956231, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.0006648475537076592, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:19:30.621056", "n_pass": [1, 1, 1], "n_token": 31, "loss": [0.0006648475537076592, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Informs cairo of the new size of the X Drawable underlying the surface.\\n        For a surface created for a Window (rather than a Pixmap), this\\n        function must be called each time the size of the window changes (for\\n        a subwindow, you are normally resizing the window yourself, but for a\\n        toplevel window, it is necessary to listen for\\n        :class:`xcffib.xproto.ConfigureNotifyEvent`'s).\\n\\n        A Pixmap can never change size, so it is never necessary to call this\\n        function on a surface created for a Pixmap.\\n\\n        :param width: integer\\n        :param height: integer\\n        \"", "#NEWLINE#", "cairo", ".", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 17, 26, 6, 23, 4, 21]}}
{"prediction": {"error_location": 0.9993353486061096, "repair_targets": [], "repair_candidates": [0.009251139126718044, 0.778774082660675, 0.20463187992572784, 0.0002593231329228729, 0.002399439224973321, 0.003034865250810981, 0.0016492480644956231], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.680221", "n_pass": [9, 2, 2], "n_token": 23, "loss": [0.0017258524894714355, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self", ".", "_check_status", "(", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 18, 6, 15, 4, 13]}}
{"prediction": {"error_location": 0.9982757568359375, "repair_targets": [], "repair_candidates": [0.14402233064174652, 0.6327718496322632, 0.06368709355592728, 0.00014626207121182233, 0.08784836530685425, 0.07018182426691055, 0.0013422737829387188], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.737647", "n_pass": [21, 3, 3], "n_token": 19, "loss": [0.006525991018861532, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "cairo_xcb_surface_set_size", "(", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 18, 6, 15, 4, 13]}}
{"prediction": {"error_location": 0.9934952855110168, "repair_targets": [], "repair_candidates": [0.40568435192108154, 0.5613707900047302, 0.012567251920700073, 2.7257143301540054e-05, 0.007277047727257013, 0.0012591646518558264, 0.011814150959253311], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.794868", "n_pass": [40, 4, 4], "n_token": 17, "loss": [0.002552943304181099, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "_pointer", ",", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 16, 6, 13, 4, 11]}}
{"prediction": {"error_location": 0.9974501729011536, "repair_targets": [], "repair_candidates": [0.6513466835021973, 0.08975009620189667, 0.06200558692216873, 0.001073493272997439, 0.12578919529914856, 0.02528904750943184, 0.04474584013223648], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.850068", "n_pass": [41, 5, 5], "n_token": 15, "loss": [0.0019113620510324836, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "width", ",", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 14, 6, 11, 4, 9]}}
{"prediction": {"error_location": 0.9980903267860413, "repair_targets": [], "repair_candidates": [0.007934310473501682, 0.7892227172851562, 0.06030791625380516, 0.0015117638977244496, 0.11199497431516647, 0.018175771459937096, 0.010852624662220478], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.905417", "n_pass": [65, 6, 6], "n_token": 14, "loss": [0.017364613711833954, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "width", "height", ")", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 13, 6, 10, 4, 9]}}
{"prediction": {"error_location": 0.982785165309906, "repair_targets": [], "repair_candidates": [0.02723749354481697, 0.9263128042221069, 0.022833451628684998, 0.0005436526844277978, 0.011423048563301563, 0.0014267383376136422, 0.010222840122878551], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:30.960230", "n_pass": [67, 7, 7], "n_token": 13, "loss": [0.08998287469148636, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def set_size(", "self", ",", "width", ",", "height", "self", ".", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 12, 6, 10, 4, 9]}}
{"prediction": {"error_location": 0.9139467477798462, "repair_targets": [], "repair_candidates": [0.005178739782422781, 0.9785400629043579, 0.007697404362261295, 0.0002092674549203366, 0.0023794989101588726, 0.00011311665730318055, 0.005881845951080322], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:31.069690", "n_pass": [71, 9, 8], "n_token": 12, "loss": [0.19360807538032532, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", ",", "height", "self", ".", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 11, 5, 9, 3, 8]}}
{"prediction": {"error_location": 0.8239806890487671, "repair_targets": [], "repair_candidates": [0.005226579960435629, 0.9788028001785278, 0.0059472559951245785, 0.00019243490532971919, 0.0020540489349514246, 0.00010282797302352265, 0.007674055639654398], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:31.175400", "n_pass": [75, 11, 9], "n_token": 11, "loss": [0.05172562226653099, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", ".", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 10, 4, 8, 3, 7]}}
{"prediction": {"error_location": 0.9495893716812134, "repair_targets": [], "repair_candidates": [0.05422784760594368, 0.7641705870628357, 0.011947382241487503, 0.0011386058758944273, 0.009013911709189415, 0.0007471953285858035, 0.15875449776649475], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:31.228279", "n_pass": [78, 12, 10], "n_token": 10, "loss": [0.0711534395813942, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "width", "height", "self", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 9, 4, 7, 3, 6]}}
{"prediction": {"error_location": 0.9313190579414368, "repair_targets": [], "repair_candidates": [0.003462856635451317, 0.929111123085022, 0.03782569244503975, 0.013100842013955116, 0.00174896907992661, 0.0012112519470974803, 0.01353924535214901], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:19:31.333342", "n_pass": [85, 14, 11], "n_token": 9, "loss": [0.09571954607963562, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "width", "height", "self", "width", "height", "#NEWLINE#", "self"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 4, 8, 3, 6, 2, 5]}}
{"prediction": {"error_location": 0.9087189435958862, "repair_targets": [], "repair_candidates": [0.0058792876079678535, 0.7790254950523376, 0.20553691685199738, 0.006332230754196644, 0.00019990882719866931, 0.00014007794379722327, 0.0028860745951533318], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'width', 'height', 'self', 'width', 'height', '#NEWLINE#', 'self']
