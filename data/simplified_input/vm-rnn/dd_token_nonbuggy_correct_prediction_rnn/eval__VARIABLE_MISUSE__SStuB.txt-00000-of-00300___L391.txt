
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", ".", "upper", "(", ")", ".", "replace", "(", "'-'", ",", "'_'", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "if", "(", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 17, 98, 2, 35, 66, 15, 42, 54, 70, 6, 86], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "falconry/falcon/falcon/request.py", "license": "apache-2.0", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 391, "results": {"model": "rnn", "prob": {"loc": [[0.8526206612586975, 1.1860244057970704e-06, 8.486252340844658e-07, 2.2013908917983827e-08, 6.360305633279495e-07, 1.5182044066364142e-08, 6.525595495077141e-07, 3.024058869982582e-08, 3.157564663069934e-07, 1.5149610987919004e-07, 1.0141329198631865e-07, 2.584059188848187e-07, 9.148930644187203e-07, 1.0366993308252859e-07, 6.454670256061945e-07, 2.048202389914877e-07, 1.1560177171077157e-07, 9.732478929436184e-07, 1.505809343882447e-08, 7.115898092990847e-09, 6.75481137690781e-09, 1.2685193340189471e-08, 2.1729806576331612e-07, 4.252422769468467e-08, 7.494885494452319e-07, 3.8586109440075234e-05, 1.129363482732515e-07, 2.3184320525615476e-06, 4.989254875908955e-08, 2.846349786977953e-07, 1.629604412300978e-05, 4.77419519029354e-07, 2.4734680437177303e-07, 6.770590488258676e-08, 7.307919247523387e-08, 1.717594568617642e-05, 8.882437008139732e-09, 1.3544409966925741e-06, 3.855255670259794e-09, 9.975879322610126e-08, 2.269867536597303e-06, 1.3299696547619533e-05, 0.012232359498739243, 2.0604637995802477e-08, 1.7885348313484428e-07, 4.105073116988933e-07, 9.006325853988528e-07, 4.239625468471786e-07, 2.251509613415692e-06, 4.924546601614566e-07, 4.738393499792437e-07, 7.382743092421151e-07, 9.590974769935201e-08, 1.9421536308072973e-06, 0.01263488456606865, 6.726668289047666e-07, 9.425576763533172e-07, 1.6472379229526268e-06, 4.2692599322435854e-07, 6.330713517854747e-07, 4.453482063127012e-07, 0.00011960815027123317, 3.6180981055622397e-07, 3.6849857565357524e-07, 1.180618269813749e-07, 9.260480027251106e-08, 2.182848947995808e-05, 8.874867063468628e-09, 8.881623898560065e-07, 2.5715019091876457e-07, 0.005174464080482721, 1.4021979666267725e-07, 5.147874162503285e-07, 1.4349594721352332e-06, 2.953540558792156e-07, 1.5472982113351463e-06, 5.706214665224252e-07, 1.2720634856577817e-07, 1.2360213077045046e-05, 2.2253581846598536e-05, 4.302962111069064e-07, 1.256280484085437e-06, 1.6653149941703305e-05, 3.5284365651477856e-08, 6.757595087947266e-07, 8.397721103392541e-06, 0.08372501283884048, 4.083566125245852e-07, 6.118290798440285e-07, 3.988822072642506e-07, 9.142681278717646e-08, 2.0540364857879467e-06, 1.1429742698965129e-06, 6.560200631611224e-07, 3.7542594100159477e-07, 1.694337754543085e-07, 1.0769676919153426e-06, 1.0425395657875924e-06, 0.033280666917562485, 3.030225315114876e-08]], "pointer": [[0.0, 0.0, 0.0008239003363996744, 0.0, 0.1557329148054123, 0.0, 0.4873540997505188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.344942182302475, 0.0, 0.00021795187785755843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00023756294103804976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011569906928343698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009178250096738338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00033971131779253483, 0.0, 0.0, 0.0, 0.00035482822568155825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012057286221534014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005822629318572581, 0.0]], "target": [0.0]}, "loss": [0.15944035351276398, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:48:06.501341", "n_pass": [1, 1, 1], "n_token": 100, "loss": [0.15944035351276398, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", ".", "upper", "(", ")", ".", "replace", "(", "'-'", ",", "'_'", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "if", "(", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 98, 2, 35, 66, 15, 42, 54, 70, 6, 86]}}
{"prediction": {"error_location": 0.8526206612586975, "repair_targets": [], "repair_candidates": [0.0008239003363996744, 0.1557329148054123, 0.4873540997505188, 0.344942182302475, 0.00021795187785755843, 0.00023756294103804976, 0.00011569906928343698, 0.009178250096738338, 0.00033971131779253483, 0.00035482822568155825, 0.00012057286221534014, 0.0005822629318572581], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:06.603085", "n_pass": [47, 2, 2], "n_token": 94, "loss": [0.16206613183021545, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "(", "'-'", ",", "'_'", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "if", "(", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 92, 2, 29, 60, 15, 36, 48, 64, 6, 80]}}
{"prediction": {"error_location": 0.8503848910331726, "repair_targets": [], "repair_candidates": [0.000844881113152951, 0.2104644924402237, 0.4652833342552185, 0.30941084027290344, 0.006636954843997955, 0.00020413751190062612, 0.0001393036509398371, 0.005819480866193771, 0.00025719223776832223, 0.00031404479523189366, 0.00010141237726202235, 0.0005239746533334255], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:06.696843", "n_pass": [48, 3, 3], "n_token": 88, "loss": [0.19390860199928284, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "if", "(", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 86, 2, 23, 54, 15, 30, 42, 58, 6, 74]}}
{"prediction": {"error_location": 0.8237330913543701, "repair_targets": [], "repair_candidates": [0.000967765343375504, 0.2749375104904175, 0.46042144298553467, 0.25445497035980225, 0.0009428791236132383, 7.555264164693654e-05, 0.00013698518159799278, 0.006894317921251059, 0.00019314610108267516, 0.00040151775465346873, 9.481947927270085e-05, 0.0004790669190697372], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:06.878867", "n_pass": [52, 5, 4], "n_token": 82, "loss": [0.24758762121200562, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 80, 2, 23, 48, 15, 30, 36, 52, 6, 68]}}
{"prediction": {"error_location": 0.7806819081306458, "repair_targets": [], "repair_candidates": [0.0010725961765274405, 0.3084884583950043, 0.43999794125556946, 0.2349882870912552, 0.0008248166413977742, 8.545653690816835e-05, 0.00015313448966480792, 0.013407760299742222, 0.00016115064499899745, 0.000359199708327651, 7.456523599103093e-05, 0.00038667061016894877], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:06.966774", "n_pass": [54, 6, 5], "n_token": 76, "loss": [0.22189365327358246, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 74, 2, 23, 42, 15, 30, 36, 46, 6, 62]}}
{"prediction": {"error_location": 0.8010004758834839, "repair_targets": [], "repair_candidates": [0.0013404956553131342, 0.28011035919189453, 0.45392000675201416, 0.25663188099861145, 0.0008606940391473472, 9.792363562155515e-05, 0.0001515869953436777, 0.005979910027235746, 0.0001161417894763872, 0.00023709562083240598, 9.939781739376485e-05, 0.00045447226148098707], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.053557", "n_pass": [56, 7, 6], "n_token": 69, "loss": [0.2003096491098404, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 67, 2, 23, 42, 15, 30, 36, 46, 6, 55]}}
{"prediction": {"error_location": 0.8184774518013, "repair_targets": [], "repair_candidates": [0.001178801991045475, 0.2455931156873703, 0.4346829354763031, 0.3085622191429138, 0.0008446763386018574, 9.017514094011858e-05, 0.00011904673738172278, 0.008063921704888344, 0.00011662730685202405, 0.00025838465080596507, 6.133233546279371e-05, 0.0004287867632228881], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.134197", "n_pass": [57, 8, 7], "n_token": 62, "loss": [0.3521309196949005, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 60, 2, 23, 42, 15, 30, 36, 46, 6, 48]}}
{"prediction": {"error_location": 0.7031880021095276, "repair_targets": [], "repair_candidates": [0.0016839816235005856, 0.21701952815055847, 0.5055685639381409, 0.26953619718551636, 0.0006496483692899346, 8.781304495641962e-05, 9.213248267769814e-05, 0.004458398092538118, 0.00012769451132044196, 0.00014119916886556894, 9.844428859651089e-05, 0.0005363579839468002], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.292059", "n_pass": [89, 10, 8], "n_token": 59, "loss": [0.3496442139148712, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "None", "#NEWLINE#", "#UNINDENT#", "raise", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 57, 2, 23, 42, 15, 30, 36, 46, 6, 48]}}
{"prediction": {"error_location": 0.7049388289451599, "repair_targets": [], "repair_candidates": [0.0012001590803265572, 0.19338487088680267, 0.502097487449646, 0.29838505387306213, 0.0006866314797662199, 8.273286221083254e-05, 6.739932723576203e-05, 0.0030500299762934446, 0.00017169961938634515, 0.00015173383872024715, 8.131096547003835e-05, 0.0006409172783605754], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.369332", "n_pass": [90, 11, 9], "n_token": 55, "loss": [0.1699431985616684, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 53, 2, 23, 42, 15, 30, 36, 46, 6, 48]}}
{"prediction": {"error_location": 0.8437128067016602, "repair_targets": [], "repair_candidates": [0.0007759403670206666, 0.19860289990901947, 0.5506223440170288, 0.245035782456398, 0.0006384769221767783, 6.931179814273492e-05, 6.659868085989729e-05, 0.0035848745610564947, 0.00012551774852909148, 9.975968714570627e-05, 4.037176404381171e-05, 0.00033815536880865693], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.447273", "n_pass": [95, 12, 10], "n_token": 52, "loss": [0.15702684223651886, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "#INDENT#", "\"Retrieve the raw string value for the given header.\\n\\n        Args:\\n            name (str): Header name, case-insensitive (e.g., 'Content-Type')\\n            required (bool, optional): Set to ``True`` to raise\\n                ``HTTPBadRequest`` instead of returning gracefully when the\\n                header is not found (default ``False``).\\n\\n        Returns:\\n            str: The value of the specified header if it exists, or ``None`` if\\n                the header is not found and is not required.\\n\\n        Raises:\\n            HTTPBadRequest: The header was not found in the request, but\\n                it was required.\\n\\n        \"", "#NEWLINE#", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 50, 2, 20, 39, 12, 27, 33, 43, 6, 45]}}
{"prediction": {"error_location": 0.8546811938285828, "repair_targets": [], "repair_candidates": [0.0007791151292622089, 0.22334836423397064, 0.4039156436920166, 0.3676145076751709, 0.0005780553910881281, 5.4640393500449136e-05, 4.6298286179080606e-05, 0.0032274292316287756, 8.245946082752198e-05, 6.872801168356091e-05, 3.064554402953945e-05, 0.0002541433786973357], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.521246", "n_pass": [96, 13, 11], "n_token": 49, "loss": [0.058630578219890594, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "try", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 47, 2, 17, 36, 9, 24, 30, 40, 6, 42]}}
{"prediction": {"error_location": 0.9430550932884216, "repair_targets": [], "repair_candidates": [0.001356761553324759, 0.07855387032032013, 0.48961225152015686, 0.41774335503578186, 0.005117496941238642, 9.52351329033263e-05, 0.00010420136823086068, 0.006486864760518074, 0.00018447785987518728, 0.0002039899118244648, 4.518483183346689e-05, 0.0004963461542502046], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.593901", "n_pass": [98, 14, 12], "n_token": 46, "loss": [0.04791383072733879, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", ".", "env", "[", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 44, 2, 14, 33, 9, 21, 27, 37, 6, 39]}}
{"prediction": {"error_location": 0.9532158374786377, "repair_targets": [], "repair_candidates": [0.0011074054054915905, 0.05304801091551781, 0.5884469151496887, 0.34259769320487976, 0.005480710882693529, 0.00012462398444768041, 0.00011671555694192648, 0.008080580271780491, 0.0002217404980910942, 0.0002105245366692543, 4.4272390368860215e-05, 0.0005207918584346771], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.665145", "n_pass": [100, 15, 13], "n_token": 43, "loss": [0.10822930186986923, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "(", "'HTTP_'", "+", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 41, 2, 14, 30, 9, 18, 24, 34, 6, 36]}}
{"prediction": {"error_location": 0.8974217176437378, "repair_targets": [], "repair_candidates": [0.0007346108322963119, 0.03786524385213852, 0.678607165813446, 0.26854053139686584, 0.009000137448310852, 0.0004556993371807039, 2.9847424229956232e-05, 0.004141218028962612, 0.00016348792996723205, 0.0001177234880742617, 3.107968223048374e-05, 0.0003132142883259803], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.734974", "n_pass": [101, 16, 14], "n_token": 40, "loss": [0.43761688470840454, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 38, 2, 14, 27, 9, 15, 21, 31, 6, 33]}}
{"prediction": {"error_location": 0.645573079586029, "repair_targets": [], "repair_candidates": [0.0002340320497751236, 0.6316353678703308, 0.057928506284952164, 0.3019631803035736, 0.0015854235971346498, 0.0023197706323117018, 0.0006690360023640096, 0.003020016709342599, 0.00017876469064503908, 0.00010493810259504244, 2.3609060008311644e-05, 0.00033726851688697934], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.803160", "n_pass": [103, 17, 15], "n_token": 37, "loss": [0.06647972762584686, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", ")", ":", "#NEWLINE#", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 35, 2, 14, 24, 9, 15, 18, 28, 6, 30]}}
{"prediction": {"error_location": 0.9356818795204163, "repair_targets": [], "repair_candidates": [0.0002950378111563623, 0.3835153877735138, 0.1031598225235939, 0.49894610047340393, 0.004046659916639328, 0.0052300868555903435, 0.0019236807711422443, 0.0017693770350888371, 0.00040730403270572424, 0.00013664674770552665, 3.53373761754483e-05, 0.000534475315362215], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.872221", "n_pass": [105, 18, 16], "n_token": 34, "loss": [0.1230144277215004, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", ".", "env", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 32, 2, 14, 21, 9, 15, 18, 25, 6, 27]}}
{"prediction": {"error_location": 0.884250819683075, "repair_targets": [], "repair_candidates": [0.00025095808086916804, 0.34070464968681335, 0.10724843293428421, 0.5314513444900513, 0.0043333000503480434, 0.0037588286213576794, 0.0016593304462730885, 0.0071285865269601345, 0.0026080994866788387, 0.0003258787328377366, 3.753468263312243e-05, 0.0004930958966724575], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:07.938425", "n_pass": [141, 19, 17], "n_token": 32, "loss": [0.09245279431343079, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", ")", ":", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 30, 2, 14, 21, 9, 15, 18, 23, 6, 25]}}
{"prediction": {"error_location": 0.9116923213005066, "repair_targets": [], "repair_candidates": [0.0003108243108727038, 0.2515939772129059, 0.2259855717420578, 0.4706500768661499, 0.00792812928557396, 0.003894244320690632, 0.0014386947732418776, 0.02632262371480465, 0.010069615207612514, 0.00048164898180402815, 0.00032433297019451857, 0.0010003530187532306], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.002706", "n_pass": [144, 20, 18], "n_token": 30, "loss": [0.17179955542087555, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "HTTPMissingHeader", "(", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 28, 2, 14, 21, 9, 15, 18, 23, 6, 25]}}
{"prediction": {"error_location": 0.8421478867530823, "repair_targets": [], "repair_candidates": [0.00036877169623039663, 0.20610104501247406, 0.35422375798225403, 0.38828298449516296, 0.007295631803572178, 0.0033824050333350897, 0.0015187517274171114, 0.027163030579686165, 0.009405010379850864, 0.00015140855975914747, 0.00101463682949543, 0.0010926329996436834], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.065953", "n_pass": [145, 21, 19], "n_token": 28, "loss": [0.24162332713603973, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def get_header(", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 26, 2, 14, 21, 9, 15, 18, 23, 6, 25]}}
{"prediction": {"error_location": 0.7853519320487976, "repair_targets": [], "repair_candidates": [0.00046982147614471614, 0.09262829273939133, 0.5681119561195374, 0.2679500877857208, 0.006542858202010393, 0.003983504604548216, 0.0018517361022531986, 0.0482136532664299, 0.0028114449232816696, 0.0009598576580174267, 0.002818751148879528, 0.0036579822190105915], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.128852", "n_pass": [148, 22, 20], "n_token": 27, "loss": [0.16249556839466095, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 10, 25, 1, 13, 20, 8, 14, 17, 22, 5, 24]}}
{"prediction": {"error_location": 0.8500197529792786, "repair_targets": [], "repair_candidates": [0.004682296887040138, 0.2898007333278656, 0.5473440289497375, 0.1174161359667778, 0.008512001484632492, 0.002609308809041977, 0.0007902717334218323, 0.021019471809267998, 0.0020941607654094696, 0.0007677688845433295, 0.002139645628631115, 0.0028242135886102915], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.191185", "n_pass": [150, 23, 21], "n_token": 26, "loss": [0.7801556587219238, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", ",", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 24, 1, 12, 19, 7, 13, 16, 21, 4, 23]}}
{"prediction": {"error_location": 0.45833471417427063, "repair_targets": [], "repair_candidates": [0.03090650402009487, 0.8216587901115417, 0.05133543536067009, 0.08171673119068146, 0.0033758841454982758, 0.002878708066418767, 0.0008808888378553092, 0.0017842227825894952, 0.002997152041643858, 0.0004792832478415221, 0.0006615375750698149, 0.001324741169810295], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.255310", "n_pass": [152, 24, 22], "n_token": 25, "loss": [0.47392576932907104, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "=", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 23, 1, 11, 18, 6, 12, 15, 20, 3, 22]}}
{"prediction": {"error_location": 0.6225535869598389, "repair_targets": [], "repair_candidates": [0.04577464982867241, 0.6928759217262268, 0.09185770153999329, 0.12970450520515442, 0.007016441784799099, 0.00975995883345604, 0.0023729291278868914, 0.006098461803048849, 0.006849287077784538, 0.0016428398666903377, 0.002172220731154084, 0.0038750360254198313], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.316204", "n_pass": [154, 25, 23], "n_token": 24, "loss": [0.2962203919887543, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "False", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 22, 1, 10, 17, 5, 11, 14, 19, 3, 21]}}
{"prediction": {"error_location": 0.7436236143112183, "repair_targets": [], "repair_candidates": [0.04323232173919678, 0.20209893584251404, 0.02294125221669674, 0.48715701699256897, 0.01287197507917881, 0.12508715689182281, 0.02259187400341034, 0.019538773223757744, 0.03761082515120506, 0.0054360986687242985, 0.008700607344508171, 0.012733125127851963], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.377322", "n_pass": [155, 26, 24], "n_token": 23, "loss": [0.18847498297691345, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "wsgi_name", "=", "name", "#INDENT#", "return", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 21, 1, 9, 16, 4, 10, 13, 18, 3, 20]}}
{"prediction": {"error_location": 0.828221321105957, "repair_targets": [], "repair_candidates": [0.029605858027935028, 0.5096560120582581, 0.19178298115730286, 0.09914276003837585, 0.019074879586696625, 0.015947313979268074, 0.013224166817963123, 0.0665566697716713, 0.025522537529468536, 0.0035169494803994894, 0.009579906240105629, 0.016390006989240646], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.437060", "n_pass": [158, 27, 25], "n_token": 21, "loss": [0.507631242275238, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "wsgi_name", "=", "name", "self", "wsgi_name", ")", "]", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 19, 1, 7, 14, 4, 8, 11, 16, 3, 18]}}
{"prediction": {"error_location": 0.6019196510314941, "repair_targets": [], "repair_candidates": [0.04409242793917656, 0.3314773440361023, 0.14913631975650787, 0.11504540592432022, 0.05503055080771446, 0.031340185552835464, 0.04384507238864899, 0.06112577021121979, 0.12287195771932602, 0.008803737349808216, 0.016699524596333504, 0.02053166925907135], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.496153", "n_pass": [160, 28, 26], "n_token": 19, "loss": [0.39270445704460144, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "wsgi_name", "=", "name", "self", "wsgi_name", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 17, 1, 7, 12, 4, 8, 9, 14, 3, 16]}}
{"prediction": {"error_location": 0.6752282381057739, "repair_targets": [], "repair_candidates": [0.00855448842048645, 0.044881660491228104, 0.015817400068044662, 0.017174994572997093, 0.00323777855373919, 0.0005543300067074597, 0.014598739333450794, 0.888786256313324, 0.0009830199414864182, 0.001329005346633494, 0.0016802781028673053, 0.002402084181085229], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.732932", "n_pass": [194, 32, 27], "n_token": 18, "loss": [0.747065544128418, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "wsgi_name", "=", "name", "self", "wsgi_name", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 17, 1, 7, 12, 4, 8, 9, 14, 3, 16]}}
{"prediction": {"error_location": 0.4737547039985657, "repair_targets": [], "repair_candidates": [0.01113598421216011, 0.04983281344175339, 0.017814401537179947, 0.01997627131640911, 0.004363813437521458, 0.0008529387996532023, 0.0111667076125741, 0.8807071447372437, 0.0007940988871268928, 0.0016370592638850212, 0.0007044241647236049, 0.0010144077241420746], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:48:08.790806", "n_pass": [200, 33, 28], "n_token": 17, "loss": [0.8182134628295898, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "required", "wsgi_name", "name", "self", "wsgi_name", "wsgi_name", "in", "WSGI_CONTENT_HEADERS", "self", "[", "wsgi_name", "]", "required", "name"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 5, 16, 1, 6, 11, 4, 7, 8, 13, 3, 15]}}
{"prediction": {"error_location": 0.4412192702293396, "repair_targets": [], "repair_candidates": [0.009792699478566647, 0.024285610765218735, 0.004436931107193232, 0.0014575861860066652, 0.0008751091081649065, 0.0001332330866716802, 0.013418345712125301, 0.9436566233634949, 0.00040437147254124284, 0.0005176981212571263, 0.00046093619312159717, 0.0005608049686998129], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'name', 'required', 'wsgi_name', 'name', 'self', 'wsgi_name', 'wsgi_name', 'in', 'WSGI_CONTENT_HEADERS', 'self', '[', 'wsgi_name', ']', 'required', 'name']
