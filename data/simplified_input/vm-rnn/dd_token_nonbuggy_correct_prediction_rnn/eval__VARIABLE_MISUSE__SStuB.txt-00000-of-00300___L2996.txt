
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'user'", ",", "help", "=", "'user_name[/channel]. By default, channel is \"testing\", e.g., phil or phil/stable'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", "'-p'", ",", "default", "=", "None", ",", "help", "=", "(", "'Optional. Folder with a %s. Default current directory.'", "%", "CONANFILE", ")", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--keep-source'", ",", "'-k'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [12, 31, 42, 63, 86, 2, 20, 114, 5, 84, 91, 97, 110, 120, 94, 124, 108, 112, 126], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "conan-io/conan/conans/client/command.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2996, "results": {"model": "rnn", "prob": {"loc": [[0.7189163565635681, 3.2790705972729484e-06, 9.14791235118173e-06, 2.4123300690348515e-08, 2.5072116827118407e-08, 6.356780795613304e-05, 1.3028180489982333e-07, 2.5346571064233103e-08, 4.2727290860966605e-07, 1.514052172524316e-07, 4.4031122570231673e-07, 5.20768743683675e-08, 1.4489685895568982e-07, 5.2658791105386626e-08, 1.6429199831691221e-06, 2.2142816646919528e-07, 1.415902630697019e-07, 1.1098206869064597e-06, 2.2178006474860013e-05, 5.65049838030518e-08, 6.8022304731130134e-06, 4.528918573498686e-09, 8.171205223561628e-08, 4.866650371582182e-08, 1.212636675518297e-07, 9.325331973286666e-08, 6.535570378218836e-07, 3.417558858131997e-08, 3.3018648082361324e-06, 5.901848254552533e-08, 5.446555206845005e-08, 4.7118007273638796e-07, 2.3923020009419815e-08, 3.4971077411682927e-07, 9.525836119905762e-09, 9.63586808211403e-06, 1.1389711396248003e-09, 1.5427954735969251e-07, 3.408651707559329e-07, 2.8478422109401436e-07, 1.2219709688565672e-08, 9.097954745129755e-08, 3.2011183748181793e-07, 1.135059513046599e-08, 5.368356781332295e-08, 4.3721087195081054e-08, 5.862032594450284e-06, 3.100382173215621e-09, 6.0599727476073895e-06, 1.3651813013382252e-09, 1.6187522078325856e-07, 1.7514278027874752e-08, 3.0884069701642147e-07, 3.432499440236825e-08, 3.1940789995132945e-06, 8.919810667862293e-09, 2.8686114816878217e-08, 2.1914918590937305e-07, 1.552128310322587e-07, 0.0012428093468770385, 8.858537512423936e-07, 1.2434826146545674e-07, 1.2735064558455633e-07, 2.619159111816316e-08, 2.952285171886615e-08, 5.56413688457269e-08, 1.4625392452671804e-07, 2.1937859173704055e-07, 7.085889652813648e-09, 2.7487057963071493e-08, 8.12655454041078e-09, 4.099969999060704e-07, 8.365179127167721e-08, 9.746165687829489e-07, 4.011573082607356e-07, 4.857615749642719e-07, 5.741965836136842e-08, 2.609357761684805e-05, 4.554883759055883e-08, 5.149383014213527e-06, 1.6142882586223095e-08, 2.096712492516417e-08, 8.781605664864855e-09, 2.734619499733526e-07, 4.167057738868607e-07, 2.63798494160028e-08, 8.733511691616513e-08, 2.5397190128728653e-08, 9.691309799109149e-08, 2.5323248337372206e-05, 5.9099256759509444e-06, 0.004260691348463297, 3.0230705760914134e-07, 1.0157816632272443e-06, 4.330478731162657e-08, 1.8687750014123594e-08, 9.00595352959499e-07, 0.001186193199828267, 2.3855129427374777e-08, 7.174724032665836e-07, 3.2995185961226525e-07, 3.937467681680573e-06, 1.291717097728906e-07, 3.699522110878206e-08, 5.803976819152012e-07, 6.997065611358266e-06, 3.4246340874233283e-07, 3.842864316538908e-06, 5.6154938476993266e-08, 3.211514751910727e-07, 0.001220610225573182, 1.5923225404890218e-08, 1.6655877743687597e-07, 8.102259130282619e-08, 0.0002474214415997267, 6.344049729989365e-09, 8.757924518931759e-08, 3.280171156916367e-08, 1.3508196339273582e-08, 1.1390819310008737e-07, 0.0076154675334692, 3.3461922122057786e-09, 8.652957603771938e-07, 1.2147235395332245e-07, 0.024675799533724785, 3.552926500560716e-06, 0.24039995670318604, 5.853756306350988e-07]], "pointer": [[0.0, 0.0, 0.07083646208047867, 0.0, 0.0, 0.10751018673181534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01997111737728119, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020625260658562183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.064724609837867e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.651309139560908e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.376135282451287e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02614755928516388, 0.0, 4.346630521467887e-05, 0.0, 0.0, 0.0, 0.0, 8.008153236005455e-05, 0.0, 0.0, 0.11509943753480911, 0.0, 0.0, 0.027959587052464485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4032013416290283, 0.0, 0.006756110116839409, 0.0, 0.042726948857307434, 0.0, 0.17465831339359283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0022027892991900444, 0.0, 0.0, 0.0, 0.0004657786921598017, 0.0, 0.00017736281733959913, 0.0]], "target": [0.0]}, "loss": [0.33001041412353516, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:34:46.826156", "n_pass": [1, 1, 1], "n_token": 128, "loss": [0.33001041412353516, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'user'", ",", "help", "=", "'user_name[/channel]. By default, channel is \"testing\", e.g., phil or phil/stable'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", "'-p'", ",", "default", "=", "None", ",", "help", "=", "(", "'Optional. Folder with a %s. Default current directory.'", "%", "CONANFILE", ")", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--keep-source'", ",", "'-k'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 42, 63, 86, 2, 20, 114, 5, 84, 91, 97, 110, 120, 94, 124, 108, 112, 126]}}
{"prediction": {"error_location": 0.7189163565635681, "repair_targets": [], "repair_candidates": [0.07083646208047867, 0.10751018673181534, 0.01997111737728119, 0.0020625260658562183, 5.064724609837867e-05, 1.651309139560908e-05, 3.376135282451287e-05, 0.02614755928516388, 4.346630521467887e-05, 8.008153236005455e-05, 0.11509943753480911, 0.027959587052464485, 0.4032013416290283, 0.006756110116839409, 0.042726948857307434, 0.17465831339359283, 0.0022027892991900444, 0.0004657786921598017, 0.00017736281733959913], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:46.937641", "n_pass": [24, 2, 2], "n_token": 112, "loss": [0.2584984302520752, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'user'", ",", "help", "=", "'user_name[/channel]. By default, channel is \"testing\", e.g., phil or phil/stable'", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", "'-p'", ",", "default", "=", "None", ",", "help", "=", "(", "'Optional. Folder with a %s. Default current directory.'", "%", "CONANFILE", ")", ")", "#NEWLINE#", "parser", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 42, 63, 70, 2, 20, 98, 5, 68, 75, 81, 94, 104, 78, 108, 92, 96, 110]}}
{"prediction": {"error_location": 0.7722101211547852, "repair_targets": [], "repair_candidates": [0.05862366035580635, 0.08847485482692719, 0.020098472014069557, 0.002359891077503562, 4.4644810259342194e-05, 1.163578053819947e-05, 0.18724989891052246, 0.01912536285817623, 6.796493107685819e-05, 0.00013053801376372576, 0.06006309390068054, 0.01890353485941887, 0.23881232738494873, 0.007656562607735395, 0.025006916373968124, 0.2714785039424896, 0.0015334191266447306, 0.00024327468418050557, 0.00011541588173713535], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.042754", "n_pass": [55, 3, 3], "n_token": 104, "loss": [0.21215109527111053, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", "'-p'", ",", "default", "=", "None", ",", "help", "=", "(", "'Optional. Folder with a %s. Default current directory.'", "%", "CONANFILE", ")", ")", "#NEWLINE#", "parser", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 55, 62, 2, 20, 90, 5, 60, 67, 73, 86, 96, 70, 100, 84, 88, 102]}}
{"prediction": {"error_location": 0.8088424205780029, "repair_targets": [], "repair_candidates": [0.029062198475003242, 0.1720557063817978, 0.03358635678887367, 0.001027802936732769, 0.0026131344493478537, 1.1369289495632984e-05, 0.16040313243865967, 0.02529507502913475, 0.00015067057393025607, 0.0001040748247760348, 0.04254927113652229, 0.012724753469228745, 0.19085395336151123, 0.0075638978742063046, 0.018148252740502357, 0.3023555874824524, 0.0012237117625772953, 0.0001799638121156022, 9.114955901168287e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.142939", "n_pass": [56, 4, 4], "n_token": 96, "loss": [0.20655207335948944, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", "(", "'Optional. Folder with a %s. Default current directory.'", "%", "CONANFILE", ")", ")", "#NEWLINE#", "parser", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 47, 54, 2, 20, 82, 5, 52, 59, 65, 78, 88, 62, 92, 76, 80, 94]}}
{"prediction": {"error_location": 0.813383936882019, "repair_targets": [], "repair_candidates": [0.03989783674478531, 0.15234501659870148, 0.03986898809671402, 0.0015416073147207499, 0.003990520723164082, 1.918866837513633e-05, 0.15127001702785492, 0.01771860010921955, 0.00011640528828138486, 0.0001053947489708662, 0.042872004210948944, 0.013536756858229637, 0.1939658671617508, 0.008321805857121944, 0.018514638766646385, 0.31425973773002625, 0.0013551139272749424, 0.0002009910240303725, 9.944374323822558e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.242428", "n_pass": [93, 5, 5], "n_token": 92, "loss": [0.21888434886932373, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "=", "'Optional. Do not remove the source folder in local store. Use for testing purposes only'", ")", "#NEWLINE#", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 43, 50, 2, 20, 78, 5, 48, 55, 61, 74, 84, 58, 88, 72, 76, 90]}}
{"prediction": {"error_location": 0.803414523601532, "repair_targets": [], "repair_candidates": [0.05974987521767616, 0.09221699088811874, 0.031262729316949844, 0.002410114509984851, 0.0038095852360129356, 3.355614535394125e-05, 0.21969693899154663, 0.026779739186167717, 0.00015424421872012317, 6.415247480617836e-05, 0.027714386582374573, 0.007723249960690737, 0.1393267810344696, 0.006352631840854883, 0.013632758520543575, 0.3678462505340576, 0.0010034614242613316, 0.0001445779053028673, 7.801486935932189e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.336984", "n_pass": [94, 6, 6], "n_token": 88, "loss": [0.21333792805671692, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "or", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 43, 46, 2, 20, 74, 5, 44, 51, 57, 70, 80, 54, 84, 68, 72, 86]}}
{"prediction": {"error_location": 0.8078832626342773, "repair_targets": [], "repair_candidates": [0.09329071640968323, 0.10100004076957703, 0.03958063945174217, 0.0064687603153288364, 0.005343928933143616, 5.7747081882553175e-05, 0.04540717601776123, 0.05525532364845276, 4.582363908411935e-05, 0.00013662992569152266, 0.048221323639154434, 0.012767324224114418, 0.18729855120182037, 0.008522383868694305, 0.016772616654634476, 0.3781433403491974, 0.0013776845298707485, 0.00020904945267830044, 0.00010100356303155422], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.430094", "n_pass": [99, 7, 7], "n_token": 84, "loss": [0.2068539708852768, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "(", ")", ")", "#NEWLINE#", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 43, 46, 2, 20, 70, 5, 44, 51, 57, 66, 76, 54, 80, 64, 68, 82]}}
{"prediction": {"error_location": 0.8131383061408997, "repair_targets": [], "repair_candidates": [0.28699955344200134, 0.016465596854686737, 0.03548853099346161, 0.06194005534052849, 0.004610056523233652, 0.0001598487579030916, 0.014955592341721058, 0.008203253149986267, 3.309073144919239e-05, 3.638869384303689e-05, 0.03083176538348198, 0.00013937951007392257, 0.062304262071847916, 0.0024638266768306494, 0.0013378154253587127, 0.4737493693828583, 0.0001994357444345951, 4.53545362688601e-05, 3.68890177924186e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.523102", "n_pass": [100, 8, 8], "n_token": 80, "loss": [0.25206366181373596, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "_manager", ".", "export", "(", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 43, 46, 2, 20, 66, 5, 44, 51, 57, 62, 72, 54, 76, 60, 64, 78]}}
{"prediction": {"error_location": 0.777195155620575, "repair_targets": [], "repair_candidates": [0.0735994353890419, 0.030079778283834457, 0.02343069016933441, 0.005004688166081905, 0.0036611538380384445, 9.55502619035542e-05, 0.008629200980067253, 0.00969986617565155, 1.2725449778372422e-05, 9.275659249396995e-05, 0.03963008150458336, 0.0008208869840018451, 0.4406377673149109, 0.0032110160682350397, 0.003524713683873415, 0.35706761479377747, 0.0006958968006074429, 6.61407393636182e-05, 3.999918408226222e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.612151", "n_pass": [103, 9, 9], "n_token": 76, "loss": [0.25191912055015564, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "' copies the package recipe (conanfile.py and associated files) to your local store,\\n        where it can be shared and reused in other projects.\\n        From that store, it can be uploaded to any remote with \"upload\" command.\\n        '", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 31, 34, 43, 46, 2, 20, 66, 5, 44, 51, 57, 62, 68, 54, 72, 60, 64, 74]}}
{"prediction": {"error_location": 0.7773075699806213, "repair_targets": [], "repair_candidates": [0.13795490562915802, 0.02394285425543785, 0.02375822886824608, 0.018066857010126114, 0.004540655761957169, 0.0002210528909927234, 0.022696813568472862, 0.01916280947625637, 4.039243867737241e-05, 0.0001049187922035344, 0.018367476761341095, 0.00033387859002687037, 0.7211025953292847, 0.0006640640203841031, 0.0017662951722741127, 0.0008415332995355129, 0.006296919658780098, 8.676970901433378e-05, 5.094117659609765e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.699450", "n_pass": [108, 10, 10], "n_token": 72, "loss": [0.36694613099098206, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 27, 30, 39, 42, 2, 16, 62, 5, 40, 47, 53, 58, 64, 50, 68, 56, 60, 70]}}
{"prediction": {"error_location": 0.6928470134735107, "repair_targets": [], "repair_candidates": [0.0518464595079422, 0.034884341061115265, 0.008348971605300903, 0.011120951734483242, 0.002911713207140565, 4.8764388338895515e-05, 0.014417091384530067, 0.02352929301559925, 1.1637308489298448e-05, 4.8975416575558484e-05, 0.016820481047034264, 0.0003176821628585458, 0.8270236849784851, 0.0005225823260843754, 0.0013380518648773432, 0.00025457507581450045, 0.006442721467465162, 6.906430644448847e-05, 4.2830852180486545e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.784246", "n_pass": [110, 11, 11], "n_token": 68, "loss": [0.4269893169403076, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "__doc__", ",", "prog", "=", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 23, 26, 35, 38, 2, 12, 58, 5, 36, 43, 49, 54, 60, 46, 64, 52, 56, 66]}}
{"prediction": {"error_location": 0.6524704098701477, "repair_targets": [], "repair_candidates": [0.09730640053749084, 0.03253500163555145, 0.01742362231016159, 0.007861998863518238, 0.004783757030963898, 3.6532379454001784e-05, 0.025559859350323677, 0.03330206871032715, 1.7200613001477905e-05, 4.83317235193681e-05, 0.01465496327728033, 0.0002594247052911669, 0.757814347743988, 0.0004440487828105688, 0.0012122427579015493, 0.0003381822898518294, 0.006300816778093576, 6.0684433265123516e-05, 4.042751243105158e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.866976", "n_pass": [112, 12, 12], "n_token": 64, "loss": [0.4769463837146759, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "add_argument", "(", "'--path'", ",", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 19, 22, 31, 34, 2, 12, 54, 5, 32, 39, 45, 50, 56, 42, 60, 48, 52, 62]}}
{"prediction": {"error_location": 0.6206757426261902, "repair_targets": [], "repair_candidates": [0.1304125040769577, 0.03509683161973953, 0.02049141563475132, 0.019209137186408043, 0.009715787135064602, 7.284307503141463e-05, 0.026278791949152946, 0.03873499110341072, 3.148288669763133e-05, 3.870600266964175e-05, 0.010083222761750221, 0.000246288109337911, 0.7019240856170654, 0.0003953569976147264, 0.0011144926538690925, 0.0004021691274829209, 0.005660071503371, 5.3876919992035255e-05, 3.789149923250079e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:47.949738", "n_pass": [115, 13, 13], "n_token": 60, "loss": [0.40629661083221436, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", ")", ")", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 19, 22, 27, 30, 2, 12, 50, 5, 28, 35, 41, 46, 52, 38, 56, 44, 48, 58]}}
{"prediction": {"error_location": 0.6661126017570496, "repair_targets": [], "repair_candidates": [0.13474451005458832, 0.0470956452190876, 0.028475407510995865, 0.02076895721256733, 0.019639676436781883, 0.0016743324231356382, 0.018480276688933372, 0.03840719908475876, 3.0825831345282495e-05, 5.506330489879474e-05, 0.015353677794337273, 0.00026460576918907464, 0.6656875610351562, 0.0004491507716011256, 0.0014884715201333165, 0.0004612579941749573, 0.006816037930548191, 6.445286999223754e-05, 4.290257493266836e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.031015", "n_pass": [161, 14, 14], "n_token": 58, "loss": [0.481559157371521, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 19, 22, 25, 28, 2, 12, 48, 5, 26, 33, 39, 44, 50, 36, 54, 42, 46, 56]}}
{"prediction": {"error_location": 0.6178194284439087, "repair_targets": [], "repair_candidates": [0.14859457314014435, 0.049843929708004, 0.026019519194960594, 0.02252502739429474, 0.014423692598938942, 0.0002614250697661191, 0.019325552508234978, 0.01965435966849327, 2.6229025024804287e-05, 4.241739588906057e-05, 0.011218983680009842, 0.0002563566667959094, 0.6788243651390076, 0.0004582428955473006, 0.0013000882463529706, 0.0004947359557263553, 0.006628480274230242, 6.0077323723817244e-05, 4.192449341644533e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.110187", "n_pass": [164, 15, 15], "n_token": 56, "loss": [0.46176522970199585, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "user", ",", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 19, 22, 25, 28, 2, 12, 46, 5, 26, 31, 37, 42, 48, 34, 52, 40, 44, 54]}}
{"prediction": {"error_location": 0.6301701664924622, "repair_targets": [], "repair_candidates": [0.32680702209472656, 0.04809653013944626, 0.033398110419511795, 0.01872541382908821, 0.03062516264617443, 0.0013608160661533475, 0.015658050775527954, 0.022901851683855057, 0.005473420489579439, 6.47307897452265e-05, 0.014976132661104202, 0.0003451856318861246, 0.4760017693042755, 0.0005074844229966402, 0.0007841904298402369, 0.0005109902704134583, 0.0037025015335530043, 3.6523582821246237e-05, 2.4030405256780796e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.343040", "n_pass": [175, 18, 16], "n_token": 54, "loss": [0.2311156839132309, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "argparse", ".", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 19, 22, 25, 28, 2, 12, 46, 5, 26, 31, 37, 42, 48, 34, 50, 40, 44, 52]}}
{"prediction": {"error_location": 0.7936474680900574, "repair_targets": [], "repair_candidates": [0.2295568585395813, 0.011319915764033794, 0.019937722012400627, 0.00995878130197525, 0.02895740233361721, 0.0022398915607482195, 0.016287174075841904, 0.011044169776141644, 0.0071746837347745895, 2.34696071856888e-05, 0.013617421500384808, 0.00013866434164810926, 0.6441380381584167, 0.00010051524441223592, 0.001776563934981823, 0.00010690163617255166, 0.0005444605485536158, 0.003057684749364853, 1.961271118489094e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.495833", "n_pass": [183, 20, 17], "n_token": 52, "loss": [0.17198215425014496, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "export", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 17, 20, 23, 26, 2, 10, 44, 5, 24, 29, 35, 40, 46, 32, 48, 38, 42, 50]}}
{"prediction": {"error_location": 0.841994047164917, "repair_targets": [], "repair_candidates": [0.10747798532247543, 0.026463795453310013, 0.03265165910124779, 0.011367728933691978, 0.04065867140889168, 0.0022863089106976986, 0.023127667605876923, 0.021822292357683182, 0.007849191315472126, 5.314032387104817e-05, 0.023989886045455933, 0.0002551425131969154, 0.6913641691207886, 0.00017695764836389571, 0.0030955711845308542, 0.00014849517901893705, 0.0011325693922117352, 0.006042072549462318, 3.664348696474917e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.572775", "n_pass": [185, 21, 18], "n_token": 50, "loss": [0.15924285352230072, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "'conan export'", ")", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 15, 18, 21, 24, 2, 10, 42, 5, 22, 27, 33, 38, 44, 30, 46, 36, 40, 48]}}
{"prediction": {"error_location": 0.8527893424034119, "repair_targets": [], "repair_candidates": [0.13555926084518433, 0.025875039398670197, 0.02623003162443638, 0.001735397963784635, 0.017069891095161438, 0.0015890001086518168, 0.029872272163629532, 0.024191606789827347, 0.008038780651986599, 4.568960866890848e-05, 0.022879691794514656, 0.00020526557636912912, 0.6982252597808838, 0.00014577152614947408, 0.0022383013274520636, 0.00012542094918899238, 0.0009502760367468, 0.0049914708361029625, 3.163553265039809e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.646978", "n_pass": [186, 22, 19], "n_token": 48, "loss": [0.10753903537988663, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", ")", "#NEWLINE#", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 16, 19, 22, 2, 10, 40, 5, 20, 25, 31, 36, 42, 28, 44, 34, 38, 46]}}
{"prediction": {"error_location": 0.8980414867401123, "repair_targets": [], "repair_candidates": [0.10272734612226486, 0.018719710409641266, 0.014848503284156322, 0.001173914410173893, 0.008236441761255264, 0.0013449975522235036, 0.01998104527592659, 0.027345500886440277, 0.00780652929097414, 4.987873398931697e-05, 0.02660602331161499, 0.00019028916722163558, 0.7595349550247192, 0.0001880802883533761, 0.0029723597690463066, 0.0001243764563696459, 0.0011261696927249432, 0.006980051752179861, 4.379748133942485e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.720723", "n_pass": [188, 23, 20], "n_token": 46, "loss": [0.15008176863193512, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", ")", "#NEWLINE#", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 38, 5, 18, 23, 29, 34, 40, 26, 42, 32, 36, 44]}}
{"prediction": {"error_location": 0.8606374859809875, "repair_targets": [], "repair_candidates": [0.2639913856983185, 0.013591201975941658, 0.032156847417354584, 0.005622247699648142, 0.0008655943674966693, 0.000638845784123987, 0.014812561683356762, 0.03578372299671173, 0.011184139177203178, 5.3547595598502085e-05, 0.01967182382941246, 0.0002007620205404237, 0.5926348567008972, 0.00012901335139758885, 0.002227902179583907, 0.00011201831512153149, 0.0008639025036245584, 0.005429184529930353, 3.0409933970076963e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:48.793924", "n_pass": [194, 24, 21], "n_token": 44, "loss": [0.735467791557312, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "=", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 36, 5, 18, 23, 27, 32, 38, 24, 40, 30, 34, 42]}}
{"prediction": {"error_location": 0.4792812168598175, "repair_targets": [], "repair_candidates": [0.27729642391204834, 0.009150934405624866, 0.017334001138806343, 0.0065287328325212, 0.0006317526567727327, 0.000567130686249584, 0.00736766355112195, 0.01730366051197052, 0.024676918983459473, 1.2122734915465117e-05, 0.07037246972322464, 0.0010813070693984628, 0.5628970861434937, 0.0010089123388752341, 0.000756804714910686, 0.0001279655989492312, 0.0014110079500824213, 0.001461912877857685, 1.3213618331064936e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.012204", "n_pass": [262, 27, 22], "n_token": 43, "loss": [0.4309341609477997, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "(", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 35, 5, 18, 23, 26, 31, 37, 24, 39, 29, 33, 41]}}
{"prediction": {"error_location": 0.6499015688896179, "repair_targets": [], "repair_candidates": [0.16768309473991394, 0.0038001600187271833, 0.009737282060086727, 0.004230442922562361, 0.00043374812230467796, 0.0003723286499734968, 0.01148887537419796, 0.027882499620318413, 0.015884196385741234, 6.914554887771374e-06, 0.0003224134270567447, 0.001983903581276536, 0.7531180381774902, 0.0005198322469368577, 0.0004124900442548096, 0.00010827382357092574, 0.0010619019158184528, 0.0009451905498281121, 8.508820428687613e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.083939", "n_pass": [263, 28, 23], "n_token": 42, "loss": [0.5960142612457275, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "#NEWLINE#", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 34, 5, 18, 23, 25, 30, 36, 24, 38, 28, 32, 40]}}
{"prediction": {"error_location": 0.5510033965110779, "repair_targets": [], "repair_candidates": [0.42353200912475586, 0.00640252185985446, 0.024509452283382416, 0.009163040667772293, 0.0007477785693481565, 0.0005785302491858602, 0.006520511582493782, 0.022764449939131737, 0.015917519107460976, 1.893534863484092e-05, 0.0004841482441406697, 0.002505415817722678, 0.481863796710968, 0.0006797267124056816, 0.0006060479208827019, 0.0001936673215823248, 0.0016973724123090506, 0.0017976380186155438, 1.745046756695956e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.438848", "n_pass": [272, 33, 24], "n_token": 41, "loss": [0.1753261238336563, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", ".", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 33, 5, 18, 23, 25, 30, 35, 24, 37, 28, 32, 39]}}
{"prediction": {"error_location": 0.8391832709312439, "repair_targets": [], "repair_candidates": [0.126175656914711, 0.011519689112901688, 0.0360410213470459, 0.004601477179676294, 0.0007922108634375036, 0.0004232387291267514, 0.009097384288907051, 0.03378241881728172, 0.0081296032294631, 3.893560642609373e-05, 0.00048396456986665726, 0.0015465582255274057, 0.7346593141555786, 0.0003695122431963682, 0.02253102697432041, 0.0009877753909677267, 0.005283715669065714, 0.0035041028168052435, 3.239766738261096e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.509470", "n_pass": [274, 34, 25], "n_token": 40, "loss": [0.17772766947746277, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", ".", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 33, 5, 18, 23, 25, 30, 34, 24, 36, 28, 32, 38]}}
{"prediction": {"error_location": 0.8371703028678894, "repair_targets": [], "repair_candidates": [0.5593981742858887, 0.021130820736289024, 0.024238716810941696, 0.01126093976199627, 0.0018128692172467709, 0.0010655305813997984, 0.00646629324182868, 0.013322677463293076, 0.017186429351568222, 0.00010905465751420707, 0.0006144762155599892, 0.0019638012163341045, 0.1491256058216095, 0.0003195089229848236, 0.1879686862230301, 0.003066386329010129, 0.00016506527026649565, 0.0007188470917753875, 6.612865399802104e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.579741", "n_pass": [276, 35, 26], "n_token": 39, "loss": [0.5673055648803711, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", ",", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 33, 5, 18, 23, 25, 30, 34, 24, 35, 28, 32, 37]}}
{"prediction": {"error_location": 0.5670511722564697, "repair_targets": [], "repair_candidates": [0.06708837300539017, 0.04717209190130234, 0.038918089121580124, 0.0010421191109344363, 0.0012302101822569966, 0.00043379305861890316, 0.01460444089025259, 0.038116250187158585, 0.0029844841919839382, 0.0001822359045036137, 0.0015383986756205559, 0.001870236825197935, 0.38487014174461365, 0.00024106971977744251, 0.3981269598007202, 0.0014577327528968453, 2.8465030482038856e-05, 2.6100313334609382e-05, 6.875073449919e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.649514", "n_pass": [278, 36, 27], "n_token": 38, "loss": [0.38806042075157166, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 33, 5, 18, 23, 25, 30, 34, 24, 35, 28, 32, 36]}}
{"prediction": {"error_location": 0.6783713698387146, "repair_targets": [], "repair_candidates": [0.09644188731908798, 0.0032691084779798985, 0.022023532539606094, 0.0010547046549618244, 0.0009704910917207599, 0.00047501828521490097, 0.010644517838954926, 0.01081612054258585, 0.0025968109257519245, 3.307304359623231e-05, 0.0002606984053272754, 0.0006269296864047647, 0.7674666047096252, 0.00027485081227496266, 0.08256343752145767, 0.00032121335971169174, 2.075273368973285e-05, 3.2932672183960676e-05, 0.0001073007588274777], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.720754", "n_pass": [280, 37, 28], "n_token": 37, "loss": [0.34979262948036194, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def export(", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 13, 14, 17, 20, 2, 10, 33, 5, 18, 23, 25, 30, 34, 24, 35, 28, 32, 36]}}
{"prediction": {"error_location": 0.7048342227935791, "repair_targets": [], "repair_candidates": [0.05451750382781029, 0.002039060927927494, 0.02063296176493168, 0.000856213562656194, 0.0009638848132453859, 0.00040725970757193863, 0.011275255121290684, 0.009356535971164703, 0.0019460020121186972, 2.1793979612994008e-05, 0.00019498651090543717, 0.0005693752900697291, 0.7970067858695984, 0.0002548396005295217, 0.09946149587631226, 0.0003840458521153778, 1.4665648450318258e-05, 1.784537744242698e-05, 7.953642489155754e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.789308", "n_pass": [282, 38, 29], "n_token": 36, "loss": [0.4400829076766968, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 12, 13, 16, 19, 1, 9, 32, 4, 17, 22, 24, 29, 33, 23, 34, 27, 31, 35]}}
{"prediction": {"error_location": 0.643983006477356, "repair_targets": [], "repair_candidates": [0.029910536482930183, 0.0050977724604308605, 0.020104344934225082, 0.001253353781066835, 0.0010215876391157508, 0.0005442679394036531, 0.012737870216369629, 0.009341323748230934, 0.002176048466935754, 2.758740447461605e-05, 0.00017306295922026038, 0.0004826129006687552, 0.8234673142433167, 0.0003903464530594647, 0.09273725748062134, 0.0004097613273188472, 1.612609594303649e-05, 2.1120369638083503e-05, 8.769834676058963e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.857656", "n_pass": [284, 39, 30], "n_token": 35, "loss": [0.36452096700668335, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "*", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 11, 12, 15, 18, 1, 8, 31, 3, 16, 21, 23, 28, 32, 22, 33, 26, 30, 34]}}
{"prediction": {"error_location": 0.6945292949676514, "repair_targets": [], "repair_candidates": [0.01983347348868847, 0.03999863564968109, 0.00435186643153429, 0.0006830253405496478, 0.0009191237622871995, 0.00041271146619692445, 0.013223706744611263, 0.03183760493993759, 0.0015083601465448737, 4.7647532483097166e-05, 0.0004103605751879513, 0.0008068465976975858, 0.7404511570930481, 0.0002924803411588073, 0.1447160392999649, 0.0003554515715222806, 1.8800634279614314e-05, 2.811239392030984e-05, 0.00010455885785631835], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.925468", "n_pass": [285, 40, 31], "n_token": 34, "loss": [0.703018307685852, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ")", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 10, 11, 14, 17, 1, 7, 30, 2, 15, 20, 22, 27, 31, 21, 32, 25, 29, 33]}}
{"prediction": {"error_location": 0.49508872628211975, "repair_targets": [], "repair_candidates": [0.0399903878569603, 0.16634885966777802, 0.0009139679023064673, 7.284525781869888e-05, 0.0003982161870226264, 0.00012887704360764474, 0.011750335805118084, 0.010156701318919659, 0.0005366707919165492, 6.332307748380117e-06, 5.995637548039667e-05, 9.489811054663733e-05, 0.7146854996681213, 0.0002479779359418899, 0.054450493305921555, 0.00011120686394860968, 6.375360044330591e-06, 1.0805395504576154e-05, 2.9548440579674207e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:49.992828", "n_pass": [287, 41, 32], "n_token": 33, "loss": [0.8087838292121887, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "=", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 9, 10, 13, 16, 1, 6, 29, 2, 14, 19, 21, 26, 30, 20, 31, 24, 28, 32]}}
{"prediction": {"error_location": 0.4453994035720825, "repair_targets": [], "repair_candidates": [0.03881886601448059, 0.2093547284603119, 0.006461320444941521, 0.000136394432047382, 0.0005595367401838303, 0.000204892159672454, 0.01563853956758976, 0.010904159396886826, 0.0009221197688020766, 7.560538051620824e-06, 5.755191887146793e-05, 0.00010428603127365932, 0.668391227722168, 0.00027870433405041695, 0.04798782244324684, 0.00011439934314694256, 8.678141966811381e-06, 1.4231844943424221e-05, 3.501222454360686e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.127897", "n_pass": [290, 43, 33], "n_token": 32, "loss": [0.7621115446090698, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", ".", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 8, 9, 12, 15, 1, 5, 28, 2, 13, 18, 20, 25, 29, 19, 30, 23, 27, 31]}}
{"prediction": {"error_location": 0.46667996048927307, "repair_targets": [], "repair_candidates": [0.04101235419511795, 0.32329243421554565, 0.0014641215093433857, 0.0012458213604986668, 0.0007465281523764133, 0.0010387152433395386, 0.02251933328807354, 0.012621480971574783, 0.002411607885733247, 1.3912593203713186e-05, 8.815011824481189e-05, 0.00012037815758958459, 0.5473214983940125, 0.00039043198921717703, 0.045415379106998444, 0.00019466321100480855, 1.5554480341961607e-05, 2.399808363406919e-05, 6.364705041050911e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.193868", "n_pass": [292, 44, 34], "n_token": 31, "loss": [0.6289348602294922, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", "#NEWLINE#", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 7, 8, 11, 14, 1, 5, 27, 2, 12, 17, 19, 24, 28, 18, 29, 22, 26, 30]}}
{"prediction": {"error_location": 0.5331593751907349, "repair_targets": [], "repair_candidates": [0.008490702137351036, 0.4025910496711731, 0.001978553831577301, 0.0008087802561931312, 0.0006368918693624437, 0.0003410248027648777, 0.03181936964392662, 0.014532462693750858, 0.0025489539839327335, 3.566580198821612e-05, 0.00013888132525607944, 0.00022519500635098666, 0.48672911524772644, 0.0004467326798476279, 0.04825923591852188, 0.00026273535331711173, 1.6146268535521813e-05, 3.8763959310017526e-05, 9.974105341825634e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.259365", "n_pass": [293, 45, 35], "n_token": 30, "loss": [0.9106771349906921, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", "parser", "parser", ".", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 7, 10, 13, 1, 5, 26, 2, 11, 16, 18, 23, 27, 17, 28, 21, 25, 29]}}
{"prediction": {"error_location": 0.4022517502307892, "repair_targets": [], "repair_candidates": [0.01805916614830494, 0.23558948934078217, 0.00029472095775417984, 0.0002495974476914853, 9.038453572429717e-05, 8.895788778318092e-05, 0.02815115638077259, 0.010776178911328316, 0.0012974606361240149, 9.030522051034495e-06, 4.7283807361964136e-05, 8.974703087005764e-05, 0.6679058074951172, 0.0002567348419688642, 0.036903299391269684, 0.00011145385360578075, 1.0549537364568096e-05, 2.062365456367843e-05, 4.838719905819744e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.324841", "n_pass": [296, 46, 36], "n_token": 29, "loss": [0.9778976440429688, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", "parser", "parser", "#NEWLINE#", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 7, 9, 12, 1, 5, 25, 2, 10, 15, 17, 22, 26, 16, 27, 20, 24, 28]}}
{"prediction": {"error_location": 0.376101016998291, "repair_targets": [], "repair_candidates": [0.014827677048742771, 0.34413161873817444, 0.00017184791795443743, 0.00011628354695858434, 0.0001058905036188662, 9.693355241324753e-05, 0.013226059265434742, 0.0027973446995019913, 0.0011858666548505425, 2.5267438104492612e-05, 8.165348845068365e-05, 0.00012201925710542127, 0.5599570274353027, 0.00014784210361540318, 0.0628184899687767, 0.00010450723493704572, 1.0173949704039842e-05, 2.1073698007967323e-05, 5.236144352238625e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.389502", "n_pass": [297, 47, 37], "n_token": 28, "loss": [0.7302749156951904, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", "parser", "parser", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "path", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 7, 8, 11, 1, 5, 24, 2, 9, 14, 16, 21, 25, 15, 26, 19, 23, 27]}}
{"prediction": {"error_location": 0.48177653551101685, "repair_targets": [], "repair_candidates": [0.016974668949842453, 0.10840771347284317, 0.00027516644331626594, 9.076579590328038e-05, 8.196206908905879e-05, 0.00035224849125370383, 1.4592387742595747e-05, 0.00018098058353643864, 0.006077827885746956, 3.701224704855122e-05, 8.170631917892024e-05, 0.00012193028669571504, 0.824755847454071, 0.0002551016223151237, 0.042095549404621124, 0.00011884186824318022, 9.12155974219786e-06, 1.762342799338512e-05, 5.14003804710228e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.710042", "n_pass": [308, 52, 38], "n_token": 27, "loss": [0.8875558972358704, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", ":", "parser", "self", "parser", "parser", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 7, 8, 11, 1, 5, 23, 2, 9, 14, 16, 20, 24, 15, 25, 18, 22, 26]}}
{"prediction": {"error_location": 0.41166064143180847, "repair_targets": [], "repair_candidates": [0.029772737994790077, 0.1230204626917839, 0.00034466705983504653, 0.00010449920955579728, 8.572301885578781e-05, 0.00033648384851403534, 1.2325274838076439e-05, 0.000150189662235789, 0.0063051749020814896, 2.3408518245560117e-05, 5.252706614555791e-05, 4.968597204424441e-05, 0.791084885597229, 0.0001488423440605402, 0.04822313040494919, 0.00016299422713927925, 1.4380642824107781e-05, 2.5237250156351365e-05, 8.273578714579344e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:50.904161", "n_pass": [321, 55, 39], "n_token": 26, "loss": [0.5196670293807983, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", "parser", "self", "parser", "parser", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", ".", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 5, 6, 7, 10, 1, 4, 22, 2, 8, 13, 15, 19, 23, 14, 24, 17, 21, 25]}}
{"prediction": {"error_location": 0.5947185754776001, "repair_targets": [], "repair_candidates": [0.03158194199204445, 0.07232622802257538, 0.0014520658878609538, 0.0012206881074234843, 0.0022897750604897738, 0.007602116093039513, 0.00016788794891908765, 0.00022144391550682485, 0.015749122947454453, 0.00011857345816679299, 0.00022949661070015281, 0.0001510526635684073, 0.6552815437316895, 0.00032254518009722233, 0.21002821624279022, 0.0007480520289391279, 6.850225327070802e-05, 0.0001183015774586238, 0.0003224215470254421], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:34:51.156058", "n_pass": [335, 59, 40], "n_token": 25, "loss": [0.7836979627609253, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "args", "parser", "self", "parser", "parser", "parser", "args", "=", "parser", ".", "*", "args", "current_path", "args", "keep_source", "=", "args", ".", "keep_source", "self", "args", "current_path", "keep_source"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 5, 6, 7, 10, 1, 4, 21, 2, 8, 13, 15, 18, 22, 14, 23, 16, 20, 24]}}
{"prediction": {"error_location": 0.45671403408050537, "repair_targets": [], "repair_candidates": [0.09127874672412872, 0.35792750120162964, 0.008072888478636742, 0.005465140100568533, 0.009110287763178349, 0.036896929144859314, 0.0015268679708242416, 0.0016625744756311178, 0.07813037186861038, 0.0003566884552128613, 0.00021668379486072809, 0.001205343403853476, 0.02578870952129364, 0.0035773140843957663, 0.3763662576675415, 0.0010833900887519121, 0.00012280451483093202, 0.0003494240518193692, 0.0008620734442956746], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'args', 'parser', 'self', 'parser', 'parser', 'parser', 'args', '=', 'parser', '.', '*', 'args', 'current_path', 'args', 'keep_source', '=', 'args', '.', 'keep_source', 'self', 'args', 'current_path', 'keep_source']
