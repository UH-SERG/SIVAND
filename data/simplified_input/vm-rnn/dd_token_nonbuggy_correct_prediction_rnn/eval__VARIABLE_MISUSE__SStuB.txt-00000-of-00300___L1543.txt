
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_windll_getnode", ",", "_netbios_getnode", ",", "_ipconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"], "error_location": [0], "repair_targets": [], "repair_candidates": [38, 53, 66, 9, 13, 21, 79, 95, 103, 63, 81], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "amrdraz/kodr/app/brython/www/src/Lib/uuid.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1543, "results": {"model": "rnn", "prob": {"loc": [[0.4615907073020935, 3.3917520340764895e-05, 7.274188362771383e-08, 4.5675296433955737e-08, 2.4579645696576335e-07, 9.202724982060317e-08, 3.3596262483115424e-07, 8.783726457295415e-07, 1.9643249515866046e-07, 2.265790271849255e-06, 3.67087272934441e-06, 1.228399213459852e-07, 7.601130391776678e-07, 0.2100972682237625, 1.6717392554710386e-06, 3.055186198253068e-06, 1.6703688743291423e-06, 7.440063427566201e-07, 3.6616438592318445e-07, 4.3457003329194777e-08, 1.0414830740046455e-06, 0.024058395996689796, 3.54454243733926e-07, 3.6502774491964374e-07, 4.567701523683354e-07, 4.8135369468127465e-08, 7.821421377229854e-07, 1.160865803484512e-08, 6.806040175888484e-08, 6.49030480417423e-05, 5.5832547474210514e-09, 4.1316545207337185e-07, 1.2884243005828466e-06, 8.36276012705639e-05, 6.635763725171273e-07, 3.4395236525597284e-07, 4.4028234924553544e-07, 1.0601660704878668e-07, 1.0924167099801707e-06, 1.9587317012792482e-07, 3.847697982450882e-08, 0.015783527866005898, 1.4704474970983483e-08, 0.008072094060480595, 1.6389108736802882e-08, 0.02542017586529255, 1.276093684055013e-07, 3.634351060100016e-07, 1.3514057172869798e-05, 2.449173166496621e-07, 3.201319032086758e-06, 9.77451918515726e-07, 3.711251039817398e-08, 2.1648331482992944e-07, 1.2645304536818003e-07, 4.87085060285608e-07, 0.015840908512473106, 8.051841859924025e-07, 0.16614437103271484, 4.0369954490415694e-07, 2.8917149847984547e-06, 4.603640627465211e-05, 1.7447804623316188e-07, 8.377803169423714e-06, 5.660137247787134e-08, 1.568371408211533e-05, 0.005212794989347458, 3.4245007555000484e-05, 1.120136587928755e-07, 0.032133232802152634, 4.365241181858437e-07, 2.523525211017841e-07, 8.616093509772327e-07, 1.8670867802939028e-06, 4.1104473780251283e-07, 3.1366958864964545e-05, 5.00969633776549e-07, 1.6341539321729215e-06, 4.407908704706642e-08, 2.0448452175969578e-07, 3.707635798377851e-08, 8.597210580774117e-06, 1.7008717634325876e-07, 5.475234138430096e-05, 9.205074320561835e-07, 3.3921512567758327e-06, 2.1638548787450418e-05, 8.762383458815748e-07, 1.8454495886999212e-07, 1.0489269897107079e-08, 2.6184967282461002e-05, 1.4251578477342264e-06, 9.114692147704773e-06, 1.4355019573031313e-07, 7.507790655836288e-07, 0.01249434519559145, 5.640240487991832e-07, 2.104050054185791e-06, 5.093030495118001e-07, 2.7910510880246875e-07, 3.034017765912722e-07, 2.266410525919582e-08, 1.8544553768151673e-06, 0.022646306082606316]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4373173713684082, 0.0, 0.0, 0.0, 0.04867880418896675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006831806618720293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07180837541818619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13745757937431335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2690381407737732, 0.0, 0.0, 0.0014172710943967104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016893329098820686, 0.0, 0.0008396119810640812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008351689204573631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0013660128461197019]], "target": [0.0]}, "loss": [0.7730767726898193, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 13:55:11.018347", "n_pass": [1, 1, 1], "n_token": 104, "loss": [0.7730767726898193, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_windll_getnode", ",", "_netbios_getnode", ",", "_ipconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 53, 66, 9, 13, 21, 79, 95, 103, 63, 81]}}
{"prediction": {"error_location": 0.4615907073020935, "repair_targets": [], "repair_candidates": [0.4373173713684082, 0.04867880418896675, 0.006831806618720293, 0.07180837541818619, 0.13745757937431335, 0.2690381407737732, 0.0014172710943967104, 0.016893329098820686, 0.0008396119810640812, 0.008351689204573631, 0.0013660128461197019], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:11.114427", "n_pass": [23, 2, 2], "n_token": 91, "loss": [1.0650660991668701, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "import", "sys", "#NEWLINE#", "if", "(", "sys", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [38, 40, 53, 9, 13, 21, 66, 82, 90, 50, 68]}}
{"prediction": {"error_location": 0.34470510482788086, "repair_targets": [], "repair_candidates": [0.6999049186706543, 0.04267222806811333, 0.005955650936812162, 0.02156667970120907, 0.012594605796039104, 0.18952162563800812, 0.0032115597277879715, 0.01352828461676836, 0.000931771588511765, 0.008725975640118122, 0.0013866762164980173], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:11.482018", "n_pass": [56, 6, 3], "n_token": 85, "loss": [0.8294260501861572, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", ".", "platform", "==", "'win32'", ")", ":", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [32, 34, 47, 9, 13, 21, 60, 76, 84, 44, 62]}}
{"prediction": {"error_location": 0.43629971146583557, "repair_targets": [], "repair_candidates": [0.6594502329826355, 0.0312473364174366, 0.023741548880934715, 0.02900795079767704, 0.017632944509387016, 0.20650669932365417, 0.0031390327494591475, 0.019652219489216805, 0.0010260269045829773, 0.007184005808085203, 0.0014118826948106289], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:11.570667", "n_pass": [57, 7, 4], "n_token": 79, "loss": [1.0917401313781738, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 28, 41, 9, 13, 21, 54, 70, 78, 38, 56]}}
{"prediction": {"error_location": 0.33563199639320374, "repair_targets": [], "repair_candidates": [0.5443816781044006, 0.03778389096260071, 0.004076849203556776, 0.06622464209794998, 0.0888262614607811, 0.22450174391269684, 0.0023107011802494526, 0.020806731656193733, 0.0011230319505557418, 0.008581866510212421, 0.0013825672212988138], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:11.827514", "n_pass": [63, 10, 5], "n_token": 72, "loss": [1.1562950611114502, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", ":", "#NEWLINE#", "#INDENT#", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 28, 41, 9, 13, 21, 54, 63, 71, 38, 56]}}
{"prediction": {"error_location": 0.3146497905254364, "repair_targets": [], "repair_candidates": [0.35521602630615234, 0.01838589459657669, 0.0028366718906909227, 0.039951398968696594, 0.05274612829089165, 0.5169665217399597, 0.0032858867198228836, 0.005075324792414904, 0.00047474855091422796, 0.003993660677224398, 0.001067734556272626], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:12.231709", "n_pass": [102, 14, 6], "n_token": 69, "loss": [1.0807831287384033, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "[", "_unixdll_getnode", ",", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [23, 25, 38, 6, 10, 18, 51, 60, 68, 35, 53]}}
{"prediction": {"error_location": 0.33932971954345703, "repair_targets": [], "repair_candidates": [0.42366740107536316, 0.016244996339082718, 0.0020982353016734123, 0.037651412189006805, 0.052154649049043655, 0.4586802124977112, 0.002329639857634902, 0.0034926908556371927, 0.0003530498070176691, 0.0025571344885975122, 0.000770531827583909], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:12.559613", "n_pass": [111, 18, 7], "n_token": 66, "loss": [1.0654151439666748, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [23, 25, 35, 6, 10, 18, 48, 57, 65, 32, 50]}}
{"prediction": {"error_location": 0.34458479285240173, "repair_targets": [], "repair_candidates": [0.25889188051223755, 0.00801415741443634, 0.001009940984658897, 0.0073629096150398254, 0.016619978472590446, 0.7020738124847412, 0.002012514043599367, 0.0019259764812886715, 0.00023382848303299397, 0.001440402353182435, 0.00041459620115347207], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:12.882076", "n_pass": [117, 22, 8], "n_token": 62, "loss": [0.9878793954849243, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "'Get the hardware address as a 48-bit positive integer.\\n\\n    The first time this runs, it may launch a separate program, which could\\n    be quite slow.  If all attempts to obtain the hardware address fail, we\\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\\n    in RFC 4122.\\n    '", "#NEWLINE#", "global", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [23, 25, 35, 6, 10, 18, 44, 53, 61, 32, 46]}}
{"prediction": {"error_location": 0.37236547470092773, "repair_targets": [], "repair_candidates": [0.3045348525047302, 0.010394904762506485, 0.0012024934403598309, 0.006888221483677626, 0.016521479934453964, 0.6516613960266113, 0.0012647949624806643, 0.005291599780321121, 0.00025597497005946934, 0.0014696973375976086, 0.0005145747563801706], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.037884", "n_pass": [124, 24, 9], "n_token": 59, "loss": [0.5867676734924316, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [20, 22, 32, 3, 7, 15, 41, 50, 58, 29, 43]}}
{"prediction": {"error_location": 0.5561218857765198, "repair_targets": [], "repair_candidates": [0.029606923460960388, 0.016197890043258667, 0.0003079351154156029, 0.006258768029510975, 0.02013249136507511, 0.9189989566802979, 0.0008834205218590796, 0.006600540596991777, 0.00011892797192558646, 0.0005365994875319302, 0.00035760540049523115], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.116842", "n_pass": [127, 25, 10], "n_token": 56, "loss": [0.6504035592079163, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "#NEWLINE#", "#INDENT#", "return", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [17, 19, 29, 3, 7, 12, 38, 47, 55, 26, 40]}}
{"prediction": {"error_location": 0.521835207939148, "repair_targets": [], "repair_candidates": [0.05681876838207245, 0.01914500817656517, 0.0014235435519367456, 0.005525323562324047, 0.02308914065361023, 0.8850561380386353, 0.0011114325607195497, 0.006684411782771349, 0.0001315097470069304, 0.0006555432919412851, 0.00035917622153647244], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.192238", "n_pass": [128, 26, 11], "n_token": 53, "loss": [0.8260942101478577, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "]", ")", ":", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 16, 26, 3, 7, 9, 35, 44, 52, 23, 37]}}
{"prediction": {"error_location": 0.43775567412376404, "repair_targets": [], "repair_candidates": [0.08075880259275436, 0.016987331211566925, 0.002943354891613126, 0.0044819083996117115, 0.009139618836343288, 0.8730122447013855, 0.0052679553627967834, 0.005774142220616341, 0.00019061885541304946, 0.0009733045008033514, 0.00047072931192815304], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.412739", "n_pass": [136, 29, 12], "n_token": 50, "loss": [0.9435152411460876, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 16, 26, 3, 7, 9, 32, 41, 49, 23, 34]}}
{"prediction": {"error_location": 0.38925716280937195, "repair_targets": [], "repair_candidates": [0.12968455255031586, 0.020173674449324608, 0.0041948771104216576, 0.004396198317408562, 0.012483554892241955, 0.8228573799133301, 0.0006456208066083491, 0.0031504081562161446, 0.00042921287240460515, 0.001301388256251812, 0.0006830433267168701], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.484869", "n_pass": [140, 30, 13], "n_token": 46, "loss": [1.067134141921997, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "#NEWLINE#", "#INDENT#", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 16, 26, 3, 7, 9, 32, 41, 45, 23, 34]}}
{"prediction": {"error_location": 0.3439929485321045, "repair_targets": [], "repair_candidates": [0.13337558507919312, 0.019680403172969818, 0.004180954769253731, 0.004734905436635017, 0.016464965417981148, 0.8154010772705078, 0.000579706858843565, 0.0027327167335897684, 0.0005641301977448165, 0.001843957812525332, 0.0004416244337335229], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.698837", "n_pass": [183, 33, 14], "n_token": 44, "loss": [1.0505727529525757, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def getnode(", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 16, 26, 3, 7, 9, 32, 41, 43, 23, 34]}}
{"prediction": {"error_location": 0.34973737597465515, "repair_targets": [], "repair_candidates": [0.10474056005477905, 0.019188670441508293, 0.0038932643365114927, 0.004225054755806923, 0.015094687230885029, 0.8488277196884155, 0.00044759793672710657, 0.0015979022718966007, 0.00028073450084775686, 0.0015265460824593902, 0.00017735226720105857], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.769425", "n_pass": [185, 34, 15], "n_token": 43, "loss": [0.8181045651435852, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "#NEWLINE#", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [13, 15, 25, 2, 6, 8, 31, 40, 42, 22, 33]}}
{"prediction": {"error_location": 0.4412672519683838, "repair_targets": [], "repair_candidates": [0.0883912518620491, 0.018581541255116463, 0.003138417610898614, 0.0058898841962218285, 0.019060172140598297, 0.8628184795379639, 0.0003621255746111274, 0.0008004105766303837, 0.00014806953549850732, 0.000690918299369514, 0.0001186271256301552], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.908742", "n_pass": [188, 36, 16], "n_token": 42, "loss": [0.8989822268486023, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "if", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [12, 14, 24, 2, 5, 7, 30, 39, 41, 21, 32]}}
{"prediction": {"error_location": 0.4069836139678955, "repair_targets": [], "repair_candidates": [0.047472674399614334, 0.07078148424625397, 0.010875018313527107, 0.005999667104333639, 0.022035930305719376, 0.8402986526489258, 0.00039777415804564953, 0.0011153467930853367, 0.00020509293244685978, 0.00068189314333722, 0.00013651674089487642], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:13.980146", "n_pass": [189, 37, 17], "n_token": 41, "loss": [0.5033454895019531, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "(", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 13, 23, 2, 4, 6, 29, 38, 40, 20, 31]}}
{"prediction": {"error_location": 0.6045048832893372, "repair_targets": [], "repair_candidates": [0.0011577729601413012, 0.04130091890692711, 0.011125115677714348, 0.01053222268819809, 0.07511494308710098, 0.859201192855835, 0.000186819102964364, 0.0008168900385499001, 0.00011882658873219043, 0.0003635729372035712, 8.168171916622669e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.049014", "n_pass": [190, 38, 18], "n_token": 40, "loss": [0.5280389785766602, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [10, 12, 22, 2, 3, 5, 28, 37, 39, 19, 30]}}
{"prediction": {"error_location": 0.5897603631019592, "repair_targets": [], "repair_candidates": [0.002865792252123356, 0.010022683069109917, 0.010025226511061192, 0.01678342930972576, 0.07473872601985931, 0.8840838074684143, 0.00029344126232899725, 0.0006927126087248325, 0.00010729064524639398, 0.00031592376763001084, 7.099734648363665e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.185498", "n_pass": [194, 40, 19], "n_token": 38, "loss": [0.417035847902298, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "#NEWLINE#", "#INDENT#", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 10, 20, 2, 3, 5, 26, 35, 37, 17, 28]}}
{"prediction": {"error_location": 0.6589972972869873, "repair_targets": [], "repair_candidates": [0.0016792311798781157, 0.008232370018959045, 0.0054173944517970085, 0.012930034659802914, 0.07249118387699127, 0.8983221650123596, 0.0001328192447545007, 0.00048203341430053115, 6.932280666660517e-05, 0.00019115830946248025, 5.230649549048394e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.252014", "n_pass": [195, 41, 20], "n_token": 36, "loss": [0.7572619915008545, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "_ifconfig_getnode", "]", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 18, 2, 3, 5, 24, 33, 35, 15, 26]}}
{"prediction": {"error_location": 0.46894872188568115, "repair_targets": [], "repair_candidates": [0.0006831380887888372, 0.002291998825967312, 0.00022075521701481193, 0.0010326268384233117, 0.29154881834983826, 0.7036550045013428, 4.874447040492669e-05, 0.0003569487016648054, 3.563498830772005e-05, 9.470392251387239e-05, 3.1603201932739466e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.317626", "n_pass": [198, 42, 21], "n_token": 34, "loss": [0.6654775738716125, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "#NEWLINE#", "#UNINDENT#", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 16, 2, 3, 5, 22, 31, 33, 13, 24]}}
{"prediction": {"error_location": 0.5140279531478882, "repair_targets": [], "repair_candidates": [0.00044387465459294617, 0.0018642839277163148, 0.00037590693682432175, 0.0024021852295845747, 0.09340543299913406, 0.9009566307067871, 0.00011447393626440316, 0.0003161332570016384, 3.424448732403107e-05, 6.249259604373947e-05, 2.4389508325839415e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.384140", "n_pass": [199, 43, 22], "n_token": 32, "loss": [0.4501025974750519, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 14, 2, 3, 5, 20, 29, 31, 11, 22]}}
{"prediction": {"error_location": 0.6375627517700195, "repair_targets": [], "repair_candidates": [0.000991161330603063, 0.007283452898263931, 0.0014494858914986253, 0.00869140587747097, 0.9411153197288513, 0.039046235382556915, 0.0009110703249461949, 0.00028924018261022866, 6.347446469590068e-05, 0.00010734279931057245, 5.173471072339453e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.637530", "n_pass": [207, 47, 23], "n_token": 30, "loss": [0.18400956690311432, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "#UNINDENT#", "if", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 14, 2, 3, 5, 20, 27, 29, 11, 22]}}
{"prediction": {"error_location": 0.8319278359413147, "repair_targets": [], "repair_candidates": [0.00383636518381536, 0.03006746433675289, 0.0043005384504795074, 0.011484695598483086, 0.8130358457565308, 0.12689881026744843, 0.0030545187182724476, 0.006798531394451857, 8.497665839968249e-05, 0.00027267029508948326, 0.0001655684900470078], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.700488", "n_pass": [208, 48, 24], "n_token": 28, "loss": [0.5670406818389893, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", ")", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 8, 14, 2, 3, 5, 20, 25, 27, 11, 22]}}
{"prediction": {"error_location": 0.5672014951705933, "repair_targets": [], "repair_candidates": [0.0027758211363106966, 0.017940286546945572, 0.003116572042927146, 0.008969506248831749, 0.8527786731719971, 0.10811208188533783, 0.004142923280596733, 0.0017519020475447178, 6.172945722937584e-05, 0.00025244569405913353, 9.81032062554732e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.764492", "n_pass": [212, 49, 25], "n_token": 27, "loss": [0.550845205783844, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "[", "_random_getnode", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 4, 19, 24, 26, 10, 21]}}
{"prediction": {"error_location": 0.5764623880386353, "repair_targets": [], "repair_candidates": [0.03624510392546654, 0.053852543234825134, 0.009086789563298225, 0.05112820491194725, 0.7336283922195435, 0.10305013507604599, 0.005695075262337923, 0.0063871718011796474, 0.0001295262627536431, 0.00047374103451147676, 0.0003233404422644526], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:14.948296", "n_pass": [222, 52, 26], "n_token": 25, "loss": [0.6182243824005127, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "#NEWLINE#", "#INDENT#", "_node", "=", "getter", "(", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 4, 17, 22, 24, 10, 19]}}
{"prediction": {"error_location": 0.5389004945755005, "repair_targets": [], "repair_candidates": [0.006715676281601191, 0.014997174963355064, 0.0010809683008119464, 0.006004675757139921, 0.9514274001121521, 0.011463923379778862, 0.00016722451255191118, 0.008047126233577728, 2.0525747459032573e-05, 3.170860145473853e-05, 4.368827649159357e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.008641", "n_pass": [223, 53, 27], "n_token": 23, "loss": [0.48468804359436035, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "(", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 4, 15, 20, 22, 10, 17]}}
{"prediction": {"error_location": 0.615889310836792, "repair_targets": [], "repair_candidates": [0.01985531486570835, 0.03251606225967407, 0.0032024686224758625, 0.020948359742760658, 0.8828974366188049, 0.03040372021496296, 0.0012000104179605842, 0.008662947453558445, 6.532876432174817e-05, 0.00017022673273459077, 7.816876313881949e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.249267", "n_pass": [258, 57, 28], "n_token": 22, "loss": [0.4066392779350281, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "(", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 4, 15, 19, 21, 10, 17]}}
{"prediction": {"error_location": 0.6658843755722046, "repair_targets": [], "repair_candidates": [0.055071230977773666, 0.11774672567844391, 0.008465969935059547, 0.029410837218165398, 0.6437733769416809, 0.07279958575963974, 0.0028529411647468805, 0.0687931701540947, 0.0002604010805953294, 0.0005527923349291086, 0.00027289261925034225], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.308708", "n_pass": [259, 58, 29], "n_token": 21, "loss": [0.1108839362859726, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "is not", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 7, 13, 1, 2, 4, 15, 18, 20, 10, 17]}}
{"prediction": {"error_location": 0.8950425982475281, "repair_targets": [], "repair_candidates": [0.054483961313962936, 0.287277489900589, 0.007409336045384407, 0.008394612930715084, 0.043948620557785034, 0.015689667314291, 0.0009801621781662107, 0.5802946090698242, 0.00014105858281254768, 0.0007330361404456198, 0.0006475205882452428], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.425854", "n_pass": [266, 60, 30], "n_token": 20, "loss": [0.48349088430404663, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "=", "for", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 12, 1, 2, 3, 14, 17, 19, 9, 16]}}
{"prediction": {"error_location": 0.616627037525177, "repair_targets": [], "repair_candidates": [0.021453339606523514, 0.012830683030188084, 0.03811096400022507, 0.04099878668785095, 0.5160263180732727, 0.12659882009029388, 0.0036341934464871883, 0.23827989399433136, 0.0002523602161090821, 0.0012100475141778588, 0.000604643311817199], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.544180", "n_pass": [271, 62, 31], "n_token": 19, "loss": [0.2802329361438751, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "for", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 11, 1, 2, 3, 13, 16, 18, 8, 15]}}
{"prediction": {"error_location": 0.7556077837944031, "repair_targets": [], "repair_candidates": [0.05057526007294655, 0.058489639312028885, 0.10760460048913956, 0.02565220184624195, 0.04019267484545708, 0.10805041342973709, 0.002392084803432226, 0.6037805676460266, 0.00037876315764151514, 0.002092083916068077, 0.0007916867034509778], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.601627", "n_pass": [272, 63, 32], "n_token": 18, "loss": [0.38602158427238464, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "getter", "in", "(", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 10, 1, 2, 3, 12, 15, 17, 7, 14]}}
{"prediction": {"error_location": 0.6797558665275574, "repair_targets": [], "repair_candidates": [0.02890782803297043, 0.013702038675546646, 0.029228925704956055, 0.024787668138742447, 0.11031503975391388, 0.03814557194709778, 0.020222926512360573, 0.7260084748268127, 0.001330884755589068, 0.005838770419359207, 0.0015119746094569564], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.658799", "n_pass": [274, 64, 33], "n_token": 17, "loss": [0.5667880773544312, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "getter", "(", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 9, 1, 2, 3, 11, 14, 16, 7, 13]}}
{"prediction": {"error_location": 0.5673447847366333, "repair_targets": [], "repair_candidates": [0.06801881641149521, 0.059286005795001984, 0.07574106752872467, 0.02125820703804493, 0.003450531978160143, 0.01528710126876831, 0.010949366725981236, 0.7381398677825928, 0.0012699494836851954, 0.005162042565643787, 0.0014369813725352287], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.715873", "n_pass": [275, 65, 34], "n_token": 16, "loss": [0.5937085151672363, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "getter", "getters", "+", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 8, 1, 2, 3, 10, 13, 15, 7, 12]}}
{"prediction": {"error_location": 0.5522753596305847, "repair_targets": [], "repair_candidates": [7.365928468061611e-05, 2.141468030458782e-05, 0.0001133214682340622, 8.508326573064551e-05, 0.00011899592936970294, 0.0005024006241001189, 0.0014037276851013303, 0.9974127411842346, 4.552134487312287e-05, 0.00018217517936136574, 4.1069019061978906e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.772079", "n_pass": [277, 66, 35], "n_token": 15, "loss": [0.26797640323638916, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "#INDENT#", "getters", "getter", "getters", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 6, 8, 1, 2, 3, 9, 12, 14, 7, 11]}}
{"prediction": {"error_location": 0.7649258971214294, "repair_targets": [], "repair_candidates": [4.747383718495257e-05, 1.9288052499177866e-05, 0.0001292210363317281, 6.289873272180557e-05, 0.0001613849599380046, 0.0006218182970769703, 0.41893279552459717, 0.5799551606178284, 4.597499355440959e-06, 2.6727218937594444e-05, 3.865526741719805e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:15.941032", "n_pass": [289, 69, 36], "n_token": 14, "loss": [0.2389574646949768, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "_node", "_node", "_node", "getters", "getters", "getter", "getters", "_node", "=", "getter", "_node", "return", "_node"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 5, 7, 1, 2, 3, 8, 11, 13, 6, 10]}}
{"prediction": {"error_location": 0.7874484658241272, "repair_targets": [], "repair_candidates": [4.3578504119068384e-05, 2.741989737842232e-05, 0.00042245991062372923, 4.4802007323596627e-05, 8.317971514770761e-05, 0.0003425534814596176, 0.3551405370235443, 0.643790066242218, 6.944495908101089e-06, 5.722940113628283e-05, 4.122429163544439e-05], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', '_node', '_node', '_node', 'getters', 'getters', 'getter', 'getters', '_node', '=', 'getter', '_node', 'return', '_node']
