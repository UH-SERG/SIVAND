
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "/", "Catalan", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "symbols", "(", "'n'", ",", "integer", "=", "True", ")", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [94, 148, 156, 6, 21, 26, 37, 52, 58, 72, 118, 122, 127, 134, 13, 35, 44, 70, 110, 144, 87, 146, 154], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "sympy/sympy/sympy/printing/tests/test_ccode.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1241, "results": {"model": "rnn", "prob": {"loc": [[0.7114250659942627, 1.5449771808562218e-06, 3.4584599006848293e-07, 1.415196919651862e-07, 1.4129402643447975e-06, 4.616240971699881e-07, 1.4876751208703354e-07, 1.2139751426332168e-08, 3.121398322036839e-06, 6.275767105989871e-08, 9.962407602870371e-06, 6.91537636043904e-08, 2.2393686549548875e-07, 8.356748253390833e-07, 4.8727912371759885e-08, 4.848071966989664e-06, 5.150317150537376e-08, 6.878352905914653e-06, 4.549793874986108e-09, 2.6955254725180566e-05, 3.5326486624853715e-08, 0.0014097087550908327, 1.990685394304137e-09, 3.916729269803909e-07, 0.0008272598497569561, 2.722400722632301e-07, 0.005550891626626253, 7.217043673790613e-08, 1.8122268841125333e-07, 6.793648310576827e-08, 4.065217922288866e-07, 7.084205577712055e-08, 1.9474573775823956e-07, 4.23486699219211e-06, 3.1422526802771245e-09, 9.021390724228695e-06, 1.0610420275725119e-07, 0.009549262002110481, 1.4670432335606165e-07, 4.866951144322229e-07, 2.763263466931676e-07, 2.0484716856117302e-07, 1.472271122793245e-07, 8.58864694919248e-08, 3.432927258018026e-07, 1.8029733439561824e-07, 2.8173785722174216e-06, 8.675313978301347e-08, 2.6475519916857593e-05, 1.25979688903044e-08, 5.547040927922353e-06, 5.800804814271032e-08, 0.004209124483168125, 4.578093903973013e-09, 9.427747471590919e-08, 8.504538300257991e-07, 0.0019982580561190844, 1.1732490747817792e-06, 0.0069194575771689415, 1.136078253693995e-07, 1.7913872341068782e-07, 0.00042376629426144063, 6.405367791728622e-09, 1.6764452936968155e-07, 1.7916538297413354e-07, 4.937149356010195e-07, 3.701251927168414e-08, 7.823562100384152e-07, 5.336195954441791e-06, 6.3631016011811425e-09, 1.3431274965114426e-05, 1.6033530414460984e-07, 0.024773553013801575, 8.427690545431687e-07, 1.5623751323801116e-06, 2.0725198623949836e-07, 2.500255504855886e-07, 6.710438901791349e-05, 1.1902002228225683e-07, 5.977954515401507e-06, 3.5241871643165723e-09, 2.6462592117582062e-09, 2.247031716251513e-07, 9.989636964746751e-06, 1.195549259591644e-07, 1.4611147491905285e-07, 4.433522917679511e-07, 8.702924958470248e-08, 2.1260514415644138e-07, 8.639589395897929e-06, 5.261453495108981e-08, 3.116141306236386e-05, 1.5470081393686996e-07, 4.3066547732451e-06, 3.767277974020544e-07, 1.261694819731929e-07, 1.0124205118700047e-07, 1.1752478989990323e-08, 0.0002296028396813199, 8.35352551575852e-08, 2.99802394465587e-07, 1.5473298731194518e-07, 4.702803835243685e-06, 1.1659953003118062e-08, 2.6428483579366002e-06, 1.920158432255903e-08, 2.7369839017410413e-07, 1.5836913291877863e-07, 5.8220312126877616e-08, 1.463226055875566e-07, 7.60159537094296e-07, 1.8004028845552966e-07, 2.824308239723905e-06, 8.703440101953674e-08, 4.2423635022714734e-05, 1.2115185299421682e-08, 3.8433049667219166e-06, 3.0878556600555385e-08, 0.00550333596765995, 1.7582655331693786e-09, 1.306466401729267e-07, 3.6406706840352854e-06, 0.0073376805521547794, 1.9424629016384642e-08, 7.827129593351856e-07, 0.008344143629074097, 4.967242830389296e-07, 0.028709344565868378, 1.760401318051663e-07, 1.229031568072969e-06, 1.8547073921126866e-07, 4.7270910386032483e-07, 0.00581376813352108, 4.768402845911623e-07, 0.024084016680717468, 9.365253106352611e-08, 2.5778911094676005e-07, 3.5901092587664607e-07, 8.369075032987894e-08, 5.530241651285905e-07, 5.173325945406759e-08, 1.7873165916171274e-06, 6.281797595875105e-06, 3.1956162160895474e-09, 6.369826223817654e-06, 8.119370420445193e-08, 0.14046797156333923, 1.1163039914663386e-07, 0.0023473051842302084, 4.117472599318717e-06, 1.1663190662147827e-06, 4.4266536747272767e-07, 8.358346349268686e-06, 1.5036569038784364e-06, 0.007375474087893963, 2.734839199547423e-07, 0.002315213903784752, 1.2572248806463904e-06, 7.313730066016433e-07, 1.7493242921773344e-05, 6.992560770413547e-07, 3.1831564228923526e-06]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.055144988000392914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11924224346876144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004629954230040312, 0.0, 0.0, 0.0, 0.0, 0.000907540787011385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00417161313816905, 0.0, 0.0005769087001681328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11970696598291397, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0048275538720190525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003912743646651506, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00884112250059843, 0.0, 0.0040635219775140285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03419346734881401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08040204644203186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4998875558376312, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0031795515678822994, 0.0, 0.0, 0.0, 0.002652152208611369, 0.0, 0.0, 0.0, 0.0, 0.001982660498470068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001497805118560791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00673420587554574, 0.0, 0.022075915709137917, 0.0, 0.011600106954574585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007028552237898111, 0.0, 0.002740822033956647, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.3404853343963623, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 13:45:34.904088", "n_pass": [1, 1, 1], "n_token": 162, "loss": [0.3404853343963623, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "/", "Catalan", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "symbols", "(", "'n'", ",", "integer", "=", "True", ")", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [94, 148, 156, 6, 21, 26, 37, 52, 58, 72, 118, 122, 127, 134, 13, 35, 44, 70, 110, 144, 87, 146, 154]}}
{"prediction": {"error_location": 0.7114250659942627, "repair_targets": [], "repair_candidates": [0.055144988000392914, 0.11924224346876144, 0.004629954230040312, 0.000907540787011385, 0.00417161313816905, 0.0005769087001681328, 0.11970696598291397, 0.0048275538720190525, 0.003912743646651506, 0.00884112250059843, 0.0040635219775140285, 0.03419346734881401, 0.08040204644203186, 0.4998875558376312, 0.0031795515678822994, 0.002652152208611369, 0.001982660498470068, 0.001497805118560791, 0.00673420587554574, 0.022075915709137917, 0.011600106954574585, 0.007028552237898111, 0.002740822033956647], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.044510", "n_pass": [50, 2, 2], "n_token": 152, "loss": [0.3310275375843048, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "symbols", "(", "'n'", ",", "integer", "=", "True", ")", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [84, 138, 146, 6, 21, 26, 37, 52, 58, 62, 108, 112, 117, 124, 13, 35, 44, 60, 100, 134, 77, 136, 144]}}
{"prediction": {"error_location": 0.7181854248046875, "repair_targets": [], "repair_candidates": [0.04561450332403183, 0.10320751368999481, 0.003552854061126709, 0.0007857478340156376, 0.00317928334698081, 0.00044761152821592987, 0.07836459577083588, 0.004944496788084507, 0.003944879397749901, 0.0039496454410254955, 0.0003160421038046479, 0.04037655517458916, 0.09105698019266129, 0.5663943886756897, 0.002318006008863449, 0.00182054762262851, 0.0015168156241998076, 0.0011629883665591478, 0.007290462497621775, 0.02162652462720871, 0.00913324672728777, 0.0066867973655462265, 0.0023095745127648115], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.175104", "n_pass": [53, 3, 3], "n_token": 142, "loss": [0.29884064197540283, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [84, 128, 136, 6, 21, 26, 37, 52, 58, 62, 98, 102, 107, 114, 13, 35, 44, 60, 90, 124, 77, 126, 134]}}
{"prediction": {"error_location": 0.7416775822639465, "repair_targets": [], "repair_candidates": [0.07434464991092682, 0.17163068056106567, 0.006204003468155861, 0.0013849594397470355, 0.005850250832736492, 0.0008790796273387969, 0.14692090451717377, 0.01014783140271902, 0.01064254343509674, 0.008226653560996056, 0.0004946610424667597, 0.07435940206050873, 0.17108066380023956, 0.1698930710554123, 0.02012939564883709, 0.022299066185951233, 0.03476683050394058, 0.008656265214085579, 0.004613230004906654, 0.04215380921959877, 0.011229404248297215, 0.0034213787876069546, 0.0006712329923175275], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.304653", "n_pass": [101, 4, 4], "n_token": 137, "loss": [0.34552785754203796, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [84, 123, 131, 6, 21, 26, 37, 52, 58, 62, 98, 102, 107, 114, 13, 35, 44, 60, 90, 119, 77, 121, 129]}}
{"prediction": {"error_location": 0.7078465819358826, "repair_targets": [], "repair_candidates": [0.08340345323085785, 0.18669180572032928, 0.005871187429875135, 0.0018889830680564046, 0.00625052722170949, 0.0009065463091246784, 0.17603591084480286, 0.008746559731662273, 0.01243210956454277, 0.010289492085576057, 0.0005715760053135455, 0.08669813722372055, 0.09991829842329025, 0.14026083052158356, 0.026445835828781128, 0.03188120573759079, 0.04143059253692627, 0.00242317421361804, 0.004209221340715885, 0.03415851667523384, 0.03067036345601082, 0.004897224251180887, 0.003918426111340523], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.431364", "n_pass": [109, 5, 5], "n_token": 132, "loss": [0.36887505650520325, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "#NEWLINE#", "assert", "(", "ccode", "(", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [79, 118, 126, 6, 16, 21, 32, 47, 53, 57, 93, 97, 102, 109, 13, 30, 39, 55, 85, 114, 72, 116, 124]}}
{"prediction": {"error_location": 0.6915117502212524, "repair_targets": [], "repair_candidates": [0.1023688018321991, 0.24517005681991577, 0.00018106396601069719, 0.00017737130110617727, 0.006588720716536045, 0.0004671536444220692, 0.16701079905033112, 0.007915763184428215, 0.006662019994109869, 0.009216011501848698, 0.00032721180468797684, 0.08049923181533813, 0.09015647321939468, 0.16214963793754578, 0.022371096536517143, 0.018163271248340607, 0.024823101237416267, 0.0017680907621979713, 0.003756598336622119, 0.025781435891985893, 0.01852482743561268, 0.003385680029168725, 0.002535476814955473], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.553016", "n_pass": [112, 6, 6], "n_token": 127, "loss": [0.4428838789463043, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [74, 113, 121, 6, 16, 21, 27, 42, 48, 52, 88, 92, 97, 104, 13, 25, 34, 50, 80, 109, 67, 111, 119]}}
{"prediction": {"error_location": 0.6421818733215332, "repair_targets": [], "repair_candidates": [0.06540113687515259, 0.2694537043571472, 0.0003655318287201226, 0.0008314944570884109, 0.002462502336129546, 4.328076101955958e-05, 0.2852427363395691, 0.006045159418135881, 0.004452826455235481, 0.010929357260465622, 0.00024319604563061148, 0.07015909999608994, 0.07798930257558823, 0.11363302916288376, 0.024139298126101494, 0.013580705970525742, 0.014571186155080795, 0.0012896296102553606, 0.002906650770455599, 0.019675150513648987, 0.012738066725432873, 0.002275655511766672, 0.0015712934546172619], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.671912", "n_pass": [115, 7, 7], "n_token": 122, "loss": [0.33975350856781006, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", "==", "(", "'double const Catalan = %s;\\n2*x/Catalan'", "%", "Catalan", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [69, 108, 116, 6, 16, 21, 27, 37, 43, 47, 83, 87, 92, 99, 13, 25, 34, 45, 75, 104, 62, 106, 114]}}
{"prediction": {"error_location": 0.7119457125663757, "repair_targets": [], "repair_candidates": [0.09634438157081604, 0.28839224576950073, 0.0005004392005503178, 0.0011642228346318007, 0.0030591043177992105, 5.462434273795225e-05, 0.018239324912428856, 0.003420442109927535, 0.016368862241506577, 0.008994624949991703, 0.0029984184075146914, 0.1141640841960907, 0.13805170357227325, 0.1786555051803589, 0.02800644561648369, 0.019604023545980453, 0.01922679878771305, 0.0018636939348652959, 0.004146699793636799, 0.03517740219831467, 0.017150141298770905, 0.0029542359989136457, 0.0014625887852162123], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.789257", "n_pass": [119, 8, 8], "n_token": 117, "loss": [0.3307342529296875, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ".", "n", "(", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [64, 103, 111, 6, 16, 21, 27, 37, 43, 47, 78, 82, 87, 94, 13, 25, 34, 45, 70, 99, 57, 101, 109]}}
{"prediction": {"error_location": 0.7183960676193237, "repair_targets": [], "repair_candidates": [0.08442789316177368, 0.22049283981323242, 0.00036463886499404907, 0.0007210370386019349, 0.0016845387872308493, 3.6526249459711835e-05, 0.02202433906495571, 0.005148874595761299, 0.03571898490190506, 0.004691358655691147, 0.015458978712558746, 0.15909253060817719, 0.17413558065891266, 0.18355417251586914, 0.01809241995215416, 0.012362556532025337, 0.012522740289568901, 0.0015583968488499522, 0.0036655613221228123, 0.027869969606399536, 0.012970498763024807, 0.002299051033332944, 0.0011065051658079028], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:35.902451", "n_pass": [120, 9, 9], "n_token": 112, "loss": [0.3306105136871338, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [59, 98, 106, 6, 16, 21, 27, 37, 43, 47, 73, 77, 82, 89, 13, 25, 34, 45, 65, 94, 52, 96, 104]}}
{"prediction": {"error_location": 0.7184848785400391, "repair_targets": [], "repair_candidates": [0.09381159394979477, 0.34411606192588806, 0.0005768332630395889, 0.0013888463145121932, 0.0036219132598489523, 5.888756277272478e-05, 0.015524580143392086, 0.0030700606293976307, 0.015615961514413357, 0.006639661267399788, 0.003191525349393487, 0.0649939551949501, 0.14050474762916565, 0.17618949711322784, 0.031894080340862274, 0.022497525438666344, 0.02005642093718052, 0.0017125513404607773, 0.0034439084120094776, 0.029634442180395126, 0.017147919163107872, 0.0027924086898565292, 0.001516621676273644], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.013689", "n_pass": [123, 10, 10], "n_token": 107, "loss": [0.5998961925506592, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "=", "IndexedBase", "(", "'A'", ")", "#NEWLINE#", "i", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [59, 93, 101, 6, 16, 21, 27, 37, 43, 47, 68, 72, 77, 84, 13, 25, 34, 45, 60, 89, 52, 91, 99]}}
{"prediction": {"error_location": 0.5488685369491577, "repair_targets": [], "repair_candidates": [0.09711870551109314, 0.35593363642692566, 0.0006494144327007234, 0.0016393833793699741, 0.004212138243019581, 6.781559932278469e-05, 0.016409320756793022, 0.002932759467512369, 0.019237827509641647, 0.008184841834008694, 0.003036633599549532, 0.05790354311466217, 0.07444121688604355, 0.22969934344291687, 0.02579388953745365, 0.016229083761572838, 0.01947185769677162, 0.0026839221827685833, 0.0057996721006929874, 0.03645676001906395, 0.015110206790268421, 0.004258973989635706, 0.0027290480211377144], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.128563", "n_pass": [187, 11, 11], "n_token": 104, "loss": [0.7038632035255432, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "'A'", ")", "#NEWLINE#", "i", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [56, 90, 98, 6, 16, 21, 27, 37, 43, 47, 65, 69, 74, 81, 13, 25, 34, 45, 57, 86, 52, 88, 96]}}
{"prediction": {"error_location": 0.4946705996990204, "repair_targets": [], "repair_candidates": [0.10078012198209763, 0.3476473093032837, 0.0006504200864583254, 0.0016215430805459619, 0.004276632331311703, 6.977725570322946e-05, 0.021607834845781326, 0.0032983918208628893, 0.026181137189269066, 0.01069602183997631, 0.00416976073756814, 0.006515127141028643, 0.07166380435228348, 0.2330705225467682, 0.043295279145240784, 0.031875040382146835, 0.03066527098417282, 0.003767104120925069, 0.0051112393848598, 0.026734963059425354, 0.01563599333167076, 0.005932246334850788, 0.004734475631266832], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.236408", "n_pass": [188, 12, 12], "n_token": 101, "loss": [0.586093008518219, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "implemented_function", "(", "'g'", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 87, 95, 6, 16, 21, 27, 37, 43, 47, 62, 66, 71, 78, 13, 25, 34, 45, 54, 83, 52, 85, 93]}}
{"prediction": {"error_location": 0.5564972162246704, "repair_targets": [], "repair_candidates": [0.13222379982471466, 0.44824522733688354, 0.0008907443261705339, 0.002302797045558691, 0.005890835076570511, 9.741547546582296e-05, 0.028507418930530548, 0.004045215435326099, 0.038025569170713425, 0.012883973307907581, 0.0033508518245071173, 0.013385285623371601, 0.03205040469765663, 0.09171877801418304, 0.03183949738740921, 0.03720095381140709, 0.027174094691872597, 0.0045276726596057415, 0.005921115167438984, 0.04328973963856697, 0.022040078416466713, 0.008903724141418934, 0.005484885536134243], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.343069", "n_pass": [190, 13, 13], "n_token": 98, "loss": [0.7228220105171204, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", ",", "Lambda", "(", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 84, 92, 6, 16, 21, 27, 37, 43, 47, 59, 63, 68, 75, 13, 25, 34, 45, 54, 80, 52, 82, 90]}}
{"prediction": {"error_location": 0.4853804409503937, "repair_targets": [], "repair_candidates": [0.1252882033586502, 0.47810181975364685, 0.0009224458481185138, 0.0024119603913277388, 0.007131417281925678, 0.00010565525008132681, 0.03195543214678764, 0.003973212093114853, 0.03510424122214317, 0.015801606699824333, 0.006088503170758486, 0.006020953878760338, 0.017976708710193634, 0.16142137348651886, 0.007620699238032103, 0.011409996077418327, 0.016369611024856567, 0.004036704543977976, 0.005356989335268736, 0.035440828651189804, 0.015607098117470741, 0.0075791506096720695, 0.004275361075997353], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.449557", "n_pass": [191, 14, 14], "n_token": 95, "loss": [0.9109078645706177, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "(", "1", "+", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 81, 89, 6, 16, 21, 27, 37, 43, 47, 56, 60, 65, 72, 13, 25, 34, 45, 54, 77, 52, 79, 87]}}
{"prediction": {"error_location": 0.4021589457988739, "repair_targets": [], "repair_candidates": [0.09140277653932571, 0.44365084171295166, 0.0008145979954861104, 0.002252863021567464, 0.006420457269996405, 8.644115587230772e-05, 0.05505013093352318, 0.005911539774388075, 0.0632372796535492, 0.016892055049538612, 0.01483963057398796, 0.004760461859405041, 0.023051464930176735, 0.15550102293491364, 0.00045769932330586016, 0.017075132578611374, 0.04037206992506981, 0.0031797802075743675, 0.0018810313194990158, 0.019307391718029976, 0.02344641461968422, 0.004411365371197462, 0.005997605621814728], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.552841", "n_pass": [194, 15, 15], "n_token": 92, "loss": [0.9711122512817383, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "*", "(", "2", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 78, 86, 6, 16, 21, 27, 37, 43, 47, 56, 60, 62, 69, 13, 25, 34, 45, 54, 74, 52, 76, 84]}}
{"prediction": {"error_location": 0.3786616027355194, "repair_targets": [], "repair_candidates": [0.09366390109062195, 0.48484086990356445, 0.00087239925051108, 0.0023961178958415985, 0.00695407809689641, 9.510545351076871e-05, 0.06023070961236954, 0.005198713857680559, 0.0571766123175621, 0.017331993207335472, 0.011017722077667713, 0.0043089911341667175, 0.02367182821035385, 0.14923785626888275, 0.00048168087960220873, 0.009081116877496243, 0.004713798873126507, 0.0031048341188579798, 0.0023552917409688234, 0.02339319698512554, 0.027298254892230034, 0.005328978877514601, 0.007246021181344986], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.654863", "n_pass": [196, 16, 16], "n_token": 89, "loss": [0.9251424670219421, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")", "==", "'for (int i=0; i<n; i++){\\n   A[i] = (A[i] + 1)*(A[i] + 2)*A[i];\\n}'", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 75, 83, 6, 16, 21, 27, 37, 43, 47, 56, 60, 62, 66, 13, 25, 34, 45, 54, 71, 52, 73, 81]}}
{"prediction": {"error_location": 0.3964748978614807, "repair_targets": [], "repair_candidates": [0.09284539520740509, 0.5033228397369385, 0.000870640913490206, 0.002720963442698121, 0.007759390398859978, 0.00010913906589848921, 0.053234171122312546, 0.006855266634374857, 0.05061449855566025, 0.014202953316271305, 0.009218195453286171, 0.003880431642755866, 0.017476219683885574, 0.12666383385658264, 0.0004860388580709696, 0.015174338594079018, 0.009731445461511612, 0.001132857520133257, 0.002416178584098816, 0.029287250712513924, 0.03529692813754082, 0.006769370753318071, 0.009931541047990322], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:36.956335", "n_pass": [204, 19, 17], "n_token": 86, "loss": [0.7678951621055603, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [53, 75, 83, 6, 16, 21, 27, 37, 43, 47, 56, 60, 62, 66, 13, 25, 34, 45, 54, 71, 52, 73, 81]}}
{"prediction": {"error_location": 0.463988721370697, "repair_targets": [], "repair_candidates": [0.07847397029399872, 0.43742913007736206, 0.0009297038777731359, 0.00393289141356945, 0.008349440060555935, 0.00011984591401414946, 0.06742355972528458, 0.0069166854955255985, 0.0666043758392334, 0.015216534957289696, 0.011400800198316574, 0.00591689720749855, 0.02303796447813511, 0.14420023560523987, 0.0005183134926483035, 0.018483150750398636, 0.010800722986459732, 0.0014915285864844918, 0.0035607616882771254, 0.0468265563249588, 0.038815297186374664, 0.005419665481895208, 0.004131949972361326], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.055613", "n_pass": [206, 20, 18], "n_token": 84, "loss": [0.9083758592605591, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "#NEWLINE#", "#INDENT#", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [51, 73, 81, 4, 14, 19, 25, 35, 41, 45, 54, 58, 60, 64, 11, 23, 32, 43, 52, 69, 50, 71, 79]}}
{"prediction": {"error_location": 0.40317851305007935, "repair_targets": [], "repair_candidates": [0.03161013871431351, 0.5452548861503601, 0.0021261321380734444, 0.006052139215171337, 0.008919034153223038, 0.0001437110040569678, 0.06303638964891434, 0.006455328315496445, 0.059062398970127106, 0.01384969986975193, 0.00858472939580679, 0.004055324476212263, 0.01654309406876564, 0.11873702704906464, 0.0004958908539265394, 0.014982301741838455, 0.008461453020572662, 0.0013064182130619884, 0.002830883488059044, 0.035326700657606125, 0.04159470275044441, 0.004876126069575548, 0.005695449188351631], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.153993", "n_pass": [207, 21, 19], "n_token": 82, "loss": [0.8616875410079956, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "'x'", ")", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [49, 71, 79, 2, 12, 17, 23, 33, 39, 43, 52, 56, 58, 62, 9, 21, 30, 41, 50, 67, 48, 69, 77]}}
{"prediction": {"error_location": 0.4224485456943512, "repair_targets": [], "repair_candidates": [0.06977420300245285, 0.44036000967025757, 0.003978950437158346, 0.014897591434419155, 0.015328288078308105, 0.0002763077209237963, 0.07699553668498993, 0.011329048313200474, 0.07965852320194244, 0.01716478168964386, 0.01536528393626213, 0.003915383946150541, 0.011998852714896202, 0.08049856871366501, 0.0008373495656996965, 0.022418197244405746, 0.013151799328625202, 0.001879471237771213, 0.003515479154884815, 0.04439706355333328, 0.057820674031972885, 0.006138673052191734, 0.008300057612359524], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.348573", "n_pass": [210, 23, 20], "n_token": 80, "loss": [0.8761106133460999, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "=", "(", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [47, 69, 77, 2, 10, 15, 21, 31, 37, 41, 50, 54, 56, 60, 7, 19, 28, 39, 48, 65, 46, 67, 75]}}
{"prediction": {"error_location": 0.41639935970306396, "repair_targets": [], "repair_candidates": [0.10086551308631897, 0.031494397670030594, 0.002098231576383114, 0.03763245418667793, 0.02371157892048359, 0.000586448993999511, 0.12054949998855591, 0.013355975039303303, 0.1483018547296524, 0.028736580163240433, 0.035739291459321976, 0.006557622458785772, 0.021218854933977127, 0.14001113176345825, 0.001249906257726252, 0.044905949383974075, 0.031102117151021957, 0.0037050419487059116, 0.007005424238741398, 0.07595501095056534, 0.0992317795753479, 0.011912417598068714, 0.014072859659790993], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.445217", "n_pass": [212, 24, 21], "n_token": 78, "loss": [0.48854073882102966, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "(", "2", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [45, 67, 75, 2, 8, 13, 19, 29, 35, 39, 48, 52, 54, 58, 7, 17, 26, 37, 46, 63, 44, 65, 73]}}
{"prediction": {"error_location": 0.6135209202766418, "repair_targets": [], "repair_candidates": [0.07690031826496124, 0.005703549832105637, 0.007010680623352528, 0.03844378516077995, 0.011401727795600891, 0.0006636787438765168, 0.06417135149240494, 0.012860088609158993, 0.13779444992542267, 0.030186347663402557, 0.05449360981583595, 0.011921186000108719, 0.04020680487155914, 0.12858597934246063, 0.0014339589979499578, 0.06450985372066498, 0.03374405577778816, 0.004586671944707632, 0.0074430471286177635, 0.1126275286078453, 0.12349677830934525, 0.015508758835494518, 0.016305746510624886], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.540657", "n_pass": [214, 25, 22], "n_token": 76, "loss": [0.47692734003067017, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", ")", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [43, 65, 73, 2, 8, 11, 17, 27, 33, 37, 46, 50, 52, 56, 7, 15, 24, 35, 44, 61, 42, 63, 71]}}
{"prediction": {"error_location": 0.6206876039505005, "repair_targets": [], "repair_candidates": [0.08453407883644104, 0.004857565741986036, 0.009030573070049286, 0.0599779412150383, 0.008913284167647362, 0.0005705794901587069, 0.0686352476477623, 0.010140596888959408, 0.12339586764574051, 0.03691805899143219, 0.054294489324092865, 0.015429161489009857, 0.060578592121601105, 0.14928719401359558, 0.001124892383813858, 0.04923805966973305, 0.030207602307200432, 0.004064760636538267, 0.008526177145540714, 0.09375694394111633, 0.10220976918935776, 0.013888428919017315, 0.010420098900794983], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.636493", "n_pass": [216, 26, 23], "n_token": 74, "loss": [0.44343894720077515, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", ")", ")", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [41, 63, 71, 2, 8, 11, 15, 25, 31, 35, 44, 48, 50, 54, 7, 13, 22, 33, 42, 59, 40, 61, 69]}}
{"prediction": {"error_location": 0.6418254971504211, "repair_targets": [], "repair_candidates": [0.06314538419246674, 0.004006199073046446, 0.0071534947492182255, 0.02753402478992939, 0.007437546271830797, 0.001972756814211607, 0.059501904994249344, 0.01191199291497469, 0.1102629080414772, 0.03554123267531395, 0.05582120269536972, 0.013928516767919064, 0.06033381447196007, 0.1907932013273239, 0.0013235800433903933, 0.05995577573776245, 0.02801605872809887, 0.004702572710812092, 0.008838923647999763, 0.1055605560541153, 0.1145232692360878, 0.015896711498498917, 0.01183837465941906], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.729835", "n_pass": [219, 27, 24], "n_token": 72, "loss": [0.4125613570213318, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "==", "'2*x'", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [39, 61, 69, 2, 8, 11, 15, 23, 29, 33, 42, 46, 48, 52, 7, 13, 20, 31, 40, 57, 38, 59, 67]}}
{"prediction": {"error_location": 0.661952555179596, "repair_targets": [], "repair_candidates": [0.06452673673629761, 0.004781878553330898, 0.008467147126793861, 0.04073657467961311, 0.011002585291862488, 0.0009076760616153479, 0.04906941205263138, 0.01027026679366827, 0.12845489382743835, 0.02835223264992237, 0.05945805087685585, 0.01425845269113779, 0.06301299482584, 0.1675024926662445, 0.0015209376579150558, 0.05327459052205086, 0.028769351541996002, 0.005634580738842487, 0.008846725337207317, 0.10845868289470673, 0.11623401194810867, 0.016169952228665352, 0.010289737023413181], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.821969", "n_pass": [220, 28, 25], "n_token": 70, "loss": [0.48592501878738403, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", ")", "#NEWLINE#", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [37, 59, 67, 2, 8, 11, 15, 21, 27, 31, 40, 44, 46, 50, 7, 13, 18, 29, 38, 55, 36, 57, 65]}}
{"prediction": {"error_location": 0.6151280403137207, "repair_targets": [], "repair_candidates": [0.06730040162801743, 0.005197033751755953, 0.008759728632867336, 0.032260291278362274, 0.009548942558467388, 0.0014358011540025473, 0.06438466906547546, 0.011470855213701725, 0.13357120752334595, 0.03318357840180397, 0.05423898249864578, 0.014268320985138416, 0.06534720212221146, 0.17046041786670685, 0.001773290685378015, 0.050811123102903366, 0.024608271196484566, 0.005087262950837612, 0.008973370306193829, 0.09584810584783554, 0.11414377391338348, 0.015493382699787617, 0.01183403842151165], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:37.913962", "n_pass": [221, 29, 26], "n_token": 68, "loss": [0.3458661735057831, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", ",", "(", "(", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [35, 57, 65, 2, 8, 11, 15, 19, 25, 29, 38, 42, 44, 48, 7, 13, 16, 27, 36, 53, 34, 55, 63]}}
{"prediction": {"error_location": 0.7076071500778198, "repair_targets": [], "repair_candidates": [0.06785886734724045, 0.005653217900544405, 0.010392303578555584, 0.06634335964918137, 0.007465536240488291, 0.008128457702696323, 0.003043986391276121, 0.008027267642319202, 0.08671063184738159, 0.028143614530563354, 0.05344335734844208, 0.019158985465765, 0.1059565618634224, 0.2010277807712555, 0.0016525830142199993, 0.0473066121339798, 0.02027599699795246, 0.005057097878307104, 0.0110515421256423, 0.11386337131261826, 0.10512226819992065, 0.016765659675002098, 0.007550958544015884], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.007518", "n_pass": [224, 30, 27], "n_token": 65, "loss": [0.3223475217819214, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "(", "ccode", "(", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [32, 54, 62, 2, 8, 11, 15, 19, 22, 26, 35, 39, 41, 45, 7, 13, 16, 24, 33, 50, 31, 52, 60]}}
{"prediction": {"error_location": 0.7244462966918945, "repair_targets": [], "repair_candidates": [0.07599367946386337, 0.006452343892306089, 0.01223805733025074, 0.07933701574802399, 0.012219277210533619, 0.01716729812324047, 0.003409016877412796, 0.015515514649450779, 0.04963933303952217, 0.020348209887742996, 0.0168484877794981, 0.01686105690896511, 0.10970402508974075, 0.2698952853679657, 0.0012504503829404712, 0.03837453946471214, 0.017732705920934677, 0.004716616589576006, 0.010486084967851639, 0.11235884577035904, 0.08945202082395554, 0.01463713776320219, 0.0053629749454557896], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.096962", "n_pass": [234, 31, 28], "n_token": 62, "loss": [0.5001242160797119, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", ")", ",", "assign_to", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [32, 51, 59, 2, 8, 11, 15, 19, 22, 26, 35, 39, 41, 45, 7, 13, 16, 24, 33, 47, 31, 49, 57]}}
{"prediction": {"error_location": 0.6064552664756775, "repair_targets": [], "repair_candidates": [0.08920331299304962, 0.00761098088696599, 0.013807081617414951, 0.08735405653715134, 0.01570185460150242, 0.022440075874328613, 0.004494210705161095, 0.016687316820025444, 0.06498036533594131, 0.023221146315336227, 0.022107306867837906, 0.02176724374294281, 0.12063953280448914, 0.22829677164554596, 0.0014695599675178528, 0.048804257065057755, 0.01920417696237564, 0.012007973156869411, 0.004610725678503513, 0.09591975063085556, 0.044822145253419876, 0.02631961926817894, 0.008530468679964542], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.183836", "n_pass": [237, 32, 29], "n_token": 59, "loss": [0.6091638803482056, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "symbols", "(", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [32, 51, 56, 2, 8, 11, 15, 19, 22, 26, 35, 39, 41, 45, 7, 13, 16, 24, 33, 47, 31, 49, 54]}}
{"prediction": {"error_location": 0.5438054203987122, "repair_targets": [], "repair_candidates": [0.06289157271385193, 0.006763624958693981, 0.012103998102247715, 0.07762517035007477, 0.01186701375991106, 0.014417311176657677, 0.0038032366428524256, 0.02025705762207508, 0.0827326625585556, 0.023897049948573112, 0.027138859033584595, 0.012904160656034946, 0.0808996632695198, 0.39006680250167847, 0.0017511289333924651, 0.07534848153591156, 0.05095040798187256, 0.0043114363215863705, 0.0009242023224942386, 0.00424365047365427, 0.01997954212129116, 0.014563919976353645, 0.0005590392975136638], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.270020", "n_pass": [242, 33, 30], "n_token": 57, "loss": [0.690434992313385, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "#NEWLINE#", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [30, 49, 54, 2, 6, 9, 13, 17, 20, 24, 33, 37, 39, 43, 5, 11, 14, 22, 31, 45, 29, 47, 52]}}
{"prediction": {"error_location": 0.5013579726219177, "repair_targets": [], "repair_candidates": [0.065891794860363, 0.025478899478912354, 0.07132571935653687, 0.07701839506626129, 0.011270086281001568, 0.01184807624667883, 0.0034810591023415327, 0.01935550384223461, 0.06577198952436447, 0.031691089272499084, 0.02408929169178009, 0.011600219644606113, 0.06955567747354507, 0.3696684241294861, 0.0013771721860393882, 0.05940181761980057, 0.04391506686806679, 0.004711172543466091, 0.0008325439412146807, 0.004829336889088154, 0.012286660261452198, 0.01409660279750824, 0.0005034184432588518], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.359105", "n_pass": [309, 34, 31], "n_token": 56, "loss": [0.462646484375, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", ",", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [29, 48, 53, 2, 5, 8, 12, 16, 19, 23, 32, 36, 38, 42, 4, 10, 13, 21, 30, 44, 28, 46, 51]}}
{"prediction": {"error_location": 0.6296151876449585, "repair_targets": [], "repair_candidates": [0.07952748239040375, 0.046196550130844116, 0.020369401201605797, 0.07096726447343826, 0.007457259111106396, 0.011909164488315582, 0.0031413771212100983, 0.013238972052931786, 0.04806378111243248, 0.022858979180455208, 0.018018847331404686, 0.013806448318064213, 0.08736847341060638, 0.4464258551597595, 0.0011100792326033115, 0.04242333397269249, 0.026025278493762016, 0.004326686728745699, 0.0008489895262755454, 0.005094281863421202, 0.014791268855333328, 0.015615765005350113, 0.00041452058940194547], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.443652", "n_pass": [311, 35, 32], "n_token": 55, "loss": [0.537405252456665, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "*", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [28, 47, 52, 2, 5, 7, 11, 15, 18, 22, 31, 35, 37, 41, 4, 9, 12, 20, 29, 43, 27, 45, 50]}}
{"prediction": {"error_location": 0.5842623710632324, "repair_targets": [], "repair_candidates": [0.08190272748470306, 0.03922322392463684, 0.01795146055519581, 0.06438283622264862, 0.005082302261143923, 0.008538045920431614, 0.003092152765020728, 0.010691888630390167, 0.053530849516391754, 0.022722741588950157, 0.021593036130070686, 0.01427849754691124, 0.08219786733388901, 0.4493325352668762, 0.0011441310634836555, 0.044524822384119034, 0.03182421997189522, 0.004637992475181818, 0.0008074140059761703, 0.005250234156847, 0.019150668755173683, 0.017610276117920876, 0.0005300917546264827], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.527770", "n_pass": [312, 36, 33], "n_token": 54, "loss": [0.6138712763786316, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", ")", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [27, 46, 51, 2, 5, 6, 10, 14, 17, 21, 30, 34, 36, 40, 4, 8, 11, 19, 28, 42, 26, 44, 49]}}
{"prediction": {"error_location": 0.5412514805793762, "repair_targets": [], "repair_candidates": [0.10322574526071548, 0.026752009987831116, 0.011448388919234276, 0.0154748959466815, 0.007512289099395275, 0.0015838599065318704, 0.0007363862241618335, 0.008481950499117374, 0.05883277952671051, 0.025964075699448586, 0.01955905742943287, 0.01630399189889431, 0.08813318610191345, 0.4501173198223114, 0.0017700850730761886, 0.04715647175908089, 0.04941798001527786, 0.005775182042270899, 0.001017147209495306, 0.007578577380627394, 0.027744287624955177, 0.024321366101503372, 0.0010930137941613793], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.612673", "n_pass": [314, 37, 34], "n_token": 53, "loss": [0.46533098816871643, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "(", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [26, 45, 50, 2, 5, 6, 9, 13, 16, 20, 29, 33, 35, 39, 4, 7, 10, 18, 27, 41, 25, 43, 48]}}
{"prediction": {"error_location": 0.6279272437095642, "repair_targets": [], "repair_candidates": [0.1015685573220253, 0.023018453270196915, 0.0035950629971921444, 0.005021781660616398, 0.005696201231330633, 0.0018912545638158917, 0.0013816255377605557, 0.00596286216750741, 0.03813175484538078, 0.018552210181951523, 0.02510165423154831, 0.012980484403669834, 0.08486582338809967, 0.5358281135559082, 0.0017649979563429952, 0.037307485938072205, 0.03677291050553322, 0.005600666627287865, 0.0009601409547030926, 0.006385827902704477, 0.026475969702005386, 0.02036230079829693, 0.0007738668937236071], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.695492", "n_pass": [316, 38, 35], "n_token": 52, "loss": [0.533427357673645, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "Lambda", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [25, 44, 49, 2, 5, 6, 8, 12, 15, 19, 28, 32, 34, 38, 4, 7, 9, 17, 26, 40, 24, 42, 47]}}
{"prediction": {"error_location": 0.5865910053253174, "repair_targets": [], "repair_candidates": [0.08693598955869675, 0.014390950091183186, 0.003076146822422743, 0.014403190463781357, 0.012438061647117138, 0.005642472766339779, 0.010189813561737537, 0.010210917331278324, 0.04679415374994278, 0.02261071279644966, 0.02054072543978691, 0.017828302457928658, 0.08154933899641037, 0.4923609793186188, 0.0020713754929602146, 0.04403374716639519, 0.039910342544317245, 0.005297858268022537, 0.0009428021148778498, 0.006479320116341114, 0.03434355556964874, 0.02692032977938652, 0.0010289504425600171], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.778585", "n_pass": [319, 39, 36], "n_token": 51, "loss": [0.5491586923599243, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "(", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [24, 43, 48, 2, 5, 6, 8, 11, 14, 18, 27, 31, 33, 37, 4, 7, 9, 16, 25, 39, 23, 41, 46]}}
{"prediction": {"error_location": 0.5774353742599487, "repair_targets": [], "repair_candidates": [0.11951103061437607, 0.04372936114668846, 0.00787183828651905, 0.021556444466114044, 0.02680777944624424, 0.005209787283092737, 0.006327558774501085, 0.0036689897533506155, 0.009037602692842484, 0.013840705156326294, 0.00637531653046608, 0.01933096908032894, 0.1024843081831932, 0.47895294427871704, 0.0020194738171994686, 0.0320955365896225, 0.03706120327115059, 0.005584492813795805, 0.0009410388884134591, 0.005945115815848112, 0.030327055603265762, 0.0203788373619318, 0.0009426664328202605], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.860417", "n_pass": [320, 40, 37], "n_token": 50, "loss": [0.5692787170410156, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "2", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [23, 42, 47, 2, 5, 6, 8, 10, 13, 17, 26, 30, 32, 36, 4, 7, 9, 15, 24, 38, 22, 40, 45]}}
{"prediction": {"error_location": 0.5659334659576416, "repair_targets": [], "repair_candidates": [0.08603968471288681, 0.0347730927169323, 0.006534123327583075, 0.01798662543296814, 0.015520460903644562, 0.006155313923954964, 0.006986815016716719, 0.004647019784897566, 0.017549222335219383, 0.014106023125350475, 0.0051519013941287994, 0.016972189769148827, 0.08218249678611755, 0.5579668879508972, 0.001452307216823101, 0.031466975808143616, 0.03449283912777901, 0.0049927616491913795, 0.0007699166890233755, 0.0061746989376842976, 0.02834942378103733, 0.01887555979192257, 0.0008537250105291605], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:38.943683", "n_pass": [322, 41, 38], "n_token": 49, "loss": [0.558771550655365, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "*", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [22, 41, 46, 2, 5, 6, 8, 10, 12, 16, 25, 29, 31, 35, 4, 7, 9, 14, 23, 37, 21, 39, 44]}}
{"prediction": {"error_location": 0.5719111561775208, "repair_targets": [], "repair_candidates": [0.09310934692621231, 0.02954169362783432, 0.006579011213034391, 0.017436450347304344, 0.012038116343319416, 0.005848422646522522, 0.007516767363995314, 0.004362916573882103, 0.03269919008016586, 0.012246009893715382, 0.008711482398211956, 0.014739831909537315, 0.08641424775123596, 0.5017385482788086, 0.0015567641239613295, 0.048254068940877914, 0.050644975155591965, 0.0061453827656805515, 0.0008457593503408134, 0.006576793733984232, 0.03178476169705391, 0.020264776423573494, 0.000944671977777034], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.024660", "n_pass": [323, 42, 39], "n_token": 48, "loss": [0.6149210333824158, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", ")", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [21, 40, 45, 2, 5, 6, 8, 10, 11, 15, 24, 28, 30, 34, 4, 7, 9, 13, 22, 36, 20, 38, 43]}}
{"prediction": {"error_location": 0.5406835675239563, "repair_targets": [], "repair_candidates": [0.09948190301656723, 0.02773754671216011, 0.005975015927106142, 0.01724705845117569, 0.009756635874509811, 0.004097644705325365, 0.0034680331591516733, 0.00547186192125082, 0.01112319715321064, 0.015708407387137413, 0.0017236738931387663, 0.016423387452960014, 0.07899201661348343, 0.5068600177764893, 0.0020627276971936226, 0.05106053128838539, 0.05873798206448555, 0.006292328704148531, 0.0010063881054520607, 0.007835284806787968, 0.04648898169398308, 0.021148476749658585, 0.0013008677633479238], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.105155", "n_pass": [325, 43, 40], "n_token": 47, "loss": [0.6375337839126587, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "(", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [20, 39, 44, 2, 5, 6, 8, 10, 11, 14, 23, 27, 29, 33, 4, 7, 9, 12, 21, 35, 19, 37, 42]}}
{"prediction": {"error_location": 0.528594434261322, "repair_targets": [], "repair_candidates": [0.1313687413930893, 0.03049456886947155, 0.005438952706754208, 0.023347796872258186, 0.011035885661840439, 0.007040528580546379, 0.002259741071611643, 0.002513343235477805, 0.012547293677926064, 0.019340401515364647, 0.001997568178921938, 0.013359017670154572, 0.07515035569667816, 0.3840218782424927, 0.0023684194311499596, 0.06981807947158813, 0.0936032235622406, 0.008791249245405197, 0.001219418365508318, 0.010582378134131432, 0.06493857502937317, 0.02685941755771637, 0.0019031655974686146], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.185519", "n_pass": [327, 44, 41], "n_token": 46, "loss": [0.6494618654251099, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", ")", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [19, 38, 43, 2, 5, 6, 8, 10, 11, 13, 22, 26, 28, 32, 4, 7, 9, 12, 20, 34, 18, 36, 41]}}
{"prediction": {"error_location": 0.5223267674446106, "repair_targets": [], "repair_candidates": [0.0952799990773201, 0.02215302735567093, 0.0048485384322702885, 0.01668005995452404, 0.005725455936044455, 0.002302916254848242, 0.0006779881077818573, 0.0008032464538700879, 0.027132058516144753, 0.02954118698835373, 0.006311675533652306, 0.013540633954107761, 0.07529347389936447, 0.4361989200115204, 0.0017378550255671144, 0.07684023678302765, 0.08599618077278137, 0.008183309808373451, 0.0010595761705189943, 0.009154773317277431, 0.0526777058839798, 0.026507405564188957, 0.0013538144994527102], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.266703", "n_pass": [329, 45, 42], "n_token": 45, "loss": [0.7141904234886169, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", ")", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [18, 37, 42, 2, 5, 6, 8, 10, 11, 13, 21, 25, 27, 31, 4, 7, 9, 12, 19, 33, 17, 35, 40]}}
{"prediction": {"error_location": 0.48958832025527954, "repair_targets": [], "repair_candidates": [0.1228669211268425, 0.032537415623664856, 0.006120439153164625, 0.02034989930689335, 0.006155760493129492, 0.0025226259604096413, 0.0007347535574808717, 0.0009375591762363911, 0.03463808447122574, 0.035428617149591446, 0.006503913551568985, 0.011743715964257717, 0.07669350504875183, 0.33815237879753113, 0.0017685830825939775, 0.07999803870916367, 0.10109705477952957, 0.0104048578068614, 0.001369838952086866, 0.011070089414715767, 0.06525272130966187, 0.031846173107624054, 0.0018070291262120008], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.345614", "n_pass": [330, 46, 43], "n_token": 44, "loss": [0.7586683034896851, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", ")", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [17, 36, 41, 2, 5, 6, 8, 10, 11, 13, 20, 24, 26, 30, 4, 7, 9, 12, 18, 32, 16, 34, 39]}}
{"prediction": {"error_location": 0.4682895839214325, "repair_targets": [], "repair_candidates": [0.1457725465297699, 0.044908903539180756, 0.007061206270009279, 0.02200566977262497, 0.005563846789300442, 0.0025329352356493473, 0.0007773896213620901, 0.0011860216036438942, 0.05505349487066269, 0.04509908705949783, 0.005525128450244665, 0.011167858727276325, 0.04856886714696884, 0.25503838062286377, 0.002028904389590025, 0.09442530572414398, 0.10964103788137436, 0.013534191064536572, 0.0017040363745763898, 0.013152587227523327, 0.07540079206228256, 0.037661533802747726, 0.00219017849303782], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.423772", "n_pass": [331, 47, 44], "n_token": 43, "loss": [0.7583227157592773, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "#NEWLINE#", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [16, 35, 40, 2, 5, 6, 8, 10, 11, 13, 19, 23, 25, 29, 4, 7, 9, 12, 17, 31, 15, 33, 38]}}
{"prediction": {"error_location": 0.46845147013664246, "repair_targets": [], "repair_candidates": [0.1990906149148941, 0.06529881805181503, 0.00851365178823471, 0.023481301963329315, 0.00456332229077816, 0.0025321212597191334, 0.000837674830108881, 0.0019930927082896233, 0.12673528492450714, 0.047795992344617844, 0.01731893979012966, 0.024763016030192375, 0.036098431795835495, 0.1567799150943756, 0.0015031149378046393, 0.06315096467733383, 0.06933354586362839, 0.015829190611839294, 0.002272423356771469, 0.01547419186681509, 0.0760062038898468, 0.038405075669288635, 0.0022231638431549072], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.501852", "n_pass": [332, 48, 45], "n_token": 42, "loss": [0.7890011668205261, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "=", "x", ",", "(", "(", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 34, 39, 2, 5, 6, 8, 10, 11, 13, 18, 22, 24, 28, 4, 7, 9, 12, 16, 30, 14, 32, 37]}}
{"prediction": {"error_location": 0.4542984068393707, "repair_targets": [], "repair_candidates": [0.13719670474529266, 0.07817385345697403, 0.007431273348629475, 0.014995766803622246, 0.003134438069537282, 0.0015422690194100142, 0.0005983012379147112, 0.001818931195884943, 0.08110127598047256, 0.03128008916974068, 0.008016913197934628, 0.011240209452807903, 0.07671680301427841, 0.3037015199661255, 0.0025987918488681316, 0.05029213801026344, 0.06189290061593056, 0.012912582606077194, 0.0019248052267357707, 0.013756094500422478, 0.06798753887414932, 0.0299850981682539, 0.001701700733974576], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.580126", "n_pass": [337, 49, 46], "n_token": 40, "loss": [0.6329684853553772, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "=", "x", ",", "x", "*", "x", ")", ")", "+", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 32, 37, 2, 5, 6, 8, 10, 11, 13, 18, 20, 22, 26, 4, 7, 9, 12, 16, 28, 14, 30, 35]}}
{"prediction": {"error_location": 0.5310131311416626, "repair_targets": [], "repair_candidates": [0.163282573223114, 0.07450579851865768, 0.007149450946599245, 0.01585274003446102, 0.0035386106465011835, 0.0017201807349920273, 0.0006927104550413787, 0.0025081634521484375, 0.1203719973564148, 0.04539436474442482, 0.011169175617396832, 0.012712680734694004, 0.08762102574110031, 0.14860638976097107, 0.016182133927941322, 0.027155213057994843, 0.0623694583773613, 0.01365174911916256, 0.00208602799102664, 0.022173600271344185, 0.11742037534713745, 0.04132361337542534, 0.0025119406636804342], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.656454", "n_pass": [340, 50, 47], "n_token": 38, "loss": [0.6935713291168213, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "=", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "=", "x", ",", "x", "*", "x", ")", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 30, 35, 2, 5, 6, 8, 10, 11, 13, 18, 20, 22, 24, 4, 7, 9, 12, 16, 26, 14, 28, 33]}}
{"prediction": {"error_location": 0.4997878968715668, "repair_targets": [], "repair_candidates": [0.1863565891981125, 0.08741717785596848, 0.007532407063990831, 0.016063489019870758, 0.0038747177459299564, 0.0018117768922820687, 0.0007336863200180233, 0.0028826864436268806, 0.12790024280548096, 0.04658109322190285, 0.011039490811526775, 0.011948203667998314, 0.09211111068725586, 0.1877886950969696, 0.007212955504655838, 0.005559537094086409, 0.025456899777054787, 0.003745229449123144, 0.0012837267713621259, 0.019801108166575432, 0.10581915825605392, 0.04271211475133896, 0.004367916379123926], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:39.884684", "n_pass": [351, 53, 48], "n_token": 37, "loss": [1.1287546157836914, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "=", "x", ",", "x", "*", "x", ")", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 29, 34, 2, 4, 5, 7, 9, 10, 12, 17, 19, 21, 23, 3, 6, 8, 11, 15, 25, 13, 27, 32]}}
{"prediction": {"error_location": 0.32343581318855286, "repair_targets": [], "repair_candidates": [0.10575791448354721, 0.026001209393143654, 0.014802586287260056, 0.020020047202706337, 0.0015495658153668046, 0.0012815491063520312, 0.0006924332701601088, 0.003450083313509822, 0.0888318419456482, 0.04670613259077072, 0.012263714335858822, 0.014056535437703133, 0.06398198008537292, 0.21672092378139496, 0.008341520093381405, 0.006675249431282282, 0.02311033383011818, 0.005392798222601414, 0.0016540519427508116, 0.02820499613881111, 0.19768324494361877, 0.08819279074668884, 0.02462851069867611], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.113517", "n_pass": [401, 56, 49], "n_token": 36, "loss": [0.7409103512763977, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", ",", "x", "*", "x", ")", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 28, 33, 2, 4, 5, 7, 9, 10, 12, 16, 18, 20, 22, 3, 6, 8, 11, 15, 24, 13, 26, 31]}}
{"prediction": {"error_location": 0.4766797423362732, "repair_targets": [], "repair_candidates": [0.06968984007835388, 0.03731318935751915, 0.02404142916202545, 0.01285319309681654, 0.0006069220835343003, 0.0008155277464538813, 0.0006114827701821923, 0.001504439045675099, 0.03684500232338905, 0.02073027566075325, 0.009063269011676311, 0.014878316782414913, 0.02676602080464363, 0.029201898723840714, 0.005562018137425184, 0.06338673084974289, 0.26423823833465576, 0.008174295537173748, 0.0014984358567744493, 0.02590622380375862, 0.2835056483745575, 0.04715367406606674, 0.015653906390070915], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.188477", "n_pass": [403, 57, 50], "n_token": 35, "loss": [0.6927897334098816, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "*", "x", ")", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 27, 32, 2, 4, 5, 7, 9, 10, 12, 16, 17, 19, 21, 3, 6, 8, 11, 15, 23, 13, 25, 30]}}
{"prediction": {"error_location": 0.5001787543296814, "repair_targets": [], "repair_candidates": [0.08299238979816437, 0.05806035175919533, 0.042606186121702194, 0.01715879701077938, 0.0006674604956060648, 0.001111271558329463, 0.0007991584134288132, 0.0017581720603629947, 0.04435434192419052, 0.021713467314839363, 0.008748169988393784, 0.012124447152018547, 0.019983811303973198, 0.01437761727720499, 0.006452357396483421, 0.01974995620548725, 0.2412174493074417, 0.008598381653428078, 0.0016204981366172433, 0.03508773446083069, 0.27797451615333557, 0.06877221167087555, 0.014071286655962467], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.263250", "n_pass": [405, 58, 51], "n_token": 34, "loss": [0.798978865146637, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", ")", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 26, 31, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 20, 3, 6, 8, 11, 15, 22, 13, 24, 29]}}
{"prediction": {"error_location": 0.44978803396224976, "repair_targets": [], "repair_candidates": [0.07186512649059296, 0.057662997394800186, 0.05162636935710907, 0.014348545111715794, 0.0006542197079397738, 0.0015833742218092084, 0.0015081556048244238, 0.003130527911707759, 0.05865221843123436, 0.026989148929715157, 0.01003094669431448, 0.012881912291049957, 0.02815072238445282, 0.018398934975266457, 0.009582349099218845, 0.08829297870397568, 0.09428372979164124, 0.008761797100305557, 0.001926763216033578, 0.04933778941631317, 0.2624196708202362, 0.11458205431699753, 0.013329645618796349], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.337613", "n_pass": [407, 59, 52], "n_token": 33, "loss": [0.9612700343132019, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "assert", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 25, 30, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 21, 13, 23, 28]}}
{"prediction": {"error_location": 0.3824068307876587, "repair_targets": [], "repair_candidates": [0.0757182165980339, 0.06520459055900574, 0.06024546921253204, 0.014086384326219559, 0.0007855952135287225, 0.002347989473491907, 0.0026887194253504276, 0.005900914315134287, 0.07501307129859924, 0.024882188066840172, 0.006463075987994671, 0.006972763687372208, 0.03275199607014656, 0.030956918373703957, 0.010158561170101166, 0.04219747707247734, 0.0410095751285553, 0.012126973830163479, 0.002018754370510578, 0.05764929950237274, 0.2435317188501358, 0.17005717754364014, 0.017232583835721016], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.412292", "n_pass": [409, 60, 53], "n_token": 32, "loss": [0.9933251142501831, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "(", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 24, 29, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 22, 27]}}
{"prediction": {"error_location": 0.3703431785106659, "repair_targets": [], "repair_candidates": [0.10080888867378235, 0.08263066411018372, 0.07841268926858902, 0.02044551819562912, 0.0010566203854978085, 0.0033038114197552204, 0.0034762134309858084, 0.007847010158002377, 0.11364249885082245, 0.03436610475182533, 0.008682121522724628, 0.008533134125173092, 0.033723171800374985, 0.02694421075284481, 0.010593034327030182, 0.040039390325546265, 0.02437303215265274, 0.003652418963611126, 0.0018269023858010769, 0.09839608520269394, 0.10262297093868256, 0.18682582676410675, 0.007797662168741226], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.485290", "n_pass": [411, 61, 54], "n_token": 31, "loss": [0.9953153133392334, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "A", "[", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 23, 28, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 21, 26]}}
{"prediction": {"error_location": 0.3696068525314331, "repair_targets": [], "repair_candidates": [0.0836699828505516, 0.07069813460111618, 0.07201467454433441, 0.01953939162194729, 0.0009544743224978447, 0.0027645090594887733, 0.0028463236521929502, 0.006865895818918943, 0.1263503134250641, 0.0407131053507328, 0.011229381896555424, 0.011507447808980942, 0.03830954059958458, 0.027970341965556145, 0.00984148122370243, 0.041110701858997345, 0.07237852364778519, 0.04188675060868263, 0.018200187012553215, 0.00807420164346695, 0.05416494980454445, 0.22872427105903625, 0.010185394436120987], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.557631", "n_pass": [413, 62, 55], "n_token": 30, "loss": [0.8051478266716003, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "A", "i", "]", "=", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 22, 27, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 21, 25]}}
{"prediction": {"error_location": 0.4470217823982239, "repair_targets": [], "repair_candidates": [0.10951469838619232, 0.08609876036643982, 0.07945072650909424, 0.022638490423560143, 0.0011973067885264754, 0.003707433817908168, 0.003345279023051262, 0.007442421279847622, 0.1253470778465271, 0.04278961941599846, 0.013620653189718723, 0.011829530820250511, 0.027491042390465736, 0.017315305769443512, 0.006023840047419071, 0.017782293260097504, 0.023023312911391258, 0.011738413013517857, 0.008152296766638756, 0.012847998179495335, 0.014485841616988182, 0.3410188853740692, 0.013138815760612488], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.702946", "n_pass": [416, 64, 56], "n_token": 29, "loss": [0.8785771131515503, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "A", "i", "]", "A", "[", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 22, 26, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 21, 24]}}
{"prediction": {"error_location": 0.4153735339641571, "repair_targets": [], "repair_candidates": [0.16557395458221436, 0.1479962021112442, 0.14363862574100494, 0.028118610382080078, 0.0025307373143732548, 0.005960123147815466, 0.0070849391631782055, 0.01475905254483223, 0.08168546110391617, 0.02941473387181759, 0.01116216741502285, 0.013366158120334148, 0.046073902398347855, 0.038579780608415604, 0.01659545674920082, 0.03817732259631157, 0.04538620263338089, 0.029377393424510956, 0.025273866951465607, 0.03110397607088089, 0.004087487701326609, 0.06679035723209381, 0.007263575680553913], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.774415", "n_pass": [418, 65, 57], "n_token": 28, "loss": [1.301924705505371, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "A", "i", "]", "A", "i", "]", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 22, 25, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 21, 24]}}
{"prediction": {"error_location": 0.2720077633857727, "repair_targets": [], "repair_candidates": [0.21187223494052887, 0.21823450922966003, 0.18806558847427368, 0.035778988152742386, 0.0035268974024802446, 0.0062223197892308235, 0.008616779930889606, 0.015409653075039387, 0.03906841576099396, 0.017120668664574623, 0.009068020619452, 0.01177478302270174, 0.042912065982818604, 0.03632707521319389, 0.019658289849758148, 0.034042976796627045, 0.02782660908997059, 0.008252264000475407, 0.003884798614308238, 0.005701432935893536, 0.0011151600629091263, 0.052579719573259354, 0.002940785838291049], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:45:40.916186", "n_pass": [421, 67, 58], "n_token": 27, "loss": [1.3161656856536865, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def test_ccode_inline_function(", "x", "g", "x", "x", "g", "x", "g", "x", "x", "g", "x", "A", "i", "g", "x", "x", "x", "x", "g", "A", "i", "]", "A", "i", "]"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [14, 22, 25, 2, 4, 5, 7, 9, 10, 12, 16, 17, 18, 19, 3, 6, 8, 11, 15, 20, 13, 21, 24]}}
{"prediction": {"error_location": 0.2681615650653839, "repair_targets": [], "repair_candidates": [0.23811571300029755, 0.21414625644683838, 0.20480205118656158, 0.03549380600452423, 0.0031751920469105244, 0.006155778653919697, 0.008214847184717655, 0.01450667716562748, 0.03321876749396324, 0.014279750175774097, 0.008137423545122147, 0.01171637512743473, 0.04413759708404541, 0.03727373108267784, 0.018723715096712112, 0.03240100294351578, 0.023375187069177628, 0.005890329834073782, 0.0030979702714830637, 0.004824621602892876, 0.0010648014722391963, 0.03542988747358322, 0.0018185214139521122], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'def test_ccode_inline_function(', 'x', 'g', 'x', 'x', 'g', 'x', 'g', 'x', 'x', 'g', 'x', 'A', 'i', 'g', 'x', 'x', 'x', 'x', 'g', 'A', 'i', ']', 'A', 'i', ']']
