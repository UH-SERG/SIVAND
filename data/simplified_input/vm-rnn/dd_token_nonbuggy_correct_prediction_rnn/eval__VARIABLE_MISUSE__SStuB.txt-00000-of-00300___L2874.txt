
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 16, 6, 24, 4, 22, 8, 26], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Alephbet/gimel/vendor/redis/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2874, "results": {"model": "rnn", "prob": {"loc": [[0.9565578699111938, 3.610017756727757e-06, 7.536159955634503e-06, 3.258630698610432e-08, 6.530340215249453e-07, 2.34357866446544e-08, 4.706079835159471e-06, 1.6218307052895398e-07, 2.2415100829675794e-05, 2.115772446131814e-07, 2.6992386992219508e-08, 1.1902695717935785e-07, 3.986751906381869e-08, 6.019580212068831e-08, 5.1939753831220514e-08, 2.8490454440088797e-08, 1.1029347746216445e-07, 2.184812997185759e-09, 1.2779565849996288e-06, 2.028786383334591e-08, 7.080883733578958e-06, 1.654072548262775e-05, 0.018409736454486847, 6.922249440322048e-07, 0.02454613335430622, 5.023637186241103e-06, 0.00041441552457399666, 1.3711022575080278e-06]], "pointer": [[0.0, 0.0, 0.0034735933877527714, 0.0, 0.7290282249450684, 0.0, 0.2573326528072357, 0.0, 0.005271595437079668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00037411361699923873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00014337513130158186, 0.0, 0.0006544858333654702, 0.0, 0.0037219016812741756, 0.0]], "target": [0.0]}, "loss": [0.044413864612579346, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:30:07.401550", "n_pass": [1, 1, 1], "n_token": 28, "loss": [0.044413864612579346, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 16, 6, 24, 4, 22, 8, 26]}}
{"prediction": {"error_location": 0.9565578699111938, "repair_targets": [], "repair_candidates": [0.0034735933877527714, 0.7290282249450684, 0.2573326528072357, 0.005271595437079668, 0.00037411361699923873, 0.00014337513130158186, 0.0006544858333654702, 0.0037219016812741756], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.462406", "n_pass": [23, 2, 2], "n_token": 25, "loss": [0.6099094152450562, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "#INDENT#", "\"\\n        Overwrite bytes in the value of ``name`` starting at ``offset`` with\\n        ``value``. If ``offset`` plus the length of ``value`` exceeds the\\n        length of the original value, the new value will be larger than before.\\n        If ``offset`` exceeds the length of the original value, null bytes\\n        will be used to pad between the end of the previous value and the start\\n        of what's being injected.\\n\\n        Returns the length of the new string.\\n        \"", "#NEWLINE#", "return", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 13, 6, 21, 4, 19, 8, 23]}}
{"prediction": {"error_location": 0.54339998960495, "repair_targets": [], "repair_candidates": [0.017382314428687096, 0.8254052996635437, 0.15012121200561523, 0.005105317570269108, 0.0005169935757294297, 0.00013024451618548483, 0.00032429330167360604, 0.001014286302961409], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.520243", "n_pass": [24, 3, 3], "n_token": 21, "loss": [0.03263484686613083, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "execute_command", "(", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 17, 4, 15, 8, 19]}}
{"prediction": {"error_location": 0.9678919315338135, "repair_targets": [], "repair_candidates": [0.012835574336349964, 0.6247934103012085, 0.2677924633026123, 0.01843659020960331, 0.0032124193385243416, 0.0023457955103367567, 0.004211519379168749, 0.06637226790189743], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.578091", "n_pass": [44, 4, 4], "n_token": 19, "loss": [0.006494131870567799, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "'SETRANGE'", ",", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 15, 4, 13, 8, 17]}}
{"prediction": {"error_location": 0.993526816368103, "repair_targets": [], "repair_candidates": [0.03770285099744797, 0.22401192784309387, 0.2700803875923157, 0.03286267817020416, 0.004300192929804325, 0.02479768730700016, 0.04330538213253021, 0.36293888092041016], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.634551", "n_pass": [45, 5, 5], "n_token": 17, "loss": [0.0017550080083310604, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def setrange(", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 6, 13, 4, 11, 8, 15]}}
{"prediction": {"error_location": 0.998246431350708, "repair_targets": [], "repair_candidates": [0.006769790779799223, 0.520244300365448, 0.1863545924425125, 0.02296873927116394, 0.004373434465378523, 0.10538745671510696, 0.022906286641955376, 0.13099539279937744], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.690666", "n_pass": [50, 6, 6], "n_token": 16, "loss": [0.006977240554988384, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "name", ",", "offset", ",", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 8, 5, 12, 3, 10, 7, 14]}}
{"prediction": {"error_location": 0.9930470585823059, "repair_targets": [], "repair_candidates": [0.016598282381892204, 0.7176891565322876, 0.10161078721284866, 0.0211112629622221, 0.0020488067530095577, 0.04062066599726677, 0.006374803371727467, 0.09394620358943939], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.749003", "n_pass": [74, 7, 7], "n_token": 15, "loss": [0.025417467579245567, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", ",", "offset", ",", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 4, 11, 2, 9, 6, 13]}}
{"prediction": {"error_location": 0.9749028086662292, "repair_targets": [], "repair_candidates": [0.09254378080368042, 0.8442383408546448, 0.030917705968022346, 0.010776722803711891, 0.002201092429459095, 0.007468581199645996, 0.0012025581672787666, 0.010651255957782269], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.803314", "n_pass": [75, 8, 8], "n_token": 14, "loss": [0.041831959038972855, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", ",", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 10, 2, 8, 5, 12]}}
{"prediction": {"error_location": 0.9590309262275696, "repair_targets": [], "repair_candidates": [0.204201802611351, 0.6953080296516418, 0.023892519995570183, 0.023061808198690414, 0.006869151722639799, 0.007814345881342888, 0.0024668187834322453, 0.03638539835810661], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.857243", "n_pass": [77, 9, 9], "n_token": 13, "loss": [0.10793827474117279, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", ".", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 9, 2, 7, 4, 11]}}
{"prediction": {"error_location": 0.8976829051971436, "repair_targets": [], "repair_candidates": [0.2950519323348999, 0.6312052011489868, 0.018239688128232956, 0.011273270472884178, 0.036414436995983124, 0.002343545900657773, 0.0006185790407471359, 0.004853372927755117], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.911299", "n_pass": [80, 10, 10], "n_token": 12, "loss": [0.039924681186676025, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", "name", ",", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 8, 2, 6, 4, 10]}}
{"prediction": {"error_location": 0.9608618021011353, "repair_targets": [], "repair_candidates": [0.030873334035277367, 0.5203893184661865, 0.19540515542030334, 0.08794312179088593, 0.15041016042232513, 0.009680678136646748, 0.0008597316918894649, 0.004438456147909164], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:07.964484", "n_pass": [82, 11, 11], "n_token": 11, "loss": [0.11635128408670425, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", "name", "offset", ",", "value", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 7, 2, 6, 4, 9]}}
{"prediction": {"error_location": 0.8901623487472534, "repair_targets": [], "repair_candidates": [0.03627345710992813, 0.703616738319397, 0.16200149059295654, 0.0702410489320755, 0.020447785034775734, 0.0030399064999073744, 0.00150294229388237, 0.002876648213714361], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:30:08.070140", "n_pass": [86, 13, 12], "n_token": 10, "loss": [0.2114241123199463, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "name", "offset", "value", "self", "name", "offset", ",", "value"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 3, 7, 2, 6, 4, 9]}}
{"prediction": {"error_location": 0.8094306588172913, "repair_targets": [], "repair_candidates": [0.042960360646247864, 0.7210791707038879, 0.15727660059928894, 0.06189758703112602, 0.013066896237432957, 0.0017627167981117964, 0.0006447728374041617, 0.001311937696300447], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'name', 'offset', 'value', 'self', 'name', 'offset', ',', 'value']
