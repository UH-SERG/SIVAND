
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"], "error_location": [0], "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 148, 155, 2, 20, 33, 91, 113, 124, 137, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "StackHut/stackhut/stackhut_toolkit/common/barrister/runtime.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2311, "results": {"model": "rnn", "prob": {"loc": [[0.5184071660041809, 2.6921329663309734e-06, 1.0682208539947169e-06, 1.2135076055130867e-08, 4.890121090284083e-07, 2.0971290481952565e-08, 2.938226941751054e-07, 1.7781283645490475e-07, 2.778622274490772e-07, 1.0037260977924234e-07, 6.5540568527922e-08, 7.063646876304119e-07, 1.8980064453444356e-07, 8.205137191907852e-08, 3.797301673102993e-08, 5.559685973821615e-07, 1.7380756389684393e-06, 4.203145635983674e-06, 4.9869822760229e-06, 1.1858541171250181e-07, 1.2278695749046165e-06, 1.5369108652407704e-08, 7.976141525034564e-09, 3.0552314456144813e-07, 6.498635851670542e-09, 2.475664118151144e-08, 9.481890970164386e-07, 7.634758731001057e-06, 2.0323213334449974e-07, 2.9958324375911616e-05, 3.2526879749639193e-06, 4.094908945262432e-06, 1.0337306122210066e-07, 3.2745216316243386e-08, 2.504349616572199e-08, 6.96373847475229e-09, 8.453606881175801e-08, 1.208776634342712e-08, 1.0717933207615715e-08, 1.409771215321598e-07, 1.6800048285858793e-07, 1.225800332349536e-07, 1.3230048807599815e-06, 1.0749118928288226e-07, 0.020750682801008224, 8.47332216835639e-07, 4.798529289473663e-07, 3.8818859593447996e-07, 1.2660033235079027e-06, 8.563206392864231e-06, 8.04950488486611e-08, 1.4784458244321286e-06, 2.037531203313847e-06, 0.00903858058154583, 4.55034987467684e-09, 7.007608655840158e-05, 9.479449545324314e-07, 9.582006299524437e-08, 1.4093848221818916e-06, 1.8296623238711618e-07, 2.272494725730212e-08, 1.3525462918551057e-06, 5.0621612899703905e-05, 4.669260306400247e-06, 0.1302260011434555, 7.56736881157849e-07, 4.813811074200203e-07, 0.00010010528058046475, 3.6507861977952416e-07, 3.307761176074564e-07, 2.544716835473082e-06, 2.58633612304493e-08, 4.890046625405375e-07, 4.520729568469051e-09, 9.920617230818607e-06, 4.5777301949101457e-08, 1.4731456303707091e-06, 3.4989304786847697e-09, 1.3342233842195128e-06, 4.946657838900137e-08, 5.680537817909226e-09, 5.9079630077008005e-09, 9.811869539078089e-09, 9.030563887790777e-07, 1.7428043008749228e-08, 6.616270411541336e-07, 4.910309598926688e-07, 4.630937855409911e-09, 1.869161536660613e-07, 5.746226605651827e-09, 3.932229830638789e-08, 1.646039163460955e-05, 1.0281025808467348e-08, 4.206060921774224e-08, 4.1387753668686855e-08, 0.005516799632459879, 2.582299174491709e-08, 0.02457849122583866, 1.8051457573164953e-06, 5.455352791727819e-08, 3.574580887288903e-06, 7.976366759976372e-06, 0.22513122856616974, 1.1799479580076877e-06, 5.899984785173729e-07, 9.57936208578758e-07, 1.4318449757411145e-05, 1.3486145178376319e-07, 3.5538937481760513e-06, 2.7615158160188003e-06, 1.3491413319854928e-08, 1.7235754512512358e-07, 2.681075805810451e-09, 4.557114152703434e-06, 3.019664163161906e-08, 4.899155925386367e-08, 1.5479794512884837e-07, 0.03438357636332512, 3.411054194657481e-08, 0.02043764851987362, 5.445355100164306e-07, 1.4281102949098567e-06, 8.542134310118854e-05, 6.166912953631254e-07, 2.1773434127680957e-05, 2.270744303700667e-08, 6.418053288825831e-08, 1.1853708201670088e-06, 2.9040382543144005e-08, 8.045007859891484e-08, 8.872131729731336e-06, 3.3846179576357827e-05, 2.0989268989524135e-07, 1.9000330212293193e-05, 5.040889845986385e-06, 9.864670573733747e-06, 5.824920279451362e-08, 1.7375674588038237e-07, 5.998333385548449e-09, 1.349872214007064e-08, 1.1296716451170141e-07, 2.8381840877500508e-08, 1.251302794713638e-08, 2.220782107542618e-06, 2.4008670607145177e-06, 4.933113814331591e-06, 5.924195534134924e-07, 1.457757115019831e-08, 0.007969128899276257, 3.4760631706376444e-08, 2.5644001766522706e-07, 3.7096364735589304e-07, 6.714567462040577e-07, 1.3920133312694816e-07, 2.941641525922023e-07, 0.0029694365803152323]], "pointer": [[0.0, 0.0, 0.0011970802443102002, 0.0, 0.03244414180517197, 0.0, 0.385347843170166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.052040182054042816, 0.0, 0.0, 0.0, 0.0, 0.00039007255691103637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.688302578870207e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011111253406852484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1849849820137024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02853437513113022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07739665359258652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03804122656583786, 0.0, 0.0, 9.218842751579359e-05, 0.0, 0.0, 0.0, 0.0007851860136725008, 0.0, 0.0017614138778299093, 0.0, 0.0, 0.1316152960062027, 0.0, 0.0001046190009219572, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043822258710861206, 0.0, 5.432865509646945e-05, 0.0, 0.0, 0.0, 0.016588514670729637, 0.0, 0.0006214149761945009, 0.0, 0.0, 0.0, 0.0, 0.0016465726075693965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003576316812541336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007352991378866136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002807123528327793]], "target": [0.0]}, "loss": [0.6569944024085999, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:13:09.700782", "n_pass": [1, 1, 1], "n_token": 156, "loss": [0.6569944024085999, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 148, 155, 2, 20, 33, 91, 113, 124, 137, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117]}}
{"prediction": {"error_location": 0.5184071660041809, "repair_targets": [], "repair_candidates": [0.0011970802443102002, 0.03244414180517197, 0.385347843170166, 0.052040182054042816, 0.00039007255691103637, 4.688302578870207e-05, 0.0011111253406852484, 0.1849849820137024, 0.02853437513113022, 0.07739665359258652, 0.03804122656583786, 9.218842751579359e-05, 0.0007851860136725008, 0.0017614138778299093, 0.1316152960062027, 0.0001046190009219572, 0.043822258710861206, 5.432865509646945e-05, 0.016588514670729637, 0.0006214149761945009, 0.0016465726075693965, 0.0003576316812541336, 0.0007352991378866136, 0.0002807123528327793], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:09.966870", "n_pass": [57, 3, 2], "n_token": 146, "loss": [0.6328119039535522, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Response: %s'", "%", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 138, 145, 2, 20, 33, 91, 113, 124, 127, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117]}}
{"prediction": {"error_location": 0.5310962796211243, "repair_targets": [], "repair_candidates": [0.0007885866798460484, 0.02670884132385254, 0.3488837480545044, 0.03659722954034805, 0.00024473111261613667, 3.915839261026122e-05, 0.00141883734613657, 0.1687798649072647, 0.05509069189429283, 0.11144482344388962, 0.04930747300386429, 0.0001009120314847678, 0.0006702876999042928, 0.0015895272372290492, 0.13598643243312836, 6.456879054894671e-05, 0.03932272270321846, 6.863938324386254e-05, 0.021070148795843124, 0.0012269543949514627, 0.00012193251313874498, 7.483742228941992e-05, 0.00017984179430641234, 0.0002192538377130404], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.221172", "n_pass": [103, 5, 3], "n_token": 141, "loss": [0.6416739821434021, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [15, 72, 88, 111, 133, 140, 2, 20, 33, 91, 113, 124, 127, 95, 100, 6, 97, 119, 4, 44, 53, 64, 102, 117]}}
{"prediction": {"error_location": 0.5264104604721069, "repair_targets": [], "repair_candidates": [0.0011194138787686825, 0.030545227229595184, 0.37861883640289307, 0.0342387892305851, 0.00030726013937965035, 4.295196777093224e-05, 0.0012818670365959406, 0.1870296448469162, 0.04262886941432953, 0.10640939325094223, 0.048566896468400955, 0.0001244381710421294, 0.0005456337239593267, 0.0013347993372008204, 0.09991488605737686, 8.236776193371043e-05, 0.039310213178396225, 6.033986937836744e-05, 0.02602768875658512, 0.0011236837599426508, 0.00017260850290767848, 9.57915181061253e-05, 0.00012751991744153202, 0.0002908400783780962], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.348953", "n_pass": [108, 6, 4], "n_token": 137, "loss": [0.5755338668823242, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", ".", "log", ".", "isEnabledFor", "(", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 68, 84, 107, 129, 136, 2, 16, 29, 87, 109, 120, 123, 91, 96, 6, 93, 115, 4, 40, 49, 60, 98, 113]}}
{"prediction": {"error_location": 0.5624045729637146, "repair_targets": [], "repair_candidates": [0.0012893819948658347, 0.04052279517054558, 0.29846736788749695, 0.03485382720828056, 0.0003181055362801999, 6.809238402638584e-05, 0.0016960782231763005, 0.13686567544937134, 0.05899772047996521, 0.10988174378871918, 0.056804195046424866, 0.00012810356565751135, 0.0008536582463420928, 0.0021565579809248447, 0.19357924163341522, 0.00010945644316961989, 0.03662745654582977, 7.995745545485988e-05, 0.024281693622469902, 0.0015618434408679605, 0.00015857226389925927, 0.00010241084964945912, 0.0002499614201951772, 0.00034611328737810254], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.472073", "n_pass": [111, 7, 5], "n_token": 132, "loss": [0.6371902823448181, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", ".", "debug", "(", "(", "'Request: %s'", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 63, 79, 102, 124, 131, 2, 16, 24, 82, 104, 115, 118, 86, 91, 6, 88, 110, 4, 35, 44, 55, 93, 108]}}
{"prediction": {"error_location": 0.5287760496139526, "repair_targets": [], "repair_candidates": [0.0013204891001805663, 0.05620440095663071, 0.3104030191898346, 0.04890653118491173, 0.00288400542922318, 0.00011312306742183864, 0.0037730569019913673, 0.1803482323884964, 0.04025465250015259, 0.10080188512802124, 0.05503173545002937, 0.00014541810378432274, 0.0007868810789659619, 0.0018452090444043279, 0.13006258010864258, 0.0001353224943159148, 0.04160529747605324, 6.991770351305604e-05, 0.022981857880949974, 0.0013576451456174254, 0.00023349473485723138, 0.00011207084025954828, 0.0002625628840178251, 0.0003606131358537823], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.713081", "n_pass": [114, 9, 6], "n_token": 127, "loss": [0.6540647745132446, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 58, 74, 97, 119, 126, 2, 16, 24, 77, 99, 110, 113, 81, 86, 6, 83, 105, 4, 30, 39, 50, 88, 103]}}
{"prediction": {"error_location": 0.5199281573295593, "repair_targets": [], "repair_candidates": [0.0013830295065417886, 0.0579642616212368, 0.2891354560852051, 0.05167407914996147, 0.0026595499366521835, 0.0003146849339827895, 0.003432376543059945, 0.16134831309318542, 0.02355085127055645, 0.09026014804840088, 0.05121752992272377, 0.00012853466614615172, 0.0009903413010761142, 0.0027896403335034847, 0.19628502428531647, 0.0002720487245824188, 0.03772059828042984, 9.359379328088835e-05, 0.025818737223744392, 0.0019264045404270291, 0.00023619858257006854, 0.00010731557995313779, 0.000293031771434471, 0.0003982435155194253], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.832038", "n_pass": [116, 10, 7], "n_token": 122, "loss": [0.6636292934417725, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 53, 69, 92, 114, 121, 2, 16, 24, 72, 94, 105, 108, 76, 81, 6, 78, 100, 4, 30, 34, 45, 83, 98]}}
{"prediction": {"error_location": 0.5149788856506348, "repair_targets": [], "repair_candidates": [0.0017406748374924064, 0.07388988882303238, 0.3673100471496582, 0.08372420072555542, 0.0028509940020740032, 0.0007852966082282364, 0.005469323601573706, 0.10688536614179611, 0.024012872949242592, 0.07999829202890396, 0.049483802169561386, 0.00013177469372749329, 0.0016716925892978907, 0.005215631332248449, 0.1347675621509552, 0.0003203415544703603, 0.03175743296742439, 7.010397530393675e-05, 0.026041749864816666, 0.0026868938002735376, 0.0001859671901911497, 9.735155617818236e-05, 0.00038753365515731275, 0.000515203399118036], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:10.948390", "n_pass": [118, 11, 8], "n_token": 117, "loss": [0.8052768707275391, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "<", "1", ")", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 48, 64, 87, 109, 116, 2, 16, 24, 67, 89, 100, 103, 71, 76, 6, 73, 95, 4, 30, 34, 40, 78, 93]}}
{"prediction": {"error_location": 0.4469641149044037, "repair_targets": [], "repair_candidates": [0.0012229025596752763, 0.05140683054924011, 0.5492064952850342, 0.09488795697689056, 0.0024371715262532234, 0.00035821774508804083, 0.0011239222949370742, 0.012707997113466263, 0.010960977524518967, 0.07974953204393387, 0.05594417825341225, 0.00012085128400940448, 0.002151553286239505, 0.00550454156473279, 0.07720673829317093, 0.00022096502652857453, 0.024294277653098106, 6.0752372519345954e-05, 0.026366839185357094, 0.002959403209388256, 0.00014808139530941844, 7.959927461342886e-05, 0.0003809867484960705, 0.0004993016482330859], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.061806", "n_pass": [120, 12, 9], "n_token": 112, "loss": [0.6147984266281128, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", "None", ",", "ERR_INVALID_REQ", ",", "'Invalid Request. Empty batch.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 59, 82, 104, 111, 2, 16, 24, 62, 84, 95, 98, 66, 71, 6, 68, 90, 4, 30, 34, 40, 73, 88]}}
{"prediction": {"error_location": 0.5407498478889465, "repair_targets": [], "repair_candidates": [0.001184704015031457, 0.0518789142370224, 0.485948771238327, 0.09852614253759384, 0.001758130849339068, 0.0004370117385406047, 0.001622537849470973, 0.02320903353393078, 0.004082867875695229, 0.03150458633899689, 0.06357958912849426, 0.00013126898556947708, 0.0012327992590144277, 0.003413554048165679, 0.16133716702461243, 0.0001529211294837296, 0.03774967044591904, 6.643727829214185e-05, 0.028938833624124527, 0.002314997836947441, 0.00020637590205296874, 0.0001040620991261676, 0.00025803176686167717, 0.00036162702599540353], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.174154", "n_pass": [122, 13, 10], "n_token": 107, "loss": [0.640964686870575, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 54, 77, 99, 106, 2, 16, 24, 57, 79, 90, 93, 61, 66, 6, 63, 85, 4, 30, 34, 40, 68, 83]}}
{"prediction": {"error_location": 0.5267840027809143, "repair_targets": [], "repair_candidates": [0.0014514990616589785, 0.05445348471403122, 0.4763242304325104, 0.09937803447246552, 0.0019929984118789434, 0.0004986866842955351, 0.0018821163102984428, 0.021368885412812233, 0.004630833398550749, 0.04335017129778862, 0.11928188055753708, 0.00015574220742564648, 0.0014053875347599387, 0.0036571440286934376, 0.09637501835823059, 0.00020476660574786365, 0.038304198533296585, 8.231493848143145e-05, 0.03170697018504143, 0.0024962041061371565, 0.00022850742971058935, 0.00010689998453017324, 0.0002826058189384639, 0.0003813309012912214], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.390834", "n_pass": [128, 15, 11], "n_token": 102, "loss": [0.6161830425262451, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 54, 72, 94, 101, 2, 16, 24, 57, 74, 85, 88, 61, 66, 6, 63, 80, 4, 30, 34, 40, 68, 78]}}
{"prediction": {"error_location": 0.540001630783081, "repair_targets": [], "repair_candidates": [0.0012328563025221229, 0.04145488888025284, 0.3886377811431885, 0.07757958769798279, 0.0015198873588815331, 0.00039428664604201913, 0.0014449519803747535, 0.01253590825945139, 0.002589860698208213, 0.03259558230638504, 0.24911201000213623, 0.0002220622409367934, 0.0008400802034884691, 0.0018091655801981688, 0.09496690332889557, 0.0002851275494322181, 0.07675184309482574, 6.408493936760351e-05, 0.013349717482924461, 0.0015839030966162682, 0.00020975111692678183, 0.00010404839849798009, 0.0003263250400777906, 0.00038937877980060875], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.606106", "n_pass": [145, 17, 12], "n_token": 97, "loss": [0.8577335476875305, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "=", "err_response", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 49, 67, 89, 96, 2, 16, 24, 52, 69, 80, 83, 56, 61, 6, 58, 75, 4, 30, 34, 40, 63, 73]}}
{"prediction": {"error_location": 0.42412224411964417, "repair_targets": [], "repair_candidates": [0.0011546955211088061, 0.038755495101213455, 0.41000398993492126, 0.0795569196343422, 0.001462771208025515, 0.0003510955430101603, 0.001188857713714242, 0.00873230304569006, 0.00353061780333519, 0.20581716299057007, 0.11700793355703354, 0.00022030205582268536, 0.000888262817170471, 0.0017920297104865313, 0.06088827922940254, 0.00026136465021409094, 0.053612664341926575, 4.9179361667484045e-05, 0.012153630144894123, 0.0015952017856761813, 0.00015170045662671328, 8.20526183815673e-05, 0.0003526895889081061, 0.0003907815844286233], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.818193", "n_pass": [208, 19, 13], "n_token": 95, "loss": [0.5589132905006409, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "(", "#NEWLINE#", "#INDENT#", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 47, 65, 87, 94, 2, 16, 24, 50, 67, 78, 81, 54, 59, 6, 56, 73, 4, 30, 34, 40, 61, 71]}}
{"prediction": {"error_location": 0.5718302726745605, "repair_targets": [], "repair_candidates": [0.001671927864663303, 0.05353289097547531, 0.511161744594574, 0.10461439937353134, 0.0019513514125719666, 0.0004994785413146019, 0.0018308067228645086, 0.014446038752794266, 0.005932586267590523, 0.006588647607713938, 0.08550980687141418, 0.00022624385019298643, 0.0007816388970240951, 0.002002541907131672, 0.10686887055635452, 0.0003582144563551992, 0.08318033069372177, 8.003484981600195e-05, 0.01558223832398653, 0.0018550340319052339, 0.00026334429276175797, 0.00013353824033401906, 0.00042348692659288645, 0.0005047910381108522], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:11.921918", "n_pass": [209, 20, 14], "n_token": 92, "loss": [0.4850742220878601, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "]", "#NEWLINE#", "#UNINDENT#", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 62, 84, 91, 2, 16, 24, 47, 64, 75, 78, 51, 56, 6, 53, 70, 4, 30, 34, 40, 58, 68]}}
{"prediction": {"error_location": 0.6156514286994934, "repair_targets": [], "repair_candidates": [0.0012745560379698873, 0.041290003806352615, 0.4735042452812195, 0.08938057720661163, 0.0014195585390552878, 0.0003561442717909813, 0.0012396223610267043, 0.009535289369523525, 0.0048163579776883125, 0.04068576171994209, 0.04990612715482712, 0.00016358257562387735, 0.0007523230742663145, 0.0020146865863353014, 0.1964445859193802, 0.00026886104024015367, 0.07184669375419617, 6.887021299917251e-05, 0.012274633161723614, 0.0016080429777503014, 0.00022727367468178272, 0.00011194165563210845, 0.0003645554243121296, 0.00044569288729690015], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.024663", "n_pass": [215, 21, 15], "n_token": 89, "loss": [0.4397420585155487, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", ".", "_call_and_format", "(", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 59, 81, 88, 2, 16, 24, 47, 61, 72, 75, 51, 56, 6, 53, 67, 4, 30, 34, 40, 58, 65]}}
{"prediction": {"error_location": 0.6442025899887085, "repair_targets": [], "repair_candidates": [0.0006985975196585059, 0.023306986317038536, 0.12659695744514465, 0.026210693642497063, 0.0007398742600344121, 0.00018620128685142845, 0.0003050011582672596, 0.0035650853533297777, 0.0030754772014915943, 0.01597859524190426, 0.010858166962862015, 6.0894562921021134e-05, 0.00021254573948681355, 0.00014010204176884145, 0.778404176235199, 0.0009671513689681888, 0.0014773162547498941, 5.7473698689136654e-05, 0.006265969481319189, 0.0005073900683782995, 0.0001461414503864944, 6.487270002253354e-05, 7.614862261107191e-05, 9.830841736402363e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.125541", "n_pass": [217, 22, 16], "n_token": 86, "loss": [0.4526345729827881, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 59, 78, 85, 2, 16, 24, 47, 61, 69, 72, 51, 56, 6, 53, 64, 4, 30, 34, 40, 58, 62]}}
{"prediction": {"error_location": 0.63595050573349, "repair_targets": [], "repair_candidates": [0.0005898043746128678, 0.026063600555062294, 0.09530901163816452, 0.02150806039571762, 0.0007577009382657707, 0.00017585321620572358, 0.0002567965420894325, 0.00426715612411499, 0.002132341032847762, 0.02873362973332405, 0.02222089096903801, 9.805821173358709e-05, 0.00016880153270903975, 7.439329783665016e-05, 0.7613744735717773, 0.006628203671425581, 0.01805993728339672, 0.006571092177182436, 0.0016676082741469145, 0.0027858326211571693, 0.00018560238822828978, 0.00010440692130941898, 0.00013403213233686984, 0.0001326243218500167], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.225928", "n_pass": [219, 23, 17], "n_token": 83, "loss": [0.636567234992981, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "log", ".", "str", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 59, 75, 82, 2, 16, 24, 47, 61, 66, 69, 51, 56, 6, 53, 64, 4, 30, 34, 40, 58, 62]}}
{"prediction": {"error_location": 0.5291056036949158, "repair_targets": [], "repair_candidates": [0.00040826655458658934, 0.02429819107055664, 0.04490130394697189, 0.014326652511954308, 0.0005967161851003766, 0.00012975568824913353, 0.0001531763409730047, 0.004084760323166847, 0.0016547865234315395, 0.03599906712770462, 0.03475714847445488, 5.9804788179462776e-05, 0.0001514404284534976, 6.270752055570483e-05, 0.8278412222862244, 0.0021521993912756443, 0.004230756312608719, 0.002558017848059535, 0.00046087789814919233, 0.0008562870207242668, 0.0001072954255505465, 5.951994899078272e-05, 6.835877138655633e-05, 8.163259190041572e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.323767", "n_pass": [222, 24, 18], "n_token": 80, "loss": [0.6610946655273438, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 59, 72, 79, 2, 16, 24, 47, 61, 66, 69, 51, 56, 6, 53, 64, 4, 30, 34, 40, 58, 62]}}
{"prediction": {"error_location": 0.5162858963012695, "repair_targets": [], "repair_candidates": [0.0005813092575408518, 0.03375298157334328, 0.06939870119094849, 0.019617384299635887, 0.0008771445136517286, 0.00019067162065766752, 0.0002677642332855612, 0.0047151162289083, 0.0020313665736466646, 0.050577979534864426, 0.03767699748277664, 7.534288306487724e-05, 0.00020236120326444507, 8.632611570646986e-05, 0.7499693632125854, 0.006505386438220739, 0.013321246020495892, 0.00533435819670558, 0.0018640760099515319, 0.002256485167890787, 0.00019194102787878364, 6.865113391540945e-05, 0.0002348223642911762, 0.00020226453489158303], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.419742", "n_pass": [224, 25, 19], "n_token": 77, "loss": [0.6222590804100037, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#INDENT#", "'\\n        Executes a Barrister request and returns a response.  If the request is a list, then the\\n        response will also be a list.  If the request is an empty list, a RpcException is raised.\\n\\n        :Parameters:\\n          req\\n            The request. Either a list of dicts, or a single dict.\\n          props\\n            Application defined properties to set on RequestContext for use with filters.\\n            For example: authentication headers.  Must be a dict.\\n        '", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 43, 44, 59, 72, 76, 2, 16, 24, 47, 61, 66, 69, 51, 56, 6, 53, 64, 4, 30, 34, 40, 58, 62]}}
{"prediction": {"error_location": 0.5367306470870972, "repair_targets": [], "repair_candidates": [0.0004224219301249832, 0.03595438972115517, 0.07914746552705765, 0.022669009864330292, 0.0009621354984119534, 0.00018698883650358766, 0.0003692069149110466, 0.006051814649254084, 0.002205330180004239, 0.035122353583574295, 0.026357879862189293, 7.285467290785164e-05, 0.0002845230628736317, 0.000114662732812576, 0.7621836066246033, 0.006119430065155029, 0.008897067978978157, 0.00737354438751936, 0.001961155328899622, 0.002399170072749257, 0.0007621541153639555, 0.0002337168698431924, 0.00011232556425966322, 3.67852917406708e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.514968", "n_pass": [230, 26, 20], "n_token": 75, "loss": [0.6575600504875183, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "=", "None", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 41, 42, 57, 70, 74, 2, 14, 22, 45, 59, 64, 67, 49, 54, 6, 51, 62, 4, 28, 32, 38, 56, 60]}}
{"prediction": {"error_location": 0.5181140303611755, "repair_targets": [], "repair_candidates": [0.0003550038381945342, 0.03557703644037247, 0.13674262166023254, 0.048028212040662766, 0.0020004641264677048, 0.00039044354343786836, 0.0006699635996483266, 0.012800437398254871, 0.00415758416056633, 0.050530191510915756, 0.03442211449146271, 0.00011891491885762662, 0.00036956972326152027, 0.00014262607146520168, 0.638317883014679, 0.0073880404233932495, 0.009296179749071598, 0.010247797705233097, 0.002727359300479293, 0.0040118154138326645, 0.0010748626664280891, 0.00035182811552658677, 0.00021940114675089717, 5.966930621070787e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.609708", "n_pass": [232, 27, 21], "n_token": 73, "loss": [0.6320589184761047, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "#NEWLINE#", "if", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 39, 40, 55, 68, 72, 2, 12, 20, 43, 57, 62, 65, 47, 52, 6, 49, 60, 4, 26, 30, 36, 54, 58]}}
{"prediction": {"error_location": 0.5314964652061462, "repair_targets": [], "repair_candidates": [0.00011387111590011045, 0.01174856722354889, 0.059032730758190155, 0.013005061075091362, 0.0007398835732601583, 0.00016880496696103364, 0.0003865012258756906, 0.014713733457028866, 0.003411500947549939, 0.019621996209025383, 0.01313760969787836, 4.479349445318803e-05, 0.00033504635212011635, 0.00011690748942783102, 0.8374084234237671, 0.0064630587585270405, 0.0062185367569327354, 0.006885023321956396, 0.0014342095237225294, 0.003921602852642536, 0.0006087457295507193, 0.00018994897254742682, 0.0002488367317710072, 4.4603202695725486e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.701967", "n_pass": [233, 28, 22], "n_token": 71, "loss": [0.47779977321624756, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", ".", "DEBUG", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 37, 38, 53, 66, 70, 2, 10, 18, 41, 55, 60, 63, 45, 50, 6, 47, 58, 4, 24, 28, 34, 52, 56]}}
{"prediction": {"error_location": 0.6201463341712952, "repair_targets": [], "repair_candidates": [0.00012927450006827712, 0.014105821959674358, 0.056345853954553604, 0.001101893838495016, 0.0004210383049212396, 9.49173845583573e-05, 0.00010699169069994241, 0.004320151172578335, 0.0013945612590759993, 0.018966346979141235, 0.01586282253265381, 4.0666469431016594e-05, 0.00013023402425460517, 5.97070757066831e-05, 0.8697127103805542, 0.0034994659945368767, 0.006674305070191622, 0.004628162831068039, 0.0005938508547842503, 0.0011214637197554111, 0.00044968308066017926, 0.0001383074704790488, 7.66234370530583e-05, 2.500357004464604e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.787850", "n_pass": [235, 29, 23], "n_token": 69, "loss": [0.6400859951972961, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 35, 36, 51, 64, 68, 2, 10, 16, 39, 53, 58, 61, 43, 48, 6, 45, 56, 4, 22, 26, 32, 50, 54]}}
{"prediction": {"error_location": 0.5272471308708191, "repair_targets": [], "repair_candidates": [0.00013468426186591387, 0.04505351185798645, 0.04947258532047272, 0.00016501639038324356, 0.0004210852785035968, 6.185796519275755e-05, 0.00011294242722215131, 0.0035577709786593914, 0.001069111516699195, 0.022880755364894867, 0.014417605474591255, 4.795651329914108e-05, 0.0001512284216005355, 5.431061435956508e-05, 0.8432193994522095, 0.005013829562813044, 0.008847816847264767, 0.0028761413414031267, 0.00041387000237591565, 0.0012309401063248515, 0.0005333443405106664, 0.00013948975538369268, 9.477260027779266e-05, 3.0003724532434717e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.872176", "n_pass": [236, 30, 24], "n_token": 67, "loss": [0.8513939380645752, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "#NEWLINE#", "#INDENT#", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 33, 34, 49, 62, 66, 2, 10, 14, 37, 51, 56, 59, 41, 46, 6, 43, 54, 4, 20, 24, 30, 48, 52]}}
{"prediction": {"error_location": 0.42681950330734253, "repair_targets": [], "repair_candidates": [0.00015319607337005436, 0.06821516901254654, 0.05879070237278938, 9.166854579234496e-05, 0.0004085209220647812, 2.305427369719837e-05, 0.0001294897956540808, 0.005136978346854448, 0.0009257581550627947, 0.022890157997608185, 0.017485925927758217, 4.392176924739033e-05, 0.00021879482665099204, 6.715983909089118e-05, 0.8062641620635986, 0.0064724101684987545, 0.007724336348474026, 0.001966258743777871, 0.0003040653537027538, 0.0017041171668097377, 0.0006289940793067217, 0.0001454373268643394, 0.00016498246986884624, 4.4758329750038683e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:12.957111", "n_pass": [237, 31, 25], "n_token": 65, "loss": [0.6791362166404724, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "log", "%", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 31, 32, 47, 60, 64, 2, 10, 12, 35, 49, 54, 57, 39, 44, 6, 41, 52, 4, 18, 22, 28, 46, 50]}}
{"prediction": {"error_location": 0.5070547461509705, "repair_targets": [], "repair_candidates": [0.00017053984629455954, 0.03401864320039749, 0.07180225849151611, 0.00019458253518678248, 0.00020538648823276162, 4.1019986383616924e-05, 9.416318061994389e-05, 0.004047054331749678, 0.0015037570847198367, 0.029596492648124695, 0.020075896754860878, 4.870370321441442e-05, 0.00021216519235167652, 9.227164264302701e-05, 0.8142969012260437, 0.005195378791540861, 0.010961208492517471, 0.0034104003570973873, 0.0005306479870341718, 0.0024339165538549423, 0.0006835986278019845, 0.00015646258543711156, 0.00017803185619413853, 5.0480422942200676e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.039026", "n_pass": [239, 32, 26], "n_token": 63, "loss": [0.5873242616653442, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "str", "(", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 29, 30, 45, 58, 62, 2, 10, 12, 33, 47, 52, 55, 37, 42, 6, 39, 50, 4, 16, 20, 26, 44, 48]}}
{"prediction": {"error_location": 0.555812418460846, "repair_targets": [], "repair_candidates": [0.00012685991532634944, 0.01746434159576893, 0.0522335022687912, 0.0005211717798374593, 0.00024309891159646213, 1.5394814909086563e-05, 0.00013114963076077402, 0.0020998658146709204, 0.0017638952704146504, 0.022402817383408546, 0.012973381206393242, 4.212830390315503e-05, 0.00021986800129525363, 9.31250469875522e-05, 0.8660976886749268, 0.005285247229039669, 0.008999318815767765, 0.00445507513359189, 0.0007024820079095662, 0.0031623768154531717, 0.0005764412926509976, 0.00016827520448714495, 0.00017903938714880496, 4.345668639871292e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.120037", "n_pass": [240, 33, 27], "n_token": 61, "loss": [0.6841609477996826, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "isinstance", "(", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 27, 28, 43, 56, 60, 2, 10, 12, 31, 45, 50, 53, 35, 40, 6, 37, 48, 4, 14, 18, 24, 42, 46]}}
{"prediction": {"error_location": 0.5045133829116821, "repair_targets": [], "repair_candidates": [0.00017395467148162425, 0.027030929923057556, 0.06008104234933853, 0.00022830329544376582, 0.0001170135146821849, 3.0020364647498354e-05, 0.0005535195232369006, 0.0020460498053580523, 0.0010253597283735871, 0.02487052232027054, 0.019945934414863586, 3.234128234907985e-05, 0.0001624111901037395, 6.629510608036071e-05, 0.8444791436195374, 0.004533644765615463, 0.00983887817710638, 0.0023804751690477133, 0.0002777191111817956, 0.0014026745921000838, 0.00041124195558950305, 0.00011979835835518315, 0.00015236352919600904, 4.032975630252622e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.201017", "n_pass": [242, 34, 28], "n_token": 59, "loss": [0.6916781663894653, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "list", "(", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 25, 26, 41, 54, 58, 2, 10, 12, 29, 43, 48, 51, 33, 38, 6, 35, 46, 4, 14, 16, 22, 40, 44]}}
{"prediction": {"error_location": 0.5007351040840149, "repair_targets": [], "repair_candidates": [0.00029899048968218267, 0.06347372382879257, 0.056548137217760086, 0.00015658758638892323, 7.833409472368658e-05, 4.097593773622066e-05, 0.0010320923756808043, 0.0015441854484379292, 0.0005099496920593083, 0.022146273404359818, 0.017823148518800735, 3.3130203519249335e-05, 0.00021279141947161406, 9.232829324901104e-05, 0.8057142496109009, 0.009050694294273853, 0.01368512213230133, 0.003787458408623934, 0.0006191783468239009, 0.0020470411982387304, 0.0007629392785020173, 0.00014481156540568918, 0.00015043120947666466, 4.735894617624581e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.282124", "n_pass": [244, 35, 29], "n_token": 57, "loss": [0.7065862417221069, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "len", "(", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 23, 24, 39, 52, 56, 2, 10, 12, 27, 41, 46, 49, 31, 36, 6, 33, 44, 4, 14, 16, 20, 38, 42]}}
{"prediction": {"error_location": 0.493325412273407, "repair_targets": [], "repair_candidates": [0.00024752182071097195, 0.05170335993170738, 0.04944635555148125, 0.0001793800765881315, 8.595282270107418e-05, 4.0903487388277426e-05, 0.000897812657058239, 0.0008579080458730459, 0.0008210574160329998, 0.02654750645160675, 0.014441276900470257, 2.6732153855846263e-05, 0.00015874758537393063, 8.885217539500445e-05, 0.8268795013427734, 0.007954144850373268, 0.012616343796253204, 0.003393116407096386, 0.0005251989350654185, 0.0021606809459626675, 0.0006332281045615673, 0.00011969271145062521, 0.000135265858261846, 3.954099156544544e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.360596", "n_pass": [245, 36, 30], "n_token": 55, "loss": [0.7593714594841003, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", ")", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 21, 22, 37, 50, 54, 2, 10, 12, 25, 39, 44, 47, 29, 34, 6, 31, 42, 4, 14, 16, 18, 36, 40]}}
{"prediction": {"error_location": 0.4679604768753052, "repair_targets": [], "repair_candidates": [0.00016647293523419648, 0.03443586826324463, 0.03173096850514412, 0.00018215201271232218, 8.043314301175997e-05, 3.353776992298663e-05, 0.0010996480705216527, 0.0024486654438078403, 0.00288857938721776, 0.027346499264240265, 0.021923743188381195, 1.7457405192544684e-05, 0.0001129759184550494, 4.627166345017031e-05, 0.8548944592475891, 0.0049064746126532555, 0.012618119828402996, 0.002314675832167268, 0.00035611598286777735, 0.0017101489938795567, 0.0004228582256473601, 8.938468818087131e-05, 0.00013853335985913873, 3.6061126593267545e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.441394", "n_pass": [313, 37, 31], "n_token": 54, "loss": [0.8023185729980469, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "#INDENT#", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 20, 21, 36, 49, 53, 2, 10, 12, 24, 38, 43, 46, 28, 33, 6, 30, 41, 4, 14, 16, 18, 35, 39]}}
{"prediction": {"error_location": 0.44828832149505615, "repair_targets": [], "repair_candidates": [0.00021846975141670555, 0.042830660939216614, 0.0399220734834671, 0.00015038420679047704, 7.204106077551842e-05, 3.494112388580106e-05, 0.001297311275266111, 0.001703354180790484, 0.0032102654222398996, 0.017944172024726868, 0.026070328429341316, 1.899567541840952e-05, 0.00011077295494033024, 5.6009193940553814e-05, 0.8408217430114746, 0.005542299244552851, 0.01494409330189228, 0.0023281422909349203, 0.0004166167927905917, 0.0015613738214597106, 0.00047799505409784615, 9.619285265216604e-05, 0.00013295466487761587, 3.8868798583280295e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.520158", "n_pass": [314, 38, 32], "n_token": 53, "loss": [0.8183578252792358, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "=", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 35, 48, 52, 2, 10, 12, 23, 37, 42, 45, 27, 32, 6, 29, 40, 4, 14, 16, 18, 34, 38]}}
{"prediction": {"error_location": 0.44115546345710754, "repair_targets": [], "repair_candidates": [0.0003555352450348437, 0.0813317745923996, 0.062388934195041656, 0.0002061926934402436, 9.626115206629038e-05, 5.04974159412086e-05, 0.0022701530251652002, 0.004697686526924372, 0.016690406948328018, 0.015660911798477173, 0.02713775262236595, 4.368361987872049e-05, 0.00012872433580923826, 6.606140232179314e-05, 0.7324210405349731, 0.01459952350705862, 0.033242981880903244, 0.004333883989602327, 0.001001135096885264, 0.001990585820749402, 0.0009297578944824636, 0.00014249749074224383, 0.00016030669212341309, 5.361373405321501e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.596861", "n_pass": [317, 39, 33], "n_token": 52, "loss": [0.8947433233261108, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "[", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 34, 47, 51, 2, 10, 12, 22, 36, 41, 44, 26, 31, 6, 28, 39, 4, 14, 16, 18, 33, 37]}}
{"prediction": {"error_location": 0.4087124764919281, "repair_targets": [], "repair_candidates": [0.0007596232462674379, 0.20482110977172852, 0.10042773932218552, 0.000375144969439134, 0.00021188233222346753, 0.00013917518663220108, 0.002048016060143709, 0.0015416216338053346, 0.0041588665917515755, 0.0006004726747050881, 0.00014288465899880975, 0.0001055343309417367, 0.0004217876121401787, 0.00017386265972163528, 0.5732322335243225, 0.03947928175330162, 0.04240015894174576, 0.01865537278354168, 0.006126372143626213, 0.002302334411069751, 0.0014264060882851481, 0.00024343033146578819, 0.00015334886847995222, 5.337117545423098e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.673149", "n_pass": [318, 40, 34], "n_token": 51, "loss": [0.9353277683258057, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", ".", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 33, 46, 50, 2, 10, 12, 21, 35, 40, 43, 25, 30, 6, 27, 38, 4, 14, 16, 18, 32, 36]}}
{"prediction": {"error_location": 0.3924572765827179, "repair_targets": [], "repair_candidates": [0.0008640829473733902, 0.2875692546367645, 0.14368478953838348, 0.00047164689749479294, 0.0002533259685151279, 0.00019233136845286936, 0.0034770644269883633, 0.0037386633921414614, 0.006963861174881458, 0.0011414566542953253, 0.0006031471421010792, 0.00013230746844783425, 0.00048261298798024654, 0.00029400596395134926, 0.42515191435813904, 0.03936953842639923, 0.060870666056871414, 0.016280746087431908, 0.005226685665547848, 0.001701993984170258, 0.0010928773554041982, 0.00024437118554487824, 0.00013851668336428702, 5.4160387662705034e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.748819", "n_pass": [320, 41, 35], "n_token": 50, "loss": [0.9313350915908813, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", ",", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 32, 45, 49, 2, 10, 12, 21, 34, 39, 42, 24, 29, 6, 26, 37, 4, 14, 16, 18, 31, 35]}}
{"prediction": {"error_location": 0.3940272629261017, "repair_targets": [], "repair_candidates": [0.0012040091678500175, 0.18570470809936523, 0.10133028775453568, 0.0005685955984517932, 0.0004421169578563422, 0.0002857910003513098, 0.0022449532989412546, 0.0023125947918742895, 0.003795164404436946, 0.0008342528599314392, 0.0006578991306014359, 0.001096493797376752, 0.0005363490199670196, 0.0002456104557495564, 0.5896056890487671, 0.025319933891296387, 0.05177783593535423, 0.02096613496541977, 0.00811786763370037, 0.001518533332273364, 0.0010395393474027514, 0.0002472237392794341, 0.00010968833521474153, 3.8700076402164996e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:13.975003", "n_pass": [324, 44, 36], "n_token": 49, "loss": [0.7351143956184387, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", ".", "#INDENT#", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 31, 44, 48, 2, 10, 12, 21, 33, 38, 41, 24, 28, 6, 25, 36, 4, 14, 16, 18, 30, 34]}}
{"prediction": {"error_location": 0.4794504940509796, "repair_targets": [], "repair_candidates": [0.0005840109661221504, 0.146317258477211, 0.06379915028810501, 0.00031978313927538693, 0.0002738191105891019, 0.0001422038476448506, 0.0011900366516783834, 0.0011161633301526308, 0.0014115771045908332, 0.00033035443630069494, 0.00033596213324926794, 0.0005499819526448846, 0.00023324796347878873, 8.112899377010763e-05, 0.6527390480041504, 0.036761313676834106, 0.04714737460017204, 0.028585370630025864, 0.013084551319479942, 0.0033790292218327522, 0.0010846237419173121, 0.00040684075793251395, 9.887942724162713e-05, 2.8200312954140827e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.126070", "n_pass": [333, 46, 37], "n_token": 47, "loss": [0.5907085537910461, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", ")", "#UNINDENT#", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 31, 42, 46, 2, 10, 12, 21, 33, 38, 39, 24, 28, 6, 25, 36, 4, 14, 16, 18, 30, 34]}}
{"prediction": {"error_location": 0.5539346933364868, "repair_targets": [], "repair_candidates": [0.0006857329281046987, 0.13027748465538025, 0.07645685225725174, 0.00034325497108511627, 0.00036379549419507384, 0.00015786061703693122, 0.0020342848729342222, 0.0020099070388823748, 0.0016359374858438969, 0.00037223962135612965, 0.0003866835031658411, 0.0006087131914682686, 0.0002574163372628391, 0.00011704285134328529, 0.6209765672683716, 0.033394571393728256, 0.048143260180950165, 0.025144711136817932, 0.004504368174821138, 0.0035473653115332127, 0.04661308974027634, 0.0018416015664115548, 9.432861406821758e-05, 3.292993642389774e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.199165", "n_pass": [336, 47, 38], "n_token": 45, "loss": [0.2627895176410675, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def call(", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 19, 20, 31, 42, 44, 2, 10, 12, 21, 33, 38, 39, 24, 28, 6, 25, 36, 4, 14, 16, 18, 30, 34]}}
{"prediction": {"error_location": 0.7689034938812256, "repair_targets": [], "repair_candidates": [0.0009407159523107111, 0.20183876156806946, 0.08488058298826218, 0.0005484338034875691, 0.0004619394603651017, 0.0002967496693599969, 0.002300364663824439, 0.0017264502821490169, 0.0017312911804765463, 0.0003934664709959179, 0.00033584784250706434, 0.00046071637189015746, 0.0002215510467067361, 9.951335232472047e-05, 0.6104039549827576, 0.019155658781528473, 0.02044828049838543, 0.0166592076420784, 0.0016962189693003893, 0.0013415446737781167, 0.03133222460746765, 0.0017367069376632571, 0.0009465248440392315, 4.332185926614329e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.271634", "n_pass": [339, 48, 39], "n_token": 44, "loss": [0.3993818163871765, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 18, 19, 30, 41, 43, 1, 9, 11, 20, 32, 37, 38, 23, 27, 5, 24, 35, 3, 13, 15, 17, 29, 33]}}
{"prediction": {"error_location": 0.6707344651222229, "repair_targets": [], "repair_candidates": [0.0027216048911213875, 0.3862977921962738, 0.04399041831493378, 0.0003319977258797735, 0.0005066620651632547, 0.00045865040738135576, 0.002732055028900504, 0.0013898710021749139, 0.002001374028623104, 0.0006259690853767097, 0.0005618747090920806, 0.0007383681950159371, 0.00013785340706817806, 6.952606054255739e-05, 0.49569904804229736, 0.01595662347972393, 0.012591185048222542, 0.015044467523694038, 0.002812186721712351, 0.0009689275175333023, 0.013233722187578678, 0.0005670737591572106, 0.0005394683103077114, 2.3237087589222938e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.343867", "n_pass": [341, 49, 40], "n_token": 43, "loss": [0.14073088765144348, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", ",", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 17, 18, 29, 40, 42, 1, 8, 10, 19, 31, 36, 37, 22, 26, 4, 23, 34, 2, 12, 14, 16, 28, 32]}}
{"prediction": {"error_location": 0.8687230944633484, "repair_targets": [], "repair_candidates": [0.0028892089612782, 0.1061033308506012, 0.12990885972976685, 0.0004977225908078253, 0.0008744513615965843, 0.0006657399935647845, 0.013154922984540462, 0.0035875265020877123, 0.0032224690075963736, 0.0011176705593243241, 0.0011210235534235835, 0.001914245425723493, 0.00016991216398309916, 9.265977132599801e-05, 0.602234423160553, 0.016085848212242126, 0.03143446892499924, 0.045790012925863266, 0.011047257110476494, 0.0011563185835257173, 0.02506072446703911, 0.0011885837884619832, 0.0006470215739682317, 3.5553384805098176e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.415825", "n_pass": [343, 50, 41], "n_token": 42, "loss": [0.13613855838775635, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "=", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 16, 17, 28, 39, 41, 1, 7, 9, 18, 30, 35, 36, 21, 25, 3, 22, 33, 2, 11, 13, 15, 27, 31]}}
{"prediction": {"error_location": 0.872721791267395, "repair_targets": [], "repair_candidates": [0.0027134849224239588, 0.09802401810884476, 0.04865269735455513, 0.0002309756091563031, 0.0005460207466967404, 0.0006751233013346791, 0.019940465688705444, 0.006691090762615204, 0.004126060288399458, 0.0012990303803235292, 0.001223660190589726, 0.0016323244199156761, 0.0003227325505577028, 0.00011875263589899987, 0.6861324310302734, 0.019722793251276016, 0.024972114711999893, 0.0445421040058136, 0.014220702461898327, 0.0033499589189887047, 0.01860824227333069, 0.0012322099646553397, 0.0009836428798735142, 3.936720167985186e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.488593", "n_pass": [345, 51, 42], "n_token": 41, "loss": [0.11120600253343582, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "#NEWLINE#", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 15, 16, 27, 38, 40, 1, 6, 8, 17, 29, 34, 35, 20, 24, 3, 21, 32, 2, 10, 12, 14, 26, 30]}}
{"prediction": {"error_location": 0.8947542905807495, "repair_targets": [], "repair_candidates": [0.0025425872299820185, 0.012804882600903511, 0.01043548434972763, 0.0005926320445723832, 0.0004446951497811824, 0.0008287187665700912, 0.020442405715584755, 0.025095153599977493, 0.009923783130943775, 0.001858502277173102, 0.0019837829750031233, 0.0025619950611144304, 0.000471151084639132, 0.00022427363728638738, 0.7502919435501099, 0.027304014191031456, 0.02648507058620453, 0.053415242582559586, 0.013717073015868664, 0.0035217576660215855, 0.03177696466445923, 0.002175399800762534, 0.0010583404218778014, 4.413292117533274e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.559363", "n_pass": [346, 52, 43], "n_token": 40, "loss": [0.09942301362752914, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "logging", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 15, 26, 37, 39, 1, 5, 7, 16, 28, 33, 34, 19, 23, 3, 20, 31, 2, 9, 11, 13, 25, 29]}}
{"prediction": {"error_location": 0.9053595662117004, "repair_targets": [], "repair_candidates": [0.0031494982540607452, 0.004234642256051302, 0.002054613083600998, 0.0005814317846670747, 0.0006455983966588974, 0.001172978663817048, 0.03014489635825157, 0.02342824824154377, 0.009351405315101147, 0.002110616769641638, 0.0023663928732275963, 0.0033135388512164354, 0.00046114157885313034, 0.0002077818353427574, 0.708528995513916, 0.04077042266726494, 0.040118493139743805, 0.0577978789806366, 0.02150319702923298, 0.00426140520721674, 0.0399961993098259, 0.002841491950675845, 0.000917152501642704, 4.202601485303603e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.629867", "n_pass": [349, 53, 44], "n_token": 39, "loss": [0.1103689894080162, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", ".", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 13, 14, 25, 36, 38, 1, 5, 6, 15, 27, 32, 33, 18, 22, 3, 19, 30, 2, 8, 10, 12, 24, 28]}}
{"prediction": {"error_location": 0.8955035209655762, "repair_targets": [], "repair_candidates": [0.003016041126102209, 0.005725042428821325, 0.002437510760501027, 0.0004998564254492521, 0.0005955430679023266, 0.0003810109046753496, 0.012406403198838234, 0.012248878367245197, 0.009669679217040539, 0.002269032411277294, 0.0027845450676977634, 0.0036547668278217316, 0.0005598905845545232, 0.0002235887513961643, 0.7702022194862366, 0.03268909081816673, 0.04020006209611893, 0.04869488626718521, 0.017710180953145027, 0.0034545217640697956, 0.027296286076307297, 0.002235634019598365, 0.0010037830797955394, 4.159722084295936e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.700210", "n_pass": [351, 54, 45], "n_token": 38, "loss": [0.09853124618530273, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", ")", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 12, 13, 24, 35, 37, 1, 5, 6, 14, 26, 31, 32, 17, 21, 3, 18, 29, 2, 7, 9, 11, 23, 27]}}
{"prediction": {"error_location": 0.9061674475669861, "repair_targets": [], "repair_candidates": [0.00218965788371861, 0.0077778552658855915, 0.005434596911072731, 0.0004977695643901825, 0.00012991722906008363, 0.0012237350456416607, 0.001759914681315422, 0.007219025399535894, 0.00893767736852169, 0.0030828737653791904, 0.0044230129569768906, 0.004479836672544479, 0.00034729146864265203, 0.00017134100198745728, 0.821220874786377, 0.023570828139781952, 0.02829744853079319, 0.03758161514997482, 0.012930446304380894, 0.0016175926430150867, 0.024960990995168686, 0.0015697409398853779, 0.0005492803175002337, 2.664735984581057e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.771462", "n_pass": [353, 55, 46], "n_token": 37, "loss": [0.09847366809844971, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", ",", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 12, 23, 34, 36, 1, 5, 6, 13, 25, 30, 31, 16, 20, 3, 17, 28, 2, 7, 8, 10, 22, 26]}}
{"prediction": {"error_location": 0.9062196612358093, "repair_targets": [], "repair_candidates": [0.002319520805031061, 0.009639467112720013, 0.00652101868763566, 0.0006854973617009819, 0.00014898591325618327, 0.001112824771553278, 0.002698637079447508, 0.0036274984013289213, 0.004833397455513477, 0.002095150528475642, 0.004147029481828213, 0.007279993034899235, 0.00035501085221767426, 0.00017150398343801498, 0.8260964751243591, 0.022458123043179512, 0.024555673822760582, 0.03922346979379654, 0.01245590578764677, 0.0020331544801592827, 0.02533632703125477, 0.0015934110851958394, 0.000582273059990257, 2.9639943022630177e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.840534", "n_pass": [355, 56, 47], "n_token": 36, "loss": [0.09955025464296341, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "_call_and_format", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 22, 33, 35, 1, 5, 6, 12, 24, 29, 30, 15, 19, 3, 16, 27, 2, 7, 8, 9, 21, 25]}}
{"prediction": {"error_location": 0.9052445292472839, "repair_targets": [], "repair_candidates": [0.002149096457287669, 0.0072182537987828255, 0.004937873687595129, 0.0005957211833447218, 0.00026258884463459253, 0.001606387086212635, 0.0007946999394334853, 0.0037628791760653257, 0.0016230905894190073, 0.0009356694645248353, 0.0023310319520533085, 0.005942122545093298, 0.0005960636190138757, 0.0001731412048684433, 0.8312019109725952, 0.02377988025546074, 0.037239693105220795, 0.03808441385626793, 0.010237284936010838, 0.001807774999178946, 0.022561250254511833, 0.0014952690107747912, 0.0006332345656119287, 3.0689807317685336e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.909616", "n_pass": [360, 57, 48], "n_token": 35, "loss": [0.14870932698249817, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "(", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 21, 32, 34, 1, 5, 6, 12, 23, 28, 29, 14, 18, 3, 15, 26, 2, 7, 8, 9, 20, 24]}}
{"prediction": {"error_location": 0.8618196845054626, "repair_targets": [], "repair_candidates": [0.005116939544677734, 0.018683824688196182, 0.017630131915211678, 0.001743572880513966, 0.0006855641258880496, 0.0043344562873244286, 0.00274845352396369, 0.015042067505419254, 0.005039225798100233, 0.0015868926420807838, 0.002145875245332718, 0.017195260152220726, 0.0003947954683098942, 0.00026075218920595944, 0.6987743973731995, 0.03782663121819496, 0.04036198928952217, 0.06535561382770538, 0.0088114645332098, 0.005598573945462704, 0.04461703822016716, 0.00320954667404294, 0.002731330692768097, 0.00010550774459261447], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:14.977881", "n_pass": [361, 58, 49], "n_token": 34, "loss": [0.08698343485593796, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", ")", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 20, 31, 33, 1, 5, 6, 12, 22, 27, 28, 13, 17, 3, 14, 25, 2, 7, 8, 9, 19, 23]}}
{"prediction": {"error_location": 0.9166922569274902, "repair_targets": [], "repair_candidates": [0.004907481838017702, 0.024594957008957863, 0.02118668518960476, 0.0022033778950572014, 0.00104835769161582, 0.0049970862455666065, 0.002120767254382372, 0.010173529386520386, 0.0026587964966893196, 0.0012179062468931079, 0.004007983021438122, 0.061366189271211624, 0.0012311667669564486, 0.0011061981786042452, 0.6161575317382812, 0.04114002734422684, 0.04417378455400467, 0.08777398616075516, 0.026220859959721565, 0.00605411734431982, 0.02980680763721466, 0.003199371974915266, 0.0025557803455740213, 9.726243297336623e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.046742", "n_pass": [364, 59, 50], "n_token": 33, "loss": [0.08580340445041656, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "=", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 30, 32, 1, 5, 6, 12, 21, 26, 27, 13, 16, 3, 14, 24, 2, 7, 8, 9, 18, 22]}}
{"prediction": {"error_location": 0.9177745580673218, "repair_targets": [], "repair_candidates": [0.002479562070220709, 0.013080799020826817, 0.012867419049143791, 0.001244966173544526, 0.00042549287900328636, 0.0018349721794947982, 0.001316166017204523, 0.00454755499958992, 0.001298550283536315, 0.0007722876616753638, 0.004381497856229544, 0.06006383150815964, 0.001030308660119772, 0.0027250819839537144, 0.814798891544342, 0.012157400138676167, 0.011335169896483421, 0.029314761981368065, 0.004956395830959082, 0.0020417592022567987, 0.015186888165771961, 0.0013155611231923103, 0.0007842575432732701, 4.042604268761352e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.115672", "n_pass": [407, 60, 51], "n_token": 32, "loss": [0.06676746159791946, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", ",", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 29, 31, 1, 5, 6, 12, 20, 25, 26, 13, 16, 3, 14, 23, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9354127049446106, "repair_targets": [], "repair_candidates": [0.001712919445708394, 0.015216064639389515, 0.01126947719603777, 0.0009466363699175417, 0.0003546803491190076, 0.0012397374957799911, 0.0007899070042185485, 0.003497245954349637, 0.0006395038217306137, 0.00031007127836346626, 0.00257139652967453, 0.03121318109333515, 0.00027412513736635447, 0.0007854150608181953, 0.9043577313423157, 0.0003126752271782607, 0.0001996136998059228, 0.005512780509889126, 0.0016625840216875076, 0.0006800818373449147, 0.015535719692707062, 0.0007679485133849084, 0.0001352965336991474, 1.5176261513261124e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.182104", "n_pass": [410, 61, 52], "n_token": 31, "loss": [0.051642753183841705, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", "props", "if", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 28, 30, 1, 5, 6, 12, 20, 24, 25, 13, 16, 3, 14, 22, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9496681690216064, "repair_targets": [], "repair_candidates": [0.0004879851476289332, 0.004525902681052685, 0.003338195150718093, 0.00031051161931827664, 0.00011208233627257869, 0.00038731569657102227, 0.00033530013752169907, 0.001467671012505889, 0.00036823126720264554, 0.00012038357090204954, 0.0008913993369787931, 0.02111491747200489, 0.0002598909195512533, 0.0006547003868035972, 0.9637742042541504, 4.4715485273627564e-05, 1.9158189388690516e-05, 0.0003139756736345589, 4.5351393055170774e-05, 3.636196197476238e-05, 0.0012841628631576896, 5.221631363383494e-05, 5.0673388614086434e-05, 4.6066388676990755e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.248300", "n_pass": [412, 62, 53], "n_token": 30, "loss": [0.07512246817350388, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", "props", "self", "self", ".", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 27, 29, 1, 5, 6, 12, 20, 23, 24, 13, 16, 3, 14, 22, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9276300668716431, "repair_targets": [], "repair_candidates": [0.0023784043733030558, 0.028273627161979675, 0.018419846892356873, 0.001681588008068502, 0.0006588717806152999, 0.0023277252912521362, 0.0017824810929596424, 0.009494166821241379, 0.001679833047091961, 0.0004229502519592643, 0.002860850188881159, 0.06699976325035095, 0.00036715547321364284, 0.0015677189221605659, 0.8494364619255066, 0.00019382750906515867, 0.0002013865450862795, 0.0022013874258846045, 0.0005609339568763971, 0.0028534510638564825, 0.003379030851647258, 0.0017339105252176523, 0.0004906289395876229, 3.4079563192790374e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.315118", "n_pass": [415, 63, 54], "n_token": 29, "loss": [0.0757560133934021, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "(", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 26, 28, 1, 5, 6, 12, 20, 23, 24, 13, 16, 3, 14, 22, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9270424842834473, "repair_targets": [], "repair_candidates": [0.002277510240674019, 0.030061962082982063, 0.018892940133810043, 0.0014972786884754896, 0.0006954444688744843, 0.002277771010994911, 0.0016687063034623861, 0.00608782609924674, 0.0012489096261560917, 0.00035381282214075327, 0.0032899915240705013, 0.06623391807079315, 0.0004321029700804502, 0.001433692523278296, 0.8582833409309387, 0.0001511796872364357, 0.00012008076009806246, 0.0015996512956917286, 0.00035950864548794925, 0.0014102245913818479, 0.0007397159934043884, 0.0008359145722351968, 4.1396106098545715e-05, 7.161822850321187e-06], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.379848", "n_pass": [416, 64, 55], "n_token": 28, "loss": [0.06026418134570122, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "resp", "return", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 25, 27, 1, 5, 6, 12, 20, 23, 24, 13, 16, 3, 14, 22, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9415157437324524, "repair_targets": [], "repair_candidates": [0.004180367104709148, 0.07282181084156036, 0.04704906418919563, 0.0025489439722150564, 0.0012214970774948597, 0.003522038459777832, 0.002995291957631707, 0.008871478028595448, 0.0016531487926840782, 0.000441634125309065, 0.002963286591693759, 0.10052842646837234, 0.0008673142292536795, 0.001806790241971612, 0.7378529906272888, 0.00026874139439314604, 0.00017843724344857037, 0.0028929023537784815, 0.0014270502142608166, 0.004223750438541174, 0.0011097387177869678, 0.000505539879668504, 5.452241748571396e-05, 1.5224015442072414e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.444053", "n_pass": [418, 65, 56], "n_token": 27, "loss": [0.029163453727960587, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "for", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "resp", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 19, 25, 26, 1, 5, 6, 12, 20, 23, 24, 13, 16, 3, 14, 22, 2, 7, 8, 9, 18, 21]}}
{"prediction": {"error_location": 0.9712575674057007, "repair_targets": [], "repair_candidates": [0.004349017050117254, 0.05154626816511154, 0.029364995658397675, 0.0016376341227442026, 0.0007320244330912828, 0.0022235719952732325, 0.0018336799694225192, 0.00657380698248744, 0.00155072461348027, 0.0003809930058196187, 0.003909422550350428, 0.08546869456768036, 0.000849346281029284, 0.0017880693776533008, 0.8018566966056824, 0.0002582753368187696, 0.00012848334154114127, 0.001378321903757751, 0.0010629096068441868, 0.0019531617872416973, 0.0007494036108255386, 0.00020267700892873108, 7.334750989684835e-05, 0.00012838805560022593], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.509067", "n_pass": [435, 66, 57], "n_token": 26, "loss": [0.021817201748490334, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "in", "req", "resp", "self", "req", "props", "self", "self", "resp", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 18, 24, 25, 1, 5, 6, 12, 19, 22, 23, 13, 15, 3, 14, 21, 2, 7, 8, 9, 17, 20]}}
{"prediction": {"error_location": 0.9784191846847534, "repair_targets": [], "repair_candidates": [0.09947779774665833, 0.35999658703804016, 0.1975749433040619, 0.0072062150575220585, 0.004912308417260647, 0.006186715327203274, 0.004462132696062326, 0.02724633179605007, 0.00729100639000535, 0.0023077097721397877, 0.013982906937599182, 0.07270094007253647, 0.03150799497961998, 0.09818275272846222, 0.005185383837670088, 0.013603976927697659, 0.0017372688744217157, 0.012522893957793713, 0.006845463067293167, 0.011717317625880241, 0.007471865974366665, 0.0046300445683300495, 0.0011668455554172397, 0.0020825963001698256], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:13:15.572964", "n_pass": [437, 67, 58], "n_token": 25, "loss": [0.009824376553297043, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "req", "props", "resp", "self", "self", "req", "req", "req", "resp", "resp", "self", "r", "props", "r", "req", "resp", "self", "req", "props", "self", "self", "resp", "resp"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 10, 11, 17, 23, 24, 1, 5, 6, 12, 18, 21, 22, 13, 15, 3, 14, 20, 2, 7, 8, 9, 16, 19]}}
{"prediction": {"error_location": 0.9902237057685852, "repair_targets": [], "repair_candidates": [0.06235986948013306, 0.3907763957977295, 0.1567952036857605, 0.0046973079442977905, 0.0047705089673399925, 0.006895721890032291, 0.0036569766234606504, 0.018108155578374863, 0.003430579323321581, 0.001148476731032133, 0.007056960836052895, 0.17072555422782898, 0.0045424266718328, 0.012359222397208214, 0.007413059007376432, 0.042052507400512695, 0.026131682097911835, 0.043956540524959564, 0.007541694678366184, 0.005647568963468075, 0.009401481598615646, 0.003991661127656698, 0.0016169373411685228, 0.004923459608107805], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'req', 'props', 'resp', 'self', 'self', 'req', 'req', 'req', 'resp', 'resp', 'self', 'r', 'props', 'r', 'req', 'resp', 'self', 'req', 'props', 'self', 'self', 'resp', 'resp']
