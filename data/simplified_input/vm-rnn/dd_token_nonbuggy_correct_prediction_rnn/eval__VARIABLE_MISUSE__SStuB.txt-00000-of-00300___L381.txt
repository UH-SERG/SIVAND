
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 20, 4, 22, 24, 8, 26, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "alimanfoo/petl/petl/transform/validation.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 381, "results": {"model": "rnn", "prob": {"loc": [[0.9915302991867065, 7.762242603348568e-06, 3.121989720966667e-06, 3.0533058748005715e-08, 5.985094958305126e-06, 4.652622465073364e-07, 5.800849862680479e-07, 3.627978344411531e-07, 4.3967402234557085e-06, 2.569272510299925e-07, 1.2566285931825405e-06, 6.34368632290716e-07, 7.321508519453346e-07, 5.229166163189802e-06, 6.242740369089006e-07, 5.253772314972593e-07, 8.701013939571567e-06, 8.012941066226631e-07, 1.422283639840316e-05, 3.5098742046102416e-07, 0.0023936007637530565, 1.514375469469087e-07, 2.2832873014522193e-07, 3.3065174420698895e-07, 2.270450204377994e-05, 3.0668058315086455e-08, 8.037960697038216e-07, 8.306588824780192e-06, 0.005986379459500313, 9.872275086308946e-07]], "pointer": [[0.0, 0.0, 0.364521324634552, 0.0, 0.043169330805540085, 0.0, 0.0, 0.0, 0.4938070774078369, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0041688065975904465, 0.0, 0.0042837937362492085, 0.0, 0.0002204498159699142, 0.0, 0.0897131860256195, 0.0, 0.00011598618584685028, 0.0]], "target": [0.0]}, "loss": [0.008505547419190407, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:47:44.311977", "n_pass": [1, 1, 1], "n_token": 30, "loss": [0.008505547419190407, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 20, 4, 22, 24, 8, 26, 28]}}
{"prediction": {"error_location": 0.9915302991867065, "repair_targets": [], "repair_candidates": [0.364521324634552, 0.043169330805540085, 0.4938070774078369, 0.0041688065975904465, 0.0042837937362492085, 0.0002204498159699142, 0.0897131860256195, 0.00011598618584685028], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.375078", "n_pass": [23, 2, 2], "n_token": 26, "loss": [0.004528742749243975, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "#INDENT#", "\"\\n    Validate a `table` against a set of `constraints` and/or an expected\\n    `header`, e.g.::\\n\\n        >>> import petl as etl\\n        >>> # define some validation constraints\\n        ... header = ('foo', 'bar', 'baz')\\n        >>> constraints = [\\n        ...     dict(name='foo_int', field='foo', test=int),\\n        ...     dict(name='bar_date', field='bar', test=etl.dateparser('%Y-%m-%d')),\\n        ...     dict(name='baz_enum', field='baz', assertion=lambda v: v in ['Y', 'N']),\\n        ...     dict(name='not_none', assertion=lambda row: None not in row)\\n        ... ]\\n        >>> # now validate a table\\n        ... table = (('foo', 'bar', 'bazzz'),\\n        ...          (1, '2000-01-01', 'Y'),\\n        ...          ('x', '2010-10-10', 'N'),\\n        ...          (2, '2000/01/01', 'Y'),\\n        ...          (3, '2015-12-12', 'x'),\\n        ...          (4, None, 'N'),\\n        ...          ('y', '1999-99-99', 'z'),\\n        ...          (6, '2000-01-01'),\\n        ...          (7, '2001-02-02', 'N', True))\\n        >>> problems = etl.validate(table, constraints=constraints, header=header)\\n        >>> problems.lookall()\\n        +--------------+-----+-------+--------------+------------------+\\n        | name         | row | field | value        | error            |\\n        +==============+=====+=======+==============+==================+\\n        | '__header__' |   0 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   2 | 'foo' | 'x'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   3 | 'bar' | '2000/01/01' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   4 | 'baz' | 'x'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   5 | 'bar' | None         | 'AttributeError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'not_none'   |   5 | None  | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'foo_int'    |   6 | 'foo' | 'y'          | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'bar_date'   |   6 | 'bar' | '1999-99-99' | 'ValueError'     |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   6 | 'baz' | 'z'          | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   7 | None  |            2 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | 'baz_enum'   |   7 | 'baz' | None         | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n        | '__len__'    |   8 | None  |            4 | 'AssertionError' |\\n        +--------------+-----+-------+--------------+------------------+\\n\\n    Returns a table of validation problems.\\n\\n    \"", "#NEWLINE#", "return", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 16, 4, 18, 20, 8, 22, 24]}}
{"prediction": {"error_location": 0.9954812526702881, "repair_targets": [], "repair_candidates": [0.4878635108470917, 0.047262538224458694, 0.3330441415309906, 0.006541025824844837, 0.008893322199583054, 0.0003102980263065547, 0.1158987432718277, 0.0001863864017650485], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.438281", "n_pass": [24, 3, 3], "n_token": 22, "loss": [0.00632048724219203, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "ProblemsView", "(", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 12, 4, 14, 16, 8, 18, 20]}}
{"prediction": {"error_location": 0.9936996698379517, "repair_targets": [], "repair_candidates": [0.33263030648231506, 0.38808968663215637, 0.05743976682424545, 0.018626859411597252, 0.07258331775665283, 0.0005560741992667317, 0.12980297207832336, 0.0002710577682591975], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.496735", "n_pass": [43, 4, 4], "n_token": 20, "loss": [0.02086184173822403, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def validate(", "table", ",", "constraints", "=", "None", ",", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 10, 4, 12, 14, 8, 16, 18]}}
{"prediction": {"error_location": 0.9793543815612793, "repair_targets": [], "repair_candidates": [0.07812964916229248, 0.41277825832366943, 0.21860001981258392, 0.0702468529343605, 0.13071611523628235, 0.07235343009233475, 0.013631744310259819, 0.0035439403727650642], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.554739", "n_pass": [49, 5, 5], "n_token": 19, "loss": [0.01940879039466381, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "None", ",", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 9, 3, 11, 13, 7, 15, 17]}}
{"prediction": {"error_location": 0.9807783365249634, "repair_targets": [], "repair_candidates": [0.07974285632371902, 0.8353525400161743, 0.05179851874709129, 0.007693022955209017, 0.01198943704366684, 0.0092336880043149, 0.0037002600729465485, 0.0004895456368103623], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.611376", "n_pass": [52, 6, 6], "n_token": 17, "loss": [0.015913741663098335, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "=", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 3, 9, 11, 5, 13, 15]}}
{"prediction": {"error_location": 0.984212338924408, "repair_targets": [], "repair_candidates": [0.16063597798347473, 0.7849641442298889, 0.026913724839687347, 0.00577739579603076, 0.00726710818707943, 0.011137858033180237, 0.002587174531072378, 0.0007166668656282127], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.667767", "n_pass": [79, 7, 7], "n_token": 16, "loss": [0.01865052431821823, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", ",", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 8, 10, 5, 12, 14]}}
{"prediction": {"error_location": 0.9815225601196289, "repair_targets": [], "repair_candidates": [0.031047869473695755, 0.9558185935020447, 0.00622490793466568, 0.00045388255966827273, 0.0025044737849384546, 0.0017771907150745392, 0.0019573229365050793, 0.00021580640168394893], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.722527", "n_pass": [81, 8, 8], "n_token": 15, "loss": [0.10428280383348465, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "=", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 9, 5, 11, 13]}}
{"prediction": {"error_location": 0.9009705781936646, "repair_targets": [], "repair_candidates": [0.09442166984081268, 0.8540348410606384, 0.0014401066582649946, 0.0044947597198188305, 0.04447382315993309, 7.929640560178086e-05, 0.0009898926364257932, 6.556935113621876e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.778141", "n_pass": [83, 9, 9], "n_token": 14, "loss": [0.01684523932635784, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", ",", "header", "=", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 10, 12]}}
{"prediction": {"error_location": 0.983295738697052, "repair_targets": [], "repair_candidates": [0.6332154870033264, 0.2826383411884308, 0.003498163539916277, 0.011244860477745533, 0.0534735769033432, 0.004696281161159277, 0.010171789675951004, 0.0010614254279062152], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.889895", "n_pass": [87, 11, 10], "n_token": 13, "loss": [0.06299734860658646, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", ",", "header", "header", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 10, 11]}}
{"prediction": {"error_location": 0.9389458298683167, "repair_targets": [], "repair_candidates": [0.7818228602409363, 0.16240733861923218, 0.0023101679980754852, 0.005484608467668295, 0.039806101471185684, 0.007479008287191391, 0.0006380512495525181, 5.188485374674201e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.943658", "n_pass": [89, 12, 11], "n_token": 12, "loss": [0.05284940451383591, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", ",", "constraints", "=", "header", "table", "constraints", "constraints", ",", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 3, 7, 8, 5, 10, 11]}}
{"prediction": {"error_location": 0.9485228657722473, "repair_targets": [], "repair_candidates": [0.7309601902961731, 0.1844402700662613, 0.0030653569847345352, 0.010844654403626919, 0.0640353187918663, 0.006083178333938122, 0.00048267896636389196, 8.836683991830796e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:44.997555", "n_pass": [92, 13, 12], "n_token": 11, "loss": [0.05527041107416153, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", "constraints", "=", "header", "table", "constraints", "constraints", ",", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 5, 2, 6, 7, 4, 9, 10]}}
{"prediction": {"error_location": 0.9462292194366455, "repair_targets": [], "repair_candidates": [0.823672354221344, 0.1280907392501831, 0.004260957706719637, 0.01612389273941517, 0.023801913484930992, 0.0036698835901916027, 0.000306753849145025, 7.356697460636497e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:45.050529", "n_pass": [94, 14, 13], "n_token": 10, "loss": [0.12941887974739075, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", "constraints", "header", "table", "constraints", "constraints", ",", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 4, 2, 5, 6, 3, 8, 9]}}
{"prediction": {"error_location": 0.878605842590332, "repair_targets": [], "repair_candidates": [0.40083640813827515, 0.0417955219745636, 0.013744340278208256, 0.18378156423568726, 0.32912808656692505, 0.028694842010736465, 0.0011966027086600661, 0.0008226726204156876], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:47:45.103318", "n_pass": [99, 15, 14], "n_token": 9, "loss": [0.10313184559345245, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "table", "constraints", "header", "table", "constraints", "constraints", "header", "header"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 4, 2, 5, 6, 3, 7, 8]}}
{"prediction": {"error_location": 0.902008056640625, "repair_targets": [], "repair_candidates": [0.31125882267951965, 0.041879113763570786, 0.033165495842695236, 0.3796921372413635, 0.18482841551303864, 0.03362460806965828, 0.0119541110470891, 0.003597276983782649], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'table', 'constraints', 'header', 'table', 'constraints', 'constraints', 'header', 'header']
