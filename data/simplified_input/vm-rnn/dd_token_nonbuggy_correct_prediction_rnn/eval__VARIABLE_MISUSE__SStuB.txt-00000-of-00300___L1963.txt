
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [4, 21, 2, 6, 32, 15, 28, 40, 55], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "google/yapf/yapftests/pytree_unwrapper_test.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1963, "results": {"model": "rnn", "prob": {"loc": [[0.8028162717819214, 2.6361990421719383e-06, 1.119070020649815e-06, 3.3852449732307832e-09, 3.2245137049358163e-07, 2.1957735629740682e-09, 3.084004447373445e-06, 9.897754615906251e-09, 3.9958312214594116e-08, 3.04672340689649e-08, 3.412701943261709e-08, 1.3119706920861063e-07, 1.2651455882917162e-08, 5.619561420644459e-07, 1.2508414783951594e-06, 4.808689624269391e-08, 4.754307880716624e-08, 4.869569636412052e-08, 1.8851773120331927e-07, 1.124767390336956e-08, 2.9975642519275425e-06, 0.0011954291258007288, 1.2135080496022965e-08, 1.9409048590546263e-08, 7.092253184737274e-08, 1.233253499322018e-07, 1.4122504410352121e-07, 3.069275408051908e-06, 0.005502965766936541, 1.06479569694784e-06, 2.768177409961936e-06, 2.7911498818866676e-06, 0.10262363404035568, 4.377111508802045e-07, 1.0036235380539438e-06, 3.5923147123639865e-08, 7.0430225207474e-08, 2.508257352928922e-07, 1.920943404343234e-08, 6.610382570215734e-07, 0.01868581213057041, 3.354164590518849e-08, 1.1448396435298491e-05, 1.1743281902454328e-07, 0.0003675695334095508, 2.7445887784693923e-09, 1.0096003961734823e-06, 1.617905809325748e-07, 1.454950080415074e-07, 3.0748932999813405e-07, 1.7683872144402812e-08, 3.8420736814259726e-07, 5.627445034406264e-07, 1.022910254278031e-07, 1.0427617098685005e-06, 0.06876743584871292, 4.187054116755462e-07]], "pointer": [[0.0, 0.0, 0.0008217243594117463, 0.0, 0.5024322271347046, 0.0, 0.15354834496974945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33073845505714417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012088095536455512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2571768568013795e-05, 0.0, 0.0, 0.0, 0.008125987835228443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0025819053407758474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016079347115010023, 0.0]], "target": [0.0]}, "loss": [0.21962939202785492, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:01:47.771391", "n_pass": [1, 1, 1], "n_token": 57, "loss": [0.21962939202785492, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'Produces unwrapped lines from the given code.\\n\\n    Parses the code into a tree, performs comment splicing and runs the\\n    unwrapper.\\n\\n    Arguments:\\n      code: code to parse as a string\\n      dumptree: if True, the parsed pytree (after comment splicing) is dumped\\n        to stderr. Useful for debugging.\\n\\n    Returns:\\n      List of unwrapped lines.\\n    '", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 21, 2, 6, 32, 15, 28, 40, 55]}}
{"prediction": {"error_location": 0.8028162717819214, "repair_targets": [], "repair_candidates": [0.0008217243594117463, 0.5024322271347046, 0.15354834496974945, 0.33073845505714417, 0.00012088095536455512, 2.2571768568013795e-05, 0.008125987835228443, 0.0025819053407758474, 0.0016079347115010023], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:47.845729", "n_pass": [21, 2, 2], "n_token": 50, "loss": [0.4906829595565796, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "target_stream", "=", "sys", ".", "stderr", ")", "#NEWLINE#", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 2, 6, 25, 8, 21, 33, 48]}}
{"prediction": {"error_location": 0.6122080683708191, "repair_targets": [], "repair_candidates": [0.00018943805480375886, 0.3364518880844116, 0.10303951799869537, 0.5551233291625977, 5.433918340713717e-05, 1.9784867618000135e-05, 0.0023434592876583338, 0.0017198434798046947, 0.0010583634721115232], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:47.916089", "n_pass": [26, 3, 3], "n_token": 43, "loss": [0.431266188621521, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "#UNINDENT#", "return", "pytree_unwrapper", ".", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 2, 6, 25, 8, 21, 33, 41]}}
{"prediction": {"error_location": 0.649685800075531, "repair_targets": [], "repair_candidates": [0.00018856051610782743, 0.2944883108139038, 0.09084650129079819, 0.6059364676475525, 6.554727588081732e-05, 1.4774497685721144e-05, 0.005194596480578184, 0.00023954258358571678, 0.003025737823918462], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:47.984559", "n_pass": [45, 4, 4], "n_token": 39, "loss": [0.4583333134651184, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "=", "pytree_utils", ".", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 2, 6, 25, 8, 21, 33, 37]}}
{"prediction": {"error_location": 0.6323366761207581, "repair_targets": [], "repair_candidates": [0.0003902567259501666, 0.21342064440250397, 0.07227079570293427, 0.7090216279029846, 4.492371226660907e-05, 1.091309059120249e-05, 0.003928517457097769, 5.5537642765557393e-05, 0.0008567873737774789], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.054322", "n_pass": [49, 5, 5], "n_token": 36, "loss": [0.3596956729888916, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "#NEWLINE#", "#INDENT#", "pytree_visitor", ".", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 30, 34]}}
{"prediction": {"error_location": 0.6978886723518372, "repair_targets": [], "repair_candidates": [0.0032425355166196823, 0.5371654629707336, 0.3671892285346985, 0.028685949742794037, 0.0009864448802545667, 0.00011064844875363633, 0.05857183039188385, 0.00014724502398166806, 0.0039006320293992758], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.183004", "n_pass": [54, 7, 6], "n_token": 32, "loss": [0.267975777387619, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "DumpPyTree", "(", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 26, 30]}}
{"prediction": {"error_location": 0.7649261951446533, "repair_targets": [], "repair_candidates": [0.0026546570006757975, 0.5240787267684937, 0.4357474744319916, 0.028613276779651642, 0.0011055729119107127, 5.2214149036444724e-05, 0.001369311474263668, 0.00039236521115526557, 0.005986439064145088], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.309403", "n_pass": [82, 9, 7], "n_token": 30, "loss": [0.19632329046726227, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "UnwrapPyTree", "(", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 24, 28]}}
{"prediction": {"error_location": 0.8217465877532959, "repair_targets": [], "repair_candidates": [0.0016478518955409527, 0.4880278408527374, 0.4771241545677185, 0.020468346774578094, 0.0009815588127821684, 6.874921382404864e-05, 0.006442667450755835, 0.0009725521085783839, 0.004266190342605114], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.371976", "n_pass": [83, 10, 8], "n_token": 28, "loss": [0.41816243529319763, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _ParseAndUnwrap(", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 11, 2, 6, 22, 8, 18, 24, 26]}}
{"prediction": {"error_location": 0.6582552194595337, "repair_targets": [], "repair_candidates": [0.0006071840762160718, 0.5741791725158691, 0.37775877118110657, 0.01718449406325817, 0.0007142630056478083, 7.862781785661355e-05, 0.01962805725634098, 0.008554314263164997, 0.001295127090997994], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.436244", "n_pass": [86, 11, 9], "n_token": 27, "loss": [0.7035015821456909, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 10, 1, 5, 21, 7, 17, 23, 25]}}
{"prediction": {"error_location": 0.4948495924472809, "repair_targets": [], "repair_candidates": [0.00814459752291441, 0.7881422638893127, 0.19363002479076385, 0.0015611251583322883, 0.0003277961804997176, 3.378738620085642e-05, 0.006026232149451971, 0.0017151902429759502, 0.0004189498140476644], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.497146", "n_pass": [88, 12, 10], "n_token": 26, "loss": [0.4287292957305908, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", ")", "#NEWLINE#", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 20, 6, 16, 22, 24]}}
{"prediction": {"error_location": 0.6513362526893616, "repair_targets": [], "repair_candidates": [0.0426994189620018, 0.6937178373336792, 0.25328755378723145, 0.0012252000160515308, 0.0005702539347112179, 6.92454632371664e-05, 0.005738253239542246, 0.0018275703769177198, 0.0008646401693113148], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.557221", "n_pass": [93, 13, 11], "n_token": 24, "loss": [0.5327342748641968, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "comment_splicer", ".", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 18, 6, 14, 20, 22]}}
{"prediction": {"error_location": 0.5869978070259094, "repair_targets": [], "repair_candidates": [0.027679283171892166, 0.42411330342292786, 0.516365647315979, 0.008247165009379387, 0.0013831123942509294, 3.16373334499076e-05, 0.01932160183787346, 0.0018319174414500594, 0.0010263815056532621], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.616312", "n_pass": [94, 14, 12], "n_token": 22, "loss": [0.8831073641777039, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "SpliceComments", "(", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 16, 6, 12, 18, 20]}}
{"prediction": {"error_location": 0.41349610686302185, "repair_targets": [], "repair_candidates": [0.04416457936167717, 0.5742046236991882, 0.34636569023132324, 0.008887545205652714, 0.00011423647083574906, 7.303120946744457e-05, 0.024544216692447662, 0.001014981302432716, 0.0006310684257186949], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.674780", "n_pass": [95, 15, 13], "n_token": 20, "loss": [0.6970975995063782, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", ")", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 14, 6, 10, 16, 18]}}
{"prediction": {"error_location": 0.4980287551879883, "repair_targets": [], "repair_candidates": [0.06247520074248314, 0.5670717358589172, 0.22889728844165802, 0.0026103153359144926, 0.00015404231089632958, 0.00024738028878346086, 0.12414447963237762, 0.011387261562049389, 0.003012323984876275], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.792783", "n_pass": [126, 17, 14], "n_token": 19, "loss": [0.6401106119155884, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "if", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 13, 6, 10, 15, 17]}}
{"prediction": {"error_location": 0.5272340774536133, "repair_targets": [], "repair_candidates": [0.05381760373711586, 0.45582443475723267, 0.2514461874961853, 0.0038717463612556458, 0.000119632481073495, 0.0003059854207094759, 0.2134324014186859, 0.016865408048033714, 0.004316623788326979], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:48.907472", "n_pass": [128, 19, 15], "n_token": 18, "loss": [0.9872723817825317, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", ",", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 12, 6, 10, 14, 16]}}
{"prediction": {"error_location": 0.37259161472320557, "repair_targets": [], "repair_candidates": [0.06150702387094498, 0.35563361644744873, 0.32763901352882385, 0.0014245660277083516, 8.499121031491086e-05, 0.00033163727493956685, 0.24402767419815063, 0.00636083260178566, 0.0029906481504440308], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.021854", "n_pass": [132, 21, 16], "n_token": 17, "loss": [0.7787803411483765, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", "tree", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 12, 6, 10, 14, 15]}}
{"prediction": {"error_location": 0.45896539092063904, "repair_targets": [], "repair_candidates": [0.0593111589550972, 0.4871184229850769, 0.23290327191352844, 0.0009928533108904958, 0.00013108593702781945, 0.000299847568385303, 0.18299593031406403, 0.035470765084028244, 0.0007767369970679283], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.078530", "n_pass": [134, 22, 17], "n_token": 16, "loss": [0.6234223246574402, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", ",", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 1, 4, 12, 6, 10, 14, 15]}}
{"prediction": {"error_location": 0.5361065864562988, "repair_targets": [], "repair_candidates": [0.06851320713758469, 0.5812743306159973, 0.20178046822547913, 0.0011434437474235892, 0.00011309442925266922, 0.00035121897235512733, 0.13535237312316895, 0.010448135435581207, 0.0010237800888717175], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.137418", "n_pass": [138, 23, 18], "n_token": 15, "loss": [0.45470547676086426, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "#NEWLINE#", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 1, 3, 11, 5, 9, 13, 14]}}
{"prediction": {"error_location": 0.6346349120140076, "repair_targets": [], "repair_candidates": [0.15317387878894806, 0.4668375253677368, 0.22469554841518402, 0.0021576005965471268, 0.0003225414257030934, 0.0010284067830070853, 0.13323096930980682, 0.016502344980835915, 0.002051265211775899], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.193005", "n_pass": [140, 24, 19], "n_token": 14, "loss": [0.32706454396247864, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "tree", "ParseCodeToTree", "(", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 1, 3, 10, 4, 8, 12, 13]}}
{"prediction": {"error_location": 0.7210372090339661, "repair_targets": [], "repair_candidates": [0.2956211268901825, 0.5797643065452576, 0.026944654062390327, 0.0007780404412187636, 0.0003631915897130966, 0.0018888047197833657, 0.08052022010087967, 0.01189099345356226, 0.0022287205792963505], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.302611", "n_pass": [143, 26, 20], "n_token": 13, "loss": [0.06791891902685165, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "tree", "ParseCodeToTree", "code", "tree", "#NEWLINE#", "dumptree", ":", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 1, 3, 9, 4, 7, 11, 12]}}
{"prediction": {"error_location": 0.934336245059967, "repair_targets": [], "repair_candidates": [0.0262104831635952, 0.16118168830871582, 0.022178728133440018, 0.0038050636649131775, 0.0013464672956615686, 0.005244139116257429, 0.7691247463226318, 0.009500931948423386, 0.0014077352825552225], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.356679", "n_pass": [146, 27, 21], "n_token": 12, "loss": [0.046288251876831055, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "tree", "ParseCodeToTree", "code", "tree", "dumptree", ":", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 1, 3, 8, 4, 7, 10, 11]}}
{"prediction": {"error_location": 0.9547666907310486, "repair_targets": [], "repair_candidates": [0.12726598978042603, 0.6840386390686035, 0.1013653427362442, 0.016916749998927116, 0.004861382767558098, 0.013256057165563107, 0.017194297164678574, 0.02291480079293251, 0.012186692096292973], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.410017", "n_pass": [148, 28, 22], "n_token": 11, "loss": [0.36325937509536743, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "tree", "ParseCodeToTree", "code", "tree", "dumptree", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 1, 3, 8, 4, 7, 9, 10]}}
{"prediction": {"error_location": 0.6954060792922974, "repair_targets": [], "repair_candidates": [0.11314932256937027, 0.5082656145095825, 0.07151412963867188, 0.013248642906546593, 0.010921278968453407, 0.0298435240983963, 0.06106540933251381, 0.07008909434080124, 0.12190300226211548], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:01:49.465426", "n_pass": [156, 29, 23], "n_token": 10, "loss": [0.6744093298912048, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "code", "dumptree", "tree", "code", "tree", "dumptree", "tree", "tree"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 5, 1, 3, 7, 4, 6, 8, 9]}}
{"prediction": {"error_location": 0.5094572305679321, "repair_targets": [], "repair_candidates": [0.1717778742313385, 0.6015088558197021, 0.07581883668899536, 0.014847718179225922, 0.00928397849202156, 0.006903426256030798, 0.014714494347572327, 0.019441897049546242, 0.08570294827222824], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'code', 'dumptree', 'tree', 'code', 'tree', 'dumptree', 'tree', 'tree']
