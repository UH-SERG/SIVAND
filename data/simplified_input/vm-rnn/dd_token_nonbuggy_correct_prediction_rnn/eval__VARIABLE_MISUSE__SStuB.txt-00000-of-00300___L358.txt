
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"], "error_location": [0], "repair_targets": [], "repair_candidates": [11, 85, 116, 2, 56, 50, 68, 19, 38, 90, 109, 4, 29, 31, 61, 100, 102], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "weblabdeusto/weblabdeusto/tools/wcloud/wcloud/actions/redis_actions.py", "license": "bsd-2-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 358, "results": {"model": "rnn", "prob": {"loc": [[0.41488033533096313, 2.3206736443626141e-07, 4.16923512602807e-06, 9.155733393662047e-10, 9.344367413177679e-08, 3.1688851542810426e-09, 4.5372452461833745e-09, 1.8648346156169282e-07, 3.039489726575084e-08, 1.2090710299617058e-07, 3.4320893860240176e-07, 7.069421599226189e-07, 4.903205876871652e-07, 1.1601919140957762e-06, 3.937192047942517e-07, 1.8671427824301645e-05, 1.605128431947378e-06, 9.106034326578083e-07, 5.8628383925452e-08, 1.0224987363471882e-06, 1.2789596937068382e-08, 1.2632442292215273e-07, 1.3999710724021952e-08, 9.916079513061504e-09, 1.2316005268075969e-05, 6.282375579758082e-07, 2.0287579616251605e-07, 0.00015650474233552814, 1.0226596032225643e-06, 3.6865424135612557e-07, 1.3586064824266941e-06, 0.00037517090095207095, 1.417568107342504e-08, 3.7840067079741857e-07, 2.064335421891883e-05, 0.000933217175770551, 4.988548312212515e-07, 9.340019602177563e-08, 2.7909473487852665e-07, 1.431761518233543e-07, 7.549872726997364e-09, 1.8176497462718544e-07, 1.5613562709404505e-06, 2.350973318243632e-07, 1.8897673044193652e-06, 4.215730314172106e-06, 1.8292173990630545e-05, 1.733491394872999e-08, 3.614952106545388e-07, 1.9015924834775433e-08, 3.944926731946907e-07, 1.573990715542095e-08, 4.82161624404398e-07, 1.5254274288167835e-08, 1.410480354735455e-08, 4.891601747658569e-06, 0.279756098985672, 3.6090406219102533e-09, 3.807636161923256e-08, 6.438310720113805e-07, 4.753101450205577e-07, 0.033122770488262177, 2.3542737892512378e-07, 5.305723149717778e-08, 7.115754669939633e-07, 1.0982763853917277e-07, 5.838119250256568e-07, 5.013565385070251e-08, 8.060512300289702e-06, 6.696143195483728e-09, 6.49843059363775e-07, 7.583333854199736e-07, 4.323912435211241e-05, 6.935094347682025e-07, 7.891994755482301e-07, 1.404149656991649e-06, 3.8046835015848046e-07, 1.089735178538831e-06, 9.806279166468812e-08, 9.170283732373719e-08, 1.2128082005347096e-07, 2.560272696428001e-05, 2.957212643650564e-07, 1.1750171324820258e-06, 1.6433135670013144e-06, 7.547777727268112e-07, 2.462800523517217e-07, 5.740942924603587e-06, 8.830459137243452e-07, 1.3549905020227015e-07, 6.466665922744141e-07, 1.3436094903340745e-08, 7.27023859781184e-07, 2.589203340619406e-08, 6.276508912606005e-08, 7.93253057054244e-05, 1.4512692132484517e-06, 6.768275397917023e-07, 0.0007892341818660498, 5.4888823797227815e-06, 8.521172389919229e-07, 1.9980413981102174e-06, 0.002126626204699278, 7.321010997429767e-08, 8.244177251981455e-07, 1.1020745660061948e-05, 0.0014698252780362964, 3.76468847207434e-07, 1.1862113780125583e-07, 6.544946131725737e-07, 2.233021803021984e-07, 1.8409926028084556e-08, 8.846212722346536e-07, 1.952778075064998e-05, 9.359217074234039e-06, 5.113151928526349e-06, 0.2657899558544159, 2.9429420465021394e-06, 3.7376824479906645e-07, 1.442894517822424e-05, 0.00019366689957678318, 7.327685125346761e-07, 4.1913426684914157e-07, 1.0566977834969293e-05, 4.012224599136971e-05]], "pointer": [[0.0, 0.0, 0.08639965206384659, 0.0, 0.013758554123342037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09047259390354156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1978936493396759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006596760940738022, 0.0, 4.186451405985281e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04322151094675064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003929989761672914, 0.0, 0.0, 0.0, 0.0, 0.0, 5.452741970657371e-05, 0.0, 0.0, 0.0, 0.0, 5.232061448623426e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.498207873548381e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2375389188528061, 0.0, 0.0, 0.0, 0.0, 0.18849533796310425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00014474138151854277, 0.0, 6.899047730257735e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1407562643289566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.883871977450326e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.8797652721405029, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:45:58.947334", "n_pass": [1, 1, 1], "n_token": 125, "loss": [0.8797652721405029, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "#UNINDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 85, 116, 2, 56, 50, 68, 19, 38, 90, 109, 4, 29, 31, 61, 100, 102]}}
{"prediction": {"error_location": 0.41488033533096313, "repair_targets": [], "repair_candidates": [0.08639965206384659, 0.013758554123342037, 0.09047259390354156, 0.1978936493396759, 0.0006596760940738022, 4.186451405985281e-05, 0.04322151094675064, 0.0003929989761672914, 5.452741970657371e-05, 5.232061448623426e-05, 9.498207873548381e-06, 0.2375389188528061, 0.18849533796310425, 0.00014474138151854277, 6.899047730257735e-05, 0.1407562643289566, 3.883871977450326e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.279744", "n_pass": [54, 4, 2], "n_token": 117, "loss": [0.9082671403884888, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 77, 108, 2, 56, 50, 68, 19, 38, 82, 101, 4, 29, 31, 61, 92, 94]}}
{"prediction": {"error_location": 0.40322235226631165, "repair_targets": [], "repair_candidates": [0.08366315811872482, 0.01601427048444748, 0.0877644270658493, 0.18326027691364288, 0.0007092314772307873, 3.975645813625306e-05, 0.04416618123650551, 0.0006048493669368327, 4.797044311999343e-05, 4.2057759856106713e-05, 4.726142651634291e-05, 0.24195405840873718, 0.20569774508476257, 0.00013729445345234126, 6.208778358995914e-05, 0.13575583696365356, 3.356477100169286e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.387360", "n_pass": [58, 5, 3], "n_token": 109, "loss": [0.9110109210014343, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", ".", "ready", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 77, 108, 2, 56, 50, 68, 19, 38, 82, 101, 4, 29, 31, 61, 92, 94]}}
{"prediction": {"error_location": 0.402117520570755, "repair_targets": [], "repair_candidates": [0.1621788591146469, 0.02451290190219879, 0.1777324676513672, 0.2840508818626404, 0.0015282727545127273, 7.907560211606324e-05, 0.05021703243255615, 0.0009110959945246577, 8.312285353895277e-05, 8.809498103801161e-05, 6.106044020270929e-05, 0.28033316135406494, 0.009801753796637058, 0.00039447241579182446, 0.000134370886371471, 0.007848176173865795, 4.508682104642503e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.590032", "n_pass": [68, 7, 4], "n_token": 101, "loss": [0.6663499474525452, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 69, 100, 2, 56, 50, 68, 19, 38, 74, 93, 4, 29, 31, 61, 84, 86]}}
{"prediction": {"error_location": 0.5135797262191772, "repair_targets": [], "repair_candidates": [0.117889404296875, 0.021504154428839684, 0.09009363502264023, 0.20408517122268677, 0.0008106256136670709, 4.794942287844606e-05, 0.057614974677562714, 0.0016675094375386834, 0.00012285813863854855, 7.373531116172671e-05, 2.8789096177206375e-05, 0.49189096689224243, 0.008846187964081764, 0.0002788858546409756, 0.00012094164412701502, 0.004892966244369745, 3.1284536817111075e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.687612", "n_pass": [76, 8, 5], "n_token": 93, "loss": [0.865837037563324, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 61, 92, 2, 48, 42, 60, 19, 30, 66, 85, 4, 21, 23, 53, 76, 78]}}
{"prediction": {"error_location": 0.4206992983818054, "repair_targets": [], "repair_candidates": [0.09089997410774231, 0.02120940200984478, 0.08651073276996613, 0.5801397562026978, 0.002480102935805917, 8.63847672007978e-05, 0.12907104194164276, 0.0027342760004103184, 0.00010234318324364722, 9.534641139907762e-05, 2.318818587809801e-05, 0.05972566828131676, 0.022044477984309196, 0.00021425900922622532, 9.568827954353765e-05, 0.004538327921181917, 2.902293454098981e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.786990", "n_pass": [114, 9, 6], "n_token": 89, "loss": [0.7421417236328125, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConnectionError", ":", "#NEWLINE#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 57, 88, 2, 44, 38, 56, 19, 26, 62, 81, 4, 21, 23, 49, 72, 74]}}
{"prediction": {"error_location": 0.47609320282936096, "repair_targets": [], "repair_candidates": [0.14551980793476105, 0.02025327831506729, 0.12533219158649445, 0.29294005036354065, 0.002658034209161997, 6.467229832196608e-05, 0.05460575222969055, 0.004584986716508865, 0.00014371733414009213, 0.00013122214295435697, 4.7707377234473825e-05, 0.2752363681793213, 0.06365325301885605, 0.0004544308758340776, 0.00014708578237332404, 0.014181659556925297, 4.579720553010702e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:45:59.973379", "n_pass": [117, 11, 7], "n_token": 85, "loss": [0.7254611253738403, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "=", "0", ")", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 53, 84, 2, 40, 34, 52, 19, 26, 58, 77, 4, 21, 23, 45, 68, 70]}}
{"prediction": {"error_location": 0.48410141468048096, "repair_targets": [], "repair_candidates": [0.1333441436290741, 0.018369529396295547, 0.12283927202224731, 0.3080979585647583, 0.002755669644102454, 6.409748311853036e-05, 0.0904957577586174, 0.011022678576409817, 0.00011540755076566711, 9.081766620511189e-05, 4.594902929966338e-05, 0.24300040304660797, 0.056453123688697815, 0.00042144814506173134, 0.00014404086687136441, 0.012693218886852264, 4.653324867831543e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:00.250339", "n_pass": [128, 14, 8], "n_token": 81, "loss": [0.649763286113739, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [11, 53, 80, 2, 40, 34, 52, 19, 26, 58, 73, 4, 21, 23, 45, 68, 70]}}
{"prediction": {"error_location": 0.5221694111824036, "repair_targets": [], "repair_candidates": [0.1601054072380066, 0.02137177251279354, 0.15053236484527588, 0.2715376615524292, 0.003541341284289956, 0.00011327672109473497, 0.09133484959602356, 0.011142411269247532, 0.00012933227117173374, 0.00016853789566084743, 3.567593375919387e-05, 0.25431933999061584, 0.0343591533601284, 0.0004389667301438749, 0.0001904535456560552, 0.000643181789200753, 3.6215154977981e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:00.340823", "n_pass": [133, 15, 9], "n_token": 78, "loss": [0.7188897728919983, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "False", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 50, 77, 2, 37, 31, 49, 16, 23, 55, 70, 4, 18, 20, 42, 65, 67]}}
{"prediction": {"error_location": 0.48729297518730164, "repair_targets": [], "repair_candidates": [0.18065288662910461, 0.024309268221259117, 0.14614753425121307, 0.3010634183883667, 0.003594504902139306, 0.00015252681623678654, 0.12091755121946335, 0.010785823687911034, 0.0001809084351407364, 0.0001969380973605439, 4.5672048145206645e-05, 0.18201620876789093, 0.028883548453450203, 0.0003043858741875738, 0.00020290000247769058, 0.0005028095911256969, 4.320066364016384e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:00.429298", "n_pass": [135, 16, 10], "n_token": 74, "loss": [0.8248618841171265, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "(", ")", "#NEWLINE#", "#UNINDENT#", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 46, 73, 2, 33, 27, 45, 12, 19, 51, 66, 4, 14, 16, 38, 61, 63]}}
{"prediction": {"error_location": 0.4382955729961395, "repair_targets": [], "repair_candidates": [0.0801103264093399, 0.022903546690940857, 0.16363751888275146, 0.5865061283111572, 0.0021690442226827145, 5.672610495821573e-05, 0.019234681501984596, 0.007850069552659988, 9.281469829147682e-05, 0.00019178299407940358, 2.9401791834970936e-05, 0.09814313054084778, 0.018238434568047523, 0.00025025138165801764, 0.00018271917360834777, 0.0003719050146173686, 3.146786184515804e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:00.517835", "n_pass": [139, 17, 11], "n_token": 70, "loss": [0.9122720956802368, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", "=", "start_redis", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 42, 69, 2, 29, 23, 41, 12, 19, 47, 62, 4, 14, 16, 34, 57, 59]}}
{"prediction": {"error_location": 0.40161070227622986, "repair_targets": [], "repair_candidates": [0.10925036668777466, 0.02822929434478283, 0.18841220438480377, 0.42275336384773254, 0.0013472221326082945, 7.373750122496858e-05, 0.004151478409767151, 0.004770361352711916, 0.00012574299762491137, 0.00017909304006025195, 2.9720338716288097e-05, 0.20918723940849304, 0.03040911816060543, 0.00033849405008368194, 0.00021133474365342408, 0.000491987622808665, 3.922392352251336e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:00.772868", "n_pass": [195, 20, 12], "n_token": 68, "loss": [0.901734471321106, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "'redis_%d.conf'", "%", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 40, 67, 2, 27, 23, 39, 12, 19, 45, 60, 4, 14, 16, 32, 55, 57]}}
{"prediction": {"error_location": 0.4058651030063629, "repair_targets": [], "repair_candidates": [0.13565701246261597, 0.040163274854421616, 0.2232867032289505, 0.28369614481925964, 0.0022667059674859047, 9.373446664540097e-05, 0.057865485548973083, 1.9489021724439226e-05, 0.0004576983628794551, 0.0003875747206620872, 3.748204471776262e-05, 0.23334865272045135, 0.021711962297558784, 0.00035949505399912596, 0.0002115951938321814, 0.00039683733484707773, 4.009985059383325e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.023122", "n_pass": [199, 23, 13], "n_token": 66, "loss": [0.9897387027740479, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "while", "(", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 38, 65, 2, 27, 23, 37, 12, 19, 43, 58, 4, 14, 16, 30, 53, 55]}}
{"prediction": {"error_location": 0.3716737627983093, "repair_targets": [], "repair_candidates": [0.1523226797580719, 0.02515149489045143, 0.24505934119224548, 0.25650081038475037, 0.0021708430722355843, 0.0001107031202991493, 0.02635151334106922, 2.523144030419644e-05, 0.003208533860743046, 0.00039375052438117564, 4.986752537661232e-05, 0.2734600901603699, 0.014417223632335663, 0.00028929588734172285, 0.0001801049365894869, 0.00027099050930701196, 3.754042336368002e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.190033", "n_pass": [202, 25, 14], "n_token": 64, "loss": [0.7509223222732544, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "True", "#NEWLINE#", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 63, 2, 27, 23, 35, 12, 19, 41, 56, 4, 14, 16, 30, 51, 53]}}
{"prediction": {"error_location": 0.471931129693985, "repair_targets": [], "repair_candidates": [0.18212702870368958, 0.027647007256746292, 0.2900228202342987, 0.28338703513145447, 0.002374055562540889, 0.00012095097190467641, 0.050858885049819946, 3.957013905164786e-05, 0.0059609608724713326, 0.000448110542492941, 0.0012567938538268209, 0.12893816828727722, 0.02569977380335331, 0.00048373930621892214, 0.00023719045566394925, 0.00034371676156297326, 5.427037467597984e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.271979", "n_pass": [205, 26, 15], "n_token": 62, "loss": [0.5176885724067688, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "redis", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 61, 2, 27, 23, 35, 12, 19, 39, 54, 4, 14, 16, 30, 49, 51]}}
{"prediction": {"error_location": 0.5958963632583618, "repair_targets": [], "repair_candidates": [0.1916384994983673, 0.0320565365254879, 0.29429516196250916, 0.3316658139228821, 0.0028854836709797382, 0.00014414903125725687, 0.05134443938732147, 4.138664371566847e-05, 0.009024137631058693, 0.0005087664467282593, 0.0013385590864345431, 0.07887979596853256, 0.0046037971042096615, 0.0008480463293381035, 0.0003092513361480087, 0.00035526289138942957, 6.0843125538667664e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.352489", "n_pass": [207, 27, 16], "n_token": 60, "loss": [0.46839040517807007, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ".", "StrictRedis", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 59, 2, 27, 23, 35, 12, 19, 39, 52, 4, 14, 16, 30, 47, 49]}}
{"prediction": {"error_location": 0.6260090470314026, "repair_targets": [], "repair_candidates": [0.19013473391532898, 0.03078032098710537, 0.2922380864620209, 0.32894665002822876, 0.002855786820873618, 0.0001465544628445059, 0.05027439817786217, 3.978432505391538e-05, 0.011784801259636879, 0.0005807346315123141, 0.0018592398846521974, 0.08874630182981491, 5.91829557379242e-05, 0.0008245681528933346, 0.0003676826599985361, 0.00029436053591780365, 6.679900252493098e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.431787", "n_pass": [208, 28, 17], "n_token": 58, "loss": [0.5658433437347412, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "(", "host", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 57, 2, 27, 23, 35, 12, 19, 39, 50, 4, 14, 16, 30, 45, 47]}}
{"prediction": {"error_location": 0.5678809881210327, "repair_targets": [], "repair_candidates": [0.17546844482421875, 0.029240699484944344, 0.2599602937698364, 0.36478888988494873, 0.0027001986745744944, 0.00013395312998909503, 0.12137126922607422, 4.5606564526678994e-05, 0.009292644448578358, 0.0003104651113972068, 0.0003937935398425907, 0.034557804465293884, 0.001069720834493637, 0.0003122204798273742, 0.00017217270215041935, 0.00014239276060834527, 3.94731032429263e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.510950", "n_pass": [209, 29, 18], "n_token": 56, "loss": [0.9160215854644775, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", "=", "'127.0.0.1'", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 55, 2, 27, 23, 35, 12, 19, 39, 48, 4, 14, 16, 30, 43, 45]}}
{"prediction": {"error_location": 0.4001076817512512, "repair_targets": [], "repair_candidates": [0.13979469239711761, 0.023167917504906654, 0.19876854121685028, 0.29381492733955383, 0.0020362776704132557, 0.00010984171240124851, 0.11220898479223251, 4.21038203057833e-05, 0.008467942476272583, 0.0002801779774017632, 0.0006518911104649305, 0.03987384960055351, 0.18032823503017426, 0.0001315957197220996, 7.680362614337355e-05, 0.0002134394453605637, 3.2805783121148124e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.589517", "n_pass": [210, 30, 19], "n_token": 54, "loss": [0.6387721300125122, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", ",", "db", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 53, 2, 27, 23, 35, 12, 19, 39, 46, 4, 14, 16, 30, 41, 43]}}
{"prediction": {"error_location": 0.5279402732849121, "repair_targets": [], "repair_candidates": [0.2041187286376953, 0.04184357076883316, 0.26874515414237976, 0.3074452579021454, 0.00527828698977828, 0.0002209660451626405, 0.07389967888593674, 5.5746040743542835e-05, 0.016324393451213837, 0.000818641681689769, 0.0003389081102795899, 0.08019832521677017, 4.0556962630944327e-05, 0.0004383240011520684, 0.000121439850772731, 7.364817429333925e-05, 3.8414309528889135e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.668941", "n_pass": [213, 31, 20], "n_token": 52, "loss": [0.8234022855758667, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "ping", "(", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 51, 2, 27, 23, 35, 12, 19, 39, 44, 4, 14, 16, 30, 41, 43]}}
{"prediction": {"error_location": 0.4389357268810272, "repair_targets": [], "repair_candidates": [0.17815840244293213, 0.03745574131608009, 0.29652857780456543, 0.3062134385108948, 0.003390425583347678, 0.00012724302359856665, 0.098316989839077, 5.5494423577329144e-05, 0.015213338658213615, 0.000706844381056726, 0.00035621077404357493, 0.04529285430908203, 0.00011625088518485427, 0.01685861498117447, 0.0010739353019744158, 7.624715362908319e-05, 5.9326095652068034e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.744340", "n_pass": [215, 32, 21], "n_token": 50, "loss": [0.677833080291748, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", ")", "#NEWLINE#", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 49, 2, 27, 23, 35, 12, 19, 39, 44, 4, 14, 16, 30, 41, 43]}}
{"prediction": {"error_location": 0.5077160000801086, "repair_targets": [], "repair_candidates": [0.1605755090713501, 0.04238112270832062, 0.23182274401187897, 0.3278905749320984, 0.003900151699781418, 0.00019281213462818414, 0.0869462788105011, 0.00010525349352974445, 0.03517835959792137, 0.001202165032736957, 0.000602744345087558, 0.08161885291337967, 4.4844127842225134e-05, 0.02536672167479992, 0.002035649726167321, 7.218158134492114e-05, 6.405877502402291e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.818929", "n_pass": [216, 33, 22], "n_token": 48, "loss": [0.5727855563163757, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def check_redis_deployment(", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [8, 36, 47, 2, 27, 23, 35, 12, 19, 39, 44, 4, 14, 16, 30, 41, 43]}}
{"prediction": {"error_location": 0.5639523267745972, "repair_targets": [], "repair_candidates": [0.16931870579719543, 0.04831728711724281, 0.30601751804351807, 0.2735752463340759, 0.004999084863811731, 0.00020228100765962154, 0.05023612827062607, 0.00010194269998464733, 0.027330521494150162, 0.001229948247782886, 0.0006485659978352487, 0.08300711959600449, 4.385049396660179e-05, 0.033652953803539276, 0.0012374103534966707, 4.116368290851824e-05, 4.0293463825946674e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.893304", "n_pass": [219, 34, 23], "n_token": 47, "loss": [0.578205406665802, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "\"\\n    Verifies that a Redis instance has been deployed properly by doing a PING against the server.\\n    If the instance hasn't been started already then this method will start it itself and will\\n    close it once the verification is done.\\n\\n    @param redis_env_folder: Folder where the Redis config files are stored.\\n    @param port: Port under which the redis instance deployment to verify is running or is supposed to run.\\n\\n    @return True if the check passes. Otherwise an exception is thrown.\\n    \"", "#NEWLINE#", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [7, 35, 46, 1, 26, 22, 34, 11, 18, 38, 43, 3, 13, 15, 29, 40, 42]}}
{"prediction": {"error_location": 0.5609041452407837, "repair_targets": [], "repair_candidates": [0.2652435898780823, 0.06705272942781448, 0.21142369508743286, 0.2702733874320984, 0.005868647247552872, 0.00038945151027292013, 0.04826267063617706, 0.00011139355774503201, 0.023224864155054092, 0.0010553175816312432, 0.0007396462606266141, 0.07483091205358505, 3.6441888369154185e-05, 0.030529500916600227, 0.0008934361976571381, 3.3741220249794424e-05, 3.053374166483991e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:01.966702", "n_pass": [222, 35, 24], "n_token": 45, "loss": [0.4626653790473938, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "#NEWLINE#", "#INDENT#", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 33, 44, 1, 24, 20, 32, 9, 16, 36, 41, 3, 11, 13, 27, 38, 40]}}
{"prediction": {"error_location": 0.6296033263206482, "repair_targets": [], "repair_candidates": [0.3585985004901886, 0.09712060540914536, 0.18956676125526428, 0.10984787344932556, 0.008073012344539165, 0.0005100852577015758, 0.04257972911000252, 0.00011467077274573967, 0.028381355106830597, 0.0013768177013844252, 0.0008387361303903162, 0.1112523078918457, 4.1403225623071194e-05, 0.050773363560438156, 0.000858676852658391, 3.5514709452399984e-05, 3.0541752494173124e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.040415", "n_pass": [224, 36, 25], "n_token": 43, "loss": [0.5860491991043091, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", ".", "ping", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 31, 42, 1, 22, 18, 30, 7, 14, 34, 39, 3, 9, 11, 25, 36, 38]}}
{"prediction": {"error_location": 0.5565216541290283, "repair_targets": [], "repair_candidates": [0.2392430603504181, 0.12382850050926208, 0.19836120307445526, 0.11979272216558456, 0.014357246458530426, 0.02436179295182228, 0.004613030236214399, 6.520029273815453e-05, 0.007923917844891548, 0.002418489195406437, 0.0013500027125701308, 0.1831016093492508, 2.6646150217857212e-05, 0.07989827543497086, 0.0006025072070769966, 2.9934572012280114e-05, 2.5878529413603246e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.112315", "n_pass": [229, 37, 26], "n_token": 41, "loss": [0.6607015132904053, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", ".", "delay", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 29, 40, 1, 20, 16, 28, 7, 14, 32, 37, 3, 9, 11, 23, 34, 36]}}
{"prediction": {"error_location": 0.5164888501167297, "repair_targets": [], "repair_candidates": [0.2270825207233429, 0.10158609598875046, 0.140594482421875, 0.1506948471069336, 0.011560611426830292, 0.01684679090976715, 0.0018099817680194974, 0.0001069052959792316, 0.00445568235591054, 0.004193720407783985, 0.00306923920288682, 0.23108366131782532, 3.7503639759961516e-05, 0.1059122085571289, 0.000886663212440908, 4.1766059439396486e-05, 3.739071689778939e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.182651", "n_pass": [231, 38, 27], "n_token": 39, "loss": [0.6670340895652771, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", ",", "(", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 27, 38, 1, 18, 16, 26, 7, 14, 30, 35, 3, 9, 11, 21, 32, 34]}}
{"prediction": {"error_location": 0.5132285356521606, "repair_targets": [], "repair_candidates": [0.17076511681079865, 0.09323785454034805, 0.09880350530147552, 0.20122331380844116, 0.005618806462734938, 0.010353299789130688, 0.000764786615036428, 0.001116676372475922, 0.0008951328927651048, 0.0009284184779971838, 0.002914971439167857, 0.29125845432281494, 3.534593997756019e-05, 0.12131531536579132, 0.0006990354740992188, 3.6202854971634224e-05, 3.372800347278826e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.251188", "n_pass": [233, 39, 28], "n_token": 37, "loss": [0.9013767242431641, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "=", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 25, 36, 1, 18, 16, 24, 7, 14, 28, 33, 3, 9, 11, 19, 30, 32]}}
{"prediction": {"error_location": 0.4060102701187134, "repair_targets": [], "repair_candidates": [0.20922890305519104, 0.23972810804843903, 0.11751698702573776, 0.08957244455814362, 0.004856499843299389, 0.007683450821787119, 0.0010380784515291452, 0.0008599669090472162, 0.0006650967407040298, 0.0001784290507202968, 0.007340005598962307, 0.17836438119411469, 5.571723522734828e-05, 0.14136230945587158, 0.001443191315047443, 5.665146454703063e-05, 4.9789101467467844e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.660050", "n_pass": [296, 45, 29], "n_token": 36, "loss": [0.8229115605354309, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", ",", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 25, 35, 1, 18, 16, 24, 7, 14, 27, 32, 3, 9, 11, 19, 29, 31]}}
{"prediction": {"error_location": 0.43915119767189026, "repair_targets": [], "repair_candidates": [0.28519299626350403, 0.3286416828632355, 0.07938364148139954, 0.21220985054969788, 0.002671915339305997, 0.006616951897740364, 0.0005459215608425438, 0.000371511559933424, 0.00036865033325739205, 0.00011433297913754359, 0.0006510217790491879, 0.0003871251828968525, 0.006467585451900959, 0.07359544932842255, 0.002640834776684642, 9.273287287214771e-05, 4.7716497647343203e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.796967", "n_pass": [299, 47, 30], "n_token": 35, "loss": [0.9294431209564209, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "=", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 25, 34, 1, 18, 16, 24, 7, 14, 27, 31, 3, 9, 11, 19, 28, 30]}}
{"prediction": {"error_location": 0.3947734832763672, "repair_targets": [], "repair_candidates": [0.17479054629802704, 0.17150096595287323, 0.04776851832866669, 0.21132071316242218, 0.0016386762727051973, 0.0031746472232043743, 0.0002817708009388298, 0.00024260551435872912, 0.0001988299045478925, 7.240698323585093e-05, 0.0002670371613930911, 0.0001572949840920046, 0.12656685709953308, 0.2606293559074402, 0.001307454309426248, 5.6879031035350636e-05, 2.544568997109309e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.864166", "n_pass": [301, 48, 31], "n_token": 34, "loss": [0.6595205068588257, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "if", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 25, 33, 1, 18, 16, 24, 7, 14, 27, 30, 3, 9, 11, 19, 28, 29]}}
{"prediction": {"error_location": 0.5170992016792297, "repair_targets": [], "repair_candidates": [0.3959830701351166, 0.27176642417907715, 0.11297880113124847, 0.18729852139949799, 0.0025095923338085413, 0.004859346896409988, 0.0006212124135345221, 0.0003507474029902369, 0.0007651725318282843, 0.00020829222921747714, 0.0001797938602976501, 0.0003076393040828407, 0.017724528908729553, 0.0010877966415137053, 0.002994053764268756, 0.00032304986962117255, 4.189735773252323e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:02.996906", "n_pass": [305, 50, 32], "n_token": 33, "loss": [0.6923283338546753, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", ",", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [5, 25, 32, 1, 18, 16, 24, 7, 14, 27, 30, 3, 9, 11, 19, 28, 29]}}
{"prediction": {"error_location": 0.5004096031188965, "repair_targets": [], "repair_candidates": [0.42761093378067017, 0.2948649823665619, 0.08177988976240158, 0.1813182681798935, 0.0018832454225048423, 0.003247631946578622, 0.00047389185056090355, 0.00034647269058041275, 0.0007357003050856292, 0.00019642159168142825, 0.00019900001643691212, 0.00018436912796460092, 0.0032401082571595907, 0.00038499425863847136, 0.0015409414190798998, 0.00024724865215830505, 0.0017459747614338994], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.062983", "n_pass": [309, 51, 33], "n_token": 32, "loss": [0.45818623900413513, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "=", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 24, 31, 1, 17, 15, 23, 6, 13, 26, 29, 2, 8, 10, 18, 27, 28]}}
{"prediction": {"error_location": 0.6324297189712524, "repair_targets": [], "repair_candidates": [0.3657478094100952, 0.11238180100917816, 0.15872149169445038, 0.33592191338539124, 0.003742397064343095, 0.007878241129219532, 0.0009297151118516922, 0.0005957995308563113, 0.0010906945681199431, 0.00030664628138765693, 0.0002463956770952791, 0.0003461065352894366, 0.0059807924553751945, 0.0006036579725332558, 0.0024060681462287903, 0.0005328911356627941, 0.0025676500517874956], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.196332", "n_pass": [313, 53, 34], "n_token": 31, "loss": [0.44216716289520264, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "=", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 23, 30, 1, 16, 14, 22, 5, 12, 25, 28, 2, 7, 9, 17, 26, 27]}}
{"prediction": {"error_location": 0.6426421403884888, "repair_targets": [], "repair_candidates": [0.23844410479068756, 0.020308848470449448, 0.025301121175289154, 0.705024778842926, 0.00021198103786446154, 0.0002505719312466681, 0.0017383687663823366, 0.0008724078070372343, 0.0005866311839781702, 0.00020663967006839812, 0.00011098980758106336, 0.0002625265042297542, 0.0025903519708663225, 0.00043192796874791384, 0.0014263957273215055, 0.0003735804930329323, 0.0018588128732517362], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.261247", "n_pass": [315, 54, 35], "n_token": 30, "loss": [0.21021375060081482, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "=", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 22, 29, 1, 15, 13, 21, 5, 11, 24, 27, 2, 6, 8, 16, 25, 26]}}
{"prediction": {"error_location": 0.8104109168052673, "repair_targets": [], "repair_candidates": [0.47310304641723633, 0.057475220412015915, 0.027336344122886658, 0.15322430431842804, 0.25431230664253235, 0.0007727128104306757, 0.002653055125847459, 0.0017716423608362675, 0.0011743201175704598, 0.0004961527301929891, 0.00042161819874309003, 0.00091878033708781, 0.01088214572519064, 0.0019366529304534197, 0.0066823153756558895, 0.0014256699942052364, 0.0054137445986270905], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.326206", "n_pass": [317, 55, 36], "n_token": 29, "loss": [0.21634770929813385, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", ",", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 21, 28, 1, 14, 12, 20, 5, 10, 23, 26, 2, 6, 7, 15, 24, 25]}}
{"prediction": {"error_location": 0.8054550886154175, "repair_targets": [], "repair_candidates": [0.7947418093681335, 0.10290541499853134, 0.031624265015125275, 0.011749650351703167, 0.006993924733251333, 0.004435481037944555, 0.005565167870372534, 0.003309084801003337, 0.004431982059031725, 0.0007594855851493776, 0.0005619226722046733, 0.0009733010665513575, 0.011951605789363384, 0.001861577620729804, 0.007907593622803688, 0.0020209767390042543, 0.008206616155803204], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.390464", "n_pass": [319, 56, 37], "n_token": 28, "loss": [0.269817590713501, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "#NEWLINE#", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 20, 27, 1, 13, 11, 19, 5, 9, 22, 25, 2, 6, 7, 14, 23, 24]}}
{"prediction": {"error_location": 0.763518750667572, "repair_targets": [], "repair_candidates": [0.796688973903656, 0.10098534822463989, 0.04037395119667053, 0.010340134613215923, 0.0030838968232274055, 0.005083938594907522, 0.010694526135921478, 0.0029108559247106314, 0.003712521633133292, 0.0006451072404161096, 0.00039816804928705096, 0.0008603103342466056, 0.007794193923473358, 0.0014690514653921127, 0.00605034688487649, 0.0015575340948998928, 0.007351059466600418], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.453815", "n_pass": [320, 57, 38], "n_token": 27, "loss": [0.25979021191596985, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "#INDENT#", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 19, 26, 1, 12, 10, 18, 5, 8, 21, 24, 2, 6, 7, 13, 22, 23]}}
{"prediction": {"error_location": 0.7712132930755615, "repair_targets": [], "repair_candidates": [0.6847045421600342, 0.13270585238933563, 0.07774576544761658, 0.014042838476598263, 0.008384487591683865, 0.026488136500120163, 0.003772077150642872, 0.004214562475681305, 0.0051159001886844635, 0.0013672494096681476, 0.0008021417306736112, 0.0017181576695293188, 0.014489931985735893, 0.002455429406836629, 0.009426357224583626, 0.002182209398597479, 0.010384263470768929], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.518785", "n_pass": [322, 58, 39], "n_token": 26, "loss": [0.2953769266605377, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "(", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 18, 25, 1, 11, 9, 17, 5, 8, 20, 23, 2, 6, 7, 12, 21, 22]}}
{"prediction": {"error_location": 0.7442509531974792, "repair_targets": [], "repair_candidates": [0.7029282450675964, 0.1340465545654297, 0.10200474411249161, 0.012384969741106033, 0.002926586428657174, 0.004537396132946014, 0.001882082549855113, 0.0011010400485247374, 0.0033619238529354334, 0.0009016231633722782, 0.0005206026253290474, 0.0013483439106494188, 0.01109886821359396, 0.0018535539275035262, 0.007291073445230722, 0.0019641586113721132, 0.009848297573626041], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.581051", "n_pass": [324, 59, 40], "n_token": 25, "loss": [0.6510305404663086, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", ")", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 17, 24, 1, 10, 9, 16, 5, 8, 19, 22, 2, 6, 7, 11, 20, 21]}}
{"prediction": {"error_location": 0.5215080380439758, "repair_targets": [], "repair_candidates": [0.7286394834518433, 0.18260253965854645, 0.025199878960847855, 0.0053307609632611275, 0.004605511669069529, 0.017194394022226334, 0.005237280856817961, 0.0003282901016063988, 0.003127287607640028, 0.00451691122725606, 0.0005434612394310534, 0.0009545526700094342, 0.008556477725505829, 0.0011142586590722203, 0.004636355210095644, 0.001231750356964767, 0.006180796306580305], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.642932", "n_pass": [327, 60, 41], "n_token": 24, "loss": [0.5622380375862122, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", ")", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 16, 23, 1, 10, 9, 15, 5, 8, 18, 21, 2, 6, 7, 11, 19, 20]}}
{"prediction": {"error_location": 0.5699320435523987, "repair_targets": [], "repair_candidates": [0.7478138208389282, 0.17193976044654846, 0.023073270916938782, 0.004137400072067976, 0.0036264860536903143, 0.015442965552210808, 0.005413031205534935, 0.0002550584322307259, 0.001675381208769977, 0.0016029664548113942, 0.0008753686561249197, 0.001597071997821331, 0.007740001194179058, 0.0011104176519438624, 0.004858840722590685, 0.0014022878604009748, 0.007435909006744623], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.704225", "n_pass": [328, 61, 42], "n_token": 23, "loss": [0.6620977520942688, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "#NEWLINE#", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 15, 22, 1, 10, 9, 14, 5, 8, 17, 20, 2, 6, 7, 11, 18, 19]}}
{"prediction": {"error_location": 0.51576828956604, "repair_targets": [], "repair_candidates": [0.7516820430755615, 0.1786661148071289, 0.02730867639183998, 0.0032560513354837894, 0.0026950668543577194, 0.013723392970860004, 0.003507687710225582, 0.00012720497034024447, 0.0007225281442515552, 0.0005101102869957685, 0.0008327814866788685, 0.00115911231841892, 0.003613920882344246, 0.0006909514777362347, 0.003491469891741872, 0.0011343739461153746, 0.006878504995256662], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.765542", "n_pass": [329, 62, 43], "n_token": 22, "loss": [0.7688973546028137, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "not", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 14, 21, 1, 10, 9, 13, 5, 8, 16, 19, 2, 6, 7, 11, 17, 18]}}
{"prediction": {"error_location": 0.46352389454841614, "repair_targets": [], "repair_candidates": [0.7324081063270569, 0.2024984210729599, 0.016528993844985962, 0.002828513039276004, 0.0038387225940823555, 0.02127065323293209, 0.0029415488243103027, 0.0001089533616323024, 0.0003621446085162461, 0.00141843780875206, 2.123753074556589e-05, 0.00020286506332922727, 0.005373895168304443, 0.0005824549589306116, 0.002611724426969886, 0.000859983148984611, 0.006143312435597181], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.825777", "n_pass": [330, 63, 44], "n_token": 21, "loss": [0.7631127834320068, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "#UNINDENT#", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 13, 20, 1, 10, 9, 12, 5, 8, 15, 18, 2, 6, 7, 11, 16, 17]}}
{"prediction": {"error_location": 0.4662128984928131, "repair_targets": [], "repair_candidates": [0.7531312704086304, 0.1997469663619995, 0.010441766120493412, 0.001497732475399971, 0.0024033337831497192, 0.010661856271326542, 0.0024138137232512236, 9.769477765075862e-05, 0.0004364100459497422, 0.0003400346904527396, 2.1313069737516344e-05, 0.0002455486683174968, 0.008074530400335789, 0.0006281075184233487, 0.0029405460227280855, 0.0008541455608792603, 0.006064940243959427], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.888365", "n_pass": [333, 64, 45], "n_token": 20, "loss": [0.8132578730583191, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "port", "r", ".", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 13, 19, 1, 10, 9, 12, 5, 8, 14, 17, 2, 6, 7, 11, 15, 16]}}
{"prediction": {"error_location": 0.4434111714363098, "repair_targets": [], "repair_candidates": [0.7589015364646912, 0.19258715212345123, 0.008939436636865139, 0.0015735808992758393, 0.0028843162581324577, 0.017068706452846527, 0.002500068861991167, 0.00012841360876336694, 0.0005679496098309755, 0.0009463529568165541, 5.6318454880965874e-05, 0.0006167904357425869, 0.0003815832897089422, 0.0005998517735861242, 0.008111122995615005, 0.0007027696701698005, 0.0034340054262429476], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:46:03.948023", "n_pass": [338, 65, 46], "n_token": 19, "loss": [0.9378513097763062, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "redis_env_folder", "port", ")", "started_by_us", "r", "port", "port", "r", "result", "redis_env_folder", "port", "result", "started_by_us", "r", "port", "port", "r", "started_by_us"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [4, 13, 18, 1, 10, 9, 12, 5, 8, 14, 17, 2, 6, 7, 11, 15, 16]}}
{"prediction": {"error_location": 0.3914680778980255, "repair_targets": [], "repair_candidates": [0.7878395318984985, 0.18517588078975677, 0.006475741043686867, 0.0009700256632640958, 0.002191089792177081, 0.009791107848286629, 0.0014533266657963395, 0.00011184285540366545, 0.0006074322736822069, 0.0011609478387981653, 4.678766708821058e-05, 0.000353250332409516, 0.00021472055232152343, 0.000643635168671608, 0.002262050984427333, 0.00041932935710065067, 0.0002834376646205783], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'redis_env_folder', 'port', ')', 'started_by_us', 'r', 'port', 'port', 'r', 'result', 'redis_env_folder', 'port', 'result', 'started_by_us', 'r', 'port', 'port', 'r', 'started_by_us']
