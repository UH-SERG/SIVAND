
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "=", "4", ",", "default_flow_style", "=", "False", ")", "#NEWLINE#", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"], "error_location": [0], "repair_targets": [], "repair_candidates": [2, 45, 61, 11, 24, 35, 48, 64, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "fusic-com/flask-todo/utils/ext/bunch.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2604, "results": {"model": "rnn", "prob": {"loc": [[0.7732922434806824, 2.9729875450357213e-07, 9.798335440791561e-07, 1.5725259316923257e-08, 1.3264715903460456e-07, 9.435983372441115e-08, 4.246530682650018e-09, 3.897943372521695e-07, 5.349648404262553e-07, 5.541414882515028e-09, 4.7034183126015705e-07, 1.4186497310220147e-06, 2.3612892974256283e-08, 8.790544256953581e-07, 1.0594819741527317e-06, 5.370176836549945e-07, 9.90072521744878e-08, 5.7083627325482666e-05, 1.0407508632681584e-08, 2.4705639134481316e-06, 3.243088997351151e-07, 1.3833869161317125e-05, 2.007696139116888e-06, 4.194064331386471e-07, 9.203787953993015e-07, 3.5024289246621265e-08, 3.991227259803054e-08, 1.6616004927527683e-07, 0.010487627238035202, 1.0945489066216396e-06, 7.727292540948838e-06, 6.623689330353955e-08, 1.2793600490113022e-07, 1.105475803342415e-06, 1.0445299267303199e-05, 0.015259956941008568, 1.9007805462933902e-07, 1.3845574642346037e-07, 3.932158847419487e-07, 9.403132850138718e-08, 4.3680714156835165e-07, 1.4498950804409105e-06, 3.0442998877333594e-07, 1.7628687487558636e-07, 7.320213626371697e-06, 0.13118523359298706, 3.8025493267923594e-05, 2.741600383160403e-06, 0.0515938475728035, 4.097881571851758e-07, 1.5471800907107536e-07, 1.5338111552409828e-05, 2.5754400212463224e-07, 4.078705387655646e-06, 7.158558901210199e-07, 2.9065525097848877e-08, 2.7450656148175767e-07, 3.933518200938124e-06, 2.3247510227975e-07, 8.212303015397993e-08, 7.71700797486119e-07, 0.005736003164201975, 9.286238309869077e-06, 5.605305887002032e-06, 0.012247523292899132, 2.5809032422330347e-07]], "pointer": [[0.0, 0.0, 0.013405958190560341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.31656840443611145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004613570868968964, 0.0, 0.0, 0.0, 0.004241620190441608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5280324816703796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000875273603014648, 0.0, 0.0, 0.0012726534623652697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06932516396045685, 0.0, 0.0, 0.061664875596761703, 0.0]], "target": [0.0]}, "loss": [0.25709810853004456, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 14:20:23.274203", "n_pass": [1, 1, 1], "n_token": 66, "loss": [0.25709810853004456, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "=", "4", ",", "default_flow_style", "=", "False", ")", "#NEWLINE#", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 45, 61, 11, 24, 35, 48, 64, 28]}}
{"prediction": {"error_location": 0.7732922434806824, "repair_targets": [], "repair_candidates": [0.013405958190560341, 0.31656840443611145, 0.004613570868968964, 0.004241620190441608, 0.5280324816703796, 0.000875273603014648, 0.0012726534623652697, 0.06932516396045685, 0.061664875596761703], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.353530", "n_pass": [22, 2, 2], "n_token": 58, "loss": [0.25649145245552063, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", ")", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 37, 53, 11, 16, 27, 40, 56, 20]}}
{"prediction": {"error_location": 0.7737614512443542, "repair_targets": [], "repair_candidates": [0.012046192772686481, 0.236443892121315, 0.007878012023866177, 0.001565989456139505, 0.6005144715309143, 0.0007602525292895734, 0.0014152920339256525, 0.07472505420446396, 0.06465083360671997], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.431048", "n_pass": [46, 3, 3], "n_token": 54, "loss": [0.1411888301372528, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "return", "yaml", ".", "safe_dump", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 33, 49, 11, 16, 27, 36, 52, 20]}}
{"prediction": {"error_location": 0.8683251738548279, "repair_targets": [], "repair_candidates": [0.02532937377691269, 0.4319477677345276, 0.024382824078202248, 0.00402990635484457, 0.0759984478354454, 0.0024096649140119553, 0.005046446807682514, 0.2501887083053589, 0.18066687881946564], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.507464", "n_pass": [47, 4, 4], "n_token": 50, "loss": [0.08945345133543015, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 45, 11, 16, 27, 32, 48, 20]}}
{"prediction": {"error_location": 0.9144307971000671, "repair_targets": [], "repair_candidates": [0.04684789478778839, 0.41931694746017456, 0.02447758987545967, 0.004048221278935671, 0.007412009872496128, 0.044354524463415146, 0.02940305694937706, 0.3010115623474121, 0.12312815338373184], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.579886", "n_pass": [50, 5, 5], "n_token": 46, "loss": [0.08631584793329239, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "return", "yaml", ".", "dump", "(", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 41, 11, 16, 27, 32, 44, 20]}}
{"prediction": {"error_location": 0.9173045754432678, "repair_targets": [], "repair_candidates": [0.06144250929355621, 0.4987999498844147, 0.02424558438360691, 0.003807952394708991, 0.010675730183720589, 0.08449818938970566, 0.038867659866809845, 0.20591022074222565, 0.071752168238163], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.649481", "n_pass": [51, 6, 6], "n_token": 41, "loss": [0.15405602753162384, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 29, 36, 11, 16, 27, 32, 39, 20]}}
{"prediction": {"error_location": 0.8572241067886353, "repair_targets": [], "repair_candidates": [0.12006179988384247, 0.5063273906707764, 0.022883258759975433, 0.004011118318885565, 0.006087905261665583, 0.05702637508511543, 0.0070045641623437405, 0.09755171835422516, 0.17904581129550934], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.717489", "n_pass": [54, 7, 7], "n_token": 37, "loss": [0.10582276433706284, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "=", "dict", "(", "indent", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 25, 32, 7, 12, 23, 28, 35, 16]}}
{"prediction": {"error_location": 0.8995839953422546, "repair_targets": [], "repair_candidates": [0.03321462497115135, 0.11956942826509476, 0.01661052741110325, 0.00628046877682209, 0.007785244844853878, 0.17006583511829376, 0.020573288202285767, 0.13912443816661835, 0.4867762327194214], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.783258", "n_pass": [56, 8, 8], "n_token": 33, "loss": [0.10023537278175354, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "update", "(", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 21, 28, 7, 8, 19, 24, 31, 12]}}
{"prediction": {"error_location": 0.9046247601509094, "repair_targets": [], "repair_candidates": [0.018364835530519485, 0.026433927938342094, 0.002774801105260849, 0.0036131427623331547, 0.0049787601456046104, 0.23442693054676056, 0.01783713325858116, 0.09143068641424179, 0.6001397967338562], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.848527", "n_pass": [82, 9, 9], "n_token": 31, "loss": [0.5669203996658325, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "#NEWLINE#", "if", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 19, 26, 7, 8, 17, 22, 29, 10]}}
{"prediction": {"error_location": 0.5672696232795715, "repair_targets": [], "repair_candidates": [0.8636816143989563, 0.0007747123599983752, 8.195831469492987e-05, 0.021005243062973022, 0.00023088882153388113, 0.06968185305595398, 0.0012195541057735682, 0.007870903238654137, 0.035453300923109055], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.915067", "n_pass": [84, 10, 10], "n_token": 29, "loss": [0.0642143115401268, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "(", "'Dumper'", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 17, 24, 7, 8, 15, 20, 27, 10]}}
{"prediction": {"error_location": 0.9378039836883545, "repair_targets": [], "repair_candidates": [0.052066605538129807, 0.003592088120058179, 0.0005532068316824734, 0.21578608453273773, 0.004487460944801569, 0.30761146545410156, 0.005040246993303299, 0.06391748785972595, 0.3469453752040863], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:23.977462", "n_pass": [85, 11, 11], "n_token": 27, "loss": [0.2844700217247009, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", ",", "**", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 22, 7, 8, 13, 18, 25, 10]}}
{"prediction": {"error_location": 0.7524129748344421, "repair_targets": [], "repair_candidates": [0.3142543435096741, 0.0012748516164720058, 0.00017373300215695053, 0.5327596664428711, 0.0010761510347947478, 0.011703204363584518, 0.0008754880400374532, 0.010422509163618088, 0.12746000289916992], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.039437", "n_pass": [88, 12, 12], "n_token": 25, "loss": [0.1199352815747261, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "#NEWLINE#", "#UNINDENT#", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 20, 7, 8, 13, 16, 23, 10]}}
{"prediction": {"error_location": 0.8869778513908386, "repair_targets": [], "repair_candidates": [0.45354679226875305, 0.006361299194395542, 0.0011652731336653233, 0.4258829653263092, 0.00037246677675284445, 0.018498143181204796, 0.0002493115607649088, 0.0193307064473629, 0.07459304481744766], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.099524", "n_pass": [90, 13, 13], "n_token": 23, "loss": [0.19023974239826202, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#INDENT#", "\" Serializes this Bunch to YAML, using `yaml.safe_dump()` if \\n            no `Dumper` is provided. See the PyYAML documentation for more info.\\n            \\n            >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42)\\n            >>> import yaml\\n            >>> yaml.safe_dump(b, default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(default_flow_style=True)\\n            '{foo: [bar, {lol: true}], hello: 42}\\\\n'\\n            >>> yaml.dump(b, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n            >>> b.toYAML(Dumper=yaml.Dumper, default_flow_style=True)\\n            '!bunch.Bunch {foo: [bar, !bunch.Bunch {lol: true}], hello: 42}\\\\n'\\n        \"", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 15, 18, 7, 8, 13, 16, 21, 10]}}
{"prediction": {"error_location": 0.8267608880996704, "repair_targets": [], "repair_candidates": [0.5374162793159485, 0.006174637004733086, 0.0007408740930259228, 0.4236341416835785, 0.0007490091375075281, 0.016234025359153748, 0.006478052120655775, 0.0049863774329423904, 0.0035866000689566135], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.158977", "n_pass": [95, 14, 14], "n_token": 21, "loss": [0.16391611099243164, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "#NEWLINE#", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 13, 16, 5, 6, 11, 14, 19, 8]}}
{"prediction": {"error_location": 0.8488132953643799, "repair_targets": [], "repair_candidates": [0.9754637479782104, 0.002431255066767335, 0.0005112129147164524, 0.008352871052920818, 0.0002490917104296386, 0.006986415944993496, 0.0032183227594941854, 0.002122736070305109, 0.0006643195520155132], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.218376", "n_pass": [126, 15, 15], "n_token": 20, "loss": [0.1309136301279068, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", ".", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 12, 15, 4, 5, 10, 13, 18, 7]}}
{"prediction": {"error_location": 0.8772934675216675, "repair_targets": [], "repair_candidates": [0.7789755463600159, 0.005014735274016857, 0.001745483954437077, 0.13639676570892334, 0.0012176206801086664, 0.04818892106413841, 0.014227617532014847, 0.0116559574380517, 0.0025773930829018354], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.279367", "n_pass": [128, 16, 16], "n_token": 19, "loss": [0.06501466035842896, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", ")", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 11, 14, 4, 5, 9, 12, 17, 6]}}
{"prediction": {"error_location": 0.9370536208152771, "repair_targets": [], "repair_candidates": [0.14060930907726288, 0.00909795518964529, 0.026966096833348274, 0.7951032519340515, 0.00019879976753145456, 0.010055681690573692, 0.009753478690981865, 0.0057427603751420975, 0.0024726102128624916], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.337187", "n_pass": [130, 17, 17], "n_token": 18, "loss": [0.03998870775103569, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "not in", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 10, 13, 4, 5, 8, 11, 16, 6]}}
{"prediction": {"error_location": 0.960800290107727, "repair_targets": [], "repair_candidates": [0.2408982366323471, 0.008705412037670612, 0.016435369849205017, 0.6953734159469604, 0.0005543817533180118, 0.015237613581120968, 0.006314150057733059, 0.012681679800152779, 0.003799720900133252], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.394655", "n_pass": [131, 18, 18], "n_token": 17, "loss": [0.1080055832862854, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "opts", "(", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 9, 12, 4, 5, 7, 10, 15, 6]}}
{"prediction": {"error_location": 0.8976225852966309, "repair_targets": [], "repair_candidates": [0.665127694606781, 0.030041253194212914, 0.03429354727268219, 0.04490533843636513, 0.00422347616404295, 0.12049918621778488, 0.03981952741742134, 0.045550182461738586, 0.015539788641035557], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.451377", "n_pass": [133, 19, 19], "n_token": 16, "loss": [0.17883042991161346, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "opts", "self", "opts", ")", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 11, 4, 5, 7, 9, 14, 6]}}
{"prediction": {"error_location": 0.8362478017807007, "repair_targets": [], "repair_candidates": [0.9643036723136902, 0.0032874394673854113, 0.0041991788893938065, 0.004670918919146061, 0.0018483154708519578, 0.01189225073903799, 0.00317271426320076, 0.0038402171339839697, 0.002785199088975787], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.507470", "n_pass": [136, 20, 20], "n_token": 15, "loss": [0.0862293466925621, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "opts", "self", "opts", "self", ",", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 10, 4, 5, 7, 9, 13, 6]}}
{"prediction": {"error_location": 0.9173837900161743, "repair_targets": [], "repair_candidates": [0.9833446145057678, 0.0038079821970313787, 0.0020361521746963263, 0.0011514589423313737, 0.00037819836870767176, 0.001770233502611518, 0.006230093538761139, 0.00020558632968459278, 0.0010755887487903237], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.563453", "n_pass": [138, 21, 21], "n_token": 14, "loss": [0.0931563749909401, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "opts", "self", "opts", "self", "**", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 10, 4, 5, 7, 9, 12, 6]}}
{"prediction": {"error_location": 0.9110511541366577, "repair_targets": [], "repair_candidates": [0.9803343415260315, 0.005633807275444269, 0.004803494084626436, 0.0026038861833512783, 0.0002964955347124487, 0.0006311592878773808, 0.004893679637461901, 0.0001538433280074969, 0.0006492776446975768], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.621430", "n_pass": [139, 22, 22], "n_token": 13, "loss": [0.007564235478639603, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def toYAML(", "self", ",", "opts", "opts", "options", "opts", "self", "opts", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 8, 10, 4, 5, 7, 9, 11, 6]}}
{"prediction": {"error_location": 0.9924644231796265, "repair_targets": [], "repair_candidates": [0.9364175200462341, 0.020480597391724586, 0.02336561679840088, 0.0073596760630607605, 0.0010612963233143091, 0.0011745138326659799, 0.007731539662927389, 0.002211764920502901, 0.0001973904436454177], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.676515", "n_pass": [142, 23, 23], "n_token": 12, "loss": [0.0250051598995924, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", ",", "opts", "opts", "options", "opts", "self", "opts", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 7, 9, 3, 4, 6, 8, 10, 5]}}
{"prediction": {"error_location": 0.975304901599884, "repair_targets": [], "repair_candidates": [0.7923202514648438, 0.14098533987998962, 0.034917011857032776, 0.004196080379188061, 0.0013936053728684783, 0.003533064853399992, 0.014718013815581799, 0.007380384486168623, 0.0005562279256992042], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.730836", "n_pass": [144, 24, 24], "n_token": 11, "loss": [0.0412256233394146, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", "options", "opts", "self", "opts", "self", "opts", ")"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 8, 2, 3, 5, 7, 9, 4]}}
{"prediction": {"error_location": 0.9596127271652222, "repair_targets": [], "repair_candidates": [0.11515431851148605, 0.7370272278785706, 0.12865909934043884, 0.005373045802116394, 0.0007394839194603264, 0.0016870026011019945, 0.008446787483990192, 0.00262600090354681, 0.00028701589326374233], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 14:20:24.785032", "n_pass": [158, 25, 25], "n_token": 10, "loss": [0.19309933483600616, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "opts", "opts", "options", "opts", "self", "opts", "self", "opts"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [1, 6, 8, 2, 3, 5, 7, 9, 4]}}
{"prediction": {"error_location": 0.824400007724762, "repair_targets": [], "repair_candidates": [0.04936276376247406, 0.8164357542991638, 0.12639516592025757, 0.004559115972369909, 0.0006359107792377472, 0.00043538687168620527, 0.0015055920230224729, 0.0005223969928920269, 0.0001479260972701013], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'opts', 'opts', 'options', 'opts', 'self', 'opts', 'self', 'opts']
