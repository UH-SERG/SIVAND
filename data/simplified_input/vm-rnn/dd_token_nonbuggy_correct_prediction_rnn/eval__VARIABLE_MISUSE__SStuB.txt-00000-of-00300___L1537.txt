
Original sample:

{"has_bug": false, "bug_kind": 0, "bug_kind_name": "NONE", "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", ".", "filter", "(", "'timeout < '", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results", ")", "#NEWLINE#", "return", "True"], "error_location": [0], "repair_targets": [], "repair_candidates": [9, 17, 34, 32, 47, 2, 38], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "CollabQ/CollabQ/common/appengine_utilities/cache.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1537, "results": {"model": "rnn", "prob": {"loc": [[0.9993177652359009, 7.542824278061744e-06, 1.7129299294538214e-06, 3.6391685220849013e-09, 2.5644140144720495e-09, 1.3903481033139542e-07, 1.0982899567579807e-07, 1.9047969601615478e-07, 6.94292907610361e-07, 4.0771024600871897e-07, 8.665515593975215e-08, 4.793026846527937e-07, 3.3459792714296555e-09, 1.9830295627798478e-08, 1.4643104861988832e-07, 5.115861654303444e-07, 2.7090550247521605e-07, 1.4975876183598302e-06, 2.475860867434676e-07, 4.486247817681033e-08, 2.9123847866685537e-07, 6.982224931562087e-07, 2.7614627029493022e-08, 1.9718136456958746e-07, 5.053923857190057e-08, 8.775554505291439e-09, 1.1251310638726864e-07, 2.782504004983366e-09, 1.6181350304123043e-07, 5.846387125529873e-07, 2.2081778183746792e-08, 1.010602161954921e-07, 8.794950758783671e-07, 5.303128247646782e-08, 4.574072590912692e-06, 1.1709155245398506e-07, 4.1330352473778476e-08, 3.038663720644763e-08, 0.0003501806640997529, 1.8400545798158419e-07, 8.466078725177795e-06, 3.9011183616821654e-08, 1.1663038890219468e-07, 6.821132387813122e-07, 1.690324552328093e-06, 1.1170589431230837e-07, 2.501064955140464e-06, 0.00024005601881071925, 1.1541135336301522e-06, 2.8804919338654145e-07, 1.1112479114672169e-05, 4.358531805337407e-05]], "pointer": [[0.0, 0.0, 0.042106855660676956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9193843603134155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005053853150457144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021049821749329567, 0.0, 0.00020091599435545504, 0.0, 0.0, 0.0, 0.011523588560521603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006806383607909083, 0.0, 0.0, 0.0, 0.0]], "target": [0.0]}, "loss": [0.0006822404102422297, 0.0], "acc": [1.0, 0.0, 0.0, 0.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 13:55:01.605960", "n_pass": [1, 1, 1], "n_token": 52, "loss": [0.0006822404102422297, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", ".", "filter", "(", "'timeout < '", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results", ")", "#NEWLINE#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 17, 34, 32, 47, 2, 38]}}
{"prediction": {"error_location": 0.9993177652359009, "repair_targets": [], "repair_candidates": [0.042106855660676956, 0.9193843603134155, 0.005053853150457144, 0.021049821749329567, 0.00020091599435545504, 0.011523588560521603, 0.0006806383607909083], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:01.680107", "n_pass": [23, 2, 2], "n_token": 46, "loss": [0.000639710808172822, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", ".", "datetime", ".", "now", "(", ")", ")", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results", ")", "#NEWLINE#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 17, 28, 26, 41, 2, 32]}}
{"prediction": {"error_location": 0.9993602633476257, "repair_targets": [], "repair_candidates": [0.03755101189017296, 0.8519394993782043, 0.07191033661365509, 0.029328323900699615, 0.00016908778343349695, 0.008516978472471237, 0.0005846374551765621], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:01.747745", "n_pass": [24, 3, 3], "n_token": 39, "loss": [0.0033806574065238237, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results", ")", "#NEWLINE#", "return", "True"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 17, 21, 19, 34, 2, 25]}}
{"prediction": {"error_location": 0.9966251850128174, "repair_targets": [], "repair_candidates": [0.00433571171015501, 0.5257275700569153, 0.40857917070388794, 0.059353187680244446, 4.375742355477996e-05, 0.0017868973081931472, 0.00017375276365783066], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:01.880174", "n_pass": [48, 5, 4], "n_token": 35, "loss": [0.0026264239568263292, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [9, 17, 21, 19, 34, 2, 25]}}
{"prediction": {"error_location": 0.9973769187927246, "repair_targets": [], "repair_candidates": [0.009199662134051323, 0.5020885467529297, 0.3820931017398834, 0.10294236242771149, 6.884485628688708e-05, 0.0034835783299058676, 0.00012400514970067888], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:01.944549", "n_pass": [50, 6, 5], "n_token": 32, "loss": [0.018629111349582672, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", "#INDENT#", "'\\n        _clean_cache is a routine that is run to find and delete cache\\n        items that are old. This helps keep the size of your over all\\n        datastore down.\\n\\n        It only deletes the max_hits_to_clean per attempt, in order\\n        to maximize performance. Default settings are 20 hits, 50%\\n        of requests. Generally less hits cleaned on more requests will\\n        give you better performance.\\n\\n        Returns True on completion\\n        '", "#NEWLINE#", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [6, 14, 18, 16, 31, 2, 22]}}
{"prediction": {"error_location": 0.981543242931366, "repair_targets": [], "repair_candidates": [0.0009516759309917688, 0.43477243185043335, 0.39626839756965637, 0.16441652178764343, 0.00018168338283430785, 0.003090035868808627, 0.00031920228502713144], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.010434", "n_pass": [51, 7, 6], "n_token": 29, "loss": [0.006992748472839594, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", "query", "=", "_AppEngineUtilities_Cache", ".", "all", "(", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 11, 15, 13, 28, 2, 19]}}
{"prediction": {"error_location": 0.9930316209793091, "repair_targets": [], "repair_candidates": [0.01602863520383835, 0.4594673812389374, 0.4084485173225403, 0.11142224073410034, 4.8629302909830585e-05, 0.004494731780141592, 8.987555338535458e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.071977", "n_pass": [53, 8, 7], "n_token": 26, "loss": [0.009618368931114674, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", "query", "=", "_AppEngineUtilities_Cache", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "max_hits_to_clean", ")", "#NEWLINE#", "db", ".", "delete", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 8, 12, 10, 25, 2, 16]}}
{"prediction": {"error_location": 0.9904274940490723, "repair_targets": [], "repair_candidates": [0.008627514354884624, 0.5758018493652344, 0.10773542523384094, 0.30393245816230774, 0.000141348791657947, 0.0036247821990400553, 0.00013658626994583756], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.131489", "n_pass": [58, 9, 8], "n_token": 22, "loss": [0.4327365458011627, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", "query", "=", "_AppEngineUtilities_Cache", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", ".", "delete", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 8, 12, 10, 21, 2, 16]}}
{"prediction": {"error_location": 0.6487312912940979, "repair_targets": [], "repair_candidates": [0.012644456699490547, 0.7514429688453674, 0.062448833137750626, 0.17294643819332123, 0.0001233327348018065, 0.0002898396924138069, 0.00010409565584268421], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.189841", "n_pass": [80, 10, 9], "n_token": 20, "loss": [0.1160653680562973, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "def _clean_cache(", "self", "query", "=", "_AppEngineUtilities_Cache", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [3, 8, 12, 10, 19, 2, 16]}}
{"prediction": {"error_location": 0.8904169201850891, "repair_targets": [], "repair_candidates": [0.00013940429198555648, 0.019379520788788795, 0.0019958196207880974, 0.9784130454063416, 6.619556188525166e-06, 1.0198047675658017e-05, 5.533914372790605e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.247795", "n_pass": [82, 11, 10], "n_token": 19, "loss": [0.43197759985923767, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "=", "_AppEngineUtilities_Cache", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 7, 11, 9, 18, 1, 15]}}
{"prediction": {"error_location": 0.6492239236831665, "repair_targets": [], "repair_candidates": [0.006822747178375721, 0.39651450514793396, 0.008533645421266556, 0.5877970457077026, 5.406004129326902e-05, 0.00013190615572966635, 0.0001460740895709023], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.304788", "n_pass": [85, 12, 11], "n_token": 18, "loss": [0.6658633947372437, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "_AppEngineUtilities_Cache", ")", "#NEWLINE#", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 6, 10, 8, 17, 1, 14]}}
{"prediction": {"error_location": 0.5138297080993652, "repair_targets": [], "repair_candidates": [0.002470404375344515, 0.04714453965425491, 0.0065504699014127254, 0.9434476494789124, 5.353949381969869e-05, 0.00011542307765921578, 0.0002181136078434065], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.420085", "n_pass": [87, 14, 12], "n_token": 16, "loss": [0.2853759527206421, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "_AppEngineUtilities_Cache", "query", "#NEWLINE#", "results", "=", "query", ".", "fetch", "(", "self", ".", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 4, 8, 6, 15, 1, 12]}}
{"prediction": {"error_location": 0.7517314553260803, "repair_targets": [], "repair_candidates": [0.012144283391535282, 0.14647641777992249, 0.1691182404756546, 0.6703263521194458, 0.0006562563357874751, 0.0005530996713787317, 0.0007252898649312556], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.475750", "n_pass": [91, 15, 13], "n_token": 14, "loss": [0.15160958468914032, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "_AppEngineUtilities_Cache", "query", "#NEWLINE#", "results", "=", "query", ".", "self", ".", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 4, 8, 6, 13, 1, 10]}}
{"prediction": {"error_location": 0.8593238592147827, "repair_targets": [], "repair_candidates": [0.001316651003435254, 0.012800546362996101, 0.009983541443943977, 0.9751186370849609, 0.00019582237291615456, 0.0005145474569872022, 7.028560503385961e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.586353", "n_pass": [112, 17, 14], "n_token": 13, "loss": [0.11540375649929047, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "_AppEngineUtilities_Cache", "query", "#NEWLINE#", "results", "=", "query", ".", "self", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 4, 8, 6, 12, 1, 10]}}
{"prediction": {"error_location": 0.891006350517273, "repair_targets": [], "repair_candidates": [0.01383007038384676, 0.13415949046611786, 0.08976541459560394, 0.7111542224884033, 0.0013461271300911903, 0.04918663576245308, 0.0005580129800364375], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.699822", "n_pass": [118, 19, 15], "n_token": 12, "loss": [0.35008588433265686, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "query", "#NEWLINE#", "results", "=", "query", ".", "self", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 3, 7, 5, 11, 1, 9]}}
{"prediction": {"error_location": 0.7046276926994324, "repair_targets": [], "repair_candidates": [0.007439294829964638, 0.13896191120147705, 0.009374439716339111, 0.8370101451873779, 7.476153405150399e-05, 0.007000337820500135, 0.00013904365187045187], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.753875", "n_pass": [120, 20, 16], "n_token": 11, "loss": [0.4363158345222473, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "query", "results", "=", "query", ".", "self", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 3, 6, 4, 10, 1, 8]}}
{"prediction": {"error_location": 0.6464134454727173, "repair_targets": [], "repair_candidates": [0.009701755829155445, 0.04165560007095337, 0.016716834157705307, 0.9291754364967346, 1.931201586558018e-05, 0.002637738361954689, 9.331741603091359e-05], "target_probs": 0.0}}


{"result": {"time": "2021-02-11 13:55:02.860797", "n_pass": [124, 22, 17], "n_token": 10, "loss": [0.2026018649339676, 0.0], "accuracy": [1.0, 0.0, 0.0, 0.0]}}
{"sample": {"has_bug": false, "source_tokens": ["#NEWLINE#", "self", "query", "query", "results", "=", "query", "self", "(", "results"]}}
{"position": {"error_location": 0, "repair_targets": [], "repair_candidates": [2, 3, 6, 4, 9, 1, 7]}}
{"prediction": {"error_location": 0.8166033029556274, "repair_targets": [], "repair_candidates": [0.030410483479499817, 0.21737617254257202, 0.026525873690843582, 0.7251816391944885, 0.0001843117643147707, 0.0002799350768327713, 4.17038427258376e-05], "target_probs": 0.0}}




Minimal simplified tokens:

['#NEWLINE#', 'self', 'query', 'query', 'results', '=', 'query', 'self', '(', 'results']
