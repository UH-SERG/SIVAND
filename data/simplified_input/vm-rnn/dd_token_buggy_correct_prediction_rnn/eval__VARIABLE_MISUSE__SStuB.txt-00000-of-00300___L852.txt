
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"], "error_location": [36], "repair_targets": [12, 34], "repair_candidates": [12, 34, 2, 22, 36, 8, 32, 4, 30], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "simon-weber/gmusicapi/gmusicapi/clients/mobileclient.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 852, "results": {"model": "rnn", "prob": {"loc": [[2.013757148233708e-05, 2.678743858675059e-11, 1.7103199065338082e-11, 4.667302650048985e-14, 1.1394615719723111e-12, 8.594432674216557e-13, 4.880542150975664e-12, 2.5507910020317048e-11, 4.743414341867869e-11, 2.540982008136794e-11, 2.1147375517394096e-10, 2.7987934886342103e-11, 4.283979559982498e-10, 5.122381685485067e-11, 5.2218677298876415e-11, 6.026940665287972e-12, 8.543834910390569e-12, 2.977959198680047e-11, 6.110279383159112e-12, 7.560504999837292e-11, 1.5932534154841638e-12, 1.0595820011324864e-12, 2.5548724247315135e-10, 1.5181893285934334e-12, 5.865585794850858e-11, 3.6317773875055304e-12, 1.2960251538629564e-08, 9.357846962598781e-12, 2.2174340488789746e-11, 9.822210319393454e-13, 9.191413710141205e-07, 4.4944258092982636e-08, 2.2899450414115563e-05, 4.831292588214353e-10, 4.854250690300432e-08, 5.5863851322612845e-09, 0.999954342842102, 1.6984408830467146e-06]], "pointer": [[0.0, 0.0, 1.6353844500827108e-07, 0.0, 8.662507752887905e-06, 0.0, 0.0, 0.0, 0.00072193966479972, 0.0, 0.0, 0.0, 0.7573685646057129, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.3233646945518558e-09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5202480102848313e-08, 0.0, 2.0211392381952464e-07, 0.0, 0.24190036952495575, 0.0, 1.0628596669448598e-07, 0.0]], "target": [0.9992689490318298]}, "loss": [4.577531944960356e-05, 0.0007313183159567416], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:37:48.974926", "n_pass": [1, 1, 1], "n_token": 38, "loss": [4.577531944960356e-05, 0.0007313183159567416], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 36, "repair_targets": [12, 34], "repair_candidates": [12, 34, 2, 22, 36, 8, 32, 4, 30]}}
{"prediction": {"error_location": 0.999954342842102, "repair_targets": [0.7573685646057129, 0.24190036952495575], "repair_candidates": [1.6353844500827108e-07, 8.662507752887905e-06, 0.00072193966479972, 0.7573685646057129, 3.3233646945518558e-09, 2.5202480102848313e-08, 2.0211392381952464e-07, 0.24190036952495575, 1.0628596669448598e-07], "target_probs": 0.9992689490318298}}


{"result": {"time": "2021-02-11 10:37:49.042184", "n_pass": [23, 2, 2], "n_token": 33, "loss": [0.0009747759322635829, 0.00017233187099918723], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", ".", "_get_all_items", "(", "mobileclient", ".", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 31, "repair_targets": [12, 29], "repair_candidates": [12, 29, 2, 17, 31, 8, 27, 4, 25]}}
{"prediction": {"error_location": 0.9990257024765015, "repair_targets": [0.0002722639183048159, 0.9995554089546204], "repair_candidates": [3.3720050396368606e-07, 1.159084786195308e-05, 0.00015758945664856583, 0.0002722639183048159, 3.6239553580230677e-09, 1.8587239480893913e-07, 1.6638240367683466e-06, 0.9995554089546204, 8.513142120136763e-07], "target_probs": 0.9998276829719543}}


{"result": {"time": "2021-02-11 10:37:49.105700", "n_pass": [25, 3, 3], "n_token": 28, "loss": [0.0014267513761296868, 0.000234094841289334], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "False", ",", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 26, "repair_targets": [12, 24], "repair_candidates": [12, 24, 2, 17, 26, 8, 22, 4, 20]}}
{"prediction": {"error_location": 0.9985742568969727, "repair_targets": [0.0003789334441535175, 0.9993870258331299], "repair_candidates": [3.327540696318465e-07, 5.834644616697915e-05, 0.0001705719332676381, 0.0003789334441535175, 2.4931401298999845e-07, 1.2633559265395888e-07, 3.3493165574327577e-06, 0.9993870258331299, 1.1117059557363973e-06], "target_probs": 0.999765932559967}}


{"result": {"time": "2021-02-11 10:37:49.234495", "n_pass": [51, 5, 4], "n_token": 26, "loss": [0.0017701209289953113, 0.00011337445903336629], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "include_deleted", "=", "False", ",", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 24, "repair_targets": [10, 22], "repair_candidates": [10, 22, 2, 15, 24, 6, 20, 4, 18]}}
{"prediction": {"error_location": 0.9982314705848694, "repair_targets": [0.0007813858683221042, 0.9991052746772766], "repair_candidates": [5.028599616707652e-07, 4.5037751988274977e-05, 6.267936259973794e-05, 0.0007813858683221042, 2.478570877428865e-07, 1.1902410790298745e-07, 3.260676066929591e-06, 0.9991052746772766, 1.503691350990266e-06], "target_probs": 0.9998866319656372}}


{"result": {"time": "2021-02-11 10:37:49.296366", "n_pass": [53, 6, 5], "n_token": 24, "loss": [0.006529425736516714, 0.00011873950279550627], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_all_stations(", "self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 22, "repair_targets": [8, 20], "repair_candidates": [8, 20, 2, 13, 22, 6, 18, 4, 16]}}
{"prediction": {"error_location": 0.9934918284416199, "repair_targets": [0.0016029978869482875, 0.9982782602310181], "repair_candidates": [9.015740829454444e-07, 6.19961429038085e-05, 4.827311204280704e-05, 0.0016029978869482875, 5.175537580726086e-07, 2.101962763845222e-07, 4.054524652019609e-06, 0.9982782602310181, 2.7574724299483933e-06], "target_probs": 0.9998812675476074}}


{"result": {"time": "2021-02-11 10:37:49.417021", "n_pass": [60, 8, 6], "n_token": 22, "loss": [0.6856922507286072, 0.003080996684730053], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "=", "include_deleted", "=", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 20, "repair_targets": [6, 18], "repair_candidates": [6, 18, 0, 11, 20, 4, 16, 2, 14]}}
{"prediction": {"error_location": 0.5037413835525513, "repair_targets": [0.0017244576010853052, 0.9951992630958557], "repair_candidates": [0.0008433963521383703, 0.0018884246237576008, 0.00019724515732377768, 0.0017244576010853052, 2.746211066551041e-06, 7.398145953629864e-07, 8.091216841421556e-06, 0.9951992630958557, 0.00013576398487202823], "target_probs": 0.9969237446784973}}


{"result": {"time": "2021-02-11 10:37:49.599099", "n_pass": [91, 11, 7], "n_token": 21, "loss": [0.07526477426290512, 0.0005571009241975844], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "include_deleted", "=", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 19, "repair_targets": [5, 17], "repair_candidates": [5, 17, 0, 10, 19, 3, 15, 2, 13]}}
{"prediction": {"error_location": 0.9274978637695312, "repair_targets": [0.0003010249347425997, 0.999142050743103], "repair_candidates": [0.00015339757374022156, 0.00017485539137851447, 0.0002131994697265327, 0.0003010249347425997, 8.144164667100995e-07, 3.997949136191892e-07, 4.659227215597639e-06, 0.999142050743103, 9.477406820224132e-06], "target_probs": 0.9994430541992188}}


{"result": {"time": "2021-02-11 10:37:49.658298", "n_pass": [93, 12, 8], "n_token": 20, "loss": [0.6001118421554565, 0.0017661541933193803], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "include_deleted", "updated_after", "#INDENT#", "\"Returns a list of dictionaries that each represent a radio station.\\n\\n        :param incremental: if True, return a generator that yields lists\\n          of at most 1000 stations\\n          as they are retrieved from the server. This can be useful for\\n          presenting a loading bar to a user.\\n        :param include_deleted: if True, include stations that have been deleted\\n          in the past.\\n        :param updated_after: a datetime.datetime; defaults to unix epoch\\n\\n        Here is an example station dictionary::\\n\\n            {\\n                'imageUrl': 'http://lh6.ggpht.com/...',\\n                'kind': 'sj#radioStation',\\n                'name': 'station',\\n                'deleted': False,\\n                'lastModifiedTimestamp': '1370796487455005',\\n                'recentTimestamp': '1370796487454000',\\n                'clientId': 'c2639bf4-af24-4e4f-ab37-855fc89d15a1',\\n                'seed':\\n                {\\n                    'kind': 'sj#radioSeed',\\n                    'trackLockerId': '7df3aadd-9a18-3dc1-b92e-a7cf7619da7e'\\n                    # possible keys:\\n                    #  albumId, artistId, genreId, trackId, trackLockerId\\n                },\\n                'id': '69f1bfce-308a-313e-9ed2-e50abe33a25d'\\n            },\\n        \"", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4, 16], "repair_candidates": [4, 16, 0, 9, 18, 3, 14, 2, 12]}}
{"prediction": {"error_location": 0.5487502217292786, "repair_targets": [0.0015234092716127634, 0.9967119693756104], "repair_candidates": [0.0012036619009450078, 0.00010956283949781209, 0.00022495847952086478, 0.0015234092716127634, 4.005315076938132e-06, 3.4649197004910093e-06, 1.4696453035867307e-05, 0.9967119693756104, 0.00020426171249710023], "target_probs": 0.9982354044914246}}


{"result": {"time": "2021-02-11 10:37:49.775224", "n_pass": [96, 14, 9], "n_token": 19, "loss": [0.4208986461162567, 0.0032054842449724674], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "include_deleted", "updated_after", "#INDENT#", "#NEWLINE#", "return", "self", "ListStations", ",", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 17, "repair_targets": [4, 15], "repair_candidates": [4, 15, 0, 8, 17, 3, 13, 2, 11]}}
{"prediction": {"error_location": 0.6564565896987915, "repair_targets": [0.003933224827051163, 0.9928663969039917], "repair_candidates": [0.0023074280470609665, 0.00029801088385283947, 0.000411754212109372, 0.003933224827051163, 4.774082299263682e-06, 2.2509322661790065e-05, 3.631090294220485e-05, 0.9928663969039917, 0.00011948440078413114], "target_probs": 0.996799647808075}}


{"result": {"time": "2021-02-11 10:37:50.008471", "n_pass": [101, 18, 10], "n_token": 18, "loss": [0.2541657090187073, 0.004052374977618456], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "incremental", "include_deleted", "updated_after", "#INDENT#", "#NEWLINE#", "return", "self", "ListStations", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 16, "repair_targets": [4, 14], "repair_candidates": [4, 14, 0, 8, 16, 3, 12, 2, 10]}}
{"prediction": {"error_location": 0.7755632996559143, "repair_targets": [0.003802842926234007, 0.992152988910675], "repair_candidates": [0.002689317800104618, 0.0006553094717673957, 0.0005989259225316346, 0.003802842926234007, 5.830460395372938e-06, 4.334995992394397e-06, 1.6519819837412797e-05, 0.992152988910675, 7.390991959255189e-05], "target_probs": 0.9959558248519897}}


{"result": {"time": "2021-02-11 10:37:50.065993", "n_pass": [107, 19, 11], "n_token": 17, "loss": [0.17561718821525574, 0.0024985268246382475], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#INDENT#", "#NEWLINE#", "return", "self", "ListStations", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 15, "repair_targets": [3, 13], "repair_candidates": [3, 13, 0, 7, 15, 2, 11, 1, 9]}}
{"prediction": {"error_location": 0.8389390110969543, "repair_targets": [0.0024112453684210777, 0.9950933456420898], "repair_candidates": [0.0012619872577488422, 0.0004352523246780038, 0.0007452506106346846, 0.0024112453684210777, 3.4891484119725646e-06, 3.5423577173787635e-06, 1.1917187293875031e-05, 0.9950933456420898, 3.4013788535958156e-05], "target_probs": 0.9975045919418335}}


{"result": {"time": "2021-02-11 10:37:50.123493", "n_pass": [111, 20, 12], "n_token": 16, "loss": [0.5527690052986145, 0.002701590768992901], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#NEWLINE#", "return", "self", "ListStations", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 14, "repair_targets": [3, 12], "repair_candidates": [3, 12, 0, 6, 14, 2, 10, 1, 8]}}
{"prediction": {"error_location": 0.5753544569015503, "repair_targets": [0.0009432655060663819, 0.9963588118553162], "repair_candidates": [0.0016683043213561177, 0.00038483834941871464, 0.0004609164025168866, 0.0009432655060663819, 1.6429166862508282e-06, 4.2102226871065795e-05, 6.840765126980841e-05, 0.9963588118553162, 7.17680377420038e-05], "target_probs": 0.9973020553588867}}


{"result": {"time": "2021-02-11 10:37:50.296508", "n_pass": [115, 23, 13], "n_token": 15, "loss": [0.1964409351348877, 0.0019903306383639574], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#NEWLINE#", "return", "self", "incremental", ",", "include_deleted", ",", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 13, "repair_targets": [3, 11], "repair_candidates": [3, 11, 0, 6, 13, 2, 9, 1, 7]}}
{"prediction": {"error_location": 0.8216498494148254, "repair_targets": [0.000843314453959465, 0.9971683621406555], "repair_candidates": [0.001111793564632535, 0.0003971561382059008, 0.0004067627596668899, 0.000843314453959465, 1.8635470269146026e-06, 2.304801682839752e-06, 4.362699473858811e-05, 0.9971683621406555, 2.4804250642773695e-05], "target_probs": 0.9980116486549377}}


{"result": {"time": "2021-02-11 10:37:50.464986", "n_pass": [136, 26, 14], "n_token": 14, "loss": [0.0417029932141304, 0.2512056827545166], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#NEWLINE#", "return", "self", "incremental", ",", "include_deleted", "updated_after", "=", "self", ")"]}}
{"position": {"error_location": 12, "repair_targets": [3, 10], "repair_candidates": [3, 10, 0, 6, 12, 2, 9, 1, 7]}}
{"prediction": {"error_location": 0.9591546058654785, "repair_targets": [0.0024389298632740974, 0.7754234671592712], "repair_candidates": [0.004123962949961424, 0.002509708981961012, 0.00391915300861001, 0.0024389298632740974, 5.443308964458993e-06, 4.862636615143856e-06, 0.2115345299243927, 0.7754234671592712, 3.983521310146898e-05], "target_probs": 0.7778623700141907}}


{"result": {"time": "2021-02-11 10:37:50.575934", "n_pass": [140, 28, 15], "n_token": 13, "loss": [0.033107683062553406, 0.3998250365257263], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "#NEWLINE#", "return", "self", "incremental", ",", "include_deleted", "updated_after", "=", "self"]}}
{"position": {"error_location": 12, "repair_targets": [3, 10], "repair_candidates": [3, 10, 0, 6, 12, 2, 9, 1, 7]}}
{"prediction": {"error_location": 0.9674344062805176, "repair_targets": [0.0021203448995947838, 0.6683170199394226], "repair_candidates": [0.004154429771006107, 0.0024572093971073627, 0.004125033505260944, 0.0021203448995947838, 6.027346444170689e-06, 3.3552198601682903e-06, 0.3187524974346161, 0.6683170199394226, 6.411798676708713e-05], "target_probs": 0.6704373359680176}}


{"result": {"time": "2021-02-11 10:37:50.630645", "n_pass": [145, 29, 16], "n_token": 12, "loss": [0.03931088000535965, 0.35835808515548706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "return", "self", "incremental", ",", "include_deleted", "updated_after", "=", "self"]}}
{"position": {"error_location": 11, "repair_targets": [3, 9], "repair_candidates": [3, 9, 0, 5, 11, 2, 8, 1, 6]}}
{"prediction": {"error_location": 0.9614517688751221, "repair_targets": [7.07265135133639e-05, 0.6987520456314087], "repair_candidates": [0.0004260317364241928, 5.2081675676163286e-05, 9.386617603013292e-05, 7.07265135133639e-05, 2.1246444248390617e-07, 1.2957960393578105e-07, 0.3006000220775604, 0.6987520456314087, 4.812618499272503e-06], "target_probs": 0.6988227963447571}}


{"result": {"time": "2021-02-11 10:37:50.684458", "n_pass": [146, 30, 17], "n_token": 11, "loss": [0.007917094975709915, 0.05389029532670975], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "self", "incremental", ",", "include_deleted", "updated_after", "=", "self"]}}
{"position": {"error_location": 10, "repair_targets": [3, 8], "repair_candidates": [3, 8, 0, 4, 10, 2, 7, 1, 5]}}
{"prediction": {"error_location": 0.9921141862869263, "repair_targets": [5.544589384953724e-06, 0.9475305080413818], "repair_candidates": [0.0003689877048600465, 2.63349647866562e-05, 1.9311679352540523e-05, 5.544589384953724e-06, 5.400270310929045e-07, 3.034907365417894e-07, 0.052045028656721115, 0.9475305080413818, 3.3653534501354443e-06], "target_probs": 0.947536051273346}}


{"result": {"time": "2021-02-11 10:37:50.742251", "n_pass": [149, 31, 18], "n_token": 10, "loss": [0.0021615491714328527, 0.011185204610228539], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "incremental", "include_deleted", "updated_after", "self", "incremental", "include_deleted", "updated_after", "=", "self"]}}
{"position": {"error_location": 9, "repair_targets": [3, 7], "repair_candidates": [3, 7, 0, 4, 9, 2, 6, 1, 5]}}
{"prediction": {"error_location": 0.9978407621383667, "repair_targets": [1.5883930245763622e-05, 0.9888612627983093], "repair_candidates": [0.0012855405220761895, 6.96506176609546e-05, 5.3680752898799255e-05, 1.5883930245763622e-05, 1.4452341474679997e-06, 3.191081304976251e-06, 0.009694750420749187, 0.9888612627983093, 1.4617478882428259e-05], "target_probs": 0.9888771176338196}}




Minimal simplified tokens:

['self', 'incremental', 'include_deleted', 'updated_after', 'self', 'incremental', 'include_deleted', 'updated_after', '=', 'self']
