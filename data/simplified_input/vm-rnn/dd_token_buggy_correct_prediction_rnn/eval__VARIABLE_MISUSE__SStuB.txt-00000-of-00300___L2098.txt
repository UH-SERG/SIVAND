
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"], "error_location": [46], "repair_targets": [89], "repair_candidates": [2, 46, 50, 93, 57, 101, 89], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "numba/numba/numba/cuda/tests/cudapy/test_gufunc.py", "license": "bsd-2-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2098, "results": {"model": "rnn", "prob": {"loc": [[2.718750693020411e-05, 2.6362503846577567e-10, 2.0230254971220774e-11, 2.6565024052044306e-13, 1.6394417561797076e-13, 9.270640678737951e-12, 3.8289714281158904e-12, 9.351703845984424e-14, 2.7977696548386888e-11, 1.9241445730570211e-13, 1.3900484929774137e-11, 7.909671181915989e-13, 2.1407241214063677e-13, 8.553062771921027e-13, 8.411764340632288e-12, 5.977170841608981e-11, 4.003171492211743e-12, 7.169007054663723e-11, 7.682127503572111e-12, 3.5418881369486677e-12, 3.209542007165389e-12, 1.168528381695344e-11, 1.0445930578861784e-11, 5.0013461816433846e-08, 1.4246990739930077e-11, 1.1813277023264845e-09, 2.6196791957922017e-10, 1.2057157355860326e-11, 1.2963438100754843e-09, 3.083673507514595e-12, 1.022571888276147e-10, 7.95409710319106e-11, 2.7990758582480124e-12, 3.778426356515485e-12, 1.16160189106429e-11, 4.762630719488958e-13, 8.889402343566222e-13, 1.0502868540152033e-11, 3.471161346638857e-13, 1.652906977955837e-11, 1.5860052854366202e-11, 2.8660730039264948e-11, 1.4362093328848524e-12, 4.443330425818459e-11, 6.811647058034553e-13, 1.0461647520498829e-10, 0.9999241828918457, 3.2574516239947116e-07, 7.212704739023579e-11, 3.5783045363585453e-12, 4.220684565736654e-11, 7.904512547979303e-13, 1.5111271609025145e-11, 3.259262434593402e-13, 5.119140875087247e-11, 2.7935785629207288e-11, 1.8059254092150923e-10, 1.4905060519154745e-10, 1.5031892831168792e-12, 4.612601620102019e-11, 1.2022045685344818e-11, 9.248370298753361e-12, 3.958125927711054e-12, 2.6953747393754224e-12, 8.042119054030294e-11, 2.5229311695351697e-11, 2.5242538725933628e-08, 9.650371647629274e-12, 5.275863079745591e-10, 1.1880699202215794e-10, 1.801465920880929e-11, 1.2109070413046652e-09, 2.666651838581502e-12, 1.0620134632821632e-10, 9.437405024126377e-11, 6.223705144997593e-12, 1.2798132345559488e-11, 3.0806770329183664e-11, 1.3077708404043986e-12, 4.042687625632757e-12, 3.902899184393682e-11, 6.233122199807151e-13, 3.5178342877584257e-11, 5.069992342621177e-11, 7.02076521919004e-11, 1.263694118965042e-12, 5.411264492050094e-11, 1.034620631355787e-12, 1.1958194851002801e-11, 9.528365580990794e-07, 2.4177409206627143e-12, 1.1423959001000128e-11, 1.1143882691633245e-11, 1.2334894390619855e-11, 2.710933691071893e-13, 7.735266420449971e-12, 4.261483960849022e-12, 2.503723617319764e-10, 6.299695465804278e-13, 2.237210416922153e-11, 9.66313183983769e-13, 4.734102913062088e-05, 4.380516945273055e-13, 2.8240078678298808e-11, 4.002822379112203e-11, 4.748265582804612e-12]], "pointer": [[0.0, 0.0, 0.05899190157651901, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021910617128014565, 0.0, 0.0, 0.0, 0.004751209635287523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07107144594192505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7496386766433716, 0.0, 0.0, 0.0, 0.03744954243302345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.056186579167842865, 0.0, 0.0, 0.0, 0.0]], "target": [0.7496386766433716]}, "loss": [7.581423415103927e-05, 0.288163959980011], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:12:43.873587", "n_pass": [1, 1, 1], "n_token": 106, "loss": [7.581423415103927e-05, 0.288163959980011], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 46, "repair_targets": [89], "repair_candidates": [2, 46, 50, 93, 57, 101, 89]}}
{"prediction": {"error_location": 0.9999241828918457, "repair_targets": [0.7496386766433716], "repair_candidates": [0.05899190157651901, 0.021910617128014565, 0.004751209635287523, 0.07107144594192505, 0.7496386766433716, 0.03744954243302345, 0.056186579167842865], "target_probs": 0.7496386766433716}}


{"result": {"time": "2021-02-11 10:12:43.974419", "n_pass": [21, 2, 2], "n_token": 93, "loss": [7.343022298300639e-05, 0.2664734721183777], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 33, "repair_targets": [76], "repair_candidates": [2, 33, 37, 80, 44, 88, 76]}}
{"prediction": {"error_location": 0.9999264478683472, "repair_targets": [0.7660763263702393], "repair_candidates": [0.05163906514644623, 0.030376385897397995, 0.0023914966732263565, 0.07826880365610123, 0.7660763263702393, 0.017506703734397888, 0.05374116450548172], "target_probs": 0.7660763263702393}}


{"result": {"time": "2021-02-11 10:12:44.064079", "n_pass": [22, 3, 3], "n_token": 80, "loss": [0.00038223114097490907, 0.3347126245498657], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "(", "float32", "[", ":", "]", ",", "float32", "[", ":", "]", ")", "]", ",", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [63], "repair_candidates": [2, 20, 24, 67, 31, 75, 63]}}
{"prediction": {"error_location": 0.9996176958084106, "repair_targets": [0.7155436873435974], "repair_candidates": [0.04640812799334526, 0.023800944909453392, 0.0019051770213991404, 0.11379501223564148, 0.7155436873435974, 0.0435929074883461, 0.05495408922433853], "target_probs": 0.7155436873435974}}


{"result": {"time": "2021-02-11 10:12:44.147267", "n_pass": [25, 4, 4], "n_token": 67, "loss": [0.0001517419150331989, 0.19468218088150024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "'(x)->(x)'", ",", "target", "=", "'cuda'", ",", "nopython", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [50], "repair_candidates": [2, 20, 24, 54, 31, 62, 50]}}
{"prediction": {"error_location": 0.9998482465744019, "repair_targets": [0.8230962157249451], "repair_candidates": [0.020795080810785294, 0.010643578134477139, 0.000784529373049736, 0.08689790219068527, 0.8230962157249451, 0.01896272413432598, 0.03881995379924774], "target_probs": 0.8230962157249451}}


{"result": {"time": "2021-02-11 10:12:44.227599", "n_pass": [41, 5, 5], "n_token": 60, "loss": [0.0002015625941567123, 0.3357090651988983], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ":", "'cuda'", ",", "nopython", "=", "True", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [43], "repair_candidates": [2, 20, 24, 47, 31, 55, 43]}}
{"prediction": {"error_location": 0.9997983574867249, "repair_targets": [0.7148310542106628], "repair_candidates": [0.048194482922554016, 0.024536089971661568, 0.0020608394406735897, 0.08502321690320969, 0.7148310542106628, 0.06473097205162048, 0.06062331050634384], "target_probs": 0.7148310542106628}}


{"result": {"time": "2021-02-11 10:12:44.382591", "n_pass": [46, 7, 6], "n_token": 54, "loss": [0.07017752528190613, 0.556643545627594], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", ":", "#NEWLINE#", "#INDENT#", "guvectorize", "(", "[", "void", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 14, "repair_targets": [37], "repair_candidates": [2, 14, 18, 41, 25, 49, 37]}}
{"prediction": {"error_location": 0.9322280883789062, "repair_targets": [0.5731295347213745], "repair_candidates": [0.042094457894563675, 0.07378900796175003, 0.0046220943331718445, 0.102973073720932, 0.5731295347213745, 0.14358797669410706, 0.05980387702584267], "target_probs": 0.5731295347213745}}


{"result": {"time": "2021-02-11 10:12:44.455100", "n_pass": [49, 8, 7], "n_token": 47, "loss": [0.032183486968278885, 0.5859198570251465], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises", ".", "exception", ")", ")"]}}
{"position": {"error_location": 14, "repair_targets": [30], "repair_candidates": [2, 14, 18, 34, 25, 42, 30]}}
{"prediction": {"error_location": 0.9683287739753723, "repair_targets": [0.556593656539917], "repair_candidates": [0.046105995774269104, 0.07237785309553146, 0.007235013879835606, 0.08238521963357925, 0.556593656539917, 0.14350126683712006, 0.09180095791816711], "target_probs": 0.556593656539917}}


{"result": {"time": "2021-02-11 10:12:44.666655", "n_pass": [76, 11, 8], "n_token": 43, "loss": [0.009332012385129929, 0.18374323844909668], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def foo(", "A", ",", "B", ")", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 14, "repair_targets": [30], "repair_candidates": [2, 14, 18, 34, 25, 42, 30]}}
{"prediction": {"error_location": 0.9907113909721375, "repair_targets": [0.8321494460105896], "repair_candidates": [0.028628403320908546, 0.05538430064916611, 0.002925797365605831, 0.05110422149300575, 0.8321494460105896, 0.010179714299738407, 0.019628090783953667], "target_probs": 0.8321494460105896}}


{"result": {"time": "2021-02-11 10:12:44.738272", "n_pass": [78, 12, 9], "n_token": 40, "loss": [0.00116637849714607, 0.25474631786346436], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "#INDENT#", "def foo(", "A", ",", "B", ")", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 11, "repair_targets": [27], "repair_candidates": [2, 11, 15, 31, 22, 39, 27]}}
{"prediction": {"error_location": 0.9988341927528381, "repair_targets": [0.7751131057739258], "repair_candidates": [0.027511924505233765, 0.10227321833372116, 0.0017462586984038353, 0.06707362830638885, 0.7751131057739258, 0.010887140408158302, 0.015394702553749084], "target_probs": 0.7751131057739258}}


{"result": {"time": "2021-02-11 10:12:45.147047", "n_pass": [116, 18, 10], "n_token": 39, "loss": [0.006649272982031107, 0.5530445575714111], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", ")", ")", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 10, "repair_targets": [26], "repair_candidates": [2, 10, 14, 30, 21, 38, 26]}}
{"prediction": {"error_location": 0.9933726787567139, "repair_targets": [0.5751959085464478], "repair_candidates": [0.02048175036907196, 0.2212357223033905, 0.0046363575384020805, 0.1457749307155609, 0.5751959085464478, 0.015312365256249905, 0.017362920567393303], "target_probs": 0.5751959085464478}}


{"result": {"time": "2021-02-11 10:12:45.486444", "n_pass": [121, 23, 11], "n_token": 37, "loss": [0.021605834364891052, 0.3118394613265991], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "TypeError", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 8, "repair_targets": [24], "repair_candidates": [2, 8, 12, 28, 19, 36, 24]}}
{"prediction": {"error_location": 0.9786257743835449, "repair_targets": [0.7320990562438965], "repair_candidates": [0.008707200177013874, 0.17660017311573029, 0.0011424749391153455, 0.061940815299749374, 0.7320990562438965, 0.006810792721807957, 0.012699482031166553], "target_probs": 0.7320990562438965}}


{"result": {"time": "2021-02-11 10:12:45.688271", "n_pass": [126, 26, 12], "n_token": 35, "loss": [0.010992799885571003, 0.6630256175994873], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", ")", "as", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 8, "repair_targets": [22], "repair_candidates": [2, 8, 12, 26, 17, 34, 22]}}
{"prediction": {"error_location": 0.9890673756599426, "repair_targets": [0.5152899026870728], "repair_candidates": [0.017989516258239746, 0.22842681407928467, 0.002801785245537758, 0.1991080492734909, 0.5152899026870728, 0.01268775761127472, 0.023696212098002434], "target_probs": 0.5152899026870728}}


{"result": {"time": "2021-02-11 10:12:45.753700", "n_pass": [127, 27, 13], "n_token": 33, "loss": [0.010996101424098015, 0.5819109678268433], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "'nopython flag must be True'", ",", "str", "(", "raises"]}}
{"position": {"error_location": 8, "repair_targets": [20], "repair_candidates": [2, 8, 12, 24, 15, 32, 20]}}
{"prediction": {"error_location": 0.9890641570091248, "repair_targets": [0.5588294267654419], "repair_candidates": [0.018956832587718964, 0.2995661795139313, 0.008473961614072323, 0.0658603310585022, 0.5588294267654419, 0.013704736717045307, 0.034608546644449234], "target_probs": 0.5588294267654419}}


{"result": {"time": "2021-02-11 10:12:46.014128", "n_pass": [134, 31, 14], "n_token": 31, "loss": [0.019284380599856377, 0.5253112316131592], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", ",", "str", "(", "raises"]}}
{"position": {"error_location": 8, "repair_targets": [20], "repair_candidates": [2, 8, 12, 24, 15, 30, 20]}}
{"prediction": {"error_location": 0.9809002876281738, "repair_targets": [0.5913712978363037], "repair_candidates": [0.014476683922111988, 0.23486991226673126, 0.013309280388057232, 0.08788751065731049, 0.5913712978363037, 0.03319458290934563, 0.024890728294849396], "target_probs": 0.5913712978363037}}


{"result": {"time": "2021-02-11 10:12:46.077706", "n_pass": [135, 32, 15], "n_token": 29, "loss": [0.00573691027238965, 0.21590940654277802], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "raises"]}}
{"position": {"error_location": 8, "repair_targets": [20], "repair_candidates": [2, 8, 12, 24, 15, 28, 20]}}
{"prediction": {"error_location": 0.9942795038223267, "repair_targets": [0.8058083057403564], "repair_candidates": [0.010023139417171478, 0.12959814071655273, 0.0046638916246593, 0.038797684013843536, 0.8058083057403564, 0.00574076222255826, 0.005368111655116081], "target_probs": 0.8058083057403564}}


{"result": {"time": "2021-02-11 10:12:46.140836", "n_pass": [137, 33, 16], "n_token": 28, "loss": [0.0015626850072294474, 0.20123916864395142], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", ",", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "raises"]}}
{"position": {"error_location": 7, "repair_targets": [19], "repair_candidates": [1, 7, 11, 23, 14, 27, 19]}}
{"prediction": {"error_location": 0.9984386563301086, "repair_targets": [0.8177168369293213], "repair_candidates": [0.06296370178461075, 0.06599978357553482, 0.004354925826191902, 0.03821147233247757, 0.8177168369293213, 0.006220363080501556, 0.00453284801915288], "target_probs": 0.8177168369293213}}


{"result": {"time": "2021-02-11 10:12:46.392650", "n_pass": [142, 37, 17], "n_token": 27, "loss": [0.0055848280899226665, 0.2715573310852051], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "#NEWLINE#", "with", "self", ".", "assertRaises", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [18], "repair_candidates": [1, 6, 10, 22, 13, 26, 18]}}
{"prediction": {"error_location": 0.9944308400154114, "repair_targets": [0.7621915936470032], "repair_candidates": [0.07051156461238861, 0.10099949687719345, 0.008070748299360275, 0.047087959945201874, 0.7621915936470032, 0.006427061278373003, 0.004711519926786423], "target_probs": 0.7621915936470032}}


{"result": {"time": "2021-02-11 10:12:46.576874", "n_pass": [147, 40, 18], "n_token": 25, "loss": [0.050796836614608765, 0.5566505193710327], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "#NEWLINE#", "with", "self", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [16], "repair_candidates": [1, 6, 10, 20, 11, 24, 16]}}
{"prediction": {"error_location": 0.9504716396331787, "repair_targets": [0.5731255412101746], "repair_candidates": [0.022219618782401085, 0.13839639723300934, 0.09796708822250366, 0.16559521853923798, 0.5731255412101746, 0.0015894999960437417, 0.0011066242586821318], "target_probs": 0.5731255412101746}}


{"result": {"time": "2021-02-11 10:12:46.759945", "n_pass": [153, 43, 19], "n_token": 23, "loss": [0.039900511503219604, 0.6919798254966736], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "#NEWLINE#", "with", "self", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [16], "repair_candidates": [1, 6, 10, 20, 11, 22, 16]}}
{"prediction": {"error_location": 0.9608849287033081, "repair_targets": [0.5005840063095093], "repair_candidates": [0.0241062231361866, 0.16692575812339783, 0.08607380837202072, 0.20753683149814606, 0.5005840063095093, 0.00675626378506422, 0.008017088286578655], "target_probs": 0.5005840063095093}}


{"result": {"time": "2021-02-11 10:12:47.422386", "n_pass": [191, 54, 20], "n_token": 22, "loss": [0.04237862676382065, 0.4492620825767517], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "=", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [15], "repair_candidates": [1, 6, 9, 19, 10, 21, 15]}}
{"prediction": {"error_location": 0.9585068225860596, "repair_targets": [0.6380988359451294], "repair_candidates": [0.01434103213250637, 0.048887599259614944, 0.025232452899217606, 0.25661394000053406, 0.6380988359451294, 0.006230319384485483, 0.010595736093819141], "target_probs": 0.6380988359451294}}


{"result": {"time": "2021-02-11 10:12:47.541822", "n_pass": [195, 56, 21], "n_token": 21, "loss": [0.14069266617298126, 0.48070186376571655], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "False", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [14], "repair_candidates": [1, 6, 9, 18, 10, 20, 14]}}
{"prediction": {"error_location": 0.8687562942504883, "repair_targets": [0.6183492541313171], "repair_candidates": [0.017227858304977417, 0.2872002124786377, 0.04507700353860855, 0.011410475708544254, 0.6183492541313171, 0.006648124195635319, 0.01408703438937664], "target_probs": 0.6183492541313171}}


{"result": {"time": "2021-02-11 10:12:47.600749", "n_pass": [196, 57, 22], "n_token": 20, "loss": [0.3520972430706024, 0.10551300644874573], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", ")", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [13], "repair_candidates": [1, 6, 9, 17, 10, 19, 13]}}
{"prediction": {"error_location": 0.7032117247581482, "repair_targets": [0.8998627662658691], "repair_candidates": [0.0035358385648578405, 0.0724041536450386, 0.018668994307518005, 0.001376474043354392, 0.8998627662658691, 0.0015085191698744893, 0.0026432599406689405], "target_probs": 0.8998627662658691}}


{"result": {"time": "2021-02-11 10:12:47.658727", "n_pass": [197, 58, 23], "n_token": 19, "loss": [0.1001213863492012, 0.12481354922056198], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "(", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [12], "repair_candidates": [1, 6, 9, 16, 10, 18, 12]}}
{"prediction": {"error_location": 0.904727578163147, "repair_targets": [0.8826614618301392], "repair_candidates": [0.006743642967194319, 0.0967010036110878, 0.003100393805652857, 0.002567213261500001, 0.8826614618301392, 0.0015182567294687033, 0.0067079924046993256], "target_probs": 0.8826614618301392}}


{"result": {"time": "2021-02-11 10:12:47.716741", "n_pass": [198, 59, 24], "n_token": 18, "loss": [0.818449854850769, 0.14028923213481903], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "foo", ")", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [11], "repair_candidates": [1, 6, 9, 15, 10, 17, 11]}}
{"prediction": {"error_location": 0.44111496210098267, "repair_targets": [0.8691068291664124], "repair_candidates": [0.024033885449171066, 0.0688389390707016, 0.010771765373647213, 0.0037366095930337906, 0.8691068291664124, 0.007137714419513941, 0.0163742508739233], "target_probs": 0.8691068291664124}}


{"result": {"time": "2021-02-11 10:12:47.776678", "n_pass": [200, 60, 25], "n_token": 17, "loss": [0.6769336462020874, 0.30158042907714844], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "foo", "#NEWLINE#", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [11], "repair_candidates": [1, 6, 9, 14, 10, 16, 11]}}
{"prediction": {"error_location": 0.5081728100776672, "repair_targets": [0.7396483421325684], "repair_candidates": [0.045542072504758835, 0.14550402760505676, 0.024850845336914062, 0.005564176943153143, 0.7396483421325684, 0.005761441774666309, 0.03312908858060837], "target_probs": 0.7396483421325684}}


{"result": {"time": "2021-02-11 10:12:47.833673", "n_pass": [201, 61, 26], "n_token": 16, "loss": [0.5732054710388184, 0.41083279252052307], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "foo", "#UNINDENT#", "self", "(", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [11], "repair_candidates": [1, 6, 9, 13, 10, 15, 11]}}
{"prediction": {"error_location": 0.5637155771255493, "repair_targets": [0.6630977988243103], "repair_candidates": [0.05082442983984947, 0.19738170504570007, 0.03550117090344429, 0.005625410471111536, 0.6630977988243103, 0.011253757402300835, 0.036315757781267166], "target_probs": 0.6630977988243103}}


{"result": {"time": "2021-02-11 10:12:47.948195", "n_pass": [204, 63, 27], "n_token": 15, "loss": [0.874521791934967, 0.6625871062278748], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", ")", "with", "self", "raises", "foo", "#UNINDENT#", "self", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [11], "repair_candidates": [1, 6, 9, 13, 10, 14, 11]}}
{"prediction": {"error_location": 0.4170614182949066, "repair_targets": [0.515515923500061], "repair_candidates": [0.0798821747303009, 0.16829133033752441, 0.055013980716466904, 0.01411204133182764, 0.515515923500061, 0.1553785651922226, 0.011805949732661247], "target_probs": 0.515515923500061}}


{"result": {"time": "2021-02-11 10:12:48.286790", "n_pass": [213, 69, 28], "n_token": 14, "loss": [0.6959790587425232, 0.18335680663585663], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", "with", "self", "raises", "foo", "#UNINDENT#", "self", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [10], "repair_candidates": [1, 6, 8, 12, 9, 13, 10]}}
{"prediction": {"error_location": 0.49858608841896057, "repair_targets": [0.8324710726737976], "repair_candidates": [0.0250236913561821, 0.025965837761759758, 0.0548846572637558, 0.013919797725975513, 0.8324710726737976, 0.04412895441055298, 0.0036059971898794174], "target_probs": 0.8324710726737976}}


{"result": {"time": "2021-02-11 10:12:48.398281", "n_pass": [218, 71, 29], "n_token": 13, "loss": [0.7346243262290955, 0.15026794373989105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "def foo(", "A", "B", "(", "self", "with", "self", "raises", "foo", "self", "raises"]}}
{"position": {"error_location": 6, "repair_targets": [10], "repair_candidates": [1, 6, 8, 11, 9, 12, 10]}}
{"prediction": {"error_location": 0.47968563437461853, "repair_targets": [0.8604773879051208], "repair_candidates": [0.013543033972382545, 0.012064558453857899, 0.03167290240526199, 0.016065655276179314, 0.8604773879051208, 0.061607394367456436, 0.00456912349909544], "target_probs": 0.8604773879051208}}


{"result": {"time": "2021-02-11 10:12:48.511055", "n_pass": [223, 73, 30], "n_token": 12, "loss": [0.3604659140110016, 0.44760143756866455], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def test_nopython_flag(", "self", "A", "B", "(", "self", "with", "self", "raises", "foo", "self", "raises"]}}
{"position": {"error_location": 5, "repair_targets": [9], "repair_candidates": [1, 5, 7, 10, 8, 11, 9]}}
{"prediction": {"error_location": 0.6973512768745422, "repair_targets": [0.6391593813896179], "repair_candidates": [0.0800844207406044, 0.05817212536931038, 0.023083366453647614, 0.02074623294174671, 0.6391593813896179, 0.1677125096321106, 0.011041950434446335], "target_probs": 0.6391593813896179}}




Minimal simplified tokens:

['def test_nopython_flag(', 'self', 'A', 'B', '(', 'self', 'with', 'self', 'raises', 'foo', 'self', 'raises']
