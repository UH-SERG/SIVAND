
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "_save_macros", "(", ")", "#NEWLINE#", "self", ".", "evaluate", "=", "False"], "error_location": [15], "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 28, 4], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Calysto/metakernel/metakernel/magics/macro_magic.py", "license": "bsd-3-clause", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1728, "results": {"model": "rnn", "prob": {"loc": [[6.1032224039081484e-05, 3.8673622637652727e-10, 5.266985736440688e-10, 1.528334125922015e-10, 6.80503597916271e-10, 1.9856611147006653e-11, 7.868581654302265e-12, 1.1391915882841275e-10, 4.114438789670771e-10, 4.546755767026456e-12, 4.8832191762437915e-11, 2.0069258255261957e-08, 1.7116547979326158e-12, 4.456752189518909e-10, 1.5113750528872316e-11, 0.9999376535415649, 5.79440850856372e-08, 9.551869711854621e-12, 1.1901805692104972e-06, 9.241018540662171e-12, 2.0886932808328318e-11, 3.979321646502276e-12, 2.93946290919056e-11, 1.7509547956505445e-13, 1.980274451363062e-12, 6.13613118649603e-11, 1.3990545610909066e-08, 1.8427346454297222e-11, 1.0552788677620217e-11, 7.603596571814641e-13, 1.92837846385574e-12, 4.359436145406903e-10, 9.051803750992349e-10]], "pointer": [[0.0, 0.0, 0.0013188252924010158, 0.0, 0.9986781477928162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3438655059871962e-06, 0.0, 0.0, 0.0, 3.9861359368842386e-07, 0.0, 0.0, 5.616454927803716e-07, 0.0, 0.0, 0.0, 1.0006232287196326e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 4.883785322817857e-07, 0.0, 0.0, 0.0, 0.0]], "target": [0.9986781477928162]}, "loss": [6.23445157543756e-05, 0.00132272660266608], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:05:07.181704", "n_pass": [1, 1, 1], "n_token": 33, "loss": [6.23445157543756e-05, 0.00132272660266608], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "_save_macros", "(", ")", "#NEWLINE#", "self", ".", "evaluate", "=", "False"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 28, 4]}}
{"prediction": {"error_location": 0.9999376535415649, "repair_targets": [0.9986781477928162], "repair_candidates": [0.0013188252924010158, 0.9986781477928162, 1.3438655059871962e-06, 3.9861359368842386e-07, 5.616454927803716e-07, 1.0006232287196326e-07, 4.883785322817857e-07], "target_probs": 0.9986781477928162}}


{"result": {"time": "2021-02-11 10:05:07.245269", "n_pass": [26, 2, 2], "n_token": 29, "loss": [4.31528314948082e-05, 0.0005263879429548979], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", ".", "evaluate", "=", "False"]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 24, 4]}}
{"prediction": {"error_location": 0.9999568462371826, "repair_targets": [0.9994737505912781], "repair_candidates": [0.0005224591004662216, 0.9994737505912781, 1.274605324397271e-06, 3.7388826967799105e-07, 2.158956533548917e-07, 3.5354364058548526e-07, 1.5677283045079093e-06], "target_probs": 0.9994737505912781}}


{"result": {"time": "2021-02-11 10:05:07.307077", "n_pass": [48, 3, 3], "n_token": 26, "loss": [2.7656173188006505e-05, 8.225779311032966e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def cell_macro(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 15, "repair_targets": [4], "repair_candidates": [2, 11, 15, 18, 22, 24, 4]}}
{"prediction": {"error_location": 0.9999724626541138, "repair_targets": [0.99991774559021], "repair_candidates": [7.842442573746666e-05, 0.99991774559021, 9.609503877072711e-07, 1.409432712762282e-07, 1.0368885483558188e-07, 2.8130338591836335e-07, 2.3365585093415575e-06], "target_probs": 0.99991774559021}}


{"result": {"time": "2021-02-11 10:05:07.366982", "n_pass": [49, 4, 4], "n_token": 24, "loss": [0.050722621381282806, 0.033734988421201706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [0, 9, 13, 16, 20, 22, 2]}}
{"prediction": {"error_location": 0.9505422711372375, "repair_targets": [0.9668276906013489], "repair_candidates": [0.03285909444093704, 0.9668276906013489, 2.9989107133587822e-05, 0.00019170736777596176, 4.893936784355901e-05, 5.550580681301653e-06, 3.703711263369769e-05], "target_probs": 0.9668276906013489}}


{"result": {"time": "2021-02-11 10:05:07.428553", "n_pass": [52, 5, 5], "n_token": 22, "loss": [0.39604997634887695, 0.04300536960363388], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "code", "#NEWLINE#", "self", ".", "self", "."]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [0, 7, 11, 14, 18, 20, 2]}}
{"prediction": {"error_location": 0.6729731559753418, "repair_targets": [0.9579062461853027], "repair_candidates": [0.040487006306648254, 0.9579062461853027, 6.033671161276288e-05, 0.0007993699400685728, 0.00019438886374700814, 4.4079290091758594e-05, 0.0005085982265882194], "target_probs": 0.9579062461853027}}


{"result": {"time": "2021-02-11 10:05:07.660509", "n_pass": [59, 9, 6], "n_token": 20, "loss": [0.5217302441596985, 0.08884643018245697], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "self", ".", "self", "."]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [0, 7, 11, 14, 16, 18, 2]}}
{"prediction": {"error_location": 0.5934928059577942, "repair_targets": [0.9149860739707947], "repair_candidates": [0.06983740627765656, 0.9149860739707947, 5.856982170371339e-05, 0.0016042585484683514, 0.00011140620335936546, 0.0037619483191519976, 0.009640364907681942], "target_probs": 0.9149860739707947}}


{"result": {"time": "2021-02-11 10:05:07.892234", "n_pass": [91, 13, 7], "n_token": 19, "loss": [0.45911574363708496, 0.04833439737558365], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "self", "self", "."]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [0, 7, 11, 14, 16, 17, 2]}}
{"prediction": {"error_location": 0.6318420767784119, "repair_targets": [0.9528151154518127], "repair_candidates": [0.043659716844558716, 0.9528151154518127, 4.00095377699472e-05, 0.000763909425586462, 9.95471691567218e-06, 0.002300944412127137, 0.0004104692779947072], "target_probs": 0.9528151154518127}}


{"result": {"time": "2021-02-11 10:05:07.949427", "n_pass": [93, 14, 8], "n_token": 18, "loss": [0.09036021679639816, 0.04472958669066429], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "self", "self"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [0, 7, 11, 14, 16, 17, 2]}}
{"prediction": {"error_location": 0.9136020541191101, "repair_targets": [0.9562560319900513], "repair_candidates": [0.0425865538418293, 0.9562560319900513, 2.02785522560589e-05, 0.00022594969777856022, 1.305355226577376e-06, 0.0008727022213861346, 3.705867493408732e-05], "target_probs": 0.9562560319900513}}


{"result": {"time": "2021-02-11 10:05:08.005928", "n_pass": [95, 15, 9], "n_token": 17, "loss": [0.1731417030096054, 0.08524727076292038], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", ")", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "self", "self"]}}
{"position": {"error_location": 10, "repair_targets": [1], "repair_candidates": [0, 6, 10, 13, 15, 16, 1]}}
{"prediction": {"error_location": 0.8410184979438782, "repair_targets": [0.9182851910591125], "repair_candidates": [0.07726883143186569, 0.9182851910591125, 2.6254467229591683e-05, 0.0008544869488105178, 4.267859367246274e-06, 0.0034777161199599504, 8.32073565106839e-05], "target_probs": 0.9182851910591125}}


{"result": {"time": "2021-02-11 10:05:08.062356", "n_pass": [97, 16, 10], "n_token": 16, "loss": [0.6731840372085571, 0.42683038115501404], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", ".", "learned", "[", "self", "]", "=", "self", ".", "self", "self"]}}
{"position": {"error_location": 9, "repair_targets": [1], "repair_candidates": [0, 5, 9, 12, 14, 15, 1]}}
{"prediction": {"error_location": 0.5100818872451782, "repair_targets": [0.6525742411613464], "repair_candidates": [0.24602380394935608, 0.6525742411613464, 0.00014533699140883982, 0.032920368015766144, 8.018926746444777e-05, 0.0676201805472374, 0.0006358901155181229], "target_probs": 0.6525742411613464}}


{"result": {"time": "2021-02-11 10:05:08.286729", "n_pass": [102, 20, 11], "n_token": 15, "loss": [0.3090691864490509, 0.6749282479286194], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", "learned", "[", "self", "]", "=", "self", ".", "self", "self"]}}
{"position": {"error_location": 8, "repair_targets": [1], "repair_candidates": [0, 5, 8, 11, 13, 14, 1]}}
{"prediction": {"error_location": 0.7341300249099731, "repair_targets": [0.509192943572998], "repair_candidates": [0.35150146484375, 0.509192943572998, 0.012252098880708218, 0.07156568020582199, 0.00013528598356060684, 0.05459070950746536, 0.0007618154049851], "target_probs": 0.509192943572998}}


{"result": {"time": "2021-02-11 10:05:08.564161", "n_pass": [109, 25, 12], "n_token": 14, "loss": [0.16963830590248108, 0.5835927128791809], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "#INDENT#", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", "learned", "[", "self", "]", "=", "self", "self", "self"]}}
{"position": {"error_location": 8, "repair_targets": [1], "repair_candidates": [0, 5, 8, 11, 12, 13, 1]}}
{"prediction": {"error_location": 0.8439699411392212, "repair_targets": [0.5578904151916504], "repair_candidates": [0.3590785264968872, 0.5578904151916504, 0.029249951243400574, 0.05308970436453819, 0.00015503221948165447, 0.00028010865207761526, 0.0002562613517511636], "target_probs": 0.5578904151916504}}


{"result": {"time": "2021-02-11 10:05:08.618707", "n_pass": [114, 26, 13], "n_token": 13, "loss": [0.2588288486003876, 0.34699752926826477], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "'\\n        %%macro NAME - learn a new macro\\n\\n        This cell macro will learn the macro in the\\n        cell. The cell contents are just commands (macros\\n        or code in the kernel language).\\n\\n        Example:\\n            %%macro test\\n            print \"Ok!\"\\n\\n            %macro test\\n            Ok!\\n        '", "#NEWLINE#", "self", "learned", "[", "self", "]", "=", "self", "self", "self"]}}
{"position": {"error_location": 7, "repair_targets": [1], "repair_candidates": [0, 4, 7, 10, 11, 12, 1]}}
{"prediction": {"error_location": 0.771955132484436, "repair_targets": [0.7068070769309998], "repair_candidates": [0.22990073263645172, 0.7068070769309998, 0.01559700258076191, 0.0473228394985199, 0.00010011389531427994, 0.00014214620750863105, 0.0001301355368923396], "target_probs": 0.7068070769309998}}


{"result": {"time": "2021-02-11 10:05:08.672862", "n_pass": [115, 27, 14], "n_token": 12, "loss": [0.4629226326942444, 0.28159648180007935], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "#NEWLINE#", "self", "learned", "[", "self", "]", "=", "self", "self", "self"]}}
{"position": {"error_location": 6, "repair_targets": [1], "repair_candidates": [0, 3, 6, 9, 10, 11, 1]}}
{"prediction": {"error_location": 0.6294413208961487, "repair_targets": [0.7545781135559082], "repair_candidates": [0.21482965350151062, 0.7545781135559082, 0.01371486485004425, 0.016605202108621597, 8.19363267510198e-05, 9.572770068189129e-05, 9.451558435102925e-05], "target_probs": 0.7545781135559082}}




Minimal simplified tokens:

['self', 'name', '#NEWLINE#', 'self', 'learned', '[', 'self', ']', '=', 'self', 'self', 'self']
