
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "open_file", "(", "1", ",", "mode", "=", "'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"], "error_location": [42], "repair_targets": [12], "repair_candidates": [12, 28, 63, 16, 24, 46, 14, 55, 20, 42, 44, 38, 51, 59], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "networkx/networkx/networkx/algorithms/bipartite/edgelist.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4150, "results": {"model": "rnn", "prob": {"loc": [[0.00019616764620877802, 1.1704202051987522e-08, 6.614757075418254e-10, 3.4183604297882697e-12, 1.0062697897161854e-10, 3.7113168441238464e-12, 7.623779385568241e-11, 3.213226906773059e-11, 4.0197278838860484e-10, 8.660349347378027e-12, 3.317763841437227e-10, 6.228628723903284e-11, 4.81232387272712e-10, 2.2065732574461094e-10, 9.538944745202116e-09, 1.639861163527101e-10, 2.0617023643865195e-09, 3.500040188231246e-11, 6.529043972136606e-10, 2.798392073621869e-10, 5.082277709789196e-09, 1.212346282392085e-11, 2.561486855956474e-10, 2.165846495205681e-11, 3.465448594752729e-09, 2.088177547543424e-10, 3.6527247893047843e-09, 6.303699784382388e-10, 4.0346312957240116e-09, 1.2343427668870532e-10, 1.2978241814565195e-09, 2.5452266960712677e-09, 7.730529549831999e-10, 9.447554960573257e-10, 6.377190997497451e-10, 1.462350684988678e-09, 1.065440429215414e-07, 9.446459614537162e-09, 1.2342492583528042e-09, 3.5201855319577646e-11, 3.92352622613501e-10, 7.20625337180536e-09, 0.9580501914024353, 6.9860302573943045e-06, 0.04115016758441925, 6.429883736558395e-09, 0.0005696953157894313, 1.3567887924281763e-09, 1.383012870892486e-10, 1.8273989266237578e-10, 4.420543098238028e-11, 1.7814458797005273e-09, 3.3887745387595203e-10, 8.913024096557365e-09, 2.2517493647455922e-08, 1.9808676920973767e-09, 2.700272505595791e-10, 7.594625484053097e-10, 2.0105607456688546e-10, 5.487399690196071e-08, 6.431095656012076e-10, 1.6942798553021277e-10, 6.922085127314404e-10, 2.6452873498783447e-05, 5.1870654438346264e-09, 1.3135909027184312e-09]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9356853365898132, 0.0, 0.0640149861574173, 0.0, 8.974665979621932e-05, 0.0, 0.0, 0.0, 4.9516529543325305e-06, 0.0, 0.0, 0.0, 0.0001453281001886353, 0.0, 0.0, 0.0, 4.5281052734935656e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.124682148656575e-05, 0.0, 0.0, 0.0, 1.5967235356129095e-07, 0.0, 1.5847935230794974e-07, 0.0, 5.759363261859107e-07, 0.0, 0.0, 0.0, 0.0, 1.706981606730551e-06, 0.0, 0.0, 0.0, 1.055702085750454e-07, 0.0, 0.0, 0.0, 3.022438193056587e-07, 0.0, 0.0, 0.0, 2.3900997803139035e-07, 0.0, 0.0]], "target": [0.9356853365898132]}, "loss": [0.04285499081015587, 0.06647603958845139], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:50:45.814037", "n_pass": [1, 1, 1], "n_token": 66, "loss": [0.04285499081015587, 0.06647603958845139], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "open_file", "(", "1", ",", "mode", "=", "'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 42, "repair_targets": [12], "repair_candidates": [12, 28, 63, 16, 24, 46, 14, 55, 20, 42, 44, 38, 51, 59]}}
{"prediction": {"error_location": 0.9580501914024353, "repair_targets": [0.9356853365898132], "repair_candidates": [0.9356853365898132, 0.0640149861574173, 8.974665979621932e-05, 4.9516529543325305e-06, 0.0001453281001886353, 4.5281052734935656e-05, 1.124682148656575e-05, 1.5967235356129095e-07, 1.5847935230794974e-07, 5.759363261859107e-07, 1.706981606730551e-06, 1.055702085750454e-07, 3.022438193056587e-07, 2.3900997803139035e-07], "target_probs": 0.9356853365898132}}


{"result": {"time": "2021-02-11 10:50:45.893576", "n_pass": [20, 2, 2], "n_token": 58, "loss": [0.04700140282511711, 0.038288429379463196], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "'Write a bipartite graph as a list of edges.\\n\\n    Parameters\\n    ----------\\n    G : Graph\\n       A NetworkX bipartite graph\\n    path : file or string\\n       File or filename to write. If a file is provided, it must be\\n       opened in \\'wb\\' mode. Filenames ending in .gz or .bz2 will be compressed.\\n    comments : string, optional\\n       The character used to indicate the start of a comment\\n    delimiter : string, optional\\n       The string used to separate values.  The default is whitespace.\\n    data : bool or list, optional\\n       If False write no edge data.\\n       If True write a string representation of the edge data dictionary..\\n       If a list (or other iterable) is provided, write the  keys specified\\n       in the list.\\n    encoding: string, optional\\n       Specify which encoding to use when writing file.\\n\\n    Examples\\n    --------\\n    >>> G=nx.path_graph(4)\\n    >>> G.add_nodes_from([0,2], bipartite=0)\\n    >>> G.add_nodes_from([1,3], bipartite=1)\\n    >>> nx.write_edgelist(G, \"test.edgelist\")\\n    >>> fh=open(\"test.edgelist\",\\'wb\\')\\n    >>> nx.write_edgelist(G, fh)\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\")\\n    >>> nx.write_edgelist(G, \"test.edgelist.gz\", data=False)\\n\\n    >>> G=nx.Graph()\\n    >>> G.add_edge(1,2,weight=7,color=\\'red\\')\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=False)\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\'])\\n    >>> nx.write_edgelist(G,\\'test.edgelist\\',data=[\\'color\\',\\'weight\\'])\\n\\n    See Also\\n    --------\\n    write_edgelist()\\n    generate_edgelist()\\n    '", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [4, 20, 55, 8, 16, 38, 6, 47, 12, 34, 36, 30, 43, 51]}}
{"prediction": {"error_location": 0.9540859460830688, "repair_targets": [0.9624353051185608], "repair_candidates": [0.9624353051185608, 0.03702915459871292, 0.0001394777063978836, 6.5070739765360486e-06, 0.00026630033971741796, 0.00010114552424056455, 1.7200798538397066e-05, 1.8135033030830527e-07, 2.0618057305910042e-07, 9.922674735207693e-07, 2.5214319521182915e-06, 1.1664220522789037e-07, 4.974378384758893e-07, 3.9541524188280164e-07], "target_probs": 0.9624353051185608}}


{"result": {"time": "2021-02-11 10:50:46.050321", "n_pass": [47, 4, 3], "n_token": 54, "loss": [0.06671293079853058, 0.03282957896590233], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "#NEWLINE#", "for", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 30, "repair_targets": [4], "repair_candidates": [4, 20, 51, 8, 16, 34, 6, 43, 12, 30, 32, 26, 39, 47]}}
{"prediction": {"error_location": 0.9354637861251831, "repair_targets": [0.9677034616470337], "repair_candidates": [0.9677034616470337, 0.03157340735197067, 0.00016519783821422607, 8.288172466563992e-06, 0.0002321466017747298, 8.666382927913219e-05, 0.00022101003560237586, 1.8956929181968007e-07, 1.4726913377671735e-07, 1.5316247754526557e-06, 5.584686277870787e-06, 3.620908444190718e-07, 1.0840221875696443e-06, 9.04118053313141e-07], "target_probs": 0.9677034616470337}}


{"result": {"time": "2021-02-11 10:50:46.200804", "n_pass": [86, 6, 4], "n_token": 52, "loss": [0.010786679573357105, 0.04987935349345207], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "generate_edgelist", "(", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [4, 20, 49, 8, 16, 32, 6, 41, 12, 28, 30, 24, 37, 45]}}
{"prediction": {"error_location": 0.9892712831497192, "repair_targets": [0.9513441920280457], "repair_candidates": [0.9513441920280457, 0.04706282913684845, 0.00033734284806996584, 2.7876447347807698e-05, 0.00029490707674995065, 0.00017060393292922527, 0.00031995316385291517, 6.990725523792207e-06, 2.2938797883398365e-06, 0.000408563413657248, 1.678316039033234e-05, 6.494895501418796e-07, 3.7116456041985657e-06, 3.2434363674838096e-06], "target_probs": 0.9513441920280457}}


{"result": {"time": "2021-02-11 10:50:46.274763", "n_pass": [87, 7, 5], "n_token": 50, "loss": [0.006723045837134123, 0.026391487568616867], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [4, 20, 47, 8, 16, 30, 6, 39, 12, 26, 28, 24, 35, 43]}}
{"prediction": {"error_location": 0.9932993650436401, "repair_targets": [0.9739537239074707], "repair_candidates": [0.9739537239074707, 0.0104498490691185, 0.00019912926654797047, 9.064796358870808e-06, 0.0002491521881893277, 0.00015611005073878914, 0.00020467919239308685, 3.390377969481051e-05, 1.5468845958821476e-05, 0.01467453595250845, 3.750631003640592e-05, 8.178329267138906e-07, 9.788865099835675e-06, 6.196948106662603e-06], "target_probs": 0.9739537239074707}}


{"result": {"time": "2021-02-11 10:50:46.350719", "n_pass": [91, 8, 6], "n_token": 48, "loss": [0.005076850764453411, 0.03203527256846428], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "+=", "'\\n'", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [4, 20, 45, 8, 16, 30, 6, 37, 12, 26, 28, 24, 33, 41]}}
{"prediction": {"error_location": 0.9949357509613037, "repair_targets": [0.968472421169281], "repair_candidates": [0.968472421169281, 0.011424797587096691, 0.0003196021425537765, 1.239274388353806e-05, 0.0004964154213666916, 0.000205994161660783, 0.0002922433486673981, 4.132979302085005e-05, 2.7203665013075806e-05, 0.018158186227083206, 0.0005120737478137016, 1.2600014542840654e-06, 2.373004099354148e-05, 1.2352567864581943e-05], "target_probs": 0.968472421169281}}


{"result": {"time": "2021-02-11 10:50:46.423083", "n_pass": [93, 9, 7], "n_token": 46, "loss": [0.0047874110750854015, 0.011956359259784222], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", ".", "write", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [4, 20, 43, 8, 16, 30, 6, 35, 12, 26, 28, 24, 33, 39]}}
{"prediction": {"error_location": 0.9952239394187927, "repair_targets": [0.9881148338317871], "repair_candidates": [0.9881148338317871, 0.008551730774343014, 0.00015340326353907585, 9.267234418075532e-06, 0.00013828663213644177, 0.00015985606296453625, 8.037246880121529e-05, 3.96900468331296e-05, 1.821018486225512e-05, 0.002122527686879039, 0.0005855650524608791, 1.184967686640448e-06, 1.3211375517130364e-05, 1.1931568224099465e-05], "target_probs": 0.9881148338317871}}


{"result": {"time": "2021-02-11 10:50:46.494234", "n_pass": [95, 10, 8], "n_token": 44, "loss": [0.0027001372072845697, 0.009494652040302753], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", ".", "encode", "(", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [4, 20, 41, 8, 16, 30, 6, 35, 12, 26, 28, 24, 33, 37]}}
{"prediction": {"error_location": 0.9973034858703613, "repair_targets": [0.9905502796173096], "repair_candidates": [0.9905502796173096, 0.007846808061003685, 9.03418695088476e-05, 6.096712240832858e-06, 6.792414205847308e-05, 8.254798012785614e-05, 5.205217530601658e-05, 2.3319056708714925e-05, 9.920055163092911e-06, 0.0008090963819995522, 0.0004405828658491373, 3.44877116731368e-06, 3.6681531128124334e-06, 1.3830941497872118e-05], "target_probs": 0.9905502796173096}}


{"result": {"time": "2021-02-11 10:50:46.564107", "n_pass": [97, 11, 9], "n_token": 41, "loss": [0.06145251542329788, 0.006807378027588129], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["'wb'", ")", "#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [4, 20, 38, 8, 16, 30, 6, 35, 12, 26, 28, 24, 33, 37]}}
{"prediction": {"error_location": 0.9403976202011108, "repair_targets": [0.9932157397270203], "repair_candidates": [0.9932157397270203, 0.006296968087553978, 5.5267810239456594e-05, 3.3606554552534362e-06, 3.976093648816459e-05, 4.229144542478025e-05, 4.306207119952887e-05, 6.665040928055532e-06, 5.937039532000199e-06, 0.00013875467993784696, 0.00014350807759910822, 2.7593348477239488e-06, 3.761358584597474e-06, 2.1291782559273997e-06], "target_probs": 0.9932157397270203}}


{"result": {"time": "2021-02-11 10:50:46.633096", "n_pass": [99, 12, 10], "n_token": 39, "loss": [0.016792723909020424, 0.002794889500364661], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "'#'", ",", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [2, 18, 36, 6, 14, 28, 4, 33, 10, 24, 26, 22, 31, 35]}}
{"prediction": {"error_location": 0.9833473563194275, "repair_targets": [0.9972090125083923], "repair_candidates": [0.9972090125083923, 0.002536729210987687, 5.1133643864886835e-05, 2.532447069825139e-06, 2.02124774659751e-05, 2.1061172446934506e-05, 2.0757182937813923e-05, 5.702082944480935e-06, 4.14490887123975e-06, 6.271588063100353e-05, 6.165812374092638e-05, 1.5494834997298312e-06, 1.6089046539491392e-06, 1.1304545068924199e-06], "target_probs": 0.9972090125083923}}


{"result": {"time": "2021-02-11 10:50:46.772870", "n_pass": [104, 14, 11], "n_token": 37, "loss": [0.01852274499833584, 0.005792254116386175], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "' '", ",", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [2, 16, 34, 6, 12, 26, 4, 31, 8, 22, 24, 20, 29, 33]}}
{"prediction": {"error_location": 0.9816477298736572, "repair_targets": [0.994224488735199], "repair_candidates": [0.994224488735199, 0.005422375164926052, 0.0001370572717860341, 5.755015081376769e-06, 1.3517150364350528e-05, 1.4401671251107473e-05, 2.1365842258092016e-05, 6.076861609471962e-06, 4.252418420946924e-06, 7.837012526579201e-05, 6.770858453819528e-05, 1.6727728961996036e-06, 1.6773878996900748e-06, 1.1569843536562985e-06], "target_probs": 0.994224488735199}}


{"result": {"time": "2021-02-11 10:50:46.839743", "n_pass": [106, 15, 12], "n_token": 35, "loss": [0.012785250321030617, 0.004783370066434145], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2], "repair_candidates": [2, 14, 32, 6, 10, 24, 4, 29, 8, 20, 22, 18, 27, 31]}}
{"prediction": {"error_location": 0.9872960448265076, "repair_targets": [0.9952280521392822], "repair_candidates": [0.9952280521392822, 0.0042683640494942665, 0.0002695060975383967, 6.623880381084746e-06, 1.7044603737303987e-05, 2.9755783543805592e-05, 1.975534723896999e-05, 5.172871169634163e-06, 4.796787834493443e-06, 7.278681005118415e-05, 7.34197674319148e-05, 1.8466546407580609e-06, 1.670391043262498e-06, 1.2397498494465253e-06], "target_probs": 0.9952280521392822}}


{"result": {"time": "2021-02-11 10:50:46.905575", "n_pass": [108, 16, 13], "n_token": 33, "loss": [0.004931666888296604, 0.005742136389017105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "'utf-8'", ")", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 18, "repair_targets": [2], "repair_candidates": [2, 12, 30, 6, 10, 22, 4, 27, 8, 18, 20, 16, 25, 29]}}
{"prediction": {"error_location": 0.9950802326202393, "repair_targets": [0.9942743182182312], "repair_candidates": [0.9942743182182312, 0.005169038660824299, 0.00021545558411162347, 6.889352789585246e-06, 3.493501208140515e-05, 5.28078198840376e-05, 3.48636822309345e-05, 5.339757535693934e-06, 3.7432621411426226e-06, 9.734107879921794e-05, 0.00010075631871586666, 1.6399360447394429e-06, 1.6654245200697915e-06, 1.2272835192561615e-06], "target_probs": 0.9942743182182312}}


{"result": {"time": "2021-02-11 10:50:46.970554", "n_pass": [110, 17, 14], "n_token": 31, "loss": [0.0445818156003952, 0.02270745299756527], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", ",", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 28, 6, 10, 20, 4, 25, 8, 16, 18, 14, 23, 27]}}
{"prediction": {"error_location": 0.9563972353935242, "repair_targets": [0.9775484204292297], "repair_candidates": [0.9775484204292297, 0.021190378814935684, 0.00021401135018095374, 4.735922993859276e-05, 3.434981408645399e-05, 0.0004997713840566576, 2.4587667212472297e-05, 6.174801910674432e-06, 5.308776508172741e-06, 0.0002779461501631886, 0.00014230558008421212, 4.331542186264414e-06, 2.8291096896282397e-06, 2.1748687686340418e-06], "target_probs": 0.9775484204292297}}


{"result": {"time": "2021-02-11 10:50:47.164775", "n_pass": [159, 20, 15], "n_token": 30, "loss": [0.8509988784790039, 0.16194398701190948], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", ")", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 27, 6, 10, 19, 4, 24, 8, 16, 17, 14, 22, 26]}}
{"prediction": {"error_location": 0.4269882142543793, "repair_targets": [0.8504888415336609], "repair_candidates": [0.8504888415336609, 0.14329242706298828, 0.0012526586651802063, 0.000621238024905324, 0.00026063178665935993, 0.0005807663546875119, 0.00016861259064171463, 3.074223786825314e-05, 0.0004842315101996064, 0.0005284429644234478, 0.0019213835475966334, 8.959534170571715e-05, 0.00021570980607066303, 6.475096597569063e-05], "target_probs": 0.8504888415336609}}


{"result": {"time": "2021-02-11 10:50:47.291220", "n_pass": [163, 22, 16], "n_token": 29, "loss": [0.2282186895608902, 0.05076422169804573], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "#INDENT#", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 26, 6, 10, 19, 4, 23, 8, 16, 17, 14, 21, 25]}}
{"prediction": {"error_location": 0.795950174331665, "repair_targets": [0.9505027532577515], "repair_candidates": [0.9505027532577515, 0.04745819419622421, 0.0003349945181980729, 8.502085256623104e-05, 5.053042696090415e-05, 0.0004435181326698512, 3.547604865161702e-05, 9.630959539208561e-06, 7.774870027787983e-05, 0.00023485376732423902, 0.0006483233883045614, 6.609125193790533e-06, 8.307812095154077e-05, 2.923623651440721e-05], "target_probs": 0.9505027532577515}}


{"result": {"time": "2021-02-11 10:50:47.354111", "n_pass": [164, 23, 17], "n_token": 28, "loss": [0.40626031160354614, 0.021534765139222145], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "#NEWLINE#", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 25, 6, 10, 19, 4, 22, 8, 16, 17, 14, 20, 24]}}
{"prediction": {"error_location": 0.6661366820335388, "repair_targets": [0.9786954522132874], "repair_candidates": [0.9786954522132874, 0.020365457981824875, 0.00020764574583154172, 4.5645527279702947e-05, 3.0174800485838205e-05, 0.00018968396761920303, 2.5349703719257377e-05, 6.041121650923742e-06, 6.382220453815535e-05, 0.0002904948778450489, 3.255413321312517e-05, 5.830525878991466e-06, 2.8253436539671384e-05, 1.3703939657716546e-05], "target_probs": 0.9786954522132874}}


{"result": {"time": "2021-02-11 10:50:47.417341", "n_pass": [166, 24, 18], "n_token": 27, "loss": [0.11194085329771042, 0.019100548699498177], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "(", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 24, 6, 10, 19, 4, 21, 8, 16, 17, 14, 20, 23]}}
{"prediction": {"error_location": 0.8940972089767456, "repair_targets": [0.9810807108879089], "repair_candidates": [0.9810807108879089, 0.018544206395745277, 0.00010693229705793783, 2.6031149900518358e-05, 8.659503691887949e-06, 4.081464794580825e-05, 5.74699788558064e-06, 3.6304570585343754e-06, 6.487255450338125e-05, 3.206405745004304e-05, 1.633042074900004e-06, 1.8597947928356007e-05, 5.398524444899522e-05, 1.2085065463907085e-05], "target_probs": 0.9810807108879089}}


{"result": {"time": "2021-02-11 10:50:47.479734", "n_pass": [168, 25, 19], "n_token": 26, "loss": [0.22855566442012787, 0.021455777809023857], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 23, 6, 10, 19, 4, 21, 8, 16, 17, 14, 20, 22]}}
{"prediction": {"error_location": 0.7956820726394653, "repair_targets": [0.978772759437561], "repair_candidates": [0.978772759437561, 0.020025620236992836, 0.00023559565306641161, 4.8878806410357356e-05, 2.780579961836338e-05, 0.00021268609270919114, 3.889324943884276e-05, 1.0193948583037127e-05, 9.714892075862736e-05, 0.00012740548118017614, 9.783437235455494e-06, 0.00011532396456459537, 0.0001388599193887785, 0.0001390864490531385], "target_probs": 0.978772759437561}}


{"result": {"time": "2021-02-11 10:50:47.543078", "n_pass": [171, 26, 20], "n_token": 24, "loss": [0.31029897928237915, 0.019904404878616333], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 12, 23, 6, 10, 19, 4, 21, 8, 16, 17, 14, 20, 22]}}
{"prediction": {"error_location": 0.7332277297973633, "repair_targets": [0.9802923798561096], "repair_candidates": [0.9802923798561096, 0.018368592485785484, 0.00013613956980407238, 3.535567157086916e-05, 2.0857934941886924e-05, 0.0006797293317504227, 2.8017891963827424e-05, 9.101136129174847e-06, 9.501173190074041e-05, 0.00011067814193665981, 5.690215402864851e-06, 6.959192978683859e-05, 6.748099258402362e-05, 8.132249058689922e-05], "target_probs": 0.9802923798561096}}


{"result": {"time": "2021-02-11 10:50:47.603211", "n_pass": [172, 27, 21], "n_token": 23, "loss": [0.5527192950248718, 0.10890122503042221], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", ",", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 15, "repair_targets": [1], "repair_candidates": [1, 11, 22, 5, 9, 18, 3, 20, 7, 15, 16, 13, 19, 21]}}
{"prediction": {"error_location": 0.5753831267356873, "repair_targets": [0.896818995475769], "repair_candidates": [0.896818995475769, 0.09711098670959473, 0.0008831752929836512, 0.00027815703651867807, 0.00010483424557605758, 0.002895187586545944, 0.00014415493933483958, 2.7145024432684295e-05, 0.0006335804355330765, 0.0003097046574112028, 1.7653819668339565e-05, 0.0003538392193149775, 0.00021282136731315404, 0.00020975300867576152], "target_probs": 0.896818995475769}}


{"result": {"time": "2021-02-11 10:50:47.722933", "n_pass": [175, 29, 22], "n_token": 22, "loss": [0.5813905000686646, 0.5134227275848389], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", ",", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 14, "repair_targets": [1], "repair_candidates": [1, 10, 21, 4, 8, 17, 2, 19, 6, 14, 15, 12, 18, 20]}}
{"prediction": {"error_location": 0.5591204166412354, "repair_targets": [0.5984437465667725], "repair_candidates": [0.5984437465667725, 0.3928222060203552, 0.0005943511496298015, 0.00043189828284084797, 0.0002048124879365787, 0.0048385425470769405, 0.0001889441191451624, 3.1318235414801165e-05, 0.0005206086789257824, 0.0006004740134812891, 1.5543444533250295e-05, 0.0005168544594198465, 0.0004460203927010298, 0.000344702391885221], "target_probs": 0.5984437465667725}}


{"result": {"time": "2021-02-11 10:50:47.782142", "n_pass": [177, 30, 23], "n_token": 21, "loss": [0.49131637811660767, 0.10397106409072876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "=", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 13, "repair_targets": [1], "repair_candidates": [1, 9, 20, 3, 7, 16, 2, 18, 5, 13, 14, 11, 17, 19]}}
{"prediction": {"error_location": 0.6118203997612, "repair_targets": [0.9012513756752014], "repair_candidates": [0.9012513756752014, 0.05819300562143326, 0.0002748672850430012, 0.0008488466846756637, 0.0022996540647000074, 0.02837183326482773, 0.0010965120745822787, 6.23845771769993e-05, 0.0015386211453005672, 0.002673518378287554, 3.647393168648705e-05, 0.00107849040068686, 0.0014555234229192138, 0.000819010310806334], "target_probs": 0.9012513756752014}}


{"result": {"time": "2021-02-11 10:50:47.840951", "n_pass": [179, 31, 24], "n_token": 20, "loss": [1.0136990547180176, 0.13926857709884644], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "delimiter", "=", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 12, "repair_targets": [1], "repair_candidates": [1, 8, 19, 3, 6, 15, 2, 17, 4, 12, 13, 10, 16, 18]}}
{"prediction": {"error_location": 0.36287420988082886, "repair_targets": [0.8699943423271179], "repair_candidates": [0.8699943423271179, 0.039719000458717346, 0.008023411966860294, 0.0037515247240662575, 0.0017423572717234492, 0.07071477174758911, 0.0014379218919202685, 8.072740456555039e-05, 0.0007484909729100764, 0.0011169577483087778, 2.5128865672741085e-05, 0.0007869616965763271, 0.0010459767654538155, 0.0008124003070406616], "target_probs": 0.8699943423271179}}


{"result": {"time": "2021-02-11 10:50:47.901503", "n_pass": [181, 32, 25], "n_token": 19, "loss": [0.5902160406112671, 0.060100384056568146], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "delimiter", "data", "=", "encoding", "=", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 11, "repair_targets": [1], "repair_candidates": [1, 7, 18, 3, 5, 14, 2, 16, 4, 11, 12, 9, 15, 17]}}
{"prediction": {"error_location": 0.5542075634002686, "repair_targets": [0.9416700005531311], "repair_candidates": [0.9416700005531311, 0.03636496514081955, 0.0012086777715012431, 0.003065928118303418, 0.0005814445903524756, 0.01461918093264103, 0.00039460574043914676, 3.3913565857801586e-05, 0.00039893979555927217, 0.0002556098916102201, 1.9161147065460682e-05, 0.00045000924728810787, 0.00038960654637776315, 0.0005479429964907467], "target_probs": 0.9416700005531311}}


{"result": {"time": "2021-02-11 10:50:48.016910", "n_pass": [185, 34, 26], "n_token": 18, "loss": [0.19643671810626984, 0.02792569063603878], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "delimiter", "data", "=", "encoding", "line", "in", "delimiter", "delimiter", ",", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 10, "repair_targets": [1], "repair_candidates": [1, 7, 17, 3, 5, 13, 2, 15, 4, 10, 11, 8, 14, 16]}}
{"prediction": {"error_location": 0.8216532468795776, "repair_targets": [0.9724606275558472], "repair_candidates": [0.9724606275558472, 0.022858215495944023, 0.0005877335206605494, 0.0018912964733317494, 0.00047386871301569045, 8.414186595473439e-05, 5.178741048439406e-05, 3.5965636925539e-05, 0.0001924889802467078, 0.0002577069972176105, 1.7767542885849252e-05, 0.00033027175231836736, 0.0002671912661753595, 0.000490854843519628], "target_probs": 0.9724606275558472}}


{"result": {"time": "2021-02-11 10:50:48.132158", "n_pass": [190, 36, 27], "n_token": 17, "loss": [0.06528551131486893, 0.04691325128078461], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "delimiter", "data", "=", "encoding", "line", "in", "delimiter", "delimiter", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 10, "repair_targets": [1], "repair_candidates": [1, 7, 16, 3, 5, 12, 2, 14, 4, 10, 11, 8, 13, 15]}}
{"prediction": {"error_location": 0.9367998242378235, "repair_targets": [0.9541701674461365], "repair_candidates": [0.9541701674461365, 0.040056679397821426, 0.0007221219129860401, 0.0016139424405992031, 0.0016634872881695628, 0.00014464078412856907, 0.00011183434980921447, 6.074723569327034e-05, 0.0007859260076656938, 0.0001389550307067111, 1.2267469173821155e-05, 7.155173079809174e-05, 0.00010202035628026351, 0.0003456326958257705], "target_probs": 0.9541701674461365}}


{"result": {"time": "2021-02-11 10:50:48.247842", "n_pass": [202, 38, 28], "n_token": 16, "loss": [0.16000217199325562, 0.07774961739778519], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def write_edgelist(", "G", "path", "comments", "delimiter", "data", "encoding", "line", "in", "delimiter", "delimiter", "data", "line", "path", "line", "encoding"]}}
{"position": {"error_location": 9, "repair_targets": [1], "repair_candidates": [1, 6, 15, 3, 5, 11, 2, 13, 4, 9, 10, 7, 12, 14]}}
{"prediction": {"error_location": 0.8521420955657959, "repair_targets": [0.9251960515975952], "repair_candidates": [0.9251960515975952, 0.06600666046142578, 0.0009197775507345796, 0.001150024007074535, 0.0017254146514460444, 0.0013234115904197097, 0.0012281454401090741, 7.415492291329429e-05, 0.0013755167601630092, 0.00014325451047625393, 1.3001153092773166e-05, 0.00016539220814593136, 0.00016391382087022066, 0.0005152214434929192], "target_probs": 0.9251960515975952}}




Minimal simplified tokens:

['def write_edgelist(', 'G', 'path', 'comments', 'delimiter', 'data', 'encoding', 'line', 'in', 'delimiter', 'delimiter', 'data', 'line', 'path', 'line', 'encoding']
