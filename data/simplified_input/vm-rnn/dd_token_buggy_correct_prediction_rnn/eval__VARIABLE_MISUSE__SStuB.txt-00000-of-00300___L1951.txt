
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "=", "_ErrorFormatter", "(", "None", ",", "None", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"], "error_location": [26], "repair_targets": [2, 31, 41], "repair_candidates": [9, 22, 2, 31, 41, 20, 26, 35], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "nlloyd/SubliminalCollaborator/libs/twisted/test/test_strerror.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1951, "results": {"model": "rnn", "prob": {"loc": [[0.0003679859801195562, 4.311562218362042e-09, 3.33899627946721e-08, 4.585044843796737e-11, 6.986399653241548e-11, 8.108300697529103e-09, 2.218746075755007e-09, 2.4337174497901515e-09, 4.5325481146107904e-09, 1.0806855854639252e-08, 8.231585968410116e-10, 4.793482943910021e-09, 7.242352273451047e-10, 1.7288676046334217e-09, 1.3185738056975538e-09, 5.525732316158383e-09, 1.5559726840308485e-09, 3.4054741249178733e-09, 5.806000125119226e-10, 2.145615018989133e-09, 3.9220551251162306e-09, 1.3157692990706238e-10, 9.860223144642077e-07, 1.8994371353553419e-10, 8.847471644202187e-10, 6.2854308424675764e-09, 0.9995434880256653, 1.2311194268477266e-06, 8.578136601045117e-08, 6.2810205925245555e-09, 3.6848650797338678e-09, 3.919340088032186e-07, 4.0967333692076835e-11, 8.918751848163708e-10, 8.42274305856705e-10, 3.849337008432485e-05, 9.3489471719721e-10, 1.4063813580378337e-07, 4.796169572607312e-10, 2.1073633116319712e-10, 3.056175867932609e-10, 4.713585803983733e-05, 2.1811615014133423e-10, 9.965692715496743e-10, 4.4510545249565325e-10, 8.67007299287792e-11]], "pointer": [[0.0, 0.0, 0.9999239444732666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.619580482132733e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.5974589738762006e-05, 0.0, 8.563370670344739e-07, 0.0, 0.0, 0.0, 1.8089468767357175e-06, 0.0, 0.0, 0.0, 0.0, 2.7106179345537385e-07, 0.0, 0.0, 0.0, 2.6305579581276106e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 7.076220072121941e-07, 0.0, 0.0, 0.0, 0.0]], "target": [0.9999249577522278]}, "loss": [0.0004567056894302368, 7.504506356781349e-05], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:09:28.803741", "n_pass": [1, 1, 1], "n_token": 46, "loss": [0.0004567056894302368, 7.504506356781349e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "=", "_ErrorFormatter", "(", "None", ",", "None", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2, 31, 41], "repair_candidates": [9, 22, 2, 31, 41, 20, 26, 35]}}
{"prediction": {"error_location": 0.9995434880256653, "repair_targets": [0.9999239444732666, 2.7106179345537385e-07, 7.076220072121941e-07], "repair_candidates": [0.9999239444732666, 2.619580482132733e-05, 4.5974589738762006e-05, 8.563370670344739e-07, 1.8089468767357175e-06, 2.7106179345537385e-07, 2.6305579581276106e-07, 7.076220072121941e-07], "target_probs": 0.9999249577522278}}


{"result": {"time": "2021-02-11 10:09:28.874591", "n_pass": [22, 2, 2], "n_token": 40, "loss": [0.00014518637908622622, 3.1412142561748624e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", ",", "None", ")", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2, 25, 35], "repair_candidates": [9, 16, 2, 25, 35, 14, 20, 29]}}
{"prediction": {"error_location": 0.9998546838760376, "repair_targets": [0.9999674558639526, 3.237798011923587e-07, 8.417276262662199e-07], "repair_candidates": [0.9999674558639526, 2.361014594498556e-06, 2.577884697529953e-05, 1.202952375933819e-06, 1.8009969835475204e-06, 3.237798011923587e-07, 2.8373042937346327e-07, 8.417276262662199e-07], "target_probs": 0.9999685883522034}}


{"result": {"time": "2021-02-11 10:09:28.948046", "n_pass": [44, 3, 3], "n_token": 37, "loss": [0.00022659118985757232, 4.667152461479418e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "os", ".", "strerror", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2, 22, 32], "repair_candidates": [9, 13, 2, 22, 32, 11, 17, 26]}}
{"prediction": {"error_location": 0.9997734427452087, "repair_targets": [0.9999516010284424, 4.455801274616533e-07, 1.3103924629831454e-06], "repair_candidates": [0.9999516010284424, 2.1967611246509477e-05, 1.8190299670095555e-05, 3.6133646972302813e-06, 2.4974276584543986e-06, 4.455801274616533e-07, 4.299051852285629e-07, 1.3103924629831454e-06], "target_probs": 0.9999533295631409}}


{"result": {"time": "2021-02-11 10:09:29.081288", "n_pass": [50, 5, 4], "n_token": 34, "loss": [0.00027640812913887203, 3.343876596773043e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", ".", "probeErrorCode", ")", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2, 22, 29], "repair_candidates": [9, 13, 2, 22, 29, 11, 17, 26]}}
{"prediction": {"error_location": 0.9997236132621765, "repair_targets": [0.9999649524688721, 2.7982707706541987e-07, 1.311261257797014e-06], "repair_candidates": [0.9999649524688721, 1.6431011317763478e-05, 1.283144774788525e-05, 1.629743223929836e-06, 2.3598672669322696e-06, 2.7982707706541987e-07, 1.6517830658813182e-07, 1.311261257797014e-06], "target_probs": 0.999966561794281}}


{"result": {"time": "2021-02-11 10:09:29.146353", "n_pass": [52, 6, 5], "n_token": 31, "loss": [0.0005430892342701554, 4.4168016756884754e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def test_strerrorFormatting(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 17, "repair_targets": [2, 22, 29], "repair_candidates": [9, 13, 2, 22, 29, 11, 17, 26]}}
{"prediction": {"error_location": 0.9994571805000305, "repair_targets": [0.9999533891677856, 1.642604132712222e-07, 2.2759249986847863e-06], "repair_candidates": [0.9999533891677856, 2.154803769371938e-05, 1.7549282347317785e-05, 2.5808926693571266e-06, 2.3717414023849415e-06, 1.642604132712222e-07, 1.1456918258545556e-07, 2.2759249986847863e-06], "target_probs": 0.9999558329582214}}


{"result": {"time": "2021-02-11 10:09:29.210114", "n_pass": [53, 7, 6], "n_token": 29, "loss": [0.0349254310131073, 0.20259806513786316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 15, "repair_targets": [0, 20, 27], "repair_candidates": [7, 11, 0, 20, 27, 9, 15, 24]}}
{"prediction": {"error_location": 0.9656773209571838, "repair_targets": [0.8096303343772888, 0.00035526292049326, 0.006620808504521847], "repair_candidates": [0.8096303343772888, 0.11372611671686172, 0.03672485798597336, 0.026344384998083115, 0.006284700706601143, 0.00035526292049326, 0.00031356659019365907, 0.006620808504521847], "target_probs": 0.8166064023971558}}


{"result": {"time": "2021-02-11 10:09:29.272785", "n_pass": [55, 8, 7], "n_token": 26, "loss": [0.01718253456056118, 0.20146296918392181], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "'\\n        L{_ErrorFormatter.formatError} should use L{os.strerror} to format\\n        error messages if it is constructed without any better mechanism.\\n        '", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 12, "repair_targets": [0, 17, 24], "repair_candidates": [4, 8, 0, 17, 24, 6, 12, 21]}}
{"prediction": {"error_location": 0.9829643368721008, "repair_targets": [0.8090230822563171, 0.00038427652907557786, 0.008126476779580116], "repair_candidates": [0.8090230822563171, 0.08530870825052261, 0.041267167776823044, 0.047420043498277664, 0.008009848184883595, 0.00038427652907557786, 0.0004604103451129049, 0.008126476779580116], "target_probs": 0.8175338506698608}}


{"result": {"time": "2021-02-11 10:09:29.399875", "n_pass": [83, 10, 8], "n_token": 25, "loss": [0.08122331649065018, 0.15971706807613373], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "#NEWLINE#", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 11, "repair_targets": [0, 16, 23], "repair_candidates": [3, 7, 0, 16, 23, 5, 11, 20]}}
{"prediction": {"error_location": 0.921987771987915, "repair_targets": [0.8422451019287109, 0.00029312874539755285, 0.009846678003668785], "repair_candidates": [0.8422451019287109, 0.06857199966907501, 0.04300202056765556, 0.029271656647324562, 0.006484967190772295, 0.00029312874539755285, 0.00028441048925742507, 0.009846678003668785], "target_probs": 0.8523849248886108}}


{"result": {"time": "2021-02-11 10:09:29.461385", "n_pass": [84, 11, 9], "n_token": 24, "loss": [0.04852941259741783, 0.4467574656009674], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "formatter", "#NEWLINE#", "message", "=", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 10, "repair_targets": [0, 15, 22], "repair_candidates": [2, 6, 0, 15, 22, 4, 10, 19]}}
{"prediction": {"error_location": 0.9526293277740479, "repair_targets": [0.6342138051986694, 0.00019255436200182885, 0.0052926503121852875], "repair_candidates": [0.6342138051986694, 0.3178924322128296, 0.02727493830025196, 0.011272755451500416, 0.0036887426394969225, 0.00019255436200182885, 0.00017209278303198516, 0.0052926503121852875], "target_probs": 0.6396990418434143}}


{"result": {"time": "2021-02-11 10:09:29.582865", "n_pass": [87, 13, 10], "n_token": 23, "loss": [0.022274313494563103, 0.3003574013710022], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "formatter", "#NEWLINE#", "message", "formatter", ".", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 9, "repair_targets": [0, 14, 21], "repair_candidates": [2, 5, 0, 14, 21, 4, 9, 18]}}
{"prediction": {"error_location": 0.9779720306396484, "repair_targets": [0.735245406627655, 0.00027797542861662805, 0.005030103959143162], "repair_candidates": [0.735245406627655, 0.22233673930168152, 0.020218458026647568, 0.004239312373101711, 0.012141057290136814, 0.00027797542861662805, 0.0005110356723889709, 0.005030103959143162], "target_probs": 0.7405534982681274}}


{"result": {"time": "2021-02-11 10:09:29.643062", "n_pass": [89, 14, 11], "n_token": 22, "loss": [0.1291467398405075, 0.30393698811531067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "formatter", "#NEWLINE#", "message", "formatter", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [0, 13, 20], "repair_candidates": [2, 5, 0, 13, 20, 4, 8, 17]}}
{"prediction": {"error_location": 0.8788449764251709, "repair_targets": [0.7272841334342957, 0.0003802081919275224, 0.010243026539683342], "repair_candidates": [0.7272841334342957, 0.2109053134918213, 0.02878066897392273, 0.00981417391449213, 0.01188709493726492, 0.0003802081919275224, 0.0007054183515720069, 0.010243026539683342], "target_probs": 0.737907350063324}}


{"result": {"time": "2021-02-11 10:09:29.825173", "n_pass": [94, 17, 12], "n_token": 20, "loss": [0.17414097487926483, 0.3694112300872803], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ")", "formatter", "#NEWLINE#", "message", "formatter", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 8, "repair_targets": [0, 13, 18], "repair_candidates": [2, 5, 0, 13, 18, 4, 8, 15]}}
{"prediction": {"error_location": 0.8401784300804138, "repair_targets": [0.6560086011886597, 0.004100020043551922, 0.03103252686560154], "repair_candidates": [0.6560086011886597, 0.2499168962240219, 0.03555910661816597, 0.013012373819947243, 0.008542046882212162, 0.004100020043551922, 0.0018284264951944351, 0.03103252686560154], "target_probs": 0.6911411285400391}}


{"result": {"time": "2021-02-11 10:09:29.942781", "n_pass": [99, 19, 13], "n_token": 19, "loss": [0.13310566544532776, 0.5714460611343384], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "formatter", "#NEWLINE#", "message", "formatter", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 7, "repair_targets": [0, 12, 17], "repair_candidates": [1, 4, 0, 12, 17, 3, 7, 14]}}
{"prediction": {"error_location": 0.875372588634491, "repair_targets": [0.544718325138092, 0.002721562283113599, 0.017268365249037743], "repair_candidates": [0.544718325138092, 0.3337787091732025, 0.07990220189094543, 0.017285313457250595, 0.0034128811676055193, 0.002721562283113599, 0.0009126712684519589, 0.017268365249037743], "target_probs": 0.5647082328796387}}


{"result": {"time": "2021-02-11 10:09:30.001088", "n_pass": [101, 20, 14], "n_token": 18, "loss": [0.1970466524362564, 0.6921085715293884], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "formatter", "message", "formatter", "formatError", "(", "message", ".", "probeErrorCode", ")", "#NEWLINE#", "self", "(", "message", ",", "(", "self", "."]}}
{"position": {"error_location": 6, "repair_targets": [0, 11, 16], "repair_candidates": [1, 3, 0, 11, 16, 2, 6, 13]}}
{"prediction": {"error_location": 0.8211523294448853, "repair_targets": [0.46371233463287354, 0.005160221830010414, 0.03164704516530037], "repair_candidates": [0.46371233463287354, 0.2707878649234772, 0.16587205231189728, 0.0545918233692646, 0.007320028729736805, 0.005160221830010414, 0.0009086248464882374, 0.03164704516530037], "target_probs": 0.5005195736885071}}




Minimal simplified tokens:

['self', 'formatter', 'message', 'formatter', 'formatError', '(', 'message', '.', 'probeErrorCode', ')', '#NEWLINE#', 'self', '(', 'message', ',', '(', 'self', '.']
