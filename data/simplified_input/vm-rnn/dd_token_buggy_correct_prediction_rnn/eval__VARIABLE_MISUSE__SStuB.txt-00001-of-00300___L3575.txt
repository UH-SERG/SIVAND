
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def create_runner(", "self", ",", "gen", ")", ":", "#NEWLINE#", "#INDENT#", "' Creates :class:`Runner` instance\\n\\n        :param gen: generator which returns async tasks\\n\\n        Can be overridden if you want custom ``Runner``\\n        '", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"], "error_location": [14], "repair_targets": [2], "repair_candidates": [4, 14, 16, 2], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "reclosedev/async_gui/async_gui/engine.py", "license": "bsd-2-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 3575, "results": {"model": "rnn", "prob": {"loc": [[0.4001566171646118, 1.1251388514210703e-06, 2.4131321652021143e-07, 2.664694909171317e-09, 3.364249323567492e-07, 1.4219845745344628e-08, 3.3345586292199414e-09, 6.688468090487731e-08, 5.808769998338903e-08, 6.9979022576660554e-09, 1.123745363429407e-07, 3.896117206636518e-08, 4.649747097573709e-06, 3.9093226433806194e-08, 0.4170708656311035, 8.925129009185184e-07, 0.18275666236877441, 8.310052180604544e-06]], "pointer": [[0.0, 0.0, 0.9053471684455872, 0.0, 0.09259556233882904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016786043997853994, 0.0, 0.00037876106216572225, 0.0]], "target": [0.9053471684455872]}, "loss": [0.8744991421699524, 0.09943679720163345], "acc": [0.0, 1.0, 1.0, 1.0]}}


Trace of simplified code(s):

{"result": {"time": "2021-02-11 10:44:25.394920", "n_pass": [1, 1, 1], "n_token": 18, "loss": [0.8744991421699524, 0.09943679720163345], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def create_runner(", "self", ",", "gen", ")", ":", "#NEWLINE#", "#INDENT#", "' Creates :class:`Runner` instance\\n\\n        :param gen: generator which returns async tasks\\n\\n        Can be overridden if you want custom ``Runner``\\n        '", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 14, "repair_targets": [2], "repair_candidates": [4, 14, 16, 2]}}
{"prediction": {"error_location": 0.4170708656311035, "repair_targets": [0.9053471684455872], "repair_candidates": [0.9053471684455872, 0.09259556233882904, 0.0016786043997853994, 0.00037876106216572225], "target_probs": 0.9053471684455872}}


{"result": {"time": "2021-02-11 10:44:25.562038", "n_pass": [23, 4, 2], "n_token": 16, "loss": [0.18503618240356445, 0.020928973332047462], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def create_runner(", "self", ",", "gen", ")", "#INDENT#", "' Creates :class:`Runner` instance\\n\\n        :param gen: generator which returns async tasks\\n\\n        Can be overridden if you want custom ``Runner``\\n        '", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 12, "repair_targets": [2], "repair_candidates": [4, 12, 14, 2]}}
{"prediction": {"error_location": 0.8310742378234863, "repair_targets": [0.9792885184288025], "repair_candidates": [0.9792885184288025, 0.019979670643806458, 0.0006216116598807275, 0.00011020551028195769], "target_probs": 0.9792885184288025}}


{"result": {"time": "2021-02-11 10:44:25.617129", "n_pass": [24, 5, 3], "n_token": 14, "loss": [0.542524516582489, 0.630884051322937], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def create_runner(", "self", ",", "gen", ")", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [4, 10, 12, 2]}}
{"prediction": {"error_location": 0.581278920173645, "repair_targets": [0.5321211814880371], "repair_candidates": [0.5321211814880371, 0.45854437351226807, 0.008265337906777859, 0.0010691200150176883], "target_probs": 0.5321211814880371}}


{"result": {"time": "2021-02-11 10:44:26.000658", "n_pass": [49, 12, 4], "n_token": 13, "loss": [0.5396938920021057, 0.33740606904029846], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def create_runner(", "self", ",", "gen", ")", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 9, "repair_targets": [1], "repair_candidates": [3, 9, 11, 1]}}
{"prediction": {"error_location": 0.5829266905784607, "repair_targets": [0.7136189937591553], "repair_candidates": [0.7136189937591553, 0.2855498790740967, 0.0006281739333644509, 0.0002029912284342572], "target_probs": 0.7136189937591553}}


{"result": {"time": "2021-02-11 10:44:26.112550", "n_pass": [53, 14, 5], "n_token": 12, "loss": [0.6999942064285278, 0.19906310737133026], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def create_runner(", "self", ",", "gen", "#NEWLINE#", "return", "Runner", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 8, "repair_targets": [1], "repair_candidates": [3, 8, 10, 1]}}
{"prediction": {"error_location": 0.49658820033073425, "repair_targets": [0.8194981813430786], "repair_candidates": [0.8194981813430786, 0.17836688458919525, 0.0017592962831258774, 0.00037564936792477965], "target_probs": 0.8194981813430786}}


{"result": {"time": "2021-02-11 10:44:26.271795", "n_pass": [56, 17, 6], "n_token": 11, "loss": [0.9877986311912537, 0.08392906934022903], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def create_runner(", "self", ",", "gen", "#NEWLINE#", "return", "(", "gen", ",", "gen", ")"]}}
{"position": {"error_location": 7, "repair_targets": [1], "repair_candidates": [3, 7, 9, 1]}}
{"prediction": {"error_location": 0.3723955750465393, "repair_targets": [0.919496476650238], "repair_candidates": [0.919496476650238, 0.07772696763277054, 0.0019021680345758796, 0.0008743036305531859], "target_probs": 0.919496476650238}}




Minimal simplified tokens:

['def create_runner(', 'self', ',', 'gen', '#NEWLINE#', 'return', '(', 'gen', ',', 'gen', ')']
