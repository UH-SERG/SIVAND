
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'COUNT'", ")", ",", "count", "]", ")", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"], "error_location": [57], "repair_targets": [14, 74], "repair_candidates": [2, 80, 10, 33, 50, 57, 14, 74, 23, 40, 64, 87, 6, 28, 4, 26], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Alephbet/gimel/vendor/redis/client.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00017-of-00300", "js_count": 58164, "results": {"model": "rnn", "prob": {"loc": [[0.1733165681362152, 3.0461012556770584e-07, 1.163083709343482e-07, 2.23486136263773e-08, 1.626250565323062e-07, 1.4214662780176468e-09, 4.29227391407494e-08, 1.0710488052012579e-09, 6.050421319514498e-08, 2.468650617259982e-09, 5.659086355080944e-07, 5.9427369691889e-09, 7.760005082957377e-09, 9.464911521206432e-09, 9.477579254735247e-08, 4.01556121687463e-09, 1.7522031825478734e-08, 9.46962330772294e-09, 1.4254933233814882e-08, 9.836006853447543e-08, 1.960548878798818e-08, 4.471259629212909e-08, 1.7008414232577707e-08, 6.168097144154672e-08, 5.358814973988046e-07, 4.036564496345818e-05, 0.010292812250554562, 4.473509118696484e-09, 0.7185860276222229, 3.1465212941839127e-06, 1.9183135009370744e-06, 3.805689985370009e-08, 1.6579750763412449e-06, 0.031953707337379456, 1.5042223822092637e-07, 7.118787834770046e-07, 6.792911335651297e-07, 3.143292417462362e-07, 4.028921978260769e-07, 6.779369954301728e-08, 1.0788774034153903e-06, 3.6541763392961e-08, 2.0235356501530077e-08, 5.36834932063357e-07, 7.990034873728291e-07, 3.0073417178755335e-07, 1.1618553941161736e-07, 2.123611375282053e-05, 1.418213059878326e-06, 8.308488119723734e-09, 0.016330763697624207, 2.285871687490726e-07, 7.057083450945356e-08, 1.7546572905757785e-07, 1.5357392840087414e-05, 8.202986734318074e-09, 1.9857307620441134e-07, 0.04259731248021126, 4.238312456550375e-08, 3.382425575182424e-07, 3.0992384836281417e-07, 1.263105673388054e-07, 2.777927647912293e-07, 4.0932487621603286e-08, 1.7852991049949196e-06, 2.001036847332216e-08, 3.6886714127604137e-08, 5.879347213522124e-07, 7.390701739495853e-07, 3.7903632232882956e-07, 5.479482823034232e-08, 4.142237230553292e-06, 2.3974939722393174e-06, 2.2349945538735483e-07, 0.00680206622928381, 5.45979389698914e-07, 7.097634835417921e-08, 1.1319447423829843e-07, 1.2712118291346997e-07, 1.9828080510819746e-08, 3.969297495132196e-07, 3.7637541971946575e-09, 2.0203705730637012e-07, 3.339506093880118e-08, 7.657269520677801e-07, 1.8089441766733216e-07, 4.038034546738345e-07, 1.3032879905949812e-05, 4.818988585952866e-08]], "pointer": [[0.0, 0.0, 0.0001367380318697542, 0.0, 0.2846567928791046, 0.0, 0.025915106758475304, 0.0, 0.0, 0.0, 0.10977724939584732, 0.0, 0.0, 0.0, 0.5569513440132141, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014950732700526714, 0.0, 0.0, 0.0033537244889885187, 0.0, 0.0006742295809090137, 0.0, 0.0, 0.0, 0.0, 0.002009896794334054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011177632259204984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.866818274720572e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011757668107748032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002508646866772324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3389280613628216e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0013460268964991e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.59220830432605e-05, 0.0]], "target": [0.5569747090339661]}, "loss": [3.1559643745422363, 0.5852354764938354], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [28]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 13:29:20.101660", "n_pass": [1, 1, 1], "n_token": 89, "loss": [0.3304700255393982, 0.5852354764938354], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'COUNT'", ")", ",", "count", "]", ")", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 74], "repair_candidates": [2, 80, 10, 33, 50, 57, 14, 74, 23, 40, 64, 87, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.7185860276222229, "repair_targets": [0.5569513440132141, 2.3389280613628216e-05], "repair_candidates": [0.0001367380318697542, 0.2846567928791046, 0.025915106758475304, 0.10977724939584732, 0.5569513440132141, 0.014950732700526714, 0.0033537244889885187, 0.0006742295809090137, 0.002009896794334054, 0.0011177632259204984, 1.866818274720572e-05, 0.00011757668107748032, 0.0002508646866772324, 2.3389280613628216e-05, 1.0013460268964991e-05, 3.59220830432605e-05], "target_probs": 0.5569747090339661}}


{"result": {"time": "2021-02-21 13:29:20.292989", "n_pass": [52, 3, 2], "n_token": 83, "loss": [0.2493698000907898, 0.623479962348938], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", ".", "extend", "(", "[", "Token", "(", "'COUNT'", ")", ",", "count", "]", ")", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 68], "repair_candidates": [2, 74, 10, 33, 44, 51, 14, 68, 23, 40, 58, 81, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.779291570186615, "repair_targets": [0.5360488891601562, 2.6779815016197972e-05], "repair_candidates": [0.0001270552456844598, 0.31740108132362366, 0.02614990994334221, 0.10003503412008286, 0.5360488891601562, 0.015184747986495495, 0.0028972048312425613, 0.0005457710940390825, 0.0008823020616546273, 0.00020838179625570774, 7.42166957934387e-05, 0.00014391109289135784, 0.00022329895000439137, 2.6779815016197972e-05, 1.0450786248838995e-05, 4.0973100112751126e-05], "target_probs": 0.5360756516456604}}


{"result": {"time": "2021-02-21 13:29:20.387364", "n_pass": [56, 4, 3], "n_token": 77, "loss": [0.4152125418186188, 0.6841769814491272], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 62], "repair_candidates": [2, 68, 10, 33, 44, 51, 14, 62, 23, 40, 58, 75, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.6601998805999756, "repair_targets": [0.5041823983192444, 0.0003228916903026402], "repair_candidates": [0.00011151413491461426, 0.34843072295188904, 0.026917006820440292, 0.09612711519002914, 0.5041823983192444, 0.018246237188577652, 0.0027231911662966013, 0.0007452486315742135, 0.0011833696626126766, 0.00021112538524903357, 7.116711640264839e-05, 0.0001816641743062064, 0.0004580685927066952, 0.0003228916903026402, 5.732522822654573e-06, 8.250995597336441e-05], "target_probs": 0.5045052766799927}}


{"result": {"time": "2021-02-21 13:29:20.655338", "n_pass": [101, 7, 4], "n_token": 74, "loss": [0.2143513262271881, 0.6874157190322876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 62], "repair_candidates": [2, 65, 10, 33, 44, 51, 14, 62, 23, 40, 58, 72, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.8070647120475769, "repair_targets": [0.5003252625465393, 0.0025486669037491083], "repair_candidates": [0.00011511886259540915, 0.3457033932209015, 0.025781838223338127, 0.10370156913995743, 0.5003252625465393, 0.01730494759976864, 0.0020137710962444544, 0.0004963423707522452, 0.0008487195009365678, 0.00019451435946393758, 5.3275947720976546e-05, 0.00018188852118328214, 0.0006298504304140806, 0.0025486669037491083, 1.5266377886291593e-05, 8.560472633689642e-05], "target_probs": 0.502873957157135}}


{"result": {"time": "2021-02-21 13:29:21.360515", "n_pass": [118, 15, 5], "n_token": 71, "loss": [0.20858235657215118, 0.6737462282180786], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "'MATCH'", ")", ",", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 59], "repair_candidates": [2, 62, 10, 33, 41, 48, 14, 59, 23, 37, 55, 69, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.8117342591285706, "repair_targets": [0.5066606998443604, 0.0031344639137387276], "repair_candidates": [9.274567128159106e-05, 0.33794698119163513, 0.02386046200990677, 0.10403207689523697, 0.5066606998443604, 0.02078458108007908, 0.0015172447310760617, 0.0003863548336084932, 0.00029268188518472016, 0.00021473964443430305, 5.868555308552459e-05, 0.00021340853709261864, 0.0007042942452244461, 0.0031344639137387276, 1.4197044038155582e-05, 8.634218102088198e-05], "target_probs": 0.5097951889038086}}


{"result": {"time": "2021-02-21 13:29:21.446968", "n_pass": [120, 16, 6], "n_token": 68, "loss": [0.22240875661373138, 0.5785939693450928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 56], "repair_candidates": [2, 59, 10, 33, 38, 45, 14, 56, 23, 37, 52, 66, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.800588071346283, "repair_targets": [0.5576557517051697, 0.0030304035171866417], "repair_candidates": [7.67703604651615e-05, 0.27316680550575256, 0.0195344015955925, 0.11862537264823914, 0.5576557517051697, 0.023721739649772644, 0.0012742187827825546, 0.00036799503141082823, 0.0001256533432751894, 0.001243209233507514, 3.0913019145373255e-05, 0.00035551461041904986, 0.000710270251147449, 0.0030304035171866417, 1.463283297198359e-05, 6.634474266320467e-05], "target_probs": 0.5606861710548401}}


{"result": {"time": "2021-02-21 13:29:21.532054", "n_pass": [122, 17, 7], "n_token": 65, "loss": [0.3981177806854248, 0.5625564455986023], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 53], "repair_candidates": [2, 56, 10, 33, 38, 42, 14, 53, 23, 37, 49, 63, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.6715830564498901, "repair_targets": [0.5677598118782043, 0.001990880351513624], "repair_candidates": [0.00012816351954825222, 0.23365820944309235, 0.021182162687182426, 0.15430253744125366, 0.5677598118782043, 0.01658233441412449, 0.0011442869435995817, 0.0003892437962349504, 0.00015574571443721652, 0.0005379074718803167, 0.00014010198356118053, 7.459623884642497e-05, 0.0018793982453644276, 0.001990880351513624, 1.5225288734654896e-05, 5.945703014731407e-05], "target_probs": 0.5697506666183472}}


{"result": {"time": "2021-02-21 13:29:21.615450", "n_pass": [124, 18, 8], "n_token": 62, "loss": [0.33070531487464905, 0.6044546961784363], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "'COUNT'", ")", ",", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 50], "repair_candidates": [2, 53, 10, 33, 38, 42, 14, 50, 23, 37, 46, 60, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.7184168696403503, "repair_targets": [0.544603168964386, 0.0017691267421469092], "repair_candidates": [0.00013544347893912345, 0.2716238498687744, 0.02457372657954693, 0.13553309440612793, 0.544603168964386, 0.015776125714182854, 0.001185717643238604, 0.00038615253288298845, 0.00011828912101918831, 0.0004533585743047297, 7.289896166184917e-05, 5.880459866602905e-05, 0.0036250532139092684, 0.0017691267421469092, 2.321728243259713e-05, 6.198606570251286e-05], "target_probs": 0.5463722944259644}}


{"result": {"time": "2021-02-21 13:29:21.697238", "n_pass": [126, 19, 9], "n_token": 59, "loss": [0.3567396402359009, 0.5953785181045532], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "(", "'HSCAN'", ",", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 47], "repair_candidates": [2, 50, 10, 33, 38, 42, 14, 47, 23, 37, 46, 57, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.6999546885490417, "repair_targets": [0.5490018129348755, 0.002352021634578705], "repair_candidates": [0.00010069280688185245, 0.2515600323677063, 0.022231191396713257, 0.13328886032104492, 0.5490018129348755, 0.013152453117072582, 0.0011519945692270994, 0.00036977394483983517, 0.00013482697249855846, 0.0008202088065445423, 0.00020863875397481024, 4.3513395212357864e-05, 0.0254669152200222, 0.002352021634578705, 7.040111086098477e-05, 4.6685552661074325e-05], "target_probs": 0.5513538122177124}}


{"result": {"time": "2021-02-21 13:29:21.780555", "n_pass": [129, 20, 10], "n_token": 56, "loss": [0.2824401259422302, 0.6087782382965088], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 28, "repair_targets": [14, 47], "repair_candidates": [2, 50, 10, 33, 38, 42, 14, 47, 23, 37, 46, 54, 6, 28, 4, 26]}}
{"prediction": {"error_location": 0.7539417147636414, "repair_targets": [0.5436840057373047, 0.0003311001055408269], "repair_candidates": [0.00015204270312096924, 0.28228843212127686, 0.02091784030199051, 0.13383643329143524, 0.5436840057373047, 0.012569581158459187, 0.0014997100224718451, 0.0003152571152895689, 0.00023943136329762638, 0.0010797273134812713, 0.00021410093177109957, 6.162185309221968e-05, 0.002767272060737014, 0.0003311001055408269, 3.187726906617172e-05, 1.1512866876728367e-05], "target_probs": 0.544015109539032}}


{"result": {"time": "2021-02-21 13:29:22.092137", "n_pass": [139, 24, 11], "n_token": 53, "loss": [0.5463570952415466, 0.6733028292655945], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "#INDENT#", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 25, "repair_targets": [14, 44], "repair_candidates": [2, 47, 10, 30, 35, 39, 14, 44, 20, 34, 43, 51, 6, 25, 4, 23]}}
{"prediction": {"error_location": 0.5790553689002991, "repair_targets": [0.509577751159668, 0.00044349534437060356], "repair_candidates": [0.00016737275291234255, 0.32254406809806824, 0.024639476090669632, 0.11881966143846512, 0.509577751159668, 0.014095677062869072, 0.0024051195941865444, 0.00035462441155686975, 0.00024017134273890406, 0.002222005743533373, 0.00040784062002785504, 8.134195377351716e-05, 0.003938766196370125, 0.00044349534437060356, 4.707584957941435e-05, 1.5493324099224992e-05], "target_probs": 0.5100212693214417}}


{"result": {"time": "2021-02-21 13:29:22.634356", "n_pass": [201, 31, 12], "n_token": 52, "loss": [0.5610434412956238, 0.660443127155304], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 43], "repair_candidates": [2, 46, 10, 29, 34, 38, 14, 43, 19, 33, 42, 50, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.5706133246421814, "repair_targets": [0.5160786509513855, 0.0005437353975139558], "repair_candidates": [0.00015770991740282625, 0.31988924741744995, 0.01981940306723118, 0.11238646507263184, 0.5160786509513855, 0.020049430429935455, 0.002803535433486104, 0.00044178569805808365, 0.0002610837109386921, 0.002131732413545251, 0.00042922323336824775, 8.663278276799247e-05, 0.004853015765547752, 0.0005437353975139558, 4.979307414032519e-05, 1.858001633081585e-05], "target_probs": 0.5166223645210266}}


{"result": {"time": "2021-02-21 13:29:23.254343", "n_pass": [213, 39, 13], "n_token": 50, "loss": [0.5917800068855286, 0.5622938871383667], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", ")", "(", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 41], "repair_candidates": [2, 44, 10, 29, 32, 36, 14, 41, 19, 31, 40, 48, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.5533414483070374, "repair_targets": [0.5695523619651794, 0.00034789531491696835], "repair_candidates": [0.00020924233831465244, 0.25906774401664734, 0.02036578580737114, 0.12202036380767822, 0.5695523619651794, 0.019273312762379646, 0.0029523493722081184, 0.0006047657225281, 0.0012257639318704605, 0.0010303619783371687, 7.15568385203369e-05, 8.796220936346799e-05, 0.0031169720459729433, 0.00034789531491696835, 5.379427602747455e-05, 1.9771567167481408e-05], "target_probs": 0.5699002742767334}}


{"result": {"time": "2021-02-21 13:29:23.329922", "n_pass": [216, 40, 14], "n_token": 48, "loss": [0.16096024215221405, 0.499409943819046], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "#NEWLINE#", "#INDENT#", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 39], "repair_candidates": [2, 42, 10, 29, 32, 34, 14, 39, 19, 31, 38, 46, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.8513259887695312, "repair_targets": [0.6066421270370483, 0.00024651995045132935], "repair_candidates": [0.00011899073433596641, 0.2517962157726288, 0.014425141736865044, 0.10266391187906265, 0.6066421270370483, 0.016504913568496704, 0.004316240549087524, 0.0004073590680491179, 0.00017271227261517197, 0.000911533017642796, 2.0824703824473545e-05, 7.383603951893747e-05, 0.0016651717014610767, 0.00024651995045132935, 2.216456960013602e-05, 1.2370735021249857e-05], "target_probs": 0.6068886518478394}}


{"result": {"time": "2021-02-21 13:29:23.404747", "n_pass": [218, 41, 15], "n_token": 46, "loss": [0.6656070351600647, 0.5154532194137573], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "]", ")", "self", ".", "execute_command", "*", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 37], "repair_candidates": [2, 40, 10, 29, 32, 34, 14, 37, 19, 31, 36, 44, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.5139614343643188, "repair_targets": [0.5972185730934143, 1.1239438208576757e-05], "repair_candidates": [0.00014082546113058925, 0.2637101411819458, 0.020991019904613495, 0.09766354411840439, 0.5972185730934143, 0.01309579610824585, 0.005522320047020912, 0.0007859559264034033, 0.00023340221378020942, 0.00042330255382694304, 1.7870224837679416e-05, 0.00011545209417818114, 6.203149041539291e-06, 1.1239438208576757e-05, 5.721526758861728e-05, 7.2097514021152165e-06], "target_probs": 0.5972298383712769}}


{"result": {"time": "2021-02-21 13:29:23.551373", "n_pass": [222, 43, 16], "n_token": 44, "loss": [0.5841783285140991, 0.6852680444717407], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "]", ")", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 37], "repair_candidates": [2, 40, 10, 29, 32, 34, 14, 37, 19, 31, 36, 42, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.557563841342926, "repair_targets": [0.5039306282997131, 2.452532498864457e-05], "repair_candidates": [0.00012337595399003476, 0.38143134117126465, 0.03357169032096863, 0.06337311118841171, 0.5039306282997131, 0.004821893759071827, 0.008703465573489666, 0.0011457852087914944, 5.319684714777395e-05, 0.0009175962186418474, 1.0480785931576975e-05, 6.887040217407048e-05, 3.580959310056642e-05, 2.452532498864457e-05, 0.0002839214284904301, 0.0015043971361592412], "target_probs": 0.5039551258087158}}


{"result": {"time": "2021-02-21 13:29:25.013894", "n_pass": [256, 63, 17], "n_token": 42, "loss": [0.3243033289909363, 0.670868456363678], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", "0", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 24, "repair_targets": [14, 37], "repair_candidates": [2, 38, 10, 29, 32, 34, 14, 37, 19, 31, 36, 40, 6, 24, 4, 22]}}
{"prediction": {"error_location": 0.7230308055877686, "repair_targets": [0.5108294486999512, 0.0004349566006567329], "repair_candidates": [0.00011120232375105843, 0.35218989849090576, 0.03020394966006279, 0.08736780285835266, 0.5108294486999512, 0.0060462336987257, 0.009690779261291027, 0.0008885955903679132, 5.9243171563139185e-05, 0.0006178604671731591, 4.84559723190614e-06, 7.105751137714833e-05, 1.5985615391400643e-05, 0.0004349566006567329, 0.000541123328730464, 0.0009270298760384321], "target_probs": 0.5112643837928772}}


{"result": {"time": "2021-02-21 13:29:25.446872", "n_pass": [267, 69, 18], "n_token": 41, "loss": [0.714722216129303, 0.6762569546699524], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", "=", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 23, "repair_targets": [13, 36], "repair_candidates": [2, 37, 9, 28, 31, 33, 13, 36, 18, 30, 35, 39, 6, 23, 4, 21]}}
{"prediction": {"error_location": 0.4893280267715454, "repair_targets": [0.5078005790710449, 0.0007162709953263402], "repair_candidates": [0.00011574202653719112, 0.3184770345687866, 0.031489208340644836, 0.12035759538412094, 0.5078005790710449, 0.00558838527649641, 0.011020088568329811, 0.0013564781984314322, 7.682549767196178e-05, 0.0009406288154423237, 6.451355147873983e-06, 0.00012609711848199368, 2.2376669221557677e-05, 0.0007162709953263402, 0.0009010370704345405, 0.0010052586439996958], "target_probs": 0.5085168480873108}}


{"result": {"time": "2021-02-21 13:29:25.590016", "n_pass": [270, 71, 19], "n_token": 40, "loss": [0.20017820596694946, 0.6353490948677063], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", "None", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 22, "repair_targets": [12, 35], "repair_candidates": [2, 36, 9, 27, 30, 32, 12, 35, 17, 29, 34, 38, 6, 22, 4, 20]}}
{"prediction": {"error_location": 0.8185848593711853, "repair_targets": [0.5293785929679871, 0.0003719498054124415], "repair_candidates": [0.0001227391039719805, 0.38017404079437256, 0.02929368056356907, 0.04176820442080498, 0.5293785929679871, 0.0037628989666700363, 0.011755187064409256, 0.0011400695657357574, 3.981541522080079e-05, 0.0005907691665925086, 6.061715794203337e-06, 6.713961920468137e-05, 1.7043130355887115e-05, 0.0003719498054124415, 0.00041904993122443557, 0.0010927626863121986], "target_probs": 0.5297505259513855}}


{"result": {"time": "2021-02-21 13:29:25.661643", "n_pass": [271, 72, 20], "n_token": 39, "loss": [0.4560645818710327, 0.5686278939247131], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "#NEWLINE#", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 21, "repair_targets": [11, 34], "repair_candidates": [2, 35, 9, 26, 29, 31, 11, 34, 16, 28, 33, 37, 6, 21, 4, 19]}}
{"prediction": {"error_location": 0.6337728500366211, "repair_targets": [0.565500020980835, 0.000801917165517807], "repair_candidates": [9.281696839025244e-05, 0.2875078618526459, 0.018024304881691933, 0.10760214924812317, 0.565500020980835, 0.0071532027795910835, 0.008507541380822659, 0.0013008513487875462, 9.86551312962547e-05, 0.0014638403663411736, 1.096688811230706e-05, 0.0001272806985070929, 2.25957282964373e-05, 0.000801917165517807, 0.0008401338709518313, 0.0009458987624384463], "target_probs": 0.5663019418716431}}


{"result": {"time": "2021-02-21 13:29:26.860539", "n_pass": [319, 89, 21], "n_token": 38, "loss": [0.985021710395813, 0.507652997970581], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "is not", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 21, "repair_targets": [11, 33], "repair_candidates": [2, 34, 9, 25, 28, 30, 11, 33, 16, 27, 32, 36, 6, 21, 4, 19]}}
{"prediction": {"error_location": 0.37343108654022217, "repair_targets": [0.6013669967651367, 0.0005396271008066833], "repair_candidates": [7.210603507701308e-05, 0.28641143441200256, 0.02247423306107521, 0.062899149954319, 0.6013669967651367, 0.002608616603538394, 0.019581416621804237, 0.0014100400730967522, 4.099081706954166e-05, 0.0006102085462771356, 5.889859039598377e-06, 0.00020051129104103893, 2.003051486099139e-05, 0.0005396271008066833, 0.0007623356650583446, 0.0009963423945009708], "target_probs": 0.6019065976142883}}


{"result": {"time": "2021-02-21 13:29:27.141609", "n_pass": [327, 93, 22], "n_token": 37, "loss": [0.5233603715896606, 0.40023115277290344], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", ".", "pieces", ")"]}}
{"position": {"error_location": 21, "repair_targets": [11, 32], "repair_candidates": [2, 33, 9, 25, 28, 30, 11, 32, 16, 27, 31, 35, 6, 21, 4, 19]}}
{"prediction": {"error_location": 0.5925260186195374, "repair_targets": [0.6677559614181519, 0.0024091803934425116], "repair_candidates": [5.9706391766667366e-05, 0.22225606441497803, 0.01005139946937561, 0.06426595151424408, 0.6677559614181519, 0.0033161696046590805, 0.02164895087480545, 0.001148347044363618, 6.227945414138958e-05, 0.0010344086913391948, 1.4922627087798901e-05, 0.0010306359035894275, 9.07950452528894e-05, 0.0024091803934425116, 0.0013797562569379807, 0.003475471632555127], "target_probs": 0.6701651215553284}}


{"result": {"time": "2021-02-21 13:29:27.211435", "n_pass": [331, 94, 23], "n_token": 36, "loss": [0.24256695806980133, 0.5352240800857544], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces", ")"]}}
{"position": {"error_location": 21, "repair_targets": [11, 32], "repair_candidates": [2, 33, 9, 25, 28, 30, 11, 32, 16, 27, 31, 34, 6, 21, 4, 19]}}
{"prediction": {"error_location": 0.7846112847328186, "repair_targets": [0.5737602114677429, 0.011777893640100956], "repair_candidates": [5.211342067923397e-05, 0.33354559540748596, 0.009614908136427402, 0.034879159182310104, 0.5737602114677429, 0.004803056828677654, 0.02912297286093235, 0.0009988892124965787, 4.374021227704361e-05, 0.00015154153516050428, 6.04456772634876e-06, 0.0005391260492615402, 0.00029841650393791497, 0.011777893640100956, 0.00033259604242630303, 7.363524491665885e-05], "target_probs": 0.5855380892753601}}


{"result": {"time": "2021-02-21 13:29:27.281052", "n_pass": [333, 95, 24], "n_token": 35, "loss": [0.24888604879379272, 0.5630014538764954], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", ",", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 21, "repair_targets": [11, 32], "repair_candidates": [2, 33, 9, 25, 28, 30, 11, 32, 16, 27, 31, 34, 6, 21, 4, 19]}}
{"prediction": {"error_location": 0.7796687483787537, "repair_targets": [0.5612295866012573, 0.008267603814601898], "repair_candidates": [6.222051160875708e-05, 0.35405921936035156, 0.010571088641881943, 0.03761881962418556, 0.5612295866012573, 0.0038849422708153725, 0.02209680899977684, 0.0009371213964186609, 4.388465094962157e-05, 0.0001392210106132552, 6.395212949428242e-06, 0.0008063751738518476, 0.00021760950039606541, 0.008267603814601898, 4.2845298594329506e-05, 1.623493699298706e-05], "target_probs": 0.5694971680641174}}


{"result": {"time": "2021-02-21 13:29:27.487471", "n_pass": [337, 98, 25], "n_token": 34, "loss": [0.7629010081291199, 0.19977977871894836], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "=", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 20, "repair_targets": [10, 31], "repair_candidates": [2, 32, 8, 24, 27, 29, 10, 31, 15, 26, 30, 33, 5, 20, 3, 18]}}
{"prediction": {"error_location": 0.4663117527961731, "repair_targets": [0.8033570051193237, 0.015554052777588367], "repair_candidates": [0.000512845057528466, 0.03844642639160156, 0.008633273653686047, 0.08797384798526764, 0.8033570051193237, 0.00814503151923418, 0.033914435654878616, 0.0016631827456876636, 8.4089653682895e-05, 0.0002912190684583038, 1.3375906746659894e-05, 0.0009966641664505005, 0.0003313239139970392, 0.015554052777588367, 6.346245936583728e-05, 1.9779603462666273e-05], "target_probs": 0.818911075592041}}


{"result": {"time": "2021-02-21 13:29:27.622481", "n_pass": [341, 100, 26], "n_token": 33, "loss": [0.34090539813041687, 0.44082877039909363], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", ",", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 19, "repair_targets": [9, 30], "repair_candidates": [2, 31, 7, 23, 26, 28, 9, 30, 14, 25, 29, 32, 5, 19, 3, 17]}}
{"prediction": {"error_location": 0.7111262083053589, "repair_targets": [0.6325662732124329, 0.010936644859611988], "repair_candidates": [0.0010136519558727741, 0.04580668359994888, 0.0095239682123065, 0.25190645456314087, 0.6325662732124329, 0.004551230929791927, 0.0415385365486145, 0.001218089833855629, 3.688227297971025e-05, 0.00013208527525421232, 8.001973583304789e-06, 0.0005298705655150115, 0.0001677492109593004, 0.010936644859611988, 4.670748967328109e-05, 1.720832551654894e-05], "target_probs": 0.6435028910636902}}


{"result": {"time": "2021-02-21 13:29:27.690485", "n_pass": [342, 101, 27], "n_token": 32, "loss": [0.6179459691047668, 0.238515242934227], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", ",", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 18, "repair_targets": [8, 29], "repair_candidates": [2, 30, 6, 22, 25, 27, 8, 29, 13, 24, 28, 31, 5, 18, 3, 16]}}
{"prediction": {"error_location": 0.5390504598617554, "repair_targets": [0.7698601484298706, 0.017936548218131065], "repair_candidates": [0.0007285538595169783, 0.06962471455335617, 0.006140998564660549, 0.041162896901369095, 0.7698601484298706, 0.007870735600590706, 0.08229121565818787, 0.0025992244482040405, 5.512519783223979e-05, 0.00017571424541529268, 1.209010497404961e-05, 0.001061184681020677, 0.00038552426849491894, 0.017936548218131065, 6.94589180056937e-05, 2.5779409043025225e-05], "target_probs": 0.787796676158905}}


{"result": {"time": "2021-02-21 13:29:27.757047", "n_pass": [344, 102, 28], "n_token": 31, "loss": [0.12226246297359467, 0.051292866468429565], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "None", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 17, "repair_targets": [7, 28], "repair_candidates": [2, 29, 6, 21, 24, 26, 7, 28, 12, 23, 27, 30, 5, 17, 3, 15]}}
{"prediction": {"error_location": 0.8849160671234131, "repair_targets": [0.9487339854240417, 0.0012664245441555977], "repair_candidates": [0.00010214416397502646, 0.00961516983807087, 0.0015025780303403735, 0.027290767058730125, 0.9487339854240417, 0.0006516347057186067, 0.010441926307976246, 0.00023211563529912382, 4.939550308336038e-06, 1.628767313377466e-05, 1.1368302921255236e-06, 9.718920773593709e-05, 3.319714232929982e-05, 0.0012664245441555977, 7.465252110705478e-06, 3.0905343919584993e-06], "target_probs": 0.9500004053115845}}


{"result": {"time": "2021-02-21 13:29:27.891593", "n_pass": [347, 104, 29], "n_token": 30, "loss": [0.14086602628231049, 0.09246677160263062], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "#NEWLINE#", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 16, "repair_targets": [7, 27], "repair_candidates": [2, 28, 6, 20, 23, 25, 7, 27, 11, 22, 26, 29, 5, 16, 3, 14]}}
{"prediction": {"error_location": 0.8686057925224304, "repair_targets": [0.9099119901657104, 0.001767487614415586], "repair_candidates": [9.54407369135879e-05, 0.009372462518513203, 0.0013893990544602275, 0.06751491874456406, 0.9099119901657104, 0.0005208734073676169, 0.009001048281788826, 0.00019997691561002284, 7.727246156719048e-06, 2.3975213480298407e-05, 1.570560584696068e-06, 0.00013293833762872964, 4.695077223004773e-05, 0.001767487614415586, 9.171616511594038e-06, 3.952197403123137e-06], "target_probs": 0.9116795063018799}}


{"result": {"time": "2021-02-21 13:29:28.022950", "n_pass": [349, 106, 30], "n_token": 29, "loss": [0.1227172315120697, 0.05563516169786453], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "=", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 15, "repair_targets": [7, 26], "repair_candidates": [2, 27, 6, 19, 22, 24, 7, 26, 10, 21, 25, 28, 5, 15, 3, 13]}}
{"prediction": {"error_location": 0.8845136165618896, "repair_targets": [0.9457268118858337, 0.00015737545618321747], "repair_candidates": [2.5659201128291897e-05, 0.003176612313836813, 0.0011373781599104404, 0.04359030723571777, 0.9457268118858337, 3.64995576092042e-05, 0.006020308937877417, 0.00010294962703483179, 9.98997734313889e-07, 4.0969257497636136e-06, 2.9351190278248396e-07, 1.1398369679227471e-05, 4.794361757376464e-06, 0.00015737545618321747, 3.5938394375989446e-06, 9.193655046146887e-07], "target_probs": 0.9458841681480408}}


{"result": {"time": "2021-02-21 13:29:28.087972", "n_pass": [351, 107, 31], "n_token": 28, "loss": [0.11445681750774384, 0.25109872221946716], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "[", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 14, "repair_targets": [7, 25], "repair_candidates": [2, 26, 6, 18, 21, 23, 7, 25, 10, 20, 24, 27, 5, 14, 3, 12]}}
{"prediction": {"error_location": 0.891850471496582, "repair_targets": [0.7775929570198059, 0.000352621718775481], "repair_candidates": [0.00021859290427528322, 0.013765172101557255, 0.004319350700825453, 0.041038837283849716, 0.7775929570198059, 4.044645538670011e-05, 0.16219009459018707, 0.0004227180907037109, 3.4393324312986806e-06, 1.0101706720888615e-05, 7.393481382678146e-07, 2.423465411993675e-05, 1.0373957593401428e-05, 0.000352621718775481, 8.30823955766391e-06, 1.9374163002794376e-06], "target_probs": 0.7779455780982971}}


{"result": {"time": "2021-02-21 13:29:28.152761", "n_pass": [352, 108, 32], "n_token": 27, "loss": [0.3001803755760193, 0.037964459508657455], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "]", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 13, "repair_targets": [7, 24], "repair_candidates": [2, 25, 6, 17, 20, 22, 7, 24, 10, 19, 23, 26, 5, 13, 3, 11]}}
{"prediction": {"error_location": 0.7406846284866333, "repair_targets": [0.9625588655471802, 0.0001883010263554752], "repair_candidates": [3.949526944779791e-05, 0.003509559202939272, 0.0009589081164449453, 0.029646875336766243, 0.9625588655471802, 0.0003763939894270152, 0.0020951710175722837, 0.000536344014108181, 5.46856199434842e-06, 2.5497582100797445e-05, 2.2348037873598514e-06, 3.40355618391186e-05, 1.838666867115535e-05, 0.0001883010263554752, 3.203774213034194e-06, 1.1822894521174021e-06], "target_probs": 0.9627471566200256}}


{"result": {"time": "2021-02-21 13:29:28.284424", "n_pass": [356, 110, 33], "n_token": 26, "loss": [0.6241786479949951, 0.026204543188214302], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "if", "(", "match", "#INDENT#", "pieces", "match", "]", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 13, "repair_targets": [7, 23], "repair_candidates": [2, 24, 6, 16, 19, 21, 7, 23, 10, 18, 22, 25, 5, 13, 3, 11]}}
{"prediction": {"error_location": 0.5357011556625366, "repair_targets": [0.9739395976066589, 0.00019621373212430626], "repair_candidates": [2.4318991563632153e-05, 0.0022756101097911596, 0.00046689168084412813, 0.021452514454722404, 0.9739395976066589, 0.00018629601981956512, 0.001369933015666902, 4.769193765241653e-05, 4.159814125159755e-06, 7.344136520259781e-06, 6.542443884427485e-07, 1.8501370504964143e-05, 8.18053104012506e-06, 0.00019621373212430626, 1.500493794992508e-06, 6.932448286534054e-07], "target_probs": 0.9741358160972595}}


{"result": {"time": "2021-02-21 13:29:28.538210", "n_pass": [363, 114, 34], "n_token": 25, "loss": [0.9140996336936951, 0.03799064829945564], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", ",", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "if", "(", "match", "#INDENT#", "pieces", "match", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 13, "repair_targets": [7, 22], "repair_candidates": [2, 23, 6, 16, 19, 20, 7, 22, 10, 18, 21, 24, 5, 13, 3, 11]}}
{"prediction": {"error_location": 0.4008773863315582, "repair_targets": [0.9623402953147888, 0.0003816190001089126], "repair_candidates": [1.906563193188049e-05, 0.00208399910479784, 0.0006137209129519761, 0.03328099846839905, 0.9623402953147888, 0.00014489567547570914, 0.0010733285453170538, 1.7047526853275485e-05, 6.666097760898992e-06, 4.310672011342831e-06, 2.7641947326628724e-06, 9.700779628474265e-06, 1.800421523512341e-05, 0.0003816190001089126, 2.487707661202876e-06, 9.290973821407533e-07], "target_probs": 0.9627219438552856}}


{"result": {"time": "2021-02-21 13:29:28.728636", "n_pass": [373, 117, 35], "n_token": 24, "loss": [0.42225849628448486, 0.013682200573384762], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def hscan(", "self", "name", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "if", "(", "match", "#INDENT#", "pieces", "match", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 12, "repair_targets": [6, 21], "repair_candidates": [2, 22, 5, 15, 18, 19, 6, 21, 9, 17, 20, 23, 4, 12, 3, 10]}}
{"prediction": {"error_location": 0.6555644869804382, "repair_targets": [0.9861249327659607, 0.00028602470410987735], "repair_candidates": [1.3173947991163004e-05, 0.000714621040970087, 0.0008181388257071376, 0.010188235901296139, 0.9861249327659607, 0.00016512892034370452, 0.001607670565135777, 2.3038019207888283e-05, 6.539956302731298e-06, 4.532264483714243e-06, 3.844234925054479e-06, 1.6644728020764887e-05, 2.421955650788732e-05, 0.00028602470410987735, 2.205868440796621e-06, 1.0945395843009464e-06], "target_probs": 0.9864109754562378}}


{"result": {"time": "2021-02-21 13:29:29.168697", "n_pass": [394, 124, 36], "n_token": 23, "loss": [0.6843488812446594, 0.023129479959607124], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def hscan(", "self", "name", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "if", "(", "match", "#INDENT#", "pieces", "match", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 11, "repair_targets": [5, 20], "repair_candidates": [1, 21, 4, 14, 17, 18, 5, 20, 8, 16, 19, 22, 3, 11, 2, 9]}}
{"prediction": {"error_location": 0.5044184923171997, "repair_targets": [0.9763162732124329, 0.0008196933194994926], "repair_candidates": [0.00013169455633033067, 0.0014543087454512715, 0.00416977284476161, 0.014068308286368847, 0.9763162732124329, 0.00014636728155892342, 0.0027365318965166807, 5.390618753153831e-05, 1.8094719052896835e-05, 5.45095645065885e-06, 3.490062681521522e-06, 1.950841397047043e-05, 4.511261431616731e-05, 0.0008196933194994926, 9.63488309935201e-06, 1.8391039020571043e-06], "target_probs": 0.977135956287384}}


{"result": {"time": "2021-02-21 13:29:29.230824", "n_pass": [395, 125, 37], "n_token": 22, "loss": [0.6237720847129822, 0.0895824283361435], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "name", "cursor", "match", "count", "=", "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", "pieces", "name", ",", "cursor", "if", "(", "match", "#INDENT#", "pieces", "match", "match", "pieces", "count", "self", "pieces"]}}
{"position": {"error_location": 10, "repair_targets": [4, 19], "repair_candidates": [0, 20, 3, 13, 16, 17, 4, 19, 7, 15, 18, 21, 2, 10, 1, 8]}}
{"prediction": {"error_location": 0.5359191298484802, "repair_targets": [0.91255122423172, 0.0017616600962355733], "repair_candidates": [0.005012703128159046, 0.0073810662142932415, 0.005952493753284216, 0.0554521307349205, 0.91255122423172, 0.0007550498703494668, 0.010754060000181198, 0.0002116284449584782, 3.8884634705027565e-05, 1.55055367940804e-05, 9.67220330494456e-06, 2.975051938847173e-05, 5.8424659073352814e-05, 0.0017616600962355733, 1.2231265827722382e-05, 3.461089136180817e-06], "target_probs": 0.9143128991127014}}




Minimal simplified tokens:

['self', 'name', 'cursor', 'match', 'count', '=', "'\\n        Incrementally return key/value slices in a hash. Also return a cursor\\n        indicating the scan position.\\n\\n        ``match`` allows for filtering the keys by pattern\\n\\n        ``count`` allows for hint the minimum number of returns\\n        '", 'pieces', 'name', ',', 'cursor', 'if', '(', 'match', '#INDENT#', 'pieces', 'match', 'match', 'pieces', 'count', 'self', 'pieces']
