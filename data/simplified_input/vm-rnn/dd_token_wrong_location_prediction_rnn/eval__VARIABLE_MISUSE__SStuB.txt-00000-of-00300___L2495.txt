
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"], "error_location": [27], "repair_targets": [7], "repair_candidates": [7, 16, 23, 31, 9, 20, 27, 5, 18], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "ContinuumIO/ashiba/enaml/enaml/core/enaml_compiler.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 2495, "results": {"model": "rnn", "prob": {"loc": [[0.2080267369747162, 1.171388885268243e-05, 2.2177714527060743e-06, 4.4700496459881833e-07, 1.5477555903586904e-09, 4.3504402924554597e-07, 3.9842332211215137e-10, 5.00909109746317e-08, 1.576760766397456e-08, 6.515331847367634e-07, 1.413595995813921e-08, 2.7190461437953672e-08, 1.3043800208834e-06, 1.1587280823732726e-07, 8.459123250759149e-07, 1.794868325077914e-07, 1.2830116702389205e-06, 3.1525246413366403e-08, 7.873218237364199e-06, 1.1450592865003273e-05, 0.5558173656463623, 1.277463184123917e-07, 8.022708186672389e-08, 4.905376954411622e-06, 4.186385993421027e-08, 5.935299327575194e-07, 1.6907941244426183e-05, 0.23605763912200928, 4.6224158722907305e-07, 1.6472615982365824e-07, 5.6784475788163036e-08, 3.161812128382735e-05, 1.75112369049657e-08, 4.66362166662293e-07, 1.4503577006053092e-07, 1.068205577325898e-07, 4.354190252797707e-08, 3.95722645407659e-06]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0008273684070445597, 0.0, 0.5107424259185791, 0.0, 0.0006077563157305121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48399683833122253, 0.0, 0.003707592375576496, 0.0, 3.882433884427883e-05, 0.0, 0.0, 7.676211680518463e-06, 0.0, 0.0, 0.0, 4.262137008481659e-05, 0.0, 0.0, 0.0, 2.889213828893844e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.5107424259185791]}, "loss": [1.4436793327331543, 0.6718899011611938], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [20]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:30:05.658608", "n_pass": [1, 1, 1], "n_token": 38, "loss": [0.587315559387207, 0.6718899011611938], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"]}}
{"position": {"error_location": 20, "repair_targets": [7], "repair_candidates": [7, 16, 23, 31, 9, 20, 27, 5, 18]}}
{"prediction": {"error_location": 0.5558173656463623, "repair_targets": [0.5107424259185791], "repair_candidates": [0.0008273684070445597, 0.5107424259185791, 0.0006077563157305121, 0.48399683833122253, 0.003707592375576496, 3.882433884427883e-05, 7.676211680518463e-06, 4.262137008481659e-05, 2.889213828893844e-05], "target_probs": 0.5107424259185791}}


{"result": {"time": "2021-02-21 11:30:05.725030", "n_pass": [20, 2, 2], "n_token": 34, "loss": [0.431022971868515, 0.5091912746429443], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"]}}
{"position": {"error_location": 16, "repair_targets": [3], "repair_candidates": [3, 12, 19, 27, 5, 16, 23, 1, 14]}}
{"prediction": {"error_location": 0.6498438715934753, "repair_targets": [0.6009814143180847], "repair_candidates": [0.0025753069203346968, 0.6009814143180847, 0.001538252574391663, 0.38925901055336, 0.005483417306095362, 4.0056715079117566e-05, 1.3153437066648621e-05, 6.459140422521159e-05, 4.4859501940663904e-05], "target_probs": 0.6009814143180847}}


{"result": {"time": "2021-02-21 11:30:05.855078", "n_pass": [45, 4, 3], "n_token": 32, "loss": [0.5291762948036194, 0.5924364328384399], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", ".", "stack", ".", "pop", "(", ")"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [3, 10, 17, 25, 5, 14, 21, 1, 12]}}
{"prediction": {"error_location": 0.5890900492668152, "repair_targets": [0.5529783368110657], "repair_candidates": [0.00562684191390872, 0.5529783368110657, 0.0014536200324073434, 0.43462109565734863, 0.005120564717799425, 5.835136471432634e-05, 1.0992959687428083e-05, 8.393121242988855e-05, 4.6373679651878774e-05], "target_probs": 0.5529783368110657}}


{"result": {"time": "2021-02-21 11:30:06.044795", "n_pass": [54, 7, 4], "n_token": 29, "loss": [0.7981318235397339, 0.4682424068450928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "#NEWLINE#", "#INDENT#", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "pop", "(", ")"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [3, 10, 17, 25, 5, 14, 21, 1, 12]}}
{"prediction": {"error_location": 0.450169175863266, "repair_targets": [0.6261017322540283], "repair_candidates": [0.015021847561001778, 0.6261017322540283, 0.010196533054113388, 0.33781683444976807, 0.007462626323103905, 0.0004944978281855583, 0.00011801165237557143, 0.0005044346326030791, 0.002283366397023201], "target_probs": 0.6261017322540283}}


{"result": {"time": "2021-02-21 11:30:06.170930", "n_pass": [59, 9, 5], "n_token": 27, "loss": [1.163975477218628, 0.23179732263088226], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "' The main entry point of the EnamlDefCompiler.\\n\\n        This compiler compiles the given EnamlDef node into a dictionary\\n        which can be used to build out the component tree at run time.\\n\\n        Parameters\\n        ----------\\n        node : EnamlDef\\n            The EnamlDef node to compile.\\n\\n        filename : string\\n            The string filename to use for the enamldef.\\n\\n        '", "#NEWLINE#", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "pop", "(", ")"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [3, 8, 15, 23, 5, 12, 19, 1, 10]}}
{"prediction": {"error_location": 0.31224238872528076, "repair_targets": [0.7931068539619446], "repair_candidates": [0.012572417967021465, 0.7931068539619446, 0.025830838829278946, 0.15913228690624237, 0.005203853826969862, 0.0004357123689260334, 0.00013469487021211535, 0.0005312207504175603, 0.0030521880835294724], "target_probs": 0.7931068539619446}}


{"result": {"time": "2021-02-21 11:30:06.232131", "n_pass": [60, 10, 6], "n_token": 25, "loss": [1.0058351755142212, 0.09000664204359055], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler", "pop", "(", ")"]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 6, 13, 21, 5, 10, 17, 1, 8]}}
{"prediction": {"error_location": 0.3657390773296356, "repair_targets": [0.9139251112937927], "repair_candidates": [0.007891505025327206, 0.9139251112937927, 0.014899504370987415, 0.061579469591379166, 0.0008677787845954299, 3.131312769255601e-05, 3.2804706279421225e-05, 0.00013103762466926128, 0.0006414540112018585], "target_probs": 0.9139251112937927}}


{"result": {"time": "2021-02-21 11:30:06.291900", "n_pass": [67, 11, 7], "n_token": 22, "loss": [1.2159332036972046, 0.09860017150640488], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "=", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 10, "repair_targets": [3], "repair_candidates": [3, 6, 13, 21, 5, 10, 17, 1, 8]}}
{"prediction": {"error_location": 0.2964332401752472, "repair_targets": [0.9061049222946167], "repair_candidates": [0.0037216837517917156, 0.9061049222946167, 0.011495966464281082, 0.07728426903486252, 0.0010507026454433799, 2.3980233891052194e-05, 0.00015069743676576763, 0.00011103787255706266, 5.676470755133778e-05], "target_probs": 0.9061049222946167}}


{"result": {"time": "2021-02-21 11:30:06.530376", "n_pass": [102, 15, 8], "n_token": 21, "loss": [0.6885653138160706, 0.02268446609377861], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", ",", "node", ",", "filename", "compiler", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 9, "repair_targets": [3], "repair_candidates": [3, 6, 12, 20, 5, 9, 16, 1, 7]}}
{"prediction": {"error_location": 0.5022962093353271, "repair_targets": [0.9775708913803101], "repair_candidates": [0.018098320811986923, 0.9775708913803101, 0.0014614720130339265, 0.00016559610958211124, 0.0018118135631084442, 1.1277234989393037e-05, 0.00026001041987910867, 0.0005162489251233637, 0.00010445879161125049], "target_probs": 0.9775708913803101}}


{"result": {"time": "2021-02-21 11:30:06.940362", "n_pass": [115, 22, 9], "n_token": 20, "loss": [0.527735710144043, 0.008367580361664295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", ",", "filename", "compiler", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 8, "repair_targets": [2], "repair_candidates": [2, 5, 11, 19, 4, 8, 15, 1, 6]}}
{"prediction": {"error_location": 0.589939296245575, "repair_targets": [0.9916673302650452], "repair_candidates": [0.006727131083607674, 0.9916673302650452, 0.0005083653959445655, 6.930126983206719e-05, 0.0008610583608970046, 4.952640665578656e-06, 6.777005910407752e-05, 5.866911305929534e-05, 3.5600805858848616e-05], "target_probs": 0.9916673302650452}}


{"result": {"time": "2021-02-21 11:30:06.998269", "n_pass": [117, 23, 10], "n_token": 19, "loss": [0.725552499294281, 0.03727036714553833], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", ")", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 10, 18, 3, 7, 14, 1, 5]}}
{"prediction": {"error_location": 0.4840570390224457, "repair_targets": [0.9634156227111816], "repair_candidates": [0.025950349867343903, 0.9634156227111816, 0.006554918829351664, 0.0002142205776181072, 0.0029955857899039984, 3.2409810955869034e-05, 7.969151920406148e-05, 0.0006784731522202492, 7.878075120970607e-05], "target_probs": 0.9634156227111816}}


{"result": {"time": "2021-02-21 11:30:07.112504", "n_pass": [123, 25, 11], "n_token": 18, "loss": [1.1189583539962769, 0.02864006534218788], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", ".", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 17, 3, 7, 13, 1, 5]}}
{"prediction": {"error_location": 0.32661983370780945, "repair_targets": [0.9717661738395691], "repair_candidates": [0.02052890695631504, 0.9717661738395691, 0.005526373628526926, 0.00010487734107300639, 0.001623497810214758, 2.17025608435506e-05, 5.441099710878916e-05, 0.00031845271587371826, 5.569600034505129e-05], "target_probs": 0.9717661738395691}}


{"result": {"time": "2021-02-21 11:30:07.454716", "n_pass": [146, 31, 12], "n_token": 17, "loss": [0.8709025979042053, 0.02294771745800972], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "visit", "(", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 16, 3, 7, 12, 1, 5]}}
{"prediction": {"error_location": 0.4185735881328583, "repair_targets": [0.9773135781288147], "repair_candidates": [0.01621420495212078, 0.9773135781288147, 0.00419039698317647, 0.0001536653289804235, 0.0020726588554680347, 1.2827928003389388e-05, 1.0562627721810713e-05, 1.323910601058742e-05, 1.8822955098585226e-05], "target_probs": 0.9773135781288147}}


{"result": {"time": "2021-02-21 11:30:07.510756", "n_pass": [147, 32, 13], "n_token": 16, "loss": [0.6458703279495239, 0.01731318235397339], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "visit", "filename", ")", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 15, 3, 7, 11, 1, 5]}}
{"prediction": {"error_location": 0.5242061018943787, "repair_targets": [0.9828358292579651], "repair_candidates": [0.012361603789031506, 0.9828358292579651, 0.0030549399089068174, 0.0002144267491530627, 0.001518557663075626, 5.0870207815023605e-06, 3.2313801057171077e-06, 4.003039521194296e-06, 2.2777226149628405e-06], "target_probs": 0.9828358292579651}}


{"result": {"time": "2021-02-21 11:30:07.566859", "n_pass": [149, 33, 14], "n_token": 15, "loss": [0.22028905153274536, 0.017978563904762268], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "visit", "filename", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 14, 3, 7, 11, 1, 5]}}
{"prediction": {"error_location": 0.8022868037223816, "repair_targets": [0.9821820855140686], "repair_candidates": [0.013813233003020287, 0.9821820855140686, 0.002365770051255822, 0.00013377981667872518, 0.0014849972212687135, 6.6320840232947376e-06, 7.123246177798137e-06, 4.3493355406099e-06, 2.001475650104112e-06], "target_probs": 0.9821820855140686}}


{"result": {"time": "2021-02-21 11:30:07.900876", "n_pass": [163, 39, 15], "n_token": 14, "loss": [0.11379116028547287, 0.022085106000304222], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "filename", "#NEWLINE#", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 13, 3, 7, 10, 1, 5]}}
{"prediction": {"error_location": 0.8924443125724792, "repair_targets": [0.9781569838523865], "repair_candidates": [0.01687798649072647, 0.9781569838523865, 0.0033382850233465433, 4.121012898394838e-05, 0.0004966708365827799, 6.607582236028975e-06, 0.0008519554394297302, 0.0002205494383815676, 9.804828550841194e-06], "target_probs": 0.9781569838523865}}


{"result": {"time": "2021-02-21 11:30:07.955795", "n_pass": [165, 40, 16], "n_token": 13, "loss": [0.5831563472747803, 0.018551785498857498], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "filename", "return", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 12, 3, 7, 10, 1, 5]}}
{"prediction": {"error_location": 0.5581339597702026, "repair_targets": [0.9816192388534546], "repair_candidates": [0.01470209751278162, 0.9816192388534546, 0.003049831837415695, 2.5324812668259256e-05, 0.00041142883128486574, 5.6108201533788815e-06, 0.00012126812362112105, 6.314245547400787e-05, 2.163979161196039e-06], "target_probs": 0.9816192388534546}}


{"result": {"time": "2021-02-21 11:30:08.012575", "n_pass": [166, 41, 17], "n_token": 12, "loss": [0.29222872853279114, 0.019861601293087006], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def compile(", "cls", "node", "filename", "compiler", "cls", "(", "filename", "#NEWLINE#", "compiler", "filename", "compiler"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [2, 4, 9, 11, 3, 7, 10, 1, 5]}}
{"prediction": {"error_location": 0.7465978264808655, "repair_targets": [0.9803343415260315], "repair_candidates": [0.017077500000596046, 0.9803343415260315, 0.0016861334443092346, 2.9225519028841518e-05, 0.00032983117853291333, 6.178466264827875e-06, 0.00033610357786528766, 0.00012248581333551556, 7.824497151887044e-05], "target_probs": 0.9803343415260315}}




Minimal simplified tokens:

['def compile(', 'cls', 'node', 'filename', 'compiler', 'cls', '(', 'filename', '#NEWLINE#', 'compiler', 'filename', 'compiler']
