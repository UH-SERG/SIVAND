
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", ".", "registry", ".", "queryUtility", "(", "authorization", ".", "IAuthorizationPolicy", ")", "#NEWLINE#", "users_principals", "=", "effective_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"], "error_location": [32], "repair_targets": [6], "repair_candidates": [28, 46, 6, 4, 32, 44, 2, 17, 34, 8, 48, 15, 40], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "hypothesis/h/h/auth/util.py", "license": "bsd-2-clause", "note": "license: github_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00003-of-00300", "js_count": 12153, "results": {"model": "rnn", "prob": {"loc": [[0.0009711412712931633, 1.1159518864545248e-09, 1.2854846076493232e-09, 2.2846127767373048e-11, 2.4531856546161634e-09, 1.1567028446179961e-09, 1.2184248276980725e-08, 2.5664567693262086e-10, 1.4032491613136244e-08, 5.818383275180139e-11, 4.1664199867952334e-11, 1.1757455009586693e-09, 1.1959812307171802e-10, 1.0223390883856709e-10, 2.5528634761684543e-11, 2.673298249433742e-10, 1.2304139929142366e-09, 2.9348918850757855e-09, 1.9225163128133715e-11, 7.117664790889933e-11, 6.78637757101086e-10, 2.8827945586229475e-10, 9.11927200419882e-11, 8.447004802292213e-07, 1.8718528116412614e-10, 3.936511672186782e-10, 5.196743479984889e-09, 2.4240733864644426e-09, 1.1475977806929549e-10, 3.257727243521913e-08, 9.497743036490647e-08, 1.3387846387047375e-09, 0.14085574448108673, 1.7826238263296545e-08, 0.857635498046875, 3.136048292162741e-07, 4.1832556862964054e-10, 5.781636280843827e-10, 8.693761266442834e-10, 1.8048669503389903e-10, 4.012548870946375e-08, 2.8873728408207455e-10, 9.179588200680655e-10, 1.2027823181881558e-10, 0.00019864753994625062, 5.40754885314243e-10, 0.00012480020814109594, 1.0694351182394257e-08, 0.00021290073345880955, 2.038266888604312e-09, 1.0880527590018119e-09]], "pointer": [[0.0, 0.0, 0.0007472614524886012, 0.0, 0.001035691937431693, 0.0, 0.6060541272163391, 0.0, 0.17405244708061218, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15375211834907532, 0.0, 1.1059732969442848e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06308986246585846, 0.0, 0.0, 0.0, 0.00035444615059532225, 0.0, 1.824491482693702e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 5.296338258631295e-06, 0.0, 0.0, 0.0, 0.0007593074697069824, 0.0, 8.073099161265418e-05, 0.0, 4.929774149786681e-05, 0.0, 0.0]], "target": [0.6060541272163391]}, "loss": [1.9600189924240112, 0.5007859468460083], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [34]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:52:00.063842", "n_pass": [1, 1, 1], "n_token": 51, "loss": [0.15357623994350433, 0.5007859468460083], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", ".", "registry", ".", "queryUtility", "(", "authorization", ".", "IAuthorizationPolicy", ")", "#NEWLINE#", "users_principals", "=", "effective_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 34, "repair_targets": [6], "repair_candidates": [28, 46, 6, 4, 32, 44, 2, 17, 34, 8, 48, 15, 40]}}
{"prediction": {"error_location": 0.857635498046875, "repair_targets": [0.6060541272163391], "repair_candidates": [0.0007472614524886012, 0.001035691937431693, 0.6060541272163391, 0.17405244708061218, 0.15375211834907532, 1.1059732969442848e-06, 0.06308986246585846, 0.00035444615059532225, 1.824491482693702e-05, 5.296338258631295e-06, 0.0007593074697069824, 8.073099161265418e-05, 4.929774149786681e-05], "target_probs": 0.6060541272163391}}


{"result": {"time": "2021-02-21 11:52:00.137061", "n_pass": [23, 2, 2], "n_token": 45, "loss": [0.16095679998397827, 0.6561365127563477], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", ".", "IAuthorizationPolicy", ")", "#NEWLINE#", "users_principals", "=", "effective_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [6], "repair_candidates": [22, 40, 6, 4, 26, 38, 2, 17, 28, 8, 42, 15, 34]}}
{"prediction": {"error_location": 0.8513288497924805, "repair_targets": [0.5188520550727844], "repair_candidates": [0.0005115121020935476, 0.0006470140651799738, 0.5188520550727844, 0.13629689812660217, 0.2928675711154938, 9.999216672440525e-07, 0.0499454066157341, 0.0002740356430877, 1.2175058145658113e-05, 4.186370006209472e-06, 0.0004817127191927284, 6.187806138768792e-05, 4.455167436390184e-05], "target_probs": 0.5188520550727844}}


{"result": {"time": "2021-02-21 11:52:00.348155", "n_pass": [56, 5, 3], "n_token": 42, "loss": [0.10033199936151505, 0.3456684648990631], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", ".", "IAuthorizationPolicy", ")", "#NEWLINE#", "users_principals", "=", "effective_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 25, "repair_targets": [6], "repair_candidates": [19, 37, 6, 4, 23, 35, 2, 14, 25, 8, 39, 12, 31]}}
{"prediction": {"error_location": 0.9045370817184448, "repair_targets": [0.7077471017837524], "repair_candidates": [0.0006120995967648923, 0.0008748932159505785, 0.7077471017837524, 0.0027574619743973017, 0.2551182806491852, 1.6589972346992e-06, 0.03219541162252426, 0.00029398113838396966, 8.920404980017338e-06, 3.7146398881304776e-06, 0.00029771190020255744, 4.8013858759077266e-05, 4.065458779223263e-05], "target_probs": 0.7077471017837524}}


{"result": {"time": "2021-02-21 11:52:00.488046", "n_pass": [59, 7, 4], "n_token": 39, "loss": [0.26743242144584656, 0.5365241765975952], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "=", "effective_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 22, "repair_targets": [6], "repair_candidates": [16, 34, 6, 4, 20, 32, 2, 14, 22, 8, 36, 12, 28]}}
{"prediction": {"error_location": 0.7653420567512512, "repair_targets": [0.584777295589447], "repair_candidates": [0.0004735259572044015, 0.0010705641470849514, 0.584777295589447, 0.001413014717400074, 0.40912583470344543, 8.434281880909111e-06, 0.002467051614075899, 0.00010360694432165474, 2.6749929020297714e-05, 3.740613237823709e-06, 0.0004807675431948155, 3.0481016437988728e-05, 1.8950226149172522e-05], "target_probs": 0.584777295589447}}


{"result": {"time": "2021-02-21 11:52:00.690067", "n_pass": [99, 10, 5], "n_token": 37, "loss": [0.256159245967865, 0.5526034832000732], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "return", "bool", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [6], "repair_candidates": [16, 32, 6, 4, 18, 30, 2, 14, 20, 8, 34, 12, 26]}}
{"prediction": {"error_location": 0.7740187644958496, "repair_targets": [0.5754497051239014], "repair_candidates": [0.0006519421003758907, 0.0015054797986522317, 0.5754497051239014, 0.0012987556401640177, 0.4191831052303314, 8.860097295837477e-06, 4.2141204176004976e-05, 0.00027892697835341096, 9.5150331617333e-05, 9.027060514199547e-06, 0.001275290735065937, 0.0001320432056672871, 6.960391328902915e-05], "target_probs": 0.5754497051239014}}


{"result": {"time": "2021-02-21 11:52:00.823175", "n_pass": [103, 12, 6], "n_token": 35, "loss": [0.3141516447067261, 0.647063136100769], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", ",", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 20, "repair_targets": [6], "repair_candidates": [16, 30, 6, 4, 18, 28, 2, 14, 20, 8, 32, 12, 24]}}
{"prediction": {"error_location": 0.7304081320762634, "repair_targets": [0.5235812067985535], "repair_candidates": [0.0007607359439134598, 0.0017348797991871834, 0.5235812067985535, 0.0014373704325407743, 0.46876639127731323, 1.120619253924815e-05, 6.347977614495903e-05, 0.00044779933523386717, 0.00027197261806577444, 8.125314343487844e-05, 0.002402916317805648, 0.00027524467441253364, 0.00016551250882912427], "target_probs": 0.5235812067985535}}


{"result": {"time": "2021-02-21 11:52:01.155048", "n_pass": [113, 17, 7], "n_token": 34, "loss": [0.4780203700065613, 0.4316757619380951], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", ".", "permits", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 19, "repair_targets": [5], "repair_candidates": [15, 29, 5, 3, 17, 27, 2, 13, 19, 7, 31, 11, 23]}}
{"prediction": {"error_location": 0.6200096011161804, "repair_targets": [0.649419903755188], "repair_candidates": [0.0001620370167074725, 0.00015748223813716322, 0.649419903755188, 0.0008522215066477656, 0.3457629680633545, 1.5445268218172714e-05, 4.566686402540654e-05, 0.0005409836885519326, 0.0002569167991168797, 5.87647118663881e-05, 0.0017956612864509225, 0.0005900453543290496, 0.000341978418873623], "target_probs": 0.649419903755188}}


{"result": {"time": "2021-02-21 11:52:01.483894", "n_pass": [127, 22, 8], "n_token": 32, "loss": [0.3214133679866791, 0.46996596455574036], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def has_permission(", "request", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 19, "repair_targets": [5], "repair_candidates": [15, 27, 5, 3, 17, 25, 2, 13, 19, 7, 29, 11, 23]}}
{"prediction": {"error_location": 0.7251235246658325, "repair_targets": [0.6250235438346863], "repair_candidates": [0.00014982669381424785, 0.0001387426455039531, 0.6250235438346863, 0.0007148029981181026, 0.37200725078582764, 1.0199268217547797e-05, 4.188740786048584e-05, 0.0004618610837496817, 8.167780470103025e-05, 0.0002606853668112308, 0.0007341093150898814, 0.00025349712814204395, 0.00012191062705824152], "target_probs": 0.6250235438346863}}


{"result": {"time": "2021-02-21 11:52:01.612758", "n_pass": [132, 24, 9], "n_token": 31, "loss": [0.11414898186922073, 0.5369394421577454], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def has_permission(", "request", "context", ",", "userid", ",", "permission", "#INDENT#", "'\\n    Return True if userid has permission on context object.\\n\\n    Return True if the given userid has the given permission on the given\\n    context object, False otherwise.\\n\\n    For example:\\n\\n        if has_permission(request,\\n                          some_annotation,\\n                          \\'acct:philip@hypothes.is\\',\\n                          \\'read\\'):\\n            print \\'philip can read this annotation\\'\\n        else:\\n            print \"philip isn\\'t allowed to read this annotation\"\\n\\n    '", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4], "repair_candidates": [14, 26, 4, 2, 16, 24, 1, 12, 18, 6, 28, 10, 22]}}
{"prediction": {"error_location": 0.892125129699707, "repair_targets": [0.5845345258712769], "repair_candidates": [0.0005528337205760181, 0.00022867471852805465, 0.5845345258712769, 0.0003275536291766912, 0.4124365448951721, 6.7173295974498615e-06, 3.0364863050635904e-05, 0.000351773458532989, 6.062068496248685e-05, 0.0002657050499692559, 0.0008849836303852499, 0.00020472148025874048, 0.00011501052358653396], "target_probs": 0.5845345258712769}}


{"result": {"time": "2021-02-21 11:52:01.869704", "n_pass": [140, 28, 10], "n_token": 29, "loss": [0.012986958958208561, 0.6574053168296814], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def has_permission(", "request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [4], "repair_candidates": [12, 24, 4, 2, 14, 22, 1, 10, 16, 6, 26, 8, 20]}}
{"prediction": {"error_location": 0.987096905708313, "repair_targets": [0.5181941390037537], "repair_candidates": [0.0007302183657884598, 0.0002258688909932971, 0.5181941390037537, 0.024225637316703796, 0.4454931318759918, 0.00010649589239619672, 0.0003555697912815958, 0.0011196477571502328, 0.00013954915630165488, 0.0013556553749367595, 0.006038650404661894, 0.001397452550008893, 0.0006180452764965594], "target_probs": 0.5181941390037537}}


{"result": {"time": "2021-02-21 11:52:02.059381", "n_pass": [152, 31, 11], "n_token": 28, "loss": [0.042451296001672745, 0.31560200452804565], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission", ")", ")"]}}
{"position": {"error_location": 15, "repair_targets": [3], "repair_candidates": [11, 23, 3, 1, 13, 21, 0, 9, 15, 5, 25, 7, 19]}}
{"prediction": {"error_location": 0.9584372639656067, "repair_targets": [0.729349672794342], "repair_candidates": [0.009445572271943092, 0.0023294822312891483, 0.729349672794342, 0.018748901784420013, 0.22434334456920624, 0.0002669784298632294, 0.0003663511306513101, 0.003712651552632451, 0.0005996271502226591, 0.0009999105241149664, 0.006360608618706465, 0.002622005296871066, 0.0008548822952434421], "target_probs": 0.729349672794342}}


{"result": {"time": "2021-02-21 11:52:02.307834", "n_pass": [169, 35, 12], "n_token": 26, "loss": [0.04828726872801781, 0.6172730326652527], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "=", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 15, "repair_targets": [3], "repair_candidates": [11, 23, 3, 1, 13, 21, 0, 9, 15, 5, 25, 7, 19]}}
{"prediction": {"error_location": 0.9528599381446838, "repair_targets": [0.5394133925437927], "repair_candidates": [0.007535243406891823, 0.0016853605629876256, 0.5394133925437927, 0.015190749429166317, 0.4189130663871765, 0.00019898255413863808, 0.0002411780005786568, 0.006657524965703487, 0.0006045831250958145, 0.0009241555235348642, 0.008176129311323166, 0.0004205915902275592, 3.903990000253543e-05], "target_probs": 0.5394133925437927}}


{"result": {"time": "2021-02-21 11:52:02.615940", "n_pass": [208, 40, 13], "n_token": 25, "loss": [0.18248996138572693, 0.3048018515110016], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "#NEWLINE#", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 14, "repair_targets": [3], "repair_candidates": [10, 22, 3, 1, 12, 20, 0, 8, 14, 5, 24, 7, 18]}}
{"prediction": {"error_location": 0.8331931829452515, "repair_targets": [0.7372694611549377], "repair_candidates": [0.023371011018753052, 0.014005877077579498, 0.7372694611549377, 0.032646115869283676, 0.007097489666193724, 0.004373658448457718, 0.0021350947208702564, 0.14996613562107086, 0.004124040715396404, 0.0009857633849605918, 0.022842472419142723, 0.0010726142209023237, 0.00011022840772056952], "target_probs": 0.7372694611549377}}


{"result": {"time": "2021-02-21 11:52:02.676637", "n_pass": [209, 41, 14], "n_token": 24, "loss": [0.1539665013551712, 0.137232705950737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "(", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 13, "repair_targets": [3], "repair_candidates": [9, 21, 3, 1, 11, 19, 0, 8, 13, 5, 23, 7, 17]}}
{"prediction": {"error_location": 0.8573006391525269, "repair_targets": [0.8717673420906067], "repair_candidates": [0.03393431752920151, 0.023699667304754257, 0.8717673420906067, 0.04070144146680832, 0.005705106537789106, 0.0036799260415136814, 0.00150164810474962, 0.005915516056120396, 0.0006380865816026926, 0.0005313647561706603, 0.0099788848310709, 0.0017109124455600977, 0.0002358838974032551], "target_probs": 0.8717673420906067}}


{"result": {"time": "2021-02-21 11:52:02.737119", "n_pass": [211, 42, 15], "n_token": 23, "loss": [0.5339293479919434, 0.2663641571998596], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "(", "policy", "(", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [9, 20, 3, 1, 10, 18, 0, 8, 12, 5, 22, 7, 16]}}
{"prediction": {"error_location": 0.5862966775894165, "repair_targets": [0.7661600708961487], "repair_candidates": [0.05126441642642021, 0.0319192111492157, 0.7661600708961487, 0.059374552220106125, 0.008354920893907547, 0.013108296319842339, 0.0052078585140407085, 0.0007158173830248415, 0.003156377002596855, 0.0017783294897526503, 0.051783692091703415, 0.006415153853595257, 0.0007612311746925116], "target_probs": 0.7661600708961487}}


{"result": {"time": "2021-02-21 11:52:02.977729", "n_pass": [217, 46, 16], "n_token": 22, "loss": [0.7675396203994751, 0.28722885251045227], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "policy", "(", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [9, 19, 3, 1, 10, 17, 0, 8, 12, 5, 21, 7, 15]}}
{"prediction": {"error_location": 0.4641537070274353, "repair_targets": [0.7503399848937988], "repair_candidates": [0.055126022547483444, 0.03834827244281769, 0.7503399848937988, 0.0689997747540474, 0.014772942289710045, 0.018734684213995934, 0.006297440268099308, 0.001206701504997909, 0.007361527532339096, 0.0005450531607493758, 0.03639423847198486, 0.001615869696252048, 0.0002575144753791392], "target_probs": 0.7503399848937988}}


{"result": {"time": "2021-02-21 11:52:03.037153", "n_pass": [219, 47, 17], "n_token": 21, "loss": [0.8357610702514648, 0.29875731468200684], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "policy", "context", ",", "users_principals", ",", "permission"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [9, 18, 3, 1, 10, 16, 0, 8, 12, 5, 20, 7, 15]}}
{"prediction": {"error_location": 0.43354442715644836, "repair_targets": [0.7417393922805786], "repair_candidates": [0.06047523766756058, 0.04230103641748428, 0.7417393922805786, 0.07860488444566727, 0.0239214189350605, 0.018475249409675598, 0.009862914681434631, 0.0014069518074393272, 0.00798768550157547, 0.004571078810840845, 0.007888364605605602, 0.002400423865765333, 0.0003655006585177034], "target_probs": 0.7417393922805786}}


{"result": {"time": "2021-02-21 11:52:03.096137", "n_pass": [221, 48, 18], "n_token": 20, "loss": [1.0848113298416138, 0.27663084864616394], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", ",", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "policy", "context", "users_principals", ",", "permission"]}}
{"position": {"error_location": 12, "repair_targets": [3], "repair_candidates": [9, 17, 3, 1, 10, 16, 0, 8, 12, 5, 19, 7, 15]}}
{"prediction": {"error_location": 0.3379655182361603, "repair_targets": [0.7583343982696533], "repair_candidates": [0.06560797244310379, 0.037469327449798584, 0.7583343982696533, 0.07591959089040756, 0.020632589235901833, 0.009574421681463718, 0.013206603936851025, 0.001543719321489334, 0.009627270512282848, 0.0011729646939784288, 0.006225752178579569, 0.00034741946728900075, 0.0003380706475581974], "target_probs": 0.7583343982696533}}


{"result": {"time": "2021-02-21 11:52:03.214520", "n_pass": [227, 50, 19], "n_token": 19, "loss": [0.7044322490692139, 0.3942440450191498], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", "userid", ",", "permission", "#NEWLINE#", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "policy", "context", "users_principals", ",", "permission"]}}
{"position": {"error_location": 11, "repair_targets": [2], "repair_candidates": [8, 16, 2, 1, 9, 15, 0, 7, 11, 4, 18, 6, 14]}}
{"prediction": {"error_location": 0.49438920617103577, "repair_targets": [0.6741895079612732], "repair_candidates": [0.09296731650829315, 0.07977958768606186, 0.6741895079612732, 0.1213056817650795, 0.013087625615298748, 0.00628788024187088, 0.006885206792503595, 0.0007116761989891529, 0.0018690567230805755, 0.00046459014993160963, 0.0021923105232417583, 0.0001202392959385179, 0.00013928621774539351], "target_probs": 0.6741895079612732}}


{"result": {"time": "2021-02-21 11:52:03.329970", "n_pass": [231, 52, 20], "n_token": 18, "loss": [0.41581475734710693, 0.3467686176300049], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", "userid", ",", "permission", "policy", "request", "users_principals", "context", ",", "request", ")", "#NEWLINE#", "policy", "context", "users_principals", ",", "permission"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [7, 15, 2, 1, 8, 14, 0, 6, 10, 4, 17, 5, 13]}}
{"prediction": {"error_location": 0.6598025560379028, "repair_targets": [0.7069689035415649], "repair_candidates": [0.07433557510375977, 0.08537673205137253, 0.7069689035415649, 0.11789612472057343, 0.006610489450395107, 0.0016269698971882463, 0.0036465220618993044, 0.0005735886516049504, 0.0015892584342509508, 0.0006131707923486829, 0.0006474734400399029, 4.284188980818726e-05, 7.240130071295425e-05], "target_probs": 0.7069689035415649}}


{"result": {"time": "2021-02-21 11:52:03.503735", "n_pass": [239, 55, 21], "n_token": 17, "loss": [0.9194434881210327, 0.44812023639678955], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", "userid", ",", "permission", "policy", "request", "users_principals", "context", ",", "request", ")", "policy", "context", "users_principals", ",", "permission"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [7, 14, 2, 1, 8, 13, 0, 6, 10, 4, 16, 5, 12]}}
{"prediction": {"error_location": 0.39874085783958435, "repair_targets": [0.6388278603553772], "repair_candidates": [0.11419487744569778, 0.09796354174613953, 0.6388278603553772, 0.11384425312280655, 0.00898054800927639, 0.005503212567418814, 0.010185626335442066, 0.0016622786642983556, 0.0024078581482172012, 0.005316959228366613, 0.00047575694043189287, 0.00013212843623477966, 0.0005051122861914337], "target_probs": 0.6388278603553772}}


{"result": {"time": "2021-02-21 11:52:06.686907", "n_pass": [243, 56, 22], "n_token": 16, "loss": [0.8693884611129761, 0.44594353437423706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["request", "context", "userid", ",", "permission", "policy", "request", "users_principals", "context", ",", "request", ")", "policy", "context", "users_principals", "permission"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [7, 14, 2, 1, 8, 13, 0, 6, 10, 4, 15, 5, 12]}}
{"prediction": {"error_location": 0.4192078709602356, "repair_targets": [0.6402199268341064], "repair_candidates": [0.10283509641885757, 0.0866987332701683, 0.6402199268341064, 0.1394556760787964, 0.010931964963674545, 0.0015963431214913726, 0.004511114675551653, 0.0015916930278763175, 0.005247185006737709, 0.006491530686616898, 0.0001676977117313072, 0.0001497668999945745, 0.00010324898175895214], "target_probs": 0.6402199268341064}}




Minimal simplified tokens:

['request', 'context', 'userid', ',', 'permission', 'policy', 'request', 'users_principals', 'context', ',', 'request', ')', 'policy', 'context', 'users_principals', 'permission']
