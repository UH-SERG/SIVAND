
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'The grammar must be a CFG, or a subclass thereof.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "FeatureChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"], "error_location": [192], "repair_targets": [4, 86, 88, 143, 145, 190], "repair_candidates": [27, 42, 60, 84, 103, 141, 188, 192, 4, 86, 88, 143, 145, 190, 34, 12, 126, 133, 147, 149, 173, 180, 194, 196, 8, 69, 76, 82, 112, 119, 139, 159, 166, 186, 16, 90, 92, 2, 31], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "nltk/nltk/nltk/parse/util.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00004-of-00300", "js_count": 14816, "results": {"model": "rnn", "prob": {"loc": [[0.2260279804468155, 2.117393023581826e-06, 4.512407485890435e-06, 3.0020924413065586e-08, 1.6936284055191209e-06, 1.0873935529787104e-08, 2.700061031646328e-06, 8.694296838029913e-09, 1.7387674233759753e-06, 1.822195194733922e-08, 5.973486167931696e-07, 2.1213118372997997e-08, 8.378776783501962e-07, 4.145096710317375e-08, 1.6253599710580602e-07, 1.9013585017546575e-07, 9.042139481607592e-07, 1.2532264292985928e-07, 1.12147854451905e-05, 5.0861522993272956e-08, 8.29610216896981e-05, 7.561970960523468e-08, 2.5418044558023212e-08, 6.471752840297995e-07, 1.6743511821459833e-07, 1.304442491800728e-07, 4.008280996004032e-08, 2.4880957738560028e-08, 2.5931225877684483e-07, 2.453301931382157e-06, 3.439620570588886e-07, 0.005437260027974844, 0.0001858583273133263, 7.552858733106405e-05, 0.02343537099659443, 1.8598474298414658e-06, 1.6452542013212224e-06, 3.099274081819203e-08, 3.120368319287081e-07, 7.40331458359833e-08, 1.7518617596579134e-06, 4.3213171352363133e-07, 0.00026961523690260947, 7.662837560928892e-06, 0.00020293850684538484, 8.665684703146326e-08, 7.49479500683492e-09, 4.205276127322577e-08, 3.2889710155359353e-07, 5.870097652405093e-08, 1.7992870198213495e-06, 7.004894797546513e-08, 8.286829711323662e-08, 7.05873688389147e-08, 4.330173908329016e-07, 1.7500340732112818e-07, 3.428680429351516e-06, 2.2494713647347453e-08, 6.322190415630757e-07, 3.2988660336741304e-07, 0.0005596962291747332, 5.685059818461013e-07, 0.0001767102803569287, 1.3542391741339088e-07, 5.461817220719922e-09, 8.447589294746649e-08, 2.397978562385106e-07, 1.1961529366999457e-07, 4.2343901895947056e-07, 0.013772619888186455, 1.179266632789222e-06, 1.5370668506875518e-06, 3.9287375130925284e-08, 3.2863045618114484e-08, 6.931909410923254e-07, 1.842001395857551e-08, 8.6816832833847e-08, 1.1876903016627693e-07, 0.00020581237913575023, 4.440938710104092e-07, 4.7255944934931904e-08, 5.7445301848702e-09, 8.983699331110984e-07, 4.186141566719925e-08, 0.0008097090176306665, 2.3908887669676915e-05, 4.2936912336699606e-07, 3.6204550468710295e-08, 0.0005013043410144746, 2.0730543326408224e-07, 1.3042944146945956e-07, 3.6393123536981875e-07, 0.0004249344056006521, 3.4498093270940444e-08, 7.595890849643183e-08, 1.1138778063468635e-05, 1.2028897344862344e-07, 1.4746977967661223e-06, 9.621095387046807e-07, 1.8209280483461043e-07, 1.7801333740408154e-08, 1.670623817062733e-07, 1.3477301763487048e-07, 0.0032936306670308113, 1.835968355123896e-08, 0.4791896641254425, 2.5141341097878467e-07, 1.2891930190050971e-08, 3.3810795230238e-07, 4.951494361193909e-07, 1.0957859331028885e-07, 1.383327912662935e-06, 0.004167146515101194, 1.317229362030048e-06, 9.945538295141887e-07, 5.175597550532984e-08, 2.949231081572634e-08, 1.341103711638425e-06, 1.798240489847558e-08, 1.6290469773139193e-07, 1.09685018401251e-07, 0.00024672248400747776, 7.375810582743725e-06, 1.109272147914453e-06, 1.0448490073144967e-08, 9.044406965585949e-07, 0.008645260706543922, 4.6056652536208276e-06, 2.5847589313343633e-06, 1.9870957146395085e-07, 2.4450136493214814e-07, 2.154226649508928e-06, 9.976415782375625e-08, 8.689554853447135e-09, 9.551044399813691e-08, 0.003938561771064997, 4.986198831602451e-08, 5.909055289521348e-08, 2.6140600795088176e-08, 1.3006240351387532e-07, 6.141293340533593e-08, 0.0008675256394781172, 3.2137351809069514e-05, 1.8463218509623402e-07, 2.3383975644719612e-08, 0.00041778903687372804, 1.906059843292951e-08, 4.1754962154527675e-08, 6.367532279227817e-08, 0.00034006554051302373, 5.7622997928774566e-08, 2.2319488479638494e-08, 5.554677045438439e-06, 5.9289980924859265e-08, 1.663476723479107e-06, 8.125226145239139e-07, 1.2850105690631608e-07, 7.769929055712055e-08, 4.466209873044136e-07, 0.014302661642432213, 1.4581371488020523e-06, 2.0018931081722258e-06, 2.064530058021319e-08, 2.2626387874424836e-08, 8.490504797009635e-07, 1.1264225996399091e-08, 4.5006700588601234e-08, 1.4961499061882932e-07, 0.0015774262137711048, 4.460955551621737e-06, 1.6636512327750097e-06, 1.2798535564684244e-08, 1.2844120647059754e-06, 0.009889155626296997, 3.5270081752969418e-06, 2.4052842491073534e-06, 3.4351592148595955e-07, 3.101153254192468e-07, 2.0769537059095455e-06, 1.0005724959682993e-07, 7.127167744869212e-09, 1.3748625349307986e-07, 0.00802259799093008, 2.3049954833709307e-08, 3.6240475509430325e-08, 1.1035194091846279e-08, 5.513200207474256e-08, 3.79965001684468e-08, 0.004058159422129393, 2.5541283321217634e-05, 4.6963336899352726e-06, 3.442710294621065e-08, 0.1884375810623169, 4.673146122513572e-06, 9.886797869285147e-08, 3.377803281523484e-08, 0.0002153466921299696, 4.9938030599605554e-08]], "pointer": [[0.0, 0.0, 0.021155472844839096, 0.0, 0.003654044819995761, 0.0, 0.0, 0.0, 0.006070564966648817, 0.0, 0.0, 0.0, 0.009825808927416801, 0.0, 0.0, 0.0, 0.007965872064232826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0033757812343537807, 0.0, 0.0, 0.0, 1.1046793588320725e-05, 0.0, 0.0, 2.506035889382474e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0027644403744488955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004389493726193905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.004537812666968e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0014524207217618823, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2824986444902606e-05, 0.0, 0.0011250505922362208, 0.0, 4.217205787426792e-05, 0.0, 2.154955109290313e-05, 0.0, 8.463599806418642e-05, 0.0, 5.8632467698771507e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002480215160176158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.78813667036593e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003719693049788475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005626871134154499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008777253678999841, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1431866369093768e-05, 0.0, 0.0005612258682958782, 0.0, 1.1592926966841333e-05, 0.0, 7.436278974637389e-05, 0.0, 7.189091411419213e-05, 0.0, 0.0010541171068325639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00018113786063622683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004970739828422666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008982071885839105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012201465433463454, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2286690182227176e-06, 0.0, 1.982617141038645e-05, 0.0, 0.9288926124572754, 0.0, 6.690883765259059e-06, 0.0, 3.999509772256715e-06, 0.0, 8.082753993221559e-06, 0.0]], "target": [0.9326963424682617]}, "loss": [1.6689884662628174, 0.06967559456825256], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [105]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:56:24.766833", "n_pass": [1, 1, 1], "n_token": 198, "loss": [0.7356588244438171, 0.06967559456825256], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'The grammar must be a CFG, or a subclass thereof.'", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "FeatureChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 105, "repair_targets": [4, 86, 88, 143, 145, 190], "repair_candidates": [27, 42, 60, 84, 103, 141, 188, 192, 4, 86, 88, 143, 145, 190, 34, 12, 126, 133, 147, 149, 173, 180, 194, 196, 8, 69, 76, 82, 112, 119, 139, 159, 166, 186, 16, 90, 92, 2, 31]}}
{"prediction": {"error_location": 0.4791896641254425, "repair_targets": [0.003654044819995761, 4.217205787426792e-05, 2.154955109290313e-05, 1.1592926966841333e-05, 7.436278974637389e-05, 0.9288926124572754], "repair_candidates": [0.021155472844839096, 0.003654044819995761, 0.006070564966648817, 0.009825808927416801, 0.007965872064232826, 0.0033757812343537807, 1.1046793588320725e-05, 2.506035889382474e-05, 0.0027644403744488955, 0.004389493726193905, 8.004537812666968e-05, 0.0014524207217618823, 2.2824986444902606e-05, 0.0011250505922362208, 4.217205787426792e-05, 2.154955109290313e-05, 8.463599806418642e-05, 5.8632467698771507e-05, 0.002480215160176158, 6.78813667036593e-05, 0.0003719693049788475, 0.0005626871134154499, 0.0008777253678999841, 1.1431866369093768e-05, 0.0005612258682958782, 1.1592926966841333e-05, 7.436278974637389e-05, 7.189091411419213e-05, 0.0010541171068325639, 0.00018113786063622683, 0.0004970739828422666, 0.0008982071885839105, 0.0012201465433463454, 2.2286690182227176e-06, 1.982617141038645e-05, 0.9288926124572754, 6.690883765259059e-06, 3.999509772256715e-06, 8.082753993221559e-06], "target_probs": 0.9326963424682617}}


{"result": {"time": "2021-02-21 11:56:24.936245", "n_pass": [48, 2, 2], "n_token": 186, "loss": [0.6107736229896545, 0.05500596761703491], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "FeatureChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 93, "repair_targets": [4, 74, 76, 131, 133, 178], "repair_candidates": [27, 42, 48, 72, 91, 129, 176, 180, 4, 74, 76, 131, 133, 178, 34, 12, 114, 121, 135, 137, 161, 168, 182, 184, 8, 57, 64, 70, 100, 107, 127, 147, 154, 174, 16, 78, 80, 2, 31]}}
{"prediction": {"error_location": 0.5429306626319885, "repair_targets": [0.002795181702822447, 5.825264088343829e-05, 1.4576527064491529e-05, 9.807649803406093e-06, 6.034915350028314e-05, 0.9435413479804993], "repair_candidates": [0.012425381690263748, 0.002795181702822447, 0.004026434384286404, 0.00882649514824152, 0.009755021892488003, 0.0016426292713731527, 1.4308545360108837e-05, 4.839428947889246e-05, 0.0036398705560714006, 0.0003065300115849823, 0.00013669890176970512, 0.002432169858366251, 3.4234712074976414e-05, 0.0015722912503406405, 5.825264088343829e-05, 1.4576527064491529e-05, 6.984626088524237e-05, 6.097412551753223e-05, 0.0030822292901575565, 8.745233208173886e-05, 0.000400702643673867, 0.00032059571822173893, 0.0006067784270271659, 6.71062389301369e-06, 0.00037592643639072776, 9.807649803406093e-06, 6.034915350028314e-05, 4.691644790000282e-05, 0.0007734319078736007, 0.00019155432528350502, 0.00047688986524008214, 0.0008610122604295611, 0.0012600624468177557, 1.988272288144799e-06, 1.9813302060356364e-05, 0.9435413479804993, 6.001136625854997e-06, 3.4778918234223966e-06, 7.690811798966024e-06], "target_probs": 0.9464794993400574}}


{"result": {"time": "2021-02-21 11:56:25.103422", "n_pass": [100, 3, 3], "n_token": 180, "loss": [0.1476219892501831, 0.06389010697603226], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "FeatureChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 87, "repair_targets": [4, 74, 76, 125, 127, 172], "repair_candidates": [27, 42, 48, 72, 85, 123, 170, 174, 4, 74, 76, 125, 127, 172, 34, 12, 108, 115, 129, 131, 155, 162, 176, 178, 8, 57, 64, 70, 94, 101, 121, 141, 148, 168, 16, 78, 80, 2, 31]}}
{"prediction": {"error_location": 0.8627570271492004, "repair_targets": [0.0035588545724749565, 8.03634466137737e-05, 9.529711860523093e-06, 1.0847006706171669e-05, 9.413358202436939e-05, 0.9343543648719788], "repair_candidates": [0.015835139900445938, 0.0035588545724749565, 0.005095619708299637, 0.011314036324620247, 0.012610398232936859, 0.0020010960288345814, 1.8658414774108678e-05, 6.645649409620091e-05, 0.004060362931340933, 0.00036564565380103886, 0.00014591684157494456, 0.0026160129345953465, 5.111725113238208e-05, 0.0015779676614329219, 8.03634466137737e-05, 9.529711860523093e-06, 8.404125401284546e-05, 5.540624260902405e-05, 0.0009383521392010152, 7.455489685526118e-05, 0.00032827426912263036, 0.0003170842828694731, 0.0005338664050213993, 6.460793429141631e-06, 0.0004914602031931281, 1.0847006706171669e-05, 9.413358202436939e-05, 4.3301177356624976e-05, 0.0008956580422818661, 0.00018764598644338548, 0.0003468471113592386, 0.0008910676115192473, 0.0008833840256556869, 2.0002430574095342e-06, 2.7584712370298803e-05, 0.9343543648719788, 8.606093615526333e-06, 4.6220393414841965e-06, 1.335054821538506e-05], "target_probs": 0.9381080865859985}}


{"result": {"time": "2021-02-21 11:56:25.262005", "n_pass": [103, 4, 4], "n_token": 174, "loss": [0.07032153755426407, 0.07320237159729004], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 87, "repair_targets": [4, 74, 76, 119, 121, 166], "repair_candidates": [27, 42, 48, 72, 85, 117, 164, 168, 4, 74, 76, 119, 121, 166, 34, 12, 102, 109, 123, 125, 149, 156, 170, 172, 8, 57, 64, 70, 94, 101, 115, 135, 142, 162, 16, 78, 80, 2, 31]}}
{"prediction": {"error_location": 0.9320940971374512, "repair_targets": [0.00418876251205802, 8.483957935823128e-05, 1.1887816981470678e-05, 9.501261047262233e-06, 8.290360710816458e-05, 0.9250348210334778], "repair_candidates": [0.01908089593052864, 0.00418876251205802, 0.006061182357370853, 0.01330257486552, 0.014526812359690666, 0.002336622681468725, 2.0442712411750108e-05, 7.373008702415973e-05, 0.004467618186026812, 0.0003401401627343148, 0.0001584801939316094, 0.003258549841120839, 5.817763667437248e-05, 0.0014393399469554424, 8.483957935823128e-05, 1.1887816981470678e-05, 0.00014232868852559477, 5.4144686146173626e-05, 0.001259362674318254, 7.027178799035028e-05, 3.928470323444344e-05, 4.5322183723328635e-05, 0.00038422003854066133, 5.4310976338456385e-06, 0.00042166735511273146, 9.501261047262233e-06, 8.290360710816458e-05, 3.520739119267091e-05, 0.0007933431770652533, 0.000170569634065032, 0.00031258355011232197, 0.0009078876464627683, 0.0007597500807605684, 2.045650717263925e-06, 2.9618744520121254e-05, 0.9250348210334778, 9.852742550719995e-06, 5.086337296233978e-06, 1.4646855561295524e-05], "target_probs": 0.9294127225875854}}


{"result": {"time": "2021-02-21 11:56:25.416069", "n_pass": [108, 5, 5], "n_token": 168, "loss": [0.06507676839828491, 0.10709176957607269], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "0", ",", "**load_args", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 87, "repair_targets": [4, 74, 76, 119, 121, 160], "repair_candidates": [27, 42, 48, 72, 85, 117, 158, 162, 4, 74, 76, 119, 121, 160, 34, 12, 102, 109, 123, 125, 143, 150, 164, 166, 8, 57, 64, 70, 94, 101, 115, 129, 136, 156, 16, 78, 80, 2, 31]}}
{"prediction": {"error_location": 0.9369956254959106, "repair_targets": [0.006212613545358181, 0.0001365800853818655, 1.7787249817047268e-05, 8.710098882147577e-06, 9.555454016663134e-05, 0.891972005367279], "repair_candidates": [0.028566794469952583, 0.006212613545358181, 0.008998852223157883, 0.019640786573290825, 0.021373562514781952, 0.0036147229839116335, 3.0335921110236086e-05, 0.00010817550355568528, 0.006605816539376974, 0.00032352175912819803, 0.00029568164609372616, 0.003638422815129161, 7.591871690237895e-05, 0.0019088294357061386, 0.0001365800853818655, 1.7787249817047268e-05, 0.0002469172468408942, 5.997371772537008e-05, 0.0016250554472208023, 0.00010941976506728679, 4.674902083934285e-05, 4.480166171560995e-05, 0.00031061304616741836, 8.095216799119953e-06, 0.000545912014786154, 8.710098882147577e-06, 9.555454016663134e-05, 0.0007658282411284745, 0.0005689871031790972, 9.550643881084397e-05, 0.0003301358374301344, 0.0008740847115404904, 0.0006675103213638067, 2.3051900370774092e-06, 3.3989108487730846e-05, 0.891972005367279, 1.2752018847095314e-05, 6.335728812700836e-06, 2.0233728719176725e-05], "target_probs": 0.8984432220458984}}


{"result": {"time": "2021-02-21 11:56:25.568258", "n_pass": [118, 6, 6], "n_token": 162, "loss": [0.08524702489376068, 0.1214807778596878], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 81, "repair_targets": [4, 68, 70, 113, 115, 154], "repair_candidates": [21, 36, 42, 66, 79, 111, 152, 156, 4, 68, 70, 113, 115, 154, 28, 12, 96, 103, 117, 119, 137, 144, 158, 160, 8, 51, 58, 64, 88, 95, 109, 123, 130, 150, 16, 72, 74, 2, 25]}}
{"prediction": {"error_location": 0.9182854294776917, "repair_targets": [0.007307558786123991, 6.873403617646545e-05, 1.659383633523248e-05, 8.508189239364583e-06, 7.026517414487898e-05, 0.878136396408081], "repair_candidates": [0.030927082523703575, 0.007307558786123991, 0.009065467864274979, 0.025848370045423508, 0.021259663626551628, 0.009500370360910892, 1.9105438695987687e-05, 6.51648806524463e-05, 0.005780621897429228, 0.0008932704804465175, 0.00020120111003052443, 0.003530573332682252, 5.8404955780133605e-05, 0.0017206205520778894, 6.873403617646545e-05, 1.659383633523248e-05, 9.917202987708151e-05, 7.52829437260516e-05, 0.0012681870721280575, 8.839489601086825e-05, 4.2537176341284066e-05, 5.116363172419369e-05, 0.00026544317370280623, 7.274783001776086e-06, 0.0007070907158777118, 8.508189239364583e-06, 7.026517414487898e-05, 0.0004394418210722506, 0.0004462343349587172, 9.375835361424834e-05, 0.00037297967355698347, 0.0008173207752406597, 0.0006696349591948092, 2.497832156223012e-06, 3.285670391051099e-05, 0.878136396408081, 1.5600098777213134e-05, 6.828136974945664e-06, 2.0246483472874388e-05], "target_probs": 0.8856080770492554}}


{"result": {"time": "2021-02-21 11:56:25.717108", "n_pass": [121, 7, 7], "n_token": 156, "loss": [0.07884535193443298, 0.08894942700862885], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", ")", ")", ":", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 75, "repair_targets": [4, 62, 64, 107, 109, 148], "repair_candidates": [21, 30, 36, 60, 73, 105, 146, 150, 4, 62, 64, 107, 109, 148, 28, 12, 90, 97, 111, 113, 131, 138, 152, 154, 8, 45, 52, 58, 82, 89, 103, 117, 124, 144, 16, 66, 68, 2, 25]}}
{"prediction": {"error_location": 0.9241831302642822, "repair_targets": [0.005399729125201702, 8.683564374223351e-05, 1.5813478967174888e-05, 7.925284080556594e-06, 6.476647104136646e-05, 0.9093167781829834], "repair_candidates": [0.013846658170223236, 0.005399729125201702, 0.00525481766089797, 0.02208290994167328, 0.018437860533595085, 0.008823390118777752, 0.0004009123076684773, 0.0014078340027481318, 0.0016786004416644573, 0.0002975577663164586, 0.0002638054429553449, 0.00424802815541625, 0.00011322199134156108, 0.0024454924277961254, 8.683564374223351e-05, 1.5813478967174888e-05, 0.00020729876996483654, 9.707303252071142e-05, 0.001196542987599969, 0.0001252496731467545, 4.150619497522712e-05, 5.3845022193854675e-05, 0.0002707891690079123, 7.30799592929543e-06, 0.0008617743151262403, 7.925284080556594e-06, 6.476647104136646e-05, 0.0005428858567029238, 0.0006218109047040343, 5.133725790074095e-05, 0.00028579658828675747, 0.0007114878389984369, 0.0006658385973423719, 1.8958708096761256e-06, 2.878688246710226e-05, 0.9093167781829834, 1.2414639058988541e-05, 5.50485628991737e-06, 1.7833352103480138e-05], "target_probs": 0.9148918390274048}}


{"result": {"time": "2021-02-21 11:56:25.869740", "n_pass": [198, 8, 8], "n_token": 153, "loss": [0.08433035761117935, 0.08067674189805984], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 72, "repair_targets": [4, 59, 61, 104, 106, 145], "repair_candidates": [21, 30, 33, 57, 70, 102, 143, 147, 4, 59, 61, 104, 106, 145, 28, 12, 87, 94, 108, 110, 128, 135, 149, 151, 8, 42, 49, 55, 79, 86, 100, 114, 121, 141, 16, 63, 65, 2, 25]}}
{"prediction": {"error_location": 0.9191275835037231, "repair_targets": [0.004182835575193167, 0.00020667276112362742, 1.0595290405035485e-05, 8.436481039097998e-06, 6.048168506822549e-05, 0.9180228114128113], "repair_candidates": [0.014257931150496006, 0.004182835575193167, 0.005202344618737698, 0.01740342564880848, 0.014468803070485592, 0.00849192589521408, 0.00013616129581350833, 0.001121898414567113, 0.0008617435814812779, 0.0002582712331786752, 0.00018232215370517224, 0.0063135651871562, 0.00016087359108496457, 0.0021514517720788717, 0.00020667276112362742, 1.0595290405035485e-05, 0.00029675030964426696, 6.140865298220888e-05, 0.0020869604777544737, 9.946384670911357e-05, 4.874563455814496e-05, 4.164352503721602e-05, 0.0003115803119726479, 7.707267286605202e-06, 0.0007102719973772764, 8.436481039097998e-06, 6.048168506822549e-05, 0.0005471467156894505, 0.0004120602388866246, 4.8640082241036e-05, 0.0003128135285805911, 0.0007090172730386257, 0.0007369681261479855, 2.0096254047530238e-06, 3.0259378036134876e-05, 0.9180228114128113, 1.1415996596042532e-05, 5.477465492731426e-06, 1.709547359496355e-05], "target_probs": 0.9224918484687805}}


{"result": {"time": "2021-02-21 11:56:26.013319", "n_pass": [200, 9, 9], "n_token": 150, "loss": [0.28804680705070496, 0.07322366535663605], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 69, "repair_targets": [4, 56, 58, 101, 103, 142], "repair_candidates": [21, 30, 33, 54, 67, 99, 140, 144, 4, 56, 58, 101, 103, 142, 28, 12, 84, 91, 105, 107, 125, 132, 146, 148, 8, 39, 46, 52, 76, 83, 97, 111, 118, 138, 16, 60, 62, 2, 25]}}
{"prediction": {"error_location": 0.749726414680481, "repair_targets": [0.004591579549014568, 0.00013882860366720706, 1.0725791980803479e-05, 8.540848284610547e-06, 4.276244362699799e-05, 0.9246004819869995], "repair_candidates": [0.017061712220311165, 0.004591579549014568, 0.006067368201911449, 0.017110461369156837, 0.012852601706981659, 0.004533519968390465, 2.2500895283883438e-05, 0.000697046285495162, 0.0005497460952028632, 4.890228228759952e-05, 4.627458838513121e-05, 0.0036591487005352974, 8.924170106183738e-05, 0.0024377566296607256, 0.00013882860366720706, 1.0725791980803479e-05, 0.00017927931912709028, 4.3702530092559755e-05, 0.0009644848178140819, 9.04531916603446e-05, 4.875806553172879e-05, 5.204504122957587e-05, 0.00033982907189056277, 5.116605734656332e-06, 0.0006312034092843533, 8.540848284610547e-06, 4.276244362699799e-05, 0.0007362005417235196, 0.0004079512436874211, 2.9100419851602055e-05, 0.00032081714016385376, 0.0006804587901569903, 0.0008389188442379236, 1.7503546132502379e-06, 3.086662036366761e-05, 0.9246004819869995, 9.717346983961761e-06, 4.672435807151487e-06, 1.545629493193701e-05], "target_probs": 0.92939293384552}}


{"result": {"time": "2021-02-21 11:56:26.155219", "n_pass": [201, 10, 10], "n_token": 147, "loss": [0.18894079327583313, 0.05245256796479225], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 66, "repair_targets": [4, 53, 55, 98, 100, 139], "repair_candidates": [21, 30, 33, 51, 64, 96, 137, 141, 4, 53, 55, 98, 100, 139, 28, 12, 81, 88, 102, 104, 122, 129, 143, 145, 8, 36, 43, 49, 73, 80, 94, 108, 115, 135, 16, 57, 59, 2, 25]}}
{"prediction": {"error_location": 0.8278353810310364, "repair_targets": [0.003834182396531105, 7.694314990658313e-05, 1.8374303181190044e-05, 1.0616578947519884e-05, 4.291795630706474e-05, 0.944916307926178], "repair_candidates": [0.014001281931996346, 0.003834182396531105, 0.004519318230450153, 0.012155954726040363, 0.006944541819393635, 0.0022473777644336224, 8.352254553756211e-06, 0.0006573587306775153, 0.00043807405745610595, 1.9573151803342625e-05, 6.205791123647941e-06, 0.0022203586995601654, 6.548839883180335e-05, 0.0021342604886740446, 7.694314990658313e-05, 1.8374303181190044e-05, 0.00014365388778969646, 6.0000242228852585e-05, 0.0012396045494824648, 5.036112997913733e-05, 4.5506079914048314e-05, 3.955559805035591e-05, 0.0004036726604681462, 5.725926257582614e-06, 0.00058427092153579, 1.0616578947519884e-05, 4.291795630706474e-05, 0.0008107134490273893, 0.00036634624120779335, 2.9080316380714066e-05, 0.0003068810037802905, 0.0005545367021113634, 0.0009955877903848886, 1.458330416426179e-06, 2.5093675503740087e-05, 0.944916307926178, 6.932918495294871e-06, 3.503167135932017e-06, 9.888098247756716e-06], "target_probs": 0.9488993287086487}}


{"result": {"time": "2021-02-21 11:56:26.296914", "n_pass": [203, 11, 11], "n_token": 144, "loss": [0.2320159673690796, 0.06033296138048172], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "InsideChartParser", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 63, "repair_targets": [4, 50, 52, 95, 97, 136], "repair_candidates": [21, 30, 33, 48, 61, 93, 134, 138, 4, 50, 52, 95, 97, 136, 28, 12, 78, 85, 99, 101, 119, 126, 140, 142, 8, 36, 40, 46, 70, 77, 91, 105, 112, 132, 16, 54, 56, 2, 25]}}
{"prediction": {"error_location": 0.7929335236549377, "repair_targets": [0.00452423607930541, 4.875221929978579e-05, 1.2299953596084379e-05, 8.776843060331885e-06, 4.129473745706491e-05, 0.9368156790733337], "repair_candidates": [0.015432198531925678, 0.00452423607930541, 0.005234322044998407, 0.014122841879725456, 0.008424347266554832, 0.002417215146124363, 9.207365110341925e-06, 0.0006896918057464063, 0.00039618214941583574, 1.5502047972404398e-05, 6.048896011634497e-06, 0.0035637354012578726, 7.025516970315948e-05, 0.0020377037581056356, 4.875221929978579e-05, 1.2299953596084379e-05, 0.0001070468861144036, 5.735492959502153e-05, 0.0013390416279435158, 7.134547195164487e-05, 4.583762347465381e-05, 4.6618330088676885e-05, 0.000553120335098356, 6.196092272148235e-06, 0.0005444569978863001, 8.776843060331885e-06, 4.129473745706491e-05, 0.000928578432649374, 0.0003758902021218091, 4.173320121481083e-05, 0.00031121846404857934, 0.000631865521427244, 0.001018183189444244, 1.5854698176553939e-06, 2.695940202102065e-05, 0.9368156790733337, 7.552010629297001e-06, 3.7416195937112207e-06, 1.1369674211891834e-05], "target_probs": 0.9414510130882263}}


{"result": {"time": "2021-02-21 11:56:26.435719", "n_pass": [205, 12, 12], "n_token": 141, "loss": [0.15054026246070862, 0.0802735760807991], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", ")", "#NEWLINE#", "#UNINDENT#", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 60, "repair_targets": [4, 47, 49, 92, 94, 133], "repair_candidates": [21, 30, 33, 45, 58, 90, 131, 135, 4, 47, 49, 92, 94, 133, 28, 12, 75, 82, 96, 98, 116, 123, 137, 139, 8, 36, 40, 43, 67, 74, 88, 102, 109, 129, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.8602433800697327, "repair_targets": [0.003785506123676896, 0.0001800569734768942, 7.941326657601167e-06, 9.788253009901382e-06, 4.4147000153316185e-05, 0.9188364148139954], "repair_candidates": [0.013037470169365406, 0.003785506123676896, 0.004927361849695444, 0.01436529029160738, 0.01008722372353077, 0.0030701085925102234, 1.6769419744377956e-05, 0.0006602649809792638, 0.0004773797991219908, 2.1088319044793025e-05, 1.1034298040613066e-05, 0.024182720109820366, 1.4519977412419394e-05, 0.0005392262246459723, 0.0001800569734768942, 7.941326657601167e-06, 0.0002857771178241819, 6.693619798170403e-05, 0.001783189014531672, 6.795638910261914e-05, 3.3602598705329e-05, 4.235711821820587e-05, 0.0003741103573702276, 6.021989065629896e-06, 0.00047031138092279434, 9.788253009901382e-06, 4.4147000153316185e-05, 0.0005394823965616524, 0.0003739016829058528, 3.5535071219783276e-05, 0.00027060549473389983, 0.0005564412567764521, 0.0007668811595067382, 1.5798359527252614e-06, 2.593565841380041e-05, 0.9188364148139954, 8.406163033214398e-06, 4.0519544199923985e-06, 1.263116155314492e-05], "target_probs": 0.9228638410568237}}


{"result": {"time": "2021-02-21 11:56:26.573887", "n_pass": [210, 13, 13], "n_token": 138, "loss": [0.8178340196609497, 0.05054570361971855], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 89, 91, 130], "repair_candidates": [21, 30, 33, 45, 55, 87, 128, 132, 4, 47, 49, 89, 91, 130, 28, 12, 72, 79, 93, 95, 113, 120, 134, 136, 8, 36, 40, 43, 64, 71, 85, 99, 106, 126, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.4413866102695465, "repair_targets": [0.001819309894926846, 7.288764754775912e-05, 1.6394616977777332e-05, 1.4175076103128958e-05, 1.010133473755559e-05, 0.9487776160240173], "repair_candidates": [0.0062062484212219715, 0.001819309894926846, 0.0023037667851895094, 0.0069795832969248295, 0.004963614046573639, 0.0013121553929522634, 6.9128091126913205e-06, 0.0003913069376721978, 0.0001709368807496503, 8.147890184773132e-06, 5.27791462445748e-06, 0.006975002586841583, 6.234396551008103e-06, 0.00021754611225333065, 7.288764754775912e-05, 1.6394616977777332e-05, 0.012890743091702461, 0.0006046002963557839, 0.0006593557773157954, 1.5170611732173711e-05, 2.850409691745881e-05, 1.6297000911436044e-05, 0.0007792628603056073, 5.115603471494978e-06, 0.0002666673972271383, 1.4175076103128958e-05, 1.010133473755559e-05, 0.0009740524692460895, 9.330033208243549e-05, 1.3975984074932057e-05, 0.00046892635873518884, 0.00029640152934007347, 0.0026070813182741404, 1.284512677557359e-06, 1.4138461665424984e-05, 0.9487776160240173, 3.083131332459743e-06, 1.6594379985690466e-06, 3.171858452333254e-06], "target_probs": 0.9507104754447937}}


{"result": {"time": "2021-02-21 11:56:26.846613", "n_pass": [215, 15, 14], "n_token": 135, "loss": [0.8490732908248901, 0.051020730286836624], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 86, 88, 127], "repair_candidates": [21, 30, 33, 45, 55, 84, 125, 129, 4, 47, 49, 86, 88, 127, 28, 12, 69, 76, 90, 92, 110, 117, 131, 133, 8, 36, 40, 43, 64, 68, 82, 96, 103, 123, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.42781129479408264, "repair_targets": [0.0018931885715574026, 6.81586898281239e-05, 1.5546538634225726e-05, 1.4495749383058865e-05, 1.2031651749566663e-05, 0.9482555389404297], "repair_candidates": [0.0064263250678777695, 0.0018931885715574026, 0.0024071785155683756, 0.007308375556021929, 0.005201196763664484, 0.001275068847462535, 6.786560788896168e-06, 0.0004046287212986499, 0.00017149413179140538, 8.618944775662385e-06, 5.413376129581593e-06, 0.006252117920666933, 5.615107056655688e-06, 0.00021364781423471868, 6.81586898281239e-05, 1.5546538634225726e-05, 0.01316742692142725, 0.0005776214529760182, 0.0006464856560342014, 2.7202351702726446e-05, 3.402678339625709e-05, 1.5221028661471792e-05, 0.0008015423663891852, 5.345396857592277e-06, 0.0002984550956171006, 1.4495749383058865e-05, 1.2031651749566663e-05, 0.0010157765354961157, 0.00010776276758406311, 1.5154429092945065e-05, 0.00047594026545993984, 0.00032023864332586527, 0.002522106049582362, 1.259936652786564e-06, 1.4832289707555901e-05, 0.9482555389404297, 3.177737880832865e-06, 1.6639289697195636e-06, 3.2865393677639076e-06], "target_probs": 0.9502589702606201}}


{"result": {"time": "2021-02-21 11:56:26.981708", "n_pass": [218, 16, 15], "n_token": 132, "loss": [0.8293803930282593, 0.04880305379629135], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "#INDENT#", "if", "(", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 83, 85, 124], "repair_candidates": [21, 30, 33, 45, 55, 81, 122, 126, 4, 47, 49, 83, 85, 124, 28, 12, 69, 73, 87, 89, 107, 114, 128, 130, 8, 36, 40, 43, 64, 68, 79, 93, 100, 120, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.4363195300102234, "repair_targets": [0.0017281118780374527, 7.316238770727068e-05, 1.455369420000352e-05, 1.4993712284194771e-05, 9.598336873750668e-06, 0.9505282640457153], "repair_candidates": [0.005587536841630936, 0.0017281118780374527, 0.0021810356993228197, 0.006899397354573011, 0.005163421854376793, 0.0011706574587151408, 7.24042502042721e-06, 0.0004217020468786359, 0.00015784685092512518, 7.565485248051118e-06, 5.14793828187976e-06, 0.005660136230289936, 5.094226708024507e-06, 0.0001866089296527207, 7.316238770727068e-05, 1.455369420000352e-05, 0.013634711503982544, 0.0006653090240433812, 0.0006220416398718953, 2.0519593817880377e-05, 3.0287556000985205e-05, 1.0219227988272905e-05, 0.0001947398268384859, 7.001657195360167e-06, 0.0002741681819316, 1.4993712284194771e-05, 9.598336873750668e-06, 0.0008978884434327483, 8.795342728262767e-05, 1.3523722373065539e-05, 0.0005204882472753525, 0.00029855879256501794, 0.0028772407677024603, 1.2764286339006503e-06, 1.4233392903406639e-05, 0.9505282640457153, 3.044542609131895e-06, 1.6185534832402482e-06, 3.098320348726702e-06], "target_probs": 0.9523686766624451}}


{"result": {"time": "2021-02-21 11:56:27.248434", "n_pass": [225, 18, 16], "n_token": 129, "loss": [0.8594099283218384, 0.05681543052196503], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "ChartParser", "#NEWLINE#", "#UNINDENT#", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 83, 85, 121], "repair_candidates": [21, 30, 33, 45, 55, 81, 119, 123, 4, 47, 49, 83, 85, 121, 28, 12, 69, 73, 87, 89, 104, 111, 125, 127, 8, 36, 40, 43, 64, 68, 79, 90, 97, 117, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.4234118163585663, "repair_targets": [0.0016265470767393708, 6.38896890450269e-05, 1.0420031685498543e-05, 4.2161204873991664e-06, 5.626704478345346e-06, 0.9430577158927917], "repair_candidates": [0.00540947774425149, 0.0016265470767393708, 0.0020551129709929228, 0.006371928844600916, 0.004643565975129604, 0.0011485780123621225, 6.1999908211873844e-06, 0.0003687803400680423, 0.00013159404625184834, 6.498638413177105e-06, 4.008989890280645e-06, 0.005972831975668669, 4.354781594884116e-06, 0.00012316011998336762, 6.38896890450269e-05, 1.0420031685498543e-05, 0.013085189275443554, 0.0005038062809035182, 0.0004028994299005717, 1.3893580216972623e-05, 3.535063297022134e-05, 1.0037430911324918e-05, 0.00013015410513617098, 2.9415666631393833e-06, 9.951891115633771e-05, 4.2161204873991664e-06, 5.626704478345346e-06, 0.010642104782164097, 0.00016857012815307826, 9.383132237417158e-06, 0.0006176862516440451, 0.00028599094366654754, 0.0029539659153670073, 1.2807138318748912e-06, 1.4688716873934027e-05, 0.9430577158927917, 3.2659754651831463e-06, 1.6773030893091345e-06, 2.9380903470155317e-06], "target_probs": 0.9447684288024902}}


{"result": {"time": "2021-02-21 11:56:27.509996", "n_pass": [229, 20, 17], "n_token": 126, "loss": [0.8039448857307434, 0.06968913972377777], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "if", "(", "chart_class", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 83, 85, 118], "repair_candidates": [21, 30, 33, 45, 55, 81, 116, 120, 4, 47, 49, 83, 85, 118, 28, 12, 69, 73, 87, 89, 101, 108, 122, 124, 8, 36, 40, 43, 64, 68, 79, 90, 97, 114, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.44755998253822327, "repair_targets": [0.0019615383353084326, 9.867203334579244e-05, 1.6372650861740112e-05, 8.246759534813464e-06, 7.962470590427984e-06, 0.9305909276008606], "repair_candidates": [0.006742720492184162, 0.0019615383353084326, 0.002472789492458105, 0.007435105741024017, 0.005482998210936785, 0.0014719957252964377, 7.351977274083765e-06, 0.0003718170919455588, 0.00017920952814165503, 6.7342562033445574e-06, 4.854960025113542e-06, 0.005966369528323412, 6.083209427742986e-06, 0.00015096481365617365, 9.867203334579244e-05, 1.6372650861740112e-05, 0.013753444887697697, 0.0005322157521732152, 0.0005946402088738978, 2.3537279048468918e-05, 3.665039548650384e-05, 9.23868083191337e-06, 0.00017878976359497756, 3.8035416309867287e-06, 0.00012572499690577388, 8.246759534813464e-06, 7.962470590427984e-06, 0.01737256534397602, 0.00020796639728359878, 1.1368031664460432e-05, 0.0004825533542316407, 1.3337325981410686e-05, 0.0036478955298662186, 1.4171787370287348e-06, 1.4230749002308585e-05, 0.9305909276008606, 3.270079787398572e-06, 1.7840446844274993e-06, 2.865308943000855e-06], "target_probs": 0.9326837062835693}}


{"result": {"time": "2021-02-21 11:56:27.640708", "n_pass": [231, 21, 18], "n_token": 122, "loss": [0.9978272914886475, 0.04896679148077965], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "Chart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 83, 85, 114], "repair_candidates": [21, 30, 33, 45, 55, 81, 112, 116, 4, 47, 49, 83, 85, 114, 28, 12, 69, 73, 87, 89, 101, 104, 118, 120, 8, 36, 40, 43, 64, 68, 79, 90, 97, 110, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.36867955327033997, "repair_targets": [0.0012857888359576464, 5.5091320973588154e-05, 1.0566966921032872e-05, 6.628865776292514e-06, 8.000027264642995e-06, 0.9508466720581055], "repair_candidates": [0.004308293107897043, 0.0012857888359576464, 0.0016326748300343752, 0.004903034772723913, 0.0035850368440151215, 0.0007291738875210285, 4.690364676207537e-06, 0.00026883225655183196, 7.60635084589012e-05, 4.5814890654583e-06, 3.030418383787037e-06, 0.0038432276342064142, 4.785433247889159e-06, 0.0001322658936260268, 5.5091320973588154e-05, 1.0566966921032872e-05, 0.009208515286445618, 0.0003585730737540871, 0.0005259603494778275, 1.250924924534047e-05, 2.0291834516683593e-05, 7.349895440711407e-06, 0.0001044985037879087, 2.6526906822255114e-06, 7.451921555912122e-05, 6.628865776292514e-06, 8.000027264642995e-06, 0.01528868917375803, 0.00014816410839557648, 9.3268272394198e-06, 0.000410631560953334, 1.0377991202403791e-05, 0.0020896531641483307, 1.4116334341451875e-06, 1.3290942661114968e-05, 0.9508466720581055, 2.377509645157261e-06, 1.1921374607481994e-06, 1.6073984170361655e-06], "target_probs": 0.9522127509117126}}


{"result": {"time": "2021-02-21 11:56:27.767353", "n_pass": [233, 22, 19], "n_token": 118, "loss": [0.809345543384552, 0.08895692229270935], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "=", "None", ",", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 57, "repair_targets": [4, 47, 49, 83, 85, 110], "repair_candidates": [21, 30, 33, 45, 55, 81, 108, 112, 4, 47, 49, 83, 85, 110, 28, 12, 69, 73, 87, 89, 101, 104, 114, 116, 8, 36, 40, 43, 64, 68, 79, 90, 97, 106, 16, 51, 53, 2, 25]}}
{"prediction": {"error_location": 0.44514936208724976, "repair_targets": [0.0024501774460077286, 8.148484630510211e-05, 2.063602369162254e-05, 1.553431138745509e-05, 2.066046181425918e-05, 0.91229647397995], "repair_candidates": [0.008376114070415497, 0.0024501774460077286, 0.002952584996819496, 0.00956589262932539, 0.006270004436373711, 0.0014465204440057278, 8.723571227164939e-06, 0.00053018779726699, 0.0001514354516984895, 6.1684768297709525e-06, 4.447341325430898e-06, 0.00652231415733695, 7.462298981408821e-06, 0.00020896198111586273, 8.148484630510211e-05, 2.063602369162254e-05, 0.01707456260919571, 0.000690890068653971, 0.0009768240852281451, 1.8170840121456422e-05, 3.58844808943104e-05, 1.4299664144346025e-05, 0.00014479673700407147, 7.342656772379996e-06, 0.00016897406021598727, 1.553431138745509e-05, 2.066046181425918e-05, 0.028676705434918404, 0.0005247590597718954, 1.829387474572286e-05, 0.0005982029833830893, 6.206638772709994e-06, 7.686189201194793e-05, 2.0425279672053875e-06, 1.0182647201872896e-05, 0.91229647397995, 6.772601864213357e-06, 7.70123369875364e-06, 4.6538134483853355e-06], "target_probs": 0.9148849844932556}}


{"result": {"time": "2021-02-21 11:56:27.893914", "n_pass": [240, 23, 20], "n_token": 115, "loss": [0.8108805418014526, 0.06198352575302124], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "FeatureChart", "#NEWLINE#", "#UNINDENT#", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 54, "repair_targets": [4, 44, 46, 80, 82, 107], "repair_candidates": [18, 27, 30, 42, 52, 78, 105, 109, 4, 44, 46, 80, 82, 107, 25, 9, 66, 70, 84, 86, 98, 101, 111, 113, 8, 33, 37, 40, 61, 65, 76, 87, 94, 103, 13, 48, 50, 2, 22]}}
{"prediction": {"error_location": 0.44446659088134766, "repair_targets": [0.001605302095413208, 9.296035568695515e-05, 2.078310717479326e-05, 1.2991642506676726e-05, 2.2605852791457437e-05, 0.9381437301635742], "repair_candidates": [0.005292974878102541, 0.001605302095413208, 0.0023048813454806805, 0.002194575034081936, 0.0036164780613034964, 0.001295437105000019, 2.7615822546067648e-05, 0.0008999879937618971, 0.00022466872178483754, 6.542739356518723e-06, 4.974188868800411e-06, 0.005425842013210058, 5.8848918342846446e-06, 0.00027395051438361406, 9.296035568695515e-05, 2.078310717479326e-05, 0.013069510459899902, 0.0006265982519835234, 0.0007208986789919436, 1.822054218791891e-05, 3.5354943975107744e-05, 1.3194305211072788e-05, 0.0001753047399688512, 5.085935754323145e-06, 0.00016411991964560002, 1.2991642506676726e-05, 2.2605852791457437e-05, 0.022641723975539207, 0.000403038488002494, 2.2162632376421243e-05, 0.000530588033143431, 8.161151527019683e-06, 6.569779361598194e-05, 1.801336111384444e-06, 9.118968591792509e-06, 0.9381437301635742, 6.276431122387294e-06, 6.822162049502367e-06, 4.131364221393596e-06], "target_probs": 0.9398983716964722}}


{"result": {"time": "2021-02-21 11:56:28.264031", "n_pass": [262, 26, 21], "n_token": 112, "loss": [0.8098803162574768, 0.06240164861083031], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 54, "repair_targets": [4, 44, 46, 77, 79, 104], "repair_candidates": [18, 27, 30, 42, 52, 75, 102, 106, 4, 44, 46, 77, 79, 104, 25, 9, 66, 70, 81, 83, 95, 98, 108, 110, 8, 33, 37, 40, 61, 65, 73, 84, 91, 100, 13, 48, 50, 2, 22]}}
{"prediction": {"error_location": 0.4449113607406616, "repair_targets": [0.0016763227758929133, 0.00014664373884443194, 2.8974976885365322e-05, 2.5544588424963877e-05, 3.394160376046784e-05, 0.9375940561294556], "repair_candidates": [0.00541637884452939, 0.0016763227758929133, 0.00235359207727015, 0.0024263530503958464, 0.003986443392932415, 0.001297320006415248, 3.181222564307973e-05, 0.0009354223147965968, 0.0002205531345680356, 6.996888259891421e-06, 5.369429800339276e-06, 0.0053832046687603, 6.214928816916654e-06, 0.00033178861485794187, 0.00014664373884443194, 2.8974976885365322e-05, 0.015874003991484642, 0.0008220843155868351, 0.0011750701814889908, 2.0389048586366698e-05, 3.51493144989945e-05, 2.149903230019845e-05, 0.0002761548093985766, 1.1942709534196183e-05, 0.00017054194177035242, 2.5544588424963877e-05, 3.394160376046784e-05, 0.01881880685687065, 0.00032337597804144025, 1.6425801732111722e-05, 0.0004243406292516738, 6.530866357934428e-06, 7.004676444921643e-05, 1.747476289892802e-06, 8.522640200681053e-06, 0.9375940561294556, 5.711292942578439e-06, 6.6474167397245765e-06, 4.06496474170126e-06], "target_probs": 0.9395054578781128}}


{"result": {"time": "2021-02-21 11:56:28.387920", "n_pass": [268, 27, 22], "n_token": 109, "loss": [0.9730034470558167, 0.09262441098690033], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "is", "None", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 54, "repair_targets": [4, 44, 46, 77, 79, 101], "repair_candidates": [18, 27, 30, 42, 52, 75, 99, 103, 4, 44, 46, 77, 79, 101, 25, 9, 66, 70, 81, 83, 92, 95, 105, 107, 8, 33, 37, 40, 61, 65, 73, 84, 88, 97, 13, 48, 50, 2, 22]}}
{"prediction": {"error_location": 0.37794622778892517, "repair_targets": [0.002510750200599432, 0.00023598637199029326, 4.3462205212563276e-05, 5.252240953268483e-05, 5.605749538517557e-05, 0.9086370468139648], "repair_candidates": [0.008022467605769634, 0.002510750200599432, 0.0034791077487170696, 0.003791687311604619, 0.0061149755492806435, 0.0018336380599066615, 4.685056410380639e-05, 0.0013902210630476475, 0.0004215389199089259, 9.947701983037405e-06, 8.916586011764593e-06, 0.008939417079091072, 8.9128443505615e-06, 0.00039273352012969553, 0.00023598637199029326, 4.3462205212563276e-05, 0.0240975022315979, 0.0016075996682047844, 0.0015550283715128899, 2.5252398700104095e-05, 4.220680784783326e-05, 2.8658463634201325e-05, 0.0005320657510310411, 2.8686330551863648e-05, 0.0002793667954392731, 5.252240953268483e-05, 5.605749538517557e-05, 0.023948699235916138, 0.0008605267503298819, 4.6299617679324e-05, 0.0007910084095783532, 1.3767119526164606e-05, 0.00011848373105749488, 1.7282919770877925e-06, 9.39626079343725e-06, 0.9086370468139648, 5.770535153715173e-06, 6.495143679785542e-06, 5.396456799644511e-06], "target_probs": 0.9115357995033264}}


{"result": {"time": "2021-02-21 11:56:28.752318", "n_pass": [374, 30, 23], "n_token": 107, "loss": [1.0561349391937256, 0.07600685954093933], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "#NEWLINE#", "#INDENT#", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 54, "repair_targets": [4, 44, 46, 77, 79, 99], "repair_candidates": [18, 27, 30, 42, 52, 75, 97, 101, 4, 44, 46, 77, 79, 99, 25, 9, 66, 70, 81, 83, 90, 93, 103, 105, 8, 33, 37, 40, 61, 65, 73, 84, 86, 95, 13, 48, 50, 2, 22]}}
{"prediction": {"error_location": 0.3477974534034729, "repair_targets": [0.002000395441427827, 0.0001667221076786518, 3.372647552168928e-05, 4.4663021981250495e-05, 5.027981387684122e-05, 0.9245140552520752], "repair_candidates": [0.006288574542850256, 0.002000395441427827, 0.0027730909641832113, 0.0030888423789292574, 0.004882917273789644, 0.0013480075867846608, 4.146148785366677e-05, 0.0012516077840700746, 0.00031209070584736764, 8.855350642988924e-06, 6.67966014589183e-06, 0.006583830341696739, 7.076048859744333e-06, 0.0003266063577029854, 0.0001667221076786518, 3.372647552168928e-05, 0.022477466613054276, 0.0011666000355035067, 0.0011377838673070073, 1.7650885638431646e-05, 2.7572723411140032e-05, 1.5461617294931784e-05, 0.00037873414112254977, 1.7145846868515946e-05, 0.00028404343174770474, 4.4663021981250495e-05, 5.027981387684122e-05, 0.0191941000521183, 0.00037709539174102247, 0.00017151514475699514, 0.0008291720296256244, 1.0199913958786055e-05, 0.00014033653133083135, 1.6747059135013842e-06, 8.292740858450998e-06, 0.9245140552520752, 5.073187821835745e-06, 6.206771104189102e-06, 4.3554132389544975e-06], "target_probs": 0.9268098473548889}}


{"result": {"time": "2021-02-21 11:56:28.992925", "n_pass": [378, 32, 24], "n_token": 105, "loss": [1.1001636981964111, 0.13394741714000702], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 54, "repair_targets": [4, 44, 46, 77, 79, 97], "repair_candidates": [18, 27, 30, 42, 52, 75, 95, 99, 4, 44, 46, 77, 79, 97, 25, 9, 66, 70, 81, 83, 90, 91, 101, 103, 8, 33, 37, 40, 61, 65, 73, 84, 86, 93, 13, 48, 50, 2, 22]}}
{"prediction": {"error_location": 0.33281657099723816, "repair_targets": [0.003704976988956332, 0.000394414528273046, 7.831472612451762e-05, 0.00010561972885625437, 0.00018685647228267044, 0.8701658844947815], "repair_candidates": [0.01115392241626978, 0.003704976988956332, 0.004962082952260971, 0.005755003076046705, 0.00859321840107441, 0.00224887253716588, 7.489303243346512e-05, 0.003219973063096404, 0.0005217087455093861, 1.2691015399468597e-05, 1.491746570536634e-05, 0.013430406339466572, 1.516847169114044e-05, 0.0007458653999492526, 0.000394414528273046, 7.831472612451762e-05, 0.047959115356206894, 0.0022989329881966114, 0.001983827445656061, 3.6238154279999435e-05, 7.669832120882347e-05, 4.116801937925629e-05, 0.0011406474513933063, 5.1959425036329776e-05, 0.0006625783862546086, 0.00010561972885625437, 0.00018685647228267044, 0.018285028636455536, 0.0005466652801260352, 0.00016216994845308363, 0.0006387904286384583, 1.1493952115415595e-05, 0.0006622900255024433, 1.2031448022753466e-05, 1.6863963537616655e-05, 0.8701658844947815, 9.013750968733802e-06, 8.735002666071523e-06, 1.0915900020336267e-05], "target_probs": 0.8746360540390015}}


{"result": {"time": "2021-02-21 11:56:29.111710", "n_pass": [386, 33, 25], "n_token": 104, "loss": [1.0181102752685547, 0.11483393609523773], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", ")", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 53, "repair_targets": [3, 43, 45, 76, 78, 96], "repair_candidates": [17, 26, 29, 41, 51, 74, 94, 98, 3, 43, 45, 76, 78, 96, 24, 8, 65, 69, 80, 82, 89, 90, 100, 102, 7, 32, 36, 39, 60, 64, 72, 83, 85, 92, 12, 47, 49, 1, 21]}}
{"prediction": {"error_location": 0.3612770140171051, "repair_targets": [0.003562087891623378, 0.0002917750389315188, 9.649268031353131e-05, 0.00010073958401335403, 0.00015781445836182684, 0.8873052597045898], "repair_candidates": [0.004911599215120077, 0.003562087891623378, 0.0035660865250974894, 0.0046339877881109715, 0.006301790475845337, 0.0010322326561436057, 0.00036140179145149887, 0.004692514427006245, 0.0012178028700873256, 1.848753345257137e-05, 1.851154593168758e-05, 0.007402391172945499, 1.1380099749658257e-05, 0.0009641826618462801, 0.0002917750389315188, 9.649268031353131e-05, 0.047979217022657394, 0.0022412072867155075, 0.0018285869155079126, 3.903749893652275e-05, 5.07084077980835e-05, 3.886843842337839e-05, 0.0008393945172429085, 3.451104203122668e-05, 0.0005106273456476629, 0.00010073958401335403, 0.00015781445836182684, 0.018102915957570076, 0.00044108001748099923, 0.0001291677908739075, 0.00047831865958869457, 9.651554137235507e-06, 0.0005807679845020175, 9.203142326441593e-06, 1.7369848137605004e-05, 0.8873052597045898, 8.415786396653857e-06, 5.534017873287667e-06, 8.899503882275894e-06], "target_probs": 0.8915141820907593}}


{"result": {"time": "2021-02-21 11:56:31.178945", "n_pass": [412, 51, 26], "n_token": 103, "loss": [0.6215946674346924, 0.1270432472229004], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", ",", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 52, "repair_targets": [3, 42, 44, 75, 77, 95], "repair_candidates": [17, 25, 28, 40, 50, 73, 93, 97, 3, 42, 44, 75, 77, 95, 24, 8, 64, 68, 79, 81, 88, 89, 99, 101, 7, 31, 35, 38, 59, 63, 71, 82, 84, 91, 12, 46, 48, 1, 21]}}
{"prediction": {"error_location": 0.5370872616767883, "repair_targets": [0.009028893895447254, 0.00031818021670915186, 0.0013383195037022233, 9.561678598402068e-05, 0.001309846993535757, 0.8686047196388245], "repair_candidates": [0.02715190500020981, 0.009028893895447254, 0.013339138589799404, 0.005265467334538698, 0.010180830024182796, 0.0016527323750779033, 1.3607464097731281e-05, 0.005877830553799868, 0.000691093853674829, 0.0003457329876255244, 0.0001571770553709939, 0.005204502958804369, 1.4083304449741263e-05, 0.005090489983558655, 0.00031818021670915186, 0.0013383195037022233, 0.015520669519901276, 0.003052330110222101, 0.007116181310266256, 0.00037120896740816534, 7.867097156122327e-05, 0.00018487231864128262, 0.0010944672394543886, 4.878087929682806e-05, 0.002122211270034313, 9.561678598402068e-05, 0.001309846993535757, 0.012300877831876278, 0.0008236969006247818, 0.00029590417398139834, 0.00045889843022450805, 4.736074333777651e-05, 0.0006490646628662944, 1.0685846973501612e-05, 6.890572694828734e-05, 0.8686047196388245, 2.949781992356293e-05, 1.1898378943442367e-05, 3.3728971175150946e-05], "target_probs": 0.8806955814361572}}


{"result": {"time": "2021-02-21 11:56:31.296455", "n_pass": [414, 52, 27], "n_token": 102, "loss": [0.6521033644676208, 0.09737785160541534], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "CFG", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 51, "repair_targets": [3, 41, 43, 74, 76, 94], "repair_candidates": [17, 25, 27, 39, 49, 72, 92, 96, 3, 41, 43, 74, 76, 94, 24, 8, 63, 67, 78, 80, 87, 88, 98, 100, 7, 30, 34, 37, 58, 62, 70, 81, 83, 90, 12, 45, 47, 1, 21]}}
{"prediction": {"error_location": 0.5209487676620483, "repair_targets": [0.0036682540085166693, 0.000288486888166517, 9.326170402346179e-05, 7.297994307009503e-05, 0.00017198367277160287, 0.9029181599617004], "repair_candidates": [0.00619104690849781, 0.0036682540085166693, 0.008248870261013508, 0.005559561308473349, 0.0007850858382880688, 0.013142148032784462, 0.000265828421106562, 0.00020993272482883185, 0.00014734089199919254, 0.00033952147350646555, 2.280097032780759e-05, 0.008277472108602524, 9.990212674892973e-06, 0.0007355075213126838, 0.000288486888166517, 9.326170402346179e-05, 0.028158865869045258, 0.0022775784600526094, 0.0030231683049350977, 7.063933298923075e-05, 6.273345206864178e-05, 5.79839943384286e-05, 0.0007113347528502345, 3.700863817357458e-05, 0.0007215574732981622, 7.297994307009503e-05, 0.00017198367277160287, 0.011834918521344662, 0.00047824622015468776, 0.00014980295964051038, 0.0005818232893943787, 1.2674720892391633e-05, 0.0006093502743169665, 1.0634586942614987e-05, 2.1171377738937736e-05, 0.9029181599617004, 1.2715134289464913e-05, 8.049684765865095e-06, 1.1333097063470632e-05], "target_probs": 0.9072131514549255}}


{"result": {"time": "2021-02-21 11:56:31.411359", "n_pass": [415, 53, 28], "n_token": 101, "loss": [0.4514681100845337, 0.09111349284648895], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", ",", "PCFG", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 50, "repair_targets": [3, 40, 42, 73, 75, 93], "repair_candidates": [17, 25, 26, 38, 48, 71, 91, 95, 3, 40, 42, 73, 75, 93, 24, 8, 62, 66, 77, 79, 86, 87, 97, 99, 7, 29, 33, 36, 57, 61, 69, 80, 82, 89, 12, 44, 46, 1, 21]}}
{"prediction": {"error_location": 0.6366926431655884, "repair_targets": [0.0035973554477095604, 0.000294921628665179, 0.00015288707800209522, 0.00010106153058586642, 0.0001714675745461136, 0.908596396446228], "repair_candidates": [0.009506909176707268, 0.0035973554477095604, 0.00541382422670722, 0.0024146526120603085, 0.0019559524953365326, 0.0030950733926147223, 0.00011318226461298764, 0.0009228007984347641, 0.0006106583750806749, 4.8223209887510166e-05, 1.4033620573172811e-05, 0.009242301806807518, 1.3344468243303709e-05, 0.0015431103529408574, 0.000294921628665179, 0.00015288707800209522, 0.028118187561631203, 0.0026991514023393393, 0.003343297867104411, 8.439506927970797e-05, 6.175506132422015e-05, 7.989130244823173e-05, 0.0007401724578812718, 5.040295945946127e-05, 0.0007532843737863004, 0.00010106153058586642, 0.0001714675745461136, 0.014530008658766747, 0.0004724068276118487, 0.00015163279022090137, 0.00046085374196991324, 1.3403367120190524e-05, 0.0005735318991355598, 8.747551873966586e-06, 2.1469480998348445e-05, 0.908596396446228, 1.1417469977459405e-05, 6.851380021544173e-06, 1.0941449545498472e-05], "target_probs": 0.9129140973091125}}


{"result": {"time": "2021-02-21 11:56:31.525343", "n_pass": [417, 54, 29], "n_token": 99, "loss": [0.40134933590888977, 0.10826511681079865], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "None", "#INDENT#", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 48, "repair_targets": [3, 38, 40, 71, 73, 91], "repair_candidates": [17, 25, 26, 36, 46, 69, 89, 93, 3, 38, 40, 71, 73, 91, 24, 8, 60, 64, 75, 77, 84, 85, 95, 97, 7, 27, 31, 34, 55, 59, 67, 78, 80, 87, 12, 42, 44, 1, 21]}}
{"prediction": {"error_location": 0.669416069984436, "repair_targets": [0.003634282387793064, 0.00025809361250139773, 6.022817615303211e-05, 8.055954094743356e-05, 0.00011228649964323267, 0.893244206905365], "repair_candidates": [0.0064941709861159325, 0.003634282387793064, 0.00634646276012063, 0.004000420216470957, 0.0012496771523728967, 0.02157837338745594, 0.0002508267934899777, 0.00023378245532512665, 0.00011977116810157895, 0.00025111305876635015, 1.2025134310533758e-05, 0.010145255364477634, 1.3538467101170681e-05, 0.00104520283639431, 0.00025809361250139773, 6.022817615303211e-05, 0.032203175127506256, 0.002043877262622118, 0.002806265838444233, 5.728266478399746e-05, 5.7861299865180627e-05, 5.219521699473262e-05, 0.0006072023534215987, 4.2028161260532215e-05, 0.0006091140094213188, 8.055954094743356e-05, 0.00011228649964323267, 0.010466167703270912, 0.00041355096618644893, 0.0001414210710208863, 0.0006674800533801317, 1.0513054803595878e-05, 0.0006309844902716577, 1.1589223504415713e-05, 1.6622750990791246e-05, 0.893244206905365, 1.2733843504975084e-05, 9.692831554275472e-06, 1.0034085789811797e-05], "target_probs": 0.8973896503448486}}


{"result": {"time": "2021-02-21 11:56:31.638555", "n_pass": [419, 55, 30], "n_token": 97, "loss": [0.4164115786552429, 0.1412823647260666], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 46, "repair_targets": [3, 36, 38, 69, 71, 89], "repair_candidates": [17, 25, 26, 34, 44, 67, 87, 91, 3, 36, 38, 69, 71, 89, 24, 8, 58, 62, 73, 75, 82, 83, 93, 95, 7, 27, 29, 32, 53, 57, 65, 76, 78, 85, 12, 40, 42, 1, 21]}}
{"prediction": {"error_location": 0.659408688545227, "repair_targets": [0.003171604359522462, 0.000207971126656048, 4.967690983903594e-05, 9.990322723751888e-05, 0.00013189201126806438, 0.8645830750465393], "repair_candidates": [0.006297991145402193, 0.003171604359522462, 0.006131303030997515, 0.00364732276648283, 0.001176216290332377, 0.023601382970809937, 0.0002511219645384699, 0.00020259182201698422, 9.077184222405776e-05, 0.0002094429946737364, 7.890738743299153e-06, 0.009067952632904053, 1.8820914192474447e-05, 0.0004348903603386134, 0.000207971126656048, 4.967690983903594e-05, 0.06016398221254349, 0.0034347602631896734, 0.0030401237308979034, 6.394751835614443e-05, 6.716979260090739e-05, 7.338130671996623e-05, 0.0007232719217427075, 4.606467700796202e-05, 0.0004750472435262054, 9.990322723751888e-05, 0.00013189201126806438, 0.010577168315649033, 0.000455657544080168, 0.00015372225607279688, 0.0006172744324430823, 1.1819064638984855e-05, 0.0006531805847771466, 1.1126876415801235e-05, 1.869055449787993e-05, 0.8645830750465393, 1.2540647730929777e-05, 9.302200851379894e-06, 9.905702427204233e-06], "target_probs": 0.8682441115379333}}


{"result": {"time": "2021-02-21 11:56:31.863956", "n_pass": [430, 57, 31], "n_token": 95, "loss": [0.7573710083961487, 0.11330152302980423], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 46, "repair_targets": [3, 36, 38, 67, 69, 87], "repair_candidates": [17, 25, 26, 34, 44, 65, 85, 89, 3, 36, 38, 67, 69, 87, 24, 8, 56, 60, 71, 73, 80, 81, 91, 93, 7, 27, 29, 32, 51, 55, 63, 74, 76, 83, 12, 40, 42, 1, 21]}}
{"prediction": {"error_location": 0.4688974916934967, "repair_targets": [0.002724582329392433, 0.00015121475735213608, 5.039542884333059e-05, 0.0001048458507284522, 0.00011572013318073004, 0.88973468542099], "repair_candidates": [0.0055253044702112675, 0.002724582329392433, 0.004991903435438871, 0.0030234793666750193, 0.0010282819857820868, 0.012890930287539959, 0.00023360506747849286, 0.00019945773237850517, 7.655981607967988e-05, 0.00016160638188011944, 6.559981102327583e-06, 0.005895321723073721, 1.1298659956082702e-05, 0.00030267031979747117, 0.00015121475735213608, 5.039542884333059e-05, 0.05214045196771622, 0.0020460167434066534, 0.0022855764254927635, 1.9470087863737717e-05, 0.00010097919584950432, 6.125077197793871e-05, 0.0008003335678949952, 4.2017742089228705e-05, 0.0003795732045546174, 0.0001048458507284522, 0.00011572013318073004, 0.012752999551594257, 0.0005054576904512942, 0.00016072690777946264, 0.0006918373983353376, 1.1521626220201142e-05, 0.000717028568033129, 1.1117488611489534e-05, 1.7011354429996572e-05, 0.88973468542099, 1.1001260645571165e-05, 8.659364539198577e-06, 8.449451343039982e-06], "target_probs": 0.8928813934326172}}


{"result": {"time": "2021-02-21 11:56:32.307181", "n_pass": [437, 61, 32], "n_token": 93, "loss": [0.6600810885429382, 0.1238895133137703], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "=", "if", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 46, "repair_targets": [3, 36, 38, 65, 67, 85], "repair_candidates": [17, 25, 26, 34, 44, 63, 83, 87, 3, 36, 38, 65, 67, 85, 24, 8, 56, 60, 69, 71, 78, 79, 89, 91, 7, 27, 29, 32, 51, 55, 61, 72, 74, 81, 12, 40, 42, 1, 21]}}
{"prediction": {"error_location": 0.5168094038963318, "repair_targets": [0.0031701752450317144, 0.0001629040198167786, 5.393468018155545e-05, 5.682393748429604e-05, 7.820366590749472e-05, 0.8799554109573364], "repair_candidates": [0.006370015442371368, 0.0031701752450317144, 0.005841196980327368, 0.0035432183649390936, 0.00117570033762604, 0.015874158591032028, 0.00026283616898581386, 0.00022754777455702424, 9.119335300056264e-05, 0.0001919804490171373, 7.662223652005196e-06, 0.007348103914409876, 1.3478874279826414e-05, 0.00047146654105745256, 0.0001629040198167786, 5.393468018155545e-05, 0.05371549353003502, 0.0019417621660977602, 0.0028396190609782934, 2.237967237306293e-05, 0.0001245334278792143, 8.571718353778124e-05, 5.992149453959428e-05, 1.2797273484466132e-05, 0.0009994215797632933, 5.682393748429604e-05, 7.820366590749472e-05, 0.012766581028699875, 0.0003835292300209403, 0.00020289266831241548, 0.0010675359517335892, 1.607447848073207e-05, 0.0007957079797051847, 1.2686755326285493e-05, 2.1291201846906915e-05, 0.8799554109573364, 1.4202828424458858e-05, 1.13281048470526e-05, 1.0447430213389453e-05], "target_probs": 0.8834774494171143}}


{"result": {"time": "2021-02-21 11:56:32.418444", "n_pass": [445, 62, 33], "n_token": 91, "loss": [0.8009143471717834, 0.09236609190702438], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def load_parser(", "grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 46, "repair_targets": [3, 36, 38, 65, 67, 83], "repair_candidates": [17, 25, 26, 34, 44, 63, 81, 85, 3, 36, 38, 65, 67, 83, 24, 8, 56, 60, 69, 71, 76, 77, 87, 89, 7, 27, 29, 32, 51, 55, 61, 72, 74, 79, 12, 40, 42, 1, 21]}}
{"prediction": {"error_location": 0.44891828298568726, "repair_targets": [0.0025719681289047003, 0.0001367355725960806, 3.553233909769915e-05, 9.022160520544276e-05, 0.00011088719475083053, 0.9088259339332581], "repair_candidates": [0.00497783487662673, 0.0025719681289047003, 0.0047019002959132195, 0.002961717778816819, 0.000931926304474473, 0.013315711170434952, 0.0002981534053105861, 0.0001890016283141449, 7.76346423663199e-05, 0.00013614704948849976, 5.45198736290331e-06, 0.006954772397875786, 9.140292604570277e-06, 0.00023577465617563576, 0.0001367355725960806, 3.553233909769915e-05, 0.0448150672018528, 0.0019915050361305475, 0.0022250611800700426, 1.457282360206591e-05, 9.052006498677656e-05, 9.302963735535741e-05, 5.9951995353912935e-05, 9.868895176623482e-06, 0.0007008811226114631, 9.022160520544276e-05, 0.00011088719475083053, 0.0024050951469689608, 0.00017106036830227822, 3.525451393215917e-05, 3.2107654988067225e-05, 5.190431693335995e-05, 0.0006715150084346533, 1.470172264816938e-05, 2.6662106392905116e-05, 0.9088259339332581, 9.937480172084179e-06, 7.690111488045659e-06, 7.1461986408394296e-06], "target_probs": 0.911771297454834}}


{"result": {"time": "2021-02-21 11:56:32.531494", "n_pass": [454, 63, 34], "n_token": 90, "loss": [0.8717893958091736, 0.09842086583375931], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", ",", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 45, "repair_targets": [2, 35, 37, 64, 66, 82], "repair_candidates": [16, 24, 25, 33, 43, 62, 80, 84, 2, 35, 37, 64, 66, 82, 23, 7, 55, 59, 68, 70, 75, 76, 86, 88, 6, 26, 28, 31, 50, 54, 60, 71, 73, 78, 11, 39, 41, 0, 20]}}
{"prediction": {"error_location": 0.41820254921913147, "repair_targets": [0.007513801567256451, 0.00010858983296202496, 5.4857162467669696e-05, 7.808018563082442e-05, 0.0001128221265389584, 0.8983992338180542], "repair_candidates": [0.01869751140475273, 0.007513801567256451, 0.0040654027834534645, 0.0052659232169389725, 0.0006579413893632591, 0.010480737313628197, 0.00037814059760421515, 0.0002523674920666963, 8.339888881891966e-05, 0.00014608360652346164, 7.073360393405892e-06, 0.004443824291229248, 9.197536201099865e-06, 0.00028810964431613684, 0.00010858983296202496, 5.4857162467669696e-05, 0.03981751203536987, 0.002281388035044074, 0.002860833192244172, 1.3738940651819576e-05, 7.884777005529031e-05, 8.029700256884098e-05, 6.508214573841542e-05, 1.1470865501905791e-05, 0.0005990866920910776, 7.808018563082442e-05, 0.0001128221265389584, 0.0022978789638727903, 0.0001881984353531152, 4.218163667246699e-05, 2.571836557763163e-05, 6.111185211921111e-05, 0.0004628509050235152, 1.2472673915908672e-05, 2.690777364477981e-05, 0.8983992338180542, 1.1723273928510025e-05, 1.0835227840289008e-05, 8.745269951759838e-06], "target_probs": 0.9062674045562744}}


{"result": {"time": "2021-02-21 11:56:32.640967", "n_pass": [456, 64, 35], "n_token": 89, "loss": [0.6750969886779785, 0.1044868528842926], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "=", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 44, "repair_targets": [1, 34, 36, 63, 65, 81], "repair_candidates": [15, 23, 24, 32, 42, 61, 79, 83, 1, 34, 36, 63, 65, 81, 22, 6, 54, 58, 67, 69, 74, 75, 85, 87, 5, 25, 27, 30, 49, 53, 59, 70, 72, 77, 10, 38, 40, 0, 19]}}
{"prediction": {"error_location": 0.5091070532798767, "repair_targets": [0.023000311106443405, 0.00017654275870881975, 1.854818947322201e-05, 8.288260869449005e-05, 4.558719592751004e-05, 0.8774627447128296], "repair_candidates": [0.008648228831589222, 0.023000311106443405, 0.0027735205367207527, 0.004565964452922344, 0.0006362407002598047, 0.012796817347407341, 6.560913607245311e-05, 9.792276250664145e-05, 4.899087798548862e-05, 6.676096381852403e-05, 3.2094685593619943e-06, 0.006646005902439356, 1.1546590940270107e-05, 0.00010360691521782428, 0.00017654275870881975, 1.854818947322201e-05, 0.056502021849155426, 0.0013138225767761469, 0.001482456922531128, 8.108877409540582e-06, 8.534404332749546e-05, 5.469718234962784e-05, 4.141722456552088e-05, 8.407593668380287e-06, 0.00036191384424455464, 8.288260869449005e-05, 4.558719592751004e-05, 0.0021036569960415363, 0.00012224901001900434, 2.7973112082690932e-05, 2.2875665308674797e-05, 3.405819006729871e-05, 0.0005383995594456792, 1.000254360405961e-05, 1.5456027540494688e-05, 0.8774627447128296, 5.926920948695624e-06, 6.850190402474254e-06, 3.3053156585083343e-06], "target_probs": 0.9007866382598877}}


{"result": {"time": "2021-02-21 11:56:32.749461", "n_pass": [458, 65, 36], "n_token": 88, "loss": [0.8031055927276611, 0.09100361168384552], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "0", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 43, "repair_targets": [1, 33, 35, 62, 64, 80], "repair_candidates": [14, 22, 23, 31, 41, 60, 78, 82, 1, 33, 35, 62, 64, 80, 21, 5, 53, 57, 66, 68, 73, 74, 84, 86, 4, 24, 26, 29, 48, 52, 58, 69, 71, 76, 9, 37, 39, 0, 18]}}
{"prediction": {"error_location": 0.44793567061424255, "repair_targets": [0.0033578486181795597, 0.00011533548968145624, 2.7909194614039734e-05, 6.821817805757746e-05, 6.311984907370061e-05, 0.9093819856643677], "repair_candidates": [0.006521317176520824, 0.0033578486181795597, 0.002446668455377221, 0.0031586498953402042, 0.0005921759875491261, 0.008380248211324215, 0.00010200155520578846, 0.0001245146559085697, 5.9837038861587644e-05, 0.00010461892088642344, 4.603543857228942e-06, 0.005447250325232744, 1.0272712643200066e-05, 0.0001546615530969575, 0.00011533548968145624, 2.7909194614039734e-05, 0.05322135612368584, 0.001363938208669424, 0.0020972038619220257, 1.305713249166729e-05, 9.128436067840084e-05, 8.042827539611608e-05, 4.2134113755309954e-05, 7.721619112999178e-06, 0.00039336414192803204, 6.821817805757746e-05, 6.311984907370061e-05, 0.0017533886712044477, 0.00013131354353390634, 2.929959009634331e-05, 2.3989945475477725e-05, 3.5652683436637744e-05, 0.0005463023553602397, 1.0294612366124056e-05, 1.8334620108362287e-05, 0.9093819856643677, 7.169122454797616e-06, 7.2641873885004316e-06, 5.2164687076583505e-06], "target_probs": 0.9130144119262695}}


{"result": {"time": "2021-02-21 11:56:32.857417", "n_pass": [459, 66, 37], "n_token": 87, "loss": [0.8094173669815063, 0.10243386775255203], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", ",", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 42, "repair_targets": [1, 32, 34, 61, 63, 79], "repair_candidates": [13, 21, 22, 30, 40, 59, 77, 81, 1, 32, 34, 61, 63, 79, 20, 4, 52, 56, 65, 67, 72, 73, 83, 85, 3, 23, 25, 28, 47, 51, 57, 68, 70, 75, 8, 36, 38, 0, 17]}}
{"prediction": {"error_location": 0.445117324590683, "repair_targets": [0.004357122350484133, 0.0001283333112951368, 8.646149217383936e-05, 4.297762279747985e-05, 0.00011462045222287998, 0.8979083299636841], "repair_candidates": [0.015098472125828266, 0.004357122350484133, 0.004538001026958227, 0.0046152109280228615, 0.0007116192718967795, 0.012892513535916805, 0.00036982225719839334, 0.000376243086066097, 0.0001817824668250978, 0.00033780577359721065, 1.5251233890012372e-05, 0.005609495099633932, 1.5679366697440855e-05, 0.0006171406712383032, 0.0001283333112951368, 8.646149217383936e-05, 0.042366378009319305, 0.0025505400262773037, 0.003500445280224085, 2.6372106731287204e-05, 0.0001141326647484675, 0.00013306124310474843, 6.670021684840322e-05, 1.213981886394322e-05, 0.0005456205108202994, 4.297762279747985e-05, 0.00011462045222287998, 0.0017708216328173876, 0.00017960810509976, 4.6310495235957205e-05, 2.9459379220497794e-05, 7.158952939789742e-05, 0.0004781635943800211, 1.6754054740886204e-05, 3.048203871003352e-05, 0.8979083299636841, 1.7695048882160336e-05, 1.4700380233989563e-05, 1.213535142596811e-05], "target_probs": 0.9026378393173218}}


{"result": {"time": "2021-02-21 11:56:32.966048", "n_pass": [460, 67, 38], "n_token": 86, "loss": [0.9839260578155518, 0.1544431895017624], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", "None", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 41, "repair_targets": [1, 31, 33, 60, 62, 78], "repair_candidates": [12, 20, 21, 29, 39, 58, 76, 80, 1, 31, 33, 60, 62, 78, 19, 3, 51, 55, 64, 66, 71, 72, 82, 84, 2, 22, 24, 27, 46, 50, 56, 67, 69, 74, 7, 35, 37, 0, 16]}}
{"prediction": {"error_location": 0.37384048104286194, "repair_targets": [0.0011278217425569892, 0.0002764454984571785, 2.6967762096319348e-05, 7.417482993332669e-05, 7.981419184943661e-05, 0.8553069233894348], "repair_candidates": [0.004947252105921507, 0.0011278217425569892, 0.003448601346462965, 0.007779751438647509, 0.0006814026273787022, 0.02690434642136097, 0.00013844366185367107, 0.00015057643759064376, 0.00012340214743744582, 0.00020597889670170844, 9.28618374018697e-06, 0.018515389412641525, 1.8066335542243905e-05, 0.0001880721392808482, 0.0002764454984571785, 2.6967762096319348e-05, 0.07196614891290665, 0.0019070175476372242, 0.001564453705213964, 1.4687519978906494e-05, 0.00012475988478399813, 8.967095345724374e-05, 8.041287946980447e-05, 1.2967982911504805e-05, 0.0007010847330093384, 7.417482993332669e-05, 7.981419184943661e-05, 0.0021102549508213997, 0.00017642334569245577, 4.021040513180196e-05, 3.3250438718823716e-05, 6.351119372993708e-05, 0.0010411444818601012, 2.096051503031049e-05, 2.31813573918771e-05, 0.8553069233894348, 1.033232456393307e-05, 1.0067232324217912e-05, 6.676312750641955e-06], "target_probs": 0.8568921685218811}}


{"result": {"time": "2021-02-21 11:56:33.179385", "n_pass": [464, 69, 39], "n_token": 85, "loss": [1.078362226486206, 0.1250104159116745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "=", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 40, "repair_targets": [1, 30, 32, 59, 61, 77], "repair_candidates": [11, 19, 20, 28, 38, 57, 75, 79, 1, 30, 32, 59, 61, 77, 18, 3, 50, 54, 63, 65, 70, 71, 81, 83, 2, 21, 23, 26, 45, 49, 55, 66, 68, 73, 6, 34, 36, 0, 15]}}
{"prediction": {"error_location": 0.34015214443206787, "repair_targets": [0.0009429132915101945, 0.00026760195032693446, 2.947133907582611e-05, 5.674138810718432e-05, 6.27972258371301e-05, 0.881128191947937], "repair_candidates": [0.004339772276580334, 0.0009429132915101945, 0.0023102734703570604, 0.007492306642234325, 0.0008467429433949292, 0.017117250710725784, 0.00016520300414413214, 0.00017660390585660934, 0.000139483658131212, 0.0002527491596993059, 9.264587788493372e-06, 0.0168620478361845, 2.1374280549935065e-05, 0.00021426497551146895, 0.00026760195032693446, 2.947133907582611e-05, 0.060360416769981384, 0.001538768527098, 0.0018188076792284846, 1.3310264876054134e-05, 0.00013319756544660777, 7.881014607846737e-05, 6.245083204703405e-05, 1.0476748684595805e-05, 0.000687597319483757, 5.674138810718432e-05, 6.27972258371301e-05, 0.001789239700883627, 0.00013169499288778752, 3.7458259612321854e-05, 2.6859921490540728e-05, 4.738031930173747e-05, 0.0007707556942477822, 1.2670811884163413e-05, 2.2392299797502346e-05, 0.881128191947937, 8.382206942769699e-06, 7.989194273250178e-06, 6.240543825697387e-06], "target_probs": 0.8824877142906189}}


{"result": {"time": "2021-02-21 11:56:33.392993", "n_pass": [467, 71, 40], "n_token": 84, "loss": [0.8789066076278687, 0.13406798243522644], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "#INDENT#", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 39, "repair_targets": [1, 29, 31, 58, 60, 76], "repair_candidates": [10, 18, 19, 27, 37, 56, 74, 78, 1, 29, 31, 58, 60, 76, 17, 3, 49, 53, 62, 64, 69, 70, 80, 82, 2, 20, 22, 25, 44, 48, 54, 65, 67, 72, 6, 33, 35, 0, 14]}}
{"prediction": {"error_location": 0.41523662209510803, "repair_targets": [0.0012080625165253878, 0.0002606237540021539, 3.0746687116334215e-05, 6.650765135418624e-05, 8.173297828761861e-05, 0.8728829622268677], "repair_candidates": [0.005141541361808777, 0.0012080625165253878, 0.0034296433441340923, 0.008904092945158482, 0.0008350441930815578, 0.02365640178322792, 0.00016589812003076077, 0.00022446912771556526, 0.00017333195137325674, 0.0003321335534565151, 1.2283428986847866e-05, 0.017004534602165222, 2.3975499061634764e-05, 0.00029992120107635856, 0.0002606237540021539, 3.0746687116334215e-05, 0.05552296340465546, 0.00180181791074574, 0.0032889707945287228, 1.8913040548795834e-05, 0.00014226222992874682, 0.00011399434151826426, 8.306356176035479e-05, 1.3018506251682993e-05, 0.0007896108436398208, 6.650765135418624e-05, 8.173297828761861e-05, 0.0022197228390723467, 0.0001548895234009251, 3.983898204751313e-05, 3.432451921980828e-05, 5.861281169927679e-05, 0.0009040336008183658, 2.0572088033077307e-05, 2.8650700187426992e-05, 0.8728829622268677, 1.2026584954583086e-05, 1.1313499271636829e-05, 7.430698587995721e-06], "target_probs": 0.8745306134223938}}


{"result": {"time": "2021-02-21 11:56:33.498855", "n_pass": [468, 72, 41], "n_token": 83, "loss": [1.0439387559890747, 0.08771307021379471], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "load", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 38, "repair_targets": [1, 28, 30, 57, 59, 75], "repair_candidates": [9, 17, 18, 26, 36, 55, 73, 77, 1, 28, 30, 57, 59, 75, 16, 3, 48, 52, 61, 63, 68, 69, 79, 81, 2, 19, 21, 24, 43, 47, 53, 64, 66, 71, 6, 32, 34, 0, 13]}}
{"prediction": {"error_location": 0.35206523537635803, "repair_targets": [0.0007503192755393684, 0.0001875787420431152, 2.8691340048681013e-05, 5.1147690101061016e-05, 6.469517393270507e-05, 0.9149412512779236], "repair_candidates": [0.0039293342269957066, 0.0007503192755393684, 0.001496021170169115, 0.004403972532600164, 0.0006471978849731386, 0.011985530145466328, 0.0001782518083928153, 0.00017014730838127434, 0.00010586875578155741, 0.0002379962825216353, 9.45568081078818e-06, 0.012653454206883907, 1.7907794244820252e-05, 0.00027379204402677715, 0.0001875787420431152, 2.8691340048681013e-05, 0.04095938801765442, 0.001524859108030796, 0.0018905320903286338, 1.948912176885642e-05, 0.00012362824054434896, 9.307329310104251e-05, 7.40049290470779e-05, 1.1063352758355904e-05, 0.0007521060178987682, 5.1147690101061016e-05, 6.469517393270507e-05, 0.001347417593933642, 0.00011918729433091357, 2.8593358365469612e-05, 2.6427134798723273e-05, 5.196192068979144e-05, 0.0007854157593101263, 1.475076442147838e-05, 2.059506186924409e-05, 0.9149412512779236, 9.298914847022388e-06, 9.105518074647989e-06, 6.366528850776376e-06], "target_probs": 0.9160236716270447}}


{"result": {"time": "2021-02-21 11:56:33.918141", "n_pass": [473, 76, 42], "n_token": 82, "loss": [0.7127929329872131, 0.09698010981082916], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "(", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 37, "repair_targets": [1, 27, 29, 56, 58, 74], "repair_candidates": [9, 16, 17, 25, 35, 54, 72, 76, 1, 27, 29, 56, 58, 74, 15, 3, 47, 51, 60, 62, 67, 68, 78, 80, 2, 18, 20, 23, 42, 46, 52, 63, 65, 70, 6, 31, 33, 0, 12]}}
{"prediction": {"error_location": 0.49027296900749207, "repair_targets": [0.0009495943086221814, 0.0001869100669864565, 3.214488970115781e-05, 4.692056245403364e-05, 4.999461452825926e-05, 0.9063084721565247], "repair_candidates": [0.0051812375895679, 0.0009495943086221814, 0.001690487377345562, 0.004089503549039364, 0.0007942726952023804, 0.014726833440363407, 0.00025108145200647414, 0.00037547186366282403, 0.0001179851678898558, 0.00013646752631757408, 9.33746741793584e-06, 0.011880999431014061, 3.120118344668299e-05, 0.00044919527135789394, 0.0001869100669864565, 3.214488970115781e-05, 0.046062011271715164, 0.0015386721352115273, 0.0014373548328876495, 2.126865365426056e-05, 0.00011627999629126862, 8.002309186849743e-05, 7.435081352014095e-05, 1.2866450560977682e-05, 0.0005943366559222341, 4.692056245403364e-05, 4.999461452825926e-05, 0.0017098826356232166, 0.00014321273192763329, 2.8860064048785716e-05, 2.3657239580643363e-05, 3.1543149816570804e-05, 0.0007558967918157578, 1.4781141544517595e-05, 1.7177686459035613e-05, 0.9063084721565247, 1.0228029168501962e-05, 1.2046278243360575e-05, 7.487133188988082e-06], "target_probs": 0.9075740575790405}}


{"result": {"time": "2021-02-21 11:56:34.023046", "n_pass": [474, 77, 43], "n_token": 81, "loss": [0.8925046920776367, 0.08361116051673889], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", ",", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 36, "repair_targets": [1, 26, 28, 55, 57, 73], "repair_candidates": [9, 15, 16, 24, 34, 53, 71, 75, 1, 26, 28, 55, 57, 73, 14, 3, 46, 50, 59, 61, 66, 67, 77, 79, 2, 17, 19, 22, 41, 45, 51, 62, 64, 69, 6, 30, 32, 0, 11]}}
{"prediction": {"error_location": 0.4096284806728363, "repair_targets": [0.0005771219730377197, 0.0001432982535334304, 2.742937249422539e-05, 4.871638157055713e-05, 3.9613049011677504e-05, 0.9189526438713074], "repair_candidates": [0.0033714647870510817, 0.0005771219730377197, 0.0008322072098962963, 0.0026485829148441553, 0.0004322400491219014, 0.007382766809314489, 0.0012422919971868396, 0.0003948457015212625, 6.425658648367971e-05, 8.901969704311341e-05, 6.657491667283466e-06, 0.007365293800830841, 2.9241220545372926e-05, 0.00044569699093699455, 0.0001432982535334304, 2.742937249422539e-05, 0.05021405220031738, 0.0012347291922196746, 0.0011987893376499414, 1.5933374015730806e-05, 0.00010261790157528594, 6.279705849010497e-05, 5.521752973436378e-05, 8.459939635940827e-06, 0.0005857906071469188, 4.871638157055713e-05, 3.9613049011677504e-05, 0.0018852103967219591, 7.898946932982653e-05, 1.9383656763238832e-05, 1.4520209333568346e-05, 2.011395372392144e-05, 0.00036490053753368556, 1.0432712770125363e-05, 1.4191248737915885e-05, 0.9189526438713074, 7.4501026574580465e-06, 7.619615189469187e-06, 5.465701178763993e-06], "target_probs": 0.9197888374328613}}


{"result": {"time": "2021-02-21 11:56:34.127312", "n_pass": [476, 78, 44], "n_token": 80, "loss": [0.9390732645988464, 0.08111795037984848], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "**", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 35, "repair_targets": [1, 25, 27, 54, 56, 72], "repair_candidates": [9, 14, 15, 23, 33, 52, 70, 74, 1, 25, 27, 54, 56, 72, 13, 3, 45, 49, 58, 60, 65, 66, 76, 78, 2, 16, 18, 21, 40, 44, 50, 61, 63, 68, 6, 29, 31, 0, 11]}}
{"prediction": {"error_location": 0.3909899890422821, "repair_targets": [0.0008078271057456732, 9.801110718399286e-05, 3.0986171623226255e-05, 4.7347592044388875e-05, 5.7069417380262166e-05, 0.9210436940193176], "repair_candidates": [0.003731122938916087, 0.0008078271057456732, 0.001415271544829011, 0.002742647659033537, 0.00042764993850141764, 0.00932096503674984, 0.0025127932894974947, 8.766500832280144e-05, 2.4149803721229546e-05, 0.00013675534864887595, 5.91757725487696e-06, 0.004980121273547411, 1.8339816961088218e-05, 0.00039122760063037276, 9.801110718399286e-05, 3.0986171623226255e-05, 0.045349378138780594, 0.0015538298757746816, 0.001887396676465869, 1.6361424059141427e-05, 0.00014021618699189276, 7.101908704498783e-05, 6.945105269551277e-05, 8.708085260877851e-06, 0.0007088346173986793, 4.7347592044388875e-05, 5.7069417380262166e-05, 0.0017709427047520876, 9.466751362197101e-05, 1.681435423961375e-05, 1.3318282981344964e-05, 2.02566989173647e-05, 0.0003563615318853408, 9.739032975630835e-06, 1.373963550577173e-05, 0.9210436940193176, 7.321141765714856e-06, 6.7779137680190615e-06, 5.431299541669432e-06], "target_probs": 0.9220849275588989}}


{"result": {"time": "2021-02-21 11:56:34.232384", "n_pass": [477, 79, 45], "n_token": 79, "loss": [0.31970080733299255, 0.09927182644605637], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "if", "(", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 34, "repair_targets": [1, 24, 26, 53, 55, 71], "repair_candidates": [9, 13, 14, 22, 32, 51, 69, 73, 1, 24, 26, 53, 55, 71, 12, 3, 44, 48, 57, 59, 64, 65, 75, 77, 2, 15, 17, 20, 39, 43, 49, 60, 62, 67, 6, 28, 30, 0, 11]}}
{"prediction": {"error_location": 0.7263662815093994, "repair_targets": [0.0005720133194699883, 9.592629794497043e-05, 9.124185453401878e-06, 8.697708108229563e-05, 4.2187351937172934e-05, 0.9046903252601624], "repair_candidates": [0.004095542244613171, 0.0005720133194699883, 0.0005215335404500365, 0.002172419335693121, 0.0014982634456828237, 0.035313475877046585, 0.0005886821891181171, 7.614710921188816e-05, 2.2869744498166256e-05, 6.797938840463758e-05, 6.3050820244825445e-06, 0.0042211622931063175, 2.065324952127412e-05, 0.0001048110643750988, 9.592629794497043e-05, 9.124185453401878e-06, 0.03968694806098938, 0.001331973122432828, 0.0019482627976685762, 1.4056410691409837e-05, 0.00017609054339118302, 6.0289563407422975e-05, 7.392391853500158e-05, 1.4731652299815323e-05, 0.0005003976984880865, 8.697708108229563e-05, 4.2187351937172934e-05, 0.0012700834777206182, 0.00011859096412081271, 2.7170539397047833e-05, 2.3081889594323002e-05, 1.7604075765120797e-05, 0.0004735132388304919, 1.4141117389954161e-05, 1.2744914783979766e-05, 0.9046903252601624, 1.080018137145089e-05, 1.2921245797770098e-05, 6.491661224572454e-06], "target_probs": 0.9054965376853943}}


{"result": {"time": "2021-02-21 11:56:34.439041", "n_pass": [492, 81, 46], "n_token": 77, "loss": [0.5660148859024048, 0.06528813391923904], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "#NEWLINE#", "#INDENT#", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 34, "repair_targets": [1, 24, 26, 51, 53, 69], "repair_candidates": [9, 13, 14, 22, 32, 49, 67, 71, 1, 24, 26, 51, 53, 69, 12, 3, 42, 46, 55, 57, 62, 63, 73, 75, 2, 15, 17, 20, 37, 41, 47, 58, 60, 65, 6, 28, 30, 0, 11]}}
{"prediction": {"error_location": 0.5677836537361145, "repair_targets": [0.0004516712506301701, 7.666824240004644e-05, 1.1347283361828886e-05, 9.438758570468053e-05, 3.823078077402897e-05, 0.9361252188682556], "repair_candidates": [0.0033782864920794964, 0.0004516712506301701, 0.0003629688872024417, 0.0015114418929442763, 0.0014448518631979823, 0.025488466024398804, 0.0005043655983172357, 7.03291007084772e-05, 1.8446762624080293e-05, 5.2175208111293614e-05, 5.121631147630978e-06, 0.002084235893562436, 1.2128189155191649e-05, 9.781303378986195e-05, 7.666824240004644e-05, 1.1347283361828886e-05, 0.021921714767813683, 0.0012870235368609428, 0.0020714732818305492, 1.1444770279922523e-05, 0.0001877117611002177, 4.0700178942643106e-05, 5.741884888266213e-05, 1.2073224752384704e-05, 0.0004480020434129983, 9.438758570468053e-05, 3.823078077402897e-05, 0.0013726091710850596, 0.00012418261030688882, 2.6841134967980906e-05, 2.1152503904886544e-05, 1.747567148413509e-05, 0.0005208490765653551, 1.3603060324385297e-05, 1.1510511285450775e-05, 0.9361252188682556, 9.259245416615158e-06, 1.13436481115059e-05, 5.4451925279863644e-06], "target_probs": 0.9367974996566772}}


{"result": {"time": "2021-02-21 11:56:34.541515", "n_pass": [494, 82, 47], "n_token": 75, "loss": [0.6778362989425659, 0.05201892554759979], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "=", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 34, "repair_targets": [1, 24, 26, 49, 51, 67], "repair_candidates": [9, 13, 14, 22, 32, 47, 65, 69, 1, 24, 26, 49, 51, 67, 12, 3, 40, 44, 53, 55, 60, 61, 71, 73, 2, 15, 17, 20, 37, 39, 45, 56, 58, 63, 6, 28, 30, 0, 11]}}
{"prediction": {"error_location": 0.5077142715454102, "repair_targets": [0.0003685637784656137, 6.71429224894382e-05, 1.0933165867754724e-05, 7.687687320867553e-05, 4.208445534459315e-05, 0.9487453103065491], "repair_candidates": [0.0028504517395049334, 0.0003685637784656137, 0.0002722485223785043, 0.0011380725773051381, 0.001287750550545752, 0.020225828513503075, 0.00046630497672595084, 6.974691495997831e-05, 1.7354690498905256e-05, 4.368789814179763e-05, 4.193927907181205e-06, 0.0015990788815543056, 1.0381081665400416e-05, 7.760628068353981e-05, 6.71429224894382e-05, 1.0933165867754724e-05, 0.01739954948425293, 0.0012597739696502686, 0.0012350714532658458, 7.857985110604204e-06, 4.667523171519861e-06, 8.093495125649497e-06, 0.00010211295739281923, 1.20569611681276e-05, 0.0005904242279939353, 7.687687320867553e-05, 4.208445534459315e-05, 0.001204499858431518, 0.000138090064865537, 3.069603189942427e-05, 2.1343419575714506e-05, 1.861488817667123e-05, 0.00054235226707533, 1.3998476788401604e-05, 1.2538333066913765e-05, 0.9487453103065491, 8.925492693379056e-06, 1.0713635674619582e-05, 5.0565081437525805e-06], "target_probs": 0.9493108987808228}}


{"result": {"time": "2021-02-21 11:56:34.745342", "n_pass": [517, 84, 48], "n_token": 74, "loss": [0.796448826789856, 0.059890005737543106], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", ",", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 33, "repair_targets": [1, 23, 25, 48, 50, 66], "repair_candidates": [8, 12, 13, 21, 31, 46, 64, 68, 1, 23, 25, 48, 50, 66, 11, 3, 39, 43, 52, 54, 59, 60, 70, 72, 2, 14, 16, 19, 36, 38, 44, 55, 57, 62, 5, 27, 29, 0, 10]}}
{"prediction": {"error_location": 0.45092734694480896, "repair_targets": [0.0002496674132999033, 9.760756074683741e-05, 9.76266892394051e-06, 8.624383190181106e-05, 3.098063825746067e-05, 0.9413938522338867], "repair_candidates": [0.0032350136898458004, 0.0002496674132999033, 0.0002664949279278517, 0.0014194869436323643, 0.0023482225369662046, 0.01688288152217865, 0.0008424787665717304, 9.82620840659365e-05, 2.1266074327286333e-05, 4.191911648376845e-05, 4.7485114009759855e-06, 0.0022118177730590105, 1.62864616868319e-05, 6.0501679399749264e-05, 9.760756074683741e-05, 9.76266892394051e-06, 0.025655319914221764, 0.0011175761464983225, 0.0008813219610601664, 7.022598310868489e-06, 4.274461389286444e-06, 9.048999345395714e-06, 0.00010137748904526234, 1.3882102393836249e-05, 0.0005722480127587914, 8.624383190181106e-05, 3.098063825746067e-05, 0.0014434551121667027, 0.00013197514635976404, 3.371767161297612e-05, 2.013909579545725e-05, 1.564489139127545e-05, 0.000621652405243367, 1.6009025785024278e-05, 1.2145504115324002e-05, 0.9413938522338867, 8.357710612472147e-06, 1.279641583096236e-05, 4.499141596170375e-06], "target_probs": 0.9418681263923645}}


{"result": {"time": "2021-02-21 11:56:34.847623", "n_pass": [518, 85, 49], "n_token": 73, "loss": [0.9272910356521606, 0.055412113666534424], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 32, "repair_targets": [1, 22, 24, 47, 49, 65], "repair_candidates": [7, 11, 12, 20, 30, 45, 63, 67, 1, 22, 24, 47, 49, 65, 10, 3, 38, 42, 51, 53, 58, 59, 69, 71, 2, 13, 15, 18, 35, 37, 43, 54, 56, 61, 4, 26, 28, 0, 9]}}
{"prediction": {"error_location": 0.39562395215034485, "repair_targets": [0.00025622863904573023, 0.0001149586823885329, 1.5958048606989905e-05, 9.758899977896363e-05, 5.001147656003013e-05, 0.9455603957176208], "repair_candidates": [0.003453961107879877, 0.00025622863904573023, 0.0002965231833513826, 0.001127593219280243, 0.0010187189327552915, 0.013038363307714462, 0.0012513676192611456, 0.0001077873821486719, 2.086614586005453e-05, 4.342276224633679e-05, 4.672011982620461e-06, 0.00213543139398098, 1.359771158604417e-05, 0.00010057165491161868, 0.0001149586823885329, 1.5958048606989905e-05, 0.02473525144159794, 0.0014045769348740578, 0.0012363961432129145, 8.638798135507386e-06, 5.245005013421178e-06, 1.0575073247309774e-05, 0.00011550595081644133, 1.3426251825876534e-05, 0.000691033957991749, 9.758899977896363e-05, 5.001147656003013e-05, 0.0019725020974874496, 0.0001749848888721317, 4.3882271711481735e-05, 2.745828533079475e-05, 2.117720214300789e-05, 0.0007713682134635746, 1.425616483174963e-05, 1.5234554666676559e-05, 0.9455603957176208, 1.2572973901114892e-05, 1.368576158711221e-05, 4.321222149883397e-06], "target_probs": 0.9460951685905457}}


{"result": {"time": "2021-02-21 11:56:35.751182", "n_pass": [628, 94, 50], "n_token": 72, "loss": [0.6949917674064636, 0.06371176987886429], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", ",", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 31, "repair_targets": [1, 21, 23, 46, 48, 64], "repair_candidates": [7, 11, 12, 19, 29, 44, 62, 66, 1, 21, 23, 46, 48, 64, 10, 3, 37, 41, 50, 52, 57, 58, 68, 70, 2, 13, 15, 18, 34, 36, 42, 53, 55, 60, 4, 25, 27, 0, 9]}}
{"prediction": {"error_location": 0.49907854199409485, "repair_targets": [0.00019582563254516572, 0.0002444286074023694, 1.2093212717445567e-05, 8.254664135165513e-05, 4.751084998133592e-05, 0.9376929998397827], "repair_candidates": [0.0033411982003599405, 0.00019582563254516572, 0.0002078684774460271, 0.0011789175914600492, 0.0013310472713783383, 0.015302279032766819, 0.0020852540619671345, 0.00015015946701169014, 2.1564159396803007e-05, 5.988632983644493e-05, 4.004916263511404e-06, 0.0006709500448778272, 5.26226322108414e-05, 1.2912860256619751e-05, 0.0002444286074023694, 1.2093212717445567e-05, 0.031627580523490906, 0.0012582065537571907, 0.0011549894697964191, 7.4692361522465944e-06, 4.926065685140202e-06, 8.253101441368926e-06, 0.00010826798097696155, 1.2508880899986252e-05, 0.0005703822826035321, 8.254664135165513e-05, 4.751084998133592e-05, 0.0015378219541162252, 0.00016170836170203984, 4.179886673227884e-05, 2.8857959478045814e-05, 2.1117504729772918e-05, 0.0006976064760237932, 1.3630455214297399e-05, 1.6281888747471385e-05, 0.9376929998397827, 1.4247723811422475e-05, 1.5719950170023367e-05, 4.656332293961896e-06], "target_probs": 0.9382753968238831}}


{"result": {"time": "2021-02-21 11:56:35.851481", "n_pass": [629, 95, 51], "n_token": 71, "loss": [0.46868887543678284, 0.18890215456485748], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "=", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 30, "repair_targets": [1, 20, 22, 45, 47, 63], "repair_candidates": [7, 11, 12, 19, 28, 43, 61, 65, 1, 20, 22, 45, 47, 63, 10, 3, 36, 40, 49, 51, 56, 57, 67, 69, 2, 13, 15, 18, 33, 35, 41, 52, 54, 59, 4, 24, 26, 0, 9]}}
{"prediction": {"error_location": 0.6258222460746765, "repair_targets": [0.0007245648303069174, 0.01166108064353466, 3.473114702501334e-05, 5.9773465181933716e-05, 9.79025790002197e-05, 0.8152894973754883], "repair_candidates": [0.012096280232071877, 0.0007245648303069174, 0.000827000942081213, 0.004431527107954025, 0.004892975091934204, 0.06858933717012405, 0.006873813923448324, 0.00044642420834861696, 7.278013799805194e-05, 0.00023928411246743053, 1.7573398508829996e-05, 0.011265557259321213, 7.718438428128138e-05, 0.0013593301409855485, 0.01166108064353466, 3.473114702501334e-05, 0.049906693398952484, 0.003293399466201663, 0.0041582416743040085, 3.0020350095583126e-05, 1.5583786080242135e-05, 2.3261462047230452e-05, 0.00014235723938327283, 1.796118522179313e-05, 0.0006024735630489886, 5.9773465181933716e-05, 9.79025790002197e-05, 0.001847579376772046, 0.0002854704507626593, 7.525394903495908e-05, 3.880589429172687e-05, 3.818608820438385e-05, 0.0003357853274792433, 1.5773724953760393e-05, 2.9380998967099003e-05, 0.8152894973754883, 3.7377962144091725e-05, 3.7527082895394415e-05, 1.2227864317537751e-05], "target_probs": 0.8278675079345703}}


{"result": {"time": "2021-02-21 11:56:35.952543", "n_pass": [631, 96, 52], "n_token": 70, "loss": [0.6208192706108093, 0.10045066475868225], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "=", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 29, "repair_targets": [1, 20, 21, 44, 46, 62], "repair_candidates": [7, 11, 12, 19, 27, 42, 60, 64, 1, 20, 21, 44, 46, 62, 10, 3, 35, 39, 48, 50, 55, 56, 66, 68, 2, 13, 15, 18, 32, 34, 40, 51, 53, 58, 4, 23, 25, 0, 9]}}
{"prediction": {"error_location": 0.5375039577484131, "repair_targets": [0.00019016131409443915, 6.3109096117841545e-06, 8.248343874583952e-06, 7.354459376074374e-05, 3.064853808609769e-05, 0.9041208028793335], "repair_candidates": [0.003118362743407488, 0.00019016131409443915, 0.00037947267992421985, 0.0027716755867004395, 0.0015421241987496614, 0.0356362983584404, 0.0028133036103099585, 0.0001066312615876086, 3.819120320258662e-05, 3.659079084172845e-05, 1.6132162272697315e-06, 0.0029172461945563555, 6.9456564233405516e-06, 1.9584182155085728e-05, 6.3109096117841545e-06, 8.248343874583952e-06, 0.040201812982559204, 0.0011885036947205663, 0.0016407639486715198, 9.654314453655388e-06, 5.0029211706714705e-06, 7.603920494148042e-06, 0.00011329771223245189, 1.3159940863261e-05, 0.0003688697761390358, 7.354459376074374e-05, 3.064853808609769e-05, 0.0017107828753069043, 0.00015570875257253647, 4.268027259968221e-05, 2.9008322599111125e-05, 1.447875183657743e-05, 0.0006129829562269151, 1.4464784726442304e-05, 1.40313059091568e-05, 0.9041208028793335, 1.532104579382576e-05, 1.8675029423320666e-05, 5.433375463326229e-06], "target_probs": 0.9044297337532043}}


{"result": {"time": "2021-02-21 11:56:36.149772", "n_pass": [635, 98, 53], "n_token": 69, "loss": [0.5479134321212769, 0.06521910429000854], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ")", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 43, 45, 61], "repair_candidates": [7, 11, 12, 19, 26, 41, 59, 63, 1, 20, 21, 43, 45, 61, 10, 3, 34, 38, 47, 49, 54, 55, 65, 67, 2, 13, 15, 18, 31, 33, 39, 50, 52, 57, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.578154981136322, "repair_targets": [0.0002182727912440896, 1.233608963957522e-05, 1.1120479030068964e-05, 7.107728742994368e-05, 3.28318310494069e-05, 0.936516523361206], "repair_candidates": [0.0034823077730834484, 0.0002182727912440896, 0.000433133274782449, 0.0029672393575310707, 0.0016192991752177477, 0.038246575742959976, 0.0026008603163063526, 0.00010829045641003177, 3.906767233274877e-05, 4.459715273696929e-05, 2.3459251679014415e-06, 0.00616090465337038, 9.656196198193356e-06, 3.3334039471810684e-05, 1.233608963957522e-05, 1.1120479030068964e-05, 0.0014616800472140312, 0.0010168296284973621, 0.0016998001374304295, 8.487482773489319e-06, 4.797110705112573e-06, 7.86682176112663e-06, 0.00011311485286569223, 1.4385906979441643e-05, 0.0003614771703723818, 7.107728742994368e-05, 3.28318310494069e-05, 0.001716666854918003, 0.0001752393291098997, 4.508740676101297e-05, 3.0649716791231185e-05, 1.7789634512155317e-05, 0.0006425239844247699, 1.5159676877374295e-05, 1.5853378499741666e-05, 0.936516523361206, 1.6590225641266443e-05, 2.041759762505535e-05, 5.891106411581859e-06], "target_probs": 0.9368621706962585}}


{"result": {"time": "2021-02-21 11:56:36.444388", "n_pass": [641, 101, 54], "n_token": 68, "loss": [0.8140329122543335, 0.07780250906944275], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "#INDENT#", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 42, 44, 60], "repair_candidates": [7, 11, 12, 19, 26, 40, 58, 62, 1, 20, 21, 42, 44, 60, 10, 3, 33, 37, 46, 48, 53, 54, 64, 66, 2, 13, 15, 18, 30, 32, 38, 49, 51, 56, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.44306766986846924, "repair_targets": [0.0002638943260535598, 1.9671937479870394e-05, 1.3401835531112738e-05, 5.408996730693616e-05, 2.42093392444076e-05, 0.9247718453407288], "repair_candidates": [0.004205689299851656, 0.0002638943260535598, 0.0005258683231659234, 0.0036753425374627113, 0.001992724370211363, 0.04726669564843178, 0.0030695297755301, 0.00012721336679533124, 4.766008350998163e-05, 5.965089439996518e-05, 2.947329903690843e-06, 0.007751659490168095, 1.1428683137637563e-05, 4.722352605313063e-05, 1.9671937479870394e-05, 1.3401835531112738e-05, 0.0007226740126498044, 0.000544025911949575, 0.0014470582827925682, 3.952862971345894e-05, 3.7439858715515584e-06, 6.405440672097029e-06, 9.998231689678505e-05, 1.4231407476472668e-05, 0.00028485897928476334, 5.408996730693616e-05, 2.42093392444076e-05, 0.0018833786016330123, 0.00021950103109702468, 5.536840035347268e-05, 3.619138078647666e-05, 1.787091423466336e-05, 0.0006113507552072406, 1.716136102913879e-05, 1.7604254026082344e-05, 0.9247718453407288, 1.9525925381458364e-05, 2.2702653950545937e-05, 6.130496785772266e-06], "target_probs": 0.9251471161842346}}


{"result": {"time": "2021-02-21 11:56:36.931812", "n_pass": [649, 106, 55], "n_token": 67, "loss": [0.79386967420578, 0.07420723885297775], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 41, 43, 59], "repair_candidates": [7, 11, 12, 19, 26, 39, 57, 61, 1, 20, 21, 41, 43, 59, 10, 3, 33, 36, 45, 47, 52, 53, 63, 65, 2, 13, 15, 18, 30, 32, 37, 48, 50, 55, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.4520919620990753, "repair_targets": [0.0002548334887251258, 1.753109972923994e-05, 1.1989688573521562e-05, 4.0931998228188604e-05, 1.5400572010548785e-05, 0.9281385540962219], "repair_candidates": [0.004083988256752491, 0.0002548334887251258, 0.0005111805512569845, 0.003551390953361988, 0.0018979572923853993, 0.04519038274884224, 0.0030368762090802193, 0.00012242178490851074, 4.654509757529013e-05, 5.551710637519136e-05, 2.7011924430553336e-06, 0.00736057898029685, 1.1023309525626246e-05, 4.382756378618069e-05, 1.753109972923994e-05, 1.1989688573521562e-05, 0.0006818959373049438, 0.000488592719193548, 0.0011499271495267749, 2.7122627216158435e-05, 2.1549137727561174e-06, 3.2749642286944436e-06, 5.5948636145330966e-05, 1.875074303825386e-05, 0.0002058360114460811, 4.0931998228188604e-05, 1.5400572010548785e-05, 0.001960947411134839, 0.00024101510643959045, 5.8849123888649046e-05, 3.6168417864246294e-05, 1.54246899910504e-05, 0.0005762527580372989, 1.737099955789745e-05, 1.651266575208865e-05, 0.9281385540962219, 2.0341127310530283e-05, 2.3834156309021637e-05, 6.196526555868331e-06], "target_probs": 0.9284792542457581}}


{"result": {"time": "2021-02-21 11:56:37.029289", "n_pass": [652, 107, 56], "n_token": 66, "loss": [0.6587455868721008, 0.09991408884525299], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", ",", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 40, 42, 58], "repair_candidates": [7, 11, 12, 19, 26, 38, 56, 60, 1, 20, 21, 40, 42, 58, 10, 3, 33, 36, 44, 46, 51, 52, 62, 64, 2, 13, 15, 18, 30, 32, 37, 47, 49, 54, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.5175000429153442, "repair_targets": [0.00028535551973618567, 3.0318124117911793e-05, 1.7480644601164386e-05, 3.0115659683360718e-05, 8.232314030465204e-06, 0.9045436978340149], "repair_candidates": [0.004369784612208605, 0.00028535551973618567, 0.0006601324421353638, 0.004597832448780537, 0.002101403893902898, 0.06324642151594162, 0.003346131881698966, 0.00011132381041534245, 5.840071753482334e-05, 6.0049816966056824e-05, 2.9055245249764994e-06, 0.011325595900416374, 1.384484949085163e-05, 6.869104254292324e-05, 3.0318124117911793e-05, 1.7480644601164386e-05, 0.0005242323386482894, 0.0003456353733781725, 0.0011303339852020144, 2.537071668484714e-05, 3.0003468509676168e-06, 2.941770617326256e-06, 1.5910633010207675e-05, 0.00016845243226271123, 4.3342071876395494e-05, 3.0115659683360718e-05, 8.232314030465204e-06, 0.002042054198682308, 0.00026675104163587093, 5.25097202626057e-05, 2.4913337256293744e-05, 1.2919767868879717e-05, 0.00038333330303430557, 1.542386416986119e-05, 1.5910252841422334e-05, 0.9045436978340149, 2.0165065507171676e-05, 2.280486296513118e-05, 6.268664947128855e-06], "target_probs": 0.9049151539802551}}


{"result": {"time": "2021-02-21 11:56:37.128164", "n_pass": [654, 108, 57], "n_token": 65, "loss": [0.5820702910423279, 0.10232234746217728], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "=", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 41, 57], "repair_candidates": [7, 11, 12, 19, 26, 38, 55, 59, 1, 20, 21, 39, 41, 57, 10, 3, 33, 36, 43, 45, 50, 51, 61, 63, 2, 13, 15, 18, 30, 32, 37, 46, 48, 53, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.5587404370307922, "repair_targets": [0.0003303532721474767, 3.2185249438043684e-05, 1.968323158507701e-05, 0.0018660119967535138, 6.1089658629498444e-06, 0.9004841446876526], "repair_candidates": [0.005066941026598215, 0.0003303532721474767, 0.0007252183277159929, 0.004819856490939856, 0.002335877390578389, 0.06320419907569885, 0.003479180857539177, 0.0001305084879277274, 6.0283207858446985e-05, 7.153055048547685e-05, 3.5294699500809656e-06, 0.012260857969522476, 1.584530036780052e-05, 7.610503234900534e-05, 3.2185249438043684e-05, 1.968323158507701e-05, 0.0007107607671059668, 0.0004788493679370731, 0.000992743531242013, 2.8676704459940083e-05, 3.087151981162606e-06, 3.6456979159993352e-06, 3.4058648452628404e-05, 8.940193220041692e-05, 0.00026659632567316294, 0.0018660119967535138, 6.1089658629498444e-06, 0.0014385734684765339, 0.0003604114754125476, 5.793511081719771e-05, 3.124658178421669e-05, 1.679557863099035e-05, 0.0004106209089513868, 1.5673575035179965e-05, 1.688400334387552e-05, 0.9004841446876526, 2.2991625883150846e-05, 2.5281289708800614e-05, 7.381232990155695e-06], "target_probs": 0.9027385115623474}}


{"result": {"time": "2021-02-21 11:56:37.224183", "n_pass": [656, 109, 58], "n_token": 64, "loss": [0.7987236976623535, 0.1595763862133026], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "=", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 56], "repair_candidates": [7, 11, 12, 19, 26, 38, 54, 58, 1, 20, 21, 39, 40, 56, 10, 3, 33, 36, 42, 44, 49, 50, 60, 62, 2, 13, 15, 18, 30, 32, 37, 45, 47, 52, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.44990280270576477, "repair_targets": [0.00043226638808846474, 3.538485907483846e-05, 2.101770405715797e-05, 1.4179869367580977e-06, 7.260754046001239e-06, 0.8520074486732483], "repair_candidates": [0.006241452414542437, 0.00043226638808846474, 0.001113644801080227, 0.006935466546565294, 0.002756852190941572, 0.1057402715086937, 0.004563235677778721, 0.00011916633957298473, 8.769420674070716e-05, 7.429298420902342e-05, 3.33993261847354e-06, 0.014944548718631268, 1.8542081306804903e-05, 8.485035505145788e-05, 3.538485907483846e-05, 2.101770405715797e-05, 0.0007588385487906635, 0.0008674257551319897, 0.0004063327214680612, 2.172600943595171e-05, 2.8960112103959545e-06, 5.1953848014818504e-06, 3.704879782162607e-05, 4.853427071793703e-06, 5.9473254623299e-06, 1.4179869367580977e-06, 7.260754046001239e-06, 0.0014555873349308968, 0.0005700512556359172, 9.83786812867038e-05, 2.904769644374028e-05, 5.5798467656131834e-05, 0.00036904303124174476, 1.3709977793041617e-05, 3.3909000194398686e-05, 0.8520074486732483, 3.300871321698651e-05, 3.029717663594056e-05, 1.2768237866112031e-05], "target_probs": 0.8525048494338989}}


{"result": {"time": "2021-02-21 11:56:37.413800", "n_pass": [660, 111, 59], "n_token": 63, "loss": [1.0479626655578613, 0.0969400480389595], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "(", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 55], "repair_candidates": [7, 11, 12, 19, 26, 38, 53, 57, 1, 20, 21, 39, 40, 55, 10, 3, 33, 36, 42, 43, 48, 49, 59, 61, 2, 13, 15, 18, 30, 32, 37, 44, 46, 51, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.3506513833999634, "repair_targets": [0.00027665591915138066, 1.9781486116698943e-05, 1.4689603631268255e-05, 9.469086990065989e-07, 4.068409452884225e-06, 0.9072942733764648], "repair_candidates": [0.004173228982836008, 0.00027665591915138066, 0.0006898112478666008, 0.004649797920137644, 0.0019531244179233909, 0.06616257131099701, 0.0032752424012869596, 8.546779281459749e-05, 5.695544314221479e-05, 4.6205983380787075e-05, 2.1584687601716723e-06, 0.009415976703166962, 1.185795645142207e-05, 5.0101676606573164e-05, 1.9781486116698943e-05, 1.4689603631268255e-05, 0.0004926225519739091, 0.000565465830732137, 0.00026467637508176267, 1.3863079402653966e-05, 1.8502814782550558e-06, 3.922492396668531e-06, 2.6198589694104157e-05, 3.87961608794285e-06, 5.032508852309547e-06, 9.469086990065989e-07, 4.068409452884225e-06, 4.2766168917296454e-05, 2.3325454094447196e-05, 0.00013630987086798996, 9.928218787536025e-06, 1.4587943041988183e-05, 0.0001222601131303236, 7.590886525576934e-06, 3.000425385835115e-05, 0.9072942733764648, 2.1853802536497824e-05, 2.283600224473048e-05, 8.119411177176517e-06], "target_probs": 0.9076104164123535}}


{"result": {"time": "2021-02-21 11:56:37.603725", "n_pass": [665, 113, 60], "n_token": 62, "loss": [0.9564954042434692, 0.08304993063211441], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "=", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 54], "repair_candidates": [7, 11, 12, 19, 26, 38, 52, 56, 1, 20, 21, 39, 40, 54, 10, 3, 33, 36, 42, 43, 47, 48, 58, 60, 2, 13, 15, 18, 30, 32, 37, 44, 46, 50, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.3842370808124542, "repair_targets": [0.00022337469272315502, 1.4514677786792163e-05, 1.1008221918018535e-05, 9.502988405074575e-07, 4.383539817354176e-06, 0.9200509786605835], "repair_candidates": [0.0034094746224582195, 0.00022337469272315502, 0.0005503363208845258, 0.0036897568497806787, 0.0015609153779223561, 0.05802616849541664, 0.002630470087751746, 6.439157732529566e-05, 4.6510613174177706e-05, 3.6088997148908675e-05, 1.754788399921381e-06, 0.008126787841320038, 1.073687326424988e-05, 4.010965130873956e-05, 1.4514677786792163e-05, 1.1008221918018535e-05, 0.0003389072371646762, 0.00045820706873200834, 0.0002490751212462783, 1.1905337487405632e-05, 1.6354492800019216e-06, 3.6644082683778834e-06, 2.397117714281194e-05, 3.7410679851745954e-06, 3.956476120947627e-06, 9.502988405074575e-07, 4.383539817354176e-06, 6.250206206459552e-05, 2.3040724045131356e-05, 8.376934420084581e-05, 9.187194336846005e-06, 1.0942051630991045e-05, 0.00015344252460636199, 3.2845164241734892e-06, 2.5350307623739354e-05, 0.9200509786605835, 1.6738089470891282e-05, 1.300861458730651e-05, 4.921867002849467e-06], "target_probs": 0.9203051924705505}}


{"result": {"time": "2021-02-21 11:56:37.697939", "n_pass": [668, 114, 61], "n_token": 61, "loss": [0.8662893772125244, 0.11185657978057861], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "(", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 53], "repair_candidates": [7, 11, 12, 19, 26, 38, 51, 55, 1, 20, 21, 39, 40, 53, 10, 3, 33, 36, 42, 43, 47, 48, 57, 59, 2, 13, 15, 18, 30, 32, 37, 44, 46, 49, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.42050901055336, "repair_targets": [0.0002871499746106565, 1.5748655641800724e-05, 1.2353882084426004e-05, 1.5814476910236408e-06, 8.465432983939536e-06, 0.8938471674919128], "repair_candidates": [0.004318260587751865, 0.0002871499746106565, 0.0007361145108006895, 0.004974635783582926, 0.0020735657308250666, 0.07605598121881485, 0.003462433349341154, 8.63764071254991e-05, 6.19618731434457e-05, 4.390060712466948e-05, 2.4490905161655974e-06, 0.012246306985616684, 1.272958888876019e-05, 3.902322714566253e-05, 1.5748655641800724e-05, 1.2353882084426004e-05, 0.0003617240290623158, 0.0005906314472667873, 0.00032802802161313593, 1.470847928430885e-05, 2.0351476450741757e-06, 4.106268534087576e-06, 4.518302739597857e-05, 6.282114100031322e-06, 5.7154152273142245e-06, 1.5814476910236408e-06, 8.465432983939536e-06, 5.855538620380685e-05, 2.6270961825503036e-05, 0.0001354905980406329, 2.902865526266396e-05, 8.308888027386274e-06, 6.80256198393181e-06, 2.275005499541294e-06, 3.451277007116005e-05, 0.8938471674919128, 2.37876083701849e-05, 2.2044991055736318e-05, 8.22050242277328e-06], "target_probs": 0.8941724896430969}}


{"result": {"time": "2021-02-21 11:56:37.791324", "n_pass": [670, 115, 62], "n_token": 60, "loss": [0.8118821382522583, 0.15001457929611206], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", ",", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 52], "repair_candidates": [7, 11, 12, 19, 26, 38, 50, 54, 1, 20, 21, 39, 40, 52, 10, 3, 33, 36, 42, 43, 47, 48, 56, 58, 2, 13, 15, 18, 30, 32, 37, 44, 46, 49, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.444021612405777, "repair_targets": [0.00035421259235590696, 2.394052717136219e-05, 1.5721063391538337e-05, 9.157460567621456e-07, 2.1468697468662867e-06, 0.8602985143661499], "repair_candidates": [0.004921170882880688, 0.00035421259235590696, 0.0009901379235088825, 0.005902532953768969, 0.002152172150090337, 0.09506075829267502, 0.0035503252875059843, 8.434656047029421e-05, 7.691628707107157e-05, 5.657794463331811e-05, 2.8037759420840302e-06, 0.024785391986370087, 1.6300180504913442e-05, 6.056928032194264e-05, 2.394052717136219e-05, 1.5721063391538337e-05, 0.0003794155200012028, 0.0005770910647697747, 0.00033422952401451766, 1.40813745019841e-05, 1.962691612789058e-06, 2.7951634820055915e-06, 1.559106385684572e-05, 2.499430138414027e-06, 3.5585642308433307e-06, 9.157460567621456e-07, 2.1468697468662867e-06, 3.078777444898151e-05, 1.732954115141183e-05, 0.00010563177784206346, 3.659979847725481e-05, 1.1374619134585373e-05, 1.5153334516071482e-06, 5.9426970437925775e-06, 2.337281512154732e-05, 0.8602985143661499, 3.3014432119671255e-05, 2.8376802220009267e-05, 1.94361709873192e-05], "target_probs": 0.8606954216957092}}


{"result": {"time": "2021-02-21 11:56:37.885586", "n_pass": [672, 116, 63], "n_token": 59, "loss": [0.6451199054718018, 0.046289894729852676], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "=", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 51], "repair_candidates": [7, 11, 12, 19, 26, 38, 50, 53, 1, 20, 21, 39, 40, 51, 10, 3, 33, 36, 42, 43, 47, 48, 55, 57, 2, 13, 15, 18, 30, 32, 37, 44, 46, 49, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.5245997309684753, "repair_targets": [0.00011895153147634119, 8.495687325194012e-06, 5.287704425427364e-06, 8.285042554234678e-07, 1.526846176602703e-06, 0.9546300172805786], "repair_candidates": [0.001605724566616118, 0.00011895153147634119, 0.0003389440826140344, 0.0020095519721508026, 0.0007187218288891017, 0.03095996379852295, 0.001284339465200901, 2.9790733606205322e-05, 2.1972133254166692e-05, 1.5194012121355627e-05, 9.548127763991943e-07, 0.007056639529764652, 4.822647952096304e-06, 1.8179925973527133e-05, 8.495687325194012e-06, 5.287704425427364e-06, 0.00016421008331235498, 0.00018747872672975063, 0.00013276976824272424, 5.062895525043132e-06, 5.74777629935852e-07, 1.0276484090354643e-06, 4.571058980218368e-06, 1.2048390090058092e-06, 3.6770561564480886e-06, 8.285042554234678e-07, 1.526846176602703e-06, 2.055247750831768e-05, 8.350106327270623e-06, 7.02868273947388e-05, 1.2606325071828905e-05, 6.673532425338635e-06, 1.1252503782088752e-06, 3.6615613225876587e-06, 0.0005071028717793524, 0.9546300172805786, 1.6617323126411065e-05, 8.715057447261643e-06, 1.379480727337068e-05], "target_probs": 0.9547651410102844}}


{"result": {"time": "2021-02-21 11:56:38.160958", "n_pass": [678, 119, 64], "n_token": 58, "loss": [1.0052000284194946, 0.6818130016326904], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 51], "repair_candidates": [7, 11, 12, 19, 26, 38, 50, 53, 1, 20, 21, 39, 40, 51, 10, 3, 33, 36, 42, 43, 47, 48, 55, 56, 2, 13, 15, 18, 30, 32, 37, 44, 46, 49, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.3659714162349701, "repair_targets": [0.0011860185768455267, 6.0889567976119e-05, 4.289561547921039e-05, 5.1510214689187706e-06, 1.3897469216317404e-05, 0.5043904781341553], "repair_candidates": [0.016439754515886307, 0.0011860185768455267, 0.0031541844364255667, 0.019359063357114792, 0.0068519227206707, 0.36710572242736816, 0.009482767432928085, 0.0002528905461076647, 0.00018889909551944584, 0.0001380319445161149, 8.848728612065315e-06, 0.06403232365846634, 4.324013207224198e-05, 0.0001730789226712659, 6.0889567976119e-05, 4.289561547921039e-05, 0.0015248684212565422, 0.0023151738569140434, 0.0011456659995019436, 3.969213139498606e-05, 6.9392881414387375e-06, 1.3127903912391048e-05, 8.414154581259936e-05, 1.7089290849980898e-05, 1.8778688172460534e-05, 5.1510214689187706e-06, 1.3897469216317404e-05, 0.0002925259177573025, 0.000162253447342664, 0.0007631791522726417, 0.0001292009255848825, 5.677339868270792e-05, 1.1209867807338014e-05, 1.0415874385216739e-05, 0.00033018580870702863, 0.5043904781341553, 9.318444790551439e-05, 3.2823158107930794e-05, 2.269365177198779e-05], "target_probs": 0.5056993365287781}}


{"result": {"time": "2021-02-21 11:56:38.254570", "n_pass": [680, 120, 65], "n_token": 57, "loss": [1.0567662715911865, 0.6714595556259155], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "return", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 28, "repair_targets": [1, 20, 21, 39, 40, 51], "repair_candidates": [7, 11, 12, 19, 26, 38, 50, 53, 1, 20, 21, 39, 40, 51, 10, 3, 33, 36, 42, 43, 47, 48, 55, 56, 2, 13, 15, 18, 30, 32, 37, 44, 46, 49, 4, 23, 24, 0, 9]}}
{"prediction": {"error_location": 0.3475779592990875, "repair_targets": [0.0012855404056608677, 7.02321485732682e-05, 4.798972076969221e-05, 5.922975560679333e-06, 1.2971065189049114e-05, 0.5095396041870117], "repair_candidates": [0.018473420292139053, 0.0012855404056608677, 0.0029264080803841352, 0.018562329933047295, 0.007312744855880737, 0.3803463280200958, 0.008693156763911247, 0.00025397702120244503, 0.00020466309797484428, 0.00016245694132521749, 9.477388630330097e-06, 0.04402158781886101, 4.140773671679199e-05, 0.00016139958461280912, 7.02321485732682e-05, 4.798972076969221e-05, 0.0016302777221426368, 0.002657541073858738, 0.001342407544143498, 4.3108877434860915e-05, 8.861625246936455e-06, 1.40947631734889e-05, 7.032262510620058e-05, 1.5436226021847688e-05, 1.6731084542698227e-05, 5.922975560679333e-06, 1.2971065189049114e-05, 0.0002723001525737345, 0.00022449737298302352, 0.0007845142390578985, 0.00015425801393575966, 7.467885734513402e-05, 1.2188580512884073e-05, 9.674115972302388e-06, 0.0003487278299871832, 0.5095396041870117, 0.00014858125359751284, 1.8575268768472597e-05, 2.1552867110585794e-05], "target_probs": 0.5109622478485107}}


{"result": {"time": "2021-02-21 11:56:38.802804", "n_pass": [698, 126, 66], "n_token": 56, "loss": [0.7051714658737183, 0.33232221007347107], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "is", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 27, "repair_targets": [1, 19, 20, 38, 39, 50], "repair_candidates": [7, 11, 12, 18, 25, 37, 49, 52, 1, 19, 20, 38, 39, 50, 10, 3, 32, 35, 41, 42, 46, 47, 54, 55, 2, 13, 15, 17, 29, 31, 36, 43, 45, 48, 4, 22, 23, 0, 9]}}
{"prediction": {"error_location": 0.494023859500885, "repair_targets": [0.005226911045610905, 3.85027815354988e-05, 3.594951340346597e-05, 5.442819201562088e-06, 1.2453084309527185e-05, 0.7119369506835938], "repair_candidates": [0.029084958136081696, 0.005226911045610905, 0.015862397849559784, 0.017990270629525185, 0.00962144322693348, 0.1727176159620285, 0.00518942391499877, 0.0001583899575052783, 0.00010856019798666239, 9.59076132858172e-05, 2.1036285033915192e-05, 0.023177890107035637, 8.387802517972887e-05, 0.00016288860933855176, 3.85027815354988e-05, 3.594951340346597e-05, 0.0012699257349595428, 0.002787065226584673, 0.002034164033830166, 6.071866664569825e-05, 7.900804121163674e-06, 1.448527200409444e-05, 8.526344754500315e-05, 2.0833382222917862e-05, 2.0158448023721576e-05, 5.442819201562088e-06, 1.2453084309527185e-05, 0.00028296769596636295, 0.0002084325096802786, 0.0007625467260368168, 0.00012800133845303208, 7.837552402634174e-05, 1.224319203174673e-05, 9.783285349840298e-06, 0.00048221307224594057, 0.7119369506835938, 0.00016173941548913717, 1.961493217095267e-05, 2.263787973788567e-05], "target_probs": 0.7172561883926392}}


{"result": {"time": "2021-02-21 11:56:39.257250", "n_pass": [712, 131, 67], "n_token": 55, "loss": [0.443498432636261, 0.219100683927536], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "None", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 27, "repair_targets": [1, 19, 20, 37, 38, 49], "repair_candidates": [7, 11, 12, 18, 25, 36, 48, 51, 1, 19, 20, 37, 38, 49, 10, 3, 31, 34, 40, 41, 45, 46, 53, 54, 2, 13, 15, 17, 29, 30, 35, 42, 44, 47, 4, 22, 23, 0, 9]}}
{"prediction": {"error_location": 0.6417872905731201, "repair_targets": [0.002999340882524848, 8.468944724882022e-05, 4.506968616624363e-05, 3.716380660989671e-06, 9.093881999433506e-06, 0.8000988960266113], "repair_candidates": [0.019898459315299988, 0.002999340882524848, 0.00793794821947813, 0.011699761264026165, 0.006484163925051689, 0.10116466134786606, 0.003924041986465454, 0.00012497740681283176, 7.204306166386232e-05, 7.41840703994967e-05, 1.563361547596287e-05, 0.014458145946264267, 8.043041452765465e-05, 0.0002678077726159245, 8.468944724882022e-05, 4.506968616624363e-05, 0.000517146778292954, 0.003939754795283079, 0.02424418181180954, 8.60515792737715e-05, 6.609652700717561e-06, 7.364211342064664e-06, 2.2614445697399788e-05, 9.088472324947361e-06, 1.2445069842215162e-05, 3.716380660989671e-06, 9.093881999433506e-06, 0.0002197756402892992, 0.00015336710202973336, 0.0006176640745252371, 0.0001146317008533515, 5.8054527471540496e-05, 8.89424336492084e-06, 7.585068487969693e-06, 0.00040823660674504936, 0.8000988960266113, 9.693362517282367e-05, 1.1723551324394066e-05, 1.4902442671882454e-05], "target_probs": 0.8032408356666565}}


{"result": {"time": "2021-02-21 11:56:39.439645", "n_pass": [716, 133, 68], "n_token": 54, "loss": [0.4496716260910034, 0.17982394993305206], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "chart_class", "parser", "grammar", "trace", "trace", ",", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 27, "repair_targets": [1, 19, 20, 36, 37, 48], "repair_candidates": [7, 11, 12, 18, 25, 35, 47, 50, 1, 19, 20, 36, 37, 48, 10, 3, 31, 33, 39, 40, 44, 45, 52, 53, 2, 13, 15, 17, 29, 30, 34, 41, 43, 46, 4, 22, 23, 0, 9]}}
{"prediction": {"error_location": 0.6378376483917236, "repair_targets": [0.0022626621648669243, 6.918247527210042e-05, 3.824625673587434e-05, 4.726587576442398e-06, 1.330550185230095e-05, 0.8330290913581848], "repair_candidates": [0.018480287864804268, 0.0022626621648669243, 0.004978291690349579, 0.011127457022666931, 0.007152643520385027, 0.07821892946958542, 0.004530337639153004, 0.00014532827481161803, 6.953364209039137e-05, 7.338006253121421e-05, 1.4620972251577768e-05, 0.013366982340812683, 6.949936505407095e-05, 0.00019965400861110538, 6.918247527210042e-05, 3.824625673587434e-05, 0.00046964874491095543, 0.0029753483831882477, 0.021023692563176155, 0.00025390798691660166, 1.5200042071228381e-05, 8.335927304869983e-06, 1.5298393918783404e-05, 9.79212018137332e-06, 2.782710907922592e-05, 4.726587576442398e-06, 1.330550185230095e-05, 0.00019803756731562316, 9.209304698742926e-05, 0.0003645818796940148, 0.0001083980459952727, 5.028905434301123e-05, 7.769716830807738e-06, 7.00811733622686e-06, 0.00040724873542785645, 0.8330290913581848, 9.323398262495175e-05, 1.251416324521415e-05, 1.5601986888214014e-05], "target_probs": 0.8354172706604004}}


{"result": {"time": "2021-02-21 11:56:39.530747", "n_pass": [722, 134, 69], "n_token": 53, "loss": [0.3564316928386688, 0.21779775619506836], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "chart_class", "parser", "grammar", "trace", "trace", "chart_class", "chart_class", "parser", "#INDENT#", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 27, "repair_targets": [1, 19, 20, 36, 37, 47], "repair_candidates": [7, 11, 12, 18, 25, 35, 46, 49, 1, 19, 20, 36, 37, 47, 10, 3, 31, 33, 38, 39, 43, 44, 51, 52, 2, 13, 15, 17, 29, 30, 34, 40, 42, 45, 4, 22, 23, 0, 9]}}
{"prediction": {"error_location": 0.7001701593399048, "repair_targets": [0.0029526439029723406, 9.393814252689481e-05, 4.953323150402866e-05, 6.516198027384235e-06, 4.262846050551161e-05, 0.8011428117752075], "repair_candidates": [0.020190121605992317, 0.0029526439029723406, 0.007620868273079395, 0.01194172352552414, 0.006746652070432901, 0.0957658514380455, 0.0037233582697808743, 0.0001233368384419009, 6.625257810810581e-05, 6.541318725794554e-05, 1.4535439731844235e-05, 0.013495325110852718, 7.064883538987488e-05, 0.00020793938892893493, 9.393814252689481e-05, 4.953323150402866e-05, 0.00044070713920518756, 0.003863627789542079, 0.029881933704018593, 0.00017470236343797296, 6.5278418333036825e-06, 8.0033132690005e-06, 1.5958696167217568e-05, 5.793217042082688e-06, 9.892872185446322e-06, 6.516198027384235e-06, 4.262846050551161e-05, 0.0003293897898402065, 4.720291690318845e-05, 3.373700747033581e-05, 0.00011878144869115204, 5.831473390571773e-05, 1.794977652025409e-05, 1.4415158148040064e-05, 0.0005075159133411944, 0.8011428117752075, 0.00011602479935390875, 1.2480884834076278e-05, 1.689045166131109e-05], "target_probs": 0.8042880892753601}}


{"result": {"time": "2021-02-21 11:56:39.620715", "n_pass": [726, 135, 70], "n_token": 52, "loss": [0.3296063542366028, 0.27440038323402405], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "'\\n    Load a grammar from a file, and build a parser based on that grammar.\\n    The parser depends on the grammar format, and might also depend\\n    on properties of the grammar itself.\\n\\n    The following grammar formats are currently supported:\\n      - ``\\'cfg\\'``  (CFGs: ``CFG``)\\n      - ``\\'pcfg\\'`` (probabilistic CFGs: ``PCFG``)\\n      - ``\\'fcfg\\'`` (feature-based CFGs: ``FeatureGrammar``)\\n\\n    :type grammar_url: str\\n    :param grammar_url: A URL specifying where the grammar is located.\\n        The default protocol is ``\"nltk:\"``, which searches for the file\\n        in the the NLTK data package.\\n    :type trace: int\\n    :param trace: The level of tracing that should be used when\\n        parsing a text.  ``0`` will generate no tracing output;\\n        and higher numbers will produce more verbose tracing output.\\n    :param parser: The class used for parsing; should be ``ChartParser``\\n        or a subclass.\\n        If None, the class depends on the grammar format.\\n    :param chart_class: The class used for storing the chart;\\n        should be ``Chart`` or a subclass.\\n        Only used for CFGs and feature CFGs.\\n        If None, the chart class depends on the grammar format.\\n    :type beam_size: int\\n    :param beam_size: The maximum length for the parser\\'s edge queue.\\n        Only used for probabilistic CFGs.\\n    :param load_args: Keyword parameters used when loading the grammar.\\n        See ``data.load`` for more information.\\n    '", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "chart_class", "parser", "grammar", "trace", "trace", "chart_class", "chart_class", "parser", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 27, "repair_targets": [1, 19, 20, 36, 37, 46], "repair_candidates": [7, 11, 12, 18, 25, 35, 45, 48, 1, 19, 20, 36, 37, 46, 10, 3, 31, 33, 38, 39, 42, 43, 50, 51, 2, 13, 15, 17, 29, 30, 34, 40, 41, 44, 4, 22, 23, 0, 9]}}
{"prediction": {"error_location": 0.7192068696022034, "repair_targets": [0.003424085909500718, 0.00013470748672261834, 6.577464228030294e-05, 6.610361651837593e-06, 5.2996874728705734e-05, 0.7563435435295105], "repair_candidates": [0.024342970922589302, 0.003424085909500718, 0.008600740693509579, 0.014138666912913322, 0.007890217937529087, 0.11215230077505112, 0.004433459136635065, 0.00015028350753709674, 8.061052358243614e-05, 8.723444625502452e-05, 1.827454070735257e-05, 0.017580432817339897, 9.359282557852566e-05, 0.00030447726021520793, 0.00013470748672261834, 6.577464228030294e-05, 0.0005653334083035588, 0.00607654731720686, 0.041774045675992966, 0.00021247041877359152, 9.338967174699064e-06, 1.050405808200594e-05, 1.6435838915640488e-05, 6.421786110877292e-06, 1.2045858056808356e-05, 6.610361651837593e-06, 5.2996874728705734e-05, 0.00029251203523017466, 8.671909017721191e-05, 3.9814556657802314e-05, 0.00014664127957075834, 1.8910624930867925e-05, 6.148767624836182e-06, 8.462792720820289e-06, 0.0006385797751136124, 0.7563435435295105, 0.00014535350783262402, 1.3634704373544082e-05, 1.9053542928304523e-05], "target_probs": 0.7600277066230774}}


{"result": {"time": "2021-02-21 11:56:39.888768", "n_pass": [743, 138, 71], "n_token": 51, "loss": [0.38766586780548096, 0.4111022353172302], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "=", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "chart_class", "parser", "grammar", "trace", "trace", "chart_class", "chart_class", "parser", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 26, "repair_targets": [1, 18, 19, 35, 36, 45], "repair_candidates": [6, 10, 11, 17, 24, 34, 44, 47, 1, 18, 19, 35, 36, 45, 9, 3, 30, 32, 37, 38, 41, 42, 49, 50, 2, 12, 14, 16, 28, 29, 33, 39, 40, 43, 4, 21, 22, 0, 8]}}
{"prediction": {"error_location": 0.6786390542984009, "repair_targets": [0.0032782484777271748, 0.00017621548613533378, 8.10483397799544e-05, 1.110290759243071e-05, 7.45201759855263e-05, 0.6592980027198792], "repair_candidates": [0.023845124989748, 0.0032782484777271748, 0.027321336790919304, 0.05909186601638794, 0.023482898250222206, 0.09960693120956421, 0.02054256945848465, 0.00046632354496978223, 0.00015522823377978057, 0.00018462329171597958, 3.9824335544835776e-05, 0.034486908465623856, 0.0001873758592410013, 0.0004001665220130235, 0.00017621548613533378, 8.10483397799544e-05, 0.00048350522411055863, 0.0029454967007040977, 0.042063698172569275, 0.00021627670503221452, 1.2794794201909099e-05, 1.2693128155660816e-05, 2.5856892534648068e-05, 8.547614015697036e-06, 1.503213479736587e-05, 1.110290759243071e-05, 7.45201759855263e-05, 0.0003937352739740163, 0.00010697064135456458, 4.5518874685512856e-05, 0.00015602775965817273, 2.1216203094809316e-05, 7.946506229927763e-06, 1.0734533134382218e-05, 0.0005022959667257965, 0.6592980027198792, 0.0002002217370318249, 1.6328731362591498e-05, 2.476697409292683e-05], "target_probs": 0.6629191637039185}}


{"result": {"time": "2021-02-21 11:56:40.241260", "n_pass": [754, 142, 72], "n_token": 50, "loss": [1.1584157943725586, 0.4473162889480591], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["grammar_url", "trace", "parser", "chart_class", "beam_size", "#NEWLINE#", "grammar", "=", "grammar_url", "load_args", "grammar", "grammar", "parser", "is", "parser", "parser", "grammar", "trace", "trace", ",", "beam_size", "beam_size", "(", "grammar", ",", "FeatureGrammar", ":", "parser", "parser", "chart_class", "is", "chart_class", "parser", "grammar", "trace", "trace", "chart_class", "chart_class", "parser", "parser", "chart_class", "chart_class", "parser", "grammar", "trace", "=", "grammar", ",", "chart_class", "chart_class"]}}
{"position": {"error_location": 25, "repair_targets": [1, 17, 18, 34, 35, 44], "repair_candidates": [6, 10, 11, 16, 23, 33, 43, 46, 1, 17, 18, 34, 35, 44, 9, 3, 29, 31, 36, 37, 40, 41, 48, 49, 2, 12, 14, 15, 27, 28, 32, 38, 39, 42, 4, 20, 21, 0, 8]}}
{"prediction": {"error_location": 0.3139832019805908, "repair_targets": [0.0024442102294415236, 0.00015032608644105494, 8.448112930636853e-05, 8.269433237728663e-06, 6.558779568877071e-05, 0.6365888118743896], "repair_candidates": [0.01752476580440998, 0.0024442102294415236, 0.02071005292236805, 0.08264832198619843, 0.03256867080926895, 0.17781105637550354, 0.005639048758894205, 0.00015275062469299883, 0.00011567382171051577, 0.00014691369142383337, 3.206774272257462e-05, 3.006897350132931e-05, 8.35540922707878e-05, 0.00024931467487476766, 0.00015032608644105494, 8.448112930636853e-05, 0.0008107539615593851, 0.002546224743127823, 0.018029894679784775, 0.00012966855138074607, 1.0990797818521969e-05, 1.1625149454630446e-05, 2.1094920157338493e-05, 7.753737008897588e-06, 1.1315918527543545e-05, 8.269433237728663e-06, 6.558779568877071e-05, 0.00039302758523263037, 9.684544056653976e-05, 3.34296164510306e-05, 0.000102308185887523, 1.4811897017352749e-05, 5.657340807374567e-06, 9.463489732297603e-06, 0.0004967125714756548, 0.6365888118743896, 0.0001757674472173676, 1.6294299712171778e-05, 2.2442021872848272e-05], "target_probs": 0.6393416523933411}}




Minimal simplified tokens:

['grammar_url', 'trace', 'parser', 'chart_class', 'beam_size', '#NEWLINE#', 'grammar', '=', 'grammar_url', 'load_args', 'grammar', 'grammar', 'parser', 'is', 'parser', 'parser', 'grammar', 'trace', 'trace', ',', 'beam_size', 'beam_size', '(', 'grammar', ',', 'FeatureGrammar', ':', 'parser', 'parser', 'chart_class', 'is', 'chart_class', 'parser', 'grammar', 'trace', 'trace', 'chart_class', 'chart_class', 'parser', 'parser', 'chart_class', 'chart_class', 'parser', 'grammar', 'trace', '=', 'grammar', ',', 'chart_class', 'chart_class']
