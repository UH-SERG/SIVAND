
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "#NEWLINE#", "def _replacer(", "matchobj", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "matchobj", ".", "group", "(", "1", ")", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "name", "in", "os", ".", "environ", ")", ":", "#NEWLINE#", "#INDENT#", "return", "os", ".", "environ", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "matchobj", ".", "group", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"], "error_location": [83], "repair_targets": [2], "repair_candidates": [4, 30, 36, 83, 2, 81], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "GeekTrainer/Flask/Work/Trivia - Module 5/env/Lib/site-packages/pip/_vendor/distlib/_backport/sysconfig.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00015-of-00300", "js_count": 49333, "results": {"model": "rnn", "prob": {"loc": [[0.21195273101329803, 1.1858827747346368e-05, 1.8555378119344823e-05, 2.4805325793408883e-08, 8.040610168791318e-07, 1.303604051372531e-07, 2.7509413413895345e-08, 6.627733455388807e-07, 2.443022424358787e-07, 2.2098438634543527e-09, 9.235909459448521e-08, 3.0966307296154127e-09, 1.8699694919632748e-05, 5.8792983814726085e-09, 1.493488710480051e-08, 4.400541229188093e-07, 1.227613324772392e-06, 2.6904674044203603e-08, 3.897031142230389e-09, 5.793660307062964e-07, 2.5596966768404172e-09, 6.666439400504487e-09, 7.078480734890036e-08, 0.0002639346639625728, 4.629721672699816e-08, 5.768332584921154e-07, 6.136801999900854e-08, 1.3497856343747117e-05, 0.0013087164843454957, 8.466161460773947e-08, 0.0023040405940264463, 2.0903834752061812e-07, 3.819326011011981e-08, 8.830844677731875e-08, 1.2242483471425203e-08, 3.3070723048922446e-08, 0.0008969363407231867, 9.523837007918701e-08, 0.0006932498072274029, 1.8134780788159333e-08, 5.765695831883022e-08, 3.4164852422691183e-06, 2.8242791216825935e-08, 3.1100407227313553e-07, 1.0729998223268922e-07, 1.1063133342759102e-07, 5.4779381031266894e-08, 2.826105856001959e-06, 0.0022650924511253834, 4.976603236173105e-07, 0.00026804106892086565, 1.2844508567866342e-08, 4.9378304538549855e-06, 3.433242454775609e-07, 1.6592103690982185e-07, 9.758860386455126e-08, 7.729961559732601e-09, 7.107597639333108e-07, 0.0008557545370422304, 1.0608085432295411e-07, 1.3312984265212435e-05, 1.099104429158615e-05, 0.00261321640573442, 3.4141774563067884e-07, 5.021556717110798e-07, 3.5681759413819236e-07, 2.186086476285709e-07, 2.087945638606925e-08, 1.0649050636857282e-06, 1.4792456148882138e-08, 5.962508708989844e-08, 1.809945757713649e-07, 0.00011523762805154547, 3.649677893236003e-08, 1.1186146764430305e-07, 4.524890329093978e-08, 4.185110924481705e-08, 3.21682698256609e-08, 3.697110884104404e-08, 2.210683724968021e-08, 7.007164981587266e-08, 0.7329953908920288, 2.9646315624631825e-07, 0.043357543647289276, 3.6244563261789153e-07]], "pointer": [[0.0, 0.0, 0.7654341459274292, 0.0, 0.2178579717874527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010349974036216736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004322805907577276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011740702902898192, 0.0, 0.0008610201766714454, 0.0]], "target": [0.7654341459274292]}, "loss": [3.138274669647217, 0.26731210947036743], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [81]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 13:08:49.056108", "n_pass": [1, 1, 1], "n_token": 85, "loss": [0.3106158971786499, 0.26731210947036743], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "#NEWLINE#", "def _replacer(", "matchobj", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "matchobj", ".", "group", "(", "1", ")", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "name", "in", "os", ".", "environ", ")", ":", "#NEWLINE#", "#INDENT#", "return", "os", ".", "environ", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "matchobj", ".", "group", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 81, "repair_targets": [2], "repair_candidates": [4, 30, 36, 83, 2, 81]}}
{"prediction": {"error_location": 0.7329953908920288, "repair_targets": [0.7654341459274292], "repair_candidates": [0.7654341459274292, 0.2178579717874527, 0.010349974036216736, 0.004322805907577276, 0.0011740702902898192, 0.0008610201766714454], "target_probs": 0.7654341459274292}}


{"result": {"time": "2021-02-21 13:08:49.139485", "n_pass": [10, 2, 2], "n_token": 64, "loss": [0.35444045066833496, 0.19519776105880737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "#NEWLINE#", "def _replacer(", "matchobj", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "matchobj", ".", "group", "(", "1", ")", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "matchobj", ".", "group", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 60, "repair_targets": [2], "repair_candidates": [4, 30, 36, 62, 2, 60]}}
{"prediction": {"error_location": 0.7015659213066101, "repair_targets": [0.8226719498634338], "repair_candidates": [0.8226719498634338, 0.16818661987781525, 0.005871881730854511, 0.0020608645863831043, 0.0007358842412941158, 0.0004727740597445518], "target_probs": 0.8226719498634338}}


{"result": {"time": "2021-02-21 13:08:49.217663", "n_pass": [19, 3, 3], "n_token": 53, "loss": [0.5145998001098633, 0.18525449931621552], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "#NEWLINE#", "def _replacer(", "matchobj", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "matchobj", ".", "group", "(", "1", ")", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 49, "repair_targets": [2], "repair_candidates": [4, 30, 36, 51, 2, 49]}}
{"prediction": {"error_location": 0.5977396965026855, "repair_targets": [0.83089280128479], "repair_candidates": [0.83089280128479, 0.1603284776210785, 0.004176246467977762, 0.0027905437164008617, 0.0012216645991429687, 0.000590313458815217], "target_probs": 0.83089280128479}}


{"result": {"time": "2021-02-21 13:08:49.289849", "n_pass": [21, 4, 4], "n_token": 43, "loss": [0.2311292141675949, 0.15336018800735474], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", ".", "group", "(", "1", ")", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 39, "repair_targets": [2], "repair_candidates": [4, 20, 26, 41, 2, 39]}}
{"prediction": {"error_location": 0.7936369776725769, "repair_targets": [0.8578206896781921], "repair_candidates": [0.8578206896781921, 0.1290222853422165, 0.008479544892907143, 0.002883630571886897, 0.001114925486035645, 0.000678874203003943], "target_probs": 0.8578206896781921}}


{"result": {"time": "2021-02-21 13:08:49.363676", "n_pass": [34, 5, 5], "n_token": 38, "loss": [0.15502767264842987, 0.11626109480857849], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "#NEWLINE#", "if", "(", "name", "in", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 34, "repair_targets": [2], "repair_candidates": [4, 15, 21, 36, 2, 34]}}
{"prediction": {"error_location": 0.8563914895057678, "repair_targets": [0.8902427554130554], "repair_candidates": [0.8902427554130554, 0.09880772233009338, 0.007044243160635233, 0.002385633299127221, 0.0009851555805653334, 0.000534507620614022], "target_probs": 0.8902427554130554}}


{"result": {"time": "2021-02-21 13:08:49.430453", "n_pass": [35, 6, 6], "n_token": 33, "loss": [0.31632450222969055, 0.176722452044487], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 29, "repair_targets": [2], "repair_candidates": [4, 10, 16, 31, 2, 29]}}
{"prediction": {"error_location": 0.7288228869438171, "repair_targets": [0.8380123376846313], "repair_candidates": [0.8380123376846313, 0.06099870800971985, 0.09752979129552841, 0.0025386486668139696, 0.0005339592462405562, 0.00038654214586131275], "target_probs": 0.8380123376846313}}


{"result": {"time": "2021-02-21 13:08:49.623556", "n_pass": [55, 9, 7], "n_token": 30, "loss": [0.49761855602264404, 0.07398681342601776], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "name", "]", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [4, 10, 13, 28, 2, 26]}}
{"prediction": {"error_location": 0.6079768538475037, "repair_targets": [0.9286839365959167], "repair_candidates": [0.9286839365959167, 0.022167392075061798, 0.048604466021060944, 6.240569200599566e-05, 0.000250091718044132, 0.00023165883612819016], "target_probs": 0.9286839365959167}}


{"result": {"time": "2021-02-21 13:08:49.687339", "n_pass": [57, 10, 8], "n_token": 27, "loss": [0.06625784188508987, 0.029143335297703743], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "#UNINDENT#", "#NEWLINE#", "#UNINDENT#", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 23, "repair_targets": [2], "repair_candidates": [4, 10, 13, 25, 2, 23]}}
{"prediction": {"error_location": 0.9358895421028137, "repair_targets": [0.9712772369384766], "repair_candidates": [0.9712772369384766, 0.02123965322971344, 0.007330896332859993, 1.647332464926876e-05, 6.771495827706531e-05, 6.798082904424518e-05], "target_probs": 0.9712772369384766}}


{"result": {"time": "2021-02-21 13:08:49.752851", "n_pass": [58, 11, 9], "n_token": 24, "loss": [0.05715542659163475, 0.011412587948143482], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "return", "_VAR_REPL", ".", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 20, "repair_targets": [2], "repair_candidates": [4, 10, 13, 22, 2, 20]}}
{"prediction": {"error_location": 0.9444472789764404, "repair_targets": [0.9886522889137268], "repair_candidates": [0.9886522889137268, 0.00961378775537014, 0.0016761362785473466, 2.7145511012349743e-06, 2.7326719646225683e-05, 2.7654137738863938e-05], "target_probs": 0.9886522889137268}}


{"result": {"time": "2021-02-21 13:08:49.813938", "n_pass": [59, 12, 10], "n_token": 21, "loss": [0.5125531554222107, 0.022172309458255768], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [4, 10, 13, 19, 2, 17]}}
{"prediction": {"error_location": 0.5989643335342407, "repair_targets": [0.9780716896057129], "repair_candidates": [0.9780716896057129, 0.019299611449241638, 0.002570499898865819, 2.7455084818939213e-06, 2.2787857233197428e-05, 3.259836012148298e-05], "target_probs": 0.9780716896057129}}


{"result": {"time": "2021-02-21 13:08:50.051526", "n_pass": [88, 16, 11], "n_token": 20, "loss": [0.5354253649711609, 0.18272793292999268], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ")", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 16, "repair_targets": [1], "repair_candidates": [3, 9, 12, 18, 1, 16]}}
{"prediction": {"error_location": 0.5854202508926392, "repair_targets": [0.8329947590827942], "repair_candidates": [0.8329947590827942, 0.13883061707019806, 0.027783025056123734, 1.923886884469539e-05, 0.00011273394920863211, 0.00025952071882784367], "target_probs": 0.8329947590827942}}


{"result": {"time": "2021-02-21 13:08:50.173655", "n_pass": [92, 18, 12], "n_token": 19, "loss": [0.6996941566467285, 0.24764491617679596], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#NEWLINE#", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 15, "repair_targets": [1], "repair_candidates": [3, 8, 11, 17, 1, 15]}}
{"prediction": {"error_location": 0.49673721194267273, "repair_targets": [0.7806370854377747], "repair_candidates": [0.7806370854377747, 0.16937518119812012, 0.04965569078922272, 1.6652673366479576e-05, 9.71942936303094e-05, 0.0002181867603212595], "target_probs": 0.7806370854377747}}


{"result": {"time": "2021-02-21 13:08:50.291481", "n_pass": [94, 20, 13], "n_token": 18, "loss": [0.6647648811340332, 0.10704956948757172], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#INDENT#", "'In the string `path`, replace tokens like {some.thing} with the\\n    corresponding value from the map `local_vars`.\\n\\n    If there is no corresponding value, leave the token unchanged.\\n    '", "local_vars", ")", "return", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 14, "repair_targets": [1], "repair_candidates": [3, 7, 10, 16, 1, 14]}}
{"prediction": {"error_location": 0.5143944621086121, "repair_targets": [0.8984811305999756], "repair_candidates": [0.8984811305999756, 0.07886158674955368, 0.02229589968919754, 1.0605887837300543e-05, 0.00012610398698598146, 0.0002247575030196458], "target_probs": 0.8984811305999756}}


{"result": {"time": "2021-02-21 13:08:50.407814", "n_pass": [96, 22, 14], "n_token": 17, "loss": [0.7217383980751038, 0.1774010807275772], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#INDENT#", "local_vars", ")", "return", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 13, "repair_targets": [1], "repair_candidates": [3, 6, 9, 15, 1, 13]}}
{"prediction": {"error_location": 0.48590683937072754, "repair_targets": [0.8374438285827637], "repair_candidates": [0.8374438285827637, 0.12134645879268646, 0.04097643867135048, 1.6641577531117946e-05, 9.009504719870165e-05, 0.00012651211000047624], "target_probs": 0.8374438285827637}}


{"result": {"time": "2021-02-21 13:08:50.814646", "n_pass": [119, 29, 15], "n_token": 16, "loss": [0.5148031711578369, 0.5237697958946228], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#INDENT#", "local_vars", ")", "local_vars", "[", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 12, "repair_targets": [1], "repair_candidates": [3, 6, 8, 14, 1, 12]}}
{"prediction": {"error_location": 0.5976181626319885, "repair_targets": [0.5922835469245911], "repair_candidates": [0.5922835469245911, 0.2084566205739975, 0.19248512387275696, 0.006238423753529787, 0.00015908904606476426, 0.0003772130294237286], "target_probs": 0.5922835469245911}}


{"result": {"time": "2021-02-21 13:08:50.872148", "n_pass": [121, 30, 16], "n_token": 15, "loss": [0.4711434543132782, 0.3504250645637512], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#INDENT#", "local_vars", ")", "local_vars", "sub", "(", "_replacer", ",", "local_vars", ")"]}}
{"position": {"error_location": 11, "repair_targets": [1], "repair_candidates": [3, 6, 8, 13, 1, 11]}}
{"prediction": {"error_location": 0.6242880821228027, "repair_targets": [0.7043886184692383], "repair_candidates": [0.7043886184692383, 0.15826699137687683, 0.13024376332759857, 0.006555987522006035, 0.00033356549101881683, 0.00021099326841067523], "target_probs": 0.7043886184692383}}


{"result": {"time": "2021-02-21 13:08:51.100223", "n_pass": [127, 34, 17], "n_token": 14, "loss": [0.7494027614593506, 0.3635076582431793], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", ":", "#INDENT#", "local_vars", ")", "local_vars", "sub", "(", "_replacer", ",", "local_vars"]}}
{"position": {"error_location": 11, "repair_targets": [1], "repair_candidates": [3, 6, 8, 13, 1, 11]}}
{"prediction": {"error_location": 0.4726487696170807, "repair_targets": [0.6952334046363831], "repair_candidates": [0.6952334046363831, 0.2229895144701004, 0.0773090124130249, 0.003908814862370491, 0.0004083994135726243, 0.00015081999299582094], "target_probs": 0.6952334046363831}}


{"result": {"time": "2021-02-21 13:08:51.272481", "n_pass": [132, 37, 18], "n_token": 13, "loss": [0.6962850689888, 0.26317617297172546], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _subst_vars(", "path", ",", "local_vars", "#INDENT#", "local_vars", ")", "local_vars", "sub", "(", "_replacer", ",", "local_vars"]}}
{"position": {"error_location": 10, "repair_targets": [1], "repair_candidates": [3, 5, 7, 12, 1, 10]}}
{"prediction": {"error_location": 0.4984334409236908, "repair_targets": [0.7686064839363098], "repair_candidates": [0.7686064839363098, 0.12890999019145966, 0.09746252000331879, 0.004222563002258539, 0.0005137354019097984, 0.0002847112191375345], "target_probs": 0.7686064839363098}}




Minimal simplified tokens:

['def _subst_vars(', 'path', ',', 'local_vars', '#INDENT#', 'local_vars', ')', 'local_vars', 'sub', '(', '_replacer', ',', 'local_vars']
