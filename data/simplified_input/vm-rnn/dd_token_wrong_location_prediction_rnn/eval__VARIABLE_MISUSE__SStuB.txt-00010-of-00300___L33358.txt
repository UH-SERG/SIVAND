
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", ")", "=", "map", "(", "(", "lambda", "b", ":", "b", ".", "get_head", "(", ")", ")", ",", "filter", "(", "(", "lambda", "a", ":", "(", "a", ".", "label", "==", "'VP'", ")", ")", ",", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "(", "(", "lambda", "child", ":", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"], "error_location": [85], "repair_targets": [2, 9, 13, 23, 33, 37, 70, 81, 97, 108, 117, 126, 141, 145, 166, 190, 242, 251, 280, 295], "repair_candidates": [85, 200, 256, 284, 299, 311, 228, 275, 2, 9, 13, 23, 33, 37, 70, 81, 97, 108, 117, 126, 141, 145, 166, 190, 242, 251, 280, 295, 151, 196, 219], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "openeventdata/petrarch2/petrarch2/PETRtree.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 33358, "results": {"model": "rnn", "prob": {"loc": [[0.11297851800918579, 1.2114674063923303e-07, 4.6236434059210296e-07, 5.575210959563037e-09, 1.3981200641666192e-09, 8.77967849532979e-08, 6.915622208225614e-08, 1.4903825729106757e-08, 7.55795355189548e-08, 2.721837688568485e-07, 3.259536862643131e-09, 3.5044788404547944e-08, 6.558011911295125e-09, 0.00018021906726062298, 9.63593027591969e-09, 7.124795047275256e-07, 1.414127410725996e-07, 6.440246238526015e-07, 6.009622666169889e-08, 4.857024578086566e-07, 9.36651758820517e-07, 2.314092597544004e-07, 6.750285592715954e-07, 0.0006414493545889854, 9.686711877066045e-08, 9.620027867640601e-07, 1.1813403233418285e-07, 1.5332132079493022e-06, 2.603063876449596e-06, 2.9582881211354106e-07, 3.830315563391196e-06, 1.98877870616343e-07, 8.906039994371895e-08, 8.071875527093653e-06, 4.649874263407128e-09, 6.917019845786854e-08, 7.708780280779592e-09, 6.4975979512382764e-06, 3.0094771119593133e-09, 2.939994026007753e-08, 4.901289152314803e-09, 5.058505792021606e-08, 4.14525766245788e-06, 7.426373116459217e-08, 3.801044613283011e-06, 1.211421817970404e-06, 1.4229159432943561e-06, 2.3853239383697655e-09, 6.286892073603667e-08, 1.7068613189508142e-09, 4.59708715538909e-09, 5.989627904767758e-09, 1.2974658147868467e-07, 1.0555865515016194e-08, 2.5244078827313388e-08, 1.6382723515562247e-06, 6.321329237835016e-08, 1.0856221706490032e-05, 5.908910907237441e-07, 1.2130465165682836e-07, 1.0694960889123806e-10, 1.4265442160876773e-09, 1.5907000488368794e-05, 4.4018246825316965e-09, 1.5144649978537927e-08, 7.585837735746281e-09, 2.58954706566783e-08, 1.4114534430120784e-08, 6.633923632648475e-09, 1.5383964324655608e-08, 0.0006165129598230124, 7.90645948711699e-09, 1.8624418771651108e-06, 1.9864681632952852e-07, 1.6484692366702802e-07, 6.94059636430211e-08, 3.906711299350718e-06, 6.462552448738279e-08, 1.0769877434313457e-07, 2.7988628303887708e-08, 8.1512673943962e-08, 0.0008411838789470494, 8.108032467646353e-09, 1.4811392645697197e-07, 5.793831192590915e-09, 0.004426025785505772, 6.885156267344428e-07, 2.757769834715873e-07, 5.700734817537523e-08, 2.0453624927085912e-07, 3.732669711098424e-06, 1.2768487067660317e-07, 5.791759463136259e-07, 3.950963218812831e-07, 1.0352046331263409e-07, 2.0585861904010017e-08, 1.0377676318285012e-07, 0.003340549301356077, 7.57947802298986e-08, 5.709639481210615e-07, 5.118914714330458e-08, 2.383728769927984e-08, 1.6470707464577572e-07, 1.5729294489119638e-07, 5.61236106477736e-07, 2.489037242980885e-08, 2.8241954552754578e-08, 1.8035979110209155e-07, 0.0021920176222920418, 1.126040860555122e-08, 3.3507874377392e-06, 2.6339813885556396e-08, 2.5397735043952707e-06, 8.236890607804526e-06, 1.1929947163480392e-07, 1.0794242371048313e-06, 2.0020813451537833e-08, 0.0028411014936864376, 8.809373639451223e-07, 6.484307846221782e-08, 2.8161204568277753e-07, 1.9329834231029963e-06, 4.301737277501161e-08, 2.2855908810015535e-07, 8.643414162179397e-08, 1.1531017207744299e-06, 0.0014776221942156553, 8.738318229006836e-07, 8.159597200574353e-06, 6.433649701875765e-08, 1.425056871084962e-05, 1.911662366183009e-06, 1.0966371064569103e-06, 8.36292826988938e-07, 3.761731761642295e-07, 3.1020042001728143e-07, 3.577481209049438e-07, 9.660064961281023e-07, 7.339559005004048e-08, 1.4066488063235738e-07, 1.7491250901002786e-06, 0.002369932597503066, 3.1798938948668365e-07, 1.1042257028748281e-06, 2.634807003687456e-07, 0.001818737480789423, 1.2894804513052804e-06, 1.0689317605283577e-05, 2.7205194896851026e-07, 7.472540346498135e-07, 3.0066604495004867e-07, 9.341005124952062e-07, 4.1479069068373065e-08, 8.040823900046234e-07, 3.8566554394492414e-08, 2.9068869480397552e-06, 2.6503056460569496e-07, 2.597810180304805e-07, 1.4792736480195856e-10, 1.6719899076367284e-10, 5.8050279250210224e-08, 3.039177243202573e-10, 1.9432089271020914e-09, 3.369239554018577e-09, 5.129252578228716e-09, 1.3978754154209128e-08, 0.00011128438200103119, 5.6095494471719576e-08, 4.768626240547746e-07, 4.7286063953322355e-09, 1.879187834674667e-06, 1.2777282165643555e-07, 1.1445880687688259e-07, 1.8314868555080466e-07, 1.349972080788575e-07, 2.0769600439507485e-07, 1.8021844994109415e-07, 0.8570082187652588, 8.503589583597204e-07, 1.94207814274705e-06, 1.0032001895865506e-08, 8.394959877477959e-06, 8.714117711861036e-07, 2.4093733941299433e-07, 4.916150331268909e-08, 8.152370867264835e-08, 6.017880593844893e-08, 6.028128041180025e-08, 4.78520618685252e-08, 4.672333631106085e-08, 0.0013936833711341023, 8.772045845262255e-08, 4.5931451495562214e-06, 7.602122309435799e-08, 6.150620492917369e-07, 5.394969804228822e-08, 0.004435698501765728, 5.853303619574035e-08, 2.3034887419726147e-07, 1.3179601410229225e-08, 6.261880258762176e-08, 2.919157360281588e-08, 3.0720125323568936e-06, 3.1179531845282327e-08, 7.196216529337107e-07, 1.2040239916188966e-08, 3.3571706126167555e-07, 1.3905148144033319e-08, 2.3459112981072394e-06, 1.1526640264492016e-06, 4.21046138399106e-07, 9.525480404448672e-10, 4.364205441476088e-09, 2.3050565622906305e-10, 1.513990488533068e-09, 4.110549678415509e-09, 1.380754071078627e-07, 9.377609799798847e-09, 3.689532457329392e-09, 0.001094376784749329, 2.8692937803498353e-08, 1.0345162060332314e-08, 8.32012574392138e-08, 6.881401191094483e-07, 1.8344261221159286e-08, 3.154717376219196e-07, 1.2227957313371007e-06, 2.3048476904818926e-08, 9.740264772517548e-08, 3.4713622198978555e-08, 3.762348796954029e-07, 2.6235474237523704e-08, 1.8351496692048386e-05, 1.7405378116563952e-07, 5.971021892037243e-06, 3.826607780643698e-11, 3.3742431071459578e-09, 6.916943406931608e-11, 2.6227742200291004e-10, 1.1259395638063552e-09, 1.2231612389612678e-09, 2.490470052407545e-09, 2.729777042986825e-05, 1.362060828569156e-07, 1.7685943021206185e-06, 1.4051617647226067e-09, 1.5192199498414993e-06, 7.610652374978599e-08, 3.226760014740648e-08, 2.077812943923618e-08, 1.7060582280237213e-08, 0.00026223022723570466, 2.1945826489400133e-08, 1.3216405250204843e-06, 1.810096605936451e-08, 3.345311583302646e-08, 1.9922385519066665e-08, 4.6602206538182145e-08, 1.8090008779836353e-06, 2.644260277406829e-08, 6.153747449388902e-07, 5.381206591437149e-09, 1.896539032486544e-07, 9.33791444168719e-09, 1.584092728990072e-06, 9.270867735722277e-07, 4.422641097789892e-07, 5.999079566443299e-10, 1.9377977000800684e-09, 1.3599094073057927e-10, 6.950883202350155e-10, 4.736811831662635e-09, 1.9374135717953322e-07, 1.5430984490194533e-08, 1.4554358607199447e-08, 0.0001542342361062765, 3.258296885633172e-07, 1.861140397352301e-08, 1.5550446619272407e-07, 2.7354978726634727e-08, 5.458728651319689e-07, 1.082461693613368e-07, 9.263845246465507e-10, 1.825142703637539e-08, 0.0007603811682201922, 6.314277101182597e-09, 3.5989026514471334e-07, 1.2325225497988868e-06, 7.218324753921479e-06, 1.2047171082940622e-07, 2.2282340239598852e-07, 4.076183657275578e-08, 7.154020750022028e-06, 1.888024883101025e-07, 6.699603716242564e-08, 2.137450536565666e-07, 5.8364109101205486e-09, 2.3598645260136664e-09, 8.65913989400724e-08, 0.0001847541134338826, 8.199300682854016e-10, 2.3085553380042256e-07, 1.0525868674449157e-06, 5.634346962324344e-06, 8.595834799507429e-08, 1.6217255449646473e-07, 1.9310025578533896e-08, 1.406326305186667e-06, 9.32096071437627e-08, 2.842439528194518e-08, 9.287809632496646e-08, 0.0005784978857263923, 2.1341456601930986e-08, 3.315319077046297e-07, 4.2263965838174045e-07, 5.491611318575451e-06, 3.2109937819768675e-08, 6.436116706254325e-08, 2.523095190554159e-07, 1.860481120274926e-07, 1.8931137901745387e-06, 2.1652050463671912e-07, 8.596687450790341e-08, 9.476520013151912e-09, 2.7699826432581176e-08, 2.6293022870049754e-07, 2.9031746180407936e-06, 5.457158991362121e-08, 1.6982213537630741e-06, 1.0179381604302762e-07]], "pointer": [[0.0, 0.0, 0.004131449852138758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009620168129913509, 0.0, 0.0, 0.0, 0.0007246654131449759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045432932674884796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005619390401989222, 0.0, 0.0, 0.0, 0.004199851769953966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004250623285770416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015412284061312675, 0.0, 0.0, 0.0, 0.00952664390206337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026535458862781525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04738393425941467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003150638658553362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18226833641529083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.038378965109586716, 0.0, 0.0, 0.0, 0.04170355945825577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010643464047461748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5635270476341248, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.6970220612129197e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 8.086705929599702e-05, 0.0, 0.0, 0.0, 0.0002663465857040137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7895115888677537e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.434756788716186e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.316042916092556e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.000775217922637e-06, 0.0, 0.0, 0.0, 0.0, 0.0002725494559854269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.836899850284681e-05, 0.0, 0.0, 0.0, 0.0, 1.3879026710128528e-06, 0.0, 0.0, 0.0, 0.004731137305498123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9293299828859745e-06, 0.0, 0.0, 0.0, 0.0002162540768040344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.48500837694155e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9837517738342285]}, "loss": [5.420253276824951, 0.016381675377488136], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [177]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:36:55.007849", "n_pass": [1, 1, 1], "n_token": 330, "loss": [0.1543077826499939, 0.016381675377488136], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", ")", "=", "map", "(", "(", "lambda", "b", ":", "b", ".", "get_head", "(", ")", ")", ",", "filter", "(", "(", "lambda", "a", ":", "(", "a", ".", "label", "==", "'VP'", ")", ")", ",", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "(", "(", "lambda", "child", ":", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 177, "repair_targets": [2, 9, 13, 23, 33, 37, 70, 81, 97, 108, 117, 126, 141, 145, 166, 190, 242, 251, 280, 295], "repair_candidates": [85, 200, 256, 284, 299, 311, 228, 275, 2, 9, 13, 23, 33, 37, 70, 81, 97, 108, 117, 126, 141, 145, 166, 190, 242, 251, 280, 295, 151, 196, 219]}}
{"prediction": {"error_location": 0.8570082187652588, "repair_targets": [0.004131449852138758, 0.0009620168129913509, 0.0007246654131449759, 0.045432932674884796, 0.005619390401989222, 0.004199851769953966, 0.004250623285770416, 0.015412284061312675, 0.026535458862781525, 0.04738393425941467, 0.003150638658553362, 0.18226833641529083, 0.038378965109586716, 0.04170355945825577, 0.5635270476341248, 5.6970220612129197e-05, 5.316042916092556e-06, 5.000775217922637e-06, 1.3879026710128528e-06, 1.9293299828859745e-06], "repair_candidates": [0.004131449852138758, 0.0009620168129913509, 0.0007246654131449759, 0.045432932674884796, 0.005619390401989222, 0.004199851769953966, 0.004250623285770416, 0.015412284061312675, 0.00952664390206337, 0.026535458862781525, 0.04738393425941467, 0.003150638658553362, 0.18226833641529083, 0.038378965109586716, 0.04170355945825577, 0.0010643464047461748, 0.5635270476341248, 5.6970220612129197e-05, 8.086705929599702e-05, 0.0002663465857040137, 1.7895115888677537e-05, 2.434756788716186e-05, 5.316042916092556e-06, 5.000775217922637e-06, 0.0002725494559854269, 3.836899850284681e-05, 1.3879026710128528e-06, 0.004731137305498123, 1.9293299828859745e-06, 0.0002162540768040344, 9.48500837694155e-06], "target_probs": 0.9837517738342285}}


{"result": {"time": "2021-02-21 12:36:55.251933", "n_pass": [46, 2, 2], "n_token": 310, "loss": [0.16666561365127563, 0.031198855489492416], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", ":", "(", "a", ".", "label", "==", "'VP'", ")", ")", ",", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "(", "(", "lambda", "child", ":", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 157, "repair_targets": [2, 9, 13, 23, 33, 37, 50, 61, 77, 88, 97, 106, 121, 125, 146, 170, 222, 231, 260, 275], "repair_candidates": [65, 180, 236, 264, 279, 291, 208, 255, 2, 9, 13, 23, 33, 37, 50, 61, 77, 88, 97, 106, 121, 125, 146, 170, 222, 231, 260, 275, 131, 176, 199]}}
{"prediction": {"error_location": 0.846482515335083, "repair_targets": [0.010523580014705658, 0.0022534322924911976, 0.001947860699146986, 0.13162513077259064, 0.03283794969320297, 0.015615159645676613, 0.018406245857477188, 0.023786865174770355, 0.05600937455892563, 0.04764283075928688, 0.004889056086540222, 0.18674445152282715, 0.02442188747227192, 0.03313755989074707, 0.37932267785072327, 9.114580461755395e-05, 9.703784598968923e-06, 7.923367775219958e-06, 4.25513508162112e-06, 5.699308076145826e-06], "repair_candidates": [0.010523580014705658, 0.0022534322924911976, 0.001947860699146986, 0.13162513077259064, 0.03283794969320297, 0.015615159645676613, 0.018406245857477188, 0.023786865174770355, 0.013679560273885727, 0.05600937455892563, 0.04764283075928688, 0.004889056086540222, 0.18674445152282715, 0.02442188747227192, 0.03313755989074707, 0.0010332935489714146, 0.37932267785072327, 9.114580461755395e-05, 0.00017930283502209932, 0.0010201199911534786, 1.995729689951986e-05, 4.386204818729311e-05, 9.703784598968923e-06, 7.923367775219958e-06, 0.0006164314108900726, 5.888525993213989e-05, 4.25513508162112e-06, 0.013423806987702847, 5.699308076145826e-06, 0.0006164249498397112, 2.5544013624312356e-05], "target_probs": 0.9692828059196472}}


{"result": {"time": "2021-02-21 12:36:55.491957", "n_pass": [92, 3, 3], "n_token": 300, "loss": [0.23654629290103912, 0.010974324308335781], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "(", "(", "lambda", "child", ":", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 147, "repair_targets": [2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 111, 115, 136, 160, 212, 221, 250, 265], "repair_candidates": [55, 170, 226, 254, 269, 281, 198, 245, 2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 111, 115, 136, 160, 212, 221, 250, 265, 121, 166, 189]}}
{"prediction": {"error_location": 0.7893493175506592, "repair_targets": [0.0324600487947464, 0.006515016779303551, 0.011597905308008194, 0.32939955592155457, 0.10618962347507477, 0.0025858739390969276, 0.037925127893686295, 0.16807571053504944, 0.030997397378087044, 0.03614483401179314, 0.003996660932898521, 0.047615550458431244, 0.021903151646256447, 0.016701241955161095, 0.13692477345466614, 3.936152279493399e-05, 5.497420715983026e-06, 4.036747668578755e-06, 2.007300736295292e-06, 2.30157888836402e-06], "repair_candidates": [0.0324600487947464, 0.006515016779303551, 0.011597905308008194, 0.32939955592155457, 0.10618962347507477, 0.0025858739390969276, 0.037925127893686295, 0.16807571053504944, 0.003739982843399048, 0.030997397378087044, 0.03614483401179314, 0.003996660932898521, 0.047615550458431244, 0.021903151646256447, 0.016701241955161095, 0.00026218153652735054, 0.13692477345466614, 3.936152279493399e-05, 0.00010708707850426435, 0.0003356778179295361, 1.9927636458305642e-05, 2.523258444853127e-05, 5.497420715983026e-06, 4.036747668578755e-06, 0.0001757954596541822, 2.7047026378568262e-05, 2.007300736295292e-06, 0.005838893819600344, 2.30157888836402e-06, 0.0003676580381579697, 1.4765387277293485e-05], "target_probs": 0.9890856742858887}}


{"result": {"time": "2021-02-21 12:36:55.721483", "n_pass": [98, 4, 4], "n_token": 290, "loss": [0.39791247248649597, 0.012140115723013878], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "(", "(", "lambda", "child", ":", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 137, "repair_targets": [2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 202, 211, 240, 255], "repair_candidates": [55, 160, 216, 244, 259, 271, 188, 235, 2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 202, 211, 240, 255, 111, 156, 179]}}
{"prediction": {"error_location": 0.6717207431793213, "repair_targets": [0.03366678208112717, 0.007391654886305332, 0.011858908459544182, 0.3750750422477722, 0.11217779666185379, 0.0029059757944196463, 0.04162822291254997, 0.18382103741168976, 0.03257586434483528, 0.035488203167915344, 0.004640201572328806, 0.04550623148679733, 0.0038158718962222338, 0.009118763729929924, 0.08819306641817093, 5.361338480724953e-05, 6.681051218038192e-06, 4.758367140311748e-06, 2.211580522271106e-06, 2.4166768071154365e-06], "repair_candidates": [0.03366678208112717, 0.007391654886305332, 0.011858908459544182, 0.3750750422477722, 0.11217779666185379, 0.0029059757944196463, 0.04162822291254997, 0.18382103741168976, 0.00421841349452734, 0.03257586434483528, 0.035488203167915344, 0.004640201572328806, 0.04550623148679733, 0.0038158718962222338, 0.009118763729929924, 0.0003091423714067787, 0.08819306641817093, 5.361338480724953e-05, 7.886302773840725e-05, 0.00028710931655950844, 3.911374369636178e-05, 2.5755894967005588e-05, 6.681051218038192e-06, 4.758367140311748e-06, 0.00017583025328349322, 3.475519042694941e-05, 2.211580522271106e-06, 0.006466096267104149, 2.4166768071154365e-06, 0.00041374939610250294, 1.7901325918501243e-05], "target_probs": 0.9879332780838013}}


{"result": {"time": "2021-02-21 12:36:56.164689", "n_pass": [108, 6, 5], "n_token": 279, "loss": [0.23382383584976196, 0.009735976345837116], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 137, "repair_targets": [2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 229, 244], "repair_candidates": [55, 160, 205, 233, 248, 260, 188, 224, 2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 229, 244, 111, 156, 179]}}
{"prediction": {"error_location": 0.7915011644363403, "repair_targets": [0.034776851534843445, 0.006897155195474625, 0.01276689488440752, 0.3375295400619507, 0.11563944816589355, 0.0025365606416016817, 0.03912517428398132, 0.17950783669948578, 0.028743542730808258, 0.03275568410754204, 0.0034875483252108097, 0.07301326841115952, 0.004645747132599354, 0.011071632616221905, 0.1077495887875557, 4.534057734417729e-05, 1.922452156577492e-06, 1.351319133391371e-05, 1.8849721072911052e-06, 2.0528041204670444e-06], "repair_candidates": [0.034776851534843445, 0.006897155195474625, 0.01276689488440752, 0.3375295400619507, 0.11563944816589355, 0.0025365606416016817, 0.03912517428398132, 0.17950783669948578, 0.003204179462045431, 0.028743542730808258, 0.03275568410754204, 0.0034875483252108097, 0.07301326841115952, 0.004645747132599354, 0.011071632616221905, 0.00030145279015414417, 0.1077495887875557, 4.534057734417729e-05, 8.645584603073075e-05, 0.000279675965430215, 1.8241215002490208e-05, 1.7582535292604007e-05, 1.922452156577492e-06, 1.351319133391371e-05, 0.00011628004722297192, 2.5461011318839155e-05, 1.8849721072911052e-06, 0.005270947236567736, 2.0528041204670444e-06, 0.00035429999115876853, 1.424940910510486e-05], "target_probs": 0.9903112649917603}}


{"result": {"time": "2021-02-21 12:36:56.381855", "n_pass": [111, 7, 6], "n_token": 268, "loss": [0.3192671537399292, 0.009512463584542274], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "(", "None", ",", "None", ")"]}}
{"position": {"error_location": 137, "repair_targets": [2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 218, 233], "repair_candidates": [55, 160, 205, 222, 237, 249, 188, 213, 2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 218, 233, 111, 156, 179]}}
{"prediction": {"error_location": 0.726681649684906, "repair_targets": [0.04038630425930023, 0.007589131128042936, 0.01371440477669239, 0.3630041480064392, 0.12509754300117493, 0.00274648517370224, 0.04070957005023956, 0.18753476440906525, 0.025180881842970848, 0.015994224697351456, 0.0032685394398868084, 0.051296163350343704, 0.003389642108231783, 0.008990378119051456, 0.10158416628837585, 3.147116149193607e-05, 1.8238401935377624e-06, 8.542531759303529e-06, 2.4971864149847534e-06, 1.9135914044454694e-06], "repair_candidates": [0.04038630425930023, 0.007589131128042936, 0.01371440477669239, 0.3630041480064392, 0.12509754300117493, 0.00274648517370224, 0.04070957005023956, 0.18753476440906525, 0.0031090914271771908, 0.025180881842970848, 0.015994224697351456, 0.0032685394398868084, 0.051296163350343704, 0.003389642108231783, 0.008990378119051456, 0.0002123543235938996, 0.10158416628837585, 3.147116149193607e-05, 5.8337871450930834e-05, 0.00021629288676194847, 1.4352594007505104e-05, 2.0308963939896785e-05, 1.8238401935377624e-06, 8.542531759303529e-06, 7.368798105744645e-05, 2.064734508167021e-05, 2.4971864149847534e-06, 0.0054041724652051926, 1.9135914044454694e-06, 0.00032404199009761214, 1.4188735804054886e-05], "target_probs": 0.990532636642456}}


{"result": {"time": "2021-02-21 12:36:56.585778", "n_pass": [116, 8, 7], "n_token": 257, "loss": [0.18635742366313934, 0.009557776153087616], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "return_head", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 137, "repair_targets": [2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 218, 233], "repair_candidates": [55, 160, 205, 222, 237, 249, 188, 213, 2, 9, 13, 23, 33, 37, 40, 51, 67, 78, 87, 96, 101, 105, 126, 150, 191, 200, 218, 233, 111, 156, 179]}}
{"prediction": {"error_location": 0.8299769163131714, "repair_targets": [0.03267468139529228, 0.007769368123263121, 0.015450341627001762, 0.2651979625225067, 0.13496698439121246, 0.0036483537405729294, 0.03769753873348236, 0.17377479374408722, 0.018889065831899643, 0.029824210330843925, 0.0028363836463540792, 0.07938364893198013, 0.005040017422288656, 0.015790771692991257, 0.1674727350473404, 4.7999710659496486e-05, 2.2916924535820726e-06, 1.5452551451744512e-05, 2.7923999823542545e-06, 2.4129728899424663e-06], "repair_candidates": [0.03267468139529228, 0.007769368123263121, 0.015450341627001762, 0.2651979625225067, 0.13496698439121246, 0.0036483537405729294, 0.03769753873348236, 0.17377479374408722, 0.003829945344477892, 0.018889065831899643, 0.029824210330843925, 0.0028363836463540792, 0.07938364893198013, 0.005040017422288656, 0.015790771692991257, 0.00025438153534196317, 0.1674727350473404, 4.7999710659496486e-05, 5.968467303318903e-05, 0.00017951283371075988, 1.7786320313462056e-05, 2.0243576727807522e-05, 2.2916924535820726e-06, 1.5452551451744512e-05, 8.818728383630514e-05, 2.2607042410527356e-05, 2.7923999823542545e-06, 0.004681399092078209, 2.4129728899424663e-06, 0.0003393749939277768, 1.9130477085127495e-05], "target_probs": 0.9904877543449402}}


{"result": {"time": "2021-02-21 12:36:56.994000", "n_pass": [195, 10, 8], "n_token": 252, "loss": [0.237200528383255, 0.013442520052194595], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "label", "==", "'S'", ")", ":", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 132, "repair_targets": [2, 9, 13, 18, 28, 32, 35, 46, 62, 73, 82, 91, 96, 100, 121, 145, 186, 195, 213, 228], "repair_candidates": [50, 155, 200, 217, 232, 244, 183, 208, 2, 9, 13, 18, 28, 32, 35, 46, 62, 73, 82, 91, 96, 100, 121, 145, 186, 195, 213, 228, 106, 151, 174]}}
{"prediction": {"error_location": 0.7888331413269043, "repair_targets": [0.04844816029071808, 0.021652530878782272, 0.002524447161704302, 0.24700582027435303, 0.1381554901599884, 0.003930654376745224, 0.042911939322948456, 0.20569154620170593, 0.024187300354242325, 0.031060725450515747, 0.003493096912279725, 0.06611321121454239, 0.005376131273806095, 0.018211672082543373, 0.12781792879104614, 4.423882273840718e-05, 2.2425033421313856e-06, 1.4184456631483044e-05, 2.5810882107180078e-06, 3.4439940463926177e-06], "repair_candidates": [0.04844816029071808, 0.021652530878782272, 0.002524447161704302, 0.24700582027435303, 0.1381554901599884, 0.003930654376745224, 0.042911939322948456, 0.20569154620170593, 0.003837327705696225, 0.024187300354242325, 0.031060725450515747, 0.003493096912279725, 0.06611321121454239, 0.005376131273806095, 0.018211672082543373, 0.0003316559304948896, 0.12781792879104614, 4.423882273840718e-05, 6.114926509326324e-05, 0.00021068040223326534, 1.910566606966313e-05, 2.8215079510118812e-05, 2.2425033421313856e-06, 1.4184456631483044e-05, 0.00012789847096428275, 3.208489215467125e-05, 2.5810882107180078e-06, 0.008334344252943993, 3.4439940463926177e-06, 0.0003533566487021744, 1.6771589798736386e-05], "target_probs": 0.9866474270820618}}


{"result": {"time": "2021-02-21 12:36:57.193975", "n_pass": [197, 11, 9], "n_token": 247, "loss": [0.13704648613929749, 0.011142650619149208], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "[", "0", "]", "#NEWLINE#", "return", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 127, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 41, 57, 68, 77, 86, 91, 95, 116, 140, 181, 190, 208, 223], "repair_candidates": [45, 150, 195, 212, 227, 239, 178, 203, 2, 9, 13, 18, 23, 27, 30, 41, 57, 68, 77, 86, 91, 95, 116, 140, 181, 190, 208, 223, 101, 146, 169]}}
{"prediction": {"error_location": 0.8719297051429749, "repair_targets": [0.06080068275332451, 0.02582966722548008, 0.0034305760636925697, 0.009979486465454102, 0.26632845401763916, 0.00464432779699564, 0.040535908192396164, 0.16988050937652588, 0.0354626402258873, 0.030208637937903404, 0.004501543939113617, 0.0895092561841011, 0.004622829612344503, 0.014073719270527363, 0.2290448099374771, 4.4767257350031286e-05, 2.828762490025838e-06, 1.2994040844205301e-05, 3.0578371479350608e-06, 2.579889951448422e-06], "repair_candidates": [0.06080068275332451, 0.02582966722548008, 0.0034305760636925697, 0.009979486465454102, 0.26632845401763916, 0.00464432779699564, 0.040535908192396164, 0.16988050937652588, 0.003683963092043996, 0.0354626402258873, 0.030208637937903404, 0.004501543939113617, 0.0895092561841011, 0.004622829612344503, 0.014073719270527363, 0.0004002849163953215, 0.2290448099374771, 4.4767257350031286e-05, 8.452162728644907e-05, 0.0002763786760624498, 2.042468622676097e-05, 2.8076687158318236e-05, 2.828762490025838e-06, 1.2994040844205301e-05, 8.453654299955815e-05, 2.4651350031490438e-05, 3.0578371479350608e-06, 0.005994370207190514, 2.579889951448422e-06, 0.0004661164421122521, 1.732724740577396e-05], "target_probs": 0.988919198513031}}


{"result": {"time": "2021-02-21 12:36:57.392593", "n_pass": [201, 12, 10], "n_token": 242, "loss": [0.12950833141803741, 0.002408422064036131], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "==", "'ADVP'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 122, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 63, 72, 81, 86, 90, 111, 135, 176, 185, 203, 218], "repair_candidates": [40, 145, 190, 207, 222, 234, 173, 198, 2, 9, 13, 18, 23, 27, 30, 36, 52, 63, 72, 81, 86, 90, 111, 135, 176, 185, 203, 218, 96, 141, 164]}}
{"prediction": {"error_location": 0.8785273432731628, "repair_targets": [0.025197293609380722, 0.006285300478339195, 0.001474969438277185, 0.003612311091274023, 0.09134047478437424, 0.001545029692351818, 0.0007229032344184816, 0.7634456753730774, 0.00933938380330801, 0.008578588254749775, 0.0010794580448418856, 0.02467852272093296, 0.0016560753574594855, 0.003896766807883978, 0.05472015216946602, 1.4702660337206908e-05, 7.235377097458695e-07, 4.441883447725559e-06, 8.596402381044754e-07, 7.922300824247941e-07], "repair_candidates": [0.025197293609380722, 0.006285300478339195, 0.001474969438277185, 0.003612311091274023, 0.09134047478437424, 0.001545029692351818, 0.0007229032344184816, 0.7634456753730774, 0.0003892846580129117, 0.00933938380330801, 0.008578588254749775, 0.0010794580448418856, 0.02467852272093296, 0.0016560753574594855, 0.003896766807883978, 6.807861791457981e-05, 0.05472015216946602, 1.4702660337206908e-05, 2.868919909815304e-05, 9.229731222148985e-05, 5.189548119233223e-06, 8.733481081435457e-06, 7.235377097458695e-07, 4.441883447725559e-06, 2.224937816208694e-05, 7.58348187446245e-06, 8.596402381044754e-07, 0.001645189244300127, 7.922300824247941e-07, 0.00013333329115994275, 4.951571099809371e-06], "target_probs": 0.9975944757461548}}


{"result": {"time": "2021-02-21 12:36:57.780673", "n_pass": [206, 14, 11], "n_token": 237, "loss": [0.1085842028260231, 0.002433755900710821], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "children", "[", "0", "]", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 117, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 67, 76, 81, 85, 106, 130, 171, 180, 198, 213], "repair_candidates": [40, 140, 185, 202, 217, 229, 168, 193, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 67, 76, 81, 85, 106, 130, 171, 180, 198, 213, 91, 136, 159]}}
{"prediction": {"error_location": 0.8971034288406372, "repair_targets": [0.027044182643294334, 0.006527417339384556, 0.0015780441462993622, 0.0036632430274039507, 0.09474114328622818, 0.0016133264871314168, 0.0007955878390930593, 0.7235797643661499, 0.0023739717435091734, 0.01651357300579548, 0.0019230572506785393, 0.034606244415044785, 0.0018534718547016382, 0.004270806442946196, 0.0764656588435173, 1.2222175428178161e-05, 8.645359912407002e-07, 5.058648184785852e-06, 8.234940764850762e-07, 7.948688107717317e-07], "repair_candidates": [0.027044182643294334, 0.006527417339384556, 0.0015780441462993622, 0.0036632430274039507, 0.09474114328622818, 0.0016133264871314168, 0.0007955878390930593, 0.7235797643661499, 0.0004699896671809256, 0.0023739717435091734, 0.01651357300579548, 0.0019230572506785393, 0.034606244415044785, 0.0018534718547016382, 0.004270806442946196, 8.29225973575376e-05, 0.0764656588435173, 1.2222175428178161e-05, 3.0178249289747328e-05, 9.625281381886452e-05, 6.672883046121569e-06, 7.08897459844593e-06, 8.645359912407002e-07, 5.058648184785852e-06, 1.9248233002144843e-05, 7.501343588955933e-06, 8.234940764850762e-07, 0.0015674557071179152, 7.948688107717317e-07, 0.00013833201956003904, 4.988634827896021e-06], "target_probs": 0.99756920337677}}


{"result": {"time": "2021-02-21 12:36:57.974255", "n_pass": [208, 15, 12], "n_token": 232, "loss": [0.4100598990917206, 0.00539755541831255], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "lambda", "child", ":", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 112, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 101, 125, 166, 175, 193, 208], "repair_candidates": [40, 135, 180, 197, 212, 224, 163, 188, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 101, 125, 166, 175, 193, 208, 86, 131, 154]}}
{"prediction": {"error_location": 0.6636105179786682, "repair_targets": [0.03359159827232361, 0.009654526598751545, 0.0017751684645190835, 0.00490478053689003, 0.11735451221466064, 0.0023160316050052643, 0.001373619306832552, 0.7321460843086243, 0.003203284926712513, 0.0019901515915989876, 0.0015002351719886065, 0.03120587021112442, 0.002600584179162979, 0.004565092269331217, 0.04640218988060951, 1.9840968889184296e-05, 1.2170420404800097e-06, 9.190154742100276e-06, 1.5497371350647882e-06, 1.4779448065382894e-06], "repair_candidates": [0.03359159827232361, 0.009654526598751545, 0.0017751684645190835, 0.00490478053689003, 0.11735451221466064, 0.0023160316050052643, 0.001373619306832552, 0.7321460843086243, 0.0016498937038704753, 0.003203284926712513, 0.0019901515915989876, 0.0015002351719886065, 0.03120587021112442, 0.002600584179162979, 0.004565092269331217, 0.00015715831250417978, 0.04640218988060951, 1.9840968889184296e-05, 5.267242158879526e-05, 0.00020654761465266347, 8.83765551407123e-06, 1.2743725164909847e-05, 1.2170420404800097e-06, 9.190154742100276e-06, 4.4626984163187444e-05, 1.3523850611818489e-05, 1.5497371350647882e-06, 0.002958752680569887, 1.4779448065382894e-06, 0.00026805215748026967, 1.0099362043547444e-05], "target_probs": 0.9946169853210449}}


{"result": {"time": "2021-02-21 12:36:58.352796", "n_pass": [215, 17, 13], "n_token": 227, "loss": [0.1697673797607422, 0.0031567516271024942], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "child", ".", "label", ".", "startswith", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 107, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 96, 120, 161, 170, 188, 203], "repair_candidates": [40, 130, 175, 192, 207, 219, 158, 183, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 96, 120, 161, 170, 188, 203, 86, 126, 149]}}
{"prediction": {"error_location": 0.8438610434532166, "repair_targets": [0.030435048043727875, 0.007490117102861404, 0.0016280922573059797, 0.0038258747663348913, 0.09955373406410217, 0.00177555694244802, 0.0010283458977937698, 0.6111664772033691, 0.002655493328347802, 0.0015636177267879248, 0.001137545914389193, 0.032292481511831284, 0.0020098609384149313, 0.004860683344304562, 0.1953977346420288, 1.9572893506847322e-05, 7.591797270833922e-07, 5.377307388698682e-06, 9.331757837571786e-07, 8.866809366736561e-07], "repair_candidates": [0.030435048043727875, 0.007490117102861404, 0.0016280922573059797, 0.0038258747663348913, 0.09955373406410217, 0.00177555694244802, 0.0010283458977937698, 0.6111664772033691, 0.0010273910593241453, 0.002655493328347802, 0.0015636177267879248, 0.001137545914389193, 0.032292481511831284, 0.0020098609384149313, 0.004860683344304562, 8.540573617210612e-05, 0.1953977346420288, 1.9572893506847322e-05, 1.9386232452234253e-05, 9.343851706944406e-05, 6.210167157405522e-06, 7.878496944613289e-06, 7.591797270833922e-07, 5.377307388698682e-06, 2.6103176423930563e-05, 8.389783943130169e-06, 9.331757837571786e-07, 0.0017159681301563978, 8.866809366736561e-07, 0.00015570258256047964, 5.943645192019176e-06], "target_probs": 0.9968482255935669}}


{"result": {"time": "2021-02-21 12:36:58.539964", "n_pass": [216, 18, 14], "n_token": 222, "loss": [0.15163837373256683, 0.003574374131858349], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", "[", "1", "]", "==", "'P'", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 115, 156, 165, 183, 198], "repair_candidates": [40, 125, 170, 187, 202, 214, 153, 178, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 115, 156, 165, 183, 198, 86, 121, 144]}}
{"prediction": {"error_location": 0.8592990636825562, "repair_targets": [0.03201795741915703, 0.008730570785701275, 0.0015984904021024704, 0.0041078380309045315, 0.10246545821428299, 0.0019881424959748983, 0.001240942976437509, 0.5739918351173401, 0.0029242411255836487, 0.0017396981129422784, 0.0012923679314553738, 0.032855212688446045, 0.002166148042306304, 0.005143041256815195, 0.2241428643465042, 1.966634408745449e-05, 7.305517897293612e-07, 5.103354851598851e-06, 9.082470455723524e-07, 8.451691542177286e-07], "repair_candidates": [0.03201795741915703, 0.008730570785701275, 0.0015984904021024704, 0.0041078380309045315, 0.10246545821428299, 0.0019881424959748983, 0.001240942976437509, 0.5739918351173401, 0.0013424231437966228, 0.0029242411255836487, 0.0017396981129422784, 0.0012923679314553738, 0.032855212688446045, 0.002166148042306304, 0.005143041256815195, 9.8531658295542e-05, 0.2241428643465042, 1.966634408745449e-05, 2.4946086341515183e-05, 8.770042040850967e-05, 8.177833478839602e-06, 8.561113645555452e-06, 7.305517897293612e-07, 5.103354851598851e-06, 2.375550684519112e-05, 1.0254894732497633e-05, 9.082470455723524e-07, 0.0018032537773251534, 8.451691542177286e-07, 0.0001540610392112285, 6.270353878790047e-06], "target_probs": 0.9964320063591003}}


{"result": {"time": "2021-02-21 12:36:58.907811", "n_pass": [220, 20, 15], "n_token": 217, "loss": [0.004870336968451738, 0.0003334243665449321], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "(", "lambda", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 151, 160, 178, 193], "repair_candidates": [40, 120, 165, 182, 197, 209, 148, 173, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 151, 160, 178, 193, 86, 116, 139]}}
{"prediction": {"error_location": 0.9951415061950684, "repair_targets": [0.026166370138525963, 0.0025736915413290262, 0.001668557757511735, 0.0011255067074671388, 0.05422735959291458, 0.0004994483897462487, 0.00029997597448527813, 0.24869857728481293, 0.0017944657010957599, 0.0007532411254942417, 0.00019034830620512366, 0.07634462416172028, 0.0015991892432793975, 0.012372742407023907, 0.5713456869125366, 5.9855860854440834e-06, 1.0049747345419746e-07, 6.324701189441839e-07, 8.777382021207814e-08, 8.456935063350102e-08], "repair_candidates": [0.026166370138525963, 0.0025736915413290262, 0.001668557757511735, 0.0011255067074671388, 0.05422735959291458, 0.0004994483897462487, 0.00029997597448527813, 0.24869857728481293, 0.0001043960073729977, 0.0017944657010957599, 0.0007532411254942417, 0.00019034830620512366, 0.07634462416172028, 0.0015991892432793975, 0.012372742407023907, 2.2092362996772863e-05, 0.5713456869125366, 5.9855860854440834e-06, 4.56748966826126e-06, 1.0378783372289035e-05, 1.6957415027718525e-06, 8.791351433501404e-07, 1.0049747345419746e-07, 6.324701189441839e-07, 1.6009379351089592e-06, 1.0892019872699166e-06, 8.777382021207814e-08, 0.0001716109982226044, 8.456935063350102e-08, 1.45166977745248e-05, 5.326724590304366e-07], "target_probs": 0.9996666312217712}}


{"result": {"time": "2021-02-21 12:36:59.270536", "n_pass": [225, 22, 16], "n_token": 212, "loss": [0.004218489397317171, 0.00030605707434006035], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "a", ":", "a", ".", "get_head", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 146, 155, 173, 188], "repair_candidates": [40, 120, 160, 177, 192, 204, 143, 168, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 146, 155, 173, 188, 86, 116, 134]}}
{"prediction": {"error_location": 0.9957903027534485, "repair_targets": [0.02729804441332817, 0.0024559535086154938, 0.0017905080458149314, 0.0010746680200099945, 0.05328472703695297, 0.00046654121251776814, 0.0002777049085125327, 0.24010837078094482, 0.00196502055041492, 0.000822923902887851, 0.00019229608005844057, 0.08640292286872864, 0.0019170440500602126, 0.018930235877633095, 0.5626987814903259, 7.2983848440344445e-06, 1.4136485049220937e-07, 6.603896167689527e-07, 8.04386388608691e-08, 7.569184390376904e-08], "repair_candidates": [0.02729804441332817, 0.0024559535086154938, 0.0017905080458149314, 0.0010746680200099945, 0.05328472703695297, 0.00046654121251776814, 0.0002777049085125327, 0.24010837078094482, 9.466629853704944e-05, 0.00196502055041492, 0.000822923902887851, 0.00019229608005844057, 0.08640292286872864, 0.0019170440500602126, 0.018930235877633095, 1.3740573194809258e-05, 0.5626987814903259, 7.2983848440344445e-06, 5.915831479796907e-06, 8.933311619330198e-06, 1.834275735745905e-06, 7.931479899525584e-07, 1.4136485049220937e-07, 6.603896167689527e-07, 1.3369414091357612e-06, 1.0800048357850756e-06, 8.04386388608691e-08, 0.00016333146777469665, 7.569184390376904e-08, 1.3841014151694253e-05, 5.172825581212237e-07], "target_probs": 0.9996939897537231}}


{"result": {"time": "2021-02-21 12:36:59.449698", "n_pass": [226, 23, 17], "n_token": 207, "loss": [0.003658389439806342, 0.0002860836102627218], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 141, 150, 168, 183], "repair_candidates": [40, 120, 155, 172, 187, 199, 138, 163, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 141, 150, 168, 183, 86, 116, 129]}}
{"prediction": {"error_location": 0.9963482022285461, "repair_targets": [0.027715759351849556, 0.0024182668421417475, 0.0017973106587305665, 0.0010184809798374772, 0.05163148045539856, 0.00043464338523335755, 0.00028481282060965896, 0.2325887382030487, 0.0019151915330439806, 0.0007230908377096057, 0.0001685290626483038, 0.07791858166456223, 0.0016352767124772072, 0.012991493567824364, 0.5864668488502502, 4.5608417167386506e-06, 1.1778263342421269e-07, 6.308223987616657e-07, 7.429421344795628e-08, 7.263840728910509e-08], "repair_candidates": [0.027715759351849556, 0.0024182668421417475, 0.0017973106587305665, 0.0010184809798374772, 0.05163148045539856, 0.00043464338523335755, 0.00028481282060965896, 0.2325887382030487, 8.531437924830243e-05, 0.0019151915330439806, 0.0007230908377096057, 0.0001685290626483038, 0.07791858166456223, 0.0016352767124772072, 0.012991493567824364, 1.3168757504899986e-05, 0.5864668488502502, 4.5608417167386506e-06, 6.7646483330463525e-06, 9.747729563969187e-06, 4.4683552005153615e-06, 7.806483495187422e-07, 1.1778263342421269e-07, 6.308223987616657e-07, 1.179724449684727e-06, 1.0168968174184556e-06, 7.429421344795628e-08, 0.00015043691382743418, 7.263840728910509e-08, 1.2750153473461978e-05, 4.701005025253835e-07], "target_probs": 0.9997139573097229}}


{"result": {"time": "2021-02-21 12:36:59.626517", "n_pass": [228, 24, 18], "n_token": 202, "loss": [0.0053798421286046505, 0.00037200216320343316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "0", "]", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 145, 163, 178], "repair_candidates": [40, 120, 150, 167, 182, 194, 133, 158, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 145, 163, 178, 86, 116, 129]}}
{"prediction": {"error_location": 0.9946345090866089, "repair_targets": [0.030441371724009514, 0.0029196697287261486, 0.0018013500375673175, 0.0012948777293786407, 0.05936538800597191, 0.000553847523406148, 0.00035796393058262765, 0.2780492603778839, 0.0019420889439061284, 0.0008190293447114527, 0.00021748153085354716, 0.07927422225475311, 0.0014285807264968753, 0.009653612971305847, 0.5315027236938477, 5.624759069178253e-06, 1.6254575996299536e-07, 6.643161896136007e-07, 1.0059446964305607e-07, 1.0265348748816905e-07], "repair_candidates": [0.030441371724009514, 0.0029196697287261486, 0.0018013500375673175, 0.0012948777293786407, 0.05936538800597191, 0.000553847523406148, 0.00035796393058262765, 0.2780492603778839, 0.00011742066271835938, 0.0019420889439061284, 0.0008190293447114527, 0.00021748153085354716, 0.07927422225475311, 0.0014285807264968753, 0.009653612971305847, 1.612742016732227e-05, 0.5315027236938477, 5.624759069178253e-06, 7.057760740281083e-06, 1.3014938303967938e-05, 2.3014790713205002e-06, 5.745033604398486e-07, 1.6254575996299536e-07, 6.643161896136007e-07, 1.6973845049506053e-06, 1.362613943456381e-06, 1.0059446964305607e-07, 0.0001933144376380369, 1.0265348748816905e-07, 1.8368573364568874e-05, 6.672146923847322e-07], "target_probs": 0.9996280670166016}}


{"result": {"time": "2021-02-21 12:36:59.802426", "n_pass": [231, 25, 19], "n_token": 197, "loss": [0.010489686392247677, 0.0008724560611881316], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "1", "]", "#NEWLINE#", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 173], "repair_candidates": [40, 120, 145, 162, 177, 189, 133, 153, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 173, 86, 116, 129]}}
{"prediction": {"error_location": 0.9895648956298828, "repair_targets": [0.040465470403432846, 0.0050536575727164745, 0.0022118594497442245, 0.0023260684683918953, 0.08672371506690979, 0.0010856292210519314, 0.0006556267035193741, 0.4357932209968567, 0.00249448511749506, 0.001279483549296856, 0.0005652440595440567, 0.05603775382041931, 0.0017899266676977277, 0.009555479511618614, 0.3530721068382263, 1.723842797218822e-05, 1.2170040974979202e-07, 3.9165445286926115e-07, 2.0645708787014883e-07, 2.1322738064100122e-07], "repair_candidates": [0.040465470403432846, 0.0050536575727164745, 0.0022118594497442245, 0.0023260684683918953, 0.08672371506690979, 0.0010856292210519314, 0.0006556267035193741, 0.4357932209968567, 0.00033819914096966386, 0.00249448511749506, 0.001279483549296856, 0.0005652440595440567, 0.05603775382041931, 0.0017899266676977277, 0.009555479511618614, 3.49234469467774e-05, 0.3530721068382263, 1.723842797218822e-05, 1.4689691852254327e-05, 3.0171775506460108e-05, 5.193096058064839e-06, 8.463745757580909e-07, 1.2170040974979202e-07, 3.9165445286926115e-07, 4.888223429588834e-06, 3.1039451187098166e-06, 2.0645708787014883e-07, 0.0004065972752869129, 2.1322738064100122e-07, 3.229546200600453e-05, 1.176974819827592e-06], "target_probs": 0.9991279244422913}}


{"result": {"time": "2021-02-21 12:36:59.974911", "n_pass": [237, 26, 20], "n_token": 191, "loss": [0.03947923704981804, 0.0028975822497159243], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "(", "-", "1", ")", "]", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167], "repair_candidates": [40, 120, 145, 162, 171, 183, 133, 153, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167, 86, 116, 129]}}
{"prediction": {"error_location": 0.9612898230552673, "repair_targets": [0.04682782664895058, 0.009055203758180141, 0.002430693246424198, 0.004550837446004152, 0.1397339403629303, 0.0021159001626074314, 0.0014912296319380403, 0.5222868323326111, 0.0036160843446850777, 0.0014133119257166982, 0.0012785530416294932, 0.042958371341228485, 0.002366661559790373, 0.0064175627194345, 0.21051479876041412, 4.4003107177559286e-05, 3.8666749446747417e-07, 2.2117869775684085e-06, 7.72939415583096e-07, 1.3841286090610083e-06], "repair_candidates": [0.04682782664895058, 0.009055203758180141, 0.002430693246424198, 0.004550837446004152, 0.1397339403629303, 0.0021159001626074314, 0.0014912296319380403, 0.5222868323326111, 0.001494375173933804, 0.0036160843446850777, 0.0014133119257166982, 0.0012785530416294932, 0.042958371341228485, 0.002366661559790373, 0.0064175627194345, 8.725179213797674e-05, 0.21051479876041412, 4.4003107177559286e-05, 4.5593606046168134e-05, 0.00012051281373715028, 1.3048393157077953e-05, 2.180407591367839e-06, 3.8666749446747417e-07, 2.2117869775684085e-06, 1.9120485376333818e-05, 5.502153271663701e-06, 7.72939415583096e-07, 0.0010141287930309772, 1.3841286090610083e-06, 8.926691953092813e-05, 2.4110688627843047e-06], "target_probs": 0.9971066117286682}}


{"result": {"time": "2021-02-21 12:37:00.143167", "n_pass": [239, 27, 21], "n_token": 185, "loss": [0.03234115615487099, 0.0018061010632663965], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "[", "(", "-", "1", ")", "]", "#NEWLINE#"]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167], "repair_candidates": [40, 120, 145, 162, 171, 177, 133, 153, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167, 86, 116, 129]}}
{"prediction": {"error_location": 0.9681762456893921, "repair_targets": [0.0427631214261055, 0.00726360734552145, 0.002523142145946622, 0.002667800523340702, 0.11418429017066956, 0.0017399471253156662, 0.0010618838714435697, 0.5046558976173401, 0.0024540640879422426, 0.0012749608140438795, 0.0008736992604099214, 0.04512900114059448, 0.0015558723825961351, 0.004609682597219944, 0.26541152596473694, 2.439988384139724e-05, 2.5982706119975774e-07, 1.0818107512022834e-06, 5.61783338071109e-07, 8.008283884919365e-07], "repair_candidates": [0.0427631214261055, 0.00726360734552145, 0.002523142145946622, 0.002667800523340702, 0.11418429017066956, 0.0017399471253156662, 0.0010618838714435697, 0.5046558976173401, 0.0010928544215857983, 0.0024540640879422426, 0.0012749608140438795, 0.0008736992604099214, 0.04512900114059448, 0.0015558723825961351, 0.004609682597219944, 4.9904858315130696e-05, 0.26541152596473694, 2.439988384139724e-05, 2.3441629309672862e-05, 6.007625052006915e-05, 1.1362679288140498e-05, 1.3703831882594386e-06, 2.5982706119975774e-07, 1.0818107512022834e-06, 1.1429779988247901e-05, 5.414845418272307e-06, 5.61783338071109e-07, 0.0005045110010541975, 8.008283884919365e-07, 4.293079473427497e-05, 1.1385952802811516e-06], "target_probs": 0.9981955289840698}}


{"result": {"time": "2021-02-21 12:37:00.310005", "n_pass": [241, 28, 22], "n_token": 179, "loss": [0.15683691203594208, 0.004405831918120384], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 102, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167], "repair_candidates": [40, 120, 145, 162, 171, 177, 133, 153, 2, 9, 13, 18, 23, 27, 30, 36, 52, 58, 62, 71, 76, 80, 91, 110, 136, 140, 158, 167, 86, 116, 129]}}
{"prediction": {"error_location": 0.8548433780670166, "repair_targets": [0.04359022155404091, 0.010020719841122627, 0.0015544196357950568, 0.005464293994009495, 0.13528381288051605, 0.0035843574441969395, 0.0017503882991150022, 0.6476410031318665, 0.004278735723346472, 0.002115650335326791, 0.0023787159007042646, 0.029335493221879005, 0.0021558785811066628, 0.005681880284100771, 0.10069041699171066, 6.323597335722297e-05, 8.579634709349193e-07, 5.9101216720591765e-06, 3.404543122087489e-06, 4.4590669858735055e-06], "repair_candidates": [0.04359022155404091, 0.010020719841122627, 0.0015544196357950568, 0.005464293994009495, 0.13528381288051605, 0.0035843574441969395, 0.0017503882991150022, 0.6476410031318665, 0.0024248131085187197, 0.004278735723346472, 0.002115650335326791, 0.0023787159007042646, 0.029335493221879005, 0.0021558785811066628, 0.005681880284100771, 0.00015609136607963592, 0.10069041699171066, 6.323597335722297e-05, 5.978810804663226e-05, 0.00023500500537920743, 1.8938055291073397e-05, 3.978112999902805e-06, 8.579634709349193e-07, 5.9101216720591765e-06, 6.788837345084175e-05, 1.939503454195801e-05, 3.404543122087489e-06, 0.0012651241850107908, 4.4590669858735055e-06, 0.0001437406608602032, 1.2973184766451595e-06], "target_probs": 0.9956038594245911}}


{"result": {"time": "2021-02-21 12:37:00.474168", "n_pass": [251, 29, 23], "n_token": 174, "loss": [0.718612551689148, 0.004689945373684168], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "head", ",", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 97, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 47, 53, 57, 66, 71, 75, 86, 105, 131, 135, 153, 162], "repair_candidates": [40, 115, 140, 157, 166, 172, 128, 148, 2, 9, 13, 18, 23, 27, 30, 36, 47, 53, 57, 66, 71, 75, 86, 105, 131, 135, 153, 162, 81, 111, 124]}}
{"prediction": {"error_location": 0.48742806911468506, "repair_targets": [0.05482304096221924, 0.023500584065914154, 0.0018192222341895103, 0.007471426390111446, 0.20334884524345398, 0.005572041962295771, 0.004161143209785223, 0.6155911684036255, 0.004717695526778698, 0.001624850556254387, 0.0023619667626917362, 0.02493477053940296, 0.0017552210483700037, 0.0036332521121948957, 0.039882365614175797, 0.00010447576642036438, 1.3275175660965033e-06, 7.451014425896574e-06, 4.427376097737579e-06, 5.667746336257551e-06], "repair_candidates": [0.05482304096221924, 0.023500584065914154, 0.0018192222341895103, 0.007471426390111446, 0.20334884524345398, 0.005572041962295771, 0.004161143209785223, 0.6155911684036255, 0.0020794239826500416, 0.004717695526778698, 0.001624850556254387, 0.0023619667626917362, 0.02493477053940296, 0.0017552210483700037, 0.0036332521121948957, 0.00011444790288805962, 0.039882365614175797, 0.00010447576642036438, 6.477651913883165e-05, 0.00027813774067908525, 2.6247513233101927e-05, 4.963913852407131e-06, 1.3275175660965033e-06, 7.451014425896574e-06, 8.350644202437252e-05, 2.8603137252503075e-05, 4.427376097737579e-06, 0.0017913775518536568, 5.667746336257551e-06, 0.00020573314395733178, 1.8515231658966513e-06], "target_probs": 0.9953210353851318}}


{"result": {"time": "2021-02-21 12:37:01.118004", "n_pass": [355, 33, 24], "n_token": 172, "loss": [0.0034141603391617537, 8.374803292099386e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "head_phrase", ")", "#NEWLINE#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 95, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 45, 51, 55, 64, 69, 73, 84, 103, 129, 133, 151, 160], "repair_candidates": [38, 113, 138, 155, 164, 170, 126, 146, 2, 9, 13, 18, 23, 27, 30, 36, 45, 51, 55, 64, 69, 73, 84, 103, 129, 133, 151, 160, 79, 109, 122]}}
{"prediction": {"error_location": 0.9965914487838745, "repair_targets": [0.0016159238293766975, 0.0006067429203540087, 5.890882312087342e-05, 0.00018561612523626536, 0.005033534951508045, 0.00012112047261325642, 0.00015630130656063557, 0.031947214156389236, 0.0009786456357687712, 0.0005703024216927588, 0.00016288609185721725, 0.09701014310121536, 0.0029347289819270372, 0.026732854545116425, 0.8317965269088745, 4.418486241775099e-06, 3.191296471527494e-08, 1.3480729421644355e-07, 5.790530011040573e-08, 9.683931523341016e-08], "repair_candidates": [0.0016159238293766975, 0.0006067429203540087, 5.890882312087342e-05, 0.00018561612523626536, 0.005033534951508045, 0.00012112047261325642, 0.00015630130656063557, 0.031947214156389236, 1.6163659893209115e-05, 0.0009786456357687712, 0.0005703024216927588, 0.00016288609185721725, 0.09701014310121536, 0.0029347289819270372, 0.026732854545116425, 2.1276924599078484e-05, 0.8317965269088745, 4.418486241775099e-06, 4.786730642081238e-06, 5.92327160120476e-06, 1.20634888389759e-06, 1.189232463616463e-07, 3.191296471527494e-08, 1.3480729421644355e-07, 9.443815542908851e-07, 5.341060500541062e-07, 5.790530011040573e-08, 3.0258983315434307e-05, 9.683931523341016e-08, 2.570225660747383e-06, 3.3872311178129166e-08], "target_probs": 0.9999162554740906}}


{"result": {"time": "2021-02-21 12:37:01.277760", "n_pass": [357, 34, 25], "n_token": 170, "loss": [0.003931294661015272, 0.00010270407801726833], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "#NEWLINE#", "if", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 93, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 43, 49, 53, 62, 67, 71, 82, 101, 127, 131, 149, 158], "repair_candidates": [38, 111, 136, 153, 162, 168, 124, 144, 2, 9, 13, 18, 23, 27, 30, 36, 43, 49, 53, 62, 67, 71, 82, 101, 127, 131, 149, 158, 77, 107, 120]}}
{"prediction": {"error_location": 0.9960762858390808, "repair_targets": [0.0014602035516873002, 0.0008238470181822777, 5.904509453102946e-05, 0.0002461650874465704, 0.006093365140259266, 0.0001872387801995501, 0.00021829702018294483, 0.03699425607919693, 0.0005450827302411199, 0.00046514280256815255, 0.00011955235095229, 0.10708966851234436, 0.002626006258651614, 0.02600991353392601, 0.8169535398483276, 5.623404376819963e-06, 3.379331303676736e-08, 1.7373052685343282e-07, 7.079645314433947e-08, 1.1924927889594983e-07], "repair_candidates": [0.0014602035516873002, 0.0008238470181822777, 5.904509453102946e-05, 0.0002461650874465704, 0.006093365140259266, 0.0001872387801995501, 0.00021829702018294483, 0.03699425607919693, 1.750448609527666e-05, 0.0005450827302411199, 0.00046514280256815255, 0.00011955235095229, 0.10708966851234436, 0.002626006258651614, 0.02600991353392601, 3.241862214053981e-05, 0.8169535398483276, 5.623404376819963e-06, 4.751657797896769e-06, 6.990875135670649e-06, 1.096864707506029e-06, 1.7871941793146107e-07, 3.379331303676736e-08, 1.7373052685343282e-07, 1.2251963426024304e-06, 5.802190230497217e-07, 7.079645314433947e-08, 3.476352503639646e-05, 1.1924927889594983e-07, 3.001798631885322e-06, 3.9133027485149796e-08], "target_probs": 0.999897301197052}}


{"result": {"time": "2021-02-21 12:37:01.437575", "n_pass": [358, 35, 26], "n_token": 168, "loss": [0.0033069944474846125, 0.00010675761586753651], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", ".", "label", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 91, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 47, 51, 60, 65, 69, 80, 99, 125, 129, 147, 156], "repair_candidates": [38, 109, 134, 151, 160, 166, 122, 142, 2, 9, 13, 18, 23, 27, 30, 36, 41, 47, 51, 60, 65, 69, 80, 99, 125, 129, 147, 156, 75, 105, 118]}}
{"prediction": {"error_location": 0.996698260307312, "repair_targets": [0.001944759045727551, 0.0009312795009464025, 8.215539128286764e-05, 0.0002805219846777618, 0.007535944227129221, 0.00021741616365034133, 0.00022909801919013262, 0.011640840210020542, 0.0005815392360091209, 0.0002559016866143793, 0.00012217360199429095, 0.07792531698942184, 0.002521151676774025, 0.02693265676498413, 0.8686869740486145, 5.089833848614944e-06, 3.313013152705935e-08, 2.0554188040478039e-07, 7.495125231571365e-08, 1.207074546982767e-07], "repair_candidates": [0.001944759045727551, 0.0009312795009464025, 8.215539128286764e-05, 0.0002805219846777618, 0.007535944227129221, 0.00021741616365034133, 0.00022909801919013262, 0.011640840210020542, 2.021637192228809e-05, 0.0005815392360091209, 0.0002559016866143793, 0.00012217360199429095, 0.07792531698942184, 0.002521151676774025, 0.02693265676498413, 3.201418439857662e-05, 0.8686869740486145, 5.089833848614944e-06, 7.875879418861587e-06, 6.669787126156734e-06, 1.3599159274235717e-06, 1.841808483504792e-07, 3.313013152705935e-08, 2.0554188040478039e-07, 1.0723607601903495e-06, 5.206082391850941e-07, 7.495125231571365e-08, 3.381449278094806e-05, 1.207074546982767e-07, 2.9057111987640383e-06, 4.00264887900903e-08], "target_probs": 0.9998932480812073}}


{"result": {"time": "2021-02-21 12:37:01.595509", "n_pass": [360, 36, 27], "n_token": 166, "loss": [0.0028840398881584406, 0.00013978265633340925], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "#INDENT#", "return", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 89, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 45, 49, 58, 63, 67, 78, 97, 123, 127, 145, 154], "repair_candidates": [38, 107, 132, 149, 158, 164, 120, 140, 2, 9, 13, 18, 23, 27, 30, 36, 41, 45, 49, 58, 63, 67, 78, 97, 123, 127, 145, 154, 73, 103, 116]}}
{"prediction": {"error_location": 0.9971202611923218, "repair_targets": [0.0019387860083952546, 0.0010778199648484588, 8.905258437152952e-05, 0.0003392979851923883, 0.008089222945272923, 0.00028166681295260787, 0.0002505036536604166, 0.008801862597465515, 0.000288806768367067, 0.00012993912969250232, 0.00010220606054645032, 0.07306209206581116, 0.0024511392693966627, 0.032288674265146255, 0.8706613779067993, 7.254794127220521e-06, 4.5614854116138304e-08, 2.6304996936232783e-07, 9.512176291082142e-08, 1.4874659370889276e-07], "repair_candidates": [0.0019387860083952546, 0.0010778199648484588, 8.905258437152952e-05, 0.0003392979851923883, 0.008089222945272923, 0.00028166681295260787, 0.0002505036536604166, 0.008801862597465515, 3.389034100109711e-05, 0.000288806768367067, 0.00012993912969250232, 0.00010220606054645032, 0.07306209206581116, 0.0024511392693966627, 0.032288674265146255, 4.388497836771421e-05, 0.8706613779067993, 7.254794127220521e-06, 6.989420398895163e-06, 8.895661267160904e-06, 1.3831512433171156e-06, 2.1658770776866731e-07, 4.5614854116138304e-08, 2.6304996936232783e-07, 1.2926624322062708e-06, 5.809563390357653e-07, 9.512176291082142e-08, 3.8996538933133706e-05, 1.4874659370889276e-07, 3.4128811421396676e-06, 4.761187000212885e-08], "target_probs": 0.9998602271080017}}


{"result": {"time": "2021-02-21 12:37:01.752309", "n_pass": [361, 37, 28], "n_token": 164, "loss": [0.002869419287890196, 0.00013894807489123195], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ".", "text", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 87, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 47, 56, 61, 65, 76, 95, 121, 125, 143, 152], "repair_candidates": [38, 105, 130, 147, 156, 162, 118, 138, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 47, 56, 61, 65, 76, 95, 121, 125, 143, 152, 71, 101, 114]}}
{"prediction": {"error_location": 0.9971344470977783, "repair_targets": [0.0022246830631047487, 0.0009973271517083049, 9.134256833931431e-05, 0.000322291482007131, 0.007700285874307156, 0.00024352209584321827, 0.0002029314055107534, 0.008772390894591808, 0.0002975054376292974, 0.0004989551962353289, 6.865457544336095e-05, 0.07860749959945679, 0.002555269282311201, 0.03614841774106026, 0.861121416091919, 7.961088158481289e-06, 3.9949899388602716e-08, 2.9473918061739823e-07, 9.764264774503317e-08, 1.5735500369373767e-07], "repair_candidates": [0.0022246830631047487, 0.0009973271517083049, 9.134256833931431e-05, 0.000322291482007131, 0.007700285874307156, 0.00024352209584321827, 0.0002029314055107534, 0.008772390894591808, 2.6467636416782625e-05, 0.0002975054376292974, 0.0004989551962353289, 6.865457544336095e-05, 0.07860749959945679, 0.002555269282311201, 0.03614841774106026, 4.3285279389237985e-05, 0.861121416091919, 7.961088158481289e-06, 8.561062713852152e-06, 1.0969864888465963e-05, 1.472469421059941e-06, 2.232789171330296e-07, 3.9949899388602716e-08, 2.9473918061739823e-07, 1.3964253184894915e-06, 6.457888730437844e-07, 9.764264774503317e-08, 4.221050039632246e-05, 1.5735500369373767e-07, 3.6973033274989575e-06, 5.0157353825852624e-08], "target_probs": 0.9998610615730286}}


{"result": {"time": "2021-02-21 12:37:01.909482", "n_pass": [363, 38, 29], "n_token": 162, "loss": [0.0028917661402374506, 0.00011707037629093975], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 85, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 54, 59, 63, 74, 93, 119, 123, 141, 150], "repair_candidates": [38, 103, 128, 145, 154, 160, 116, 136, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 54, 59, 63, 74, 93, 119, 123, 141, 150, 69, 99, 112]}}
{"prediction": {"error_location": 0.9971123933792114, "repair_targets": [0.0013093309244140983, 0.0005244560306891799, 5.691746991942637e-05, 0.00023631197109352797, 0.005221452098339796, 0.00019645527936518192, 0.0002494072250556201, 0.00980597734451294, 0.00017782153736334294, 0.00010292611113982275, 2.3665352273383178e-05, 0.07184699177742004, 0.0033487381879240274, 0.054107390344142914, 0.852669358253479, 5.325179245119216e-06, 3.385719438142587e-08, 2.2884653105847974e-07, 7.172737781502292e-08, 1.1600995009075632e-07], "repair_candidates": [0.0013093309244140983, 0.0005244560306891799, 5.691746991942637e-05, 0.00023631197109352797, 0.005221452098339796, 0.00019645527936518192, 0.0002494072250556201, 0.00980597734451294, 2.4790317183942534e-05, 0.00017782153736334294, 0.00010292611113982275, 2.3665352273383178e-05, 0.07184699177742004, 0.0033487381879240274, 0.054107390344142914, 4.462980723474175e-05, 0.852669358253479, 5.325179245119216e-06, 5.37005780643085e-06, 5.446286650112597e-06, 1.1251090654695872e-06, 1.497656683113746e-07, 3.385719438142587e-08, 2.2884653105847974e-07, 9.59472913564241e-07, 5.202126658332418e-07, 7.172737781502292e-08, 3.134746293653734e-05, 1.1600995009075632e-07, 2.719026269915048e-06, 3.834949424685874e-08], "target_probs": 0.9998829364776611}}


{"result": {"time": "2021-02-21 12:37:02.064688", "n_pass": [365, 39, 30], "n_token": 160, "loss": [0.003323628567159176, 0.0001526591513538733], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 83, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 52, 57, 61, 72, 91, 117, 121, 139, 148], "repair_candidates": [38, 101, 126, 143, 152, 158, 114, 134, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 52, 57, 61, 72, 91, 117, 121, 139, 148, 67, 97, 110]}}
{"prediction": {"error_location": 0.9966817498207092, "repair_targets": [0.0018852415960282087, 0.0008283181814476848, 8.32953373901546e-05, 0.0003213935124222189, 0.007250378839671612, 0.0002775325265247375, 0.00026056834030896425, 0.011022020131349564, 0.0002915848162956536, 0.00023559316468890756, 3.949070378439501e-05, 0.0490327924489975, 0.0011376815382391214, 0.02751968801021576, 0.8996537327766418, 7.411546448565787e-06, 3.9545021479625575e-08, 2.9291743430803763e-07, 1.0290354168773774e-07, 1.7330951607164025e-07], "repair_candidates": [0.0018852415960282087, 0.0008283181814476848, 8.32953373901546e-05, 0.0003213935124222189, 0.007250378839671612, 0.0002775325265247375, 0.00026056834030896425, 0.011022020131349564, 3.349570033606142e-05, 0.0002915848162956536, 0.00023559316468890756, 3.949070378439501e-05, 0.0490327924489975, 0.0011376815382391214, 0.02751968801021576, 5.355942630558275e-05, 0.8996537327766418, 7.411546448565787e-06, 6.752410172339296e-06, 1.0143481631530449e-05, 1.1700093409672263e-06, 1.7812469366162986e-07, 3.9545021479625575e-08, 2.9291743430803763e-07, 1.516978045401629e-06, 6.503157692350214e-07, 1.0290354168773774e-07, 4.165618884144351e-05, 1.7330951607164025e-07, 3.542072818163433e-06, 4.832079980587878e-08], "target_probs": 0.9998473525047302}}


{"result": {"time": "2021-02-21 12:37:02.218669", "n_pass": [366, 40, 31], "n_token": 157, "loss": [0.004423713777214289, 0.0001408557000104338], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "(", "not", "(", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 80, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 49, 54, 58, 69, 88, 114, 118, 136, 145], "repair_candidates": [38, 98, 123, 140, 149, 155, 111, 131, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 49, 54, 58, 69, 88, 114, 118, 136, 145, 64, 94, 107]}}
{"prediction": {"error_location": 0.9955860376358032, "repair_targets": [0.0024167103692889214, 0.0014289249666035175, 8.340032945852727e-05, 0.0004319664731156081, 0.010726405307650566, 0.00031490056426264346, 0.0002829917357303202, 0.007446729578077793, 5.7051554904319346e-05, 6.177292380016297e-05, 1.4164060303301085e-05, 0.004509224556386471, 0.00028131456929259, 0.008469592779874802, 0.9633280038833618, 5.483385393745266e-06, 3.251048141805768e-08, 2.4707151169423014e-07, 9.195876771173062e-08, 1.4741796405814966e-07], "repair_candidates": [0.0024167103692889214, 0.0014289249666035175, 8.340032945852727e-05, 0.0004319664731156081, 0.010726405307650566, 0.00031490056426264346, 0.0002829917357303202, 0.007446729578077793, 3.176448444719426e-05, 5.7051554904319346e-05, 6.177292380016297e-05, 1.4164060303301085e-05, 0.004509224556386471, 0.00028131456929259, 0.008469592779874802, 4.708021879196167e-05, 0.9633280038833618, 5.483385393745266e-06, 7.18705859981128e-06, 8.574688763474114e-06, 1.3461099115374964e-06, 1.8320689321171812e-07, 3.251048141805768e-08, 2.4707151169423014e-07, 1.4437202935368987e-06, 6.52656808597385e-07, 9.195876771173062e-08, 3.9276717870961875e-05, 1.4741796405814966e-07, 3.2392847515438916e-06, 4.4754937533753036e-08], "target_probs": 0.9998591542243958}}


{"result": {"time": "2021-02-21 12:37:02.370238", "n_pass": [367, 41, 32], "n_token": 154, "loss": [0.004575972445309162, 0.00018049914797302336], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", ".", "text", ",", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 77, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 55, 66, 85, 111, 115, 133, 142], "repair_candidates": [38, 95, 120, 137, 146, 152, 108, 128, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 55, 66, 85, 111, 115, 133, 142, 61, 91, 104]}}
{"prediction": {"error_location": 0.9954344630241394, "repair_targets": [0.002804780611768365, 0.0008267962839454412, 0.0001029206468956545, 0.00034788186894729733, 0.011529090814292431, 0.00023955800861585885, 0.0003624495002441108, 0.010326949879527092, 0.00035616845707409084, 0.00045002601109445095, 0.0006747889565303922, 0.0007700384594500065, 0.0004261508001945913, 0.010255446657538414, 0.9603394269943237, 6.35175138086197e-06, 4.490114591249039e-08, 3.1404891842612415e-07, 1.11111901901495e-07, 1.8270333157488494e-07], "repair_candidates": [0.002804780611768365, 0.0008267962839454412, 0.0001029206468956545, 0.00034788186894729733, 0.011529090814292431, 0.00023955800861585885, 0.0003624495002441108, 0.010326949879527092, 5.343655720935203e-05, 0.00035616845707409084, 0.00045002601109445095, 0.0006747889565303922, 0.0007700384594500065, 0.0004261508001945913, 0.010255446657538414, 5.173068348085508e-05, 0.9603394269943237, 6.35175138086197e-06, 7.63583739171736e-06, 1.2586175216711126e-05, 1.5410545302074752e-06, 2.0974805181595002e-07, 4.490114591249039e-08, 3.1404891842612415e-07, 1.8546999172031065e-06, 7.481233410544519e-07, 1.11111901901495e-07, 4.70042614324484e-05, 1.8270333157488494e-07, 3.6730803003592882e-06, 4.911375839355969e-08], "target_probs": 0.9998195171356201}}


{"result": {"time": "2021-02-21 12:37:02.521231", "n_pass": [370, 42, 33], "n_token": 151, "loss": [0.00722959591075778, 0.0003656817425508052], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", ")", "#NEWLINE#", "#UNINDENT#", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 74, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 63, 82, 108, 112, 130, 139], "repair_candidates": [38, 92, 117, 134, 143, 149, 105, 125, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 63, 82, 108, 112, 130, 139, 58, 88, 101]}}
{"prediction": {"error_location": 0.9927965998649597, "repair_targets": [0.0016818651929497719, 0.0009191928547807038, 9.956005669664592e-05, 0.0003691880265250802, 0.0086298156529665, 0.0002680173492990434, 0.0004994722548872232, 0.005361507646739483, 0.00029980557155795395, 0.0012313358020037413, 0.0013507362455129623, 0.0003405546012800187, 0.001700666849501431, 0.0014173324452713132, 0.975456178188324, 8.22791025711922e-06, 7.003110624737019e-08, 4.0930379441306286e-07, 1.8508931987071264e-07, 3.001784705247701e-07], "repair_candidates": [0.0016818651929497719, 0.0009191928547807038, 9.956005669664592e-05, 0.0003691880265250802, 0.0086298156529665, 0.0002680173492990434, 0.0004994722548872232, 0.005361507646739483, 9.972426050808281e-05, 0.00029980557155795395, 0.0012313358020037413, 0.0013507362455129623, 0.0003405546012800187, 0.001700666849501431, 0.0014173324452713132, 0.00013705197488889098, 0.975456178188324, 8.22791025711922e-06, 1.1643129255389795e-05, 2.11581755138468e-05, 2.279432692375849e-06, 3.284056617758324e-07, 7.003110624737019e-08, 4.0930379441306286e-07, 3.537943257470033e-06, 1.3292579978951835e-06, 1.8508931987071264e-07, 8.251339022535831e-05, 3.001784705247701e-07, 5.986948508507339e-06, 8.240294135930526e-08], "target_probs": 0.9996343851089478}}


{"result": {"time": "2021-02-21 12:37:02.670983", "n_pass": [372, 43, 34], "n_token": 148, "loss": [0.0016251702327281237, 0.00033020463888533413], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", ".", "label", "[", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 71, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 79, 105, 109, 127, 136], "repair_candidates": [38, 89, 114, 131, 140, 146, 102, 122, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 79, 105, 109, 127, 136, 55, 85, 98]}}
{"prediction": {"error_location": 0.9983761310577393, "repair_targets": [0.005150981713086367, 0.0015261505031958222, 0.0002126443141605705, 0.0006060911691747606, 0.019791966304183006, 0.00041676778346300125, 0.0007458843174390495, 0.013074863702058792, 0.0008587834890931845, 0.001023733289912343, 0.0018370357574895024, 0.0013704998418688774, 0.004519013222306967, 0.003950266633182764, 0.9445660710334778, 1.7414555259165354e-05, 1.1773481389809604e-07, 6.602426196877786e-07, 2.7962326498709444e-07, 5.783670644632366e-07], "repair_candidates": [0.005150981713086367, 0.0015261505031958222, 0.0002126443141605705, 0.0006060911691747606, 0.019791966304183006, 0.00041676778346300125, 0.0007458843174390495, 0.013074863702058792, 0.00015088521467987448, 0.0008587834890931845, 0.001023733289912343, 0.0018370357574895024, 0.0013704998418688774, 0.004519013222306967, 0.003950266633182764, 6.960924565646565e-06, 0.9445660710334778, 1.7414555259165354e-05, 6.283053608058253e-06, 2.2269603505264968e-05, 2.5896770239342004e-06, 3.7608907632602495e-07, 1.1773481389809604e-07, 6.602426196877786e-07, 4.316130343795521e-06, 1.873778842309548e-06, 2.7962326498709444e-07, 0.0001239161065313965, 5.783670644632366e-07, 1.0448318789713085e-05, 1.5196691549590469e-07], "target_probs": 0.9996698498725891}}


{"result": {"time": "2021-02-21 12:37:02.818299", "n_pass": [375, 44, 35], "n_token": 145, "loss": [0.0030449714977294207, 0.006376046221703291], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "0", "]", ")", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 68, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 76, 102, 106, 124, 133], "repair_candidates": [38, 86, 111, 128, 137, 143, 99, 119, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 76, 102, 106, 124, 133, 55, 82, 95]}}
{"prediction": {"error_location": 0.9969598054885864, "repair_targets": [0.09985631704330444, 0.03343666344881058, 0.00388049497269094, 0.011473688296973705, 0.3692437410354614, 0.008903801441192627, 0.013733389787375927, 0.3073423206806183, 0.01779787801206112, 0.017808184027671814, 0.01984032616019249, 0.011473379097878933, 0.02852887101471424, 0.013543263077735901, 0.03645817190408707, 0.00028917708550579846, 2.0359364043542882e-06, 1.4340846973937005e-05, 6.011766799929319e-06, 1.2155179319961462e-05], "repair_candidates": [0.09985631704330444, 0.03343666344881058, 0.00388049497269094, 0.011473688296973705, 0.3692437410354614, 0.008903801441192627, 0.013733389787375927, 0.3073423206806183, 0.0027019947301596403, 0.01779787801206112, 0.017808184027671814, 0.01984032616019249, 0.011473379097878933, 0.02852887101471424, 0.013543263077735901, 0.000309518858557567, 0.03645817190408707, 0.00028917708550579846, 6.88173677190207e-05, 0.00041800993494689465, 4.750538573716767e-05, 6.599227617698489e-06, 2.0359364043542882e-06, 1.4340846973937005e-05, 8.816854824544862e-05, 4.0907816583057866e-05, 6.011766799929319e-06, 0.002459800336509943, 1.2155179319961462e-05, 0.00021129728702362627, 3.170426225551637e-06], "target_probs": 0.9936442375183105}}


{"result": {"time": "2021-02-21 12:37:02.964086", "n_pass": [376, 45, 36], "n_token": 142, "loss": [0.06874369084835052, 0.018720664083957672], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "and", "(", "not", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 65, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 73, 99, 103, 121, 130], "repair_candidates": [38, 83, 108, 125, 134, 140, 96, 116, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 73, 99, 103, 121, 130, 55, 79, 92]}}
{"prediction": {"error_location": 0.9335659146308899, "repair_targets": [0.09701759368181229, 0.0494266077876091, 0.004365216940641403, 0.0223022922873497, 0.4641711711883545, 0.014523159712553024, 0.014626015909016132, 0.19014380872249603, 0.01545681245625019, 0.019126059487462044, 0.020786520093679428, 0.005497110076248646, 0.04518935829401016, 0.01136040035635233, 0.006653680000454187, 0.000714780471753329, 5.669037818734068e-06, 3.9066591853043064e-05, 1.79789185494883e-05, 3.02426669804845e-05], "repair_candidates": [0.09701759368181229, 0.0494266077876091, 0.004365216940641403, 0.0223022922873497, 0.4641711711883545, 0.014523159712553024, 0.014626015909016132, 0.19014380872249603, 0.005246329586952925, 0.01545681245625019, 0.019126059487462044, 0.020786520093679428, 0.005497110076248646, 0.04518935829401016, 0.01136040035635233, 0.002381983445957303, 0.006653680000454187, 0.000714780471753329, 0.00028685948927886784, 0.001266694045625627, 0.0001445209636585787, 2.1042651496827602e-05, 5.669037818734068e-06, 3.9066591853043064e-05, 0.00031763475271873176, 0.00014819050556980073, 1.79789185494883e-05, 0.008092605508863926, 3.02426669804845e-05, 0.0006315489881671965, 9.034955837705638e-06], "target_probs": 0.9814534783363342}}


{"result": {"time": "2021-02-21 12:37:03.108012", "n_pass": [377, 46, 37], "n_token": 139, "loss": [0.20363476872444153, 0.07399830222129822], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", "label", ")", ")", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 62, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 70, 96, 100, 118, 127], "repair_candidates": [38, 80, 105, 122, 131, 137, 93, 113, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 70, 96, 100, 118, 127, 55, 76, 89]}}
{"prediction": {"error_location": 0.8157603144645691, "repair_targets": [0.06571920961141586, 0.05180991441011429, 0.0027146621141582727, 0.04153230041265488, 0.33901646733283997, 0.025979626923799515, 0.005754050333052874, 0.038407959043979645, 0.009356425143778324, 0.007897285744547844, 0.006462730932980776, 0.0012630716664716601, 0.22847197949886322, 0.09590717405080795, 0.006842510309070349, 0.001187858753837645, 1.6308544218190946e-05, 0.0001277442352147773, 8.813373278826475e-05, 0.00011783399531850591], "repair_candidates": [0.06571920961141586, 0.05180991441011429, 0.0027146621141582727, 0.04153230041265488, 0.33901646733283997, 0.025979626923799515, 0.005754050333052874, 0.038407959043979645, 0.03047057054936886, 0.009356425143778324, 0.007897285744547844, 0.006462730932980776, 0.0012630716664716601, 0.22847197949886322, 0.09590717405080795, 0.0016506544779986143, 0.006842510309070349, 0.001187858753837645, 0.0007435876759700477, 0.004114470444619656, 0.00026044397964142263, 7.676157838432118e-05, 1.6308544218190946e-05, 0.0001277442352147773, 0.0018459270941093564, 0.0004345203342381865, 8.813373278826475e-05, 0.029589561745524406, 0.00011783399531850591, 0.0021105841733515263, 2.9615061066579074e-05], "target_probs": 0.928673267364502}}


{"result": {"time": "2021-02-21 12:37:03.250708", "n_pass": [379, 47, 38], "n_token": 136, "loss": [0.7275071144104004, 0.1553044319152832], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "=", "filter", "(", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 62, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 115, 124], "repair_candidates": [38, 77, 102, 119, 128, 134, 90, 110, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 115, 124, 55, 73, 86]}}
{"prediction": {"error_location": 0.48311182856559753, "repair_targets": [0.05956145375967026, 0.06263048201799393, 0.0027600927278399467, 0.044724367558956146, 0.28925663232803345, 0.029016243293881416, 0.005760239902883768, 0.029240820556879044, 0.00805213488638401, 0.008217481896281242, 0.005606831982731819, 0.0011875737691298127, 0.2221957892179489, 0.07498277723789215, 0.011107404716312885, 0.0010641246335580945, 3.3076976251322776e-05, 0.0003083843330387026, 0.00022723179426975548, 0.00022137710766401142], "repair_candidates": [0.05956145375967026, 0.06263048201799393, 0.0027600927278399467, 0.044724367558956146, 0.28925663232803345, 0.029016243293881416, 0.005760239902883768, 0.029240820556879044, 0.05039933696389198, 0.00805213488638401, 0.008217481896281242, 0.005606831982731819, 0.0011875737691298127, 0.2221957892179489, 0.07498277723789215, 0.0016509455163031816, 0.011107404716312885, 0.0010641246335580945, 0.0018912277882918715, 0.012409595772624016, 0.0003701486566569656, 0.00015253695892170072, 3.3076976251322776e-05, 0.0003083843330387026, 0.00578560633584857, 0.0007356561836786568, 0.00022723179426975548, 0.06536873430013657, 0.00022137710766401142, 0.00502351438626647, 5.814343603560701e-05], "target_probs": 0.8561545014381409}}


{"result": {"time": "2021-02-21 12:37:04.091454", "n_pass": [393, 53, 39], "n_token": 133, "loss": [0.6798444986343384, 0.19033384323120117], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "None", ",", "map", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 62, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 112, 121], "repair_candidates": [38, 77, 102, 116, 125, 131, 90, 107, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 112, 121, 55, 73, 86]}}
{"prediction": {"error_location": 0.5066957473754883, "repair_targets": [0.061861079186201096, 0.06251173466444016, 0.0028397103305906057, 0.04419634863734245, 0.3003150224685669, 0.031163660809397697, 0.006296640727669001, 0.019411562010645866, 0.012925373390316963, 0.00924462080001831, 0.006682877894490957, 0.0012212893925607204, 0.19201816618442535, 0.06327413022518158, 0.011075782589614391, 0.0009288378059864044, 3.65868145308923e-05, 0.00027766532730311155, 0.0001925045216921717, 0.00020957179367542267], "repair_candidates": [0.061861079186201096, 0.06251173466444016, 0.0028397103305906057, 0.04419634863734245, 0.3003150224685669, 0.031163660809397697, 0.006296640727669001, 0.019411562010645866, 0.07256703078746796, 0.012925373390316963, 0.00924462080001831, 0.006682877894490957, 0.0012212893925607204, 0.19201816618442535, 0.06327413022518158, 0.0011670730309560895, 0.011075782589614391, 0.0009288378059864044, 0.001238183001987636, 0.010228383354842663, 0.00032826606184244156, 0.00015060709847602993, 3.65868145308923e-05, 0.00027766532730311155, 0.0019313351949676871, 0.001992906676605344, 0.0001925045216921717, 0.07780109345912933, 0.00020957179367542267, 0.005830470006912947, 8.15034654806368e-05], "target_probs": 0.8266831040382385}}


{"result": {"time": "2021-02-21 12:37:04.231353", "n_pass": [394, 54, 40], "n_token": 130, "loss": [0.5441526174545288, 0.11899370700120926], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 62, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 109, 118], "repair_candidates": [38, 77, 102, 113, 122, 128, 90, 104, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 109, 118, 55, 73, 86]}}
{"prediction": {"error_location": 0.5803332328796387, "repair_targets": [0.062141500413417816, 0.059262655675411224, 0.0029438002966344357, 0.04306311532855034, 0.31952473521232605, 0.03285796940326691, 0.006396121811121702, 0.026384146884083748, 0.010860023088753223, 0.007775428704917431, 0.006492448505014181, 0.0012317277723923326, 0.22217711806297302, 0.07487978786230087, 0.010726837441325188, 0.0005721824709326029, 3.185568129993044e-05, 0.0001917523768497631, 0.00017802826187107712, 0.00012211874127388], "repair_candidates": [0.062141500413417816, 0.059262655675411224, 0.0029438002966344357, 0.04306311532855034, 0.31952473521232605, 0.03285796940326691, 0.006396121811121702, 0.026384146884083748, 0.043209291994571686, 0.010860023088753223, 0.007775428704917431, 0.006492448505014181, 0.0012317277723923326, 0.22217711806297302, 0.07487978786230087, 0.0008154996321536601, 0.010726837441325188, 0.0005721824709326029, 0.0008077894453890622, 0.0071813748218119144, 0.00018628132238518447, 0.000233391227084212, 3.185568129993044e-05, 0.0001917523768497631, 0.00026752581470645964, 0.0005286383093334734, 0.00017802826187107712, 0.05475229769945145, 0.00012211874127388, 0.004143339116126299, 6.108231900725514e-05], "target_probs": 0.8878133893013}}


{"result": {"time": "2021-02-21 12:37:04.368858", "n_pass": [396, 55, 41], "n_token": 127, "loss": [0.8136637210845947, 0.07631464302539825], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", ".", "get_head", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 62, "repair_targets": [2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 106, 115], "repair_candidates": [38, 77, 102, 110, 119, 125, 90, 104, 2, 9, 13, 18, 23, 27, 30, 36, 41, 43, 45, 46, 51, 52, 60, 67, 93, 97, 106, 115, 55, 73, 86]}}
{"prediction": {"error_location": 0.4432311952114105, "repair_targets": [0.059397973120212555, 0.06533929705619812, 0.003040546551346779, 0.04740079864859581, 0.2905888855457306, 0.02546910010278225, 0.005243937950581312, 0.04439029470086098, 0.009820983745157719, 0.005790587980300188, 0.005608954932540655, 0.0012231458676978946, 0.2822357416152954, 0.0671493336558342, 0.011282825842499733, 0.0009210152784362435, 5.24040988238994e-05, 0.00021164855570532382, 0.0012448306661099195, 0.00011232264660065994], "repair_candidates": [0.059397973120212555, 0.06533929705619812, 0.003040546551346779, 0.04740079864859581, 0.2905888855457306, 0.02546910010278225, 0.005243937950581312, 0.04439029470086098, 0.035330865532159805, 0.009820983745157719, 0.005790587980300188, 0.005608954932540655, 0.0012231458676978946, 0.2822357416152954, 0.0671493336558342, 0.0009866583859547973, 0.011282825842499733, 0.0009210152784362435, 0.0014472093898802996, 0.00954823475331068, 0.0004705510218627751, 0.0006067676586098969, 5.24040988238994e-05, 0.00021164855570532382, 0.0008991482318378985, 0.0036211165133863688, 0.0012448306661099195, 0.018804771825671196, 0.00011232264660065994, 0.001695332583039999, 6.47018532617949e-05], "target_probs": 0.9265246391296387}}


{"result": {"time": "2021-02-21 12:37:05.183261", "n_pass": [409, 61, 42], "n_token": 125, "loss": [1.1109492778778076, 0.03930932655930519], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", ".", "#INDENT#", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 60, "repair_targets": [2, 9, 11, 16, 21, 25, 28, 34, 39, 41, 43, 44, 49, 50, 58, 65, 91, 95, 104, 113], "repair_candidates": [36, 75, 100, 108, 117, 123, 88, 102, 2, 9, 11, 16, 21, 25, 28, 34, 39, 41, 43, 44, 49, 50, 58, 65, 91, 95, 104, 113, 53, 71, 84]}}
{"prediction": {"error_location": 0.32924628257751465, "repair_targets": [0.027845628559589386, 0.5320978760719299, 0.000944966624956578, 0.022171365097165108, 0.18222591280937195, 0.017303410917520523, 0.003661764319986105, 0.0279539842158556, 0.013946136459708214, 0.0016733718803152442, 0.003460307139903307, 0.0005071802879683673, 0.0975748598575592, 0.023665284737944603, 0.005185263231396675, 0.0005380468792282045, 2.4266837499453686e-05, 9.472135570831597e-05, 0.0005239401361905038, 5.494498327607289e-05], "repair_candidates": [0.027845628559589386, 0.5320978760719299, 0.000944966624956578, 0.022171365097165108, 0.18222591280937195, 0.017303410917520523, 0.003661764319986105, 0.0279539842158556, 0.018440870568156242, 0.013946136459708214, 0.0016733718803152442, 0.003460307139903307, 0.0005071802879683673, 0.0975748598575592, 0.023665284737944603, 0.0002803099050652236, 0.005185263231396675, 0.0005380468792282045, 0.0004242825962137431, 0.004243099596351385, 0.00016296420653816313, 0.0002830436860676855, 2.4266837499453686e-05, 9.472135570831597e-05, 0.000280935870250687, 0.0011037164367735386, 0.0005239401361905038, 0.01232081651687622, 5.494498327607289e-05, 0.0009783058194443583, 2.844873051799368e-05], "target_probs": 0.9614532589912415}}


{"result": {"time": "2021-02-21 12:37:05.320072", "n_pass": [411, 62, 43], "n_token": 123, "loss": [0.886685848236084, 0.056986480951309204], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "if", "(", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 58, "repair_targets": [2, 9, 11, 14, 19, 23, 26, 32, 37, 39, 41, 42, 47, 48, 56, 63, 89, 93, 102, 111], "repair_candidates": [34, 73, 98, 106, 115, 121, 86, 100, 2, 9, 11, 14, 19, 23, 26, 32, 37, 39, 41, 42, 47, 48, 56, 63, 89, 93, 102, 111, 51, 69, 82]}}
{"prediction": {"error_location": 0.4120190143585205, "repair_targets": [0.027725305408239365, 0.44003310799598694, 0.053116150200366974, 0.005077362060546875, 0.16433963179588318, 0.03011811338365078, 0.00634386483579874, 0.04037558287382126, 0.01587935909628868, 0.004642195999622345, 0.005875385366380215, 0.001004689489491284, 0.11234167963266373, 0.027262883260846138, 0.008411782793700695, 0.0008090838673524559, 4.767543214256875e-05, 0.000254372920608148, 0.0008264444768428802, 0.0001221751153934747], "repair_candidates": [0.027725305408239365, 0.44003310799598694, 0.053116150200366974, 0.005077362060546875, 0.16433963179588318, 0.03011811338365078, 0.00634386483579874, 0.04037558287382126, 0.016197416931390762, 0.01587935909628868, 0.004642195999622345, 0.005875385366380215, 0.001004689489491284, 0.11234167963266373, 0.027262883260846138, 0.00043673967593349516, 0.008411782793700695, 0.0008090838673524559, 0.0008533769869245589, 0.011058983393013477, 0.00026449261349625885, 0.0004289878997951746, 4.767543214256875e-05, 0.000254372920608148, 0.0007941981893964112, 0.0016719851410016418, 0.0008264444768428802, 0.021868161857128143, 0.0001221751153934747, 0.0017663354519754648, 5.25085924891755e-05], "target_probs": 0.9446068406105042}}


{"result": {"time": "2021-02-21 12:37:05.455098", "n_pass": [412, 63, 44], "n_token": 121, "loss": [0.5140441656112671, 0.046069733798503876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "#NEWLINE#", "#INDENT#", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 56, "repair_targets": [2, 9, 11, 12, 17, 21, 24, 30, 35, 37, 39, 40, 45, 46, 54, 61, 87, 91, 100, 109], "repair_candidates": [32, 71, 96, 104, 113, 119, 84, 98, 2, 9, 11, 12, 17, 21, 24, 30, 35, 37, 39, 40, 45, 46, 54, 61, 87, 91, 100, 109, 49, 67, 80]}}
{"prediction": {"error_location": 0.5980719327926636, "repair_targets": [0.04785188287496567, 0.6655669808387756, 0.0032171886414289474, 0.004214244429022074, 0.060533758252859116, 0.007370074279606342, 0.0030018859542906284, 0.012599382549524307, 0.011880242265760899, 0.0028720961418002844, 0.005510812625288963, 0.0007860912592150271, 0.093656025826931, 0.02860233373939991, 0.006262911483645439, 0.0004189565370324999, 2.6510400857659988e-05, 0.00010734705574577674, 0.0004409828979987651, 5.572454756475054e-05], "repair_candidates": [0.04785188287496567, 0.6655669808387756, 0.0032171886414289474, 0.004214244429022074, 0.060533758252859116, 0.007370074279606342, 0.0030018859542906284, 0.012599382549524307, 0.02893991395831108, 0.011880242265760899, 0.0028720961418002844, 0.005510812625288963, 0.0007860912592150271, 0.093656025826931, 0.02860233373939991, 0.00032248481875285506, 0.006262911483645439, 0.0004189565370324999, 0.0003678943030536175, 0.0039778403006494045, 0.0001372371771140024, 0.00017140535055659711, 2.6510400857659988e-05, 0.00010734705574577674, 0.0002504520525690168, 0.0007438263855874538, 0.0004409828979987651, 0.009372536092996597, 5.572454756475054e-05, 0.0007176143699325621, 2.3386603061226197e-05], "target_probs": 0.9549753665924072}}


{"result": {"time": "2021-02-21 12:37:05.589106", "n_pass": [414, 64, 45], "n_token": 119, "loss": [0.3855096399784088, 0.05492139607667923], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", ".", "head_phrase", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 54, "repair_targets": [2, 9, 11, 12, 15, 19, 22, 28, 33, 35, 37, 38, 43, 44, 52, 59, 85, 89, 98, 107], "repair_candidates": [30, 69, 94, 102, 111, 117, 82, 96, 2, 9, 11, 12, 15, 19, 22, 28, 33, 35, 37, 38, 43, 44, 52, 59, 85, 89, 98, 107, 47, 65, 78]}}
{"prediction": {"error_location": 0.6801040172576904, "repair_targets": [0.05974641814827919, 0.4129650294780731, 0.0025680477265268564, 0.0004098114441148937, 0.11215274780988693, 0.00894106924533844, 0.006564644165337086, 0.013061413541436195, 0.008176401257514954, 0.009245560504496098, 0.008237369358539581, 0.0015646909596398473, 0.22582444548606873, 0.0668121948838234, 0.009382185526192188, 0.00040773910586722195, 2.4802850020932965e-05, 8.865672134561464e-05, 0.00033776991767808795, 4.851385529036634e-05], "repair_candidates": [0.05974641814827919, 0.4129650294780731, 0.0025680477265268564, 0.0004098114441148937, 0.11215274780988693, 0.00894106924533844, 0.006564644165337086, 0.013061413541436195, 0.03856857866048813, 0.008176401257514954, 0.009245560504496098, 0.008237369358539581, 0.0015646909596398473, 0.22582444548606873, 0.0668121948838234, 0.0004437224706634879, 0.009382185526192188, 0.00040773910586722195, 0.0005017754156142473, 0.003403744660317898, 0.00016454645083285868, 0.00014881610695738345, 2.4802850020932965e-05, 8.865672134561464e-05, 0.00019420917669776827, 0.0007748386124148965, 0.00033776991767808795, 0.00868468452244997, 4.851385529036634e-05, 0.0005359878996387124, 1.960208101081662e-05], "target_probs": 0.9465595483779907}}


{"result": {"time": "2021-02-21 12:37:05.853975", "n_pass": [418, 66, 46], "n_token": 117, "loss": [0.5487028360366821, 0.04697103425860405], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "children", ")", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 52, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 26, 31, 33, 35, 36, 41, 42, 50, 57, 83, 87, 96, 105], "repair_candidates": [28, 67, 92, 100, 109, 115, 80, 94, 2, 9, 11, 12, 15, 19, 20, 26, 31, 33, 35, 36, 41, 42, 50, 57, 83, 87, 96, 105, 45, 63, 76]}}
{"prediction": {"error_location": 0.5776986479759216, "repair_targets": [0.06532176584005356, 0.49171894788742065, 0.0020818107295781374, 0.0003674438630696386, 0.05789460241794586, 0.006352143827825785, 0.0008574760868214071, 0.009649695828557014, 0.012016752734780312, 0.01047866977751255, 0.01110575906932354, 0.0027010401245206594, 0.1886219084262848, 0.08264146000146866, 0.011132696643471718, 0.0005971755599603057, 4.133507172809914e-05, 0.00010361088061472401, 0.0003781653649639338, 5.257513475953601e-05], "repair_candidates": [0.06532176584005356, 0.49171894788742065, 0.0020818107295781374, 0.0003674438630696386, 0.05789460241794586, 0.006352143827825785, 0.0008574760868214071, 0.009649695828557014, 0.028222989290952682, 0.012016752734780312, 0.01047866977751255, 0.01110575906932354, 0.0027010401245206594, 0.1886219084262848, 0.08264146000146866, 0.0005460172542370856, 0.011132696643471718, 0.0005971755599603057, 0.0005684917559847236, 0.0036770086735486984, 0.00018747428839560598, 0.00019868309027515352, 4.133507172809914e-05, 0.00010361088061472401, 0.00026935842470265925, 0.0008598909480497241, 0.0003781653649639338, 0.01068531908094883, 5.257513475953601e-05, 0.0006436128751374781, 2.609004695841577e-05], "target_probs": 0.9541150331497192}}


{"result": {"time": "2021-02-21 12:37:05.986847", "n_pass": [420, 67, 47], "n_token": 115, "loss": [0.7393009066581726, 0.040442854166030884], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", ")", "(", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 50, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 24, 29, 31, 33, 34, 39, 40, 48, 55, 81, 85, 94, 103], "repair_candidates": [26, 65, 90, 98, 107, 113, 78, 92, 2, 9, 11, 12, 15, 19, 20, 24, 29, 31, 33, 34, 39, 40, 48, 55, 81, 85, 94, 103, 43, 61, 74]}}
{"prediction": {"error_location": 0.4774475395679474, "repair_targets": [0.1250956505537033, 0.37913328409194946, 0.0014896186767145991, 0.00015898099809419364, 0.03911445289850235, 0.002228214405477047, 0.00027672070427797735, 0.00924763549119234, 0.018774820491671562, 0.006648496259003878, 0.00884795282036066, 0.0027199741452932358, 0.2652076780796051, 0.0851120725274086, 0.014583360403776169, 0.0008471118053421378, 4.356220597401261e-05, 0.00019620463717728853, 0.0005685699870809913, 6.967643275856972e-05], "repair_candidates": [0.1250956505537033, 0.37913328409194946, 0.0014896186767145991, 0.00015898099809419364, 0.03911445289850235, 0.002228214405477047, 0.00027672070427797735, 0.00924763549119234, 0.013697543181478977, 0.018774820491671562, 0.006648496259003878, 0.00884795282036066, 0.0027199741452932358, 0.2652076780796051, 0.0851120725274086, 0.0008384060929529369, 0.014583360403776169, 0.0008471118053421378, 0.0009218650520779192, 0.006494731642305851, 0.00027172709815204144, 0.0003387478063814342, 4.356220597401261e-05, 0.00019620463717728853, 0.0003255373449064791, 0.0011258490849286318, 0.0005685699870809913, 0.014678929932415485, 6.967643275856972e-05, 0.0009082222240976989, 3.439231659285724e-05], "target_probs": 0.960364043712616}}


{"result": {"time": "2021-02-21 12:37:06.116810", "n_pass": [421, 68, 48], "n_token": 113, "loss": [0.588974118232727, 0.036105453968048096], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", ")", "#NEWLINE#", "if", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 48, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 79, 83, 92, 101], "repair_candidates": [24, 63, 88, 96, 105, 111, 76, 90, 2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 79, 83, 92, 101, 41, 59, 72]}}
{"prediction": {"error_location": 0.5548962950706482, "repair_targets": [0.13575506210327148, 0.3674258887767792, 0.0015181698836386204, 0.00015768299635965377, 0.05325515568256378, 0.003706761635839939, 0.00040483041084371507, 0.015832552686333656, 0.028388721868395805, 0.007406122982501984, 0.008179954253137112, 0.003447724971920252, 0.22945281863212585, 0.09429432451725006, 0.01340425293892622, 0.0009110203827731311, 4.256368993083015e-05, 0.00023021271044854075, 0.0006448099738918245, 7.992346218088642e-05], "repair_candidates": [0.13575506210327148, 0.3674258887767792, 0.0015181698836386204, 0.00015768299635965377, 0.05325515568256378, 0.003706761635839939, 0.00040483041084371507, 0.015832552686333656, 0.010768722742795944, 0.028388721868395805, 0.007406122982501984, 0.008179954253137112, 0.003447724971920252, 0.22945281863212585, 0.09429432451725006, 0.000972492212895304, 0.01340425293892622, 0.0009110203827731311, 0.0008815113105811179, 0.0062193963676691055, 0.0002748346596490592, 0.00021648129040841013, 4.256368993083015e-05, 0.00023021271044854075, 0.0003828086773864925, 0.001282641664147377, 0.0006448099738918245, 0.013598411343991756, 7.992346218088642e-05, 0.0008296372252516448, 3.4478824090911075e-05], "target_probs": 0.96453857421875}}


{"result": {"time": "2021-02-21 12:37:06.377374", "n_pass": [435, 70, 49], "n_token": 110, "loss": [0.9656922817230225, 0.035561300814151764], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "filter", "(", "None", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 48, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 76, 80, 89, 98], "repair_candidates": [24, 60, 85, 93, 102, 108, 73, 87, 2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 76, 80, 89, 98, 41, 56, 69]}}
{"prediction": {"error_location": 0.38071945309638977, "repair_targets": [0.16101936995983124, 0.35213661193847656, 0.001511904876679182, 0.0001578224473632872, 0.06251885741949081, 0.004306975286453962, 0.00047645048471167684, 0.013973756693303585, 0.025072896853089333, 0.006751585751771927, 0.007083497010171413, 0.002792085986584425, 0.21955257654190063, 0.10112520307302475, 0.005108590237796307, 0.0004572494071908295, 4.079284190083854e-05, 0.00024513714015483856, 0.0006502736359834671, 8.181705925380811e-05], "repair_candidates": [0.16101936995983124, 0.35213661193847656, 0.001511904876679182, 0.0001578224473632872, 0.06251885741949081, 0.004306975286453962, 0.00047645048471167684, 0.013973756693303585, 0.009416934102773666, 0.025072896853089333, 0.006751585751771927, 0.007083497010171413, 0.002792085986584425, 0.21955257654190063, 0.10112520307302475, 0.00034140923526138067, 0.005108590237796307, 0.0004572494071908295, 3.5833025322062895e-05, 0.00853770226240158, 0.0001678322587395087, 0.0001938842178788036, 4.079284190083854e-05, 0.00024513714015483856, 0.0003724682901520282, 0.0010462081991136074, 0.0006502736359834671, 0.013839245773851871, 8.181705925380811e-05, 0.0009554488933645189, 2.9566492230514996e-05], "target_probs": 0.9650635719299316}}


{"result": {"time": "2021-02-21 12:37:06.505722", "n_pass": [438, 71, 50], "n_token": 107, "loss": [0.9827383756637573, 0.03745555505156517], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "(", "-", "1", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 48, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 73, 77, 86, 95], "repair_candidates": [24, 60, 82, 90, 99, 105, 70, 84, 2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 73, 77, 86, 95, 41, 56, 66]}}
{"prediction": {"error_location": 0.3742847144603729, "repair_targets": [0.16851910948753357, 0.36739832162857056, 0.0015290045412257314, 0.0001538458454888314, 0.051948338747024536, 0.004040670581161976, 0.0004590518947225064, 0.014282455667853355, 0.023805884644389153, 0.00622197613120079, 0.006652088835835457, 0.002784673124551773, 0.2128395289182663, 0.09582138061523438, 0.0052179270423948765, 0.0004575605853460729, 4.624473876901902e-05, 0.0002737244649324566, 0.0006980183534324169, 8.744005754124373e-05], "repair_candidates": [0.16851910948753357, 0.36739832162857056, 0.0015290045412257314, 0.0001538458454888314, 0.051948338747024536, 0.004040670581161976, 0.0004590518947225064, 0.014282455667853355, 0.00992248859256506, 0.023805884644389153, 0.00622197613120079, 0.006652088835835457, 0.002784673124551773, 0.2128395289182663, 0.09582138061523438, 0.0003872064989991486, 0.0052179270423948765, 0.0004575605853460729, 3.712819307111204e-05, 0.00856925267726183, 0.0002702358760870993, 0.00021101368474774063, 4.624473876901902e-05, 0.0002737244649324566, 0.00040417283889837563, 0.001113177859224379, 0.0006980183534324169, 0.014912930317223072, 8.744005754124373e-05, 0.0009029643842950463, 3.2177678804146126e-05], "target_probs": 0.9632372260093689}}


{"result": {"time": "2021-02-21 12:37:06.884089", "n_pass": [449, 74, 51], "n_token": 104, "loss": [0.775326132774353, 0.023339705541729927], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 48, "repair_targets": [2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 73, 77, 86, 92], "repair_candidates": [24, 60, 82, 90, 96, 102, 70, 84, 2, 9, 11, 12, 15, 19, 20, 22, 27, 29, 31, 32, 37, 38, 46, 53, 73, 77, 86, 92, 41, 56, 66]}}
{"prediction": {"error_location": 0.4605535864830017, "repair_targets": [0.1920088827610016, 0.33247020840644836, 0.001555867027491331, 0.00013770126679446548, 0.04733967408537865, 0.0053688958287239075, 0.00043811355135403574, 0.009810752235352993, 0.01678154058754444, 0.007003303151577711, 0.00902984943240881, 0.002452222630381584, 0.2574927508831024, 0.0886787474155426, 0.005282262805849314, 0.0003367546305526048, 7.048616680549458e-05, 0.00020215801487211138, 0.0003202757507096976, 0.00015009926573839039], "repair_candidates": [0.1920088827610016, 0.33247020840644836, 0.001555867027491331, 0.00013770126679446548, 0.04733967408537865, 0.0053688958287239075, 0.00043811355135403574, 0.009810752235352993, 0.007696087006479502, 0.01678154058754444, 0.007003303151577711, 0.00902984943240881, 0.002452222630381584, 0.2574927508831024, 0.0886787474155426, 0.0003584996156860143, 0.005282262805849314, 0.0003367546305526048, 5.484115536091849e-05, 0.0072210365906357765, 0.0004695327952504158, 0.0010453510330989957, 7.048616680549458e-05, 0.00020215801487211138, 0.00015894848911557347, 0.0017463122494518757, 0.0003202757507096976, 0.0013656499795615673, 0.00015009926573839039, 0.0029113101772964, 4.1998991946456954e-05], "target_probs": 0.976930558681488}}


{"result": {"time": "2021-02-21 12:37:07.257004", "n_pass": [456, 77, 52], "n_token": 102, "loss": [0.9554181098937988, 0.02730805054306984], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#INDENT#", "'\\n        Method for finding the head of a phrase. The head of a phrase is the rightmost\\n        word-level constituent such that the path from root to head consists only of similarly-labeled\\n        phrases.\\n        \\n        Parameters\\n        -----------\\n        self: Phrase object that called the method\\n        \\n        Returns\\n        -------\\n        possibilities[-1]: tuple (string,NounPhrase)\\n                (The text of the head of the phrase, the NounPhrase object whose rightmost child is the\\n                head).\\n                \\n        \\n        '", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 46, "repair_targets": [2, 7, 9, 10, 13, 17, 18, 20, 25, 27, 29, 30, 35, 36, 44, 51, 71, 75, 84, 90], "repair_candidates": [22, 58, 80, 88, 94, 100, 68, 82, 2, 7, 9, 10, 13, 17, 18, 20, 25, 27, 29, 30, 35, 36, 44, 51, 71, 75, 84, 90, 39, 54, 64]}}
{"prediction": {"error_location": 0.3846513032913208, "repair_targets": [0.01075101550668478, 0.6234416961669922, 0.0010816314024850726, 0.00011477895895950496, 0.044686634093523026, 0.00494671706110239, 0.00043630690197460353, 0.014248432591557503, 0.021723808720707893, 0.005388726480305195, 0.0057424986734986305, 0.002111234236508608, 0.16860331594944, 0.06406226754188538, 0.004372034687548876, 0.0005109976045787334, 0.00011333803558954969, 0.0002698290045373142, 0.00030644526123069227, 0.00014973568613640964], "repair_candidates": [0.01075101550668478, 0.6234416961669922, 0.0010816314024850726, 0.00011477895895950496, 0.044686634093523026, 0.00494671706110239, 0.00043630690197460353, 0.014248432591557503, 0.00987460557371378, 0.021723808720707893, 0.005388726480305195, 0.0057424986734986305, 0.002111234236508608, 0.16860331594944, 0.06406226754188538, 0.00038687358028255403, 0.004372034687548876, 0.0005109976045787334, 5.9570793382590637e-05, 0.0073952325619757175, 0.0004584403068292886, 0.001173424650914967, 0.00011333803558954969, 0.0002698290045373142, 0.00023114477517083287, 0.0021027224138379097, 0.00030644526123069227, 0.0016957124462351203, 0.00014973568613640964, 0.0035054318141192198, 5.5406482715625316e-05], "target_probs": 0.9730614423751831}}


{"result": {"time": "2021-02-21 12:37:07.382584", "n_pass": [457, 78, 53], "n_token": 100, "loss": [0.5857938528060913, 0.029723117128014565], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", "(", ")", ")", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 69, 73, 82, 88], "repair_candidates": [20, 56, 78, 86, 92, 98, 66, 80, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 69, 73, 82, 88, 37, 52, 62]}}
{"prediction": {"error_location": 0.5566637516021729, "repair_targets": [0.1347689926624298, 0.2911217212677002, 0.0019618740770965815, 9.747267904458568e-05, 0.05498182773590088, 0.005779242143034935, 0.0006204184610396624, 0.01654873602092266, 0.023501485586166382, 0.020565077662467957, 0.008411102928221226, 0.0029083641711622477, 0.26970338821411133, 0.13279739022254944, 0.005699092522263527, 0.0005057525704614818, 9.907125786412507e-05, 0.00025362425367347896, 0.00025997127522714436, 0.000129685751744546], "repair_candidates": [0.1347689926624298, 0.2911217212677002, 0.0019618740770965815, 9.747267904458568e-05, 0.05498182773590088, 0.005779242143034935, 0.0006204184610396624, 0.01654873602092266, 0.01251595001667738, 0.023501485586166382, 0.020565077662467957, 0.008411102928221226, 0.0029083641711622477, 0.26970338821411133, 0.13279739022254944, 0.0004441179917193949, 0.005699092522263527, 0.0005057525704614818, 6.460085569415241e-05, 0.008552736602723598, 0.0005938888061791658, 0.0008086393936537206, 9.907125786412507e-05, 0.00025362425367347896, 0.0002648242225404829, 0.0016198951052501798, 0.00025997127522714436, 0.0014449289301410317, 0.000129685751744546, 0.0029188008047640324, 5.7312488934258e-05], "target_probs": 0.970714271068573}}


{"result": {"time": "2021-02-21 12:37:07.751629", "n_pass": [480, 81, 54], "n_token": 97, "loss": [0.7926322221755981, 0.0262400321662426], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", ":", "#NEWLINE#", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 66, 70, 79, 85], "repair_candidates": [20, 56, 75, 83, 89, 95, 63, 77, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 66, 70, 79, 85, 37, 52, 59]}}
{"prediction": {"error_location": 0.4526517391204834, "repair_targets": [0.13618889451026917, 0.291949599981308, 0.001953520579263568, 9.656167821958661e-05, 0.05774427950382233, 0.00580578064545989, 0.0005916883237659931, 0.016465023159980774, 0.023817824199795723, 0.022342313081026077, 0.00799342431128025, 0.0026254483964294195, 0.27280399203300476, 0.12741117179393768, 0.005057070404291153, 0.00033941431320272386, 9.987469093175605e-05, 0.0003283793921582401, 0.0003104338829871267, 0.00017663068138062954], "repair_candidates": [0.13618889451026917, 0.291949599981308, 0.001953520579263568, 9.656167821958661e-05, 0.05774427950382233, 0.00580578064545989, 0.0005916883237659931, 0.016465023159980774, 0.01315129455178976, 0.023817824199795723, 0.022342313081026077, 0.00799342431128025, 0.0026254483964294195, 0.27280399203300476, 0.12741117179393768, 0.0003052984247915447, 0.005057070404291153, 0.00033941431320272386, 3.06246911350172e-05, 0.003011041786521673, 0.000381280027795583, 0.0010599518427625299, 9.987469093175605e-05, 0.0003283793921582401, 0.0003031153464689851, 0.0020561532583087683, 0.0003104338829871267, 0.001793383969925344, 0.00017663068138062954, 0.00373734999448061, 6.923700857441872e-05], "target_probs": 0.9741012454032898}}


{"result": {"time": "2021-02-21 12:37:08.723102", "n_pass": [596, 89, 55], "n_token": 95, "loss": [0.7625769376754761, 0.03747894614934921], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "#NEWLINE#", "#INDENT#", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 64, 68, 77, 83], "repair_candidates": [20, 54, 73, 81, 87, 93, 61, 75, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 64, 68, 77, 83, 37, 52, 57]}}
{"prediction": {"error_location": 0.4664629101753235, "repair_targets": [0.1334322988986969, 0.26694783568382263, 0.002156091621145606, 8.918394451029599e-05, 0.049111176282167435, 0.005199545994400978, 0.000571630778722465, 0.01842423528432846, 0.021394316107034683, 0.019387930631637573, 0.006849241908639669, 0.0023860225919634104, 0.3156508505344391, 0.11114712059497833, 0.008839982561767101, 0.0004594337078742683, 0.0001441249332856387, 0.0004173514316789806, 0.0003870764630846679, 0.0002193021064158529], "repair_candidates": [0.1334322988986969, 0.26694783568382263, 0.002156091621145606, 8.918394451029599e-05, 0.049111176282167435, 0.005199545994400978, 0.000571630778722465, 0.01842423528432846, 0.013691822066903114, 0.021394316107034683, 0.019387930631637573, 0.006849241908639669, 0.0023860225919634104, 0.3156508505344391, 0.11114712059497833, 0.00043185779941268265, 0.008839982561767101, 0.0004594337078742683, 0.00011501022527227178, 0.006065439432859421, 0.0013701592106372118, 0.002095959847792983, 0.0001441249332856387, 0.0004173514316789806, 0.0003280041564721614, 0.004621913656592369, 0.0003870764630846679, 0.003024304984137416, 0.0002193021064158529, 0.004933787044137716, 0.00010698174446588382], "target_probs": 0.9632146954536438}}


{"result": {"time": "2021-02-21 12:37:08.964977", "n_pass": [600, 91, 56], "n_token": 93, "loss": [0.45715391635894775, 0.04851000756025314], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", ")", "#NEWLINE#", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 75, 81], "repair_candidates": [20, 54, 71, 79, 85, 91, 59, 73, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 75, 81, 37, 52, 57]}}
{"prediction": {"error_location": 0.633082926273346, "repair_targets": [0.1379849761724472, 0.29420214891433716, 0.0022896125447005033, 9.178420441458002e-05, 0.04539508372545242, 0.005458143074065447, 0.0006207892438396811, 0.017742689698934555, 0.020163366571068764, 0.018340637907385826, 0.007986391894519329, 0.002788880141451955, 0.28569865226745605, 0.09777112305164337, 0.013343867845833302, 0.0005663303309120238, 0.0004888749681413174, 0.0008437581709586084, 0.00039273101720027626, 0.00047795087448321283], "repair_candidates": [0.1379849761724472, 0.29420214891433716, 0.0022896125447005033, 9.178420441458002e-05, 0.04539508372545242, 0.005458143074065447, 0.0006207892438396811, 0.017742689698934555, 0.013073122128844261, 0.020163366571068764, 0.018340637907385826, 0.007986391894519329, 0.002788880141451955, 0.28569865226745605, 0.09777112305164337, 0.0004185660509392619, 0.013343867845833302, 0.0005663303309120238, 0.0001247555046575144, 0.007182652596384287, 0.0012790318578481674, 0.0025299075059592724, 0.0004888749681413174, 0.0008437581709586084, 0.0002958675322588533, 0.0034050021786242723, 0.00039273101720027626, 0.004746911581605673, 0.00047795087448321283, 0.014186957851052284, 0.00010935480531770736], "target_probs": 0.9526478052139282}}


{"result": {"time": "2021-02-21 12:37:09.323015", "n_pass": [606, 94, 57], "n_token": 91, "loss": [0.7465543150901794, 0.04074230045080185], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "head_phrase", "=", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 73, 79], "repair_candidates": [20, 54, 69, 77, 83, 89, 59, 71, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 73, 79, 37, 52, 57]}}
{"prediction": {"error_location": 0.47399693727493286, "repair_targets": [0.11911816149950027, 0.23973684012889862, 0.002037135884165764, 7.107506098691374e-05, 0.03461862727999687, 0.004417357966303825, 0.0004830014077015221, 0.014283688738942146, 0.014530662447214127, 0.013348360545933247, 0.005771449767053127, 0.0026372806169092655, 0.3973489999771118, 0.09691368788480759, 0.011584969237446785, 0.00043176391045562923, 0.0008163466700352728, 0.0007716938271187246, 0.0006689439760521054, 0.0004864448856096715], "repair_candidates": [0.11911816149950027, 0.23973684012889862, 0.002037135884165764, 7.107506098691374e-05, 0.03461862727999687, 0.004417357966303825, 0.0004830014077015221, 0.014283688738942146, 0.012121560052037239, 0.014530662447214127, 0.013348360545933247, 0.005771449767053127, 0.0026372806169092655, 0.3973489999771118, 0.09691368788480759, 0.0003639648202806711, 0.011584969237446785, 0.00043176391045562923, 0.0001086799893528223, 0.00384960463270545, 0.0013643450802192092, 0.0037166140973567963, 0.0008163466700352728, 0.0007716938271187246, 0.0001664625306148082, 0.001387278432957828, 0.0006689439760521054, 0.003407546319067478, 0.0004864448856096715, 0.013283904641866684, 0.0001535393384983763], "target_probs": 0.9600765109062195}}


{"result": {"time": "2021-02-21 12:37:09.442074", "n_pass": [610, 95, 58], "n_token": 89, "loss": [0.8802387714385986, 0.028696434572339058], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 44, "repair_targets": [2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 73, 77], "repair_candidates": [20, 54, 69, 75, 81, 87, 59, 71, 2, 5, 7, 8, 11, 15, 16, 18, 23, 25, 27, 28, 33, 34, 42, 49, 62, 66, 73, 77, 37, 52, 57]}}
{"prediction": {"error_location": 0.4146839380264282, "repair_targets": [0.1543557494878769, 0.26458534598350525, 0.0019519623601809144, 9.148056415142491e-05, 0.042427998036146164, 0.0061954716220498085, 0.0005256930598989129, 0.020350081846117973, 0.01398006547242403, 0.020182551816105843, 0.012738817371428013, 0.002684673061594367, 0.30129197239875793, 0.11689069867134094, 0.011274623684585094, 0.0005075837834738195, 0.0002579276042524725, 0.00025423825718462467, 0.000848368916194886, 0.0003161253116559237], "repair_candidates": [0.1543557494878769, 0.26458534598350525, 0.0019519623601809144, 9.148056415142491e-05, 0.042427998036146164, 0.0061954716220498085, 0.0005256930598989129, 0.020350081846117973, 0.0162978433072567, 0.01398006547242403, 0.020182551816105843, 0.012738817371428013, 0.002684673061594367, 0.30129197239875793, 0.11689069867134094, 0.00041127289296127856, 0.011274623684585094, 0.0005075837834738195, 8.095875091385096e-05, 0.005533310584723949, 0.0003802762075792998, 0.002046797890216112, 0.0002579276042524725, 0.00025423825718462467, 8.803280798019841e-05, 0.00043460229062475264, 0.000848368916194886, 0.0002894500794354826, 0.0003161253116559237, 0.0026614025700837374, 6.466436752816662e-05], "target_probs": 0.9717113971710205}}


{"result": {"time": "2021-02-21 12:37:09.912041", "n_pass": [618, 99, 59], "n_token": 88, "loss": [0.2825659513473511, 0.022327598184347153], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", ")", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 43, "repair_targets": [1, 4, 6, 7, 10, 14, 15, 17, 22, 24, 26, 27, 32, 33, 41, 48, 61, 65, 72, 76], "repair_candidates": [19, 53, 68, 74, 80, 86, 58, 70, 1, 4, 6, 7, 10, 14, 15, 17, 22, 24, 26, 27, 32, 33, 41, 48, 61, 65, 72, 76, 36, 51, 56]}}
{"prediction": {"error_location": 0.7538467645645142, "repair_targets": [0.07853362709283829, 0.41452863812446594, 0.001959217945113778, 0.0001046463949023746, 0.059377145022153854, 0.005363304167985916, 0.00041795591823756695, 0.017649350687861443, 0.019260801374912262, 0.007658347021788359, 0.007459576241672039, 0.0022063518408685923, 0.2401394248008728, 0.10772305727005005, 0.013805878348648548, 0.00041591215995140374, 0.00020121234410908073, 0.0002488673198968172, 0.0006049368530511856, 0.00026151695055887103], "repair_candidates": [0.07853362709283829, 0.41452863812446594, 0.001959217945113778, 0.0001046463949023746, 0.059377145022153854, 0.005363304167985916, 0.00041795591823756695, 0.017649350687861443, 0.011690822429955006, 0.019260801374912262, 0.007658347021788359, 0.007459576241672039, 0.0022063518408685923, 0.2401394248008728, 0.10772305727005005, 0.0005738511681556702, 0.013805878348648548, 0.00041591215995140374, 6.896464037708938e-05, 0.005421370267868042, 0.00024697044864296913, 0.001456487225368619, 0.00020121234410908073, 0.0002488673198968172, 7.002896745689213e-05, 0.0002679306489881128, 0.0006049368530511856, 0.0002244225615868345, 0.00026151695055887103, 0.002018522471189499, 4.0913848351920024e-05], "target_probs": 0.9779198169708252}}


{"result": {"time": "2021-02-21 12:37:10.146923", "n_pass": [621, 101, 60], "n_token": 87, "loss": [0.21650046110153198, 0.012085214257240295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "#NEWLINE#", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 42, "repair_targets": [1, 3, 5, 6, 9, 13, 14, 16, 21, 23, 25, 26, 31, 32, 40, 47, 60, 64, 71, 75], "repair_candidates": [18, 52, 67, 73, 79, 85, 57, 69, 1, 3, 5, 6, 9, 13, 14, 16, 21, 23, 25, 26, 31, 32, 40, 47, 60, 64, 71, 75, 35, 50, 55]}}
{"prediction": {"error_location": 0.8053323030471802, "repair_targets": [0.05133860558271408, 0.5746696591377258, 0.0012570512481033802, 7.981441740412265e-05, 0.03889462724328041, 0.0026106189470738173, 0.00027354524354450405, 0.006623606663197279, 0.007537561468780041, 0.005297667812556028, 0.005083028227090836, 0.0014416533522307873, 0.21105879545211792, 0.07357940822839737, 0.0075045558623969555, 0.00017829558055382222, 8.715916919754818e-05, 8.394775068154559e-05, 0.0002630134695209563, 0.0001248460466740653], "repair_candidates": [0.05133860558271408, 0.5746696591377258, 0.0012570512481033802, 7.981441740412265e-05, 0.03889462724328041, 0.0026106189470738173, 0.00027354524354450405, 0.006623606663197279, 0.007261110469698906, 0.007537561468780041, 0.005297667812556028, 0.005083028227090836, 0.0014416533522307873, 0.21105879545211792, 0.07357940822839737, 0.00017497547378297895, 0.0075045558623969555, 0.00017829558055382222, 2.9472055757651106e-05, 0.0025413313414901495, 0.0001435932208551094, 0.0005546092288568616, 8.715916919754818e-05, 8.394775068154559e-05, 3.080466922256164e-05, 0.00013343321916181594, 0.0002630134695209563, 0.00013886019587516785, 0.0001248460466740653, 0.0009833505610004067, 2.0977991880499758e-05], "target_probs": 0.9879875183105469}}


{"result": {"time": "2021-02-21 12:37:10.265392", "n_pass": [622, 102, 61], "n_token": 86, "loss": [0.45078033208847046, 0.06511934846639633], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "=", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 41, "repair_targets": [1, 2, 4, 5, 8, 12, 13, 15, 20, 22, 24, 25, 30, 31, 39, 46, 59, 63, 70, 74], "repair_candidates": [17, 51, 66, 72, 78, 84, 56, 68, 1, 2, 4, 5, 8, 12, 13, 15, 20, 22, 24, 25, 30, 31, 39, 46, 59, 63, 70, 74, 34, 49, 54]}}
{"prediction": {"error_location": 0.6371306777000427, "repair_targets": [0.04015842452645302, 0.17225231230258942, 0.0019342286977916956, 0.0002635266282595694, 0.08993464708328247, 0.007096884772181511, 0.0008790853898972273, 0.04430559277534485, 0.01477469690144062, 0.07435297966003418, 0.009756355546414852, 0.005781304091215134, 0.279052197933197, 0.17220719158649445, 0.021793602034449577, 0.0006219213828444481, 0.00021741777891293168, 0.00031043976196087897, 0.0008847862482070923, 0.00037806862383149564], "repair_candidates": [0.04015842452645302, 0.17225231230258942, 0.0019342286977916956, 0.0002635266282595694, 0.08993464708328247, 0.007096884772181511, 0.0008790853898972273, 0.04430559277534485, 0.04628340154886246, 0.01477469690144062, 0.07435297966003418, 0.009756355546414852, 0.005781304091215134, 0.279052197933197, 0.17220719158649445, 0.0006457456620410085, 0.021793602034449577, 0.0006219213828444481, 0.00010943467350443825, 0.00886036828160286, 0.0005938916583545506, 0.001964186318218708, 0.00021741777891293168, 0.00031043976196087897, 0.0001145008864114061, 0.0005600632284767926, 0.0008847862482070923, 0.0004001389315817505, 0.00037806862383149564, 0.0034437270369380713, 6.890443182783201e-05], "target_probs": 0.9369556307792664}}


{"result": {"time": "2021-02-21 12:37:10.382481", "n_pass": [624, 103, 62], "n_token": 85, "loss": [0.7986056804656982, 0.07904931157827377], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", ".", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 40, "repair_targets": [1, 2, 3, 4, 7, 11, 12, 14, 19, 21, 23, 24, 29, 30, 38, 45, 58, 62, 69, 73], "repair_candidates": [16, 50, 65, 71, 77, 83, 55, 67, 1, 2, 3, 4, 7, 11, 12, 14, 19, 21, 23, 24, 29, 30, 38, 45, 58, 62, 69, 73, 33, 48, 53]}}
{"prediction": {"error_location": 0.44995585083961487, "repair_targets": [0.012945990078151226, 0.00163720129057765, 0.0019354381365701556, 0.0001444979279767722, 0.16121673583984375, 0.00826052762567997, 0.0008182509918697178, 0.02408204972743988, 0.012379724532365799, 0.039032746106386185, 0.0088771628215909, 0.004772367421537638, 0.35280850529670715, 0.26389873027801514, 0.026964694261550903, 0.00100212381221354, 0.00040330435149371624, 0.0003029569343198091, 0.001670423080213368, 0.000840989756397903], "repair_candidates": [0.012945990078151226, 0.00163720129057765, 0.0019354381365701556, 0.0001444979279767722, 0.16121673583984375, 0.00826052762567997, 0.0008182509918697178, 0.02408204972743988, 0.037408653646707535, 0.012379724532365799, 0.039032746106386185, 0.0088771628215909, 0.004772367421537638, 0.35280850529670715, 0.26389873027801514, 0.0017622332088649273, 0.026964694261550903, 0.00100212381221354, 0.0002095460513373837, 0.024908985942602158, 0.0007087851408869028, 0.005288028158247471, 0.00040330435149371624, 0.0003029569343198091, 0.0002602880704216659, 0.0007817617733962834, 0.001670423080213368, 0.0009124197531491518, 0.000840989756397903, 0.0036861244589090347, 7.877121242927387e-05], "target_probs": 0.9239943623542786}}


{"result": {"time": "2021-02-21 12:37:10.498797", "n_pass": [627, 104, 63], "n_token": 84, "loss": [0.8575639724731445, 0.09969563037157059], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "(", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 39, "repair_targets": [1, 2, 3, 4, 6, 10, 11, 13, 18, 20, 22, 23, 28, 29, 37, 44, 57, 61, 68, 72], "repair_candidates": [15, 49, 64, 70, 76, 82, 54, 66, 1, 2, 3, 4, 6, 10, 11, 13, 18, 20, 22, 23, 28, 29, 37, 44, 57, 61, 68, 72, 32, 47, 52]}}
{"prediction": {"error_location": 0.4241940975189209, "repair_targets": [0.007712323684245348, 0.00037559084012173116, 0.00023184673045761883, 0.0006685478729195893, 0.13214875757694244, 0.012909665703773499, 0.0007613335037603974, 0.026635965332388878, 0.016628572717308998, 0.025209421291947365, 0.007925047539174557, 0.0032531179022043943, 0.3725709915161133, 0.2641134262084961, 0.03005901351571083, 0.0009458033600822091, 0.000396651157643646, 0.0004064949171151966, 0.001617063069716096, 0.0005431931931525469], "repair_candidates": [0.007712323684245348, 0.00037559084012173116, 0.00023184673045761883, 0.0006685478729195893, 0.13214875757694244, 0.012909665703773499, 0.0007613335037603974, 0.026635965332388878, 0.049823299050331116, 0.016628572717308998, 0.025209421291947365, 0.007925047539174557, 0.0032531179022043943, 0.3725709915161133, 0.2641134262084961, 0.0020585274323821068, 0.03005901351571083, 0.0009458033600822091, 0.0002428005973342806, 0.026632079854607582, 0.0008302489877678454, 0.006049113813787699, 0.000396651157643646, 0.0004064949171151966, 0.00024027613108046353, 0.0011106166057288647, 0.001617063069716096, 0.0009680958464741707, 0.0005431931931525469, 0.0068297921679914, 0.00010233568900730461], "target_probs": 0.9051128625869751}}


{"result": {"time": "2021-02-21 12:37:10.615639", "n_pass": [628, 105, 64], "n_token": 83, "loss": [0.28012222051620483, 0.05660605803132057], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", ".", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 38, "repair_targets": [1, 2, 3, 4, 5, 9, 10, 12, 17, 19, 21, 22, 27, 28, 36, 43, 56, 60, 67, 71], "repair_candidates": [14, 48, 63, 69, 75, 81, 53, 65, 1, 2, 3, 4, 5, 9, 10, 12, 17, 19, 21, 22, 27, 28, 36, 43, 56, 60, 67, 71, 31, 46, 51]}}
{"prediction": {"error_location": 0.7556912899017334, "repair_targets": [0.00932888314127922, 0.001304942648857832, 0.0012189361732453108, 0.006193735171109438, 0.014268191531300545, 0.008592579513788223, 0.0017461887327954173, 0.019828876480460167, 0.02410978265106678, 0.08417989313602448, 0.011127565056085587, 0.006725018844008446, 0.4002574384212494, 0.31979504227638245, 0.032232288271188736, 0.0009129545651376247, 0.00046323062269948423, 0.00040942596388049424, 0.001673758844844997, 0.00059747532941401], "repair_candidates": [0.00932888314127922, 0.001304942648857832, 0.0012189361732453108, 0.006193735171109438, 0.014268191531300545, 0.008592579513788223, 0.0017461887327954173, 0.019828876480460167, 0.022044558078050613, 0.02410978265106678, 0.08417989313602448, 0.011127565056085587, 0.006725018844008446, 0.4002574384212494, 0.31979504227638245, 0.0026711970567703247, 0.032232288271188736, 0.0009129545651376247, 0.00022216099023353308, 0.017417259514331818, 0.0009468076168559492, 0.004620054271072149, 0.00046323062269948423, 0.00040942596388049424, 0.0002541240828577429, 0.0010292024817317724, 0.001673758844844997, 0.0007015487062744796, 0.00059747532941401, 0.005033629480749369, 9.324136772193015e-05], "target_probs": 0.9449662566184998}}


{"result": {"time": "2021-02-21 12:37:10.731181", "n_pass": [630, 106, 65], "n_token": 82, "loss": [0.5749732255935669, 0.1398552656173706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "head", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 37, "repair_targets": [1, 2, 3, 4, 5, 8, 9, 11, 16, 18, 20, 21, 26, 27, 35, 42, 55, 59, 66, 70], "repair_candidates": [13, 47, 62, 68, 74, 80, 52, 64, 1, 2, 3, 4, 5, 8, 9, 11, 16, 18, 20, 21, 26, 27, 35, 42, 55, 59, 66, 70, 30, 45, 50]}}
{"prediction": {"error_location": 0.5627199411392212, "repair_targets": [0.00866240356117487, 0.00043270690366625786, 0.00036172536783851683, 0.0031167722772806883, 0.02736501954495907, 0.01471060048788786, 0.001298086135648191, 0.052323661744594574, 0.02564883418381214, 0.06104154512286186, 0.019472379237413406, 0.008913785219192505, 0.3782942295074463, 0.21486161649227142, 0.041971392929553986, 0.0016612212639302015, 0.0012435069074854255, 0.0011155662359669805, 0.0054925307631492615, 0.0014964793808758259], "repair_candidates": [0.00866240356117487, 0.00043270690366625786, 0.00036172536783851683, 0.0031167722772806883, 0.02736501954495907, 0.01471060048788786, 0.001298086135648191, 0.052323661744594574, 0.04952573776245117, 0.02564883418381214, 0.06104154512286186, 0.019472379237413406, 0.008913785219192505, 0.3782942295074463, 0.21486161649227142, 0.0035325654316693544, 0.041971392929553986, 0.0016612212639302015, 0.0004896403406746686, 0.041230957955121994, 0.002086000284180045, 0.012361026369035244, 0.0012435069074854255, 0.0011155662359669805, 0.0005897873779758811, 0.0034170637372881174, 0.0054925307631492615, 0.002229467034339905, 0.0014964793808758259, 0.014771971851587296, 0.00028177796048112214], "target_probs": 0.8694840669631958}}


{"result": {"time": "2021-02-21 12:37:10.845959", "n_pass": [631, 107, 66], "n_token": 81, "loss": [0.41369953751564026, 0.09843868762254715], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", ",", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 36, "repair_targets": [1, 2, 3, 4, 5, 7, 8, 10, 15, 17, 19, 20, 25, 26, 34, 41, 54, 58, 65, 69], "repair_candidates": [12, 46, 61, 67, 73, 79, 51, 63, 1, 2, 3, 4, 5, 7, 8, 10, 15, 17, 19, 20, 25, 26, 34, 41, 54, 58, 65, 69, 29, 44, 49]}}
{"prediction": {"error_location": 0.6611995100975037, "repair_targets": [0.006235451437532902, 0.00029060328961350024, 0.0003008221392519772, 0.0035846850369125605, 0.0032867782283574343, 0.005890244618058205, 0.001437004073522985, 0.032637350261211395, 0.01764105260372162, 0.03326568379998207, 0.00902308989316225, 0.007289977744221687, 0.35693514347076416, 0.3688591718673706, 0.05248311161994934, 0.0014768978580832481, 0.0007275615353137255, 0.0006945737986825407, 0.003373257117345929, 0.0008188025676645339], "repair_candidates": [0.006235451437532902, 0.00029060328961350024, 0.0003008221392519772, 0.0035846850369125605, 0.0032867782283574343, 0.005890244618058205, 0.001437004073522985, 0.032637350261211395, 0.040769312530756, 0.01764105260372162, 0.03326568379998207, 0.00902308989316225, 0.007289977744221687, 0.35693514347076416, 0.3688591718673706, 0.003729344578459859, 0.05248311161994934, 0.0014768978580832481, 0.00034395817783661187, 0.028542466461658478, 0.001416423125192523, 0.008077345788478851, 0.0007275615353137255, 0.0006945737986825407, 0.0003096348373219371, 0.0016348843928426504, 0.003373257117345929, 0.0008427887805737555, 0.0008188025676645339, 0.007931600324809551, 0.00015097881259862334], "target_probs": 0.9062512516975403}}


{"result": {"time": "2021-02-21 12:37:10.960852", "n_pass": [632, 108, 67], "n_token": 80, "loss": [0.4527003765106201, 0.27556827664375305], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", ".", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 35, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 9, 14, 16, 18, 19, 24, 25, 33, 40, 53, 57, 64, 68], "repair_candidates": [11, 45, 60, 66, 72, 78, 50, 62, 1, 2, 3, 4, 5, 6, 7, 9, 14, 16, 18, 19, 24, 25, 33, 40, 53, 57, 64, 68, 28, 43, 48]}}
{"prediction": {"error_location": 0.6359086632728577, "repair_targets": [0.016146542504429817, 0.0017862021923065186, 0.0017041898099705577, 0.0022348545026034117, 0.0019641767721623182, 0.0011819058563560247, 0.0009041561861522496, 0.055777084082365036, 0.012229879386723042, 0.013831707648932934, 0.005878358613699675, 0.005139120854437351, 0.3030508756637573, 0.28435808420181274, 0.04515962302684784, 0.0017744733486324549, 0.0008210560190491378, 0.0006798632675781846, 0.0032291195821017027, 0.0012893492821604013], "repair_candidates": [0.016146542504429817, 0.0017862021923065186, 0.0017041898099705577, 0.0022348545026034117, 0.0019641767721623182, 0.0011819058563560247, 0.0009041561861522496, 0.055777084082365036, 0.16834522783756256, 0.012229879386723042, 0.013831707648932934, 0.005878358613699675, 0.005139120854437351, 0.3030508756637573, 0.28435808420181274, 0.003504988271743059, 0.04515962302684784, 0.0017744733486324549, 0.00037648086436092854, 0.047151342034339905, 0.0015231904108077288, 0.009570330381393433, 0.0008210560190491378, 0.0006798632675781846, 0.0003612014406826347, 0.0016730736242607236, 0.0032291195821017027, 0.0015826239250600338, 0.0012893492821604013, 0.006620820611715317, 0.00015008686750661582], "target_probs": 0.7591406106948853}}


{"result": {"time": "2021-02-21 12:37:11.073886", "n_pass": [635, 109, 68], "n_token": 79, "loss": [0.5703527927398682, 0.26050251722335815], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "(", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 34, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 13, 15, 17, 18, 23, 24, 32, 39, 52, 56, 63, 67], "repair_candidates": [10, 44, 59, 65, 71, 77, 49, 61, 1, 2, 3, 4, 5, 6, 7, 8, 13, 15, 17, 18, 23, 24, 32, 39, 52, 56, 63, 67, 27, 42, 47]}}
{"prediction": {"error_location": 0.5653259754180908, "repair_targets": [0.02398373931646347, 0.003021687502041459, 0.003172420198097825, 0.0038036780897527933, 0.0023457547649741173, 0.001074755797162652, 0.0014634252293035388, 0.0013078617630526423, 0.012592936865985394, 0.005729172378778458, 0.00607894966378808, 0.005622715689241886, 0.27549129724502563, 0.3627334237098694, 0.05325528234243393, 0.001982088666409254, 0.000906339380890131, 0.0007262216531671584, 0.004298691172152758, 0.001073799910955131], "repair_candidates": [0.02398373931646347, 0.003021687502041459, 0.003172420198097825, 0.0038036780897527933, 0.0023457547649741173, 0.001074755797162652, 0.0014634252293035388, 0.0013078617630526423, 0.14916706085205078, 0.012592936865985394, 0.005729172378778458, 0.00607894966378808, 0.005622715689241886, 0.27549129724502563, 0.3627334237098694, 0.004629121627658606, 0.05325528234243393, 0.001982088666409254, 0.0004334689292591065, 0.04803284630179405, 0.0019135124748572707, 0.01093386672437191, 0.000906339380890131, 0.0007262216531671584, 0.00039605668280273676, 0.0022093711886554956, 0.004298691172152758, 0.0018383353017270565, 0.001073799910955131, 0.009586525149643421, 0.00019555535982362926], "target_probs": 0.7706642150878906}}


{"result": {"time": "2021-02-21 12:37:11.411878", "n_pass": [640, 112, 69], "n_token": 78, "loss": [0.838949978351593, 0.5924685597419739], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "(", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 33, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 17, 22, 23, 31, 38, 51, 55, 62, 66], "repair_candidates": [10, 43, 58, 64, 70, 76, 48, 60, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 17, 22, 23, 31, 38, 51, 55, 62, 66, 26, 41, 46]}}
{"prediction": {"error_location": 0.4321640133857727, "repair_targets": [0.017931079491972923, 0.002479028655216098, 0.0027098911814391613, 0.0032995305955410004, 0.0021073329262435436, 0.001056239940226078, 0.001742750988341868, 0.0019326055189594626, 0.0199387539178133, 0.05371711403131485, 0.010260410606861115, 0.006462779827415943, 0.21245510876178741, 0.17412014305591583, 0.035532254725694656, 0.0018827466992661357, 0.000629133079200983, 0.0005887049483135343, 0.002991154557093978, 0.0011238540755584836], "repair_candidates": [0.017931079491972923, 0.002479028655216098, 0.0027098911814391613, 0.0032995305955410004, 0.0021073329262435436, 0.001056239940226078, 0.001742750988341868, 0.0019326055189594626, 0.3941853642463684, 0.0199387539178133, 0.05371711403131485, 0.010260410606861115, 0.006462779827415943, 0.21245510876178741, 0.17412014305591583, 0.002565031172707677, 0.035532254725694656, 0.0018827466992661357, 0.00035436221514828503, 0.03463837504386902, 0.0011954382061958313, 0.006262902170419693, 0.000629133079200983, 0.0005887049483135343, 0.0002991612418554723, 0.0013480338966473937, 0.002991154557093978, 0.0013122180243954062, 0.0011238540755584836, 0.004776140209287405, 0.00010234613000648096], "target_probs": 0.5529605746269226}}


{"result": {"time": "2021-02-21 12:37:11.524909", "n_pass": [642, 113, 70], "n_token": 77, "loss": [0.38956981897354126, 0.3747968077659607], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", ",", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 32, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 15, 16, 21, 22, 30, 37, 50, 54, 61, 65], "repair_candidates": [10, 42, 57, 63, 69, 75, 47, 59, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 15, 16, 21, 22, 30, 37, 50, 54, 61, 65, 25, 40, 45]}}
{"prediction": {"error_location": 0.6773481369018555, "repair_targets": [0.01599283143877983, 0.0027545448392629623, 0.0036515442188829184, 0.004254610743373632, 0.0032379007898271084, 0.0019493893487378955, 0.003943064250051975, 0.006292794365435839, 0.06302196532487869, 0.17596301436424255, 0.020263690501451492, 0.012599945068359375, 0.13145628571510315, 0.21356023848056793, 0.024037569761276245, 0.0010912788566201925, 0.00040861981688067317, 0.00038438281626440585, 0.0019704673904925585, 0.0005947802565060556], "repair_candidates": [0.01599283143877983, 0.0027545448392629623, 0.0036515442188829184, 0.004254610743373632, 0.0032379007898271084, 0.0019493893487378955, 0.003943064250051975, 0.006292794365435839, 0.2778531610965729, 0.06302196532487869, 0.17596301436424255, 0.020263690501451492, 0.012599945068359375, 0.13145628571510315, 0.21356023848056793, 0.0012897904962301254, 0.024037569761276245, 0.0010912788566201925, 0.00024610987748019397, 0.021277926862239838, 0.0010012027341872454, 0.004370426759123802, 0.00040861981688067317, 0.00038438281626440585, 0.00018163418280892074, 0.0009319064556621015, 0.0019704673904925585, 0.0010291847866028547, 0.0005947802565060556, 0.004300144035369158, 8.963530126493424e-05], "target_probs": 0.6874289512634277}}


{"result": {"time": "2021-02-21 12:37:11.638507", "n_pass": [644, 114, 71], "n_token": 76, "loss": [0.4474877119064331, 0.21930314600467682], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "label", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 31, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 20, 21, 29, 36, 49, 53, 60, 64], "repair_candidates": [10, 41, 56, 62, 68, 74, 46, 58, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 20, 21, 29, 36, 49, 53, 60, 64, 24, 39, 44]}}
{"prediction": {"error_location": 0.6392320990562439, "repair_targets": [0.025321129709482193, 0.005265488289296627, 0.007496970240026712, 0.01203238870948553, 0.008651824668049812, 0.00489146588370204, 0.013063176535069942, 0.014818547293543816, 0.036463625729084015, 0.02692912518978119, 0.01618902198970318, 0.060726337134838104, 0.15601739287376404, 0.377651572227478, 0.031654007732868195, 0.001579351956024766, 0.0005731219425797462, 0.00047932047164067626, 0.0024348716251552105, 0.0008394497563131154], "repair_candidates": [0.025321129709482193, 0.005265488289296627, 0.007496970240026712, 0.01203238870948553, 0.008651824668049812, 0.00489146588370204, 0.013063176535069942, 0.014818547293543816, 0.1520378440618515, 0.036463625729084015, 0.02692912518978119, 0.01618902198970318, 0.060726337134838104, 0.15601739287376404, 0.377651572227478, 0.0012180880876258016, 0.031654007732868195, 0.001579351956024766, 0.00033873438951559365, 0.02665850706398487, 0.0014570604544132948, 0.00654725031927228, 0.0005731219425797462, 0.00047932047164067626, 0.00026722278562374413, 0.0011936853406950831, 0.0024348716251552105, 0.0015748512232676148, 0.0008394497563131154, 0.005502605345100164, 0.0001258763950318098], "target_probs": 0.8030782341957092}}


{"result": {"time": "2021-02-21 12:37:11.860210", "n_pass": [648, 116, 72], "n_token": 75, "loss": [0.4895523190498352, 0.2507579028606415], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "[", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 30, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 19, 20, 28, 35, 48, 52, 59, 63], "repair_candidates": [10, 40, 55, 61, 67, 73, 45, 57, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 19, 20, 28, 35, 48, 52, 59, 63, 23, 38, 43]}}
{"prediction": {"error_location": 0.6129006147384644, "repair_targets": [0.024762939661741257, 0.003955388441681862, 0.00562535272911191, 0.009648178704082966, 0.005618811585009098, 0.003289747517555952, 0.008252941071987152, 0.008676494471728802, 0.045104846358299255, 0.050825249403715134, 0.015323003754019737, 0.017926404252648354, 0.1448713093996048, 0.3942447006702423, 0.032300565391778946, 0.0016887125093489885, 0.0007613783818669617, 0.000665196857880801, 0.003433022415265441, 0.0012364817084744573], "repair_candidates": [0.024762939661741257, 0.003955388441681862, 0.00562535272911191, 0.009648178704082966, 0.005618811585009098, 0.003289747517555952, 0.008252941071987152, 0.008676494471728802, 0.16176041960716248, 0.045104846358299255, 0.050825249403715134, 0.015323003754019737, 0.017926404252648354, 0.1448713093996048, 0.3942447006702423, 0.0012476861011236906, 0.032300565391778946, 0.0016887125093489885, 0.00037620129296556115, 0.03758285567164421, 0.0015645079547539353, 0.008830726146697998, 0.0007613783818669617, 0.000665196857880801, 0.0003419385466258973, 0.0012056330451741815, 0.003433022415265441, 0.0021120095625519753, 0.0012364817084744573, 0.00661022774875164, 0.00015700036601629108], "target_probs": 0.7782107591629028}}


{"result": {"time": "2021-02-21 12:37:11.970245", "n_pass": [649, 117, 73], "n_token": 74, "loss": [0.29943954944610596, 0.24908682703971863], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "(", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 29, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 27, 34, 47, 51, 58, 62], "repair_candidates": [10, 39, 54, 60, 66, 72, 44, 56, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 27, 34, 47, 51, 58, 62, 22, 37, 42]}}
{"prediction": {"error_location": 0.7412335276603699, "repair_targets": [0.028581220656633377, 0.003943747375160456, 0.005943761672824621, 0.011354979127645493, 0.0064972080290317535, 0.004591547884047031, 0.012938697822391987, 0.01579352095723152, 0.1310262233018875, 0.07534877955913544, 0.02295990288257599, 0.012309568002820015, 0.09826818853616714, 0.29816576838493347, 0.03821470960974693, 0.003567401086911559, 0.0012442199513316154, 0.0012231743894517422, 0.0056635127402842045, 0.0018761673709377646], "repair_candidates": [0.028581220656633377, 0.003943747375160456, 0.005943761672824621, 0.011354979127645493, 0.0064972080290317535, 0.004591547884047031, 0.012938697822391987, 0.01579352095723152, 0.11351532489061356, 0.1310262233018875, 0.07534877955913544, 0.02295990288257599, 0.012309568002820015, 0.09826818853616714, 0.29816576838493347, 0.002067261841148138, 0.03821470960974693, 0.003567401086911559, 0.0007210094481706619, 0.07488073408603668, 0.001948174904100597, 0.013537847436964512, 0.0012442199513316154, 0.0012231743894517422, 0.0006077958969399333, 0.0015840998385101557, 0.0056635127402842045, 0.003008645959198475, 0.0018761673709377646, 0.008394189178943634, 0.00022266601445153356], "target_probs": 0.7795122861862183}}


{"result": {"time": "2021-02-21 12:37:12.078166", "n_pass": [650, 118, 74], "n_token": 73, "loss": [0.3995186388492584, 0.403018057346344], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "self", "self", ".", "parent", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 28, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 26, 33, 46, 50, 57, 61], "repair_candidates": [10, 38, 53, 59, 65, 71, 43, 55, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 26, 33, 46, 50, 57, 61, 21, 36, 41]}}
{"prediction": {"error_location": 0.6706427335739136, "repair_targets": [0.03299394249916077, 0.0042724208906292915, 0.005639324430376291, 0.010294024832546711, 0.005619637202471495, 0.003658159403130412, 0.009732581675052643, 0.010183415375649929, 0.08682757616043091, 0.06460396200418472, 0.025441979989409447, 0.08091071248054504, 0.143334299325943, 0.1287437081336975, 0.0321100652217865, 0.006934307515621185, 0.0023387870751321316, 0.001969384727999568, 0.0097341975197196, 0.0029575445223599672], "repair_candidates": [0.03299394249916077, 0.0042724208906292915, 0.005639324430376291, 0.010294024832546711, 0.005619637202471495, 0.003658159403130412, 0.009732581675052643, 0.010183415375649929, 0.12260229140520096, 0.08682757616043091, 0.06460396200418472, 0.025441979989409447, 0.08091071248054504, 0.143334299325943, 0.1287437081336975, 0.0036893440410494804, 0.0321100652217865, 0.006934307515621185, 0.0013339720899239182, 0.1692461371421814, 0.0026077423244714737, 0.016506200656294823, 0.0023387870751321316, 0.001969384727999568, 0.0009756467770785093, 0.00266659096814692, 0.0097341975197196, 0.003882814897224307, 0.0029575445223599672, 0.007929176092147827, 0.0002600397274363786], "target_probs": 0.6683000326156616}}


{"result": {"time": "2021-02-21 12:37:12.294151", "n_pass": [654, 120, 75], "n_token": 72, "loss": [0.6984930038452148, 0.44729727506637573], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "self", "self", ".", "head_children", "=", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 27, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 25, 32, 45, 49, 56, 60], "repair_candidates": [10, 37, 52, 58, 64, 70, 42, 54, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 25, 32, 45, 49, 56, 60, 20, 35, 40]}}
{"prediction": {"error_location": 0.49733421206474304, "repair_targets": [0.022503888234496117, 0.0024005472660064697, 0.003065684577450156, 0.004945393651723862, 0.002581108594313264, 0.002400399651378393, 0.006673404015600681, 0.008563755080103874, 0.1334448605775833, 0.08138047158718109, 0.04553050920367241, 0.1306205540895462, 0.08218641579151154, 0.0612395741045475, 0.025021515786647797, 0.00614879559725523, 0.001851227949373424, 0.0023508118465542793, 0.011784210801124573, 0.004660720005631447], "repair_candidates": [0.022503888234496117, 0.0024005472660064697, 0.003065684577450156, 0.004945393651723862, 0.002581108594313264, 0.002400399651378393, 0.006673404015600681, 0.008563755080103874, 0.1096227765083313, 0.1334448605775833, 0.08138047158718109, 0.04553050920367241, 0.1306205540895462, 0.08218641579151154, 0.0612395741045475, 0.02147568017244339, 0.025021515786647797, 0.00614879559725523, 0.0009173245052807033, 0.19666549563407898, 0.003058404428884387, 0.015398373827338219, 0.001851227949373424, 0.0023508118465542793, 0.001295400899834931, 0.0027369381859898567, 0.011784210801124573, 0.002992443973198533, 0.004660720005631447, 0.00625082990154624, 0.00023239583242684603], "target_probs": 0.6393538117408752}}


{"result": {"time": "2021-02-21 12:37:12.401227", "n_pass": [656, 121, 76], "n_token": 71, "loss": [0.669553816318512, 0.44287872314453125], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "self", "self", ".", "head_children", "filter", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 26, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 24, 31, 44, 48, 55, 59], "repair_candidates": [10, 36, 51, 57, 63, 69, 41, 53, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 24, 31, 44, 48, 55, 59, 20, 34, 39]}}
{"prediction": {"error_location": 0.5119369626045227, "repair_targets": [0.026118554174900055, 0.0030024107545614243, 0.003484425600618124, 0.0061324527487158775, 0.004013936500996351, 0.0032758412417024374, 0.00810419674962759, 0.009830036200582981, 0.12155117839574814, 0.06953807175159454, 0.039148252457380295, 0.11888011544942856, 0.09715324640274048, 0.08076159656047821, 0.02735651656985283, 0.005895048379898071, 0.001667159958742559, 0.0014755447627976537, 0.010794522240757942, 0.004001951776444912], "repair_candidates": [0.026118554174900055, 0.0030024107545614243, 0.003484425600618124, 0.0061324527487158775, 0.004013936500996351, 0.0032758412417024374, 0.00810419674962759, 0.009830036200582981, 0.11448725312948227, 0.12155117839574814, 0.06953807175159454, 0.039148252457380295, 0.11888011544942856, 0.09715324640274048, 0.08076159656047821, 0.010871880687773228, 0.02735651656985283, 0.005895048379898071, 0.0007339677540585399, 0.20331647992134094, 0.0031931677367538214, 0.01252724602818489, 0.001667159958742559, 0.0014755447627976537, 0.0008519766852259636, 0.0021145418286323547, 0.010794522240757942, 0.003319700714200735, 0.004001951776444912, 0.00616670586168766, 0.00023207513731904328], "target_probs": 0.6421850919723511}}


{"result": {"time": "2021-02-21 12:37:12.508162", "n_pass": [657, 122, 77], "n_token": 70, "loss": [1.1313673257827759, 0.5177846550941467], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", ".", "possibilities", ".", "self", "self", "self", "self", ".", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 25, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 23, 30, 43, 47, 54, 58], "repair_candidates": [10, 35, 50, 56, 62, 68, 40, 52, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 23, 30, 43, 47, 54, 58, 20, 33, 38]}}
{"prediction": {"error_location": 0.3225918412208557, "repair_targets": [0.020275361835956573, 0.002177803311496973, 0.0025723506696522236, 0.004314901772886515, 0.002718007657676935, 0.002576798666268587, 0.00691606942564249, 0.009367368184030056, 0.13228972256183624, 0.07354450225830078, 0.04977197200059891, 0.14436876773834229, 0.0628107562661171, 0.036404527723789215, 0.018760602921247482, 0.006759661249816418, 0.0018172668060287833, 0.001501140184700489, 0.012287696823477745, 0.0046038250438869], "repair_candidates": [0.020275361835956573, 0.002177803311496973, 0.0025723506696522236, 0.004314901772886515, 0.002718007657676935, 0.002576798666268587, 0.00691606942564249, 0.009367368184030056, 0.09119774401187897, 0.13228972256183624, 0.07354450225830078, 0.04977197200059891, 0.14436876773834229, 0.0628107562661171, 0.036404527723789215, 0.014705252833664417, 0.018760602921247482, 0.006759661249816418, 0.0008032825426198542, 0.26872938871383667, 0.002216535387560725, 0.015685711055994034, 0.0018172668060287833, 0.001501140184700489, 0.001086887321434915, 0.0018756211502477527, 0.012287696823477745, 0.0028492570854723454, 0.0046038250438869, 0.004814490210264921, 0.00019669624452944845], "target_probs": 0.5958390831947327}}


{"result": {"time": "2021-02-21 12:37:14.197068", "n_pass": [697, 138, 78], "n_token": 69, "loss": [1.1826715469360352, 0.34799858927726746], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", ".", "self", "self", "self", "self", ".", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 24, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 22, 29, 42, 46, 53, 57], "repair_candidates": [9, 34, 49, 55, 61, 67, 39, 51, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 22, 29, 42, 46, 53, 57, 19, 32, 37]}}
{"prediction": {"error_location": 0.3064589500427246, "repair_targets": [0.007189180701971054, 0.0005556163960136473, 0.0010064722737297416, 0.0022608276922255754, 0.0009504443150945008, 0.0008213733672164381, 0.004817058332264423, 0.0007267287001013756, 0.29563087224960327, 0.06061145290732384, 0.04257010668516159, 0.13235092163085938, 0.08030156046152115, 0.027543380856513977, 0.02250656671822071, 0.009326559491455555, 0.0015656747855246067, 0.001521516707725823, 0.009574290364980698, 0.004269254859536886], "repair_candidates": [0.007189180701971054, 0.0005556163960136473, 0.0010064722737297416, 0.0022608276922255754, 0.0009504443150945008, 0.0008213733672164381, 0.004817058332264423, 0.0007267287001013756, 0.000436816131696105, 0.29563087224960327, 0.06061145290732384, 0.04257010668516159, 0.13235092163085938, 0.08030156046152115, 0.027543380856513977, 0.008742203004658222, 0.02250656671822071, 0.009326559491455555, 0.0007919579511508346, 0.25547000765800476, 0.0024481655564159155, 0.015895914286375046, 0.0015656747855246067, 0.001521516707725823, 0.0009524858905933797, 0.0014502921840175986, 0.009574290364980698, 0.003061855910345912, 0.004269254859536886, 0.0044955601915717125, 0.00015488234930671751], "target_probs": 0.7060998678207397}}


{"result": {"time": "2021-02-21 12:37:14.302567", "n_pass": [699, 139, 79], "n_token": 68, "loss": [0.8594253063201904, 0.6686245203018188], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", ".", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 23, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 21, 28, 41, 45, 52, 56], "repair_candidates": [9, 33, 48, 54, 60, 66, 38, 50, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 21, 28, 41, 45, 52, 56, 18, 31, 36]}}
{"prediction": {"error_location": 0.42340537905693054, "repair_targets": [0.045465510338544846, 0.0062667555175721645, 0.010035988874733448, 0.015005902387201786, 0.00819968618452549, 0.0036467190366238356, 0.0088728629052639, 0.0017184083117172122, 0.006079810671508312, 0.02961409091949463, 0.03442361205816269, 0.09916852414608002, 0.11106310039758682, 0.04386269673705101, 0.041071049869060516, 0.01298376265913248, 0.0036463122814893723, 0.003833322087302804, 0.019829161465168, 0.007625663187354803], "repair_candidates": [0.045465510338544846, 0.0062667555175721645, 0.010035988874733448, 0.015005902387201786, 0.00819968618452549, 0.0036467190366238356, 0.0088728629052639, 0.0017184083117172122, 0.003012194065377116, 0.006079810671508312, 0.02961409091949463, 0.03442361205816269, 0.09916852414608002, 0.11106310039758682, 0.04386269673705101, 0.016974223777651787, 0.041071049869060516, 0.01298376265913248, 0.001716851256787777, 0.4081229567527771, 0.005679130554199219, 0.030051779001951218, 0.0036463122814893723, 0.003833322087302804, 0.0018537103896960616, 0.0028026157524436712, 0.019829161465168, 0.005407987628132105, 0.007625663187354803, 0.011624821461737156, 0.0003407151671126485], "target_probs": 0.5124129056930542}}


{"result": {"time": "2021-02-21 12:37:14.409460", "n_pass": [704, 140, 80], "n_token": 67, "loss": [0.33611851930618286, 0.42451179027557373], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 22, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 27, 40, 44, 51, 55], "repair_candidates": [9, 32, 47, 53, 59, 65, 37, 49, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 27, 40, 44, 51, 55, 17, 30, 35]}}
{"prediction": {"error_location": 0.7145385146141052, "repair_targets": [0.07706645131111145, 0.013041576370596886, 0.025289317592978477, 0.039952971041202545, 0.024544812738895416, 0.01171776745468378, 0.02195177786052227, 0.004537561442703009, 0.007227990310639143, 0.01934732310473919, 0.021982239559292793, 0.06547483801841736, 0.09089382737874985, 0.09277892857789993, 0.09326179325580597, 0.011002802290022373, 0.00475780013948679, 0.003653913736343384, 0.016780070960521698, 0.008825255557894707], "repair_candidates": [0.07706645131111145, 0.013041576370596886, 0.025289317592978477, 0.039952971041202545, 0.024544812738895416, 0.01171776745468378, 0.02195177786052227, 0.004537561442703009, 0.006036022212356329, 0.007227990310639143, 0.01934732310473919, 0.021982239559292793, 0.06547483801841736, 0.09089382737874985, 0.09277892857789993, 0.03273142874240875, 0.09326179325580597, 0.011002802290022373, 0.001663687638938427, 0.2264048308134079, 0.007110714912414551, 0.03510914370417595, 0.00475780013948679, 0.003653913736343384, 0.0016703878063708544, 0.0040345629677176476, 0.016780070960521698, 0.008691657334566116, 0.008825255557894707, 0.021934054791927338, 0.0005245180218480527], "target_probs": 0.6540890336036682}}


{"result": {"time": "2021-02-21 12:37:15.033755", "n_pass": [715, 146, 81], "n_token": 66, "loss": [0.39819592237472534, 0.4801982045173645], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "0", "]", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 22, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 26, 39, 43, 50, 54], "repair_candidates": [9, 31, 46, 52, 58, 64, 36, 48, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 26, 39, 43, 50, 54, 17, 29, 34]}}
{"prediction": {"error_location": 0.6715304255485535, "repair_targets": [0.07531880587339401, 0.013762040995061398, 0.027148829773068428, 0.04106256738305092, 0.02490488812327385, 0.011702516116201878, 0.021287912502884865, 0.00448806444182992, 0.006475788075476885, 0.01790717989206314, 0.020415840670466423, 0.06152996048331261, 0.08551337569952011, 0.08627937734127045, 0.07251438498497009, 0.013025538064539433, 0.004378039855509996, 0.003829389112070203, 0.017907269299030304, 0.00920900423079729], "repair_candidates": [0.07531880587339401, 0.013762040995061398, 0.027148829773068428, 0.04106256738305092, 0.02490488812327385, 0.011702516116201878, 0.021287912502884865, 0.00448806444182992, 0.005592696368694305, 0.006475788075476885, 0.01790717989206314, 0.020415840670466423, 0.06152996048331261, 0.08551337569952011, 0.08627937734127045, 0.02591358684003353, 0.07251438498497009, 0.013025538064539433, 0.0009342129342257977, 0.2708375155925751, 0.0074891699478030205, 0.036968816071748734, 0.004378039855509996, 0.003829389112070203, 0.0017155184177681804, 0.004101941827684641, 0.017907269299030304, 0.007831841707229614, 0.00920900423079729, 0.019465824589133263, 0.00048808459541760385], "target_probs": 0.6186607480049133}}


{"result": {"time": "2021-02-21 12:37:15.858382", "n_pass": [736, 154, 82], "n_token": 64, "loss": [0.7551745176315308, 0.29819464683532715], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", ".", "head_children", "(", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 22, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 26, 39, 43, 50, 54], "repair_candidates": [9, 31, 46, 52, 58, 62, 36, 48, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 26, 39, 43, 50, 54, 17, 29, 34]}}
{"prediction": {"error_location": 0.4699285328388214, "repair_targets": [0.07124686241149902, 0.010784542188048363, 0.02076367847621441, 0.03131773695349693, 0.021118182688951492, 0.010479451157152653, 0.01704947091639042, 0.004924701061099768, 0.006491127423942089, 0.017408953979611397, 0.028337400406599045, 0.08902869373559952, 0.1029471829533577, 0.06769269704818726, 0.14500178396701813, 0.028628744184970856, 0.006945849396288395, 0.006957849487662315, 0.04491106793284416, 0.010120946913957596], "repair_candidates": [0.07124686241149902, 0.010784542188048363, 0.02076367847621441, 0.03131773695349693, 0.021118182688951492, 0.010479451157152653, 0.01704947091639042, 0.004924701061099768, 0.005356526933610439, 0.006491127423942089, 0.017408953979611397, 0.028337400406599045, 0.08902869373559952, 0.1029471829533577, 0.06769269704818726, 0.020901843905448914, 0.14500178396701813, 0.028628744184970856, 0.0008331081480719149, 0.17031815648078918, 0.008903010748326778, 0.03664902597665787, 0.006945849396288395, 0.006957849487662315, 0.0012342931004241109, 0.00554179772734642, 0.04491106793284416, 0.006888583302497864, 0.010120946913957596, 0.0007244640146382153, 0.0004922403022646904], "target_probs": 0.7421568632125854}}


{"result": {"time": "2021-02-21 12:37:16.269334", "n_pass": [757, 158, 83], "n_token": 63, "loss": [0.9645982980728149, 0.577306866645813], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", ".", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 21, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 25, 38, 42, 49, 53], "repair_candidates": [9, 30, 45, 51, 57, 61, 35, 47, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 25, 38, 42, 49, 53, 17, 28, 33]}}
{"prediction": {"error_location": 0.38113632798194885, "repair_targets": [0.06527336686849594, 0.009596506133675575, 0.017572734504938126, 0.025567129254341125, 0.016541024670004845, 0.008203704841434956, 0.014726826921105385, 0.00396035797894001, 0.00602259486913681, 0.016793593764305115, 0.02624676376581192, 0.07571690529584885, 0.07357238233089447, 0.04113975912332535, 0.02652081660926342, 0.041713278740644455, 0.009399402886629105, 0.009911878034472466, 0.05947639420628548, 0.013452842831611633], "repair_candidates": [0.06527336686849594, 0.009596506133675575, 0.017572734504938126, 0.025567129254341125, 0.016541024670004845, 0.008203704841434956, 0.014726826921105385, 0.00396035797894001, 0.004757699090987444, 0.00602259486913681, 0.016793593764305115, 0.02624676376581192, 0.07571690529584885, 0.07357238233089447, 0.04113975912332535, 0.019918745383620262, 0.02652081660926342, 0.041713278740644455, 0.00088788807624951, 0.34599006175994873, 0.0066404459066689014, 0.04425417259335518, 0.009399402886629105, 0.009911878034472466, 0.0017139882547780871, 0.005269447807222605, 0.05947639420628548, 0.00801086612045765, 0.013452842831611633, 0.0006623906083405018, 0.00048598230932839215], "target_probs": 0.561408281326294}}


{"result": {"time": "2021-02-21 12:37:17.595693", "n_pass": [801, 171, 84], "n_token": 62, "loss": [0.6777305603027344, 0.6552025079727173], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "#INDENT#", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 37, 41, 48, 52], "repair_candidates": [9, 29, 44, 50, 56, 60, 34, 46, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 37, 41, 48, 52, 16, 27, 32]}}
{"prediction": {"error_location": 0.5077680349349976, "repair_targets": [0.08277468383312225, 0.00999076385051012, 0.022555679082870483, 0.04836400970816612, 0.044496551156044006, 0.019102752208709717, 0.02279316633939743, 0.01662285625934601, 0.005225602071732283, 0.008031097240746021, 0.0054834443144500256, 0.01389989536255598, 0.0331839919090271, 0.00600802106782794, 0.0416395328938961, 0.03637152165174484, 0.011295664124190807, 0.011290515772998333, 0.06882786005735397, 0.011379319243133068], "repair_candidates": [0.08277468383312225, 0.00999076385051012, 0.022555679082870483, 0.04836400970816612, 0.044496551156044006, 0.019102752208709717, 0.02279316633939743, 0.01662285625934601, 0.00835818238556385, 0.005225602071732283, 0.008031097240746021, 0.0054834443144500256, 0.01389989536255598, 0.0331839919090271, 0.00600802106782794, 0.004734377842396498, 0.0416395328938961, 0.03637152165174484, 0.0011567336041480303, 0.38146647810935974, 0.00820906087756157, 0.054230641573667526, 0.011295664124190807, 0.011290515772998333, 0.001758314436301589, 0.008004319854080677, 0.06882786005735397, 0.01080059353262186, 0.011379319243133068, 0.0011700373142957687, 0.0007742787711322308], "target_probs": 0.5193368792533875}}


{"result": {"time": "2021-02-21 12:37:19.017528", "n_pass": [884, 185, 85], "n_token": 61, "loss": [0.42537033557891846, 0.27246323227882385], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", "=", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 36, 40, 47, 51], "repair_candidates": [9, 28, 43, 49, 55, 59, 33, 45, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 36, 40, 47, 51, 16, 27, 31]}}
{"prediction": {"error_location": 0.6535276770591736, "repair_targets": [0.12894068658351898, 0.01542835682630539, 0.035124003887176514, 0.07710523158311844, 0.0725877583026886, 0.03090871125459671, 0.03604534640908241, 0.02556600607931614, 0.007554029114544392, 0.011793432757258415, 0.007495753932744265, 0.016885604709386826, 0.04317661374807358, 0.007900847122073174, 0.03589921444654465, 0.06288748979568481, 0.022670118138194084, 0.017963416874408722, 0.08769428730010986, 0.01787453703582287], "repair_candidates": [0.12894068658351898, 0.01542835682630539, 0.035124003887176514, 0.07710523158311844, 0.0725877583026886, 0.03090871125459671, 0.03604534640908241, 0.02556600607931614, 0.012286460027098656, 0.007554029114544392, 0.011793432757258415, 0.007495753932744265, 0.016885604709386826, 0.04317661374807358, 0.007900847122073174, 0.004804406315088272, 0.03589921444654465, 0.06288748979568481, 0.005327432416379452, 0.03770465403795242, 0.009289385750889778, 0.12266658991575241, 0.022670118138194084, 0.017963416874408722, 0.002449450548738241, 0.016695750877261162, 0.08769428730010986, 0.020773444324731827, 0.01787453703582287, 0.004452206660062075, 0.002048789756372571], "target_probs": 0.7615014314651489}}


{"result": {"time": "2021-02-21 12:37:19.120193", "n_pass": [885, 186, 86], "n_token": 60, "loss": [0.6148842573165894, 0.47124314308166504], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", ":", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 35, 39, 46, 50], "repair_candidates": [9, 28, 42, 48, 54, 58, 32, 44, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 35, 39, 46, 50, 16, 27, 30]}}
{"prediction": {"error_location": 0.5407034754753113, "repair_targets": [0.10544072836637497, 0.011260333471000195, 0.023489441722631454, 0.05362032353878021, 0.053314875811338425, 0.02276407554745674, 0.025902312248945236, 0.01996012032032013, 0.0053718844428658485, 0.009005118161439896, 0.007144812028855085, 0.020603381097316742, 0.04381430521607399, 0.007621379103511572, 0.0541519857943058, 0.019779875874519348, 0.01894376054406166, 0.015800580382347107, 0.0863795280456543, 0.01985696144402027], "repair_candidates": [0.10544072836637497, 0.011260333471000195, 0.023489441722631454, 0.05362032353878021, 0.053314875811338425, 0.02276407554745674, 0.025902312248945236, 0.01996012032032013, 0.008798147551715374, 0.0053718844428658485, 0.009005118161439896, 0.007144812028855085, 0.020603381097316742, 0.04381430521607399, 0.007621379103511572, 0.00484281312674284, 0.0541519857943058, 0.019779875874519348, 0.0022344004828482866, 0.0015569973038509488, 0.028910521417856216, 0.2642233669757843, 0.01894376054406166, 0.015800580382347107, 0.002566632116213441, 0.032008521258831024, 0.0863795280456543, 0.01852921023964882, 0.01985696144402027, 0.008516744710505009, 0.003586813807487488], "target_probs": 0.6242257952690125}}


{"result": {"time": "2021-02-21 12:37:19.320330", "n_pass": [888, 188, 87], "n_token": 59, "loss": [0.4054957926273346, 0.5805537104606628], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "=", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 34, 38, 45, 49], "repair_candidates": [9, 28, 41, 47, 53, 57, 31, 43, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 34, 38, 45, 49, 16, 27, 30]}}
{"prediction": {"error_location": 0.6666462421417236, "repair_targets": [0.10828978568315506, 0.017605911940336227, 0.04726554453372955, 0.08665938675403595, 0.07092203944921494, 0.031761929392814636, 0.03476971760392189, 0.02235778421163559, 0.005957309622317553, 0.008910617791116238, 0.006265356205403805, 0.016383009031414986, 0.03638079762458801, 0.0035922001115977764, 0.02581428550183773, 0.007765267044305801, 0.00399954104796052, 0.003915103152394295, 0.017365586012601852, 0.003607281018048525], "repair_candidates": [0.10828978568315506, 0.017605911940336227, 0.04726554453372955, 0.08665938675403595, 0.07092203944921494, 0.031761929392814636, 0.03476971760392189, 0.02235778421163559, 0.009519902989268303, 0.005957309622317553, 0.008910617791116238, 0.006265356205403805, 0.016383009031414986, 0.03638079762458801, 0.0035922001115977764, 0.0017144742887467146, 0.02581428550183773, 0.007765267044305801, 0.0013524072710424662, 0.0010967340786010027, 0.18591894209384918, 0.2053908258676529, 0.00399954104796052, 0.003915103152394295, 0.0009233913733623922, 0.01711934618651867, 0.017365586012601852, 0.011810540221631527, 0.003607281018048525, 0.003958864137530327, 0.0016060771886259317], "target_probs": 0.5595884323120117}}


{"result": {"time": "2021-02-21 12:37:19.421822", "n_pass": [890, 189, 88], "n_token": 58, "loss": [0.49543753266334534, 0.09736858308315277], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "filter", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 33, 37, 44, 48], "repair_candidates": [9, 28, 40, 46, 52, 56, 31, 42, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 33, 37, 44, 48, 16, 27, 30]}}
{"prediction": {"error_location": 0.6093043684959412, "repair_targets": [0.15396124124526978, 0.02037256769835949, 0.04563179612159729, 0.08764047920703888, 0.07741628587245941, 0.034966494888067245, 0.041516583412885666, 0.03287755325436592, 0.008799496106803417, 0.013637234456837177, 0.009875940158963203, 0.026472823694348335, 0.058784205466508865, 0.013674715533852577, 0.05861901864409447, 0.026719817891716957, 0.09295541048049927, 0.006856290623545647, 0.07452847808599472, 0.02191516011953354], "repair_candidates": [0.15396124124526978, 0.02037256769835949, 0.04563179612159729, 0.08764047920703888, 0.07741628587245941, 0.034966494888067245, 0.041516583412885666, 0.03287755325436592, 0.01521987747400999, 0.008799496106803417, 0.013637234456837177, 0.009875940158963203, 0.026472823694348335, 0.058784205466508865, 0.013674715533852577, 0.006762241944670677, 0.05861901864409447, 0.026719817891716957, 0.001864900579676032, 0.005108077544718981, 0.009797211736440659, 0.010584579780697823, 0.09295541048049927, 0.006856290623545647, 0.0009340929100289941, 0.01740160584449768, 0.07452847808599472, 0.018364332616329193, 0.02191516011953354, 0.004214839078485966, 0.0025266222655773163], "target_probs": 0.9072215557098389}}


{"result": {"time": "2021-02-21 12:37:19.522097", "n_pass": [891, 190, 89], "n_token": 57, "loss": [0.8261065483093262, 0.11784385144710541], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "label", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 36, 43, 47], "repair_candidates": [9, 28, 39, 45, 51, 55, 31, 41, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 36, 43, 47, 16, 27, 30]}}
{"prediction": {"error_location": 0.43775033950805664, "repair_targets": [0.14249028265476227, 0.018818188458681107, 0.042039964348077774, 0.08197597414255142, 0.07167882472276688, 0.03175816684961319, 0.03763427957892418, 0.030029740184545517, 0.00806153379380703, 0.012640183791518211, 0.009173860773444176, 0.024677572771906853, 0.05720051750540733, 0.012351831421256065, 0.061579518020153046, 0.03937811776995659, 0.1001773551106453, 0.007403437979519367, 0.0773528590798378, 0.022412633523344994], "repair_candidates": [0.14249028265476227, 0.018818188458681107, 0.042039964348077774, 0.08197597414255142, 0.07167882472276688, 0.03175816684961319, 0.03763427957892418, 0.030029740184545517, 0.013491428457200527, 0.00806153379380703, 0.012640183791518211, 0.009173860773444176, 0.024677572771906853, 0.05720051750540733, 0.012351831421256065, 0.006393661722540855, 0.061579518020153046, 0.03937811776995659, 0.000960942474193871, 0.0020875127520412207, 0.008920535445213318, 0.02128850854933262, 0.1001773551106453, 0.007403437979519367, 0.001015259069390595, 0.024461572989821434, 0.0773528590798378, 0.02312329225242138, 0.022412633523344994, 0.0062016635201871395, 0.0032207826152443886], "target_probs": 0.8888348340988159}}


{"result": {"time": "2021-02-21 12:37:19.720423", "n_pass": [894, 192, 90], "n_token": 56, "loss": [0.9641069173812866, 0.1375337839126587], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "[", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 35, 42, 46], "repair_candidates": [9, 28, 38, 44, 50, 54, 31, 40, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 35, 42, 46, 16, 27, 30]}}
{"prediction": {"error_location": 0.38132354617118835, "repair_targets": [0.1467721164226532, 0.01686067320406437, 0.036415234208106995, 0.07856553792953491, 0.07700510323047638, 0.03342268243432045, 0.037974774837493896, 0.031257014721632004, 0.008025303483009338, 0.012514181435108185, 0.009026649408042431, 0.024420278146862984, 0.05600021034479141, 0.011720716953277588, 0.06818396598100662, 0.04931715130805969, 0.03611007705330849, 0.005086141638457775, 0.09848219901323318, 0.034344833344221115], "repair_candidates": [0.1467721164226532, 0.01686067320406437, 0.036415234208106995, 0.07856553792953491, 0.07700510323047638, 0.03342268243432045, 0.037974774837493896, 0.031257014721632004, 0.013826318085193634, 0.008025303483009338, 0.012514181435108185, 0.009026649408042431, 0.024420278146862984, 0.05600021034479141, 0.011720716953277588, 0.0067615448497235775, 0.06818396598100662, 0.04931715130805969, 0.0015011578798294067, 0.002710939384996891, 0.012522178702056408, 0.01913781464099884, 0.03611007705330849, 0.005086141638457775, 0.0014625205658376217, 0.027326330542564392, 0.09848219901323318, 0.0335100032389164, 0.034344833344221115, 0.00617793295532465, 0.0035584892611950636], "target_probs": 0.8715049028396606}}


{"result": {"time": "2021-02-21 12:37:19.818520", "n_pass": [895, 193, 91], "n_token": 55, "loss": [0.572252094745636, 0.11091107130050659], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", ".", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 41, 45], "repair_candidates": [9, 28, 37, 43, 49, 53, 31, 39, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 41, 45, 16, 27, 30]}}
{"prediction": {"error_location": 0.5642532110214233, "repair_targets": [0.12981323897838593, 0.014453255571424961, 0.030286036431789398, 0.06915184110403061, 0.06569493561983109, 0.028766602277755737, 0.03548622503876686, 0.027360737323760986, 0.008581064641475677, 0.01406997162848711, 0.010504358448088169, 0.029044803231954575, 0.06989719718694687, 0.013469796627759933, 0.10794840008020401, 0.06774195283651352, 0.017117943614721298, 0.041613053530454636, 0.07285963743925095, 0.04115729406476021], "repair_candidates": [0.12981323897838593, 0.014453255571424961, 0.030286036431789398, 0.06915184110403061, 0.06569493561983109, 0.028766602277755737, 0.03548622503876686, 0.027360737323760986, 0.013948939740657806, 0.008581064641475677, 0.01406997162848711, 0.010504358448088169, 0.029044803231954575, 0.06989719718694687, 0.013469796627759933, 0.013298389501869678, 0.10794840008020401, 0.06774195283651352, 0.0011655520647764206, 0.0017389643471688032, 0.014047520235180855, 0.013039409182965755, 0.017117943614721298, 0.041613053530454636, 0.0023874258622527122, 0.029468614608049393, 0.07285963743925095, 0.00747077027335763, 0.04115729406476021, 0.005003693513572216, 0.003412318881601095], "target_probs": 0.8950183391571045}}


{"result": {"time": "2021-02-21 12:37:19.917086", "n_pass": [897, 194, 92], "n_token": 54, "loss": [0.6927104592323303, 0.2270709127187729], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "children", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 40, 44], "repair_candidates": [9, 28, 36, 42, 48, 52, 31, 38, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 40, 44, 16, 27, 30]}}
{"prediction": {"error_location": 0.500218391418457, "repair_targets": [0.10920628160238266, 0.009722300805151463, 0.01742587424814701, 0.04625362902879715, 0.053523726761341095, 0.023286473006010056, 0.029664084315299988, 0.02390921860933304, 0.008434271439909935, 0.014293636195361614, 0.011077103205025196, 0.029117001220583916, 0.06419416517019272, 0.020298682153224945, 0.03458883985877037, 0.015499018132686615, 0.010392210446298122, 0.07407991588115692, 0.15662096440792084, 0.04527692124247551], "repair_candidates": [0.10920628160238266, 0.009722300805151463, 0.01742587424814701, 0.04625362902879715, 0.053523726761341095, 0.023286473006010056, 0.029664084315299988, 0.02390921860933304, 0.014158734120428562, 0.008434271439909935, 0.014293636195361614, 0.011077103205025196, 0.029117001220583916, 0.06419416517019272, 0.020298682153224945, 0.01227115560323, 0.03458883985877037, 0.015499018132686615, 0.00027060083812102675, 0.0005337059847079217, 0.005228262860327959, 0.00953372661024332, 0.010392210446298122, 0.07407991588115692, 0.02865377813577652, 0.1031695231795311, 0.15662096440792084, 0.009241427294909954, 0.04527692124247551, 0.012992232106626034, 0.007082581054419279], "target_probs": 0.7968642711639404}}


{"result": {"time": "2021-02-21 12:37:20.015485", "n_pass": [898, 195, 93], "n_token": 53, "loss": [1.023790717124939, 0.10568881779909134], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "(", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 39, 43], "repair_candidates": [9, 28, 35, 41, 47, 51, 31, 37, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 39, 43, 16, 27, 30]}}
{"prediction": {"error_location": 0.359230637550354, "repair_targets": [0.09993109852075577, 0.010402313433587551, 0.020634034648537636, 0.048175111413002014, 0.048670731484889984, 0.02107643336057663, 0.02576732076704502, 0.020609412342309952, 0.0062754410319030285, 0.01035736221820116, 0.00778173515573144, 0.020879533141851425, 0.048134926706552505, 0.009919460862874985, 0.06466076523065567, 0.06924247741699219, 0.009714830666780472, 0.18748466670513153, 0.1108529269695282, 0.059133969247341156], "repair_candidates": [0.09993109852075577, 0.010402313433587551, 0.020634034648537636, 0.048175111413002014, 0.048670731484889984, 0.02107643336057663, 0.02576732076704502, 0.020609412342309952, 0.010597926564514637, 0.0062754410319030285, 0.01035736221820116, 0.00778173515573144, 0.020879533141851425, 0.048134926706552505, 0.009919460862874985, 0.008611846715211868, 0.06466076523065567, 0.06924247741699219, 0.0006694889743812382, 0.0010058219777420163, 0.006412188522517681, 0.008122480474412441, 0.009714830666780472, 0.18748466670513153, 0.03170853853225708, 0.015365847386419773, 0.1108529269695282, 0.009083873592317104, 0.059133969247341156, 0.00496197072789073, 0.0037554872687906027], "target_probs": 0.8997045755386353}}


{"result": {"time": "2021-02-21 12:37:20.112855", "n_pass": [900, 196, 94], "n_token": 52, "loss": [0.6094325184822083, 0.09315178543329239], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "[", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 42], "repair_candidates": [9, 28, 35, 40, 46, 50, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 42, 16, 27, 30]}}
{"prediction": {"error_location": 0.5436593294143677, "repair_targets": [0.05540136247873306, 0.0041074007749557495, 0.005858361721038818, 0.016003737226128578, 0.02320486307144165, 0.010220589116215706, 0.013952046632766724, 0.013481923379004002, 0.0048451777547597885, 0.009637678042054176, 0.007417141925543547, 0.019607460126280785, 0.05376681685447693, 0.026830831542611122, 0.011991824954748154, 0.011735234409570694, 0.002884672023355961, 0.4579778015613556, 0.07707148045301437, 0.08505882322788239], "repair_candidates": [0.05540136247873306, 0.0041074007749557495, 0.005858361721038818, 0.016003737226128578, 0.02320486307144165, 0.010220589116215706, 0.013952046632766724, 0.013481923379004002, 0.009635302238166332, 0.0048451777547597885, 0.009637678042054176, 0.007417141925543547, 0.019607460126280785, 0.05376681685447693, 0.026830831542611122, 0.026704812422394753, 0.011991824954748154, 0.011735234409570694, 0.00033785702544264495, 0.0007801642641425133, 0.004695632494986057, 0.007386289071291685, 0.002884672023355961, 0.4579778015613556, 0.002732587978243828, 0.021618463099002838, 0.07707148045301437, 0.006686568725854158, 0.08505882322788239, 0.0042259106412529945, 0.004141246434301138], "target_probs": 0.9110552072525024}}


{"result": {"time": "2021-02-21 12:37:20.403065", "n_pass": [906, 199, 95], "n_token": 51, "loss": [0.6383775472640991, 0.13977204263210297], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "head", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 45, 49, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.5281486511230469, "repair_targets": [0.08116357028484344, 0.00747893750667572, 0.012512775138020515, 0.032296810299158096, 0.03675241023302078, 0.016249453648924828, 0.02207033894956112, 0.01799216866493225, 0.0075279297307133675, 0.011302114464342594, 0.009714598767459393, 0.017375523224473, 0.042650580406188965, 0.014664583839476109, 0.015098816715180874, 0.014315620996057987, 0.008672754280269146, 0.4256187975406647, 0.058689411729574203, 0.01740926131606102], "repair_candidates": [0.08116357028484344, 0.00747893750667572, 0.012512775138020515, 0.032296810299158096, 0.03675241023302078, 0.016249453648924828, 0.02207033894956112, 0.01799216866493225, 0.012330048717558384, 0.0075279297307133675, 0.011302114464342594, 0.009714598767459393, 0.017375523224473, 0.042650580406188965, 0.014664583839476109, 0.012425906956195831, 0.015098816715180874, 0.014315620996057987, 0.0004315425467211753, 0.001208896399475634, 0.009773778729140759, 0.01598949357867241, 0.008672754280269146, 0.4256187975406647, 0.004132668953388929, 0.044458311051130295, 0.058689411729574203, 0.024706410244107246, 0.01740926131606102, 0.0017984628211706877, 0.003188089933246374], "target_probs": 0.8695564270019531}}


{"result": {"time": "2021-02-21 12:37:20.596306", "n_pass": [909, 201, 96], "n_token": 50, "loss": [0.6359831690788269, 0.3879828155040741], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "=", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 44, 48, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.529414713382721, "repair_targets": [0.06718771904706955, 0.005462705157697201, 0.008691739290952682, 0.024814119562506676, 0.030967773869633675, 0.013213017024099827, 0.018295930698513985, 0.014448282308876514, 0.006234483327716589, 0.011775532737374306, 0.008802861906588078, 0.01886763423681259, 0.04122573882341385, 0.017292164266109467, 0.012297184206545353, 0.012261461466550827, 0.0075124879367649555, 0.3290506601333618, 0.023339426144957542, 0.006683108862489462], "repair_candidates": [0.06718771904706955, 0.005462705157697201, 0.008691739290952682, 0.024814119562506676, 0.030967773869633675, 0.013213017024099827, 0.018295930698513985, 0.014448282308876514, 0.012197158299386501, 0.006234483327716589, 0.011775532737374306, 0.008802861906588078, 0.01886763423681259, 0.04122573882341385, 0.017292164266109467, 0.015577278099954128, 0.012297184206545353, 0.012261461466550827, 0.00041148767923004925, 0.0017634895630180836, 0.012386211194097996, 0.017478471621870995, 0.0075124879367649555, 0.3290506601333618, 0.004387483932077885, 0.03853680193424225, 0.023339426144957542, 0.20356740057468414, 0.006683108862489462, 0.006229084450751543, 0.009041047655045986], "target_probs": 0.6784240007400513}}


{"result": {"time": "2021-02-21 12:37:20.692093", "n_pass": [910, 202, 97], "n_token": 49, "loss": [0.3214636743068695, 0.3068487346172333], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "[", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 43, 47, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.7250868678092957, "repair_targets": [0.05768679454922676, 0.003952753264456987, 0.005825606640428305, 0.01900414004921913, 0.028371769934892654, 0.01293700747191906, 0.01894591562449932, 0.013305585831403732, 0.0071091498248279095, 0.011609034612774849, 0.010429992340505123, 0.019165707752108574, 0.05527189001441002, 0.032587941735982895, 0.010779076255857944, 0.007451786659657955, 0.004474590066820383, 0.3917865753173828, 0.0052531384862959385, 0.019813431426882744], "repair_candidates": [0.05768679454922676, 0.003952753264456987, 0.005825606640428305, 0.01900414004921913, 0.028371769934892654, 0.01293700747191906, 0.01894591562449932, 0.013305585831403732, 0.010724459774792194, 0.0071091498248279095, 0.011609034612774849, 0.010429992340505123, 0.019165707752108574, 0.05527189001441002, 0.032587941735982895, 0.05190548673272133, 0.010779076255857944, 0.007451786659657955, 0.00017659277364145964, 0.0006696773925796151, 0.004284441005438566, 0.007092037703841925, 0.004474590066820383, 0.3917865753173828, 0.0019719512201845646, 0.01107342541217804, 0.0052531384862959385, 0.15819314122200012, 0.019813431426882744, 0.0019045684020966291, 0.01624237187206745], "target_probs": 0.7357618808746338}}


{"result": {"time": "2021-02-21 12:37:20.787011", "n_pass": [912, 203, 98], "n_token": 48, "loss": [0.8842484354972839, 0.44659852981567383], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "#NEWLINE#", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 43, 46, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.4130244851112366, "repair_targets": [0.03755713626742363, 0.0026113938074558973, 0.0037328426260501146, 0.014025086537003517, 0.0189439095556736, 0.008780195377767086, 0.012969383969902992, 0.009960961528122425, 0.005558496341109276, 0.009367823600769043, 0.006966735702008009, 0.012964066118001938, 0.03289326652884483, 0.03775119408965111, 0.0075974734500050545, 0.005451533943414688, 0.003238905919715762, 0.3636139929294586, 0.005079052876681089, 0.04073724150657654], "repair_candidates": [0.03755713626742363, 0.0026113938074558973, 0.0037328426260501146, 0.014025086537003517, 0.0189439095556736, 0.008780195377767086, 0.012969383969902992, 0.009960961528122425, 0.011163984425365925, 0.005558496341109276, 0.009367823600769043, 0.006966735702008009, 0.012964066118001938, 0.03289326652884483, 0.03775119408965111, 0.06127338483929634, 0.0075974734500050545, 0.005451533943414688, 0.00020292685076128691, 0.0009014236275106668, 0.00565927242860198, 0.008429034613072872, 0.003238905919715762, 0.3636139929294586, 0.002487814286723733, 0.00868899468332529, 0.005079052876681089, 0.17662398517131805, 0.04073724150657654, 0.0031271774787455797, 0.08164139091968536], "target_probs": 0.6398007273674011}}


{"result": {"time": "2021-02-21 12:37:20.882552", "n_pass": [913, 204, 99], "n_token": 47, "loss": [0.2991943955421448, 0.17127864062786102], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "return", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 43, 45, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.7414153218269348, "repair_targets": [0.06248115375638008, 0.004474728833884001, 0.007117758505046368, 0.02307446300983429, 0.035264354199171066, 0.016353046521544456, 0.019604230299592018, 0.016297349706292152, 0.00919210072606802, 0.014076894149184227, 0.010314466431736946, 0.016158876940608025, 0.06088077649474144, 0.029789932072162628, 0.01413029246032238, 0.0071643334813416, 0.00276279472745955, 0.48869675397872925, 0.004209984093904495, 0.0005424966220743954], "repair_candidates": [0.06248115375638008, 0.004474728833884001, 0.007117758505046368, 0.02307446300983429, 0.035264354199171066, 0.016353046521544456, 0.019604230299592018, 0.016297349706292152, 0.014348876662552357, 0.00919210072606802, 0.014076894149184227, 0.010314466431736946, 0.016158876940608025, 0.06088077649474144, 0.029789932072162628, 0.04185086488723755, 0.01413029246032238, 0.0071643334813416, 0.00022271575289778411, 0.0005886733997613192, 0.006037707440555096, 0.007331975270062685, 0.00276279472745955, 0.48869675397872925, 0.0018939705332741141, 0.015898270532488823, 0.004209984093904495, 0.05215151607990265, 0.0005424966220743954, 0.014730204828083515, 0.0023585157468914986], "target_probs": 0.8425867557525635}}


{"result": {"time": "2021-02-21 12:37:20.976764", "n_pass": [914, 205, 100], "n_token": 46, "loss": [0.5801899433135986, 0.27758124470710754], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities", "["]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 43, 44, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.5597919821739197, "repair_targets": [0.04936051741242409, 0.0031082737259566784, 0.004032098688185215, 0.016067950055003166, 0.031046826392412186, 0.01217483077198267, 0.017346082255244255, 0.010550862178206444, 0.007209845818579197, 0.013111871667206287, 0.009330014698207378, 0.023552455008029938, 0.048201967030763626, 0.03404676541686058, 0.019037766382098198, 0.00776844285428524, 0.004658539779484272, 0.4440862536430359, 0.0014746575616300106, 0.0014480353565886617], "repair_candidates": [0.04936051741242409, 0.0031082737259566784, 0.004032098688185215, 0.016067950055003166, 0.031046826392412186, 0.01217483077198267, 0.017346082255244255, 0.010550862178206444, 0.014072278514504433, 0.007209845818579197, 0.013111871667206287, 0.009330014698207378, 0.023552455008029938, 0.048201967030763626, 0.03404676541686058, 0.072627954185009, 0.019037766382098198, 0.00776844285428524, 0.00011358256597304717, 0.00035305984783917665, 0.002510904101654887, 0.0044736098498106, 0.004658539779484272, 0.4440862536430359, 0.0011331159621477127, 0.0059756445698440075, 0.0014746575616300106, 0.10341909527778625, 0.0014480353565886617, 0.03661145269870758, 0.0010953019373118877], "target_probs": 0.757614016532898}}


{"result": {"time": "2021-02-21 12:37:21.070334", "n_pass": [916, 206, 101], "n_token": 45, "loss": [0.5857259631156921, 0.30656808614730835], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "(", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 20, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41], "repair_candidates": [9, 28, 35, 40, 43, 44, 31, 36, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 24, 32, 34, 38, 41, 16, 27, 30]}}
{"prediction": {"error_location": 0.5567016005516052, "repair_targets": [0.04181194677948952, 0.0020555986557155848, 0.0030223987996578217, 0.014232736080884933, 0.021852215752005577, 0.010020289570093155, 0.011967969126999378, 0.009967460297048092, 0.006241249851882458, 0.010409888811409473, 0.01029056217521429, 0.018217744305729866, 0.04096083343029022, 0.03389882296323776, 0.016673455014824867, 0.008842782117426395, 0.004070563241839409, 0.4687533676624298, 0.0012333174236118793, 0.0014452291652560234], "repair_candidates": [0.04181194677948952, 0.0020555986557155848, 0.0030223987996578217, 0.014232736080884933, 0.021852215752005577, 0.010020289570093155, 0.011967969126999378, 0.009967460297048092, 0.012053785845637321, 0.006241249851882458, 0.010409888811409473, 0.01029056217521429, 0.018217744305729866, 0.04096083343029022, 0.03389882296323776, 0.09600573033094406, 0.016673455014824867, 0.008842782117426395, 0.00011944059224333614, 0.0005146979819983244, 0.002550973789766431, 0.00463964743539691, 0.004070563241839409, 0.4687533676624298, 0.0011507469462230802, 0.005708787590265274, 0.0012333174236118793, 0.11409512162208557, 0.0014452291652560234, 0.026682602241635323, 0.0005100091802887619], "target_probs": 0.7359684109687805}}


{"result": {"time": "2021-02-21 12:37:21.257977", "n_pass": [934, 208, 102], "n_token": 44, "loss": [0.6622070670127869, 0.4166225790977478], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ".", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 23, 31, 33, 37, 40], "repair_candidates": [9, 27, 34, 39, 42, 43, 30, 35, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 23, 31, 33, 37, 40, 16, 26, 29]}}
{"prediction": {"error_location": 0.5157118439674377, "repair_targets": [0.03542995825409889, 0.0016512766014784575, 0.0021908441558480263, 0.008798006922006607, 0.011875673197209835, 0.005701432004570961, 0.008851561695337296, 0.006080401595681906, 0.007354176137596369, 0.01484715472906828, 0.013855881057679653, 0.019919414073228836, 0.035917457193136215, 0.0210790503770113, 0.02378476969897747, 0.0055932230316102505, 0.0029580574482679367, 0.43073809146881104, 0.0012957681901752949, 0.0013475052546709776], "repair_candidates": [0.03542995825409889, 0.0016512766014784575, 0.0021908441558480263, 0.008798006922006607, 0.011875673197209835, 0.005701432004570961, 0.008851561695337296, 0.006080401595681906, 0.014218424446880817, 0.007354176137596369, 0.01484715472906828, 0.013855881057679653, 0.019919414073228836, 0.035917457193136215, 0.0210790503770113, 0.05460735782980919, 0.02378476969897747, 0.0055932230316102505, 0.00013585525448434055, 0.0004084675165358931, 0.0030670862179249525, 0.005111942533403635, 0.0029580574482679367, 0.43073809146881104, 0.0010228457394987345, 0.007294096518307924, 0.0012957681901752949, 0.21885444223880768, 0.0013475052546709776, 0.03557286784052849, 0.00043695553904399276], "target_probs": 0.6592696905136108}}


{"result": {"time": "2021-02-21 12:37:21.444117", "n_pass": [938, 210, 103], "n_token": 43, "loss": [0.8075662851333618, 0.43796306848526], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ")", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 22, 30, 32, 36, 39], "repair_candidates": [9, 26, 33, 38, 41, 42, 29, 34, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 22, 30, 32, 36, 39, 16, 25, 28]}}
{"prediction": {"error_location": 0.44594210386276245, "repair_targets": [0.02474122866988182, 0.0011054780334234238, 0.0014598198467865586, 0.005685324780642986, 0.008067409507930279, 0.003873248351737857, 0.006160660181194544, 0.004422351252287626, 0.005789215210825205, 0.010873005725443363, 0.00913706049323082, 0.012706892564892769, 0.024764765053987503, 0.030154023319482803, 0.028466269373893738, 0.011691237799823284, 0.0015356681542471051, 0.45211881399154663, 0.001154439290985465, 0.001442751963622868], "repair_candidates": [0.02474122866988182, 0.0011054780334234238, 0.0014598198467865586, 0.005685324780642986, 0.008067409507930279, 0.003873248351737857, 0.006160660181194544, 0.004422351252287626, 0.011875098571181297, 0.005789215210825205, 0.010873005725443363, 0.00913706049323082, 0.012706892564892769, 0.024764765053987503, 0.030154023319482803, 0.15440070629119873, 0.028466269373893738, 0.011691237799823284, 0.00013781421876046807, 0.0003593119326978922, 0.003566131927073002, 0.0034847951028496027, 0.0015356681542471051, 0.45211881399154663, 0.0014858635840937495, 0.009842390194535255, 0.001154439290985465, 0.13096752762794495, 0.001442751963622868, 0.037766240537166595, 0.0007644880097359419], "target_probs": 0.6453496217727661}}


{"result": {"time": "2021-02-21 12:37:21.536283", "n_pass": [939, 211, 104], "n_token": 42, "loss": [1.2122902870178223, 0.3309890627861023], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ",", "self", ".", "children", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 29, 31, 35, 38], "repair_candidates": [9, 25, 32, 37, 40, 41, 28, 33, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 29, 31, 35, 38, 16, 24, 27]}}
{"prediction": {"error_location": 0.2975150942802429, "repair_targets": [0.02358010970056057, 0.0010662778513506055, 0.001430035219527781, 0.005827598739415407, 0.00742156570777297, 0.003411326091736555, 0.0058055236004292965, 0.004116265568882227, 0.005368629936128855, 0.010106746107339859, 0.008066677488386631, 0.010898824781179428, 0.021805187687277794, 0.01834915205836296, 0.013802333734929562, 0.012871232815086842, 0.0023737947922199965, 0.5580092072486877, 0.0016129154246300459, 0.0022895822767168283], "repair_candidates": [0.02358010970056057, 0.0010662778513506055, 0.001430035219527781, 0.005827598739415407, 0.00742156570777297, 0.003411326091736555, 0.0058055236004292965, 0.004116265568882227, 0.009667235426604748, 0.005368629936128855, 0.010106746107339859, 0.008066677488386631, 0.010898824781179428, 0.021805187687277794, 0.01834915205836296, 0.07090083509683609, 0.013802333734929562, 0.012871232815086842, 0.00014134086086414754, 0.0003380459384061396, 0.0016878152964636683, 0.002593031618744135, 0.0023737947922199965, 0.5580092072486877, 0.002047289628535509, 0.011163419112563133, 0.0016129154246300459, 0.14375987648963928, 0.0022895822767168283, 0.03868028149008751, 0.0008078517857939005], "target_probs": 0.7182130217552185}}


{"result": {"time": "2021-02-21 12:37:21.810857", "n_pass": [943, 214, 105], "n_token": 41, "loss": [0.9189745783805847, 0.3984569311141968], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ",", "self", ".", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", ".", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 37], "repair_candidates": [9, 24, 31, 36, 39, 40, 27, 32, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 37, 16, 23, 26]}}
{"prediction": {"error_location": 0.3989279270172119, "repair_targets": [0.023102663457393646, 0.0009963448392227292, 0.0013098953058943152, 0.005267081316560507, 0.007332129403948784, 0.003422139212489128, 0.005555363837629557, 0.0035851499997079372, 0.005013843532651663, 0.008525070734322071, 0.006930569186806679, 0.009524454362690449, 0.02006545290350914, 0.015810715034604073, 0.008383015170693398, 0.004847974982112646, 0.0008499657269567251, 0.537270724773407, 0.001455827266909182, 0.002106825588271022], "repair_candidates": [0.023102663457393646, 0.0009963448392227292, 0.0013098953058943152, 0.005267081316560507, 0.007332129403948784, 0.003422139212489128, 0.005555363837629557, 0.0035851499997079372, 0.009304052218794823, 0.005013843532651663, 0.008525070734322071, 0.006930569186806679, 0.009524454362690449, 0.02006545290350914, 0.015810715034604073, 0.05571960657835007, 0.008383015170693398, 0.004847974982112646, 0.029413634911179543, 0.00315171480178833, 0.0010452703572809696, 0.0008973464136943221, 0.0008499657269567251, 0.537270724773407, 0.0022367106284946203, 0.013103598728775978, 0.001455827266909182, 0.17381584644317627, 0.002106825588271022, 0.03932527080178261, 0.0006316474755294621], "target_probs": 0.6713551878929138}}


{"result": {"time": "2021-02-21 12:37:22.175486", "n_pass": [956, 218, 106], "n_token": 40, "loss": [0.8089014887809753, 0.6083935499191284], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ",", "self", ".", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", "possibilities", "self", ".", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 36], "repair_candidates": [9, 24, 31, 35, 38, 39, 27, 32, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 36, 16, 23, 26]}}
{"prediction": {"error_location": 0.44534701108932495, "repair_targets": [0.028007492423057556, 0.0012615015730261803, 0.0018221770878881216, 0.008135342970490456, 0.011092226020991802, 0.004197853151708841, 0.0096873315051198, 0.00412601325660944, 0.008437901735305786, 0.020131682977080345, 0.009524427354335785, 0.012723827734589577, 0.02798963151872158, 0.04459380358457565, 0.016774866729974747, 0.005729468073695898, 0.00022637458459939808, 0.3176051676273346, 0.008096959441900253, 0.0040604304522275925], "repair_candidates": [0.028007492423057556, 0.0012615015730261803, 0.0018221770878881216, 0.008135342970490456, 0.011092226020991802, 0.004197853151708841, 0.0096873315051198, 0.00412601325660944, 0.017859816551208496, 0.008437901735305786, 0.020131682977080345, 0.009524427354335785, 0.012723827734589577, 0.02798963151872158, 0.04459380358457565, 0.14072751998901367, 0.016774866729974747, 0.005729468073695898, 0.03401236608624458, 0.0031098751351237297, 0.002738499315455556, 0.001035173307172954, 0.00022637458459939808, 0.3176051676273346, 0.007827783934772015, 0.016279712319374084, 0.008096959441900253, 0.008174380287528038, 0.0040604304522275925, 0.22333665192127228, 0.0006737671792507172], "target_probs": 0.5442244410514832}}


{"result": {"time": "2021-02-21 12:37:22.267373", "n_pass": [959, 219, 107], "n_token": 39, "loss": [1.0696561336517334, 0.4918133616447449], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ",", "self", ".", "head_children", "possibilities", ",", "head_children", "other_children", "self", ".", "self", "possibilities", "other_children", ")", "self", "possibilities", "self", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 36], "repair_candidates": [9, 24, 31, 35, 37, 38, 27, 32, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 30, 34, 36, 16, 23, 26]}}
{"prediction": {"error_location": 0.3431265354156494, "repair_targets": [0.03157753124833107, 0.0016425916692242026, 0.002548153279349208, 0.010148911736905575, 0.010151568800210953, 0.005170690827071667, 0.009359454736113548, 0.0055968319065868855, 0.014845836907625198, 0.021253321319818497, 0.01048665214329958, 0.014567899517714977, 0.04471031203866005, 0.05721846967935562, 0.026355132460594177, 0.013386053033173084, 0.0004600668326020241, 0.30520403385162354, 0.007378182839602232, 0.019454753026366234], "repair_candidates": [0.03157753124833107, 0.0016425916692242026, 0.002548153279349208, 0.010148911736905575, 0.010151568800210953, 0.005170690827071667, 0.009359454736113548, 0.0055968319065868855, 0.0212880689650774, 0.014845836907625198, 0.021253321319818497, 0.01048665214329958, 0.014567899517714977, 0.04471031203866005, 0.05721846967935562, 0.2067001909017563, 0.026355132460594177, 0.013386053033173084, 0.03185610845685005, 0.0030923355370759964, 0.017111187800765038, 0.00906175933778286, 0.0004600668326020241, 0.30520403385162354, 0.04007072374224663, 0.04845733568072319, 0.007378182839602232, 0.00942247360944748, 0.019454753026366234, 0.0007514815661124885, 0.0006719370139762759], "target_probs": 0.6115164756774902}}


{"result": {"time": "2021-02-21 12:37:22.808781", "n_pass": [991, 225, 108], "n_token": 38, "loss": [1.062650203704834, 0.5120522975921631], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def get_head(", "self", "self", "self", "self", "self", "self", "self", "self", "possibilities", "self", "self", "self", "self", "self", "self", "head_children", "self", "(", "child", ",", "self", ".", "head_children", "possibilities", ",", "head_children", "other_children", "self", "self", "possibilities", "other_children", ")", "self", "possibilities", "self", "possibilities", "possibilities"]}}
{"position": {"error_location": 19, "repair_targets": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 29, 33, 35], "repair_candidates": [9, 24, 30, 34, 36, 37, 27, 31, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 28, 29, 33, 35, 16, 23, 26]}}
{"prediction": {"error_location": 0.34553879499435425, "repair_targets": [0.06602726131677628, 0.0031679689418524504, 0.004741259850561619, 0.01884949579834938, 0.01787470281124115, 0.008266822434961796, 0.014430565759539604, 0.007493229117244482, 0.019438588991761208, 0.020620327442884445, 0.009807232767343521, 0.01858389750123024, 0.03447846695780754, 0.034970130771398544, 0.016376648098230362, 0.008271487429738045, 0.0028024306520819664, 0.2529910206794739, 0.005828969646245241, 0.03424392640590668], "repair_candidates": [0.06602726131677628, 0.0031679689418524504, 0.004741259850561619, 0.01884949579834938, 0.01787470281124115, 0.008266822434961796, 0.014430565759539604, 0.007493229117244482, 0.028212884441018105, 0.019438588991761208, 0.020620327442884445, 0.009807232767343521, 0.01858389750123024, 0.03447846695780754, 0.034970130771398544, 0.09635486453771591, 0.016376648098230362, 0.008271487429738045, 0.10273270308971405, 0.01776697114109993, 0.010260330513119698, 0.004745973739773035, 0.0028024306520819664, 0.2529910206794739, 0.062281448394060135, 0.046772781759500504, 0.005828969646245241, 0.02865893580019474, 0.03424392640590668, 0.0015618447214365005, 0.0013868858804926276], "target_probs": 0.5992644429206848}}




Minimal simplified tokens:

['def get_head(', 'self', 'self', 'self', 'self', 'self', 'self', 'self', 'self', 'possibilities', 'self', 'self', 'self', 'self', 'self', 'self', 'head_children', 'self', '(', 'child', ',', 'self', '.', 'head_children', 'possibilities', ',', 'head_children', 'other_children', 'self', 'self', 'possibilities', 'other_children', ')', 'self', 'possibilities', 'self', 'possibilities', 'possibilities']
