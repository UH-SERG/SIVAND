
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "None", ",", "use_naive_method", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Utility function to determine if a referring URL is a SERP.\\n\\n    :param referring_url:    Suspected SERP URL.\\n    :type referring_url:     str or urlparse.ParseResult\\n\\n    :param parser:           A search engine parser.\\n    :type parser:            :class:`SearchEngineParser` instance or\\n                             ``None``.\\n\\n    :param use_naive_method: Whether or not to use a naive method of search\\n                             engine detection in the event that a parser does\\n                             not exist for the given ``referring_url``.  See\\n                             :func:`extract` for more information.\\n    :type use_naive_method:  ``True`` or ``False``\\n\\n    :returns: ``True`` if SERP, ``False`` otherwise.\\n    '", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"], "error_location": [21], "repair_targets": [2], "repair_candidates": [4, 21, 23, 25, 2, 8, 27, 29, 17, 34], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "Parsely/serpextract/serpextract/serpextract.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00000-of-00300", "js_count": 1600, "results": {"model": "rnn", "prob": {"loc": [[0.24940985441207886, 2.5107334295171313e-05, 1.7124856412920053e-06, 5.8306297567867205e-09, 1.2119178904868022e-07, 2.0241884612914873e-08, 7.410064739588051e-08, 8.44592662474497e-08, 2.0667857825173996e-07, 3.693865879839109e-09, 7.401942525575578e-08, 4.548598653286717e-08, 2.714704372408505e-08, 2.599162769456598e-07, 1.0645844383816438e-07, 2.500100322322396e-07, 1.2640118995932426e-07, 5.696335279026243e-07, 5.287748461313413e-09, 1.063761465047719e-05, 2.2503028773712686e-08, 0.02552524395287037, 1.4650481716671493e-07, 6.635365821239247e-07, 1.0690508389643583e-07, 0.0015479528810828924, 5.503434863385337e-07, 3.181356689196946e-08, 4.265609447884344e-07, 5.533739022212103e-05, 6.222900861274638e-09, 8.103620530164335e-08, 9.396242006687316e-08, 4.973124987373012e-07, 0.7233537435531616, 6.68021402816521e-06, 5.863630212843418e-05, 4.82223299513862e-07]], "pointer": [[0.0, 0.0, 0.8982883095741272, 0.0, 0.062341995537281036, 0.0, 0.0, 0.0, 0.03897900506854057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8127679140889086e-05, 0.0, 0.0, 0.0, 9.611053428670857e-06, 0.0, 8.974046068033203e-05, 0.0, 1.927991888805991e-06, 0.0, 0.00025576676125638187, 0.0, 1.1728916433639824e-05, 0.0, 0.0, 0.0, 0.0, 3.746145466720918e-06, 0.0, 0.0, 0.0]], "target": [0.8982883095741272]}, "loss": [3.6680872440338135, 0.1072642058134079], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [34]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:27:18.529998", "n_pass": [1, 1, 1], "n_token": 38, "loss": [0.323856920003891, 0.1072642058134079], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "None", ",", "use_naive_method", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Utility function to determine if a referring URL is a SERP.\\n\\n    :param referring_url:    Suspected SERP URL.\\n    :type referring_url:     str or urlparse.ParseResult\\n\\n    :param parser:           A search engine parser.\\n    :type parser:            :class:`SearchEngineParser` instance or\\n                             ``None``.\\n\\n    :param use_naive_method: Whether or not to use a naive method of search\\n                             engine detection in the event that a parser does\\n                             not exist for the given ``referring_url``.  See\\n                             :func:`extract` for more information.\\n    :type use_naive_method:  ``True`` or ``False``\\n\\n    :returns: ``True`` if SERP, ``False`` otherwise.\\n    '", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 34, "repair_targets": [2], "repair_candidates": [4, 21, 23, 25, 2, 8, 27, 29, 17, 34]}}
{"prediction": {"error_location": 0.7233537435531616, "repair_targets": [0.8982883095741272], "repair_candidates": [0.8982883095741272, 0.062341995537281036, 0.03897900506854057, 1.8127679140889086e-05, 9.611053428670857e-06, 8.974046068033203e-05, 1.927991888805991e-06, 0.00025576676125638187, 1.1728916433639824e-05, 3.746145466720918e-06], "target_probs": 0.8982883095741272}}


{"result": {"time": "2021-02-21 11:27:18.666708", "n_pass": [47, 3, 2], "n_token": 36, "loss": [0.3463827967643738, 0.04432469978928566], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Utility function to determine if a referring URL is a SERP.\\n\\n    :param referring_url:    Suspected SERP URL.\\n    :type referring_url:     str or urlparse.ParseResult\\n\\n    :param parser:           A search engine parser.\\n    :type parser:            :class:`SearchEngineParser` instance or\\n                             ``None``.\\n\\n    :param use_naive_method: Whether or not to use a naive method of search\\n                             engine detection in the event that a parser does\\n                             not exist for the given ``referring_url``.  See\\n                             :func:`extract` for more information.\\n    :type use_naive_method:  ``True`` or ``False``\\n\\n    :returns: ``True`` if SERP, ``False`` otherwise.\\n    '", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 32, "repair_targets": [2], "repair_candidates": [4, 19, 21, 23, 2, 6, 25, 27, 15, 32]}}
{"prediction": {"error_location": 0.7072417140007019, "repair_targets": [0.956643283367157], "repair_candidates": [0.956643283367157, 0.04165640100836754, 0.0012405843008309603, 1.8347782315686345e-05, 1.7158079572254792e-05, 0.0001466122193960473, 2.5399274363735458e-06, 0.0002609164803288877, 1.0318756721972022e-05, 3.741097089005052e-06], "target_probs": 0.956643283367157}}


{"result": {"time": "2021-02-21 11:27:18.733127", "n_pass": [49, 4, 3], "n_token": 34, "loss": [0.45957112312316895, 0.029725879430770874], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", ":", "#NEWLINE#", "#INDENT#", "'\\n    Utility function to determine if a referring URL is a SERP.\\n\\n    :param referring_url:    Suspected SERP URL.\\n    :type referring_url:     str or urlparse.ParseResult\\n\\n    :param parser:           A search engine parser.\\n    :type parser:            :class:`SearchEngineParser` instance or\\n                             ``None``.\\n\\n    :param use_naive_method: Whether or not to use a naive method of search\\n                             engine detection in the event that a parser does\\n                             not exist for the given ``referring_url``.  See\\n                             :func:`extract` for more information.\\n    :type use_naive_method:  ``True`` or ``False``\\n\\n    :returns: ``True`` if SERP, ``False`` otherwise.\\n    '", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 30, "repair_targets": [2], "repair_candidates": [4, 17, 19, 21, 2, 6, 23, 25, 13, 30]}}
{"prediction": {"error_location": 0.6315544247627258, "repair_targets": [0.9707115888595581], "repair_candidates": [0.9707115888595581, 0.02754949778318405, 0.0013145410921424627, 1.2115247955080122e-05, 1.1054047718062066e-05, 0.00013239688996691257, 2.5902650122588966e-06, 0.0002528947370592505, 1.0071305950987153e-05, 3.1349086384580005e-06], "target_probs": 0.9707115888595581}}


{"result": {"time": "2021-02-21 11:27:18.798486", "n_pass": [50, 5, 4], "n_token": 32, "loss": [0.16174320876598358, 0.05586254596710205], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", "#INDENT#", "'\\n    Utility function to determine if a referring URL is a SERP.\\n\\n    :param referring_url:    Suspected SERP URL.\\n    :type referring_url:     str or urlparse.ParseResult\\n\\n    :param parser:           A search engine parser.\\n    :type parser:            :class:`SearchEngineParser` instance or\\n                             ``None``.\\n\\n    :param use_naive_method: Whether or not to use a naive method of search\\n                             engine detection in the event that a parser does\\n                             not exist for the given ``referring_url``.  See\\n                             :func:`extract` for more information.\\n    :type use_naive_method:  ``True`` or ``False``\\n\\n    :returns: ``True`` if SERP, ``False`` otherwise.\\n    '", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 28, "repair_targets": [2], "repair_candidates": [4, 15, 17, 19, 2, 6, 21, 23, 11, 28]}}
{"prediction": {"error_location": 0.8506596088409424, "repair_targets": [0.9456691145896912], "repair_candidates": [0.9456691145896912, 0.05267277732491493, 0.0009354653302580118, 4.662211358663626e-05, 2.2403994080377743e-05, 0.00019807321950793266, 5.137486368766986e-06, 0.000436412199633196, 1.075899854185991e-05, 3.203217147529358e-06], "target_probs": 0.9456691145896912}}


{"result": {"time": "2021-02-21 11:27:18.862152", "n_pass": [51, 6, 5], "n_token": 30, "loss": [0.06853177398443222, 0.016481593251228333], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", "#NEWLINE#", "res", "=", "extract", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [4, 13, 15, 17, 2, 6, 19, 21, 9, 26]}}
{"prediction": {"error_location": 0.9337638020515442, "repair_targets": [0.9836534857749939], "repair_candidates": [0.9836534857749939, 0.014558155089616776, 0.001391768455505371, 3.7897472793702036e-05, 2.5791339794523083e-05, 5.866183710168116e-05, 1.982568846869981e-06, 0.00026422576047480106, 5.5605491979804356e-06, 2.533820406824816e-06], "target_probs": 0.9836534857749939}}


{"result": {"time": "2021-02-21 11:27:18.928227", "n_pass": [53, 7, 6], "n_token": 28, "loss": [0.019888855516910553, 0.014748376794159412], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", "#NEWLINE#", "res", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res", "is not", "None", ")"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [4, 11, 13, 15, 2, 6, 17, 19, 9, 24]}}
{"prediction": {"error_location": 0.9803075194358826, "repair_targets": [0.9853598475456238], "repair_candidates": [0.9853598475456238, 0.00935618206858635, 0.0023757012095302343, 5.8377398090669885e-05, 0.0017457175999879837, 0.000336111435899511, 1.6039997717598453e-05, 0.000693768379278481, 4.308134884922765e-05, 1.518074805062497e-05], "target_probs": 0.9853598475456238}}


{"result": {"time": "2021-02-21 11:27:18.989845", "n_pass": [59, 8, 7], "n_token": 25, "loss": [0.08362217992544174, 0.011352602392435074], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def is_serp(", "referring_url", ",", "parser", "=", "use_naive_method", "=", "#NEWLINE#", "res", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [4, 11, 13, 15, 2, 6, 17, 19, 9, 24]}}
{"prediction": {"error_location": 0.9197788238525391, "repair_targets": [0.9887115955352783], "repair_candidates": [0.9887115955352783, 0.006815840490162373, 0.0023298836313188076, 3.2442647352581844e-05, 0.0009570805123075843, 0.00020273096743039787, 1.6887006495380774e-05, 0.0008576359250582755, 6.657333142356947e-05, 9.251340088667348e-06], "target_probs": 0.9887115955352783}}


{"result": {"time": "2021-02-21 11:27:19.049893", "n_pass": [60, 9, 8], "n_token": 23, "loss": [0.251185804605484, 0.18518003821372986], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", ",", "parser", "=", "use_naive_method", "=", "#NEWLINE#", "res", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 22, "repair_targets": [0], "repair_candidates": [2, 9, 11, 13, 0, 4, 15, 17, 7, 22]}}
{"prediction": {"error_location": 0.7778778076171875, "repair_targets": [0.8309546709060669], "repair_candidates": [0.8309546709060669, 0.05756249651312828, 0.037339553236961365, 0.0001367151562590152, 0.06359804421663284, 0.004588063806295395, 0.0021835302468389273, 0.002911454299464822, 0.0006150287226773798, 0.0001104236434912309], "target_probs": 0.8309546709060669}}


{"result": {"time": "2021-02-21 11:27:19.110734", "n_pass": [89, 10, 9], "n_token": 22, "loss": [0.08302662521600723, 0.6248435378074646], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "=", "use_naive_method", "=", "#NEWLINE#", "res", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 21, "repair_targets": [0], "repair_candidates": [1, 8, 10, 12, 0, 3, 14, 16, 6, 21]}}
{"prediction": {"error_location": 0.9203266501426697, "repair_targets": [0.535345196723938], "repair_candidates": [0.535345196723938, 0.32787543535232544, 0.0733456239104271, 0.00012502407480496913, 0.044703271239995956, 0.007198695559054613, 0.0011059974785894156, 0.009653748944401741, 0.0005846974090673029, 6.231296720216051e-05], "target_probs": 0.535345196723938}}


{"result": {"time": "2021-02-21 11:27:19.291445", "n_pass": [94, 13, 10], "n_token": 21, "loss": [0.03642118722200394, 0.37011945247650146], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "=", "use_naive_method", "=", "res", "(", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 20, "repair_targets": [0], "repair_candidates": [1, 7, 9, 11, 0, 3, 13, 15, 5, 20]}}
{"prediction": {"error_location": 0.9642339944839478, "repair_targets": [0.6906518340110779], "repair_candidates": [0.6906518340110779, 0.1499437391757965, 0.008738378062844276, 0.00028961399220861495, 0.07831241190433502, 0.052027128636837006, 0.006145309656858444, 0.012744426727294922, 0.0010762517340481281, 7.090402505127713e-05], "target_probs": 0.6906518340110779}}


{"result": {"time": "2021-02-21 11:27:19.350460", "n_pass": [96, 14, 11], "n_token": 20, "loss": [0.013567027635872364, 0.46328872442245483], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "=", "use_naive_method", "=", "res", "parser", ",", "parser", "=", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 19, "repair_targets": [0], "repair_candidates": [1, 6, 8, 10, 0, 3, 12, 14, 5, 19]}}
{"prediction": {"error_location": 0.9865247011184692, "repair_targets": [0.6292109489440918], "repair_candidates": [0.6292109489440918, 0.055583223700523376, 0.06739095598459244, 0.0016904372023418546, 0.0027312212623655796, 0.21015985310077667, 0.013119320385158062, 0.018377382308244705, 0.0016787095228210092, 5.7896177168004215e-05], "target_probs": 0.6292109489440918}}


{"result": {"time": "2021-02-21 11:27:19.466745", "n_pass": [100, 16, 12], "n_token": 19, "loss": [0.022651739418506622, 0.3820917010307312], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "=", "use_naive_method", "=", "res", "parser", ",", "parser", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 18, "repair_targets": [0], "repair_candidates": [1, 6, 8, 9, 0, 3, 11, 13, 5, 18]}}
{"prediction": {"error_location": 0.9776028990745544, "repair_targets": [0.6824324727058411], "repair_candidates": [0.6824324727058411, 0.15419012308120728, 0.11615164577960968, 0.0017667168285697699, 0.0013500055065378547, 0.01589054986834526, 0.0014537546085193753, 0.02578713558614254, 0.0008777731563895941, 9.989416867028922e-05], "target_probs": 0.6824324727058411}}


{"result": {"time": "2021-02-21 11:27:19.642247", "n_pass": [110, 19, 13], "n_token": 18, "loss": [0.06134567782282829, 0.3368464708328247], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "=", "use_naive_method", "res", "parser", ",", "parser", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 17, "repair_targets": [0], "repair_candidates": [1, 5, 7, 8, 0, 3, 10, 12, 4, 17]}}
{"prediction": {"error_location": 0.9404980540275574, "repair_targets": [0.7140184640884399], "repair_candidates": [0.7140184640884399, 0.2353155016899109, 0.01003709714859724, 0.001356573891825974, 0.003526718122884631, 0.021282410249114037, 0.002789629390463233, 0.011009717360138893, 0.0005650373641401529, 9.894793038256466e-05], "target_probs": 0.7140184640884399}}


{"result": {"time": "2021-02-21 11:27:19.814054", "n_pass": [122, 22, 14], "n_token": 17, "loss": [0.15520243346691132, 0.16142088174819946], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", ",", "parser", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 16, "repair_targets": [0], "repair_candidates": [1, 4, 6, 7, 0, 2, 9, 11, 3, 16]}}
{"prediction": {"error_location": 0.8562418222427368, "repair_targets": [0.850933849811554], "repair_candidates": [0.850933849811554, 0.06951387971639633, 0.026993686333298683, 0.005828604567795992, 0.006752438843250275, 0.007517783436924219, 0.0010271352948620915, 0.03013814426958561, 0.0011372106382623315, 0.00015730015002191067], "target_probs": 0.850933849811554}}


{"result": {"time": "2021-02-21 11:27:19.870961", "n_pass": [126, 23, 15], "n_token": 16, "loss": [0.07137911766767502, 0.33257269859313965], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", "parser", "parser", ",", "use_naive_method", "=", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 15, "repair_targets": [0], "repair_candidates": [1, 4, 5, 6, 0, 2, 8, 10, 3, 15]}}
{"prediction": {"error_location": 0.9311087131500244, "repair_targets": [0.7170765399932861], "repair_candidates": [0.7170765399932861, 0.2340674102306366, 0.01662612333893776, 0.00020946703443769366, 0.00013527162082027644, 0.004601639695465565, 0.015857111662626266, 0.010733849368989468, 0.000632844923529774, 5.968887489871122e-05], "target_probs": 0.7170765399932861}}


{"result": {"time": "2021-02-21 11:27:20.042077", "n_pass": [150, 26, 16], "n_token": 15, "loss": [0.05117882788181305, 0.6041910648345947], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", "parser", "parser", ",", "use_naive_method", "use_naive_method", ")", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 14, "repair_targets": [0], "repair_candidates": [1, 4, 5, 6, 0, 2, 8, 9, 3, 14]}}
{"prediction": {"error_location": 0.9501087665557861, "repair_targets": [0.5465163588523865], "repair_candidates": [0.5465163588523865, 0.4306895434856415, 0.017590036615729332, 0.0001324246113654226, 5.407135540735908e-05, 0.0009619054035283625, 0.0009368794271722436, 0.0005641012103296816, 0.0025211211759597063, 3.356662637088448e-05], "target_probs": 0.5465163588523865}}


{"result": {"time": "2021-02-21 11:27:20.098175", "n_pass": [152, 27, 17], "n_token": 14, "loss": [0.05959546938538551, 0.5318328142166138], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", "parser", "parser", ",", "use_naive_method", "use_naive_method", "#NEWLINE#", "return", "(", "res"]}}
{"position": {"error_location": 13, "repair_targets": [0], "repair_candidates": [1, 4, 5, 6, 0, 2, 8, 9, 3, 13]}}
{"prediction": {"error_location": 0.942145586013794, "repair_targets": [0.5875271558761597], "repair_candidates": [0.5875271558761597, 0.390428364276886, 0.015657341107726097, 0.0001349814992863685, 5.3546445997199044e-05, 0.0011598342098295689, 0.001135809812694788, 0.0005409395089372993, 0.0032863595988601446, 7.57186280679889e-05], "target_probs": 0.5875271558761597}}


{"result": {"time": "2021-02-21 11:27:20.262959", "n_pass": [155, 30, 18], "n_token": 13, "loss": [0.35539349913597107, 0.46849948167800903], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", "parser", "parser", ",", "use_naive_method", "use_naive_method", "#NEWLINE#", "return", "res"]}}
{"position": {"error_location": 12, "repair_targets": [0], "repair_candidates": [1, 4, 5, 6, 0, 2, 8, 9, 3, 12]}}
{"prediction": {"error_location": 0.7008976340293884, "repair_targets": [0.6259407997131348], "repair_candidates": [0.6259407997131348, 0.34629395604133606, 0.015793120488524437, 0.00016676128143444657, 8.34887323435396e-05, 0.0018882728181779385, 0.0020210142247378826, 0.0005993832019157708, 0.0054000443778932095, 0.0018131446558982134], "target_probs": 0.6259407997131348}}


{"result": {"time": "2021-02-21 11:27:20.317497", "n_pass": [164, 31, 19], "n_token": 12, "loss": [0.6331772208213806, 0.4430575966835022], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["referring_url", "parser", "use_naive_method", "res", "parser", "parser", "parser", "use_naive_method", "use_naive_method", "#NEWLINE#", "return", "res"]}}
{"position": {"error_location": 11, "repair_targets": [0], "repair_candidates": [1, 4, 5, 6, 0, 2, 7, 8, 3, 11]}}
{"prediction": {"error_location": 0.5309023261070251, "repair_targets": [0.6420702338218689], "repair_candidates": [0.6420702338218689, 0.33419346809387207, 0.018650654703378677, 0.00017715786816552281, 4.846262527280487e-05, 0.0013524108799174428, 0.0006094406708143651, 0.0002572558296378702, 0.001826875377446413, 0.0008140166755765676], "target_probs": 0.6420702338218689}}




Minimal simplified tokens:

['referring_url', 'parser', 'use_naive_method', 'res', 'parser', 'parser', 'parser', 'use_naive_method', 'use_naive_method', '#NEWLINE#', 'return', 'res']
