
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "NSLog", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "args", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"], "error_location": [13], "repair_targets": [2], "repair_candidates": [10, 13, 2], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "beville/ComicStreamer/libs/rumps/rumps.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00011-of-00300", "js_count": 35729, "results": {"model": "rnn", "prob": {"loc": [[0.39621469378471375, 1.4953045592847047e-06, 1.234641058545094e-05, 8.724263693693501e-07, 1.8629813780535187e-07, 1.909495495056035e-07, 9.31707461404585e-07, 1.9113210214527498e-07, 4.874707883573137e-06, 3.1531885724689346e-06, 2.3507052901550196e-05, 9.073132241610438e-05, 3.1055395083967596e-05, 0.10772775113582611, 9.451621735934168e-05, 2.0313842469477095e-05, 8.020140285225352e-07, 2.2997160442628228e-07, 3.048349128675909e-07, 0.011454981751739979, 6.36212416793569e-06, 3.8139521052471537e-07, 1.7169219063362107e-05, 2.717157201459486e-07, 1.952830928075855e-07, 1.202569563929501e-07, 1.5218781754811062e-06, 2.2412614271161146e-06, 2.1306880171323428e-07, 6.739801960975456e-07, 4.6379286686715204e-06, 1.2658979358093347e-05, 0.028682321310043335, 4.76644004265836e-07, 0.0014035203494131565, 1.941452637765906e-06, 1.7542355408295407e-06, 3.894455403496977e-06, 3.5555317481339443e-06, 1.9205876924388576e-06, 3.6842488043475896e-05, 3.085970945448935e-07, 8.32045407150872e-06, 6.0829511312476825e-06, 6.312799882834952e-08, 1.9496636127769307e-07, 1.2060341987307766e-06, 0.4540572464466095, 1.3873618343041016e-07, 5.13049144501565e-07, 9.223390406987164e-07, 2.7678406695486046e-05, 3.153954094159417e-05]], "pointer": [[0.0, 0.0, 0.9948394894599915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005034029018133879, 0.0, 0.0, 0.00012642507499549538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.9948394894599915]}, "loss": [2.2281479835510254, 0.005173871759325266], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [47]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:44:47.580245", "n_pass": [1, 1, 1], "n_token": 53, "loss": [0.7895318269729614, 0.005173871759325266], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "NSLog", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "args", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"]}}
{"position": {"error_location": 47, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.4540572464466095, "repair_targets": [0.9948394894599915], "repair_candidates": [0.9948394894599915, 0.005034029018133879, 0.00012642507499549538], "target_probs": 0.9948394894599915}}


{"result": {"time": "2021-02-21 12:44:47.794788", "n_pass": [24, 4, 2], "n_token": 46, "loss": [0.6809751391410828, 0.0033411108888685703], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "NSLog", "str", ",", "args", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"]}}
{"position": {"error_location": 40, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.5061231851577759, "repair_targets": [0.9966644644737244], "repair_candidates": [0.9966644644737244, 0.003261776641011238, 7.377212023129687e-05], "target_probs": 0.9966644644737244}}


{"result": {"time": "2021-02-21 12:44:47.936716", "n_pass": [26, 6, 3], "n_token": 39, "loss": [0.7699075937271118, 0.004235103726387024], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "NSLog", "str", ",", "args", ")", ")", ")", "#NEWLINE#", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"]}}
{"position": {"error_location": 33, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.46305587887763977, "repair_targets": [0.9957738518714905], "repair_candidates": [0.9957738518714905, 0.004147520288825035, 7.869101682445034e-05], "target_probs": 0.9957738518714905}}


{"result": {"time": "2021-02-21 12:44:48.068008", "n_pass": [32, 8, 4], "n_token": 32, "loss": [0.7285807132720947, 0.013478465378284454], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "NSLog", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.48259347677230835, "repair_targets": [0.9866119623184204], "repair_candidates": [0.9866119623184204, 0.013199090026319027, 0.00018900060968007892], "target_probs": 0.9866119623184204}}


{"result": {"time": "2021-02-21 12:44:48.130094", "n_pass": [37, 9, 5], "n_token": 25, "loss": [0.049867644906044006, 0.00053664535516873], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")", ":", "#NEWLINE#", "#INDENT#", "pass"]}}
{"position": {"error_location": 19, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.9513552188873291, "repair_targets": [0.9994634985923767], "repair_candidates": [0.9994634985923767, 0.0005347138503566384, 1.8426945871397038e-06], "target_probs": 0.9994634985923767}}


{"result": {"time": "2021-02-21 12:44:48.190135", "n_pass": [51, 10, 6], "n_token": 21, "loss": [0.017158396542072296, 0.0003893537214025855], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Enable/disable printing helpful information for debugging your program. If testing the .app generated using\\n    py2app, to be able to see these messages you must not `open {your app name}.app` but instead run the executable,\\n\\n    While within the directory containing the .app,\\n\\n        ./{your app name}.app/Contents/MacOS/{your app name}\\n\\n    And, by default, your .app will be in `dist` folder after running `python setup.py py2app`. So of course that would\\n    then be,\\n\\n        ./dist/{your app name}.app/Contents/MacOS/{your app name}\\n\\n    '", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")"]}}
{"position": {"error_location": 19, "repair_targets": [2], "repair_candidates": [10, 13, 2]}}
{"prediction": {"error_location": 0.9829879999160767, "repair_targets": [0.9996107220649719], "repair_candidates": [0.9996107220649719, 0.00038795184809714556, 1.3378627272686572e-06], "target_probs": 0.9996107220649719}}


{"result": {"time": "2021-02-21 12:44:48.308518", "n_pass": [54, 12, 7], "n_token": 18, "loss": [0.024298829957842827, 0.000507722026668489], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "#NEWLINE#", "#INDENT#", "def _log(", "*", "_", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 10, 2]}}
{"prediction": {"error_location": 0.9759939908981323, "repair_targets": [0.9994924068450928], "repair_candidates": [0.9994924068450928, 0.000505843956489116, 1.8198765019405982e-06], "target_probs": 0.9994924068450928}}


{"result": {"time": "2021-02-21 12:44:48.365153", "n_pass": [57, 13, 8], "n_token": 15, "loss": [0.008531905710697174, 0.00014055763313081115], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", ")", ":", "#NEWLINE#", "global", "_log", "#NEWLINE#", "if", "_log", ":", "*", "_", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [7, 10, 2]}}
{"prediction": {"error_location": 0.9915044903755188, "repair_targets": [0.9998594522476196], "repair_candidates": [0.9998594522476196, 0.00013960959040559828, 9.671559837443056e-07], "target_probs": 0.9998594522476196}}


{"result": {"time": "2021-02-21 12:44:48.420713", "n_pass": [60, 14, 9], "n_token": 12, "loss": [0.006020861677825451, 0.017908170819282532], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", "global", "_log", "#NEWLINE#", "if", "_log", ":", "*", "_", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [4, 7, 2]}}
{"prediction": {"error_location": 0.9939972162246704, "repair_targets": [0.9822512269020081], "repair_candidates": [0.9822512269020081, 0.01771164871752262, 3.711353929247707e-05], "target_probs": 0.9822512269020081}}


{"result": {"time": "2021-02-21 12:44:48.475394", "n_pass": [74, 15, 10], "n_token": 11, "loss": [0.05374035984277725, 0.1331988126039505], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", "_log", "#NEWLINE#", "if", "_log", ":", "*", "_", ")"]}}
{"position": {"error_location": 9, "repair_targets": [2], "repair_candidates": [3, 6, 2]}}
{"prediction": {"error_location": 0.9476781487464905, "repair_targets": [0.8752910494804382], "repair_candidates": [0.8752910494804382, 0.09671742469072342, 0.02799149416387081], "target_probs": 0.8752910494804382}}


{"result": {"time": "2021-02-21 12:44:48.528871", "n_pass": [76, 16, 11], "n_token": 9, "loss": [0.0539250522851944, 0.0785568505525589], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def debug_mode(", "choice", "_log", "#NEWLINE#", "if", "_log", "_", ")"]}}
{"position": {"error_location": 7, "repair_targets": [2], "repair_candidates": [3, 6, 2]}}
{"prediction": {"error_location": 0.9475030303001404, "repair_targets": [0.9244495034217834], "repair_candidates": [0.9244495034217834, 0.07530690729618073, 0.00024363338889088482], "target_probs": 0.9244495034217834}}


{"result": {"time": "2021-02-21 12:44:48.581790", "n_pass": [78, 17, 12], "n_token": 8, "loss": [0.4551106095314026, 0.2324635535478592], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def debug_mode(", "choice", "_log", "#NEWLINE#", "if", "_log", "_", ")"]}}
{"position": {"error_location": 6, "repair_targets": [1], "repair_candidates": [2, 5, 1]}}
{"prediction": {"error_location": 0.6343777775764465, "repair_targets": [0.7925786375999451], "repair_candidates": [0.7925786375999451, 0.196971595287323, 0.010449747554957867], "target_probs": 0.7925786375999451}}


{"result": {"time": "2021-02-21 12:44:48.688713", "n_pass": [91, 19, 13], "n_token": 7, "loss": [0.839965283870697, 0.20777420699596405], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def debug_mode(", "choice", "_log", "if", "_log", "_", ")"]}}
{"position": {"error_location": 5, "repair_targets": [1], "repair_candidates": [2, 4, 1]}}
{"prediction": {"error_location": 0.43172550201416016, "repair_targets": [0.8123904466629028], "repair_candidates": [0.8123904466629028, 0.1472768634557724, 0.04033270478248596], "target_probs": 0.8123904466629028}}


{"result": {"time": "2021-02-21 12:44:48.740875", "n_pass": [92, 20, 14], "n_token": 6, "loss": [0.8202549815177917, 0.2442173957824707], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def debug_mode(", "choice", "_log", "_log", "_", ")"]}}
{"position": {"error_location": 4, "repair_targets": [1], "repair_candidates": [2, 3, 1]}}
{"prediction": {"error_location": 0.44031935930252075, "repair_targets": [0.7833173274993896], "repair_candidates": [0.7833173274993896, 0.15447771549224854, 0.0622049979865551], "target_probs": 0.7833173274993896}}


{"result": {"time": "2021-02-21 12:44:48.791921", "n_pass": [95, 21, 15], "n_token": 5, "loss": [1.1056891679763794, 0.1506156623363495], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def debug_mode(", "choice", "_log", "_log", "_"]}}
{"position": {"error_location": 4, "repair_targets": [1], "repair_candidates": [2, 3, 1]}}
{"prediction": {"error_location": 0.33098268508911133, "repair_targets": [0.8601782321929932], "repair_candidates": [0.8601782321929932, 0.09705314040184021, 0.04276859015226364], "target_probs": 0.8601782321929932}}




Minimal simplified tokens:

['def debug_mode(', 'choice', '_log', '_log', '_']
