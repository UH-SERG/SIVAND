
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "1", "==", "len", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", ".", "lower", "(", ")", "#NEWLINE#", "for", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "#UNINDENT#", "if", "(", "dict", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "(", "1", "==", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"], "error_location": [197], "repair_targets": [185], "repair_candidates": [79, 90, 57, 102, 111, 197, 73, 76, 81, 106, 150, 167, 179, 62, 66, 96, 5, 17, 38, 53, 84, 120, 136, 143, 152, 187, 210, 185, 28, 2, 23, 64, 159], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "cloudera/hue/desktop/core/ext-py/Paste-2.0.1/paste/httpheaders.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00002-of-00300", "js_count": 8479, "results": {"model": "rnn", "prob": {"loc": [[0.17957910895347595, 1.1338576086927787e-06, 6.22997276877868e-07, 2.0911810949542087e-08, 3.727639974471231e-09, 1.4592338857255527e-06, 1.5704954003936678e-10, 9.733117423138538e-09, 1.1053410631234328e-08, 1.1279284173326687e-09, 8.736169831990992e-08, 5.6171440832031294e-08, 5.384456969181883e-08, 5.822078037454048e-07, 2.575898605527982e-08, 2.2378162611857988e-07, 1.3036557788836944e-07, 0.004222471732646227, 1.862740504066096e-07, 3.467057041461885e-08, 1.3704044476980926e-07, 3.72504800338902e-08, 2.3646387958820014e-08, 2.3315424186876044e-06, 7.454455897004664e-08, 2.1175269537820895e-08, 1.1428803645685548e-06, 9.236522657829482e-08, 0.0006859202403575182, 1.1630150709152076e-07, 3.4251812053298636e-08, 2.5770118554646615e-06, 1.5581475665271682e-08, 4.96421080242726e-07, 0.012698997743427753, 1.9510737274686107e-06, 1.8294439030341891e-07, 1.751094025337352e-08, 0.00028919189935550094, 7.628496723199873e-10, 1.1456236279627774e-06, 4.211863924297177e-08, 3.0771072800916954e-08, 2.9825027780816527e-08, 2.5622762578336733e-08, 6.834444121750494e-08, 2.809406751680399e-08, 5.82993138209531e-08, 9.163144909507537e-07, 0.00016582569514866918, 2.385154971307202e-07, 7.818970004791481e-08, 5.282712436383008e-07, 0.0016598906368017197, 2.0348450036067334e-08, 7.467921392390053e-09, 6.393331641874056e-09, 1.423289930357896e-08, 2.1044453291096943e-08, 9.249917525266937e-07, 1.712465746095404e-06, 9.284216844207549e-07, 1.4678930959632908e-08, 8.335328871567071e-09, 6.288848339863762e-07, 1.733722854169173e-08, 6.891197390501702e-09, 2.1512579451155034e-07, 3.192486275338524e-08, 2.9644073151757766e-07, 2.923503188867471e-06, 1.695644527899276e-06, 1.3694095635230497e-08, 5.865947727556886e-08, 2.8567608296725666e-06, 3.8006851355021354e-06, 0.0485105961561203, 1.5456032897986915e-08, 9.229689790224427e-10, 6.793015927542001e-05, 2.6292790167303792e-09, 1.0682532547434676e-06, 3.406325221888551e-09, 7.242829269671347e-08, 0.0005595335969701409, 4.249027352187795e-09, 1.0032263162429444e-05, 7.648952760064276e-08, 3.323562935975133e-08, 1.8865312867433204e-08, 3.5097778550152725e-07, 7.11852354839948e-09, 3.0571587927852306e-08, 1.3818483068916976e-07, 2.174318524339469e-06, 5.822428192914231e-07, 0.0032673764508217573, 4.3389867698806484e-08, 2.416038284991373e-07, 1.4678826687486435e-07, 2.3763682577282452e-07, 3.8667251622825916e-09, 2.2122945253499893e-08, 2.47809039954916e-09, 9.176034154734225e-09, 3.340149490327349e-08, 0.0012270264560356736, 1.1191321647174846e-08, 1.7985859912528213e-08, 1.7163111820650556e-08, 1.0284867180132551e-08, 0.0012599368346855044, 1.716460928946617e-07, 2.4833038878568914e-06, 1.816520445174774e-08, 3.680257805172005e-07, 0.019678089767694473, 6.026919436408207e-06, 2.1320224163901003e-07, 2.3102629143068043e-08, 0.0007457180181518197, 2.46987053031944e-09, 4.197604994260473e-06, 1.206159367939108e-07, 3.903138789951299e-08, 3.3160532098008844e-08, 3.879151933006142e-08, 7.235953347617397e-08, 1.647207703570075e-08, 1.522842829615456e-08, 5.764846733313789e-08, 1.1157668495798134e-06, 0.0005844840197823942, 7.031284212644096e-07, 5.428355009939878e-08, 1.8770745668916788e-07, 0.0014050317695364356, 4.9098936472091737e-08, 1.0877248435292586e-08, 5.24119680989088e-09, 5.196602046453336e-07, 9.021845471579581e-06, 1.7138063412858173e-05, 0.0032370586413890123, 3.9389340145135066e-07, 2.4398377718171105e-06, 1.1267760413602446e-07, 8.203303281106855e-08, 3.1627038765691395e-08, 1.5815705012300896e-07, 1.9592029332216043e-08, 2.414641464554279e-08, 5.1094662012474146e-06, 3.464283859777595e-10, 4.1670665495985304e-07, 1.304256969092421e-08, 1.4338655773826758e-07, 2.5935873892990458e-08, 6.416934539288377e-09, 0.0012927181087434292, 2.6026100385934114e-07, 1.4982093432536203e-07, 1.711375219315414e-08, 4.6278995569082326e-07, 1.142603345272164e-08, 2.1754581780442095e-07, 1.3387810895437724e-06, 0.006583346053957939, 8.566518516772703e-08, 3.739484455422826e-08, 5.197933106160235e-08, 6.897680204787093e-09, 1.7214322411973626e-08, 2.4273540475405753e-06, 4.639899998437613e-06, 6.052649581533842e-08, 4.645314533036071e-08, 2.9403265600080886e-08, 2.7677018010763277e-07, 0.006506647448986769, 2.136479224645882e-06, 3.2091102184494957e-06, 6.44772967461904e-07, 4.16188913732185e-06, 2.4772125684080493e-08, 3.6216132315303184e-08, 6.701755239646445e-08, 0.004936630837619305, 2.6609546921463334e-07, 1.3077962535135157e-07, 6.491192294788561e-08, 1.2338952615209564e-07, 1.3073062632429355e-07, 8.979048260471245e-08, 5.519594651559601e-06, 5.199435690883547e-06, 4.744283632618362e-09, 0.036418016999959946, 1.6027229321480263e-07, 4.793339414277398e-08, 8.505716664330976e-08, 0.00491780461743474, 1.7977859556594922e-07, 0.01220539677888155, 2.8764014814441907e-07, 1.3361744777284912e-07, 3.0134597750475223e-07, 7.853500960663951e-07, 1.7098344073929184e-07, 1.0719751344367978e-06, 0.6471596360206604]], "pointer": [[0.0, 0.0, 0.001323296339251101, 0.0, 0.0, 0.01867649331688881, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0030679195187985897, 0.0, 0.0, 0.0, 0.0, 0.0, 4.372438706923276e-05, 0.0, 0.0, 0.0, 0.0, 0.01175404991954565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01587221398949623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010282477596774697, 0.0, 0.0, 0.0, 0.004234942141920328, 0.0, 0.0, 0.0, 0.0, 0.02491024322807789, 0.0, 0.0001291400840273127, 0.0, 8.266510121757165e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02851400524377823, 0.0, 0.0, 5.768733444710961e-06, 0.0, 0.0, 0.046871576458215714, 0.0, 0.06140473484992981, 0.0, 0.0, 0.00394816417247057, 0.0, 0.0, 0.0, 0.0, 0.0, 3.9994210965232924e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003571355191525072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004222822899464518, 0.0, 0.0, 0.0, 4.700691715697758e-05, 0.0, 0.0, 0.0, 0.0, 0.00041565808351151645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05020521208643913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02439211495220661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01243123784661293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04337383061647415, 0.0, 0.0029732033144682646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00032073224429041147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017914608179125935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00026578924735076725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5817809104919434, 0.0, 3.5242261219536886e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06088433787226677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.994582458399236e-06]], "target": [0.5817809104919434]}, "loss": [3.3126916885375977, 0.5416613817214966], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [210]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:45:03.108131", "n_pass": [1, 1, 1], "n_token": 211, "loss": [0.4351623058319092, 0.5416613817214966], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "1", "==", "len", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", ".", "lower", "(", ")", "#NEWLINE#", "for", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "#UNINDENT#", "if", "(", "dict", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "(", "1", "==", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 210, "repair_targets": [185], "repair_candidates": [79, 90, 57, 102, 111, 197, 73, 76, 81, 106, 150, 167, 179, 62, 66, 96, 5, 17, 38, 53, 84, 120, 136, 143, 152, 187, 210, 185, 28, 2, 23, 64, 159]}}
{"prediction": {"error_location": 0.6471596360206604, "repair_targets": [0.5817809104919434], "repair_candidates": [0.001323296339251101, 0.01867649331688881, 0.0030679195187985897, 4.372438706923276e-05, 0.01175404991954565, 0.01587221398949623, 0.0010282477596774697, 0.004234942141920328, 0.02491024322807789, 0.0001291400840273127, 8.266510121757165e-05, 0.02851400524377823, 5.768733444710961e-06, 0.046871576458215714, 0.06140473484992981, 0.00394816417247057, 3.9994210965232924e-05, 0.0003571355191525072, 0.0004222822899464518, 4.700691715697758e-05, 0.00041565808351151645, 0.05020521208643913, 0.02439211495220661, 0.01243123784661293, 0.04337383061647415, 0.0029732033144682646, 0.00032073224429041147, 0.00017914608179125935, 0.00026578924735076725, 0.5817809104919434, 3.5242261219536886e-05, 0.06088433787226677, 8.994582458399236e-06], "target_probs": 0.5817809104919434}}


{"result": {"time": "2021-02-21 11:45:03.289548", "n_pass": [47, 2, 2], "n_token": 198, "loss": [0.4010215401649475, 0.5107150077819824], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", ".", "lower", "(", ")", "#NEWLINE#", "for", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "#UNINDENT#", "if", "(", "dict", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "(", "1", "==", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 197, "repair_targets": [172], "repair_candidates": [66, 77, 44, 89, 98, 184, 60, 63, 68, 93, 137, 154, 166, 49, 53, 83, 5, 17, 38, 40, 71, 107, 123, 130, 139, 174, 197, 172, 28, 2, 23, 51, 146]}}
{"prediction": {"error_location": 0.669635534286499, "repair_targets": [0.6000663638114929], "repair_candidates": [0.0014041318790987134, 0.016577860340476036, 0.002467348938807845, 9.183574729831889e-05, 0.01456061564385891, 0.0006445951294153929, 0.002578441984951496, 0.0063970061019063, 0.027382927015423775, 0.00014499165990855545, 0.0001756764977471903, 0.019449984654784203, 8.279923349618912e-06, 0.0530940480530262, 0.049947191029787064, 0.008356304839253426, 5.1686442020582035e-05, 0.00044796179281547666, 0.0002865170536097139, 4.7080025979084894e-05, 0.0004146795836277306, 0.05188611522316933, 0.01844741217792034, 0.011254825629293919, 0.05093826353549957, 0.003657381748780608, 0.0003006099723279476, 0.00021004158770665526, 0.0002507267636246979, 0.6000663638114929, 3.548723543644883e-05, 0.058414358645677567, 9.175656487059314e-06], "target_probs": 0.6000663638114929}}


{"result": {"time": "2021-02-21 11:45:03.466445", "n_pass": [95, 3, 3], "n_token": 192, "loss": [0.35800063610076904, 0.42136433720588684], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "#UNINDENT#", "if", "(", "dict", "==", "type", "(", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "(", "1", "==", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 191, "repair_targets": [166], "repair_candidates": [60, 71, 44, 83, 92, 178, 54, 57, 62, 87, 131, 148, 160, 49, 53, 77, 5, 17, 38, 40, 65, 101, 117, 124, 133, 168, 191, 166, 28, 2, 23, 51, 140]}}
{"prediction": {"error_location": 0.6990727186203003, "repair_targets": [0.6561509966850281], "repair_candidates": [0.0012819536495953798, 0.014663090929389, 0.0020384418312460184, 7.121458475012332e-05, 0.012180212885141373, 0.00047926598927006125, 0.0027166048530489206, 0.006731565576046705, 0.042970191687345505, 0.003294767113402486, 0.0036593039985746145, 0.0032773788552731276, 6.968023808440194e-05, 0.033690664917230606, 0.027483073994517326, 0.009124821983277798, 5.5209566198755056e-05, 0.0005615935660898685, 0.0003981842310167849, 6.034475518390536e-05, 0.00035127840237692, 0.047208912670612335, 0.021518845111131668, 0.009687595069408417, 0.03550970181822777, 0.003561215242370963, 0.0003424274327699095, 0.0002543420996516943, 0.00026336449082009494, 0.6561509966850281, 3.7681405956391245e-05, 0.06029698625206947, 9.074621630134061e-06], "target_probs": 0.6561509966850281}}


{"result": {"time": "2021-02-21 11:45:03.635145", "n_pass": [102, 4, 4], "n_token": 185, "loss": [0.4163755774497986, 0.4828042685985565], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "(", "1", "==", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 184, "repair_targets": [159], "repair_candidates": [60, 71, 44, 83, 92, 171, 54, 57, 62, 87, 124, 141, 153, 49, 53, 77, 5, 17, 38, 40, 65, 94, 110, 117, 126, 161, 184, 159, 28, 2, 23, 51, 133]}}
{"prediction": {"error_location": 0.6594325304031372, "repair_targets": [0.6170505881309509], "repair_candidates": [0.0017413324676454067, 0.018991995602846146, 0.0026727989315986633, 9.237037011189386e-05, 0.016179651021957397, 0.0006392798386514187, 0.003476369194686413, 0.009568520821630955, 0.06346271187067032, 0.004112960305064917, 0.004740116652101278, 0.0035437478218227625, 7.337376882787794e-05, 0.04952715337276459, 0.036147575825452805, 0.011173550970852375, 5.971129940007813e-05, 0.0007695772801525891, 0.0002599318395368755, 6.190191197674721e-05, 0.0035163373686373234, 0.008679695427417755, 0.02350827306509018, 0.009124753065407276, 0.03975629806518555, 0.005250687710940838, 0.0004201612900942564, 0.0003439623105805367, 0.00033324016840197146, 0.6170505881309509, 5.006366700399667e-05, 0.06465848535299301, 1.2780468750861473e-05], "target_probs": 0.6170505881309509}}


{"result": {"time": "2021-02-21 11:45:03.796200", "n_pass": [104, 5, 5], "n_token": 178, "loss": [0.3788352310657501, 0.4539863169193268], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 177, "repair_targets": [152], "repair_candidates": [60, 71, 44, 83, 92, 164, 54, 57, 62, 87, 117, 134, 146, 49, 53, 77, 5, 17, 38, 40, 65, 94, 103, 110, 119, 154, 177, 152, 28, 2, 23, 51, 126]}}
{"prediction": {"error_location": 0.6846584677696228, "repair_targets": [0.6350914239883423], "repair_candidates": [0.001912401057779789, 0.016957277432084084, 0.0024322739336639643, 9.767685696715489e-05, 0.014844943769276142, 0.0006398292607627809, 0.003059459151700139, 0.00965176336467266, 0.05458332598209381, 0.003914789762347937, 0.004258825443685055, 0.0028463988564908504, 6.382619903888553e-05, 0.046650584787130356, 0.03482292965054512, 0.01353512704372406, 6.011823279550299e-05, 0.0005552146467380226, 0.0009363926947116852, 0.00022013921989127994, 0.004148534033447504, 0.005752604454755783, 0.022419994696974754, 0.00905013456940651, 0.04136091470718384, 0.004926515277475119, 0.00042735415627248585, 0.00031581250368617475, 0.00030820348183624446, 0.6350914239883423, 4.8125002649612725e-05, 0.06409542262554169, 1.1656274182314519e-05], "target_probs": 0.6350914239883423}}


{"result": {"time": "2021-02-21 11:45:03.954450", "n_pass": [110, 6, 6], "n_token": 171, "loss": [0.3494279086589813, 0.40462249517440796], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "not", "(", "type", "(", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 170, "repair_targets": [145], "repair_candidates": [60, 71, 44, 83, 92, 157, 54, 57, 62, 87, 117, 134, 139, 49, 53, 77, 5, 17, 38, 40, 65, 94, 103, 110, 119, 147, 170, 145, 28, 2, 23, 51, 126]}}
{"prediction": {"error_location": 0.7050913572311401, "repair_targets": [0.667228639125824], "repair_candidates": [0.001738600549288094, 0.014565577730536461, 0.0020765396766364574, 8.714177238289267e-05, 0.013046280480921268, 0.00047336448915302753, 0.0022918100003153086, 0.007320445496588945, 0.0428953655064106, 0.0034018191508948803, 0.003242035396397114, 0.0028190386947244406, 6.947196379769593e-05, 0.05689496174454689, 0.029094325378537178, 0.012431598268449306, 6.441868026740849e-05, 0.0005730612319894135, 0.0009545469656586647, 0.0001813355484046042, 0.0032404896337538958, 0.004690348636358976, 0.015121870674192905, 0.009993292391300201, 0.03883173316717148, 0.003327098907902837, 0.0007134637562558055, 0.00020887264690827578, 7.219608960440382e-05, 0.667228639125824, 4.4019769120495766e-05, 0.06229562312364578, 1.0606831892800983e-05], "target_probs": 0.667228639125824}}


{"result": {"time": "2021-02-21 11:45:04.111133", "n_pass": [113, 7, 7], "n_token": 164, "loss": [0.09849516302347183, 0.07454991340637207], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 163, "repair_targets": [145], "repair_candidates": [60, 71, 44, 83, 92, 150, 54, 57, 62, 87, 117, 134, 139, 49, 53, 77, 5, 17, 38, 40, 65, 94, 103, 110, 119, 147, 163, 145, 28, 2, 23, 51, 126]}}
{"prediction": {"error_location": 0.9062000513076782, "repair_targets": [0.9281611442565918], "repair_candidates": [0.0005150274955667555, 0.002100207144394517, 0.0005217125872150064, 2.3719814635114744e-05, 0.0025218978989869356, 0.00010868638491956517, 0.0004977290518581867, 0.0014494429342448711, 0.008076397702097893, 0.0006538613815791905, 0.0005270992405712605, 0.00040457581053487957, 1.0819294402608648e-05, 0.010700942948460579, 0.006026744842529297, 0.001715110382065177, 1.391153818985913e-05, 8.152191003318876e-05, 0.00014843177632428706, 2.8891237889183685e-05, 0.0005062083364464343, 0.0005530325579456985, 0.003714365419000387, 0.0019615262281149626, 0.005887994542717934, 0.0007918007322587073, 6.636128091486171e-05, 2.9623824957525358e-05, 1.0966168701997958e-05, 0.9281611442565918, 7.877316420490388e-06, 0.022180858999490738, 1.5647808595531387e-06], "target_probs": 0.9281611442565918}}


{"result": {"time": "2021-02-21 11:45:04.262161", "n_pass": [117, 8, 8], "n_token": 158, "loss": [0.13684700429439545, 0.18684104084968567], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "list", "==", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 157, "repair_targets": [139], "repair_candidates": [54, 65, 38, 77, 86, 144, 48, 51, 56, 81, 111, 128, 133, 43, 47, 71, 5, 11, 32, 34, 59, 88, 97, 104, 113, 141, 157, 139, 22, 2, 17, 45, 120]}}
{"prediction": {"error_location": 0.8721036314964294, "repair_targets": [0.8295755982398987], "repair_candidates": [0.004960930906236172, 0.0032215514220297337, 0.0024339656811207533, 0.00015522059402428567, 0.026429129764437675, 0.00028587059932760894, 0.0034372408408671618, 0.0035443406086415052, 0.01931184157729149, 0.0020397952757775784, 0.0015630581183359027, 0.0012588051613420248, 3.766123700188473e-05, 0.022920075803995132, 0.00829449761658907, 0.0064147161319851875, 2.93379052891396e-05, 0.00030964548932388425, 0.00023921993852127343, 9.118354500969872e-05, 0.0010163342813029885, 0.0012471593217924237, 0.007637581322342157, 0.004243794828653336, 0.01184693444520235, 0.001675536041148007, 0.00020017428323626518, 5.540686834137887e-05, 2.3765107471263036e-05, 0.8295755982398987, 1.8057018678518943e-05, 0.03547656536102295, 4.902673026663251e-06], "target_probs": 0.8295755982398987}}


{"result": {"time": "2021-02-21 11:45:04.409823", "n_pass": [121, 9, 9], "n_token": 152, "loss": [0.10692349821329117, 0.16853846609592438], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "=", "[", "]", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 151, "repair_targets": [133], "repair_candidates": [48, 59, 32, 71, 80, 138, 42, 45, 50, 75, 105, 122, 127, 37, 41, 65, 5, 11, 26, 28, 53, 82, 91, 98, 107, 135, 151, 133, 22, 2, 17, 39, 114]}}
{"prediction": {"error_location": 0.8985942006111145, "repair_targets": [0.8448987603187561], "repair_candidates": [0.0035443815868347883, 0.0013737509725615382, 0.0010432404233142734, 0.00035252526868134737, 0.030564887449145317, 0.00030807999428361654, 0.004230156075209379, 0.004499644041061401, 0.01650153659284115, 0.002294874982908368, 0.0011974410153925419, 0.0007534673786722124, 2.8571419534273446e-05, 0.020582977682352066, 0.01018840167671442, 0.005222789943218231, 2.652118928381242e-05, 0.0001468052068958059, 0.00037095468724146485, 6.709012814098969e-05, 0.0010576271452009678, 0.0014771384885534644, 0.005785326473414898, 0.0022091877181082964, 0.010563772171735764, 0.0010940037900581956, 0.00017338509496767074, 4.2597283027134836e-05, 1.699912354524713e-05, 0.8448987603187561, 1.1804586392827332e-05, 0.029367877170443535, 3.4600955132191302e-06], "target_probs": 0.8448987603187561}}


{"result": {"time": "2021-02-21 11:45:04.563872", "n_pass": [194, 10, 10], "n_token": 149, "loss": [0.10073896497488022, 0.1516454815864563], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "[", "0", "]", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 148, "repair_targets": [130], "repair_candidates": [45, 56, 32, 68, 77, 135, 39, 42, 47, 72, 102, 119, 124, 34, 38, 62, 5, 11, 26, 28, 50, 79, 88, 95, 104, 132, 148, 130, 22, 2, 17, 36, 111]}}
{"prediction": {"error_location": 0.9041688442230225, "repair_targets": [0.8592928647994995], "repair_candidates": [0.0037152650766074657, 0.001711526419967413, 0.0010052974103018641, 0.00034859153674915433, 0.02899119444191456, 0.00021454445959534496, 0.002837005304172635, 0.0021893344819545746, 0.014755102805793285, 0.0016985497204586864, 0.0018116515129804611, 0.0009361295960843563, 1.8770495444186963e-05, 0.019943103194236755, 0.006292733829468489, 0.004315170459449291, 2.0498415324254893e-05, 0.00019149576837662607, 0.00013337116979528219, 5.0703933084150776e-05, 0.0009382854332216084, 0.0010008945828303695, 0.0055341110564768314, 0.002158147981390357, 0.00900102686136961, 0.0009169684490188956, 0.00017008758732117712, 3.88536682294216e-05, 1.6326122931786813e-05, 0.8592928647994995, 1.1522027307364624e-05, 0.02973712794482708, 3.671383637993131e-06], "target_probs": 0.8592928647994995}}


{"result": {"time": "2021-02-21 11:45:04.710051", "n_pass": [201, 11, 11], "n_token": 146, "loss": [0.10504584014415741, 0.1782301813364029], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ".", "lower", "(", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 145, "repair_targets": [127], "repair_candidates": [45, 53, 32, 65, 74, 132, 39, 42, 47, 69, 99, 116, 121, 34, 38, 59, 5, 11, 26, 28, 50, 76, 85, 92, 101, 129, 145, 127, 22, 2, 17, 36, 108]}}
{"prediction": {"error_location": 0.9002834558486938, "repair_targets": [0.836749792098999], "repair_candidates": [0.004538963083177805, 0.0018783092964440584, 0.0011460458626970649, 0.0004703318700194359, 0.031577955931425095, 0.00024620097246952355, 0.003505564760416746, 0.002972208894789219, 0.019157273694872856, 0.0022004027850925922, 0.0015322164399549365, 0.0006789884064346552, 1.3494515769707505e-05, 0.03311925753951073, 0.008092641830444336, 0.00044337991857901216, 1.761096245900262e-05, 0.00016156512720044702, 0.00019624512060545385, 5.274234354146756e-05, 0.001107986317947507, 0.0012885808246210217, 0.006423970218747854, 0.0027793755289167166, 0.008999248966574669, 0.0010432139970362186, 0.00020092824706807733, 4.42080527136568e-05, 1.8211856513516977e-05, 0.836749792098999, 1.2939916814502794e-05, 0.029326187446713448, 3.927314992324682e-06], "target_probs": 0.836749792098999}}


{"result": {"time": "2021-02-21 11:45:04.851806", "n_pass": [203, 12, 12], "n_token": 143, "loss": [0.10319668799638748, 0.1769888550043106], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", ")", "]", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 142, "repair_targets": [124], "repair_candidates": [45, 53, 32, 62, 71, 129, 39, 42, 47, 66, 96, 113, 118, 34, 38, 56, 5, 11, 26, 28, 50, 73, 82, 89, 98, 126, 142, 124, 22, 2, 17, 36, 105]}}
{"prediction": {"error_location": 0.9019495844841003, "repair_targets": [0.8377891182899475], "repair_candidates": [0.004290356766432524, 0.0020931526087224483, 0.0012452740920707583, 0.00041707445052452385, 0.031062526628375053, 0.0002779451315291226, 0.003430645912885666, 0.0027184581849724054, 0.015658080577850342, 0.002043873304501176, 0.0018260215874761343, 0.0008397219935432076, 1.9050665287068114e-05, 0.03088741935789585, 0.010457267984747887, 0.0010559901129454374, 0.0005032048211432993, 0.0002163268654840067, 0.00023717453586868942, 6.357839447446167e-05, 0.0012222666991874576, 0.0010007147211581469, 0.007927818223834038, 0.002858396153897047, 0.008671741001307964, 0.0010701840510591865, 0.00018258864292874932, 4.808421363122761e-05, 1.9411627363297157e-05, 0.8377891182899475, 1.335207161901053e-05, 0.029849417507648468, 3.84699524147436e-06], "target_probs": 0.8377891182899475}}


{"result": {"time": "2021-02-21 11:45:04.994194", "n_pass": [205, 13, 13], "n_token": 140, "loss": [0.08929799497127533, 0.1546008288860321], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 139, "repair_targets": [121], "repair_candidates": [45, 53, 32, 59, 68, 126, 39, 42, 47, 63, 93, 110, 115, 34, 38, 56, 5, 11, 26, 28, 50, 70, 79, 86, 95, 123, 139, 121, 22, 2, 17, 36, 102]}}
{"prediction": {"error_location": 0.9145727753639221, "repair_targets": [0.8567571043968201], "repair_candidates": [0.003612653585150838, 0.0016828919760882854, 0.0010140095837414265, 0.00034824368776753545, 0.025462979450821877, 0.0002255420695291832, 0.002872039331123233, 0.0024123480543494225, 0.0121238324791193, 0.0017528511816635728, 0.001256060553714633, 0.0005579600692726672, 1.127800624090014e-05, 0.027933083474636078, 0.009282992221415043, 0.0004579804081004113, 8.410997543251142e-05, 0.00010018012835644186, 0.00010877541353693232, 3.350108090671711e-05, 0.0009129786631092429, 0.0010131406597793102, 0.0074869561940431595, 0.0036087657790631056, 0.008723675273358822, 0.0009909911314025521, 0.00017629323701839894, 4.392015762277879e-05, 1.6917509128688835e-05, 0.8567571043968201, 1.1292502676951699e-05, 0.028921397402882576, 3.176184691255912e-06], "target_probs": 0.8567571043968201}}


{"result": {"time": "2021-02-21 11:45:05.133002", "n_pass": [207, 14, 14], "n_token": 137, "loss": [0.09349951148033142, 0.16920359432697296], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "0", "]", ")", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 136, "repair_targets": [118], "repair_candidates": [45, 53, 32, 59, 65, 123, 39, 42, 47, 60, 90, 107, 112, 34, 38, 56, 5, 11, 26, 28, 50, 67, 76, 83, 92, 120, 136, 118, 22, 2, 17, 36, 99]}}
{"prediction": {"error_location": 0.9107385873794556, "repair_targets": [0.844336986541748], "repair_candidates": [0.004617052618414164, 0.0019211814505979419, 0.001126376329921186, 0.0004525955009739846, 0.030921489000320435, 0.00023287799558602273, 0.0035295789130032063, 0.0021584031637758017, 0.012226596474647522, 0.0025341524742543697, 0.001149868476204574, 0.0005806609988212585, 1.2130230970797129e-05, 0.028552303090691566, 0.00923565961420536, 0.0003127490926999599, 4.292636367608793e-05, 7.42024349165149e-05, 0.00026797986356541514, 0.00011308921239105985, 0.0014718554448336363, 0.0010798039147630334, 0.006718444637954235, 0.0033591187093406916, 0.008595813065767288, 0.0011338706826791167, 0.00018120997992809862, 4.604303467203863e-05, 1.836054252635222e-05, 0.844336986541748, 1.2598369721672498e-05, 0.03298037126660347, 3.6963269849366043e-06], "target_probs": 0.844336986541748}}


{"result": {"time": "2021-02-21 11:45:05.270830", "n_pass": [211, 15, 15], "n_token": 134, "loss": [0.09143098443746567, 0.17091037333011627], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", ")", ":", "len", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 133, "repair_targets": [115], "repair_candidates": [45, 53, 32, 59, 65, 120, 39, 42, 47, 60, 87, 104, 109, 34, 38, 56, 5, 11, 26, 28, 50, 67, 73, 80, 89, 117, 133, 115, 22, 2, 17, 36, 96]}}
{"prediction": {"error_location": 0.9126244783401489, "repair_targets": [0.8428971171379089], "repair_candidates": [0.004033263772726059, 0.0017398013733327389, 0.0010105464607477188, 0.00038509239675477147, 0.028790714219212532, 0.00020410571596585214, 0.003190761199221015, 0.0019128617132082582, 0.011369185522198677, 0.0021207036916166544, 0.00098913733381778, 0.0004913979792036116, 1.0037652828032151e-05, 0.028188182041049004, 0.008447140455245972, 0.000296690413961187, 3.701801324496046e-05, 5.2939907618565485e-05, 0.00017429473518859595, 7.423119677696377e-05, 0.0013039086479693651, 0.0010307847987860441, 0.012993344105780125, 0.00543943839147687, 0.008528336882591248, 0.0010813369881361723, 0.00015933408576529473, 4.015539525425993e-05, 1.6644607967464253e-05, 0.8428971171379089, 1.1766864190576598e-05, 0.03297627717256546, 3.444843741817749e-06], "target_probs": 0.8428971171379089}}


{"result": {"time": "2021-02-21 11:45:05.407651", "n_pass": [212, 16, 16], "n_token": 131, "loss": [0.08788991719484329, 0.17294320464134216], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", ")", "and", "(", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 130, "repair_targets": [112], "repair_candidates": [45, 53, 32, 59, 65, 117, 39, 42, 47, 60, 84, 101, 106, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 77, 86, 114, 130, 112, 22, 2, 17, 36, 93]}}
{"prediction": {"error_location": 0.9158616662025452, "repair_targets": [0.8411853909492493], "repair_candidates": [0.0042225634679198265, 0.0018762287218123674, 0.0010935415048152208, 0.0004083180974703282, 0.030990682542324066, 0.0002192011015722528, 0.003418338019400835, 0.0020287400111556053, 0.01230323500931263, 0.002297959290444851, 0.0010739564895629883, 0.0005484549910761416, 1.1221678505535237e-05, 0.02965187095105648, 0.009011034853756428, 0.0003253716859035194, 4.093503230251372e-05, 6.241174560273066e-05, 0.00017059875244740397, 7.81068520154804e-05, 0.0008839464280754328, 0.0005191536038182676, 0.01034335233271122, 0.0037402601446956396, 0.00908869318664074, 0.0009360173717141151, 0.00013252784265205264, 3.967903830925934e-05, 1.6447280358988792e-05, 0.8411853909492493, 1.1785376955231186e-05, 0.03326641768217087, 3.515419848554302e-06], "target_probs": 0.8411853909492493}}


{"result": {"time": "2021-02-21 11:45:05.540882", "n_pass": [214, 17, 17], "n_token": 128, "loss": [0.07870487123727798, 0.14517825841903687], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "0", "]", ")", ")", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 127, "repair_targets": [109], "repair_candidates": [45, 53, 32, 59, 65, 114, 39, 42, 47, 60, 81, 98, 103, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 83, 111, 127, 109, 22, 2, 17, 36, 90]}}
{"prediction": {"error_location": 0.9243125915527344, "repair_targets": [0.8648681044578552], "repair_candidates": [0.003628804348409176, 0.0015849322080612183, 0.0009138647001236677, 0.000342239422025159, 0.026358528062701225, 0.00018410879420116544, 0.002875317819416523, 0.0016729127382859588, 0.010201516561210155, 0.0019124395912513137, 0.0008789431303739548, 0.00044233904918655753, 9.133549610851333e-06, 0.025357162579894066, 0.007565573323518038, 0.0002569245989434421, 3.2153649954125285e-05, 5.79721963731572e-05, 0.00017400227079633623, 8.939410327002406e-05, 0.0009690635488368571, 0.0006261486560106277, 0.00618444150313735, 0.0014162430306896567, 0.009443389251828194, 0.0007117307977750897, 0.00011329641711199656, 3.4902794141089544e-05, 1.4981213098508306e-05, 0.8648681044578552, 1.010228425002424e-05, 0.031066127121448517, 3.094524345215177e-06], "target_probs": 0.8648681044578552}}


{"result": {"time": "2021-02-21 11:45:05.672836", "n_pass": [216, 18, 18], "n_token": 124, "loss": [0.06967319548130035, 0.12607111036777496], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "[", "0", "]", ".", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 123, "repair_targets": [105], "repair_candidates": [45, 53, 32, 59, 65, 110, 39, 42, 47, 60, 77, 94, 99, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 107, 123, 105, 22, 2, 17, 36, 86]}}
{"prediction": {"error_location": 0.9326986074447632, "repair_targets": [0.8815521597862244], "repair_candidates": [0.003598087467253208, 0.0015021534636616707, 0.0008585385512560606, 0.0003226912231184542, 0.024784671142697334, 0.00016668530588503927, 0.002669466193765402, 0.0015048892237246037, 0.008944321423768997, 0.0019373784307390451, 0.0007623291458003223, 0.0004319992440287024, 9.83740119409049e-06, 0.023123575374484062, 0.005981299560517073, 0.000330806098645553, 3.9938982808962464e-05, 8.036986400838941e-05, 0.00022553787857759744, 8.106690074782819e-05, 0.0007754947291687131, 0.0007242592982947826, 0.004479995463043451, 0.0005414220504462719, 0.00391633715480566, 0.0012196870520710945, 0.00011005401756847277, 3.911460589733906e-05, 1.6750715076341294e-05, 0.8815521597862244, 9.827405847318005e-06, 0.029256289824843407, 2.8801377993659116e-06], "target_probs": 0.8815521597862244}}


{"result": {"time": "2021-02-21 11:45:05.802215", "n_pass": [218, 19, 19], "n_token": 120, "loss": [0.060708653181791306, 0.09342751652002335], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "_environ_name", ")", "#NEWLINE#", "if", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 119, "repair_targets": [101], "repair_candidates": [45, 53, 32, 59, 65, 106, 39, 42, 47, 60, 77, 90, 95, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 103, 119, 101, 22, 2, 17, 36, 82]}}
{"prediction": {"error_location": 0.9410972595214844, "repair_targets": [0.910804033279419], "repair_candidates": [0.0022596477065235376, 0.0010068046394735575, 0.0005865100538358092, 0.00021438408293761313, 0.016149112954735756, 0.0001151149845100008, 0.0017816188046708703, 0.0009667034610174596, 0.005513783544301987, 0.0013715105596929789, 0.0005582695594057441, 0.00037615137989632785, 9.004756066133268e-06, 0.013172493316233158, 0.003873843466863036, 0.00016365711053367704, 2.79675550700631e-05, 5.424434129963629e-05, 0.00021663992083631456, 0.0001075441250577569, 0.0008325187372975051, 0.0009098215959966183, 0.0044308132492005825, 0.0003043570904992521, 0.015918869525194168, 1.976307248696685e-05, 0.0001244868035428226, 2.9576243832707405e-05, 1.4140769053483382e-05, 0.910804033279419, 5.985146344755776e-06, 0.018078729510307312, 1.7962717038244591e-06], "target_probs": 0.910804033279419}}


{"result": {"time": "2021-02-21 11:45:05.928309", "n_pass": [220, 20, 20], "n_token": 116, "loss": [0.06264067441225052, 0.08086296916007996], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", ",", ")", "#NEWLINE#", "#UNINDENT#", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 115, "repair_targets": [97], "repair_candidates": [45, 53, 32, 59, 65, 102, 39, 42, 47, 60, 77, 86, 91, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 99, 115, 97, 22, 2, 17, 36, 82]}}
{"prediction": {"error_location": 0.9392810463905334, "repair_targets": [0.9223200678825378], "repair_candidates": [0.003171783173456788, 0.001040178001858294, 0.0005948727484792471, 0.00030998190050013363, 0.016886888071894646, 0.00012130097456974909, 0.001909004058688879, 0.0010923680383712053, 0.004327733069658279, 0.0023638629354536533, 0.0006345949950627983, 0.00038888672133907676, 8.050690667005256e-06, 0.01608079858124256, 0.006050037685781717, 0.00028454221319407225, 5.0752445531543344e-05, 7.000652112765238e-05, 0.00023615127429366112, 0.00011485498544061556, 0.00108452164568007, 0.0007948912098072469, 0.002682291204109788, 0.00021660148922819644, 0.005197528749704361, 2.7866433811141178e-05, 5.1396069466136396e-05, 1.1838367754535284e-05, 7.694767191424035e-06, 0.9223200678825378, 4.023317160317674e-06, 0.011862920597195625, 1.693817807790765e-06], "target_probs": 0.9223200678825378}}


{"result": {"time": "2021-02-21 11:45:06.049968", "n_pass": [223, 21, 21], "n_token": 112, "loss": [0.5380960702896118, 0.04266848415136337], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "in", "(", "dict", ",", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 111, "repair_targets": [93], "repair_candidates": [45, 53, 32, 59, 65, 98, 39, 42, 47, 60, 77, 86, 91, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 95, 111, 93, 22, 2, 17, 36, 82]}}
{"prediction": {"error_location": 0.5838587880134583, "repair_targets": [0.9582290053367615], "repair_candidates": [0.0017043274128809571, 0.000542408146429807, 0.00030419128597714007, 0.00014984997687861323, 0.008166046813130379, 5.9301211877027526e-05, 0.0009143440402112901, 0.0006080058519728482, 0.002715278184041381, 0.0012024270836263895, 0.00031383297755382955, 0.000134972739033401, 4.238614565110765e-06, 0.009930241852998734, 0.0035807969979941845, 0.00018212938448414207, 2.475999281159602e-05, 2.8063252102583647e-05, 0.00011679067392833531, 6.194152956595644e-05, 0.0008399427169933915, 0.0006501672905869782, 0.0018709040014073253, 0.00016060970665421337, 0.0038861639332026243, 2.8433774787117727e-05, 4.5708849938819185e-05, 6.420333647838561e-06, 3.412399564695079e-06, 0.9582290053367615, 2.4176038095902186e-06, 0.003531443187966943, 1.4310569440567633e-06], "target_probs": 0.9582290053367615}}


{"result": {"time": "2021-02-21 11:45:06.169546", "n_pass": [226, 22, 22], "n_token": 108, "loss": [0.927548885345459, 0.07179471850395203], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "list", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 107, "repair_targets": [93], "repair_candidates": [45, 53, 32, 59, 65, 98, 39, 42, 47, 60, 77, 86, 91, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 95, 107, 93, 22, 2, 17, 36, 82]}}
{"prediction": {"error_location": 0.39552199840545654, "repair_targets": [0.9307219386100769], "repair_candidates": [0.0035399585030972958, 0.000958052056375891, 0.0005742898210883141, 0.0002731604326982051, 0.012824414297938347, 9.386667079525068e-05, 0.0017286241054534912, 0.0011287007946521044, 0.0052020554430782795, 0.001835686038248241, 0.0005538086406886578, 0.0002917680540122092, 7.9983374234871e-06, 0.01896951161324978, 0.006082514766603708, 0.0002770110440906137, 3.0494225939037278e-05, 4.528075078269467e-05, 0.00021738160285167396, 0.00012244776007719338, 0.0018053925596177578, 0.0011670399690046906, 0.002513670362532139, 0.00020901476091239601, 0.007748068775981665, 3.7659614463336766e-05, 7.13686749804765e-05, 7.799543709552381e-06, 5.12254518980626e-06, 0.9307219386100769, 2.915877985287807e-06, 0.0009499602019786835, 2.967156433442142e-06], "target_probs": 0.9307219386100769}}


{"result": {"time": "2021-02-21 11:45:06.286237", "n_pass": [227, 23, 23], "n_token": 104, "loss": [0.7057365775108337, 0.06270615756511688], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "\"\\n        find/construct field-value(s) for the given header\\n\\n        Resolution is done according to the following arguments:\\n\\n        - If only keyword arguments are given, then this is equivalent\\n          to ``compose(**kwargs)``.\\n\\n        - If the first (and only) argument is a dict, it is assumed\\n          to be a WSGI ``environ`` and the result of the corresponding\\n          ``HTTP_`` entry is returned.\\n\\n        - If the first (and only) argument is a list, it is assumed\\n          to be a WSGI ``response_headers`` and the field-value(s)\\n          for this header are collected and returned.\\n\\n        - In all other cases, the arguments are collected, checked that\\n          they are string values, possibly verified by the header's\\n          logic, and returned.\\n\\n        At this time it is an error to provide keyword arguments if args\\n        is present (this might change).  It is an error to provide both\\n        a WSGI object and also string arguments.  If no arguments are\\n        provided, then ``compose()`` is called to provide a default\\n        value for the header; if there is not default it is an error.\\n        \"", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 103, "repair_targets": [93], "repair_candidates": [45, 53, 32, 59, 65, 98, 39, 42, 47, 60, 77, 86, 91, 34, 38, 56, 5, 11, 26, 28, 50, 67, 70, 74, 79, 95, 103, 93, 22, 2, 17, 36, 82]}}
{"prediction": {"error_location": 0.49374476075172424, "repair_targets": [0.9392194151878357], "repair_candidates": [0.0025805558543652296, 0.0009936148999258876, 0.0006097714067436755, 0.00025783851742744446, 0.00989389605820179, 0.00010489986016182229, 0.00148810725659132, 0.0010230537736788392, 0.004605479072779417, 0.001699513173662126, 0.0006496949936263263, 0.00032359937904402614, 8.247857294918504e-06, 0.019229089841246605, 0.006117068696767092, 0.00022724653535988182, 2.8225849746377207e-05, 4.6348010073415935e-05, 0.00020975798543076962, 0.0001236631942447275, 0.0014543605502694845, 0.0009424637537449598, 0.0019315090030431747, 0.0001561639946885407, 0.005920526571571827, 2.4362387193832546e-05, 8.547701872885227e-05, 4.598739451466827e-06, 6.308756383077707e-06, 0.9392194151878357, 1.8383196902505006e-06, 2.9534854547819123e-05, 3.901842319464777e-06], "target_probs": 0.9392194151878357}}


{"result": {"time": "2021-02-21 11:45:06.404265", "n_pass": [231, 24, 24], "n_token": 101, "loss": [0.7548247575759888, 0.05876128748059273], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "*", "args", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 100, "repair_targets": [90], "repair_candidates": [42, 50, 29, 56, 62, 95, 36, 39, 44, 57, 74, 83, 88, 31, 35, 53, 5, 8, 23, 25, 47, 64, 67, 71, 76, 92, 100, 90, 19, 2, 14, 33, 79]}}
{"prediction": {"error_location": 0.4700930416584015, "repair_targets": [0.9429318308830261], "repair_candidates": [0.003396660555154085, 0.0001017683171085082, 0.0003858617856167257, 0.00032886891858652234, 0.009307170286774635, 7.236192323034629e-05, 0.0010579966474324465, 0.0009607910760678351, 0.003508563619107008, 0.0019176863133907318, 0.0004889645497314632, 0.00030387798324227333, 6.5034491854021326e-06, 0.01902623474597931, 0.00643145339563489, 0.00023125932784751058, 2.7332405807101168e-05, 4.2577445128699765e-05, 0.0001960820227395743, 0.00011067113518947735, 0.0014966395683586597, 0.0009685916593298316, 0.0014103748835623264, 0.00016785737534519285, 0.0049669682048261166, 2.087042412313167e-05, 9.495652193436399e-05, 4.816406999452738e-06, 5.423744369181804e-06, 0.9429318308830261, 1.7054073850886198e-06, 2.4660932467668317e-05, 2.657438699316117e-06], "target_probs": 0.9429318308830261}}


{"result": {"time": "2021-02-21 11:45:06.753488", "n_pass": [325, 27, 25], "n_token": 100, "loss": [0.7429102659225464, 0.06591714918613434], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 99, "repair_targets": [89], "repair_candidates": [41, 49, 28, 55, 61, 94, 35, 38, 43, 56, 73, 82, 87, 30, 34, 52, 4, 7, 22, 24, 46, 63, 66, 70, 75, 91, 99, 89, 18, 2, 13, 32, 78]}}
{"prediction": {"error_location": 0.47572746872901917, "repair_targets": [0.9362084269523621], "repair_candidates": [0.0023612556979060173, 0.00035498657962307334, 0.000360072182957083, 0.0004179803072474897, 0.011964771896600723, 9.027380292536691e-05, 0.0017714840359985828, 0.0012114158598706126, 0.004482367541640997, 0.0021891591604799032, 0.0005551243084482849, 0.0002911943302024156, 8.209962288674433e-06, 0.020184384658932686, 0.006160479038953781, 0.00031011871760711074, 3.8145641156006604e-05, 4.383365376270376e-05, 0.0002221342147095129, 0.00012254367175046355, 0.0018199593760073185, 0.0010221990523859859, 0.0017665501218289137, 0.00015556465950794518, 0.0057226731441915035, 2.1171093976590782e-05, 0.00010367022332502529, 4.106329924979946e-06, 5.069252438261174e-06, 0.9362084269523621, 1.6706947008060524e-06, 2.611495256132912e-05, 2.841527248165221e-06], "target_probs": 0.9362084269523621}}


{"result": {"time": "2021-02-21 11:45:06.868350", "n_pass": [327, 28, 26], "n_token": 99, "loss": [0.8253030180931091, 0.1005462259054184], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 98, "repair_targets": [88], "repair_candidates": [40, 48, 27, 54, 60, 93, 34, 37, 42, 55, 72, 81, 86, 29, 33, 51, 4, 6, 21, 23, 45, 62, 65, 69, 74, 90, 98, 88, 17, 2, 12, 31, 77]}}
{"prediction": {"error_location": 0.43810221552848816, "repair_targets": [0.90434330701828], "repair_candidates": [0.0011824258835986257, 0.0017358670011162758, 0.0017904150299727917, 0.0002939195546787232, 0.01097674760967493, 0.00012317988148424774, 0.0008387367124669254, 0.00178889452945441, 0.009483312256634235, 0.002470421837642789, 0.0009113583364523947, 0.00031364444294013083, 6.089120688557159e-06, 0.031067823991179466, 0.011297711171209812, 0.00026640750002115965, 3.203661253792234e-05, 5.65851732972078e-05, 0.00037022223114036024, 0.0002118711854564026, 0.003350940067321062, 0.002244400093331933, 0.003637095680460334, 0.00027190762921236455, 0.010671154595911503, 4.358063233667053e-05, 0.00014368646952789277, 7.390313385258196e-06, 8.034873644646723e-06, 0.90434330701828, 2.372294602537295e-06, 5.345174577087164e-05, 4.934987373417243e-06], "target_probs": 0.90434330701828}}


{"result": {"time": "2021-02-21 11:45:07.097672", "n_pass": [330, 30, 27], "n_token": 98, "loss": [0.7682639956474304, 0.082947738468647], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 97, "repair_targets": [87], "repair_candidates": [39, 47, 26, 53, 59, 92, 33, 36, 41, 54, 71, 80, 85, 28, 32, 50, 4, 6, 20, 22, 44, 61, 64, 68, 73, 89, 97, 87, 16, 2, 11, 30, 76]}}
{"prediction": {"error_location": 0.4638175964355469, "repair_targets": [0.9203992486000061], "repair_candidates": [0.0016381153836846352, 0.0010349975200369954, 0.0012950361706316471, 0.000258683372521773, 0.009982200339436531, 0.00012117159349145368, 0.0009492278331890702, 0.0014355996390804648, 0.006760117132216692, 0.002718912670388818, 0.0006459514261223376, 0.00033137196442112327, 6.8214517341402825e-06, 0.02834060601890087, 0.008526365272700787, 0.0004005851806141436, 4.739096766570583e-05, 5.9778532886411995e-05, 0.00027919490821659565, 0.0001577867951709777, 0.002390509471297264, 0.001835048315115273, 0.002497961977496743, 0.00022993714082986116, 0.007467227056622505, 3.2950087188510224e-05, 0.00010415315045975149, 5.883095582248643e-06, 6.036230843164958e-06, 0.9203992486000061, 2.342346306249965e-06, 3.543351704138331e-05, 3.4274319204996573e-06], "target_probs": 0.9203992486000061}}


{"result": {"time": "2021-02-21 11:45:07.211963", "n_pass": [331, 31, 28], "n_token": 97, "loss": [0.8205806016921997, 0.09085758775472641], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "#INDENT#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 96, "repair_targets": [86], "repair_candidates": [38, 46, 25, 52, 58, 91, 32, 35, 40, 53, 70, 79, 84, 27, 31, 49, 4, 6, 19, 21, 43, 60, 63, 67, 72, 88, 96, 86, 15, 2, 10, 29, 75]}}
{"prediction": {"error_location": 0.4401760399341583, "repair_targets": [0.9131477475166321], "repair_candidates": [0.0021222755312919617, 0.0019106802064925432, 0.0009940745076164603, 0.00012452274677343667, 0.016838882118463516, 9.093395055970177e-05, 0.001139537780545652, 0.001827362459152937, 0.008201236836612225, 0.0023011493030935526, 0.0005417249631136656, 0.00034103242796845734, 1.0341452252760064e-05, 0.027578722685575485, 0.006968811620026827, 0.0005269847461022437, 7.397482841042802e-05, 7.364702469203621e-05, 0.0002522753202356398, 0.00016499951016157866, 0.0023947192821651697, 0.0016918046167120337, 0.002513393759727478, 0.00018927626661024988, 0.0077654640190303326, 3.158608160447329e-05, 0.00011896510841324925, 7.707331860729028e-06, 7.215188816189766e-06, 0.9131477475166321, 2.9345076200115727e-06, 4.178278686595149e-05, 4.222363259032136e-06], "target_probs": 0.9131477475166321}}


{"result": {"time": "2021-02-21 11:45:07.439129", "n_pass": [333, 33, 29], "n_token": 96, "loss": [0.8132462501525879, 0.09509872645139694], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "return", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 95, "repair_targets": [85], "repair_candidates": [37, 45, 24, 51, 57, 90, 31, 34, 39, 52, 69, 78, 83, 26, 30, 48, 4, 6, 18, 20, 42, 59, 62, 66, 71, 87, 95, 85, 14, 2, 9, 28, 74]}}
{"prediction": {"error_location": 0.4434162974357605, "repair_targets": [0.9092831611633301], "repair_candidates": [0.0022109688725322485, 0.002516886917874217, 0.0015134980203583837, 9.534558193990961e-05, 0.020055649802088737, 0.0001136068458436057, 0.0013435186119750142, 0.0021630674600601196, 0.008082871325314045, 0.002040114952251315, 0.0006593955331481993, 0.0002903543645516038, 9.983315976569429e-06, 0.026699254289269447, 0.007783642504364252, 0.0006112644914537668, 7.732881931588054e-05, 8.127156615955755e-05, 0.00025532013387419283, 0.00014695760910399258, 0.002267377218231559, 0.001565137761645019, 0.0024316092021763325, 0.00022827262000646442, 0.007245227694511414, 4.2084313463419676e-05, 0.00012257872731424868, 7.927409569674637e-06, 7.305817234737333e-06, 0.9092831611633301, 2.814551635310636e-06, 4.120217636227608e-05, 5.011794200981967e-06], "target_probs": 0.9092831611633301}}


{"result": {"time": "2021-02-21 11:45:07.551460", "n_pass": [334, 34, 30], "n_token": 95, "loss": [0.754313588142395, 0.09364473819732666], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", ".", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 94, "repair_targets": [84], "repair_candidates": [36, 44, 23, 50, 56, 89, 30, 33, 38, 51, 68, 77, 82, 25, 29, 47, 4, 6, 17, 19, 41, 58, 61, 65, 70, 86, 94, 84, 13, 2, 8, 27, 73]}}
{"prediction": {"error_location": 0.47033336758613586, "repair_targets": [0.9106062054634094], "repair_candidates": [0.0013169115409255028, 0.0015342463739216328, 0.0010082090739160776, 8.149148925440386e-05, 0.025382131338119507, 0.00011034990893676877, 0.001034444198012352, 0.0016340488800778985, 0.006782455835491419, 0.00197103270329535, 0.0006356957601383328, 0.00035193967050872743, 1.0899072549364064e-05, 0.02640761062502861, 0.008418184705078602, 0.0004381252801977098, 6.307409057626501e-05, 7.42182310204953e-05, 0.0002536935789976269, 0.0001347907818853855, 0.0019609418231993914, 0.0014390001306310296, 0.0021638094913214445, 0.00020236616546753794, 0.005779603961855173, 3.1769261113367975e-05, 0.00012362540292087942, 7.073727829265408e-06, 5.6484141168766655e-06, 0.9106062054634094, 2.0764159671671223e-06, 3.0783688998781145e-05, 3.547838332451647e-06], "target_probs": 0.9106062054634094}}


{"result": {"time": "2021-02-21 11:45:07.664107", "n_pass": [336, 35, 31], "n_token": 94, "loss": [0.8767337799072266, 0.08363455533981323], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "compose", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 93, "repair_targets": [83], "repair_candidates": [35, 43, 22, 49, 55, 88, 29, 32, 37, 50, 67, 76, 81, 24, 28, 46, 4, 6, 16, 18, 40, 57, 60, 64, 69, 85, 93, 83, 12, 2, 8, 26, 72]}}
{"prediction": {"error_location": 0.4161399006843567, "repair_targets": [0.9197673201560974], "repair_candidates": [0.0018694992177188396, 0.0012518231524154544, 0.0004220982373226434, 0.0005880031967535615, 0.021953046321868896, 0.00010864255455089733, 0.0005692376289516687, 0.0017830756260082126, 0.00798079464584589, 0.0019234842620790005, 0.0004771607636939734, 0.00024215334269683808, 1.0354952792113181e-05, 0.023591937497258186, 0.006319924257695675, 0.00041273972601629794, 8.024738781386986e-05, 9.633039007894695e-05, 0.0002554818638600409, 0.00013681664131581783, 0.0015899116406217217, 0.0012508599320426583, 0.0018278902862221003, 0.00018225864914711565, 0.005102428607642651, 2.4480865249643102e-05, 0.00013232741912361234, 7.043177447485505e-06, 5.810314178233966e-06, 0.9197673201560974, 2.4681023660377832e-06, 3.0533483368344605e-05, 3.844809725706e-06], "target_probs": 0.9197673201560974}}


{"result": {"time": "2021-02-21 11:45:07.778110", "n_pass": [337, 36, 32], "n_token": 93, "loss": [0.7868738770484924, 0.06635265797376633], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "(", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 92, "repair_targets": [82], "repair_candidates": [34, 42, 21, 48, 54, 87, 28, 31, 36, 49, 66, 75, 80, 23, 27, 45, 4, 6, 15, 17, 39, 56, 59, 63, 68, 84, 92, 82, 11, 2, 8, 25, 71]}}
{"prediction": {"error_location": 0.4552657902240753, "repair_targets": [0.9358007907867432], "repair_candidates": [0.004238096997141838, 0.0013097322080284357, 0.0005528278416022658, 0.00011509557225508615, 0.01121557131409645, 8.71122392709367e-05, 0.0003992785350419581, 0.0015550057869404554, 0.007108395453542471, 0.001155116013251245, 0.00041771784890443087, 0.00022270042973104864, 5.88480224905652e-06, 0.017695225775241852, 0.006573319900780916, 0.0003071088867727667, 5.0951675802934915e-05, 7.022397767286748e-05, 0.00026841211365535855, 0.00014133671356830746, 0.0016321595758199692, 0.0013761657755821943, 0.0019462105119600892, 0.00018420041305944324, 0.005356178618967533, 2.6012005037046038e-05, 0.00014477634977083653, 6.363025022437796e-06, 6.283222319325432e-06, 0.9358007907867432, 1.9391866317164386e-06, 2.6362135031376965e-05, 3.4146760299336165e-06], "target_probs": 0.9358007907867432}}


{"result": {"time": "2021-02-21 11:45:07.889489", "n_pass": [338, 37, 33], "n_token": 92, "loss": [0.9401106238365173, 0.0475931279361248], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "**", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 91, "repair_targets": [81], "repair_candidates": [33, 41, 20, 47, 53, 86, 27, 30, 35, 48, 65, 74, 79, 22, 26, 44, 4, 6, 14, 16, 38, 55, 58, 62, 67, 83, 91, 81, 10, 2, 8, 24, 70]}}
{"prediction": {"error_location": 0.3905846178531647, "repair_targets": [0.9535216689109802], "repair_candidates": [0.0012259308714419603, 0.0010514812311157584, 0.00019963095837738365, 0.0040658279322087765, 0.005213533993810415, 3.1817246053833514e-05, 0.00011074617214035243, 0.0018604652723297477, 0.004263589158654213, 0.001670581172220409, 0.0002508663455955684, 0.00011597193224588409, 6.165813829284161e-06, 0.015035088174045086, 0.0031935381703078747, 0.0004240932175889611, 8.460874232696369e-05, 8.200170123018324e-05, 0.00022511501447297633, 0.00012203405640320852, 0.0014379221247509122, 0.0007984982803463936, 0.0013366356724873185, 0.00013994007895234972, 0.0032988511957228184, 1.8443988665239885e-05, 0.00017522346752230078, 5.702482667402364e-06, 6.583829872397473e-06, 0.9535216689109802, 3.0659350613859715e-06, 2.109938213834539e-05, 3.2559080409555463e-06], "target_probs": 0.9535216689109802}}


{"result": {"time": "2021-02-21 11:45:08.000509", "n_pass": [339, 38, 34], "n_token": 91, "loss": [0.8259643912315369, 0.03920220583677292], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", ")", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 90, "repair_targets": [80], "repair_candidates": [32, 40, 19, 46, 52, 85, 26, 29, 34, 47, 64, 73, 78, 21, 25, 43, 4, 6, 13, 15, 37, 54, 57, 61, 66, 82, 90, 80, 9, 2, 8, 23, 69]}}
{"prediction": {"error_location": 0.4378126263618469, "repair_targets": [0.9615562558174133], "repair_candidates": [0.004043724853545427, 0.0014365172246471047, 0.00024374524946324527, 0.0015834863297641277, 0.0011579598067328334, 3.260911034885794e-05, 0.0003407663316465914, 0.0012377843959257007, 0.004178066272288561, 0.0015517988940700889, 0.00024128811492118984, 0.00012234128371346742, 8.504672223352827e-06, 0.011342457495629787, 0.002126431791111827, 0.0004165027057752013, 8.081253326963633e-05, 8.234396227635443e-05, 0.00023609082563780248, 0.00013252539793029428, 0.0013349865330383182, 0.0010075517930090427, 0.0012626886600628495, 0.00017418224888388067, 0.00380336563102901, 2.306106580363121e-05, 0.0001980739034479484, 6.714776191074634e-06, 8.292178790725302e-06, 0.9615562558174133, 2.5589433789718896e-06, 2.3020456865197048e-05, 3.456121248746058e-06], "target_probs": 0.9615562558174133}}


{"result": {"time": "2021-02-21 11:45:08.111459", "n_pass": [341, 39, 35], "n_token": 90, "loss": [0.7634939551353455, 0.04209352284669876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "type", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 89, "repair_targets": [79], "repair_candidates": [31, 39, 18, 45, 51, 84, 25, 28, 33, 46, 63, 72, 77, 20, 24, 42, 4, 6, 12, 14, 36, 53, 56, 60, 65, 81, 89, 79, 9, 2, 8, 22, 68]}}
{"prediction": {"error_location": 0.4660353362560272, "repair_targets": [0.9587801098823547], "repair_candidates": [0.006272375117987394, 0.0009297756478190422, 0.0001846264785854146, 0.0009796003578230739, 0.000623172614723444, 3.6889287002850324e-05, 0.00048540878924541175, 0.0013661031844094396, 0.004876850172877312, 0.0012400929117575288, 0.00030176129075698555, 0.0001950477308128029, 9.237056474376004e-06, 0.012433524243533611, 0.002562172943726182, 0.00041190494084730744, 8.652277756482363e-05, 8.039821841521189e-05, 0.0002496362430974841, 0.0001491746661486104, 0.0014073611237108707, 0.0009617985342629254, 0.0011325468076393008, 0.00017867275164462626, 0.0038435214664787054, 2.143399433407467e-05, 0.0001590499305166304, 5.6175972531491425e-06, 7.017565167188877e-06, 0.9587801098823547, 2.1275457129377173e-06, 2.286367816850543e-05, 3.5431396554486128e-06], "target_probs": 0.9587801098823547}}


{"result": {"time": "2021-02-21 11:45:08.223172", "n_pass": [342, 40, 36], "n_token": 89, "loss": [0.9016400575637817, 0.04995836317539215], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", ")", "#NEWLINE#", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 88, "repair_targets": [78], "repair_candidates": [30, 38, 17, 44, 50, 83, 24, 27, 32, 45, 62, 71, 76, 19, 23, 41, 4, 6, 11, 13, 35, 52, 55, 59, 64, 80, 88, 78, 9, 2, 8, 21, 67]}}
{"prediction": {"error_location": 0.4059034287929535, "repair_targets": [0.9512690305709839], "repair_candidates": [0.0061818454414606094, 0.001070145983248949, 0.00039145018672570586, 0.000987393781542778, 0.0004041102365590632, 4.2698768083937466e-05, 0.0008206118945963681, 0.0021549935918301344, 0.006076745688915253, 0.0019433628767728806, 0.0004414284776430577, 0.0004086965636815876, 1.4986591850174591e-05, 0.015411504544317722, 0.003714974969625473, 0.0005191800883039832, 8.916288061300293e-05, 0.00010500666394364089, 0.0003047914942726493, 0.00017728505190461874, 0.0015559502644464374, 0.0008323125075548887, 0.0014092817436903715, 0.00015089497901499271, 0.003331703832373023, 2.392430542386137e-05, 0.00012235403119120747, 6.712127742503071e-06, 6.901952019688906e-06, 0.9512690305709839, 2.6195957616437227e-06, 2.4428065444226377e-05, 3.634400172813912e-06], "target_probs": 0.9512690305709839}}


{"result": {"time": "2021-02-21 11:45:08.440746", "n_pass": [346, 42, 37], "n_token": 87, "loss": [0.7219101786613464, 0.038944311439991], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "in", "[", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 86, "repair_targets": [76], "repair_candidates": [28, 36, 15, 42, 48, 81, 22, 25, 30, 43, 60, 69, 74, 17, 21, 39, 4, 6, 11, 13, 33, 50, 53, 57, 62, 78, 86, 76, 9, 2, 8, 19, 65]}}
{"prediction": {"error_location": 0.4858234226703644, "repair_targets": [0.9618042707443237], "repair_candidates": [0.0024796684738248587, 0.0005594491958618164, 0.00022154714679345489, 0.00048485439037904143, 0.00025779084535315633, 4.012112185591832e-05, 0.0009222921798937023, 0.0004894913290627301, 0.008332899771630764, 0.002508800942450762, 0.00026567865279503167, 0.00016145329573191702, 6.167695119074779e-06, 0.010905777104198933, 0.0023613853845745325, 0.0001995397760765627, 4.2478273826418445e-05, 5.450854587252252e-05, 0.0002314825396751985, 0.000145437938044779, 0.0014693874400109053, 0.0009338048403151333, 0.0010300124995410442, 9.625162783777341e-05, 0.0038391663692891598, 1.6402482287958264e-05, 0.00010719984857132658, 4.587911462294869e-06, 4.844072009291267e-06, 0.9618042707443237, 1.4456605867962935e-06, 1.9213897758163512e-05, 2.4665425826242426e-06], "target_probs": 0.9618042707443237}}


{"result": {"time": "2021-02-21 11:45:08.550733", "n_pass": [351, 43, 38], "n_token": 85, "loss": [0.6143020391464233, 0.021145371720194817], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", ")", "in", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 84, "repair_targets": [74], "repair_candidates": [26, 34, 15, 40, 46, 79, 22, 23, 28, 41, 58, 67, 72, 17, 21, 37, 4, 6, 11, 13, 31, 48, 51, 55, 60, 76, 84, 74, 9, 2, 8, 19, 63]}}
{"prediction": {"error_location": 0.5410184264183044, "repair_targets": [0.979076623916626], "repair_candidates": [0.0013893503928557038, 0.00034322356805205345, 0.00013050327834207565, 0.0003056839050259441, 0.00015141039330046624, 1.9742468793992884e-05, 0.0004953652387484908, 0.00018810703477356583, 0.0029476427007466555, 0.00164697109721601, 9.281492384616286e-05, 7.802618347341195e-05, 0.0001335802226094529, 0.0034020671155303717, 0.001063407165929675, 1.629116559342947e-05, 7.81666130933445e-06, 3.6340054066386074e-05, 0.00030284258536994457, 0.00018318161892239004, 0.0024618369061499834, 0.0012273526517674327, 0.0011545342858880758, 9.81904158834368e-05, 0.0029194261878728867, 1.624521246412769e-05, 8.503881690558046e-05, 3.940627721021883e-06, 3.902648586517898e-06, 0.979076623916626, 1.016527107822185e-06, 1.5945608538459055e-05, 1.5364125829364639e-06], "target_probs": 0.979076623916626}}


{"result": {"time": "2021-02-21 11:45:08.657518", "n_pass": [355, 44, 39], "n_token": 83, "loss": [0.5975691676139832, 0.01835349202156067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", ")", "==", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 82, "repair_targets": [72], "repair_candidates": [26, 32, 15, 38, 44, 77, 22, 23, 28, 39, 56, 65, 70, 17, 21, 35, 4, 6, 11, 13, 29, 46, 49, 53, 58, 74, 82, 72, 9, 2, 8, 19, 61]}}
{"prediction": {"error_location": 0.550147294998169, "repair_targets": [0.981813907623291], "repair_candidates": [0.0007848108652979136, 0.00039801723323762417, 0.00016097621119115502, 0.0001896321919048205, 0.00013486298848874867, 2.124506136169657e-05, 0.0004766580241266638, 0.0002625008055474609, 0.0035364581272006035, 0.0007246084860526025, 0.00012804947618860751, 8.706928201718256e-05, 9.075409616343677e-05, 0.0026066049467772245, 0.0004972298047505319, 9.381218114867806e-05, 3.568898682715371e-05, 4.1934243199648336e-05, 0.00031169020803645253, 0.00018003929289989173, 0.0015473802341148257, 0.0010697419056668878, 0.0017208607168868184, 7.590820314362645e-05, 0.0028944455552846193, 1.398670156049775e-05, 7.52621199353598e-05, 3.4200461414002348e-06, 3.5812902297038818e-06, 0.981813907623291, 9.55931454882375e-07, 1.6282072465401143e-05, 1.6106679368022014e-06], "target_probs": 0.981813907623291}}


{"result": {"time": "2021-02-21 11:45:08.763254", "n_pass": [358, 45, 40], "n_token": 81, "loss": [0.6191357970237732, 0.02107572928071022], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 80, "repair_targets": [70], "repair_candidates": [26, 32, 15, 36, 42, 75, 22, 23, 28, 37, 54, 63, 68, 17, 21, 33, 4, 6, 11, 13, 29, 44, 47, 51, 56, 72, 80, 70, 9, 2, 8, 19, 59]}}
{"prediction": {"error_location": 0.5384095311164856, "repair_targets": [0.979144811630249], "repair_candidates": [0.0007835327414795756, 0.00042977952398359776, 0.0001758840517140925, 0.00018713778990786523, 0.00015333856572397053, 2.996921284648124e-05, 0.0005535600939765573, 0.00039459814433939755, 0.0037164671812206507, 0.0007139033987186849, 0.00016710830095689744, 0.0001349940721411258, 0.0001907570695038885, 0.0038109791930764914, 0.000398385978769511, 5.238785161054693e-05, 1.2500331649789587e-05, 6.468925130320713e-05, 0.00026307356893084943, 0.0001496472832513973, 0.0018548971274867654, 0.001400322769768536, 0.002139010699465871, 8.66819973452948e-05, 0.002869662130251527, 1.4985130292188842e-05, 7.899835327407345e-05, 3.838770226138877e-06, 3.941225713788299e-06, 0.979144811630249, 1.018337798086577e-06, 1.721436819934752e-05, 1.7852453311206773e-06], "target_probs": 0.979144811630249}}


{"result": {"time": "2021-02-21 11:45:08.868336", "n_pass": [362, 46, 41], "n_token": 79, "loss": [0.568109393119812, 0.025133300572633743], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "'wsgi.version'", "in", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 78, "repair_targets": [68], "repair_candidates": [26, 32, 15, 36, 40, 73, 22, 23, 28, 37, 52, 61, 66, 17, 21, 33, 4, 6, 11, 13, 29, 42, 45, 49, 54, 70, 78, 68, 9, 2, 8, 19, 57]}}
{"prediction": {"error_location": 0.5665955543518066, "repair_targets": [0.97517991065979], "repair_candidates": [0.0006946423090994358, 0.0004213845531921834, 0.0001673522056080401, 0.00016232108464464545, 0.00013541639782488346, 2.7329557269695215e-05, 0.0004896322498098016, 0.0003259738441556692, 0.00328892283141613, 0.0006421635043807328, 0.00016937352484092116, 0.00011753124272217974, 0.00012215338938403875, 0.002502037677913904, 0.0003866875485982746, 5.459516614791937e-05, 2.0197225239826366e-05, 0.00024372697225771844, 0.004661125130951405, 0.003409210592508316, 5.310732831276255e-06, 0.0011966769816353917, 0.00215357169508934, 6.211105937836692e-05, 0.0032266906928271055, 1.4492348782368936e-05, 9.117143781622872e-05, 5.847580723639112e-06, 4.4431017158785835e-06, 0.97517991065979, 1.0177283229495515e-06, 1.538372816867195e-05, 1.7101965568144806e-06], "target_probs": 0.97517991065979}}


{"result": {"time": "2021-02-21 11:45:09.076535", "n_pass": [367, 48, 42], "n_token": 77, "loss": [0.6424756050109863, 0.021100323647260666], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "get", "(", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 76, "repair_targets": [66], "repair_candidates": [26, 32, 15, 36, 40, 71, 22, 23, 28, 37, 50, 59, 64, 17, 21, 33, 4, 6, 11, 13, 29, 42, 45, 47, 52, 68, 76, 66, 9, 2, 8, 19, 55]}}
{"prediction": {"error_location": 0.5259886980056763, "repair_targets": [0.9791207313537598], "repair_candidates": [0.0007221617270261049, 0.0005508436006493866, 0.00022272326168604195, 0.00018542933685239404, 0.0001687179901637137, 3.431249933782965e-05, 0.0006553702987730503, 0.00043569187982939184, 0.005104318726807833, 0.0007291140500456095, 0.0002448708692099899, 0.0001922420342452824, 0.00023655717086512595, 0.004124235827475786, 0.0006703139515593648, 8.499854448018596e-05, 2.720167140068952e-05, 0.0002442502591293305, 0.0008454036433249712, 0.00039091272628866136, 1.9225337837269763e-06, 0.0003217299818061292, 0.00013504391245078295, 7.884144724812359e-05, 0.004361377563327551, 1.1011105925717857e-05, 6.537569424835965e-05, 7.212077434815001e-06, 4.150919266976416e-06, 0.9791207313537598, 1.1819406608992722e-06, 2.009273157455027e-05, 1.7799840179577586e-06], "target_probs": 0.9791207313537598}}


{"result": {"time": "2021-02-21 11:45:09.179793", "n_pass": [371, 49, 43], "n_token": 75, "loss": [0.7095183730125427, 0.07603149116039276], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "(", "not", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 74, "repair_targets": [64], "repair_candidates": [26, 32, 15, 36, 40, 69, 22, 23, 28, 37, 50, 57, 62, 17, 21, 33, 4, 6, 11, 13, 29, 42, 45, 47, 52, 66, 74, 64, 9, 2, 8, 19, 53]}}
{"prediction": {"error_location": 0.49188104271888733, "repair_targets": [0.9267870187759399], "repair_candidates": [0.002263774164021015, 0.002176236594095826, 0.0008815291803330183, 0.0006583568174391985, 0.0006406555185094476, 0.00013562969979830086, 0.002650499576702714, 0.001747782458551228, 0.02188745141029358, 0.002328959060832858, 0.001057285931892693, 0.0008668234222568572, 0.0007914225570857525, 0.018088236451148987, 0.003113099141046405, 0.00035449006827548146, 0.0001478999765822664, 0.0011624711332842708, 0.00367215764708817, 0.001825643703341484, 6.0304614635242615e-06, 0.001046010642312467, 0.0005341151845641434, 0.0006522337207570672, 0.00406850129365921, 0.0002599168801680207, 6.271270831348374e-05, 1.9491795683279634e-05, 1.0862908311537467e-05, 0.9267870187759399, 4.871596502198372e-06, 8.87914138729684e-05, 9.029049579112325e-06], "target_probs": 0.9267870187759399}}


{"result": {"time": "2021-02-21 11:45:09.281203", "n_pass": [373, 50, 44], "n_token": 73, "loss": [0.8794758915901184, 0.07548575103282928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "#UNINDENT#", "return", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 72, "repair_targets": [62], "repair_candidates": [26, 32, 15, 36, 40, 67, 22, 23, 28, 37, 50, 55, 60, 17, 21, 33, 4, 6, 11, 13, 29, 42, 45, 47, 52, 64, 72, 62, 9, 2, 8, 19, 53]}}
{"prediction": {"error_location": 0.415000319480896, "repair_targets": [0.9272929430007935], "repair_candidates": [0.002290179720148444, 0.0021439928095787764, 0.0008870938327163458, 0.000638347293715924, 0.000623832456767559, 0.0001320433511864394, 0.0025979599449783564, 0.0017077140510082245, 0.020821841433644295, 0.002393517177551985, 0.0014234607806429267, 0.0008513412321917713, 0.0007337665883824229, 0.01514443475753069, 0.002552807331085205, 0.0002749540435615927, 9.996675362344831e-05, 0.0009509070659987628, 0.005813641007989645, 0.0031615300104022026, 6.627034053963143e-06, 0.0017046377761289477, 0.0013850923860445619, 0.0009208617848344147, 0.002224635798484087, 0.0005916626541875303, 0.00020657508866861463, 0.0003171799471601844, 1.5319261365220882e-05, 0.9272929430007935, 4.665151664084988e-06, 7.888819527579471e-05, 7.5818916229764e-06], "target_probs": 0.9272929430007935}}


{"result": {"time": "2021-02-21 11:45:09.383784", "n_pass": [375, 51, 45], "n_token": 71, "loss": [0.7925416827201843, 0.07265432924032211], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 70, "repair_targets": [60], "repair_candidates": [26, 32, 15, 36, 40, 65, 22, 23, 28, 37, 50, 55, 58, 17, 21, 33, 4, 6, 11, 13, 29, 42, 45, 47, 52, 62, 70, 60, 9, 2, 8, 19, 53]}}
{"prediction": {"error_location": 0.4526927173137665, "repair_targets": [0.9299222230911255], "repair_candidates": [0.0024487688206136227, 0.0020862556993961334, 0.0008647284703329206, 0.0006588908145204186, 0.0006242978852242231, 0.00012965177302248776, 0.0024900983553379774, 0.002028056187555194, 0.02007962390780449, 0.0026089081075042486, 0.0013316042022779584, 0.0008533123764209449, 0.0007578028598800302, 0.015272204764187336, 0.0036106975749135017, 0.00032960803946480155, 0.000114906404633075, 0.001051535364240408, 0.004026968032121658, 0.0021610152907669544, 5.096988843433792e-06, 0.0013677034294232726, 0.0008232248364947736, 0.0009172191494144499, 0.0022656081710010767, 0.00047158283996395767, 0.0002736570604611188, 0.0002720336487982422, 6.455981929320842e-05, 0.9299222230911255, 3.2462203307659365e-06, 7.80685295467265e-05, 6.939185823284788e-06], "target_probs": 0.9299222230911255}}


{"result": {"time": "2021-02-21 11:45:09.681401", "n_pass": [383, 54, 46], "n_token": 70, "loss": [0.39816173911094666, 0.057778067886829376], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", ",", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 69, "repair_targets": [59], "repair_candidates": [25, 31, 14, 35, 39, 64, 21, 22, 27, 36, 49, 54, 57, 16, 20, 32, 3, 5, 10, 12, 28, 41, 44, 46, 51, 61, 69, 59, 8, 1, 7, 18, 52]}}
{"prediction": {"error_location": 0.6715534329414368, "repair_targets": [0.9438593983650208], "repair_candidates": [0.001810544403269887, 0.0015662995865568519, 0.0003763842978514731, 0.0006544356583617628, 0.0003546501975506544, 5.776490434072912e-05, 0.0015923056052997708, 0.0011619098950177431, 0.01339214202016592, 0.0018072804668918252, 0.0010822673793882132, 0.0007547342102043331, 0.0006607874529436231, 0.014589302241802216, 0.002697721356526017, 0.0004290463693905622, 0.00013073693844489753, 0.000968540960457176, 0.004128427244722843, 0.002206422621384263, 5.029690328228753e-06, 0.00118949671741575, 0.0010625813156366348, 0.0007533988682553172, 0.0017238884465768933, 0.00033145869383588433, 0.00026159718981944025, 0.0002555616956669837, 5.485849396791309e-05, 0.9438593983650208, 3.06077367895341e-06, 7.220826228149235e-05, 5.828303073940333e-06], "target_probs": 0.9438593983650208}}


{"result": {"time": "2021-02-21 11:45:09.880543", "n_pass": [386, 56, 47], "n_token": 69, "loss": [0.3196903169155121, 0.04842710867524147], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "not", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 68, "repair_targets": [58], "repair_candidates": [24, 30, 13, 34, 38, 63, 20, 21, 26, 35, 48, 53, 56, 15, 19, 31, 2, 4, 9, 11, 27, 40, 43, 45, 50, 60, 68, 58, 7, 1, 6, 17, 51]}}
{"prediction": {"error_location": 0.7263740301132202, "repair_targets": [0.9527267813682556], "repair_candidates": [0.0008488742168992758, 0.0007126714917831123, 0.0005311587592586875, 0.0006048745126463473, 0.0004334786208346486, 7.40542818675749e-05, 0.0014882509130984545, 0.0013127950951457024, 0.00905931368470192, 0.0019472090061753988, 0.000956839241553098, 0.0005754966987296939, 0.0006156128365546465, 0.013558486476540565, 0.0023146613966673613, 0.0003416579857002944, 0.00014106434537097812, 0.0010377406142652035, 0.003847523359581828, 0.0017773444997146726, 5.53986774320947e-06, 0.0008874966879375279, 0.000950971560087055, 0.0006988091627135873, 0.0015854461817070842, 0.0003330951149109751, 0.00023315676662605256, 0.0002406701387371868, 5.689353929483332e-05, 0.9527267813682556, 4.153658665018156e-06, 9.185484668705612e-05, 5.978850822430104e-06], "target_probs": 0.9527267813682556}}


{"result": {"time": "2021-02-21 11:45:09.979791", "n_pass": [388, 57, 48], "n_token": 68, "loss": [0.26457303762435913, 0.06170060113072395], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "#NEWLINE#", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 67, "repair_targets": [57], "repair_candidates": [23, 29, 12, 33, 37, 62, 19, 20, 25, 34, 47, 52, 55, 14, 18, 30, 2, 3, 8, 10, 26, 39, 42, 44, 49, 59, 67, 57, 6, 1, 5, 16, 50]}}
{"prediction": {"error_location": 0.7675336599349976, "repair_targets": [0.94016432762146], "repair_candidates": [0.001023525488562882, 0.0033954624086618423, 0.0021843835711479187, 0.00047476767213083804, 0.0004051066644024104, 7.565577834611759e-05, 0.001124669797718525, 0.0011953763896599412, 0.012913293205201626, 0.0026824220549315214, 0.0008063099812716246, 0.0005371863953769207, 0.0005924999713897705, 0.014543618075549603, 0.0029108645394444466, 0.00032086114515550435, 0.00010390386159997433, 0.0010136871132999659, 0.004638728220015764, 0.002597700571641326, 5.591180979536148e-06, 0.0012503082398325205, 0.0009906617924571037, 0.0007088087731972337, 0.0022315008100122213, 0.000397868367144838, 0.00028146847034804523, 0.000282976747257635, 5.709224205929786e-05, 0.94016432762146, 3.2654211281624157e-06, 7.924235978862271e-05, 6.822207978984807e-06], "target_probs": 0.94016432762146}}


{"result": {"time": "2021-02-21 11:45:10.079368", "n_pass": [390, 58, 49], "n_token": 67, "loss": [0.32890450954437256, 0.05450909212231636], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "(", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 66, "repair_targets": [56], "repair_candidates": [22, 28, 11, 32, 36, 61, 18, 19, 24, 33, 46, 51, 54, 13, 17, 29, 2, 3, 7, 9, 25, 38, 41, 43, 48, 58, 66, 56, 5, 1, 4, 15, 49]}}
{"prediction": {"error_location": 0.7197117805480957, "repair_targets": [0.9469498991966248], "repair_candidates": [0.00169961410574615, 0.006849529687315226, 0.0023446620907634497, 0.0012391911586746573, 0.000332895404426381, 4.651651397580281e-05, 0.0006785799632780254, 0.0012518306029960513, 0.008550599217414856, 0.0016374664846807718, 0.0005599552532657981, 0.0004069005080964416, 0.00042127876076847315, 0.01347035076469183, 0.0022906986996531487, 0.00037764699663966894, 0.0001632620842428878, 0.0010586039861664176, 0.003113523591309786, 0.001563117140904069, 5.155205599294277e-06, 0.0009053178364410996, 0.0008051948389038444, 0.0006019991706125438, 0.0017762144561856985, 0.0003305337158963084, 0.00022327693295665085, 0.00020399803179316223, 6.179132469696924e-05, 0.9469498991966248, 4.150406311964616e-06, 6.965024658711627e-05, 6.619401574425865e-06], "target_probs": 0.9469498991966248}}


{"result": {"time": "2021-02-21 11:45:10.180499", "n_pass": [393, 59, 50], "n_token": 66, "loss": [0.3640267252922058, 0.06259142607450485], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "[", "(", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 65, "repair_targets": [55], "repair_candidates": [21, 27, 10, 31, 35, 60, 17, 18, 23, 32, 45, 50, 53, 12, 16, 28, 2, 3, 6, 8, 24, 37, 40, 42, 47, 57, 65, 55, 5, 1, 4, 14, 48]}}
{"prediction": {"error_location": 0.6948725581169128, "repair_targets": [0.9393271803855896], "repair_candidates": [0.0021628497634083033, 0.008233879692852497, 0.001090867561288178, 0.001407404663041234, 0.00040956385782919824, 6.199041672516614e-05, 0.0005119260167703032, 0.0011502462439239025, 0.013743931427598, 0.0016166185960173607, 0.0004926378023810685, 0.0003645749529823661, 0.0003392406215425581, 0.01419297605752945, 0.0025118954945355654, 0.0004488010599743575, 0.00018619759066496044, 0.001300146454013884, 0.003696960164234042, 0.0015993538545444608, 6.106068667577347e-06, 0.0010457297321408987, 0.0009184895316138864, 0.0005794561584480107, 0.001593037392012775, 0.00042309140553697944, 0.0002404778206255287, 0.0001993701298488304, 5.6127613788703457e-05, 0.9393271803855896, 4.921055278828135e-06, 7.769350486341864e-05, 6.26577957518748e-06], "target_probs": 0.9393271803855896}}


{"result": {"time": "2021-02-21 11:45:10.278611", "n_pass": [410, 60, 51], "n_token": 64, "loss": [0.1628466099500656, 0.17000366747379303], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", ":", "#NEWLINE#", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 63, "repair_targets": [53], "repair_candidates": [21, 27, 10, 31, 35, 58, 17, 18, 23, 32, 43, 48, 51, 12, 16, 28, 2, 3, 6, 8, 24, 37, 38, 40, 45, 55, 63, 53, 5, 1, 4, 14, 46]}}
{"prediction": {"error_location": 0.8497214317321777, "repair_targets": [0.8436617255210876], "repair_candidates": [0.003679614281281829, 0.014140651561319828, 0.001830431865528226, 0.0023993549402803183, 0.0007184626301750541, 0.00011017408542102203, 0.0008635866106487811, 0.0021638961043208838, 0.024498265236616135, 0.002437248593196273, 0.000931868446059525, 0.0005651291576214135, 0.0004494495806284249, 0.019994109869003296, 0.003749242750927806, 0.0005735862068831921, 0.00021587975788861513, 0.0017279062885791063, 0.03142398223280907, 0.02389160543680191, 7.869762339396402e-05, 0.004265815019607544, 0.00197784136980772, 0.0010803246404975653, 0.008767043240368366, 0.0019184481352567673, 0.0011204176116734743, 0.00033744951360858977, 8.554580563213676e-05, 0.8436617255210876, 1.1003142390109133e-05, 0.0003087495861109346, 2.2536500182468444e-05], "target_probs": 0.8436617255210876}}


{"result": {"time": "2021-02-21 11:45:10.375419", "n_pass": [420, 61, 52], "n_token": 62, "loss": [0.6445789933204651, 0.06815789639949799], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "#NEWLINE#", "#UNINDENT#", "return", "args"]}}
{"position": {"error_location": 61, "repair_targets": [53], "repair_candidates": [21, 27, 10, 31, 35, 56, 17, 18, 23, 32, 43, 48, 51, 12, 16, 28, 2, 3, 6, 8, 24, 37, 38, 40, 45, 55, 61, 53, 5, 1, 4, 14, 46]}}
{"prediction": {"error_location": 0.524883508682251, "repair_targets": [0.9341129660606384], "repair_candidates": [0.001777243916876614, 0.00710280891507864, 0.0009191766730509698, 0.001138706342317164, 0.00038362282793968916, 6.625071546295658e-05, 0.00043179141357541084, 0.0013591897441074252, 0.009821110405027866, 0.0011783865047618747, 0.0005638505681417882, 0.0003599535266403109, 0.000312482297886163, 0.012187126092612743, 0.0019066045060753822, 0.0002499147958587855, 9.302775288233534e-05, 0.0006773689528927207, 0.0072320145554840565, 0.006179183721542358, 3.0257537218858488e-05, 0.0033410214819014072, 0.002015879610553384, 0.0006631704745814204, 0.0040886965580284595, 0.0008363057859241962, 0.0006146834348328412, 0.0001765779306879267, 4.4668588088825345e-05, 0.9341129660606384, 9.890692308545113e-05, 5.021695415052818e-06, 3.198695776518434e-05], "target_probs": 0.9341129660606384}}


{"result": {"time": "2021-02-21 11:45:10.471839", "n_pass": [422, 62, 53], "n_token": 60, "loss": [1.049391746520996, 0.03356102854013443], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "(", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 59, "repair_targets": [53], "repair_candidates": [21, 27, 10, 31, 35, 56, 17, 18, 23, 32, 43, 48, 51, 12, 16, 28, 2, 3, 6, 8, 24, 37, 38, 40, 45, 55, 59, 53, 5, 1, 4, 14, 46]}}
{"prediction": {"error_location": 0.3501506447792053, "repair_targets": [0.966995894908905], "repair_candidates": [0.0008851148886606097, 0.0034687474835664034, 0.0004662842256948352, 0.0006323462584987283, 0.00021407037274912, 3.3484197047073394e-05, 0.00021892193763051182, 0.0004827073134947568, 0.0047458927147090435, 0.0006200992502272129, 0.00029984727734699845, 0.00016779454017523676, 0.00012974457058589906, 0.006814097054302692, 0.0007928214618004858, 0.00011431849998189136, 4.385425927466713e-05, 0.00032643918530084193, 0.0056831627152860165, 0.004120958503335714, 1.2946319657203276e-05, 0.0007916814065538347, 0.00024898117408156395, 0.0002670956600923091, 0.0006523608462885022, 0.0003222679952159524, 0.0002637503494042903, 7.980124064488336e-05, 1.9183298718417063e-05, 0.966995894908905, 6.68610300635919e-05, 1.715265716484282e-05, 1.2949091114933253e-06], "target_probs": 0.966995894908905}}


{"result": {"time": "2021-02-21 11:45:10.757607", "n_pass": [513, 65, 54], "n_token": 59, "loss": [1.2167415618896484, 0.46456146240234375], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", ")", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 58, "repair_targets": [52], "repair_candidates": [20, 26, 9, 30, 34, 55, 16, 17, 22, 31, 42, 47, 50, 11, 15, 27, 2, 3, 6, 7, 23, 36, 37, 39, 44, 54, 58, 52, 5, 1, 4, 13, 45]}}
{"prediction": {"error_location": 0.2961937189102173, "repair_targets": [0.6284106373786926], "repair_candidates": [0.058192405849695206, 0.07772618532180786, 0.0019514398882165551, 0.002901822328567505, 0.012359684333205223, 0.0031860878225415945, 0.010938175953924656, 0.012136797420680523, 0.013152983039617538, 0.004307850729674101, 0.0036809714511036873, 0.006489386782050133, 0.0033293315209448338, 0.11482345312833786, 0.01592879556119442, 0.00658812653273344, 0.0032909440342336893, 0.0039106328040361404, 0.003882321296259761, 0.0025528601836413145, 0.00026729630189947784, 0.0017675732960924506, 0.002139132935553789, 0.0015049524372443557, 0.000626470020506531, 0.0014038307126611471, 0.0008878962253220379, 0.0004233629733789712, 0.00024711425066925585, 0.6284106373786926, 0.0008181906305253506, 0.00015051297668833286, 2.2844873456051573e-05], "target_probs": 0.6284106373786926}}


{"result": {"time": "2021-02-21 11:45:10.850873", "n_pass": [515, 66, 55], "n_token": 58, "loss": [1.0409958362579346, 0.11588408052921295], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "=", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 57, "repair_targets": [51], "repair_candidates": [19, 25, 8, 29, 33, 54, 15, 16, 21, 30, 41, 46, 49, 10, 14, 26, 2, 3, 6, 7, 22, 35, 36, 38, 43, 53, 57, 51, 5, 1, 4, 12, 44]}}
{"prediction": {"error_location": 0.3531028628349304, "repair_targets": [0.8905784487724304], "repair_candidates": [0.016298294067382812, 0.018301211297512054, 0.0004988244036212564, 0.0007201756234280765, 0.0036492040380835533, 0.000934380164835602, 0.0017781197093427181, 0.0006946207140572369, 0.005024800542742014, 0.00282843760214746, 0.001729644020088017, 0.001792064867913723, 0.0009943703189492226, 0.03321829438209534, 0.0048836893402040005, 0.00151484040543437, 0.0006769779720343649, 0.0014346761163324118, 0.0037156606558710337, 0.0032301542814821005, 8.259313472080976e-05, 0.0011347128311172128, 0.0008532446809113026, 0.000703338417224586, 0.0006588947726413608, 0.0007918389164842665, 0.000544792041182518, 0.0002206541394116357, 9.420152491657063e-05, 0.8905784487724304, 0.000339253107085824, 7.172956975409761e-05, 7.767817805870436e-06], "target_probs": 0.8905784487724304}}


{"result": {"time": "2021-02-21 11:45:11.036157", "n_pass": [519, 68, 56], "n_token": 57, "loss": [1.0319344997406006, 0.26066139340400696], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", ".", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 56, "repair_targets": [50], "repair_candidates": [18, 24, 8, 28, 32, 53, 14, 15, 20, 29, 40, 45, 48, 10, 13, 25, 2, 3, 6, 7, 21, 34, 35, 37, 42, 52, 56, 50, 5, 1, 4, 11, 43]}}
{"prediction": {"error_location": 0.3563169836997986, "repair_targets": [0.770541787147522], "repair_candidates": [0.022596631199121475, 0.021174201741814613, 0.0005450876778922975, 0.0010364219779148698, 0.0038028135895729065, 0.0012371338671073318, 0.0017225195188075304, 0.00030039469129405916, 0.002358768368139863, 0.00804778840392828, 0.002519395435228944, 0.002146318322047591, 0.002165907993912697, 0.11040887981653214, 0.011158345267176628, 0.005325288511812687, 0.0012970393290743232, 0.002255874453112483, 0.007283274549990892, 0.007315462920814753, 0.00018361103138886392, 0.002532579703256488, 0.003894593333825469, 0.001513562398031354, 0.001163631328381598, 0.002283574314787984, 0.0018545472994446754, 0.00030250262352637947, 0.00013681089330930263, 0.770541787147522, 0.0007295540417544544, 0.00015189840632956475, 1.3942818441137206e-05], "target_probs": 0.770541787147522}}


{"result": {"time": "2021-02-21 11:45:11.130617", "n_pass": [521, 69, 57], "n_token": 56, "loss": [1.1905972957611084, 0.17742229998111725], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "(", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 55, "repair_targets": [49], "repair_candidates": [17, 23, 8, 27, 31, 52, 13, 14, 19, 28, 39, 44, 47, 10, 12, 24, 2, 3, 6, 7, 20, 33, 34, 36, 41, 51, 55, 49, 5, 1, 4, 11, 42]}}
{"prediction": {"error_location": 0.3040395975112915, "repair_targets": [0.8374260663986206], "repair_candidates": [0.017601504921913147, 0.014841302298009396, 0.00050065090181306, 0.002392101800069213, 0.0040258076041936874, 0.001615959801711142, 0.0019162647658959031, 0.0005996630643494427, 0.0032094838097691536, 0.017068995162844658, 0.0017479424132034183, 0.003949608188122511, 0.0020395719911903143, 0.028858553618192673, 0.009266451001167297, 0.005508470349013805, 0.001361505943350494, 0.002804142888635397, 0.009250874631106853, 0.009678348898887634, 0.0003648535639513284, 0.0040471358224749565, 0.006774946581572294, 0.002288124756887555, 0.00151257892139256, 0.004003307316452265, 0.0033040738198906183, 0.0004369420639704913, 0.00020386502728797495, 0.8374260663986206, 0.0011391642037779093, 0.00023860389774199575, 2.320279600098729e-05], "target_probs": 0.8374260663986206}}


{"result": {"time": "2021-02-21 11:45:11.313791", "n_pass": [526, 71, 58], "n_token": 55, "loss": [1.3242942094802856, 0.16286221146583557], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", ",", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 54, "repair_targets": [48], "repair_candidates": [16, 22, 8, 26, 30, 51, 13, 14, 18, 27, 38, 43, 46, 10, 12, 23, 2, 3, 6, 7, 19, 32, 33, 35, 40, 50, 54, 48, 5, 1, 4, 11, 41]}}
{"prediction": {"error_location": 0.26599061489105225, "repair_targets": [0.8497082591056824], "repair_candidates": [0.009285836480557919, 0.006848220247775316, 0.00045663921628147364, 0.0046150716952979565, 0.001514432136900723, 0.0005182022578082979, 0.000749334751162678, 0.0004605306312441826, 0.0029854783788323402, 0.022346563637256622, 0.001385851064696908, 0.0012533374829217792, 0.0012807948514819145, 0.0511770062148571, 0.002702076220884919, 0.0008143417071551085, 0.0006236377521418035, 0.0016853079432621598, 0.010303309187293053, 0.01134444959461689, 0.00027713648159988225, 0.0035893814638257027, 0.004482311196625233, 0.0016712442738935351, 0.0012126130750402808, 0.0028923875652253628, 0.0024981971364468336, 0.0002940630947705358, 0.00011941327102249488, 0.8497082591056824, 0.0007316211704164743, 0.00016084326489362866, 1.2082080502295867e-05], "target_probs": 0.8497082591056824}}


{"result": {"time": "2021-02-21 11:45:11.405620", "n_pass": [528, 72, 59], "n_token": 54, "loss": [1.3318440914154053, 0.21382713317871094], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "if", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 53, "repair_targets": [47], "repair_candidates": [16, 21, 8, 25, 29, 50, 13, 14, 17, 26, 37, 42, 45, 10, 12, 22, 2, 3, 6, 7, 18, 31, 32, 34, 39, 49, 53, 47, 5, 1, 4, 11, 40]}}
{"prediction": {"error_location": 0.26398995518684387, "repair_targets": [0.807487964630127], "repair_candidates": [0.018414542078971863, 0.013277949765324593, 0.0006607544491998851, 0.005787817761301994, 0.003042441327124834, 0.0009046458872035146, 0.0013512943405658007, 0.0006592387799173594, 0.005493790376931429, 0.030391564592719078, 0.0021817272063344717, 0.0024091769009828568, 0.0029885433614253998, 0.03814226761460304, 0.009837829507887363, 0.0007644419674761593, 0.0005375088076107204, 0.0017413791501894593, 0.01036139577627182, 0.010875060223042965, 0.0004589649324771017, 0.00616684602573514, 0.010889589786529541, 0.002305105095729232, 0.0018768819281831384, 0.0045638540759682655, 0.004395337775349617, 0.0003512176626827568, 0.00019313405209686607, 0.807487964630127, 0.0012096514692530036, 0.0002564483438618481, 2.1586662114714272e-05], "target_probs": 0.807487964630127}}


{"result": {"time": "2021-02-21 11:45:11.498722", "n_pass": [531, 73, 60], "n_token": 53, "loss": [1.4099090099334717, 0.28927096724510193], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "(", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 52, "repair_targets": [46], "repair_candidates": [16, 20, 8, 24, 28, 49, 13, 14, 17, 25, 36, 41, 44, 10, 12, 21, 2, 3, 6, 7, 18, 30, 31, 33, 38, 48, 52, 46, 5, 1, 4, 11, 39]}}
{"prediction": {"error_location": 0.24416548013687134, "repair_targets": [0.748809278011322], "repair_candidates": [0.04462688788771629, 0.03468179330229759, 0.0013007899979129434, 0.008990717120468616, 0.005518288351595402, 0.001724909176118672, 0.0027227399405092, 0.0008367332047782838, 0.00481920363381505, 0.02502354234457016, 0.001972677418962121, 0.0047347391955554485, 0.004281853791326284, 0.009692003019154072, 0.007900913245975971, 0.0006461873999796808, 0.0009132259874604642, 0.003608912695199251, 0.012235919013619423, 0.015168068930506706, 0.0008683485211804509, 0.010835622437298298, 0.02449696697294712, 0.005303093697875738, 0.002446585102006793, 0.006643642205744982, 0.005247145425528288, 0.0005418463842943311, 0.0003802810388151556, 0.748809278011322, 0.0024922522716224194, 0.00048764506937004626, 4.714360329671763e-05], "target_probs": 0.748809278011322}}


{"result": {"time": "2021-02-21 11:45:11.588953", "n_pass": [532, 74, 61], "n_token": 52, "loss": [1.4519895315170288, 0.2706785798072815], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "#NEWLINE#", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 51, "repair_targets": [45], "repair_candidates": [16, 19, 8, 23, 27, 48, 13, 14, 17, 24, 35, 40, 43, 10, 12, 20, 2, 3, 6, 7, 18, 29, 30, 32, 37, 47, 51, 45, 5, 1, 4, 11, 38]}}
{"prediction": {"error_location": 0.23410409688949585, "repair_targets": [0.7628616690635681], "repair_candidates": [0.03267854452133179, 0.022325731813907623, 0.000930095964577049, 0.011743984185159206, 0.0032491108868271112, 0.0010069460840895772, 0.00196855328977108, 0.0006487806094810367, 0.0054120635613799095, 0.032940030097961426, 0.0032472736202180386, 0.004066151566803455, 0.0038308128714561462, 0.009138185530900955, 0.015583451837301254, 0.0023215310648083687, 0.0004952178569510579, 0.0037025201600044966, 0.0070313201285898685, 0.014490562491118908, 0.0014268715167418122, 0.0095754349604249, 0.022700410336256027, 0.006009792443364859, 0.003118319669738412, 0.007718481123447418, 0.005666130222380161, 0.0006267733406275511, 0.0004000602348241955, 0.7628616690635681, 0.002549027092754841, 0.0004931578296236694, 4.3007530621252954e-05], "target_probs": 0.7628616690635681}}


{"result": {"time": "2021-02-21 11:45:11.679039", "n_pass": [535, 75, 62], "n_token": 51, "loss": [1.3836356401443481, 0.2516360282897949], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "#INDENT#", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 50, "repair_targets": [44], "repair_candidates": [16, 19, 8, 22, 26, 47, 13, 14, 17, 23, 34, 39, 42, 10, 12, 20, 2, 3, 6, 7, 18, 28, 29, 31, 36, 46, 50, 44, 5, 1, 4, 11, 37]}}
{"prediction": {"error_location": 0.2506655752658844, "repair_targets": [0.7775276899337769], "repair_candidates": [0.024670006707310677, 0.01943867839872837, 0.0007394715794362128, 0.0070879580453038216, 0.0024372749030590057, 0.0009273397154174745, 0.0017287975642830133, 0.00047944203834049404, 0.0032320532482117414, 0.02255195565521717, 0.0018604369834065437, 0.0023458341602236032, 0.002133574103936553, 0.009395415894687176, 0.01089213415980339, 0.0020115140359848738, 0.0005381540395319462, 0.007916801609098911, 0.012602466158568859, 0.01989573799073696, 0.0011889173183590174, 0.01121528074145317, 0.029122542589902878, 0.00601579574868083, 0.003251182846724987, 0.008126139640808105, 0.006922977045178413, 0.0005533848307095468, 0.0003382630238775164, 0.7775276899337769, 0.002339848317205906, 0.00047631157212890685, 3.66481690434739e-05], "target_probs": 0.7775276899337769}}


{"result": {"time": "2021-02-21 11:45:11.768421", "n_pass": [536, 76, 63], "n_token": 50, "loss": [1.400920033454895, 0.24049784243106842], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "return", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 49, "repair_targets": [43], "repair_candidates": [16, 19, 8, 21, 25, 46, 13, 14, 17, 22, 33, 38, 41, 10, 12, 20, 2, 3, 6, 7, 18, 27, 28, 30, 35, 45, 49, 43, 5, 1, 4, 11, 36]}}
{"prediction": {"error_location": 0.24637018144130707, "repair_targets": [0.7862363457679749], "repair_candidates": [0.02597392350435257, 0.02109314128756523, 0.0007907903054729104, 0.007992474362254143, 0.002548379823565483, 0.0010063410736620426, 0.0019725949969142675, 0.0004926894907839596, 0.0029493297915905714, 0.019866596907377243, 0.0019414860289543867, 0.002169248415157199, 0.0019257977837696671, 0.009598568081855774, 0.011514783836901188, 0.0018851718632504344, 0.0010238023241981864, 0.013174503110349178, 0.004874515347182751, 0.012256452813744545, 0.0006559164612554014, 0.01077800802886486, 0.02776348777115345, 0.005991007201373577, 0.0034713749773800373, 0.008456980809569359, 0.00813159067183733, 0.0005358910420909524, 0.0003340011462569237, 0.7862363457679749, 0.002139734337106347, 0.00041820856858976185, 3.694403494591825e-05], "target_probs": 0.7862363457679749}}


{"result": {"time": "2021-02-21 11:45:11.947860", "n_pass": [540, 78, 64], "n_token": 49, "loss": [1.475179672241211, 0.209085151553154], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "#NEWLINE#", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 48, "repair_targets": [42], "repair_candidates": [16, 19, 8, 21, 24, 45, 13, 14, 17, 22, 32, 37, 40, 10, 12, 20, 2, 3, 6, 7, 18, 26, 27, 29, 34, 44, 48, 42, 5, 1, 4, 11, 35]}}
{"prediction": {"error_location": 0.22873763740062714, "repair_targets": [0.8113261461257935], "repair_candidates": [0.030161747708916664, 0.02229936607182026, 0.0008578584529459476, 0.008540146052837372, 0.0031505259685218334, 0.001018160954117775, 0.0018183659994974732, 0.0005423344555310905, 0.005169318523257971, 0.02963460423052311, 0.00254953489638865, 0.00248446105979383, 0.0020281141623854637, 0.00508559076115489, 0.007922022603452206, 0.0008387989364564419, 0.0003584382648114115, 0.005967343226075172, 0.0034296554513275623, 0.003470255294814706, 0.005476274061948061, 0.007068842649459839, 0.014115860685706139, 0.004094844218343496, 0.002946524415165186, 0.007238083519041538, 0.007074615452438593, 0.0004904387169517577, 0.0003576730377972126, 0.8113261461257935, 0.002031557960435748, 0.000412150751799345, 4.0273709601024166e-05], "target_probs": 0.8113261461257935}}


{"result": {"time": "2021-02-21 11:45:12.036342", "n_pass": [542, 79, 65], "n_token": 48, "loss": [0.7128468155860901, 0.0659945085644722], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", ")", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 47, "repair_targets": [41], "repair_candidates": [16, 19, 8, 21, 24, 44, 13, 14, 17, 22, 31, 36, 39, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 28, 33, 43, 47, 41, 5, 1, 4, 11, 34]}}
{"prediction": {"error_location": 0.4902466833591461, "repair_targets": [0.93613600730896], "repair_candidates": [0.010288494639098644, 0.008959269151091576, 0.0003488684305921197, 0.0027452404610812664, 0.00120590312872082, 0.0004573084879666567, 0.0007624428835697472, 0.00022332731168717146, 0.0011599264107644558, 0.0070493025705218315, 0.000833958329167217, 0.0007607171428389847, 0.0005541623686440289, 0.00362969608977437, 0.0023179056588560343, 0.0006150267436169088, 0.00034232286270707846, 0.0028187097050249577, 0.0019602144602686167, 0.0018783758860081434, 0.001816494739614427, 0.0016958322376012802, 0.0024045787286013365, 0.0011546980822458863, 0.0016553953755646944, 0.002428067149594426, 0.002710058819502592, 0.00023272605903912336, 0.00015623326180502772, 0.93613600730896, 0.0005190238589420915, 0.0001673483639024198, 1.2336287909420207e-05], "target_probs": 0.93613600730896}}


{"result": {"time": "2021-02-21 11:45:12.124178", "n_pass": [545, 80, 66], "n_token": 47, "loss": [0.4580114483833313, 0.044347133487463], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "[", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 46, "repair_targets": [40], "repair_candidates": [16, 19, 8, 21, 24, 43, 13, 14, 17, 22, 30, 35, 38, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 32, 42, 46, 40, 5, 1, 4, 11, 33]}}
{"prediction": {"error_location": 0.6325401067733765, "repair_targets": [0.9566218256950378], "repair_candidates": [0.006598401814699173, 0.005990698002278805, 0.00024071494408417493, 0.001538255368359387, 0.0008828454301692545, 0.0003474299155641347, 0.000540072622243315, 0.00017165837925858796, 0.0006694802432321012, 0.00408649118617177, 0.0007043233490549028, 0.0006379695259965956, 0.0004118270589970052, 0.0023632142692804337, 0.001457852660678327, 0.0005178604042157531, 0.0002761951182037592, 0.002306710695847869, 0.0018626740202307701, 0.002312540076673031, 0.001847070292569697, 0.00025534615269862115, 0.0010344479233026505, 0.0014867678983137012, 0.0009036815026775002, 0.00161853083409369, 0.001692937919870019, 0.00016859573952388018, 0.00010635735816322267, 0.9566218256950378, 0.0002516116655897349, 8.906631410354748e-05, 6.5787812673079316e-06], "target_probs": 0.9566218256950378}}


{"result": {"time": "2021-02-21 11:45:12.213534", "n_pass": [547, 81, 67], "n_token": 46, "loss": [0.6391101479530334, 0.0911860316991806], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "#NEWLINE#", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 45, "repair_targets": [39], "repair_candidates": [16, 19, 8, 21, 24, 42, 13, 14, 17, 22, 29, 34, 37, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 31, 41, 45, 39, 5, 1, 4, 11, 32]}}
{"prediction": {"error_location": 0.5277618765830994, "repair_targets": [0.9128478765487671], "repair_candidates": [0.013560445047914982, 0.010769221000373363, 0.0004528054560068995, 0.003040284849703312, 0.0016946224495768547, 0.0005846288404427469, 0.0008922673296183348, 0.0003013016830664128, 0.0013396658468991518, 0.007201720029115677, 0.0012637644540518522, 0.001164627610705793, 0.0009709067526273429, 0.006989348214119673, 0.0034352566581219435, 0.001359855756163597, 0.0005459728417918086, 0.005363868549466133, 0.004281509201973677, 0.005981673952192068, 0.0032942723482847214, 0.0003828994231298566, 0.0006221587536856532, 0.0004427234816830605, 0.001858633360825479, 0.0029206585604697466, 0.004896358586847782, 0.0005866685532964766, 0.00023386468819808215, 0.9128478765487671, 0.0005370873841457069, 0.00016783372848294675, 1.5416018868563697e-05], "target_probs": 0.9128478765487671}}


{"result": {"time": "2021-02-21 11:45:12.300158", "n_pass": [548, 82, 68], "n_token": 45, "loss": [0.5757108330726624, 0.0644005686044693], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "=", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 44, "repair_targets": [38], "repair_candidates": [16, 19, 8, 21, 24, 41, 13, 14, 17, 22, 28, 33, 36, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 30, 40, 44, 38, 5, 1, 4, 11, 31]}}
{"prediction": {"error_location": 0.5623050332069397, "repair_targets": [0.9376293420791626], "repair_candidates": [0.010201822966337204, 0.008655339479446411, 0.0003812419017776847, 0.0024309956934303045, 0.0013680767733603716, 0.0005045298603363335, 0.0007740769651718438, 0.0002729451807681471, 0.0009743393748067319, 0.005992908962070942, 0.0012557441368699074, 0.001206311397254467, 0.0008887893054634333, 0.004954865667968988, 0.0027690480928868055, 0.0011854196200147271, 0.0004103629617020488, 0.002297675935551524, 0.0014766003005206585, 0.0022642272524535656, 0.0025202494580298662, 0.000234846884268336, 0.0003975027066189796, 0.0010579531081020832, 0.0004213679931126535, 0.0019282446010038257, 0.00400969572365284, 0.000518654880579561, 0.00016256867093034089, 0.9376293420791626, 0.0006418642587959766, 0.00019967154366895556, 1.2729879017570056e-05], "target_probs": 0.9376293420791626}}


{"result": {"time": "2021-02-21 11:45:12.386334", "n_pass": [550, 83, 69], "n_token": 44, "loss": [0.43760740756988525, 0.0356949046254158], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", ".", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 43, "repair_targets": [37], "repair_candidates": [16, 19, 8, 21, 24, 40, 13, 14, 17, 22, 28, 32, 35, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 29, 39, 43, 37, 5, 1, 4, 11, 30]}}
{"prediction": {"error_location": 0.6455792188644409, "repair_targets": [0.9649346470832825], "repair_candidates": [0.006619405932724476, 0.005624627694487572, 0.00025853049010038376, 0.0016162964748218656, 0.0008719622856006026, 0.00031588212004862726, 0.00048466192674823105, 0.0001712962257442996, 0.0006031260709278286, 0.003950617276132107, 0.0008289058459922671, 0.0007895464077591896, 0.0006114938296377659, 0.0036300423089414835, 0.0015747316647320986, 0.0008613705867901444, 0.00033838406670838594, 0.00170310924295336, 0.000804924638941884, 0.0009194574085995555, 0.0003969373647123575, 4.396059375721961e-05, 6.255507469177246e-05, 9.235143807018176e-05, 0.00017987095634452999, 0.00018782340339384973, 0.0010222456185147166, 0.00014631090743932873, 7.121341332094744e-05, 0.9649346470832825, 0.00020492327166721225, 7.358258153544739e-05, 5.3791086429555435e-06], "target_probs": 0.9649346470832825}}


{"result": {"time": "2021-02-21 11:45:12.472168", "n_pass": [553, 84, 70], "n_token": 43, "loss": [0.6558184027671814, 0.07877273857593536], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", "value", ")", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 42, "repair_targets": [36], "repair_candidates": [16, 19, 8, 21, 24, 39, 13, 14, 17, 22, 28, 31, 34, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 29, 38, 42, 36, 5, 1, 4, 11, 30]}}
{"prediction": {"error_location": 0.5190171003341675, "repair_targets": [0.9242499470710754], "repair_candidates": [0.010357595048844814, 0.008051869459450245, 0.0004553345497697592, 0.002761881798505783, 0.001343126641586423, 0.0003990964323747903, 0.0006302244146354496, 0.0002795252075884491, 0.0011886643478646874, 0.00661920802667737, 0.0012179631739854813, 0.0011631654342636466, 0.0010670580668374896, 0.004593320190906525, 0.0019151020096614957, 0.0008501707343384624, 0.0006472848472185433, 0.0018247544066980481, 0.0007368160877376795, 0.000544877490028739, 0.0001922301307786256, 6.956578727113083e-05, 0.00018942105816677213, 0.0005373559542931616, 0.002432684414088726, 0.00639429921284318, 0.018040819093585014, 0.00041862018406391144, 0.00015143153723329306, 0.9242499470710754, 0.0005039247334934771, 0.0001615808141650632, 1.1167122465849388e-05], "target_probs": 0.9242499470710754}}


{"result": {"time": "2021-02-21 11:45:12.558675", "n_pass": [555, 85, 71], "n_token": 42, "loss": [0.5781334042549133, 0.09298836439847946], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", "value", "(", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 41, "repair_targets": [35], "repair_candidates": [16, 19, 8, 21, 24, 38, 13, 14, 17, 22, 28, 31, 33, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 29, 37, 41, 35, 5, 1, 4, 11, 30]}}
{"prediction": {"error_location": 0.5609444379806519, "repair_targets": [0.9112040996551514], "repair_candidates": [0.016513941809535027, 0.013251809403300285, 0.0007619092357344925, 0.004286628682166338, 0.0025344013702124357, 0.0007044671219773591, 0.001068747485987842, 0.000496906170155853, 0.0023718662559986115, 0.011222343891859055, 0.001957483123987913, 0.0019421870820224285, 0.0015785499708727002, 0.007065067067742348, 0.0035949000157415867, 0.0015410715714097023, 0.0011193030513823032, 0.0030016484670341015, 0.001433682395145297, 0.0012526314239948988, 0.00037692219484597445, 9.485129703534767e-05, 0.00020675348059739918, 0.0005000794189982116, 0.0014496120857074857, 0.003378006163984537, 0.004260470159351826, 7.708113844273612e-05, 7.478622865164652e-05, 0.9112040996551514, 0.0005095945089124143, 0.00015227725089062005, 1.5972718756529503e-05], "target_probs": 0.9112040996551514}}


{"result": {"time": "2021-02-21 11:45:12.642974", "n_pass": [556, 86, 72], "n_token": 41, "loss": [0.634100079536438, 0.5755547881126404], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "#NEWLINE#", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", "value", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 40, "repair_targets": [34], "repair_candidates": [16, 19, 8, 21, 24, 37, 13, 14, 17, 22, 28, 31, 32, 10, 12, 20, 2, 3, 6, 7, 18, 25, 26, 27, 29, 36, 40, 34, 5, 1, 4, 11, 30]}}
{"prediction": {"error_location": 0.5304126143455505, "repair_targets": [0.5623927712440491], "repair_candidates": [0.08440666645765305, 0.05952789634466171, 0.0036688598338514566, 0.02425418794155121, 0.011417766101658344, 0.0028842573519796133, 0.004649731330573559, 0.002310600131750107, 0.012699298560619354, 0.05645249783992767, 0.008369628340005875, 0.006350476760417223, 0.0052903806790709496, 0.026661498472094536, 0.011774230748414993, 0.004377236124128103, 0.00466640992090106, 0.023139407858252525, 0.012224104255437851, 0.012263494543731213, 0.003151610027998686, 0.00048580928705632687, 0.001311860396526754, 0.00271590705960989, 0.004909855779260397, 0.010877197608351707, 0.028934111818671227, 0.0006171417771838605, 0.0033824641723185778, 0.5623927712440491, 0.002860285574570298, 0.000876892707310617, 9.544822387397289e-05], "target_probs": 0.5623927712440491}}


{"result": {"time": "2021-02-21 11:45:13.147111", "n_pass": [575, 92, 73], "n_token": 40, "loss": [0.5159354209899902, 0.27545928955078125], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "name", "self", "name", "value", "value", "for", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", "value", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 39, "repair_targets": [33], "repair_candidates": [15, 18, 8, 20, 23, 36, 12, 13, 16, 21, 27, 30, 31, 9, 11, 19, 2, 3, 6, 7, 17, 24, 25, 26, 28, 35, 39, 33, 5, 1, 4, 10, 29]}}
{"prediction": {"error_location": 0.5969418883323669, "repair_targets": [0.7592233419418335], "repair_candidates": [0.03166626766324043, 0.023690933361649513, 0.002090673428028822, 0.011801007203757763, 0.00450758496299386, 0.0010217921808362007, 0.0008275048458017409, 0.0006700630183331668, 0.004236721899360418, 0.036267299205064774, 0.0031526966486126184, 0.005286260042339563, 0.004690006375312805, 0.03316612169146538, 0.007685765624046326, 0.0024280818179249763, 0.002645176136866212, 0.01510956697165966, 0.0073410687036812305, 0.008048435673117638, 0.002114178379997611, 0.00022563021047972143, 0.0005053009954281151, 0.0011530963238328695, 0.0023485906422138214, 0.007387184537947178, 0.016082914546132088, 0.0003120174224022776, 0.002324906410649419, 0.7592233419418335, 0.0014558954862877727, 0.0004931550356559455, 4.077416087966412e-05], "target_probs": 0.7592233419418335}}


{"result": {"time": "2021-02-21 11:45:13.230892", "n_pass": [581, 93, 74], "n_token": 39, "loss": [0.7034504413604736, 0.43397533893585205], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "name", "self", "name", "value", "value", "header", "value", "args", "header", "name", "result", "value", ")", "result", "args", "args", "args", "value", "args", "self", "value", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 38, "repair_targets": [32], "repair_candidates": [14, 17, 8, 19, 22, 35, 12, 13, 15, 20, 26, 29, 30, 9, 11, 18, 2, 3, 6, 7, 16, 23, 24, 25, 27, 34, 38, 32, 5, 1, 4, 10, 28]}}
{"prediction": {"error_location": 0.4948747456073761, "repair_targets": [0.6479282379150391], "repair_candidates": [0.06027013063430786, 0.04786508157849312, 0.0032365357037633657, 0.012535680085420609, 0.008190523833036423, 0.0018778833327814937, 0.0014404673129320145, 0.0010957400081679225, 0.005293874070048332, 0.06603159010410309, 0.013078777119517326, 0.026996362954378128, 0.01598483882844448, 0.009198563173413277, 0.004832056816667318, 0.005242680199444294, 0.004775349982082844, 0.014995166100561619, 0.005443260073661804, 0.004949562251567841, 0.001747582689858973, 0.00024518658756278455, 0.00060653017135337, 0.0015148173552006483, 0.003136412240564823, 0.007829489186406136, 0.01671271026134491, 0.00036660960176959634, 0.0031236049253493547, 0.6479282379150391, 0.0026252667885273695, 0.0007484614616259933, 8.108885958790779e-05], "target_probs": 0.6479282379150391}}


{"result": {"time": "2021-02-21 11:45:13.314199", "n_pass": [589, 94, 75], "n_token": 38, "loss": [0.5924738049507141, 0.34305211901664734], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def values(", "self", "args", "args", "self", "kwargs", "args", "args", "result", "name", "self", "name", "value", "value", "header", "value", "args", "header", "name", "result", "value", "result", "args", "args", "args", "value", "args", "self", "value", "value", "for", "item", "in", "args", "result", ")", "return", "args"]}}
{"position": {"error_location": 37, "repair_targets": [31], "repair_candidates": [14, 17, 8, 19, 21, 34, 12, 13, 15, 20, 25, 28, 29, 9, 11, 18, 2, 3, 6, 7, 16, 22, 23, 24, 26, 33, 37, 31, 5, 1, 4, 10, 27]}}
{"prediction": {"error_location": 0.5529577136039734, "repair_targets": [0.7096012234687805], "repair_candidates": [0.04689202457666397, 0.03831852972507477, 0.0023813904263079166, 0.009732111357152462, 0.00657894229516387, 0.0017412797315046191, 0.0012941481545567513, 0.0009439847781322896, 0.004484207835048437, 0.06036630645394325, 0.00840562954545021, 0.01808740943670273, 0.010225757956504822, 0.005263143684715033, 0.0032364209182560444, 0.0032974444329738617, 0.00231447396799922, 0.0057370299473404884, 0.004029551055282354, 0.002153100213035941, 0.0013805978232994676, 0.00027037286781705916, 0.0006058341241441667, 0.0015130687970668077, 0.004392986185848713, 0.011319437995553017, 0.028214801102876663, 0.00044975633500143886, 0.0030893590301275253, 0.7096012234687805, 0.0028071452397853136, 0.0008095139055512846, 6.30624417681247e-05], "target_probs": 0.7096012234687805}}




Minimal simplified tokens:

['def values(', 'self', 'args', 'args', 'self', 'kwargs', 'args', 'args', 'result', 'name', 'self', 'name', 'value', 'value', 'header', 'value', 'args', 'header', 'name', 'result', 'value', 'result', 'args', 'args', 'args', 'value', 'args', 'self', 'value', 'value', 'for', 'item', 'in', 'args', 'result', ')', 'return', 'args']
