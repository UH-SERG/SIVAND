
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "#INDENT#", "class StderrTextIOWrapper", "(", "TextIOWrapper", ")", ":", "#NEWLINE#", "#INDENT#", "def write(", "self", ",", "text", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "text", ")", "is", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "text", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdout", "#NEWLINE#", "sys", ".", "stdout", "=", "StderrTextIOWrapper", "(", "io", ".", "FileIO", "(", "sys", ".", "stdout", ".", "fileno", "(", ")", ",", "mode", "=", "'w'", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdout", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "(", "True", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "(", "io", ".", "FileIO", "(", "sys", ".", "stderr", ".", "fileno", "(", ")", ",", "mode", "=", "'w'", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"], "error_location": [17], "repair_targets": [12, 341], "repair_candidates": [12, 341, 17, 94, 136, 169, 234, 267, 320], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "dnanexus/dx-toolkit/src/python/dxpy/compat.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00005-of-00300", "js_count": 17703, "results": {"model": "rnn", "prob": {"loc": [[0.04614030569791794, 2.7769365829044546e-07, 7.361736464872592e-08, 3.1010238821238545e-09, 3.576070550792565e-09, 9.18597109489383e-09, 2.0336543560262044e-09, 1.2180063624356308e-09, 5.839181138611593e-09, 2.548830302373517e-08, 1.2921987035952043e-07, 5.2073416689779606e-09, 1.3920958963353769e-06, 5.5586472313962076e-08, 1.0063600619503177e-08, 6.040003341922784e-08, 5.147842898622912e-07, 0.0010228614555671811, 1.5501208849855175e-07, 1.167562846404735e-08, 1.207970115046919e-07, 2.3373504021151348e-08, 1.5782337214886866e-08, 1.6120643708816829e-09, 3.2971170185192022e-06, 5.01278805131733e-07, 2.9423487646340618e-08, 2.3166796836449066e-07, 2.4165924372709924e-08, 2.2325530313338504e-09, 2.550612634877325e-06, 1.3096650874899751e-08, 1.0903166185016744e-05, 4.927279029232068e-09, 5.956734216994164e-09, 2.3399319104555616e-07, 1.1901658325541575e-07, 8.256079375712488e-09, 2.441516926410259e-07, 2.06590456741651e-07, 1.3985843594355174e-08, 0.0021337629295885563, 1.6104024780361215e-08, 1.749565825548416e-07, 9.81803077593213e-06, 1.0916473058841802e-07, 2.375290719669465e-08, 1.506811031504185e-07, 1.213186706650049e-08, 5.661766167008864e-08, 1.0885732848464613e-07, 8.137076790148967e-09, 8.814033947146527e-09, 0.0015748022124171257, 1.3848969615537499e-07, 0.0002521705173421651, 6.090252746560054e-09, 9.099269782097963e-09, 1.2314482091824175e-06, 1.4693818606303921e-08, 1.6860167306731455e-07, 1.053599234523972e-07, 1.1173777458850509e-08, 1.1172090097488763e-07, 1.8281373570516735e-07, 6.485517189958045e-08, 7.607525844832708e-07, 0.9472869038581848, 4.480581992538646e-06, 1.5439397316185932e-08, 8.522905403651748e-08, 0.00045999756548553705, 3.5921905450209124e-09, 4.659874684875831e-05, 9.797419764367987e-09, 4.622612337357168e-08, 4.814886267467955e-08, 3.167402695680721e-08, 2.1010650641528628e-07, 8.40791187783907e-08, 7.015111691544007e-08, 1.6283293007290922e-06, 2.0486100993366563e-07, 2.8490293857430515e-07, 3.1447551229746296e-09, 6.746492726961151e-05, 5.430311200704807e-10, 1.110769787260324e-07, 2.3549084904317397e-09, 5.177166713110637e-07, 1.179421019514848e-06, 1.647945424565478e-07, 5.618983891508833e-07, 3.7901621396940754e-08, 5.655838020146575e-09, 3.854328411989627e-09, 0.00013006835069973022, 2.315508895733842e-09, 2.028889269922729e-07, 7.581379080079387e-09, 1.4193495267988965e-08, 5.7634079730917165e-09, 1.3162663847765543e-08, 2.2462392834654565e-08, 8.076715829474779e-08, 1.3584013913714443e-08, 7.562517723158635e-09, 3.47372397513368e-09, 6.877510827507649e-08, 4.0339118712040545e-09, 4.201186509789068e-09, 1.4554463412252971e-08, 5.1799092792848e-10, 3.158813512982306e-07, 3.3679968964861473e-06, 3.120486624652585e-08, 1.2213791933390894e-06, 2.5018684013389247e-08, 1.093558310572007e-07, 1.0326764332546645e-08, 0.0001238673139596358, 6.893013382303081e-10, 1.7700159560263273e-06, 2.1813018058480793e-09, 3.7830176324860076e-07, 1.9456467725831317e-07, 3.0662761218991363e-07, 2.665461273920755e-08, 9.454382166040887e-09, 1.3317466240891918e-08, 7.417150893473945e-09, 6.007264685692348e-10, 1.3762081252366443e-08, 8.447221255813986e-10, 2.6304598499393705e-09, 1.9472616941129672e-07, 0.00016607335419394076, 8.695962350202535e-08, 2.056991888821358e-06, 6.681212028070149e-08, 1.9565309230529238e-06, 3.8606930274909246e-07, 1.944320260349741e-09, 2.834208423507789e-09, 4.944514797600164e-10, 2.5871897957330248e-09, 3.815022964204218e-09, 9.58993773281236e-10, 2.4212694071934493e-09, 9.190225682687014e-06, 2.174703149648849e-05, 2.0623778240747015e-08, 3.081732558030126e-08, 7.482999109242883e-09, 1.445296682334174e-08, 1.1493086304881217e-07, 1.5333120018112822e-06, 3.4747779409372015e-07, 1.1391657039894199e-07, 2.0138604117647674e-09, 2.0346402379800566e-05, 7.836679916106704e-11, 8.479482715983977e-08, 1.5263184049985057e-09, 4.5057069542053796e-07, 2.1249358894692705e-07, 2.766412521282291e-08, 1.5211757897759526e-07, 8.282418306748696e-09, 7.186042871865084e-09, 1.7312086209031463e-09, 5.591449371422641e-05, 9.210334717124624e-10, 6.632633642311703e-08, 3.709267115681314e-09, 3.227483613699178e-09, 8.805291495939116e-10, 1.4065073550284524e-09, 2.6498874206026812e-09, 5.631983324150269e-09, 4.714501677938188e-09, 3.593809339008658e-08, 5.723467921825431e-09, 1.6184787954287572e-09, 1.8462817941156118e-09, 4.2692199997418356e-08, 2.9112356969562825e-10, 1.7439216737358265e-09, 7.508060839711561e-09, 2.0229991293252425e-10, 1.0025098617916228e-07, 1.2110274383303476e-06, 6.533314333978524e-09, 1.4804707859639166e-07, 9.542411305574205e-09, 1.12216844172508e-06, 6.6483614169499106e-09, 2.083852734813263e-08, 1.2073637662979309e-06, 9.10437325529756e-09, 1.0884621559625884e-07, 1.0242356296430444e-08, 2.503411815268919e-05, 1.1471238403615303e-09, 1.8610909080507554e-07, 1.8790132116919267e-08, 6.04353829203319e-07, 1.8888454178522807e-07, 2.6786881335283397e-07, 5.943717074075039e-09, 1.1728386040132932e-09, 6.063342539164296e-08, 3.862615116645429e-09, 2.0833359926086814e-08, 9.565176384285223e-08, 8.904740944615241e-09, 1.9539353246500468e-08, 1.6852345907647504e-10, 1.57179214088643e-09, 1.0704001018879694e-09, 1.323421927601487e-10, 3.1522514376547406e-08, 1.9537453681550687e-06, 6.150934428461596e-09, 1.2273861216272053e-07, 3.007325588555432e-08, 5.1796456013164516e-09, 6.97875446320495e-09, 1.8209406205116352e-09, 1.78474915402127e-10, 1.9258734607063843e-09, 9.654262944636116e-10, 1.1106309205644038e-09, 1.1907970787206068e-07, 7.502736116293818e-05, 3.377385837666225e-08, 1.1111613957837108e-06, 2.955578359831179e-08, 8.276639960058674e-07, 1.494604333629468e-07, 6.405405650333762e-10, 1.0983201015335453e-09, 2.170791602029709e-10, 1.7743806424164177e-09, 4.677242593231767e-09, 4.984949120157012e-10, 1.846359398705033e-09, 9.523216249363031e-06, 2.0850964574492536e-05, 1.4989687713296007e-08, 2.127710985178055e-08, 4.067962855458518e-09, 8.024870545852991e-09, 8.222704650506785e-08, 5.689867066394072e-07, 2.2268946509029774e-07, 6.469604585390698e-08, 1.3464163117760108e-09, 7.139889476093231e-06, 4.17227433158196e-11, 6.557387166594708e-08, 2.209996630142541e-09, 1.3627125383663952e-07, 4.81202135915737e-08, 1.31864847929819e-08, 1.3998354120303702e-07, 6.113075379232669e-09, 1.144892713966783e-08, 1.8485087904807074e-09, 5.642580072162673e-05, 3.9891878689246596e-10, 1.2174362495898094e-07, 4.029912847869355e-09, 6.634600646648892e-10, 1.9324221389727114e-10, 4.669380437860582e-09, 1.0769312552838528e-08, 5.20595166975113e-09, 1.625650170034021e-09, 4.903449735138565e-08, 5.538959069184557e-09, 5.9179590117253156e-09, 3.8764902399179846e-09, 5.4422716999624754e-08, 2.2773100072370767e-10, 5.5808260235323814e-09, 1.0422855467595582e-08, 7.040341226671742e-11, 3.298733375345364e-08, 6.174667532832245e-07, 9.645304110961206e-09, 1.46262010503051e-07, 7.736912444045174e-09, 1.3206760058892542e-06, 4.405510178884242e-09, 1.4275896020876644e-08, 6.077853527131083e-07, 4.545477771955575e-09, 1.0548097151286129e-07, 6.752568282308857e-09, 2.422535362711642e-05, 9.776042197984225e-10, 1.5568032267765375e-06, 2.884151228954579e-08, 3.485132253899792e-07, 4.1394329741706315e-08, 6.061376467414448e-08, 6.939187446874939e-09, 1.6446811690329355e-09, 5.619817144975059e-08, 2.7904928145972008e-08, 2.5963959870978215e-08, 5.295968108498528e-09, 6.632959514973891e-09, 5.679988923645851e-09, 5.830875782208977e-10, 3.3111247077499684e-09, 2.4350523819549608e-09, 9.064826667071202e-10, 6.97750692779664e-08, 0.0001677163818385452, 2.90506481093189e-08, 3.3466062632214744e-06, 3.295940587122459e-08, 1.2245947118572076e-06, 1.6062574559327913e-07, 7.972233984077093e-10, 2.363043538622378e-09, 6.704566901660769e-10, 2.78423950561546e-09, 9.908523779245115e-09, 8.591725109141635e-10, 2.8513422734022242e-09, 3.7159500152483815e-06, 1.4970053598517552e-05, 1.631889290365507e-08, 2.577832347583353e-08, 4.592518809687363e-09, 5.6356790345546415e-09, 1.1179101733205243e-07, 2.140286836649352e-09, 8.66557581247207e-09, 1.517388312777257e-07, 7.462730877705326e-07]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6917167901992798, 0.0, 0.0, 0.0, 0.0, 0.016532771289348602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08575718849897385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07860468327999115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04154423996806145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0205534677952528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03823670372366905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004896247759461403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022157857194542885, 0.0, 0.0]], "target": [0.7138746380805969]}, "loss": [6.885151386260986, 0.33704790472984314], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [67]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:03:23.771635", "n_pass": [1, 1, 1], "n_token": 344, "loss": [0.05415330082178116, 0.33704790472984314], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "#INDENT#", "class StderrTextIOWrapper", "(", "TextIOWrapper", ")", ":", "#NEWLINE#", "#INDENT#", "def write(", "self", ",", "text", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "text", ")", "is", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "text", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdout", "#NEWLINE#", "sys", ".", "stdout", "=", "StderrTextIOWrapper", "(", "io", ".", "FileIO", "(", "sys", ".", "stdout", ".", "fileno", "(", ")", ",", "mode", "=", "'w'", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdout", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "(", "True", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "(", "io", ".", "FileIO", "(", "sys", ".", "stderr", ".", "fileno", "(", ")", ",", "mode", "=", "'w'", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 67, "repair_targets": [12, 341], "repair_candidates": [12, 341, 17, 94, 136, 169, 234, 267, 320]}}
{"prediction": {"error_location": 0.9472869038581848, "repair_targets": [0.6917167901992798, 0.022157857194542885], "repair_candidates": [0.6917167901992798, 0.016532771289348602, 0.08575718849897385, 0.07860468327999115, 0.04154423996806145, 0.0205534677952528, 0.03823670372366905, 0.004896247759461403, 0.022157857194542885], "target_probs": 0.7138746380805969}}


{"result": {"time": "2021-02-21 12:03:24.003390", "n_pass": [24, 2, 2], "n_token": 301, "loss": [0.04857415705919266, 0.3809087574481964], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "#INDENT#", "class StderrTextIOWrapper", "(", "TextIOWrapper", ")", ":", "#NEWLINE#", "#INDENT#", "def write(", "self", ",", "text", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "text", ")", "is", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "text", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "(", "io", ".", "FileIO", "(", "sys", ".", "stderr", ".", "fileno", "(", ")", ",", "mode", "=", "'w'", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 67, "repair_targets": [12, 298], "repair_candidates": [12, 298, 17, 94, 136, 169, 191, 224, 277]}}
{"prediction": {"error_location": 0.952586829662323, "repair_targets": [0.6630828380584717, 0.020157406106591225], "repair_candidates": [0.6630828380584717, 0.016068749129772186, 0.07972751557826996, 0.12019059807062149, 0.017952315509319305, 0.03889848291873932, 0.036544788628816605, 0.007377314381301403, 0.020157406106591225], "target_probs": 0.6832402348518372}}


{"result": {"time": "2021-02-21 12:03:24.222079", "n_pass": [48, 3, 3], "n_token": 279, "loss": [0.050984565168619156, 0.4554097652435303], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "#INDENT#", "class StderrTextIOWrapper", "(", "TextIOWrapper", ")", ":", "#NEWLINE#", "#INDENT#", "def write(", "self", ",", "text", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "text", ")", "is", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "text", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 67, "repair_targets": [12, 276], "repair_candidates": [12, 276, 17, 94, 136, 169, 191, 224, 255]}}
{"prediction": {"error_location": 0.9502931237220764, "repair_targets": [0.6086803674697876, 0.025507686659693718], "repair_candidates": [0.6086803674697876, 0.015025420114398003, 0.08066648989915848, 0.12189693748950958, 0.018521565943956375, 0.052739739418029785, 0.06200750544667244, 0.014954285696148872, 0.025507686659693718], "target_probs": 0.6341880559921265}}


{"result": {"time": "2021-02-21 12:03:24.427423", "n_pass": [52, 4, 4], "n_token": 258, "loss": [0.10444755107164383, 0.5574628710746765], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", ")", "is", "unicode", ")", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "text", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 46, "repair_targets": [12, 255], "repair_candidates": [12, 255, 17, 73, 115, 148, 170, 203, 234]}}
{"prediction": {"error_location": 0.9008222222328186, "repair_targets": [0.5651094317436218, 0.007550693117082119], "repair_candidates": [0.5651094317436218, 0.3326733708381653, 0.02740267850458622, 0.02360519953072071, 0.007065188139677048, 0.009633696638047695, 0.02306429110467434, 0.0038954971823841333, 0.007550693117082119], "target_probs": 0.5726601481437683}}


{"result": {"time": "2021-02-21 12:03:24.621683", "n_pass": [53, 5, 5], "n_token": 237, "loss": [0.000906175933778286, 0.12013547122478485], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", ".", "open", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "encoding", "=", "getattr", "(", "sys", ".", "stdin", ",", "'encoding'", ",", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 234], "repair_candidates": [12, 234, 17, 52, 94, 127, 149, 182, 213]}}
{"prediction": {"error_location": 0.9990942478179932, "repair_targets": [0.8818914294242859, 0.004908837378025055], "repair_candidates": [0.8818914294242859, 0.03839639946818352, 0.020622115582227707, 0.023324746638536453, 0.005965030752122402, 0.007940600626170635, 0.014766324311494827, 0.0021845584269613028, 0.004908837378025055], "target_probs": 0.8868002891540527}}


{"result": {"time": "2021-02-21 12:03:24.803263", "n_pass": [56, 6, 6], "n_token": 216, "loss": [0.0011142243165522814, 0.1242586150765419], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdin with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdout", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 213], "repair_candidates": [12, 213, 17, 52, 73, 106, 128, 161, 192]}}
{"prediction": {"error_location": 0.9988864064216614, "repair_targets": [0.8781063556671143, 0.005045060999691486], "repair_candidates": [0.8781063556671143, 0.036595094949007034, 0.020328395068645477, 0.02702086605131626, 0.005446725059300661, 0.010335003025829792, 0.014440018683671951, 0.0026824462693184614, 0.005045060999691486], "target_probs": 0.8831514120101929}}


{"result": {"time": "2021-02-21 12:03:24.974132", "n_pass": [58, 7, 7], "n_token": 194, "loss": [0.0011875727213919163, 0.18091101944446564], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "else", "False", ")", ")", "#NEWLINE#", "sys", ".", "stdout", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 191], "repair_candidates": [12, 191, 17, 52, 73, 84, 106, 139, 170]}}
{"prediction": {"error_location": 0.9988131523132324, "repair_targets": [0.8297680616378784, 0.004741556476801634], "repair_candidates": [0.8297680616378784, 0.03111034259200096, 0.020437033846974373, 0.05825117975473404, 0.023174375295639038, 0.015612457878887653, 0.013616793788969517, 0.0032881854567676783, 0.004741556476801634], "target_probs": 0.8345096111297607}}


{"result": {"time": "2021-02-21 12:03:25.141858", "n_pass": [87, 8, 8], "n_token": 183, "loss": [0.0009970461251214147, 0.1773644983768463], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stdout with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 180], "repair_candidates": [12, 180, 17, 52, 73, 84, 95, 128, 159]}}
{"prediction": {"error_location": 0.9990034699440002, "repair_targets": [0.8330938816070557, 0.004380577709525824], "repair_candidates": [0.8330938816070557, 0.028893055394291878, 0.01923033595085144, 0.05585339665412903, 0.02753499709069729, 0.015060209669172764, 0.013071180321276188, 0.0028823644388467073, 0.004380577709525824], "target_probs": 0.8374744653701782}}


{"result": {"time": "2021-02-21 12:03:25.301535", "n_pass": [89, 9, 9], "n_token": 172, "loss": [0.0009519098093733191, 0.1775505691766739], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "hasattr", "(", "sys", ".", "stderr", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 169], "repair_candidates": [12, 169, 17, 52, 73, 84, 95, 117, 148]}}
{"prediction": {"error_location": 0.9990485310554504, "repair_targets": [0.8329983949661255, 0.004320263396948576], "repair_candidates": [0.8329983949661255, 0.02600990980863571, 0.015441504307091236, 0.03866003826260567, 0.0352000817656517, 0.031437985599040985, 0.012770076282322407, 0.0031616853084415197, 0.004320263396948576], "target_probs": 0.8373186588287354}}


{"result": {"time": "2021-02-21 12:03:25.454497", "n_pass": [90, 10, 10], "n_token": 161, "loss": [0.0012463905150070786, 0.18866610527038574], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "sys", ".", "stderr", ",", "'encoding'", ",", "None", ")", ",", "line_buffering", "=", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 158], "repair_candidates": [12, 158, 17, 52, 73, 84, 95, 106, 137]}}
{"prediction": {"error_location": 0.9987543821334839, "repair_targets": [0.8238074779510498, 0.004255487117916346], "repair_candidates": [0.8238074779510498, 0.027630366384983063, 0.016157664358615875, 0.035208214074373245, 0.03584922105073929, 0.043605972081422806, 0.0036402062978595495, 0.00984540581703186, 0.004255487117916346], "target_probs": 0.8280629515647888}}


{"result": {"time": "2021-02-21 12:03:25.602244", "n_pass": [92, 11, 11], "n_token": 150, "loss": [0.0010633773636072874, 0.20421721041202545], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 147], "repair_candidates": [12, 147, 17, 52, 73, 84, 95, 106, 126]}}
{"prediction": {"error_location": 0.99893718957901, "repair_targets": [0.8104753494262695, 0.004809909500181675], "repair_candidates": [0.8104753494262695, 0.02529195137321949, 0.017434535548090935, 0.03638749569654465, 0.04689309373497963, 0.03977309539914131, 0.0033774201292544603, 0.015557137317955494, 0.004809909500181675], "target_probs": 0.8152852654457092}}


{"result": {"time": "2021-02-21 12:03:25.743905", "n_pass": [94, 12, 12], "n_token": 139, "loss": [0.0008466235012747347, 0.16322661936283112], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def wrap_stdio_in_codecs(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "USING_PYTHON2", ":", "#NEWLINE#", "#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 25, "repair_targets": [12, 136], "repair_candidates": [12, 136, 17, 52, 73, 84, 95, 106, 126]}}
{"prediction": {"error_location": 0.999153733253479, "repair_targets": [0.8394270539283752, 0.009971623308956623], "repair_candidates": [0.8394270539283752, 0.02107418142259121, 0.01415170170366764, 0.04167730733752251, 0.04656064510345459, 0.02024146169424057, 0.0035846170503646135, 0.003311373759061098, 0.009971623308956623], "target_probs": 0.849398672580719}}


{"result": {"time": "2021-02-21 12:03:25.880501", "n_pass": [96, 13, 13], "n_token": 129, "loss": [0.01335826050490141, 0.43130338191986084], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", ",", "self", ".", "encoding", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 126], "repair_candidates": [2, 126, 7, 42, 63, 74, 85, 96, 116]}}
{"prediction": {"error_location": 0.9867304563522339, "repair_targets": [0.6467956900596619, 0.0028660993557423353], "repair_candidates": [0.6467956900596619, 0.2842922508716583, 0.0060132653452456, 0.015988266095519066, 0.025579743087291718, 0.015225050039589405, 0.0015149589162319899, 0.0017248063813894987, 0.0028660993557423353], "target_probs": 0.6496617794036865}}


{"result": {"time": "2021-02-21 12:03:26.012854", "n_pass": [99, 14, 14], "n_token": 119, "loss": [0.0032181162387132645, 0.6031488180160522], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "if", "hasattr", "(", "sys", ".", "stdin", ",", "'fileno'", ")", ":", "#NEWLINE#", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 116], "repair_candidates": [2, 116, 7, 32, 53, 64, 75, 86, 106]}}
{"prediction": {"error_location": 0.9967870712280273, "repair_targets": [0.5453498363494873, 0.0017364242812618613], "repair_candidates": [0.5453498363494873, 0.40224647521972656, 0.002845556940883398, 0.014151287265121937, 0.016985882073640823, 0.014135007746517658, 0.0011529942275956273, 0.0013965086545795202, 0.0017364242812618613], "target_probs": 0.547086238861084}}


{"result": {"time": "2021-02-21 12:03:26.137846", "n_pass": [100, 15, 15], "n_token": 108, "loss": [0.007000679615885019, 0.5858830213546753], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "io", "None", ")", ")", "#NEWLINE#", "sys", ".", "stdin", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 105], "repair_candidates": [2, 105, 7, 21, 42, 53, 64, 75, 95]}}
{"prediction": {"error_location": 0.9930235147476196, "repair_targets": [0.5539290308952332, 0.00268510146997869], "repair_candidates": [0.5539290308952332, 0.26339155435562134, 0.027494551613926888, 0.0702597126364708, 0.04091667756438255, 0.036292776465415955, 0.002375412965193391, 0.002655167132616043, 0.00268510146997869], "target_probs": 0.5566141605377197}}


{"result": {"time": "2021-02-21 12:03:26.257992", "n_pass": [102, 16, 16], "n_token": 97, "loss": [0.009525799192488194, 0.6716546416282654], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 94], "repair_candidates": [2, 94, 7, 21, 31, 42, 53, 64, 84]}}
{"prediction": {"error_location": 0.9905192852020264, "repair_targets": [0.5080863833427429, 0.00277619156986475], "repair_candidates": [0.5080863833427429, 0.26704925298690796, 0.016370020806789398, 0.11689715832471848, 0.048499658703804016, 0.03435719385743141, 0.002389397704973817, 0.003574791131541133, 0.00277619156986475], "target_probs": 0.5108625888824463}}


{"result": {"time": "2021-02-21 12:03:26.377664", "n_pass": [131, 17, 17], "n_token": 92, "loss": [0.010582049377262592, 0.5874609351158142], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "if", "sys", ".", "stdout", ".", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 89], "repair_candidates": [2, 89, 7, 21, 31, 37, 48, 59, 79]}}
{"prediction": {"error_location": 0.9894737601280212, "repair_targets": [0.5526500940322876, 0.0030864730942994356], "repair_candidates": [0.5526500940322876, 0.2727072536945343, 0.016775917261838913, 0.08979674428701401, 0.013326933607459068, 0.045789871364831924, 0.0026491337921470404, 0.003217534627765417, 0.0030864730942994356], "target_probs": 0.5557365417480469}}


{"result": {"time": "2021-02-21 12:03:26.492628", "n_pass": [133, 18, 18], "n_token": 87, "loss": [0.010565417818725109, 0.5603986978530884], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 84], "repair_candidates": [2, 84, 7, 21, 31, 37, 43, 54, 74]}}
{"prediction": {"error_location": 0.9894900918006897, "repair_targets": [0.5676789283752441, 0.0033024493604898453], "repair_candidates": [0.5676789283752441, 0.29767170548439026, 0.014090778306126595, 0.07142769545316696, 0.006352283991873264, 0.031167451292276382, 0.00411345437169075, 0.0041952249594032764, 0.0033024493604898453], "target_probs": 0.5709813833236694}}


{"result": {"time": "2021-02-21 12:03:26.604211", "n_pass": [135, 19, 19], "n_token": 81, "loss": [0.015600547194480896, 0.5927720665931702], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", "#NEWLINE#", "sys", ".", "stderr", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 78], "repair_candidates": [2, 78, 7, 21, 31, 37, 43, 48, 68]}}
{"prediction": {"error_location": 0.9845204949378967, "repair_targets": [0.5494335293769836, 0.0033592472318559885], "repair_candidates": [0.5494335293769836, 0.29487693309783936, 0.015572604723274708, 0.05290047451853752, 0.008116369135677814, 0.062245938926935196, 0.0075974902138113976, 0.005897338502109051, 0.0033592472318559885], "target_probs": 0.5527927875518799}}


{"result": {"time": "2021-02-21 12:03:26.726793", "n_pass": [137, 20, 20], "n_token": 75, "loss": [0.022509317845106125, 0.5717203617095947], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", "=", "StderrTextIOWrapper", "True", ")", "#NEWLINE#", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 72], "repair_candidates": [2, 72, 7, 21, 31, 37, 43, 48, 62]}}
{"prediction": {"error_location": 0.9777420163154602, "repair_targets": [0.5605678558349609, 0.003985511139035225], "repair_candidates": [0.5605678558349609, 0.29024824500083923, 0.014785419218242168, 0.05663774535059929, 0.005844020284712315, 0.04905546456575394, 0.012500089593231678, 0.006375637836754322, 0.003985511139035225], "target_probs": 0.5645533800125122}}


{"result": {"time": "2021-02-21 12:03:26.832001", "n_pass": [138, 21, 21], "n_token": 69, "loss": [0.015336678363382816, 0.5510416626930237], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "#NEWLINE#", "(", "__name__", "+", "': Warning: Unable to wrap sys.stderr with a text codec\\n'", ")", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 66], "repair_candidates": [2, 66, 7, 21, 31, 37, 43, 48, 56]}}
{"prediction": {"error_location": 0.9847803115844727, "repair_targets": [0.573168158531189, 0.0031809983775019646], "repair_candidates": [0.573168158531189, 0.30206120014190674, 0.016304342076182365, 0.0329255536198616, 0.005528853740543127, 0.026568448171019554, 0.021278593689203262, 0.018983833491802216, 0.0031809983775019646], "target_probs": 0.576349139213562}}


{"result": {"time": "2021-02-21 12:03:26.934702", "n_pass": [140, 22, 22], "n_token": 63, "loss": [0.016239037737250328, 0.6165711879730225], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", ")", "#NEWLINE#", "#UNINDENT#", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 60], "repair_candidates": [2, 60, 7, 21, 31, 37, 43, 48, 56]}}
{"prediction": {"error_location": 0.9838920831680298, "repair_targets": [0.5353455543518066, 0.004446541890501976], "repair_candidates": [0.5353455543518066, 0.2866564989089966, 0.014662781730294228, 0.05646960437297821, 0.005086220800876617, 0.036239929497241974, 0.023938411846756935, 0.03715456649661064, 0.004446541890501976], "target_probs": 0.5397921204566956}}


{"result": {"time": "2021-02-21 12:03:27.235863", "n_pass": [177, 25, 23], "n_token": 60, "loss": [0.008440772071480751, 0.614538311958313], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#INDENT#", "global", "_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 15, "repair_targets": [2, 57], "repair_candidates": [2, 57, 7, 21, 31, 37, 43, 48, 56]}}
{"prediction": {"error_location": 0.9915944933891296, "repair_targets": [0.5398588180541992, 0.0010317829437553883], "repair_candidates": [0.5398588180541992, 0.27533575892448425, 0.012020588852465153, 0.048356279730796814, 0.008367550559341908, 0.06799620389938354, 0.04087389260530472, 0.006159092765301466, 0.0010317829437553883], "target_probs": 0.5408905744552612}}


{"result": {"time": "2021-02-21 12:03:27.336772", "n_pass": [178, 26, 24], "n_token": 58, "loss": [0.4997340738773346, 0.654114842414856], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", ")", ":", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 13, "repair_targets": [0, 55], "repair_candidates": [0, 55, 5, 19, 29, 35, 41, 46, 54]}}
{"prediction": {"error_location": 0.6066920757293701, "repair_targets": [0.5187077522277832, 0.0011942855780944228], "repair_candidates": [0.5187077522277832, 0.25380486249923706, 0.008464428596198559, 0.019209930673241615, 0.01438229437917471, 0.09070473164319992, 0.08527162671089172, 0.008260115049779415, 0.0011942855780944228], "target_probs": 0.5199020504951477}}


{"result": {"time": "2021-02-21 12:03:27.534094", "n_pass": [182, 28, 25], "n_token": 56, "loss": [0.3498673141002655, 0.6603407859802246], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", ".", "stdin", "#NEWLINE#", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 53], "repair_candidates": [0, 53, 5, 17, 27, 33, 39, 44, 52]}}
{"prediction": {"error_location": 0.7047816514968872, "repair_targets": [0.5147256851196289, 0.0019495239248499274], "repair_candidates": [0.5147256851196289, 0.0750783160328865, 0.021009624004364014, 0.055486030876636505, 0.020084809511899948, 0.15957462787628174, 0.14108747243881226, 0.011003989726305008, 0.0019495239248499274], "target_probs": 0.5166752338409424}}


{"result": {"time": "2021-02-21 12:03:28.022273", "n_pass": [189, 33, 26], "n_token": 53, "loss": [0.5685911178588867, 0.6898361444473267], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "sys", ".", "stdin", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 50], "repair_candidates": [0, 50, 5, 17, 24, 30, 36, 41, 49]}}
{"prediction": {"error_location": 0.5663227438926697, "repair_targets": [0.4992067813873291, 0.0024514752440154552], "repair_candidates": [0.4992067813873291, 0.058798979967832565, 0.03272254019975662, 0.018222151324152946, 0.024645043537020683, 0.17890861630439758, 0.17251455783843994, 0.012529822066426277, 0.0024514752440154552], "target_probs": 0.5016582608222961}}


{"result": {"time": "2021-02-21 12:03:28.117931", "n_pass": [190, 34, 27], "n_token": 50, "loss": [0.25835442543029785, 0.5456036925315857], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", "#UNINDENT#", "else", "stderr", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 47], "repair_candidates": [0, 47, 5, 17, 21, 27, 33, 38, 46]}}
{"prediction": {"error_location": 0.7723214626312256, "repair_targets": [0.5783368945121765, 0.0011549558257684112], "repair_candidates": [0.5783368945121765, 0.06057930737733841, 0.10957331210374832, 0.05211813375353813, 0.017079245299100876, 0.10473224520683289, 0.06949266791343689, 0.006933192256838083, 0.0011549558257684112], "target_probs": 0.5794918537139893}}


{"result": {"time": "2021-02-21 12:03:28.213104", "n_pass": [192, 35, 28], "n_token": 47, "loss": [0.198365718126297, 0.5397148132324219], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", "sys", "isatty", "(", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 44], "repair_candidates": [0, 44, 5, 17, 21, 24, 30, 35, 43]}}
{"prediction": {"error_location": 0.8200697898864746, "repair_targets": [0.5819244384765625, 0.0009900192962959409], "repair_candidates": [0.5819244384765625, 0.06347887217998505, 0.13527484238147736, 0.025278834626078606, 0.015295790508389473, 0.09679096192121506, 0.07386540621519089, 0.007100928109139204, 0.0009900192962959409], "target_probs": 0.5829144716262817}}


{"result": {"time": "2021-02-21 12:03:28.305687", "n_pass": [194, 36, 29], "n_token": 44, "loss": [0.10990205407142639, 0.3692484200000763], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", ".", "stderr", ".", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 41], "repair_candidates": [0, 41, 5, 17, 21, 24, 27, 32, 40]}}
{"prediction": {"error_location": 0.8959217667579651, "repair_targets": [0.6902413368225098, 0.0010123312240466475], "repair_candidates": [0.6902413368225098, 0.0768340453505516, 0.0706554651260376, 0.032497189939022064, 0.0164765827357769, 0.04386281967163086, 0.06225501373410225, 0.0061651188880205154, 0.0010123312240466475], "target_probs": 0.691253662109375}}


{"result": {"time": "2021-02-21 12:03:28.397062", "n_pass": [196, 37, 30], "n_token": 41, "loss": [0.1537300944328308, 0.44114622473716736], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "=", "sys", ".", "stderr", ".", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 38], "repair_candidates": [0, 38, 5, 17, 21, 24, 27, 29, 37]}}
{"prediction": {"error_location": 0.8575035929679871, "repair_targets": [0.6430013179779053, 0.00029733122210018337], "repair_candidates": [0.6430013179779053, 0.07822447270154953, 0.15231743454933167, 0.02088172361254692, 0.01964334025979042, 0.04627501219511032, 0.036225125193595886, 0.003134261118248105, 0.00029733122210018337], "target_probs": 0.6432986259460449}}


{"result": {"time": "2021-02-21 12:03:28.488286", "n_pass": [198, 38, 31], "n_token": 38, "loss": [0.11922807991504669, 0.44277170300483704], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "=", "sys", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 35], "repair_candidates": [0, 35, 5, 17, 21, 24, 27, 29, 34]}}
{"prediction": {"error_location": 0.8876054286956787, "repair_targets": [0.6418977975845337, 0.000356027070665732], "repair_candidates": [0.6418977975845337, 0.09369940310716629, 0.12168384343385696, 0.044735509902238846, 0.02405308373272419, 0.05363389849662781, 0.018473392352461815, 0.001467080321162939, 0.000356027070665732], "target_probs": 0.6422538161277771}}


{"result": {"time": "2021-02-21 12:03:29.020200", "n_pass": [244, 44, 32], "n_token": 36, "loss": [0.07382582128047943, 0.4141312837600708], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "_original_stream", "=", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 33], "repair_candidates": [0, 33, 5, 17, 21, 24, 27, 29, 32]}}
{"prediction": {"error_location": 0.9288333654403687, "repair_targets": [0.6605633497238159, 0.00035086131538264453], "repair_candidates": [0.6605633497238159, 0.09190885722637177, 0.06205235794186592, 0.03140764310956001, 0.013474661856889725, 0.032093774527311325, 0.10717888176441193, 0.0009697070345282555, 0.00035086131538264453], "target_probs": 0.6609141826629639}}


{"result": {"time": "2021-02-21 12:03:29.108136", "n_pass": [245, 45, 33], "n_token": 34, "loss": [0.060264069586992264, 0.27074941992759705], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped", "=", "True"]}}
{"position": {"error_location": 11, "repair_targets": [0, 31], "repair_candidates": [0, 31, 5, 17, 21, 24, 27, 29, 30]}}
{"prediction": {"error_location": 0.9415157437324524, "repair_targets": [0.7538532614707947, 0.008954337798058987], "repair_candidates": [0.7538532614707947, 0.10500629246234894, 0.05117698013782501, 0.035517409443855286, 0.016935482621192932, 0.0238641407340765, 0.0015199865447357297, 0.003172067226842046, 0.008954337798058987], "target_probs": 0.7628076076507568}}


{"result": {"time": "2021-02-21 12:03:29.194924", "n_pass": [247, 46, 34], "n_token": 32, "loss": [0.11824440211057663, 0.3173418343067169], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "#NEWLINE#", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 11, "repair_targets": [0, 31], "repair_candidates": [0, 31, 5, 17, 21, 24, 27, 29, 30]}}
{"prediction": {"error_location": 0.8884788751602173, "repair_targets": [0.7277727723121643, 0.00030904554296284914], "repair_candidates": [0.7277727723121643, 0.11112412065267563, 0.07535818964242935, 0.04011264443397522, 0.01239819172769785, 0.030552547425031662, 0.0010729858186095953, 0.0012995455181226134, 0.00030904554296284914], "target_probs": 0.7280818223953247}}


{"result": {"time": "2021-02-21 12:03:29.281945", "n_pass": [249, 47, 35], "n_token": 31, "loss": [0.013142508454620838, 0.3064950406551361], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "if", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 10, "repair_targets": [0, 30], "repair_candidates": [0, 30, 4, 16, 20, 23, 26, 28, 29]}}
{"prediction": {"error_location": 0.9869434833526611, "repair_targets": [0.7357202768325806, 0.0003018970601260662], "repair_candidates": [0.7357202768325806, 0.05354321748018265, 0.08361940085887909, 0.08197683840990067, 0.014750388450920582, 0.0282518919557333, 0.0008509507752023637, 0.0009851837530732155, 0.0003018970601260662], "target_probs": 0.7360221743583679}}


{"result": {"time": "2021-02-21 12:03:29.367149", "n_pass": [250, 48, 36], "n_token": 30, "loss": [0.010717215947806835, 0.252608060836792], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "(", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 9, "repair_targets": [0, 29], "repair_candidates": [0, 29, 3, 15, 19, 22, 25, 27, 28]}}
{"prediction": {"error_location": 0.9893401265144348, "repair_targets": [0.7763167023658752, 0.0004555316118057817], "repair_candidates": [0.7763167023658752, 0.03477764502167702, 0.06164950132369995, 0.0761198028922081, 0.014254892244935036, 0.03384554386138916, 0.0012949819210916758, 0.0012854503002017736, 0.0004555316118057817], "target_probs": 0.7767722606658936}}


{"result": {"time": "2021-02-21 12:03:29.451679", "n_pass": [251, 49, 37], "n_token": 29, "loss": [0.004501804243773222, 0.23754742741584778], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "#NEWLINE#", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 8, "repair_targets": [0, 28], "repair_candidates": [0, 28, 2, 14, 18, 21, 24, 26, 27]}}
{"prediction": {"error_location": 0.9955081939697266, "repair_targets": [0.7882435917854309, 0.00031593022868037224], "repair_candidates": [0.7882435917854309, 0.08255771547555923, 0.03695916384458542, 0.06309913843870163, 0.008663640357553959, 0.01853441447019577, 0.0007979264482855797, 0.0008285008952952921, 0.00031593022868037224], "target_probs": 0.7885594964027405}}


{"result": {"time": "2021-02-21 12:03:29.621609", "n_pass": [254, 51, 38], "n_token": 28, "loss": [0.031231282278895378, 0.30010244250297546], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "TextIOWrapper", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 7, "repair_targets": [0, 27], "repair_candidates": [0, 27, 2, 13, 17, 20, 23, 25, 26]}}
{"prediction": {"error_location": 0.9692513942718506, "repair_targets": [0.7404114007949829, 0.0003309062449261546], "repair_candidates": [0.7404114007949829, 0.003816381096839905, 0.11295966804027557, 0.08946269750595093, 0.015530589036643505, 0.03447728604078293, 0.0015821605920791626, 0.0014289473183453083, 0.0003309062449261546], "target_probs": 0.7407423257827759}}


{"result": {"time": "2021-02-21 12:03:29.705712", "n_pass": [255, 52, 39], "n_token": 27, "loss": [0.09839750081300735, 0.655748724937439], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", ".", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 6, "repair_targets": [0, 26], "repair_candidates": [0, 26, 2, 12, 16, 19, 22, 24, 25]}}
{"prediction": {"error_location": 0.9062885642051697, "repair_targets": [0.5188272595405579, 0.0002260150358779356], "repair_candidates": [0.5188272595405579, 0.0013918925542384386, 0.3635164201259613, 0.03503383323550224, 0.03139035403728485, 0.04472583159804344, 0.002679954981431365, 0.0022084477823227644, 0.0002260150358779356], "target_probs": 0.5190532803535461}}


{"result": {"time": "2021-02-21 12:03:29.790531", "n_pass": [256, 53, 40], "n_token": 26, "loss": [0.06914915144443512, 0.540081262588501], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "(", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 5, "repair_targets": [0, 25], "repair_candidates": [0, 25, 2, 11, 15, 18, 21, 23, 24]}}
{"prediction": {"error_location": 0.9331874847412109, "repair_targets": [0.5824353098869324, 0.00026561779668554664], "repair_candidates": [0.5824353098869324, 0.015923328697681427, 0.308574914932251, 0.02350001595914364, 0.025693275034427643, 0.03924090787768364, 0.0022427442017942667, 0.0021238697227090597, 0.00026561779668554664], "target_probs": 0.5827009081840515}}


{"result": {"time": "2021-02-21 12:03:29.956265", "n_pass": [258, 55, 41], "n_token": 25, "loss": [0.028877081349492073, 0.5378954410552979], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "(", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 24], "repair_candidates": [0, 24, 2, 10, 14, 17, 20, 22, 23]}}
{"prediction": {"error_location": 0.971535861492157, "repair_targets": [0.5831956267356873, 0.0007803174084983766], "repair_candidates": [0.5831956267356873, 0.07952190190553665, 0.19558940827846527, 0.0665237084031105, 0.019131138920783997, 0.0499112494289875, 0.0023643174208700657, 0.002982373582199216, 0.0007803174084983766], "target_probs": 0.5839759707450867}}


{"result": {"time": "2021-02-21 12:03:30.203341", "n_pass": [262, 58, 42], "n_token": 24, "loss": [0.026155177503824234, 0.36444395780563354], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "text", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 23], "repair_candidates": [0, 23, 2, 9, 13, 16, 19, 21, 22]}}
{"prediction": {"error_location": 0.9741837978363037, "repair_targets": [0.6942287087440491, 0.0003540736506693065], "repair_candidates": [0.6942287087440491, 0.05751821771264076, 0.1674981266260147, 0.022474128752946854, 0.019472798332571983, 0.0344674289226532, 0.0017350619891658425, 0.002251439495012164, 0.0003540736506693065], "target_probs": 0.6945827603340149}}


{"result": {"time": "2021-02-21 12:03:30.285905", "n_pass": [263, 59, 43], "n_token": 23, "loss": [0.11226385831832886, 0.3735092580318451], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "=", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 22], "repair_candidates": [0, 22, 2, 8, 12, 15, 18, 20, 21]}}
{"prediction": {"error_location": 0.893808126449585, "repair_targets": [0.687803328037262, 0.0005113133229315281], "repair_candidates": [0.687803328037262, 0.03326151892542839, 0.1700187623500824, 0.023272089660167694, 0.023135116323828697, 0.05631601810455322, 0.0025507535319775343, 0.003131161443889141, 0.0005113133229315281], "target_probs": 0.6883146166801453}}


{"result": {"time": "2021-02-21 12:03:30.448435", "n_pass": [266, 61, 44], "n_token": 22, "loss": [0.010603162460029125, 0.2577364146709442], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "sys", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 21], "repair_candidates": [0, 21, 2, 8, 11, 14, 17, 19, 20]}}
{"prediction": {"error_location": 0.9894529581069946, "repair_targets": [0.771713376045227, 0.0010854988358914852], "repair_candidates": [0.771713376045227, 0.05027326941490173, 0.00400516577064991, 0.08515507727861404, 0.016015347093343735, 0.06648854911327362, 0.002477139001712203, 0.0027865860611200333, 0.0010854988358914852], "target_probs": 0.7727988958358765}}


{"result": {"time": "2021-02-21 12:03:30.530534", "n_pass": [267, 62, 45], "n_token": 21, "loss": [0.047975074499845505, 0.32888102531433105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "=", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 20], "repair_candidates": [0, 20, 2, 8, 10, 13, 16, 18, 19]}}
{"prediction": {"error_location": 0.9531573057174683, "repair_targets": [0.7189380526542664, 0.0007905701640993357], "repair_candidates": [0.7189380526542664, 0.04038895294070244, 0.04736943915486336, 0.07856865972280502, 0.02097519114613533, 0.08694760501384735, 0.0030577979050576687, 0.0029638297855854034, 0.0007905701640993357], "target_probs": 0.7197286486625671}}


{"result": {"time": "2021-02-21 12:03:30.610554", "n_pass": [268, 63, 46], "n_token": 20, "loss": [0.012874694541096687, 0.14644460380077362], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "original_stream", "#NEWLINE#", ".", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 19], "repair_candidates": [0, 19, 2, 8, 9, 12, 15, 17, 18]}}
{"prediction": {"error_location": 0.9872077107429504, "repair_targets": [0.8631260991096497, 0.000647456559818238], "repair_candidates": [0.8631260991096497, 0.014859780669212341, 0.009447252377867699, 0.009728011675179005, 0.01955137774348259, 0.07588548213243484, 0.0036428417079150677, 0.00311173009686172, 0.000647456559818238], "target_probs": 0.8637735843658447}}


{"result": {"time": "2021-02-21 12:03:30.690143", "n_pass": [270, 64, 47], "n_token": 18, "loss": [0.00109576724935323, 0.09519568085670471], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "not", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "original_stream", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 4, "repair_targets": [0, 17], "repair_candidates": [0, 17, 2, 8, 9, 10, 13, 15, 16]}}
{"prediction": {"error_location": 0.9989044666290283, "repair_targets": [0.9088793396949768, 0.0003156423626933247], "repair_candidates": [0.9088793396949768, 0.01501693855971098, 0.006940470542758703, 0.005752058699727058, 0.016606098040938377, 0.04169289767742157, 0.0027013812214136124, 0.00209518033079803, 0.0003156423626933247], "target_probs": 0.9091950058937073}}


{"result": {"time": "2021-02-21 12:03:30.770067", "n_pass": [276, 65, 48], "n_token": 17, "loss": [0.00758375646546483, 0.24892130494117737], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "original_stream", "write", "self", ",", "unicode", "#INDENT#", "original_stream", "original_stream", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 3, "repair_targets": [0, 16], "repair_candidates": [0, 16, 1, 7, 8, 9, 12, 14, 15]}}
{"prediction": {"error_location": 0.9924449324607849, "repair_targets": [0.7793571949005127, 0.0002841524838004261], "repair_candidates": [0.7793571949005127, 0.12193567305803299, 0.008258512243628502, 0.007548755034804344, 0.02626645378768444, 0.04878411442041397, 0.00433847913518548, 0.003226806176826358, 0.0002841524838004261], "target_probs": 0.779641330242157}}


{"result": {"time": "2021-02-21 12:03:31.084059", "n_pass": [282, 69, 49], "n_token": 16, "loss": [0.0215450506657362, 0.23217901587486267], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "original_stream", "write", "self", ",", "unicode", "original_stream", "original_stream", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 3, "repair_targets": [0, 15], "repair_candidates": [0, 15, 1, 6, 7, 8, 11, 13, 14]}}
{"prediction": {"error_location": 0.9786852598190308, "repair_targets": [0.7925294637680054, 0.00027474574744701385], "repair_candidates": [0.7925294637680054, 0.08399875462055206, 0.01040630228817463, 0.005822703242301941, 0.021421192213892937, 0.07738574594259262, 0.004252128768712282, 0.003908948972821236, 0.00027474574744701385], "target_probs": 0.7928041815757751}}


{"result": {"time": "2021-02-21 12:03:31.240187", "n_pass": [293, 71, 50], "n_token": 15, "loss": [0.12502428889274597, 0.679547905921936], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["_stdio_wrapped", "original_stream", "write", "self", "unicode", "original_stream", "original_stream", "original_stream", "=", ")", "original_stream", "#NEWLINE#", "original_stream", "original_stream", "_stdio_wrapped"]}}
{"position": {"error_location": 3, "repair_targets": [0, 14], "repair_candidates": [0, 14, 1, 5, 6, 7, 10, 12, 13]}}
{"prediction": {"error_location": 0.8824754953384399, "repair_targets": [0.5064718127250671, 0.00037425803020596504], "repair_candidates": [0.5064718127250671, 0.056546442210674286, 0.04408816620707512, 0.02749459445476532, 0.1756407469511032, 0.17034193873405457, 0.010774191468954086, 0.008267889730632305, 0.00037425803020596504], "target_probs": 0.5068460702896118}}




Minimal simplified tokens:

['_stdio_wrapped', 'original_stream', 'write', 'self', 'unicode', 'original_stream', 'original_stream', 'original_stream', '=', ')', 'original_stream', '#NEWLINE#', 'original_stream', 'original_stream', '_stdio_wrapped']
