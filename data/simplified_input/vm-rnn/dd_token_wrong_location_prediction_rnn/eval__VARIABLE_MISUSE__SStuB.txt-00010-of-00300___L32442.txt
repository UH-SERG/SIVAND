
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "=", "(", "-", "unknowns", ".", "vec", ")", "#NEWLINE#", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"], "error_location": [33], "repair_targets": [4], "repair_candidates": [2, 29, 8, 15, 37, 40, 58, 4, 6, 24, 33, 35, 47, 51], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "OpenMDAO/OpenMDAO/openmdao/core/component.py", "license": "apache-2.0", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 32442, "results": {"model": "rnn", "prob": {"loc": [[0.01956704817712307, 2.184389842341261e-07, 1.2418623782650684e-06, 8.238444371144737e-10, 2.6346936010668287e-07, 2.058605730326235e-08, 1.616584313524072e-06, 7.028144466403319e-08, 1.5102528777788393e-05, 2.360004991430742e-08, 1.0076529832758752e-08, 2.0994702936150134e-06, 5.445687634164642e-07, 8.999371026163772e-09, 3.0853846055833856e-07, 0.010976018384099007, 6.579430191777647e-07, 5.357396162253281e-07, 1.3330303083591843e-08, 3.1128042792261112e-06, 2.7439687855235206e-08, 1.8707673632434307e-08, 1.1713816093106288e-05, 1.3915467889091815e-06, 0.02812289446592331, 2.2450782921623613e-07, 3.1671490319240547e-07, 1.6827636173388782e-08, 1.5197977987213562e-08, 3.7909242678324517e-07, 9.558116076391343e-09, 1.2765483781151943e-08, 4.354861005140265e-08, 0.0800698846578598, 4.406757980746079e-08, 0.04079113155603409, 1.852851312378334e-07, 0.05977075919508934, 8.191020306469454e-09, 1.0026453445277639e-08, 0.02209208346903324, 3.115177094059618e-08, 2.0613306332961656e-06, 2.994773495856862e-08, 1.920167233038228e-05, 5.182023983252293e-07, 2.5503045009145353e-08, 0.004358135163784027, 5.209296318753331e-07, 1.7562010157234909e-07, 4.4851702796222526e-08, 5.80413980060257e-05, 3.595701514313987e-07, 5.135919423082669e-07, 2.118127184758123e-08, 4.5113083615433425e-06, 4.3237102431703534e-07, 2.6836683986175558e-08, 0.7341250777244568, 9.483314755698302e-08, 1.3478815219514217e-07]], "pointer": [[0.0, 0.0, 0.041275959461927414, 0.0, 0.9545618295669556, 0.0, 0.0020364439114928246, 0.0, 0.0007677901885472238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016736424004193395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2191226637223735e-05, 0.0, 0.0, 0.0, 0.0, 7.064083183649927e-05, 0.0, 0.0, 0.0, 1.788234294508584e-05, 0.0, 7.617428491357714e-05, 0.0, 3.198919785063481e-06, 0.0, 0.0, 1.251203957508551e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009214062010869384, 0.0, 0.0, 0.0, 5.591444642050192e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.215348543672008e-07, 0.0, 0.0]], "target": [0.9545618295669556]}, "loss": [2.524855375289917, 0.04650286212563515], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [58]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:35:51.711840", "n_pass": [1, 1, 1], "n_token": 61, "loss": [0.30907586216926575, 0.04650286212563515], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "=", "(", "-", "unknowns", ".", "vec", ")", "#NEWLINE#", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 58, "repair_targets": [4], "repair_candidates": [2, 29, 8, 15, 37, 40, 58, 4, 6, 24, 33, 35, 47, 51]}}
{"prediction": {"error_location": 0.7341250777244568, "repair_targets": [0.9545618295669556], "repair_candidates": [0.041275959461927414, 0.9545618295669556, 0.0020364439114928246, 0.0007677901885472238, 0.00016736424004193395, 3.2191226637223735e-05, 7.064083183649927e-05, 1.788234294508584e-05, 7.617428491357714e-05, 3.198919785063481e-06, 1.251203957508551e-05, 0.0009214062010869384, 5.591444642050192e-05, 8.215348543672008e-07], "target_probs": 0.9545618295669556}}


{"result": {"time": "2021-02-21 12:35:51.796309", "n_pass": [47, 2, 2], "n_token": 57, "loss": [0.42723608016967773, 0.17143739759922028], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "=", "(", "-", "unknowns", ".", "vec", ")", "#NEWLINE#", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 54, "repair_targets": [4], "repair_candidates": [2, 25, 8, 11, 33, 36, 54, 4, 6, 20, 29, 31, 43, 47]}}
{"prediction": {"error_location": 0.6523095369338989, "repair_targets": [0.8424530029296875], "repair_candidates": [0.15295860171318054, 0.8424530029296875, 0.0013662733836099505, 0.0002731896238401532, 9.756570216268301e-05, 8.156632247846574e-05, 3.606056998251006e-05, 2.6550906113698147e-05, 9.491990931564942e-05, 4.2407168621139135e-06, 1.9032871932722628e-05, 0.0025335606187582016, 5.4261097830021754e-05, 1.0982220146615873e-06], "target_probs": 0.8424530029296875}}


{"result": {"time": "2021-02-21 12:35:51.951169", "n_pass": [51, 4, 3], "n_token": 53, "loss": [0.564102292060852, 0.03798668459057808], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "=", "(", "-", "unknowns", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 50, "repair_targets": [4], "repair_candidates": [2, 21, 8, 11, 29, 32, 50, 4, 6, 20, 25, 27, 39, 43]}}
{"prediction": {"error_location": 0.5688706636428833, "repair_targets": [0.9627257585525513], "repair_candidates": [0.034520864486694336, 0.9627257585525513, 0.0009572372073307633, 0.00025831160019151866, 7.377349538728595e-05, 0.0010109933791682124, 0.00010040881170425564, 1.1861908205901273e-05, 2.953365219582338e-05, 1.8557216208137106e-06, 7.176677172537893e-06, 0.0002797298366203904, 2.2248503228183836e-05, 4.0401104683951417e-07], "target_probs": 0.9627257585525513}}


{"result": {"time": "2021-02-21 12:35:52.026598", "n_pass": [55, 5, 4], "n_token": 49, "loss": [0.37312638759613037, 0.07164371758699417], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "vec", "[", ":", "]", "=", "(", "-", "unknowns", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 46, "repair_targets": [4], "repair_candidates": [2, 21, 8, 11, 29, 32, 46, 4, 6, 20, 25, 27, 35, 39]}}
{"prediction": {"error_location": 0.6885782480239868, "repair_targets": [0.9308624863624573], "repair_candidates": [0.06357196718454361, 0.9308624863624573, 0.0017478680238127708, 0.0002847985306289047, 0.0002120712015312165, 0.00203063921071589, 0.000872551288921386, 5.7037759688682854e-05, 5.3528081480180845e-05, 2.599673962322413e-06, 1.4190402907843236e-05, 0.000149145009345375, 0.00014050657046027482, 7.633280461050163e-07], "target_probs": 0.9308624863624573}}


{"result": {"time": "2021-02-21 12:35:52.177337", "n_pass": [64, 7, 5], "n_token": 45, "loss": [0.14526604115962982, 0.22567270696163177], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "=", "(", "-", "unknowns", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 42, "repair_targets": [4], "repair_candidates": [2, 17, 8, 11, 25, 28, 42, 4, 6, 16, 21, 23, 31, 35]}}
{"prediction": {"error_location": 0.8647922873497009, "repair_targets": [0.7979792356491089], "repair_candidates": [0.1894359141588211, 0.7979792356491089, 0.0016746886540204287, 0.00015181054186541587, 0.001947895041666925, 0.0048984624445438385, 0.0011480351677164435, 0.00015448278281837702, 6.738401862094179e-05, 7.421228929160861e-06, 4.139959855820052e-05, 0.0017903842963278294, 0.0006900035077705979, 1.2991354196856264e-05], "target_probs": 0.7979792356491089}}


{"result": {"time": "2021-02-21 12:35:52.322051", "n_pass": [101, 9, 6], "n_token": 43, "loss": [0.12431520223617554, 0.0997936949133873], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "solve_nonlinear", "(", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 40, "repair_targets": [4], "repair_candidates": [2, 15, 8, 11, 23, 26, 40, 4, 6, 14, 19, 21, 29, 33]}}
{"prediction": {"error_location": 0.8831015229225159, "repair_targets": [0.9050241112709045], "repair_candidates": [0.08529432862997055, 0.9050241112709045, 0.0013285254826769233, 0.00017009786097332835, 0.0006764939171262085, 0.004174224101006985, 0.001261579804122448, 0.00012445481843315065, 0.00028494701837189496, 1.1157849257870112e-05, 0.00015674425230827183, 0.0011051251785829663, 0.000385534978704527, 2.7015441901312442e-06], "target_probs": 0.9050241112709045}}


{"result": {"time": "2021-02-21 12:35:52.393434", "n_pass": [103, 10, 7], "n_token": 41, "loss": [0.029747407883405685, 0.2873828113079071], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "]", "+=", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 38, "repair_targets": [4], "repair_candidates": [2, 15, 8, 11, 21, 24, 38, 4, 6, 14, 17, 19, 27, 31]}}
{"prediction": {"error_location": 0.9706906676292419, "repair_targets": [0.7502244710922241], "repair_candidates": [0.09399114549160004, 0.7502244710922241, 0.0017180743161588907, 0.00014053861377760768, 0.0003664912364911288, 0.0860845148563385, 0.05452427268028259, 0.001726163667626679, 0.007399426773190498, 5.121851063449867e-05, 0.0009565187501721084, 0.001920015667565167, 0.0008911492768675089, 5.989172677800525e-06], "target_probs": 0.7502244710922241}}


{"result": {"time": "2021-02-21 12:35:52.463788", "n_pass": [108, 11, 8], "n_token": 39, "loss": [0.7797243595123291, 0.11475671827793121], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", "vec", "[", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 36, "repair_targets": [4], "repair_candidates": [2, 15, 8, 11, 21, 24, 36, 4, 6, 14, 17, 19, 25, 29]}}
{"prediction": {"error_location": 0.4585323929786682, "repair_targets": [0.8915830254554749], "repair_candidates": [0.07283324748277664, 0.8915830254554749, 0.0010619689710438251, 9.522982145426795e-05, 8.32765072118491e-05, 0.0227152481675148, 0.010000132024288177, 0.001070492435246706, 0.00012835390225518495, 1.3099491297907662e-05, 9.044796752277762e-05, 7.117008499335498e-05, 0.00024936668341979384, 4.833508683077525e-06], "target_probs": 0.8915830254554749}}


{"result": {"time": "2021-02-21 12:35:52.606152", "n_pass": [112, 13, 9], "n_token": 37, "loss": [1.1141281127929688, 0.1747840791940689], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def apply_nonlinear(", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [2, 15, 8, 11, 21, 24, 34, 4, 6, 14, 17, 19, 25, 29]}}
{"prediction": {"error_location": 0.3282013237476349, "repair_targets": [0.8396382927894592], "repair_candidates": [0.06414644420146942, 0.8396382927894592, 0.0008792911539785564, 5.9837249864358455e-05, 6.280100933508947e-05, 0.06759154796600342, 0.026103045791387558, 0.0008433196926489472, 0.0002349816495552659, 1.5663090380257927e-05, 8.557936234865338e-05, 0.0001300082658417523, 0.0002063482825178653, 2.7589233013713965e-06], "target_probs": 0.8396382927894592}}


{"result": {"time": "2021-02-21 12:35:52.879489", "n_pass": [117, 17, 10], "n_token": 36, "loss": [0.6153900623321533, 0.22233785688877106], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "vec", "#NEWLINE#", "unknowns", ".", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 33, "repair_targets": [3], "repair_candidates": [1, 14, 7, 10, 20, 23, 33, 3, 5, 13, 16, 18, 24, 28]}}
{"prediction": {"error_location": 0.5404300689697266, "repair_targets": [0.8006448149681091], "repair_candidates": [0.027111798524856567, 0.8006448149681091, 0.003221359336748719, 6.970552203711122e-05, 0.00012047182099195197, 0.09661474823951721, 0.06897041201591492, 0.0015190951526165009, 0.000520555127877742, 2.16936859942507e-05, 0.00017901764658745378, 0.0005166344344615936, 0.0004858422908000648, 3.821819063887233e-06], "target_probs": 0.8006448149681091}}


{"result": {"time": "2021-02-21 12:35:53.017732", "n_pass": [131, 19, 11], "n_token": 34, "loss": [0.6315856575965881, 0.12216953188180923], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", ":", "]", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 31, "repair_targets": [3], "repair_candidates": [1, 14, 7, 10, 20, 23, 31, 3, 5, 13, 16, 18, 24, 26]}}
{"prediction": {"error_location": 0.5317479968070984, "repair_targets": [0.8849983215332031], "repair_candidates": [0.023169277235865593, 0.8849983215332031, 0.002490858780220151, 6.220833893166855e-05, 6.267783464863896e-05, 0.04751811549067497, 0.03685436397790909, 0.0012965325731784105, 0.0016284215962514281, 6.877415580675006e-05, 7.326404738705605e-05, 1.1512215678521898e-05, 0.0017634256510064006, 2.2406354673876194e-06], "target_probs": 0.8849983215332031}}


{"result": {"time": "2021-02-21 12:35:53.083829", "n_pass": [133, 20, 12], "n_token": 32, "loss": [0.14735279977321625, 0.2772115468978882], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [1, 14, 7, 10, 20, 23, 29, 3, 5, 13, 16, 18, 24, 26]}}
{"prediction": {"error_location": 0.8629894852638245, "repair_targets": [0.7578941583633423], "repair_candidates": [0.01780596934258938, 0.7578941583633423, 0.0028829786460846663, 6.114431016612798e-05, 5.220332968747243e-05, 0.1029396802186966, 0.11424386501312256, 0.0019140783697366714, 0.0017459031660109758, 0.00011450616148067638, 6.0555528762051836e-05, 2.338397280254867e-06, 0.00027897072141058743, 3.6780927530344343e-06], "target_probs": 0.7578941583633423}}


{"result": {"time": "2021-02-21 12:35:53.215970", "n_pass": [136, 22, 13], "n_token": 31, "loss": [0.135283425450325, 0.6152892112731934], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "'\\n        Evaluates the residuals for this component. For explicit\\n        components, the residual is the output produced by the current params\\n        minus the previously calculated output. Thus, an explicit component\\n        must execute its solve nonlinear method. Implicit components should\\n        override this and calculate their residuals in place.\\n\\n        Args\\n        ----\\n        params : `VecWrapper`\\n            `VecWrapper` containing parameters. (p)\\n\\n        unknowns : `VecWrapper`\\n            `VecWrapper` containing outputs and states. (u)\\n\\n        resids : `VecWrapper`\\n            `VecWrapper` containing residuals. (r)\\n        '", "#NEWLINE#", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 28, "repair_targets": [2], "repair_candidates": [0, 13, 6, 9, 19, 22, 28, 2, 4, 12, 15, 17, 23, 25]}}
{"prediction": {"error_location": 0.8734682202339172, "repair_targets": [0.5404845476150513], "repair_candidates": [0.014897397719323635, 0.5404845476150513, 0.07575846463441849, 0.00011320385237922892, 0.0001467848924221471, 0.17667028307914734, 0.1574699729681015, 0.005136554129421711, 0.02707565203309059, 0.000964582955930382, 0.0002146748884115368, 7.708085831836797e-06, 0.001043457305058837, 1.665796480665449e-05], "target_probs": 0.5404845476150513}}


{"result": {"time": "2021-02-21 12:35:53.280235", "n_pass": [141, 23, 14], "n_token": 29, "loss": [0.12783776223659515, 0.41738513112068176], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", ".", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 26, "repair_targets": [2], "repair_candidates": [0, 11, 6, 7, 17, 20, 26, 2, 4, 10, 13, 15, 21, 23]}}
{"prediction": {"error_location": 0.879996120929718, "repair_targets": [0.6587671637535095], "repair_candidates": [0.017190219834446907, 0.6587671637535095, 0.09755886346101761, 0.001726736081764102, 0.00016394561680499464, 0.13700053095817566, 0.04496430605649948, 0.003545895917341113, 0.036900874227285385, 0.000888176029548049, 0.00016782547754701227, 7.216029189294204e-06, 0.0011020790552720428, 1.6105752365547232e-05], "target_probs": 0.6587671637535095}}


{"result": {"time": "2021-02-21 12:35:53.411401", "n_pass": [186, 25, 15], "n_token": 28, "loss": [0.04621642827987671, 0.26636144518852234], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "-", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 25, "repair_targets": [2], "repair_candidates": [0, 10, 6, 7, 16, 19, 25, 2, 4, 9, 12, 14, 20, 22]}}
{"prediction": {"error_location": 0.9548352956771851, "repair_targets": [0.7661621570587158], "repair_candidates": [0.06091073900461197, 0.7661621570587158, 0.0818772241473198, 0.0014043196570128202, 0.00020428143034223467, 0.03167050704360008, 0.04721963778138161, 0.0010692001087591052, 0.007418543100357056, 0.00034850696101784706, 0.00033655526931397617, 1.3670661246578675e-05, 0.0013349398504942656, 2.9696746423724107e-05], "target_probs": 0.7661621570587158}}


{"result": {"time": "2021-02-21 12:35:53.475086", "n_pass": [187, 26, 16], "n_token": 27, "loss": [0.020924532786011696, 0.6279387474060059], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", ".", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 24, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 15, 18, 24, 2, 4, 8, 11, 13, 19, 21]}}
{"prediction": {"error_location": 0.9792928695678711, "repair_targets": [0.5336907505989075], "repair_candidates": [0.041187584400177, 0.5336907505989075, 0.12286867946386337, 0.0012033965904265642, 0.0006760403048247099, 0.0656760111451149, 0.2175404578447342, 0.0017245596973225474, 0.013141234405338764, 0.0009371713967993855, 0.00035803738865070045, 1.0393584489065688e-05, 0.0009571358095854521, 2.8516946258605458e-05], "target_probs": 0.5336907505989075}}


{"result": {"time": "2021-02-21 12:35:53.537695", "n_pass": [190, 27, 17], "n_token": 26, "loss": [0.3546465039253235, 0.2825467884540558], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", ",", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 23, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 14, 17, 23, 2, 4, 8, 10, 12, 18, 20]}}
{"prediction": {"error_location": 0.7014213800430298, "repair_targets": [0.7538613677024841], "repair_candidates": [0.13253335654735565, 0.7538613677024841, 0.03179681673645973, 0.006012665573507547, 0.00515494542196393, 0.04807457700371742, 0.010595428757369518, 0.0001358437875751406, 0.004477280657738447, 0.00174569187220186, 0.0015248587587848306, 2.8031239708070643e-05, 0.0038671439979225397, 0.00019187542784493417], "target_probs": 0.7538613677024841}}


{"result": {"time": "2021-02-21 12:35:53.600343", "n_pass": [192, 28, 18], "n_token": 25, "loss": [0.45715659856796265, 0.1791493147611618], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", ")", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 22, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 13, 16, 22, 2, 4, 8, 10, 11, 17, 19]}}
{"prediction": {"error_location": 0.6330811977386475, "repair_targets": [0.8359810709953308], "repair_candidates": [0.08762414008378983, 0.8359810709953308, 0.019967224448919296, 0.003240249352529645, 0.0027253273874521255, 0.026199858635663986, 0.018727455288171768, 0.00022234502830542624, 0.00024404271971434355, 0.0005674784770235419, 0.0009347906452603638, 1.922686533362139e-05, 0.0033584078773856163, 0.00018837164680007845], "target_probs": 0.8359810709953308}}


{"result": {"time": "2021-02-21 12:35:53.723384", "n_pass": [196, 30, 19], "n_token": 24, "loss": [0.6059803366661072, 0.11643947660923004], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", "#NEWLINE#", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 21, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 13, 15, 21, 2, 4, 8, 10, 11, 16, 18]}}
{"prediction": {"error_location": 0.545539379119873, "repair_targets": [0.8900839686393738], "repair_candidates": [0.06143160164356232, 0.8900839686393738, 0.007169534917920828, 0.0037592537701129913, 0.002173955086618662, 0.011182321235537529, 0.014073243364691734, 0.00023562225396744907, 0.0002863165573216975, 0.0032409848645329475, 0.005419278051704168, 4.26978112955112e-05, 0.000748875958379358, 0.00015240040374919772], "target_probs": 0.8900839686393738}}


{"result": {"time": "2021-02-21 12:35:53.788302", "n_pass": [197, 31, 20], "n_token": 23, "loss": [0.541534423828125, 0.12788993120193481], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", "resids", "unknowns", ".", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 20, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 13, 14, 20, 2, 4, 8, 10, 11, 15, 17]}}
{"prediction": {"error_location": 0.5818547606468201, "repair_targets": [0.879950225353241], "repair_candidates": [0.06089072301983833, 0.879950225353241, 0.005315830465406179, 0.004126330837607384, 0.0022102533839643, 0.009029398672282696, 0.008362368680536747, 0.00026526922010816634, 0.000548233394511044, 0.012485942803323269, 0.011959796771407127, 0.0010460929479449987, 0.0031422318425029516, 0.0006672064191661775], "target_probs": 0.879950225353241}}


{"result": {"time": "2021-02-21 12:35:53.848890", "n_pass": [200, 32, 21], "n_token": 22, "loss": [0.4681679308414459, 0.16859646141529083], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", "resids", "unknowns", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 19, "repair_targets": [2], "repair_candidates": [0, 9, 6, 7, 13, 14, 19, 2, 4, 8, 10, 11, 15, 16]}}
{"prediction": {"error_location": 0.6261483430862427, "repair_targets": [0.8448497653007507], "repair_candidates": [0.06824243068695068, 0.8448497653007507, 0.006507606711238623, 0.011303133331239223, 0.004045058041810989, 0.015957029536366463, 0.024036917835474014, 0.0006390553317032754, 0.0009693955653347075, 0.005069581791758537, 0.004755539819598198, 0.012963530607521534, 0.00039373853360302746, 0.00026715148123912513], "target_probs": 0.8448497653007507}}


{"result": {"time": "2021-02-21 12:35:54.151951", "n_pass": [208, 37, 22], "n_token": 21, "loss": [0.2060854732990265, 0.1911991387605667], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "params", ",", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", "resids", "unknowns", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 18, "repair_targets": [1], "repair_candidates": [0, 8, 5, 6, 12, 13, 18, 1, 3, 7, 9, 10, 14, 15]}}
{"prediction": {"error_location": 0.8137634992599487, "repair_targets": [0.8259680867195129], "repair_candidates": [0.05768357589840889, 0.8259680867195129, 0.011130435392260551, 0.008648496121168137, 0.003685092320665717, 0.02923514135181904, 0.05258415266871452, 0.0006147214444354177, 0.000537637562956661, 0.0012729273876175284, 0.0016494818264618516, 0.0067769624292850494, 0.0001533448084956035, 5.98437363805715e-05], "target_probs": 0.8259680867195129}}


{"result": {"time": "2021-02-21 12:35:54.211791", "n_pass": [210, 38, 23], "n_token": 20, "loss": [0.1633462756872177, 0.44595423340797424], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "params", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", ",", "resids", "resids", "unknowns", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 17, "repair_targets": [1], "repair_candidates": [0, 7, 4, 5, 11, 12, 17, 1, 2, 6, 8, 9, 13, 14]}}
{"prediction": {"error_location": 0.8492969870567322, "repair_targets": [0.6402130722999573], "repair_candidates": [0.03193975239992142, 0.6402130722999573, 0.038672927767038345, 0.023228401318192482, 0.009328828193247318, 0.06820107996463776, 0.16656266152858734, 0.003044596640393138, 0.0030905152671039104, 0.004605466965585947, 0.0030466795433312654, 0.00786332506686449, 0.00018020713469013572, 2.2591584638576023e-05], "target_probs": 0.6402130722999573}}


{"result": {"time": "2021-02-21 12:35:54.330131", "n_pass": [219, 40, 24], "n_token": 19, "loss": [0.029025893658399582, 0.4893353581428528], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "params", "unknowns", ",", "resids", "resids", "unknowns", "self", "unknowns", "unknowns", "resids", "resids", "unknowns", "unknowns", ".", "-=", "resids", ".", "vec"]}}
{"position": {"error_location": 16, "repair_targets": [1], "repair_candidates": [0, 7, 4, 5, 10, 11, 16, 1, 2, 6, 8, 9, 12, 13]}}
{"prediction": {"error_location": 0.9713913202285767, "repair_targets": [0.6130337119102478], "repair_candidates": [0.024305161088705063, 0.6130337119102478, 0.03716143220663071, 0.027032796293497086, 0.01285986416041851, 0.0823579654097557, 0.154782235622406, 0.015512650832533836, 0.019805042073130608, 0.00494516221806407, 0.00357803818769753, 0.0043881055898964405, 0.00023136594973038882, 6.537721674249042e-06], "target_probs": 0.6130337119102478}}




Minimal simplified tokens:

['self', 'params', 'unknowns', ',', 'resids', 'resids', 'unknowns', 'self', 'unknowns', 'unknowns', 'resids', 'resids', 'unknowns', 'unknowns', '.', '-=', 'resids', '.', 'vec']
