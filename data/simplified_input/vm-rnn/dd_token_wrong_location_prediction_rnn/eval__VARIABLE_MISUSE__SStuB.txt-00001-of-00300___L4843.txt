
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", "prec", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", ".", "one", "#NEWLINE#", "for", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"], "error_location": [54], "repair_targets": [21, 34], "repair_candidates": [2, 13, 23, 44, 4, 30, 11, 48, 21, 34, 28, 36, 54], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "fredrik-johansson/mpmath/mpmath/ctx_mp.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 4843, "results": {"model": "rnn", "prob": {"loc": [[0.23940995335578918, 1.5909978401396074e-07, 7.458340292032517e-07, 1.593637000141257e-09, 3.504028143197502e-07, 2.3541302240914774e-08, 1.8655046396531816e-09, 2.1234557223692718e-08, 1.5114354212641956e-08, 4.380761975397718e-09, 1.5278466491963627e-08, 2.743828808604576e-08, 2.581312941174474e-08, 0.0043189204297959805, 5.860879781494077e-08, 6.088849602292612e-08, 2.9396267109405017e-07, 4.323422217566986e-06, 4.931015951115114e-07, 8.142114893416874e-07, 1.4943206849693524e-07, 5.970189818071958e-07, 1.1224288698485907e-07, 0.007140368688851595, 2.186558418770801e-07, 3.751673318674875e-07, 4.015049853478558e-06, 1.0307906705975256e-07, 3.082210184857104e-07, 8.103297091111017e-07, 0.00016069973935373127, 4.32255228588474e-06, 9.082587553166377e-07, 1.0698949637344413e-07, 6.384508742485195e-05, 7.469412111049678e-08, 0.04311928153038025, 9.454174119127856e-07, 2.719586689181597e-07, 4.3482629052959965e-07, 5.7279834436485544e-05, 2.7523437893250957e-06, 2.769722414086573e-06, 1.1817503420274988e-08, 4.6621451588180207e-07, 2.597732020603871e-07, 1.908663094241092e-08, 3.4408120086482086e-07, 0.4237276017665863, 3.0314154173538554e-06, 1.5592539170938835e-07, 8.237482518325123e-08, 0.00019967323169112206, 2.111524372594431e-05, 0.28174927830696106, 8.558363902011479e-07]], "pointer": [[0.0, 0.0, 0.01893269084393978, 0.0, 0.047695342451334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05743870511651039, 0.0, 2.1749567167717032e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13065296411514282, 0.0, 4.944028478348628e-05, 0.0, 0.0, 0.0, 0.0, 0.021095339208841324, 0.0, 0.00011809623538283631, 0.0, 0.0, 0.0, 0.7234172224998474, 0.0, 3.07725349557586e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001622535492060706, 0.0, 0.0, 0.0, 0.00017284619389101863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00021254605962894857, 0.0]], "target": [0.8540701866149902]}, "loss": [1.2667375802993774, 0.15774190425872803], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [48]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:33:43.878238", "n_pass": [1, 1, 1], "n_token": 56, "loss": [0.8586643934249878, 0.15774190425872803], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", "prec", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", ".", "one", "#NEWLINE#", "for", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"]}}
{"position": {"error_location": 48, "repair_targets": [21, 34], "repair_candidates": [2, 13, 23, 44, 4, 30, 11, 48, 21, 34, 28, 36, 54]}}
{"prediction": {"error_location": 0.4237276017665863, "repair_targets": [0.13065296411514282, 0.7234172224998474], "repair_candidates": [0.01893269084393978, 0.047695342451334, 0.05743870511651039, 2.1749567167717032e-05, 0.13065296411514282, 4.944028478348628e-05, 0.021095339208841324, 0.00011809623538283631, 0.7234172224998474, 3.07725349557586e-05, 0.0001622535492060706, 0.00017284619389101863, 0.00021254605962894857], "target_probs": 0.8540701866149902}}


{"result": {"time": "2021-02-21 11:33:44.031502", "n_pass": [46, 3, 2], "n_token": 53, "loss": [1.078279733657837, 0.2434975951910019], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", "prec", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", ".", "one", "#NEWLINE#", "for", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"]}}
{"position": {"error_location": 45, "repair_targets": [18, 31], "repair_candidates": [2, 10, 20, 41, 4, 27, 8, 45, 18, 31, 25, 33, 51]}}
{"prediction": {"error_location": 0.3401801884174347, "repair_targets": [0.09545477479696274, 0.6884266138076782], "repair_candidates": [0.014815629459917545, 0.0333937332034111, 0.1511065661907196, 2.0017776478198357e-05, 0.09545477479696274, 3.232676681363955e-05, 0.01611105538904667, 0.00012125352077418938, 0.6884266138076782, 2.4406410375377163e-05, 0.00013625829888042063, 0.00012391063501127064, 0.00023341577616520226], "target_probs": 0.7838813662528992}}


{"result": {"time": "2021-02-21 11:33:44.253648", "n_pass": [52, 6, 3], "n_token": 49, "loss": [0.8287826776504517, 0.2676577568054199], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", "prec", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"]}}
{"position": {"error_location": 41, "repair_targets": [18, 27], "repair_candidates": [2, 10, 20, 37, 4, 23, 8, 41, 18, 27, 21, 29, 47]}}
{"prediction": {"error_location": 0.4365803599357605, "repair_targets": [0.342132568359375, 0.423037052154541], "repair_candidates": [0.02552756667137146, 0.03885536640882492, 0.16829237341880798, 2.350176509935409e-05, 0.342132568359375, 0.0015722910175099969, 4.2203599150525406e-05, 0.00012164616055088118, 0.423037052154541, 2.8128704798291437e-05, 7.420453039230779e-05, 0.00017898596706800163, 0.00011407205602154136], "target_probs": 0.765169620513916}}


{"result": {"time": "2021-02-21 11:33:44.325849", "n_pass": [56, 7, 4], "n_token": 45, "loss": [0.5372490286827087, 0.18406689167022705], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", "prec", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"]}}
{"position": {"error_location": 37, "repair_targets": [18, 27], "repair_candidates": [2, 10, 20, 33, 4, 23, 8, 37, 18, 27, 21, 29, 43]}}
{"prediction": {"error_location": 0.584353506565094, "repair_targets": [0.5323320627212524, 0.29954808950424194], "repair_candidates": [0.016100792214274406, 0.03121074289083481, 0.11872598528862, 1.7811073121265508e-05, 0.5323320627212524, 0.0014743778156116605, 3.364497752045281e-05, 0.00010946498514385894, 0.29954808950424194, 4.1481154767097905e-05, 0.00014062219997867942, 0.0001411533448845148, 0.0001237633405253291], "target_probs": 0.8318801522254944}}


{"result": {"time": "2021-02-21 11:33:44.399089", "n_pass": [64, 8, 5], "n_token": 42, "loss": [0.7852550745010376, 0.23984062671661377], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "#UNINDENT#", "return", "(", "+", "p", ")"]}}
{"position": {"error_location": 34, "repair_targets": [15, 24], "repair_candidates": [2, 10, 17, 30, 4, 20, 8, 34, 15, 24, 18, 26, 40]}}
{"prediction": {"error_location": 0.45600348711013794, "repair_targets": [0.613016664981842, 0.173736572265625], "repair_candidates": [0.007331301923841238, 0.0205020010471344, 0.1825968623161316, 6.761115946574137e-05, 0.613016664981842, 0.0021472966764122248, 5.048407183494419e-05, 0.00011529609764693305, 0.173736572265625, 3.910337181878276e-05, 0.00016125566617120057, 0.00012744746345560998, 0.00010812922118930146], "target_probs": 0.786753237247467}}


{"result": {"time": "2021-02-21 11:33:44.817103", "n_pass": [114, 14, 6], "n_token": 40, "loss": [0.61741042137146, 0.27347618341445923], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "(", "+", "p", ")"]}}
{"position": {"error_location": 34, "repair_targets": [15, 24], "repair_candidates": [2, 10, 17, 30, 4, 20, 8, 34, 15, 24, 18, 26, 38]}}
{"prediction": {"error_location": 0.5393393635749817, "repair_targets": [0.5549830198287964, 0.20574741065502167], "repair_candidates": [0.009420261718332767, 0.021083185449242592, 0.20634932816028595, 7.545945845777169e-05, 0.5549830198287964, 0.0017207891214638948, 3.541810656315647e-05, 7.535504846600816e-05, 0.20574741065502167, 3.1335937819676474e-05, 0.00010099633800564334, 8.658105798531324e-05, 0.0002908759634010494], "target_probs": 0.7607304453849792}}


{"result": {"time": "2021-02-21 11:33:44.885425", "n_pass": [115, 15, 7], "n_token": 38, "loss": [0.10561426728963852, 0.4622951149940491], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 34, "repair_targets": [15, 24], "repair_candidates": [2, 10, 17, 30, 4, 20, 8, 34, 15, 24, 18, 26, 36]}}
{"prediction": {"error_location": 0.8997715711593628, "repair_targets": [0.5217675566673279, 0.10806885361671448], "repair_candidates": [0.016688672825694084, 0.023754054680466652, 0.32738491892814636, 0.00015679342322982848, 0.5217675566673279, 0.0016324662137776613, 2.6970044928020798e-05, 6.064725312171504e-05, 0.10806885361671448, 2.6829819034901448e-05, 7.623821147717535e-05, 9.39129531616345e-05, 0.0002620162267703563], "target_probs": 0.6298364400863647}}


{"result": {"time": "2021-02-21 11:33:44.953446", "n_pass": [117, 16, 8], "n_token": 37, "loss": [0.10723977535963058, 0.5049523115158081], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", ",", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 33, "repair_targets": [14, 23], "repair_candidates": [1, 9, 16, 29, 3, 19, 7, 33, 14, 23, 17, 25, 35]}}
{"prediction": {"error_location": 0.8983103632926941, "repair_targets": [0.450247585773468, 0.15328675508499146], "repair_candidates": [0.03946121037006378, 0.03174041211605072, 0.3212954103946686, 0.00021801918046548963, 0.450247585773468, 0.00307251769118011, 3.940435635740869e-05, 6.751664477633312e-05, 0.15328675508499146, 5.30282013642136e-05, 8.13324295450002e-05, 0.00013290120114106685, 0.00030386680737137794], "target_probs": 0.6035343408584595}}


{"result": {"time": "2021-02-21 11:33:45.087682", "n_pass": [120, 18, 9], "n_token": 36, "loss": [0.1539391130208969, 0.42729365825653076], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", "factors", ")", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 32, "repair_targets": [13, 22], "repair_candidates": [1, 8, 15, 28, 2, 18, 6, 32, 13, 22, 16, 24, 34]}}
{"prediction": {"error_location": 0.8573242425918579, "repair_targets": [0.4994930922985077, 0.15277886390686035], "repair_candidates": [0.01050298847258091, 0.019873695448040962, 0.31283897161483765, 0.0002565657487139106, 0.4994930922985077, 0.0033722135704010725, 6.528903759317473e-05, 9.04987973626703e-05, 0.15277886390686035, 6.472525274148211e-05, 0.00010112809832207859, 0.00016603467520326376, 0.00039589626248925924], "target_probs": 0.6522719860076904}}


{"result": {"time": "2021-02-21 11:33:45.156815", "n_pass": [122, 19, 10], "n_token": 35, "loss": [0.2795361280441284, 0.5992525815963745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", "factors", "\"\\n        Calculates a product containing a finite number of factors (for\\n        infinite products, see :func:`~mpmath.nprod`). The factors will be\\n        converted to mpmath numbers.\\n\\n            >>> from mpmath import *\\n            >>> mp.dps = 15; mp.pretty = False\\n            >>> fprod([1, 2, 0.5, 7])\\n            mpf('7.0')\\n\\n        \"", "#NEWLINE#", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 31, "repair_targets": [12, 21], "repair_candidates": [1, 7, 14, 27, 2, 17, 5, 31, 12, 21, 15, 23, 33]}}
{"prediction": {"error_location": 0.7561343908309937, "repair_targets": [0.39077118039131165, 0.15845079720020294], "repair_candidates": [0.012874583713710308, 0.024544188752770424, 0.4067501723766327, 0.0004296129336580634, 0.39077118039131165, 0.004556700121611357, 0.00012097298895241693, 0.0002581179141998291, 0.15845079720020294, 0.00016638697707094252, 0.00013713900989387184, 0.000331408460624516, 0.0006087387446314096], "target_probs": 0.5492219924926758}}


{"result": {"time": "2021-02-21 11:33:45.222634", "n_pass": [123, 20, 11], "n_token": 33, "loss": [0.12817266583442688, 0.4519793391227722], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", "factors", "orig", "=", "ctx", ".", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 29, "repair_targets": [10, 19], "repair_candidates": [1, 5, 12, 25, 2, 15, 3, 29, 10, 19, 13, 21, 31]}}
{"prediction": {"error_location": 0.8797014951705933, "repair_targets": [0.5084795951843262, 0.12788774073123932], "repair_candidates": [0.04058569669723511, 0.11908208578824997, 0.19769461452960968, 0.001522044069133699, 0.5084795951843262, 0.002987181069329381, 8.665024506626651e-05, 0.00022736372193321586, 0.12788774073123932, 0.00013686188322026283, 0.0002569282369222492, 0.0002881897671613842, 0.0007650296902284026], "target_probs": 0.6363673210144043}}


{"result": {"time": "2021-02-21 11:33:45.287266", "n_pass": [126, 21, 12], "n_token": 31, "loss": [0.2197204977273941, 0.4713960289955139], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", "factors", "orig", "=", "ctx", ".", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 27, "repair_targets": [8, 17], "repair_candidates": [1, 5, 10, 23, 2, 13, 3, 27, 8, 17, 11, 19, 29]}}
{"prediction": {"error_location": 0.802743136882782, "repair_targets": [0.4839191734790802, 0.14021122455596924], "repair_candidates": [0.053696002811193466, 0.13578280806541443, 0.17098359763622284, 0.00029503635596483946, 0.4839191734790802, 0.012878833338618279, 0.0002869163581635803, 0.00019814964616671205, 0.14021122455596924, 8.831444574752823e-05, 0.0002416183997411281, 0.0004511022416409105, 0.000967164698522538], "target_probs": 0.624130368232727}}


{"result": {"time": "2021-02-21 11:33:45.413789", "n_pass": [134, 23, 13], "n_token": 29, "loss": [0.18037620186805725, 0.2320064902305603], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def fprod(", "ctx", "factors", "orig", "=", "ctx", ".", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 25, "repair_targets": [8, 17], "repair_candidates": [1, 5, 10, 21, 2, 13, 3, 25, 8, 17, 11, 19, 27]}}
{"prediction": {"error_location": 0.8349560499191284, "repair_targets": [0.3351215124130249, 0.4578194320201874], "repair_candidates": [0.027085650712251663, 0.0801428034901619, 0.09364546835422516, 0.00016313041851390153, 0.3351215124130249, 0.005334497895091772, 0.0001847248204285279, 0.000122580531751737, 0.4578194320201874, 3.7033714761491865e-05, 2.1843014110345393e-05, 0.00013453865540213883, 0.00018682547670323402], "target_probs": 0.7929409742355347}}


{"result": {"time": "2021-02-21 11:33:45.542089", "n_pass": [139, 25, 14], "n_token": 28, "loss": [0.6045533418655396, 0.3933355212211609], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "=", "ctx", ".", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 24, "repair_targets": [7, 16], "repair_candidates": [0, 4, 9, 20, 1, 12, 2, 24, 7, 16, 10, 18, 26]}}
{"prediction": {"error_location": 0.5463184118270874, "repair_targets": [0.27243268489837646, 0.4023696184158325], "repair_candidates": [0.03919458016753197, 0.1946154683828354, 0.08235576748847961, 8.412486931774765e-05, 0.27243268489837646, 0.00820664782077074, 0.00013700479757972062, 0.0001504637475591153, 0.4023696184158325, 3.921867028111592e-05, 1.5940415323711932e-05, 0.00021143264893908054, 0.00018708630523178726], "target_probs": 0.674802303314209}}


{"result": {"time": "2021-02-21 11:33:45.729181", "n_pass": [182, 28, 15], "n_token": 27, "loss": [0.581875741481781, 0.16104698181152344], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", ".", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 23, "repair_targets": [6, 15], "repair_candidates": [0, 3, 8, 19, 1, 11, 2, 23, 6, 15, 9, 17, 25]}}
{"prediction": {"error_location": 0.5588490962982178, "repair_targets": [0.2777887284755707, 0.5734633207321167], "repair_candidates": [0.04101894423365593, 0.07341696321964264, 0.012692335993051529, 0.0004944995744153857, 0.2777887284755707, 0.016993161290884018, 0.0011047481093555689, 0.0015745999990031123, 0.5734633207321167, 0.0002654535055626184, 3.40196602337528e-05, 0.0007446326198987663, 0.00040858262218534946], "target_probs": 0.8512520790100098}}


{"result": {"time": "2021-02-21 11:33:45.791163", "n_pass": [184, 29, 16], "n_token": 26, "loss": [0.20537327229976654, 0.1329731047153473], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "#INDENT#", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 22, "repair_targets": [5, 14], "repair_candidates": [0, 3, 7, 18, 1, 10, 2, 22, 5, 14, 8, 16, 24]}}
{"prediction": {"error_location": 0.8143432140350342, "repair_targets": [0.23019354045391083, 0.6452950835227966], "repair_candidates": [0.03878818452358246, 0.05294405668973923, 0.013220902532339096, 0.008110707625746727, 0.23019354045391083, 0.008310644887387753, 0.0005409962614066899, 0.0018871813081204891, 0.6452950835227966, 0.00016491280985064805, 2.511249294911977e-05, 0.0002883959678001702, 0.00023029140720609576], "target_probs": 0.8754886388778687}}


{"result": {"time": "2021-02-21 11:33:45.852425", "n_pass": [185, 30, 17], "n_token": 25, "loss": [0.5843645930290222, 0.36927086114883423], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "in", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 21, "repair_targets": [4, 13], "repair_candidates": [0, 3, 6, 17, 1, 9, 2, 21, 4, 13, 7, 15, 23]}}
{"prediction": {"error_location": 0.5574599504470825, "repair_targets": [0.07762671262025833, 0.6136114597320557], "repair_candidates": [0.04002075269818306, 0.07256379723548889, 0.09796655923128128, 0.09060224890708923, 0.07762671262025833, 0.005693856626749039, 0.00028452862170524895, 0.0008266384247690439, 0.6136114597320557, 8.478163363179192e-05, 2.9714896299992688e-05, 0.00023105720174498856, 0.0004579066298902035], "target_probs": 0.6912381649017334}}


{"result": {"time": "2021-02-21 11:33:45.977093", "n_pass": [190, 32, 18], "n_token": 24, "loss": [0.5052088499069214, 0.27658337354660034], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", ":", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 20, "repair_targets": [4, 12], "repair_candidates": [0, 3, 6, 16, 1, 8, 2, 20, 4, 12, 7, 14, 22]}}
{"prediction": {"error_location": 0.6033796072006226, "repair_targets": [0.11642716079950333, 0.6419432163238525], "repair_candidates": [0.03614994138479233, 0.052059322595596313, 0.056260280311107635, 0.09485180675983429, 0.11642716079950333, 0.0009984031785279512, 8.227390208048746e-05, 0.0006258880603127182, 0.6419432163238525, 9.854768723016605e-05, 1.995684033317957e-05, 0.00017095153452828526, 0.00031224777922034264], "target_probs": 0.7583703994750977}}


{"result": {"time": "2021-02-21 11:33:46.037923", "n_pass": [192, 33, 19], "n_token": 23, "loss": [0.2475815713405609, 0.31326428055763245], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#NEWLINE#", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 19, "repair_targets": [4, 11], "repair_candidates": [0, 3, 6, 15, 1, 8, 2, 19, 4, 11, 7, 13, 21]}}
{"prediction": {"error_location": 0.7806865572929382, "repair_targets": [0.22527463734149933, 0.5057820677757263], "repair_candidates": [0.03183351084589958, 0.04334443435072899, 0.05493998900055885, 0.13637147843837738, 0.22527463734149933, 0.0012014997191727161, 4.6858225687174127e-05, 0.0006857207044959068, 0.5057820677757263, 0.00017028518777806312, 2.2147540221340023e-05, 0.00010899945482378826, 0.00021834367362316698], "target_probs": 0.7310566902160645}}


{"result": {"time": "2021-02-21 11:33:46.098037", "n_pass": [193, 34, 20], "n_token": 22, "loss": [0.8681161403656006, 0.2294396162033081], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#INDENT#", "v", "*=", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 18, "repair_targets": [4, 10], "repair_candidates": [0, 3, 6, 14, 1, 8, 2, 18, 4, 10, 7, 12, 20]}}
{"prediction": {"error_location": 0.41974154114723206, "repair_targets": [0.2447192221879959, 0.5502597689628601], "repair_candidates": [0.04227951541543007, 0.056496042758226395, 0.04021848738193512, 0.06370092928409576, 0.2447192221879959, 0.00029455721960403025, 2.762012809398584e-05, 0.0010346798226237297, 0.5502597689628601, 0.0002324362430954352, 2.8470889446907677e-05, 0.00036838813684880733, 0.00033983838511630893], "target_probs": 0.7949789762496948}}


{"result": {"time": "2021-02-21 11:33:46.216756", "n_pass": [196, 36, 21], "n_token": 21, "loss": [0.03184393793344498, 0.2575526535511017], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#INDENT#", "v", "p", "#NEWLINE#", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 17, "repair_targets": [4, 10], "repair_candidates": [0, 3, 6, 13, 1, 8, 2, 17, 4, 10, 7, 11, 19]}}
{"prediction": {"error_location": 0.9686577320098877, "repair_targets": [0.7478039264678955, 0.02513699233531952], "repair_candidates": [0.04491594806313515, 0.04054771363735199, 0.021906500682234764, 0.11742272973060608, 0.7478039264678955, 0.00021004064183216542, 3.4111086279153824e-05, 0.0016776412958279252, 0.02513699233531952, 0.0001255437673535198, 3.448481947998516e-05, 7.91396014392376e-05, 0.00010524324898142368], "target_probs": 0.7729409337043762}}


{"result": {"time": "2021-02-21 11:33:46.278105", "n_pass": [198, 37, 22], "n_token": 20, "loss": [0.07118696719408035, 0.43713945150375366], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#INDENT#", "v", "p", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p", ")"]}}
{"position": {"error_location": 16, "repair_targets": [4, 10], "repair_candidates": [0, 3, 6, 12, 1, 8, 2, 16, 4, 10, 7, 11, 18]}}
{"prediction": {"error_location": 0.9312878847122192, "repair_targets": [0.6413900852203369, 0.004491281695663929], "repair_candidates": [0.10262171924114227, 0.09575935453176498, 0.04265599697828293, 0.10820183902978897, 0.6413900852203369, 0.0008611779194325209, 7.85787487984635e-05, 0.0029488245490938425, 0.004491281695663929, 0.000443318800535053, 0.00018875228124670684, 0.0001592904154676944, 0.00019986221741419286], "target_probs": 0.6458813548088074}}


{"result": {"time": "2021-02-21 11:33:46.568559", "n_pass": [206, 42, 23], "n_token": 19, "loss": [0.04519888386130333, 0.5666166543960571], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#INDENT#", "v", "p", "ctx", ".", "prec", "=", "orig", "#NEWLINE#", "p"]}}
{"position": {"error_location": 16, "repair_targets": [4, 10], "repair_candidates": [0, 3, 6, 12, 1, 8, 2, 16, 4, 10, 7, 11, 18]}}
{"prediction": {"error_location": 0.9558073878288269, "repair_targets": [0.5557078719139099, 0.011734173633158207], "repair_candidates": [0.13653486967086792, 0.12183747440576553, 0.047015707939863205, 0.12060721963644028, 0.5557078719139099, 0.0011751007987186313, 0.00010007854143623263, 0.0037201480008661747, 0.011734173633158207, 0.0008896799990907311, 0.00032221764558926225, 0.00014959333930164576, 0.0002058876707451418], "target_probs": 0.5674420595169067}}


{"result": {"time": "2021-02-21 11:33:46.917889", "n_pass": [224, 48, 24], "n_token": 18, "loss": [0.7380385994911194, 0.569430947303772], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["ctx", "factors", "orig", "ctx", "v", "=", "ctx", "p", "factors", "#INDENT#", "v", "p", "ctx", ".", "prec", "=", "orig", "p"]}}
{"position": {"error_location": 16, "repair_targets": [4, 10], "repair_candidates": [0, 3, 6, 12, 1, 8, 2, 16, 4, 10, 7, 11, 17]}}
{"prediction": {"error_location": 0.4780506491661072, "repair_targets": [0.5556852221488953, 0.01016212347894907], "repair_candidates": [0.1523330807685852, 0.12338065356016159, 0.04211023449897766, 0.10958828777074814, 0.5556852221488953, 0.000954180839471519, 0.00012327097647357732, 0.0036823279224336147, 0.01016212347894907, 0.0007567157736048102, 0.0002503802243154496, 0.000866598216816783, 0.00010687623580452055], "target_probs": 0.5658473372459412}}




Minimal simplified tokens:

['ctx', 'factors', 'orig', 'ctx', 'v', '=', 'ctx', 'p', 'factors', '#INDENT#', 'v', 'p', 'ctx', '.', 'prec', '=', 'orig', 'p']
