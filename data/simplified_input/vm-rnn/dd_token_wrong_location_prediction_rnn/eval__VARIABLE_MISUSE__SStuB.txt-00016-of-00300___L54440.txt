
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "flake8ext", "#NEWLINE#", "def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "re", ".", "search", "(", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "re", ".", "search", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")"], "error_location": [28], "repair_targets": [5, 54], "repair_candidates": [5, 54, 33, 42, 59, 68, 7, 16, 28], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "openstack/neutron/neutron/hacking/checks.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00016-of-00300", "js_count": 54440, "results": {"model": "rnn", "prob": {"loc": [[0.037836652249097824, 5.119031811773311e-07, 9.359347785675709e-08, 1.3242917873412807e-08, 4.601968806028367e-10, 2.914035124312875e-10, 1.633924245902918e-10, 4.3071292310514764e-08, 2.4008646182238635e-09, 4.823505150852725e-09, 7.605613205896589e-08, 5.978650392535201e-07, 1.1374639008465692e-08, 2.7885065367883044e-09, 2.571208881363418e-07, 3.266549902036786e-05, 0.0012265354162082076, 5.975842753969118e-08, 2.131288923123975e-08, 7.902931997705309e-08, 3.824212910785718e-07, 2.6338042857787514e-08, 6.078614944726723e-08, 1.880815503341182e-09, 2.709903856867868e-09, 6.645241246161504e-09, 2.138643218074776e-08, 8.910525366445654e-07, 0.0007810845854692161, 3.6457603602713107e-09, 9.355023422585873e-09, 7.863567219601464e-08, 9.637874498480414e-09, 5.49807168681582e-07, 5.9485163461658885e-08, 6.583641010138308e-08, 4.206455628263939e-08, 5.227580035516155e-10, 6.858578149859795e-09, 1.630834987054186e-07, 0.00011595711839618161, 3.237038859182917e-09, 0.058260928839445114, 3.063267683955928e-07, 3.208439025570442e-08, 1.9981368382104847e-07, 5.758131010225043e-06, 2.8410777730414338e-08, 4.985811870028556e-07, 1.7010600927847008e-08, 1.7410009434115636e-08, 1.5576769385461375e-07, 1.3864037917699079e-08, 8.396308004421371e-08, 0.900632381439209, 0.00012223102385178208, 1.2760694971802877e-06, 6.997113928264298e-07, 2.4253147046238155e-08, 4.096830821254116e-07, 2.049794147751527e-07, 2.863990289370122e-07, 2.3839378116008447e-07, 3.9772993787323685e-09, 1.0955425011616171e-07, 1.1104144732598797e-06, 8.931225602282211e-05, 3.571600259988372e-08, 0.0008864719420671463, 4.2252640497508764e-08, 4.5666567416446924e-08]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.6116920709609985, 0.0, 0.06665179133415222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004401342011988163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2486027032136917, 0.0, 0.0, 0.0, 0.0, 0.04689231887459755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014619462192058563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002083925064653158, 0.0, 0.0, 0.0, 0.0, 0.0034692937042564154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015870555071160197, 0.0, 0.0]], "target": [0.6137759685516357]}, "loss": [7.154827117919922, 0.4881252944469452], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [54]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 13:20:22.009026", "n_pass": [1, 1, 1], "n_token": 71, "loss": [0.10465800762176514, 0.4881252944469452], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "flake8ext", "#NEWLINE#", "def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "re", ".", "search", "(", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "re", ".", "search", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 54, "repair_targets": [5, 54], "repair_candidates": [5, 54, 33, 42, 59, 68, 7, 16, 28]}}
{"prediction": {"error_location": 0.900632381439209, "repair_targets": [0.6116920709609985, 0.002083925064653158], "repair_candidates": [0.6116920709609985, 0.06665179133415222, 0.004401342011988163, 0.2486027032136917, 0.04689231887459755, 0.014619462192058563, 0.002083925064653158, 0.0034692937042564154, 0.0015870555071160197], "target_probs": 0.6137759685516357}}


{"result": {"time": "2021-02-21 13:20:22.091685", "n_pass": [22, 2, 2], "n_token": 62, "loss": [0.2668250799179077, 0.09273335337638855], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "flake8ext", "#NEWLINE#", "def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "re", ".", "search", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 45, "repair_targets": [5, 45], "repair_candidates": [5, 45, 24, 33, 50, 59, 7, 16, 19]}}
{"prediction": {"error_location": 0.7658070921897888, "repair_targets": [0.9096754789352417, 0.0017610207432880998], "repair_candidates": [0.9096754789352417, 0.02459433302283287, 0.0017260521417483687, 0.014842192642390728, 0.03561989590525627, 0.008261125534772873, 0.0017610207432880998, 0.0025591126177459955, 0.0009608100517652929], "target_probs": 0.9114364981651306}}


{"result": {"time": "2021-02-21 13:20:22.408658", "n_pass": [48, 6, 3], "n_token": 57, "loss": [0.6367619037628174, 0.04219399020075798], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "flake8ext", "#NEWLINE#", "def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 40, "repair_targets": [5, 40], "repair_candidates": [5, 40, 24, 33, 45, 54, 7, 16, 19]}}
{"prediction": {"error_location": 0.5290026664733887, "repair_targets": [0.9135644435882568, 0.04511934518814087], "repair_candidates": [0.9135644435882568, 0.018448403105139732, 0.001240912126377225, 0.010153197683393955, 0.008091330528259277, 0.0007129459409043193, 0.04511934518814087, 0.0018527820939198136, 0.0008168090134859085], "target_probs": 0.9586837887763977}}


{"result": {"time": "2021-02-21 13:20:22.484812", "n_pass": [51, 7, 4], "n_token": 52, "loss": [0.692294716835022, 0.12166278064250946], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "flake8ext", "#NEWLINE#", "def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 40, "repair_targets": [5, 40], "repair_candidates": [5, 40, 24, 33, 45, 49, 7, 16, 19]}}
{"prediction": {"error_location": 0.5004265308380127, "repair_targets": [0.8309379816055298, 0.05450895056128502], "repair_candidates": [0.8309379816055298, 0.028178736567497253, 0.0013098138151690364, 0.016184844076633453, 0.007458498701453209, 0.0008017872460186481, 0.05450895056128502, 0.04549333453178406, 0.015126105397939682], "target_probs": 0.8854469060897827}}


{"result": {"time": "2021-02-21 13:20:22.559269", "n_pass": [53, 8, 5], "n_token": 48, "loss": [0.9182467460632324, 0.30309122800827026], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 36, "repair_targets": [1, 36], "repair_candidates": [1, 36, 20, 29, 41, 45, 3, 12, 15]}}
{"prediction": {"error_location": 0.3992184102535248, "repair_targets": [0.614669919013977, 0.12386178970336914], "repair_candidates": [0.614669919013977, 0.07314067333936691, 0.004261087626218796, 0.030935732647776604, 0.013764874078333378, 0.006238466128706932, 0.12386178970336914, 0.11324220895767212, 0.01988520286977291], "target_probs": 0.7385317087173462}}


{"result": {"time": "2021-02-21 13:20:22.923536", "n_pass": [89, 13, 6], "n_token": 46, "loss": [0.8896541595458984, 0.3386608362197876], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "yield", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 34, "repair_targets": [1, 34], "repair_candidates": [1, 34, 18, 27, 39, 43, 3, 10, 13]}}
{"prediction": {"error_location": 0.4107978045940399, "repair_targets": [0.5885738730430603, 0.12415026128292084], "repair_candidates": [0.5885738730430603, 0.041942670941352844, 0.009706821292638779, 0.06422758847475052, 0.00735916942358017, 0.020998260006308556, 0.12415026128292084, 0.07628679275512695, 0.06675455719232559], "target_probs": 0.7127241492271423}}


{"result": {"time": "2021-02-21 13:20:23.358566", "n_pass": [98, 19, 7], "n_token": 44, "loss": [0.9056442975997925, 0.4066161513328552], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "0", ",", "msg", ")", ")"]}}
{"position": {"error_location": 32, "repair_targets": [1, 32], "repair_candidates": [1, 32, 18, 25, 37, 41, 3, 10, 13]}}
{"prediction": {"error_location": 0.4042813181877136, "repair_targets": [0.5728890895843506, 0.09301065653562546], "repair_candidates": [0.5728890895843506, 0.04651007428765297, 0.011019513010978699, 0.07836433500051498, 0.009214130230247974, 0.03256850689649582, 0.09301065653562546, 0.09594735503196716, 0.0604763887822628], "target_probs": 0.6658997535705566}}


{"result": {"time": "2021-02-21 13:20:23.714789", "n_pass": [106, 24, 8], "n_token": 41, "loss": [0.49003133177757263, 0.3799815773963928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "#NEWLINE#", "#INDENT#", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 32, "repair_targets": [1, 32], "repair_candidates": [1, 32, 18, 25, 37, 38, 3, 10, 13]}}
{"prediction": {"error_location": 0.6126071810722351, "repair_targets": [0.6211756467819214, 0.06269838660955429], "repair_candidates": [0.6211756467819214, 0.06697908788919449, 0.0096651716157794, 0.11950534582138062, 0.004273524042218924, 0.03338773921132088, 0.06269838660955429, 0.06417110562324524, 0.018143996596336365], "target_probs": 0.6838740110397339}}


{"result": {"time": "2021-02-21 13:20:23.784814", "n_pass": [110, 25, 9], "n_token": 39, "loss": [1.009095311164856, 0.41727176308631897], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", "'assertEqual\\\\(\\\\s*False,[^,]*(,[^,]*)?\\\\)'", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 30, "repair_targets": [1, 30], "repair_candidates": [1, 30, 16, 23, 35, 36, 3, 8, 11]}}
{"prediction": {"error_location": 0.36454862356185913, "repair_targets": [0.5917839407920837, 0.06705793738365173], "repair_candidates": [0.5917839407920837, 0.05567273870110512, 0.013956970535218716, 0.1799534559249878, 0.0033807537984102964, 0.032247669994831085, 0.06705793738365173, 0.04504725709557533, 0.010899300687015057], "target_probs": 0.6588418483734131}}


{"result": {"time": "2021-02-21 13:20:24.747120", "n_pass": [170, 39, 10], "n_token": 38, "loss": [1.023948311805725, 0.21422359347343445], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", ",", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 29, "repair_targets": [1, 29], "repair_candidates": [1, 29, 15, 22, 34, 35, 3, 8, 10]}}
{"prediction": {"error_location": 0.3591739535331726, "repair_targets": [0.7299585342407227, 0.07720938324928284], "repair_candidates": [0.7299585342407227, 0.04481216147542, 0.03203180432319641, 0.017791815102100372, 0.0066517372615635395, 0.029864002019166946, 0.07720938324928284, 0.049571890383958817, 0.01210869662463665], "target_probs": 0.8071678876876831}}


{"result": {"time": "2021-02-21 13:20:24.818739", "n_pass": [171, 40, 11], "n_token": 37, "loss": [0.9357713460922241, 0.40008804202079773], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "(", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 28, "repair_targets": [1, 28], "repair_candidates": [1, 28, 14, 21, 33, 34, 3, 8, 9]}}
{"prediction": {"error_location": 0.3922831416130066, "repair_targets": [0.5888769626617432, 0.08138405531644821], "repair_candidates": [0.5888769626617432, 0.07273150235414505, 0.024750297889113426, 0.11507242172956467, 0.008631529286503792, 0.03829995170235634, 0.08138405531644821, 0.05822482332587242, 0.012028464116156101], "target_probs": 0.670261025428772}}


{"result": {"time": "2021-02-21 13:20:25.770836", "n_pass": [188, 54, 12], "n_token": 36, "loss": [0.5581889748573303, 0.3845866620540619], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 27, "repair_targets": [1, 27], "repair_candidates": [1, 27, 14, 21, 32, 33, 3, 8, 9]}}
{"prediction": {"error_location": 0.5722444653511047, "repair_targets": [0.6422295570373535, 0.03850238397717476], "repair_candidates": [0.6422295570373535, 0.08007024228572845, 0.027974523603916168, 0.12499388307332993, 0.008149586617946625, 0.03363347798585892, 0.03850238397717476, 0.03546338155865669, 0.00898291077464819], "target_probs": 0.6807319521903992}}


{"result": {"time": "2021-02-21 13:20:25.972427", "n_pass": [192, 57, 13], "n_token": 35, "loss": [0.4657225012779236, 0.5235879421234131], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#NEWLINE#", "#INDENT#", "msg", "msg", ")", ")"]}}
{"position": {"error_location": 27, "repair_targets": [1, 27], "repair_candidates": [1, 27, 14, 21, 31, 32, 3, 8, 9]}}
{"prediction": {"error_location": 0.6276814341545105, "repair_targets": [0.5811527967453003, 0.011238467879593372], "repair_candidates": [0.5811527967453003, 0.09766946732997894, 0.03283245489001274, 0.16115722060203552, 0.007381252944469452, 0.02303026057779789, 0.011238467879593372, 0.07346302270889282, 0.012075074017047882], "target_probs": 0.5923912525177002}}


{"result": {"time": "2021-02-21 13:20:26.173585", "n_pass": [196, 60, 14], "n_token": 33, "loss": [0.7903474569320679, 0.43878382444381714], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "if", "(", "'neutron/tests/'", "in", "filename", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#NEWLINE#", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 27, "repair_targets": [1, 27], "repair_candidates": [1, 27, 14, 21, 31, 32, 3, 8, 9]}}
{"prediction": {"error_location": 0.4536871314048767, "repair_targets": [0.6378760933876038, 0.006944046355783939], "repair_candidates": [0.6378760933876038, 0.08888093382120132, 0.028822356835007668, 0.1686495840549469, 0.004942468833178282, 0.017130659893155098, 0.006944046355783939, 0.04348313435912132, 0.003270684741437435], "target_probs": 0.6448201537132263}}


{"result": {"time": "2021-02-21 13:20:26.370985", "n_pass": [201, 63, 15], "n_token": 32, "loss": [0.9492658376693726, 0.207901731133461], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "(", "'neutron/tests/'", "in", "filename", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#NEWLINE#", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 26, "repair_targets": [1, 26], "repair_candidates": [1, 26, 13, 20, 30, 31, 3, 7, 8]}}
{"prediction": {"error_location": 0.38702505826950073, "repair_targets": [0.8041394352912903, 0.008147441782057285], "repair_candidates": [0.8041394352912903, 0.0059435730800032616, 0.01221424713730812, 0.09259053319692612, 0.0038195322267711163, 0.01860271394252777, 0.008147441782057285, 0.05073264613747597, 0.0038099135272204876], "target_probs": 0.8122868537902832}}


{"result": {"time": "2021-02-21 13:20:26.633225", "n_pass": [207, 67, 16], "n_token": 31, "loss": [1.1639198064804077, 0.10045000165700912], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "(", "'neutron/tests/'", "in", "filename", "filename", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#NEWLINE#", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 25, "repair_targets": [1, 25], "repair_candidates": [1, 25, 12, 19, 29, 30, 3, 7, 8]}}
{"prediction": {"error_location": 0.3122597932815552, "repair_targets": [0.8938286900520325, 0.010601654648780823], "repair_candidates": [0.8938286900520325, 0.0033306560944765806, 0.0029584551230072975, 0.006031910888850689, 0.0034542717039585114, 0.019427381455898285, 0.010601654648780823, 0.055349867790937424, 0.0050172205083072186], "target_probs": 0.9044303297996521}}


{"result": {"time": "2021-02-21 13:20:28.057895", "n_pass": [241, 89, 17], "n_token": 30, "loss": [1.0473885536193848, 0.09594771265983582], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "(", "'neutron/tests/'", "in", "filename", "filename", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 25, "repair_targets": [1, 25], "repair_candidates": [1, 25, 12, 19, 28, 29, 3, 7, 8]}}
{"prediction": {"error_location": 0.3508527874946594, "repair_targets": [0.8866690397262573, 0.02184244990348816], "repair_candidates": [0.8866690397262573, 0.007710411213338375, 0.014043677598237991, 0.025349093601107597, 0.006355520337820053, 0.016216546297073364, 0.02184244990348816, 0.016486871987581253, 0.005326397716999054], "target_probs": 0.9085115194320679}}


{"result": {"time": "2021-02-21 13:20:28.250999", "n_pass": [248, 92, 18], "n_token": 29, "loss": [0.35944464802742004, 0.32048162817955017], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 24, "repair_targets": [1, 24], "repair_candidates": [1, 24, 11, 18, 27, 28, 3, 6, 7]}}
{"prediction": {"error_location": 0.6980640292167664, "repair_targets": [0.7047024965286255, 0.02109687030315399], "repair_candidates": [0.7047024965286255, 0.052385155111551285, 0.04351839795708656, 0.11452042311429977, 0.01193638239055872, 0.02199956588447094, 0.02109687030315399, 0.023390527814626694, 0.006450159940868616], "target_probs": 0.7257993817329407}}


{"result": {"time": "2021-02-21 13:20:28.443747", "n_pass": [253, 95, 19], "n_token": 28, "loss": [0.2751123011112213, 0.2291247546672821], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "#INDENT#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 23, "repair_targets": [1, 23], "repair_candidates": [1, 23, 10, 17, 26, 27, 3, 6, 7]}}
{"prediction": {"error_location": 0.7594868540763855, "repair_targets": [0.7868712544441223, 0.008358070626854897], "repair_candidates": [0.7868712544441223, 0.027512304484844208, 0.0161987766623497, 0.10088841617107391, 0.01567348651587963, 0.022106532007455826, 0.008358070626854897, 0.01742607168853283, 0.004964980762451887], "target_probs": 0.7952293157577515}}


{"result": {"time": "2021-02-21 13:20:28.570207", "n_pass": [255, 97, 20], "n_token": 27, "loss": [0.16406899690628052, 0.44162508845329285], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "=", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 22, "repair_targets": [1, 22], "repair_candidates": [1, 22, 9, 16, 25, 26, 3, 6, 7]}}
{"prediction": {"error_location": 0.8486834764480591, "repair_targets": [0.6359978318214417, 0.006992797367274761], "repair_candidates": [0.6359978318214417, 0.034365031868219376, 0.032525088638067245, 0.2479565292596817, 0.0061731645837426186, 0.017883822321891785, 0.006992797367274761, 0.014031525701284409, 0.004074185620993376], "target_probs": 0.6429906487464905}}


{"result": {"time": "2021-02-21 13:20:28.632917", "n_pass": [257, 98, 21], "n_token": 26, "loss": [0.5115691423416138, 0.15028123557567596], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "'N328: Use assertFalse(observed) instead of assertEqual(False, observed)'", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 21, "repair_targets": [1, 21], "repair_candidates": [1, 21, 9, 15, 24, 25, 3, 6, 7]}}
{"prediction": {"error_location": 0.5995541214942932, "repair_targets": [0.8422099947929382, 0.018255924805998802], "repair_candidates": [0.8422099947929382, 0.022616274654865265, 0.01555511076003313, 0.0783366858959198, 0.0020231048110872507, 0.009823592379689217, 0.018255924805998802, 0.00772625720128417, 0.003453043755143881], "target_probs": 0.860465943813324}}


{"result": {"time": "2021-02-21 13:20:28.695593", "n_pass": [258, 99, 22], "n_token": 25, "loss": [0.38856449723243713, 0.1386963129043579], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", "(", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 20, "repair_targets": [1, 20], "repair_candidates": [1, 20, 9, 14, 23, 24, 3, 6, 7]}}
{"prediction": {"error_location": 0.678029477596283, "repair_targets": [0.8521751761436462, 0.01831718534231186], "repair_candidates": [0.8521751761436462, 0.022205868735909462, 0.011624421924352646, 0.06249668449163437, 0.004374506883323193, 0.012595430947840214, 0.01831718534231186, 0.011371418833732605, 0.0048393490724265575], "target_probs": 0.8704923391342163}}


{"result": {"time": "2021-02-21 13:20:28.821528", "n_pass": [260, 101, 23], "n_token": 24, "loss": [0.252473920583725, 0.28556230664253235], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", "0", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 19, "repair_targets": [1, 19], "repair_candidates": [1, 19, 9, 13, 22, 23, 3, 6, 7]}}
{"prediction": {"error_location": 0.7768764495849609, "repair_targets": [0.7215943336486816, 0.029997164383530617], "repair_candidates": [0.7215943336486816, 0.03329121693968773, 0.026767045259475708, 0.10915866494178772, 0.017337234690785408, 0.03835001960396767, 0.029997164383530617, 0.01824002154171467, 0.005264244507998228], "target_probs": 0.7515915036201477}}


{"result": {"time": "2021-02-21 13:20:28.882925", "n_pass": [261, 102, 24], "n_token": 23, "loss": [0.07369482517242432, 0.26562684774398804], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", ",", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 18, "repair_targets": [1, 18], "repair_candidates": [1, 18, 9, 12, 21, 22, 3, 6, 7]}}
{"prediction": {"error_location": 0.9289550185203552, "repair_targets": [0.7559448480606079, 0.010780326090753078], "repair_candidates": [0.7559448480606079, 0.02535071223974228, 0.024906529113650322, 0.10455969721078873, 0.023399915546178818, 0.036327704787254333, 0.010780326090753078, 0.013881229795515537, 0.00484907953068614], "target_probs": 0.7667251825332642}}


{"result": {"time": "2021-02-21 13:20:28.943566", "n_pass": [262, 103, 25], "n_token": 22, "loss": [0.1058305874466896, 0.4317393898963928], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", "msg", ")", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 17, "repair_targets": [1, 17], "repair_candidates": [1, 17, 9, 11, 20, 21, 3, 6, 7]}}
{"prediction": {"error_location": 0.8995768427848816, "repair_targets": [0.6325185894966125, 0.01685999520123005], "repair_candidates": [0.6325185894966125, 0.021360408514738083, 0.048023391515016556, 0.18051667511463165, 0.020815925672650337, 0.022717291489243507, 0.01685999520123005, 0.042145609855651855, 0.01504211500287056], "target_probs": 0.6493785977363586}}


{"result": {"time": "2021-02-21 13:20:29.004027", "n_pass": [264, 104, 26], "n_token": 21, "loss": [0.2654273509979248, 0.3264780342578888], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", "msg", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "#INDENT#", "msg", "msg"]}}
{"position": {"error_location": 16, "repair_targets": [1, 16], "repair_candidates": [1, 16, 9, 11, 19, 20, 3, 6, 7]}}
{"prediction": {"error_location": 0.7668782472610474, "repair_targets": [0.6952803730964661, 0.0261798407882452], "repair_candidates": [0.6952803730964661, 0.020279742777347565, 0.03679053485393524, 0.1458229422569275, 0.014190212823450565, 0.017345303669571877, 0.0261798407882452, 0.029964657500386238, 0.014146359637379646], "target_probs": 0.721460223197937}}


{"result": {"time": "2021-02-21 13:20:29.361916", "n_pass": [271, 110, 27], "n_token": 20, "loss": [0.6793558597564697, 0.4365750253200531], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def check_assertfalse(", "logical_line", ",", "filename", "'neutron/tests/'", "in", "filename", "filename", "#NEWLINE#", "msg", "#NEWLINE#", "msg", ")", "#NEWLINE#", "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ",", "logical_line", ":", "msg", "msg"]}}
{"position": {"error_location": 16, "repair_targets": [1, 16], "repair_candidates": [1, 16, 9, 11, 18, 19, 3, 6, 7]}}
{"prediction": {"error_location": 0.5069434642791748, "repair_targets": [0.6110191941261292, 0.03522682934999466], "repair_candidates": [0.6110191941261292, 0.026791788637638092, 0.07114619016647339, 0.21650320291519165, 0.020374644547700882, 0.01549885980784893, 0.03522682934999466, 0.001556816161610186, 0.001882521086372435], "target_probs": 0.6462460160255432}}




Minimal simplified tokens:

['def check_assertfalse(', 'logical_line', ',', 'filename', "'neutron/tests/'", 'in', 'filename', 'filename', '#NEWLINE#', 'msg', '#NEWLINE#', 'msg', ')', '#NEWLINE#', "'assertEqual\\\\([^,]*,\\\\s*False(,[^,]*)?\\\\)'", ',', 'logical_line', ':', 'msg', 'msg']
