
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "=", "True", ",", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", ",", "extra_headers", "=", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", ")", "#NEWLINE#", "return", "self", ".", "run", "(", "r", ")"], "error_location": [47], "repair_targets": [4], "repair_candidates": [12, 47, 58, 60, 2, 45, 51, 84, 16, 62, 64, 20, 66, 68, 41, 88, 4, 8, 53, 55, 28, 74, 76, 32, 78, 80, 6, 49, 24, 72], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "smore-inc/tinys3/tinys3/connection.py", "license": "mit", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00012-of-00300", "js_count": 40276, "results": {"model": "rnn", "prob": {"loc": [[0.015257320366799831, 2.696880052610595e-08, 2.0178905657530777e-08, 2.258162545842879e-09, 2.0663385669195122e-08, 8.177040711210282e-10, 3.6094572664069347e-08, 9.109786258676422e-10, 3.0843998466423272e-09, 1.2399131721352319e-09, 2.5428217309553247e-09, 1.0926990423598681e-09, 3.137967752309123e-08, 1.2850435160416396e-09, 3.911658108535221e-09, 4.6774286666106946e-09, 1.7576905264604648e-08, 1.1827520074447762e-09, 1.6088970156147298e-09, 1.3490973893581781e-09, 1.5504019401646474e-08, 1.386699421956905e-09, 4.728143654375572e-09, 3.6970379535539166e-10, 8.222858838280445e-08, 3.6584100193692848e-09, 3.8589473838612776e-09, 3.8186237505399845e-10, 2.482123662161939e-08, 7.641480337383655e-09, 6.045935307952277e-09, 2.208664584557596e-09, 1.7639878890918226e-08, 9.027642522418944e-10, 1.9128048478478377e-08, 7.365930088099049e-09, 1.148906081382961e-09, 1.1941727606767927e-08, 3.793131586604659e-09, 8.481785274128129e-10, 2.2395725274293454e-09, 1.4879580900739597e-09, 1.8809973023614646e-10, 3.0660176619790036e-09, 7.064568929848747e-10, 0.920610785484314, 1.5369953416666249e-06, 0.05126359313726425, 4.522081553659518e-07, 0.003254287876188755, 2.505465834801157e-10, 6.55533183291368e-09, 1.1268109778583835e-09, 2.971543011653921e-10, 1.52124428609568e-08, 0.0016424036584794521, 3.230255885000588e-08, 2.1004487038567277e-08, 1.1891609474901088e-08, 3.219865973846936e-08, 0.00019513988809194416, 4.4337826743401365e-09, 7.2198793610311895e-09, 1.457274034777356e-08, 1.358931876893621e-05, 1.7018607634256e-09, 9.337801643027888e-09, 3.69190473747949e-08, 2.5379042199347168e-05, 5.335427211150545e-09, 2.3361074852346064e-07, 2.411715449568419e-08, 0.005983881652355194, 7.426261827703229e-10, 5.030798444494167e-09, 5.740072861470935e-09, 9.1167887148913e-05, 1.2702231266814579e-08, 6.727896018077217e-09, 2.5577793216768896e-09, 8.501631236867979e-05, 9.477287843395743e-10, 1.2708453178689183e-09, 1.404016347628101e-10, 1.1118357434725112e-07, 5.335231145764396e-10, 9.449363513880371e-10, 1.7203918289965259e-09, 0.0015745834680274129, 3.879166765585751e-09]], "pointer": [[0.0, 0.0, 0.00012776248331647366, 0.0, 0.5395466089248657, 0.0, 0.014929896220564842, 0.0, 0.345537006855011, 0.0, 0.0, 0.0, 0.0018353830091655254, 0.0, 0.0, 0.0, 0.07380681484937668, 0.0, 0.0, 0.0, 0.006338160950690508, 0.0, 0.0, 0.0, 0.0029482312966138124, 0.0, 0.0, 0.0, 0.005183869507163763, 0.0, 0.0, 0.0, 0.008967072702944279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016593940381426364, 0.0, 0.0, 0.0, 2.2817943317932077e-05, 0.0, 1.027661141961289e-06, 0.0, 7.37832067443378e-07, 0.0, 2.3871598386904225e-05, 0.0, 0.00021519196161534637, 0.0, 8.018059816095047e-06, 0.0, 0.0, 3.480558734736405e-05, 0.0, 8.1758826127043e-06, 0.0, 8.791880100034177e-05, 0.0, 4.904661636828678e-06, 0.0, 5.226178473094478e-05, 0.0, 7.637650583092181e-07, 0.0, 0.0, 0.0, 1.938301011250587e-06, 0.0, 2.1808695237268694e-05, 0.0, 1.7602105799596757e-06, 0.0, 0.0001249331544386223, 0.0, 7.593724831167492e-07, 0.0, 0.0, 0.0, 3.1626083796254534e-07, 0.0, 0.0, 0.0, 1.2586137927428354e-06, 0.0]], "target": [0.5395466089248657]}, "loss": [2.9707746505737305, 0.6170260906219482], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [45]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:51:54.146116", "n_pass": [1, 1, 1], "n_token": 90, "loss": [0.08271817862987518, 0.6170260906219482], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "=", "True", ",", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", ",", "extra_headers", "=", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", ")", "#NEWLINE#", "return", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 45, "repair_targets": [4], "repair_candidates": [12, 47, 58, 60, 2, 45, 51, 84, 16, 62, 64, 20, 66, 68, 41, 88, 4, 8, 53, 55, 28, 74, 76, 32, 78, 80, 6, 49, 24, 72]}}
{"prediction": {"error_location": 0.920610785484314, "repair_targets": [0.5395466089248657], "repair_candidates": [0.00012776248331647366, 0.5395466089248657, 0.014929896220564842, 0.345537006855011, 0.0018353830091655254, 0.07380681484937668, 0.006338160950690508, 0.0029482312966138124, 0.005183869507163763, 0.008967072702944279, 0.00016593940381426364, 2.2817943317932077e-05, 1.027661141961289e-06, 7.37832067443378e-07, 2.3871598386904225e-05, 0.00021519196161534637, 8.018059816095047e-06, 3.480558734736405e-05, 8.1758826127043e-06, 8.791880100034177e-05, 4.904661636828678e-06, 5.226178473094478e-05, 7.637650583092181e-07, 1.938301011250587e-06, 2.1808695237268694e-05, 1.7602105799596757e-06, 0.0001249331544386223, 7.593724831167492e-07, 3.1626083796254534e-07, 1.2586137927428354e-06], "target_probs": 0.5395466089248657}}


{"result": {"time": "2021-02-21 12:51:54.442325", "n_pass": [101, 4, 2], "n_token": 87, "loss": [0.1292445808649063, 0.6478742361068726], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", ",", "extra_headers", "=", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", ")", "#NEWLINE#", "return", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 42, "repair_targets": [4], "repair_candidates": [12, 44, 55, 57, 2, 42, 48, 81, 16, 59, 61, 20, 63, 65, 38, 85, 4, 8, 50, 52, 25, 71, 73, 29, 75, 77, 6, 46, 21, 69]}}
{"prediction": {"error_location": 0.8787589073181152, "repair_targets": [0.5231567025184631], "repair_candidates": [0.00012590104597620666, 0.5231567025184631, 0.017441237345337868, 0.34732261300086975, 0.0023220526054501534, 0.08600779622793198, 0.008214839734137058, 0.0021803341805934906, 0.003736087353900075, 0.00869078654795885, 0.0001286370534216985, 2.2980078938417137e-05, 1.0614213579174248e-06, 6.553535740749794e-07, 2.399408185738139e-05, 0.0002734804875217378, 8.894250640878454e-06, 3.0494915336021222e-05, 7.942694537632633e-06, 9.472112287767231e-05, 4.86853787151631e-06, 5.931449413765222e-05, 6.947924475753098e-07, 1.931242195496452e-06, 1.9822635294985957e-05, 1.870591063379834e-06, 0.00011768205877160653, 8.31832892345119e-07, 3.297566308901878e-07, 1.408070943398343e-06], "target_probs": 0.5231567025184631}}


{"result": {"time": "2021-02-21 12:51:54.631436", "n_pass": [106, 6, 3], "n_token": 84, "loss": [0.04661405459046364, 0.6536824107170105], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", ",", "extra_headers", "=", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", ")", "#NEWLINE#", "return", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 39, "repair_targets": [4], "repair_candidates": [12, 41, 52, 54, 2, 39, 45, 78, 16, 56, 58, 20, 60, 62, 35, 82, 4, 8, 47, 49, 25, 68, 70, 29, 72, 74, 6, 43, 21, 66]}}
{"prediction": {"error_location": 0.9544556736946106, "repair_targets": [0.5201269388198853], "repair_candidates": [0.00011538661055965349, 0.5201269388198853, 0.017209069803357124, 0.3574647903442383, 0.0020471999887377024, 0.08561111986637115, 0.006889257580041885, 0.0017369660781696439, 0.0027565399650484324, 0.0051045529544353485, 0.0001316138805123046, 1.3377442883211188e-05, 8.839568295115896e-07, 5.975631438559503e-07, 3.2395237212767825e-05, 0.0003126302035525441, 8.208250619645696e-06, 3.149011899949983e-05, 7.3353103289264254e-06, 0.00011735534644685686, 5.090197646495653e-06, 6.774631037842482e-05, 7.681692295591347e-07, 2.293320903845597e-06, 2.490365477569867e-05, 2.176086127292365e-06, 0.00017615333490539342, 9.796834774533636e-07, 3.8604397900598997e-07, 1.6735275494283997e-06], "target_probs": 0.5201269388198853}}


{"result": {"time": "2021-02-21 12:51:54.819853", "n_pass": [117, 8, 4], "n_token": 81, "loss": [0.04389112442731857, 0.6581419706344604], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", ")", "#NEWLINE#", "return", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 39, "repair_targets": [4], "repair_candidates": [12, 41, 52, 54, 2, 39, 45, 75, 16, 56, 58, 20, 60, 62, 35, 79, 4, 8, 47, 49, 25, 65, 67, 29, 69, 71, 6, 43, 21, 63]}}
{"prediction": {"error_location": 0.9570581316947937, "repair_targets": [0.5178125500679016], "repair_candidates": [8.103508298518136e-05, 0.5178125500679016, 0.020102720707654953, 0.34127384424209595, 0.0025257100351154804, 0.09649065881967545, 0.007812910713255405, 0.0020480086095631123, 0.003840629942715168, 0.0062675816006958485, 0.00012451315706130117, 1.1153822015330661e-05, 6.137047421361785e-07, 5.128673024046293e-07, 1.6772477465565316e-05, 0.0002558791311457753, 7.734091923339292e-06, 3.68179171346128e-05, 9.181062523566652e-06, 0.00022603203251492232, 1.3538899111154024e-05, 0.0007092959713190794, 3.2121813546837075e-06, 1.3147033541827113e-06, 3.403055961825885e-05, 5.707323111892038e-07, 0.00029014438041485846, 1.0694293450796977e-06, 3.60131139132136e-07, 1.6254309684882173e-06], "target_probs": 0.5178125500679016}}


{"result": {"time": "2021-02-21 12:51:54.912221", "n_pass": [121, 9, 5], "n_token": 78, "loss": [0.02084561251103878, 0.47655272483825684], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "None", ",", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 39, "repair_targets": [4], "repair_candidates": [12, 41, 52, 54, 2, 39, 45, 72, 16, 56, 58, 20, 60, 62, 35, 76, 4, 8, 47, 49, 25, 65, 67, 29, 69, 71, 6, 43, 21, 63]}}
{"prediction": {"error_location": 0.9793700575828552, "repair_targets": [0.6209201812744141], "repair_candidates": [5.1187107601435855e-05, 0.6209201812744141, 0.0142365712672472, 0.2597929537296295, 0.0015676876064389944, 0.0888047069311142, 0.005098468624055386, 0.0008881763205863535, 0.0019236264051869512, 0.004867916461080313, 5.7764456869335845e-05, 8.741020792513154e-06, 4.3770043589574925e-07, 4.914857072435552e-07, 1.5247082046698779e-05, 0.0002208131627412513, 8.735403753235005e-06, 3.685315459733829e-05, 7.727581760264002e-06, 0.00047672406071797013, 1.4723510503245052e-05, 0.0008265783544629812, 2.3130251065595075e-06, 1.322523985436419e-06, 2.3408942070091143e-05, 6.367751552716072e-07, 0.00014097649545874447, 3.061313236685237e-06, 1.0465837476658635e-06, 8.583942303630465e-07], "target_probs": 0.6209201812744141}}


{"result": {"time": "2021-02-21 12:51:55.093170", "n_pass": [129, 11, 6], "n_token": 76, "loss": [0.016261205077171326, 0.618613064289093], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "=", "False", ")", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 37, "repair_targets": [4], "repair_candidates": [10, 39, 50, 52, 2, 37, 43, 70, 14, 54, 56, 18, 58, 60, 33, 74, 4, 8, 45, 47, 23, 63, 65, 27, 67, 69, 6, 41, 19, 61]}}
{"prediction": {"error_location": 0.983870267868042, "repair_targets": [0.5386910438537598], "repair_candidates": [4.831544356420636e-05, 0.5386910438537598, 0.015759365633130074, 0.3832111954689026, 0.0003114590945187956, 0.049038033932447433, 0.005388631485402584, 0.0009411872597411275, 0.0020100425463169813, 0.0033300432842224836, 3.526176806190051e-05, 6.998646313149948e-06, 4.768792791765009e-07, 3.610072951687471e-07, 1.2210280146973673e-05, 0.00015562318731099367, 9.690507795312442e-06, 2.617470090626739e-05, 6.531405233545229e-06, 0.00037243583938106894, 1.302367036259966e-05, 0.0005070395418442786, 2.185319544878439e-06, 1.1562659665287356e-06, 1.7447506252210587e-05, 4.973384193363017e-07, 9.950730600394309e-05, 2.4495429897797294e-06, 9.540891596770962e-07, 7.523564704570163e-07], "target_probs": 0.5386910438537598}}


{"result": {"time": "2021-02-21 12:51:55.185178", "n_pass": [136, 12, 7], "n_token": 73, "loss": [0.00968165136873722, 0.6611012816429138], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", ",", "rewind", "=", "True", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 34, "repair_targets": [4], "repair_candidates": [10, 36, 47, 49, 2, 34, 40, 67, 14, 51, 53, 18, 55, 57, 30, 71, 4, 8, 42, 44, 23, 60, 62, 27, 64, 66, 6, 38, 19, 58]}}
{"prediction": {"error_location": 0.9903649687767029, "repair_targets": [0.5162824392318726], "repair_candidates": [6.378307443810627e-05, 0.5162824392318726, 0.017097782343626022, 0.4026482105255127, 0.0004033906734548509, 0.05055229365825653, 0.006697199773043394, 0.0012649813434109092, 0.00284587568603456, 0.0006540506146848202, 4.349163282313384e-05, 5.6688331824261695e-06, 2.670604430932144e-07, 2.6507291295274626e-07, 1.3025918633502442e-05, 0.00021942659805063158, 9.684279575594701e-06, 2.7419733669376e-05, 7.041252047201851e-06, 0.00041116640204563737, 1.554612572363112e-05, 0.0005953477811999619, 2.477914222254185e-06, 1.209598394780187e-06, 1.910157698148396e-05, 5.312073767527181e-07, 0.00011383865785319358, 2.6878376502281753e-06, 9.774666978046298e-07, 8.376294431400311e-07], "target_probs": 0.5162824392318726}}


{"result": {"time": "2021-02-21 12:51:55.451552", "n_pass": [215, 15, 8], "n_token": 72, "loss": [0.0077477190643548965, 0.6721245646476746], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", "=", "True", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 33, "repair_targets": [4], "repair_candidates": [10, 35, 46, 48, 2, 33, 39, 66, 14, 50, 52, 18, 54, 56, 29, 70, 4, 8, 41, 43, 22, 59, 61, 26, 63, 65, 6, 37, 19, 57]}}
{"prediction": {"error_location": 0.9922823309898376, "repair_targets": [0.5106225609779358], "repair_candidates": [6.231452425708994e-05, 0.5106225609779358, 0.018575048074126244, 0.39894193410873413, 0.0004779857990797609, 0.05838111415505409, 0.00791909173130989, 0.001583278994075954, 0.0011838851496577263, 0.0006149756954982877, 4.7059234930202365e-05, 7.15169289833284e-06, 3.206581880021986e-07, 3.2817160899867304e-07, 1.2673820492636878e-05, 0.00025464643840678036, 1.2573164895002265e-05, 3.0591610993724316e-05, 8.090825758699793e-06, 0.00040546845411881804, 1.607589547347743e-05, 0.0006820543203502893, 2.644572305143811e-06, 1.4273638271333766e-06, 2.189689257647842e-05, 6.542730943692732e-07, 0.00012893891835119575, 3.078278950852109e-06, 1.187047132589214e-06, 9.291985634263256e-07], "target_probs": 0.5106225609779358}}


{"result": {"time": "2021-02-21 12:51:55.542183", "n_pass": [217, 16, 9], "n_token": 71, "loss": [0.007687507662922144, 0.670098602771759], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", "True", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 32, "repair_targets": [4], "repair_candidates": [10, 34, 45, 47, 2, 32, 38, 65, 14, 49, 51, 18, 53, 55, 28, 69, 4, 8, 40, 42, 22, 58, 60, 25, 62, 64, 6, 36, 19, 56]}}
{"prediction": {"error_location": 0.9923418760299683, "repair_targets": [0.5116581320762634], "repair_candidates": [7.382928015431389e-05, 0.5116581320762634, 0.019526589661836624, 0.4010811746120453, 0.0005039742100052536, 0.056584980338811874, 0.006925087887793779, 0.0015908564673736691, 0.00022150526638142765, 0.0003527902881614864, 5.122400398249738e-05, 7.4110143941652495e-06, 3.096512841693766e-07, 3.4928700642922195e-07, 1.1109686056443024e-05, 0.0002558089036028832, 1.266896833840292e-05, 2.392174610577058e-05, 9.357845556223765e-06, 0.000346962217008695, 1.83231350092683e-05, 0.0005877803196199238, 3.168453304169816e-06, 1.606324985914398e-06, 2.0365865566418506e-05, 7.603054541505117e-07, 0.0001243872829945758, 3.2393497804150684e-06, 1.2577397683344316e-06, 1.0321148238290334e-06], "target_probs": 0.5116581320762634}}


{"result": {"time": "2021-02-21 12:51:55.629358", "n_pass": [218, 17, 10], "n_token": 70, "loss": [0.010365225374698639, 0.6771098971366882], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "#NEWLINE#", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 31, "repair_targets": [4], "repair_candidates": [10, 33, 44, 46, 2, 31, 37, 64, 14, 48, 50, 18, 52, 54, 27, 68, 4, 8, 39, 41, 22, 57, 59, 24, 61, 63, 6, 35, 19, 55]}}
{"prediction": {"error_location": 0.9896883368492126, "repair_targets": [0.5080832839012146], "repair_candidates": [8.253141277236864e-05, 0.5080832839012146, 0.0212123803794384, 0.39819544553756714, 0.0005813910975120962, 0.05963282659649849, 0.007892345078289509, 0.0018614934524521232, 0.00033887868630699813, 0.0003096206346526742, 0.00012917198182549328, 1.242247162736021e-05, 4.5212311761133606e-07, 4.287929300517135e-07, 1.3288187801663298e-05, 0.00027034737286157906, 1.692145633569453e-05, 3.3819185773609206e-05, 1.2100002095394302e-05, 0.00038259982829913497, 2.29805209528422e-05, 0.000722372205927968, 4.07363950216677e-06, 1.9547921965568094e-06, 2.416643656033557e-05, 8.774897537477955e-07, 0.000155218192958273, 3.8632274481642526e-06, 1.5634116152796196e-06, 1.230973452948092e-06], "target_probs": 0.5080832839012146}}


{"result": {"time": "2021-02-21 12:51:55.887552", "n_pass": [222, 20, 11], "n_token": 69, "loss": [0.02277689427137375, 0.6735194325447083], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", ")", ",", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 30, "repair_targets": [4], "repair_candidates": [10, 32, 43, 45, 2, 30, 36, 63, 14, 47, 49, 18, 51, 53, 26, 67, 4, 8, 38, 40, 22, 56, 58, 24, 60, 62, 6, 34, 19, 54]}}
{"prediction": {"error_location": 0.977480411529541, "repair_targets": [0.5099108219146729], "repair_candidates": [9.108938684221357e-05, 0.5099108219146729, 0.02574331685900688, 0.3784911334514618, 0.0007073144079186022, 0.07121597230434418, 0.009038319811224937, 0.0018594875000417233, 0.000132971050334163, 4.803503179573454e-05, 0.0003621311334427446, 1.3823590961692389e-05, 4.128835655592411e-07, 5.111800192025839e-07, 2.0673780454671942e-05, 0.0003243832616135478, 3.258101787650958e-05, 4.2720635974546894e-05, 2.2061614799895324e-05, 0.0006292859325185418, 4.6794182708254084e-05, 0.0009917705319821835, 8.407981113123242e-06, 2.461654503349564e-06, 2.8901651603518985e-05, 1.6340003412551596e-06, 0.00022352505766320974, 5.133641479915241e-06, 1.7157343563667382e-06, 2.62652224591875e-06], "target_probs": 0.5099108219146729}}


{"result": {"time": "2021-02-21 12:51:56.063426", "n_pass": [231, 22, 12], "n_token": 67, "loss": [0.015055712312459946, 0.6258735060691833], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 30, "repair_targets": [4], "repair_candidates": [10, 32, 41, 43, 2, 30, 36, 61, 14, 45, 47, 18, 49, 51, 26, 65, 4, 8, 38, 40, 22, 54, 56, 24, 58, 60, 6, 34, 19, 52]}}
{"prediction": {"error_location": 0.9850569367408752, "repair_targets": [0.5347940921783447], "repair_candidates": [7.469524280168116e-05, 0.5347940921783447, 0.023478828370571136, 0.3675236105918884, 0.0006276918575167656, 0.06081779673695564, 0.007628467865288258, 0.0014967868337407708, 0.00012602400965988636, 4.637888923753053e-05, 0.00042835756903514266, 8.901324690668844e-06, 3.0987325772002805e-07, 4.773665409629757e-07, 1.8321517927688546e-05, 0.00024126925563905388, 0.00010216309601673856, 0.0006107076187618077, 9.961578143702354e-06, 0.0010543616954237223, 6.437952833948657e-05, 0.0006338810198940337, 1.1406244993850123e-05, 2.8600613859453006e-06, 2.1316949641914107e-05, 1.4913189261278603e-06, 0.00016805114864837378, 3.933654170396039e-06, 1.868340063992946e-06, 1.6828610114316689e-06], "target_probs": 0.5347940921783447}}


{"result": {"time": "2021-02-21 12:51:56.234181", "n_pass": [245, 24, 13], "n_token": 66, "loss": [0.2617943286895752, 0.5748823285102844], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "=", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 29, "repair_targets": [3], "repair_candidates": [9, 31, 40, 42, 1, 29, 35, 60, 13, 44, 46, 17, 48, 50, 25, 64, 3, 7, 37, 39, 21, 53, 55, 23, 57, 59, 5, 33, 18, 51]}}
{"prediction": {"error_location": 0.7696691751480103, "repair_targets": [0.5627710819244385], "repair_candidates": [0.0005004411214031279, 0.5627710819244385, 0.0232956875115633, 0.38099735975265503, 0.000569692172575742, 0.024268044158816338, 0.004061397165060043, 0.0011359925847500563, 9.1861656983383e-05, 4.681576319853775e-05, 0.0004945364780724049, 3.139182445011102e-05, 4.294507505164802e-07, 5.737546189266141e-07, 1.747756323311478e-05, 0.00017457465582992882, 0.00015656385221518576, 0.00031804601894691586, 2.7913996746065095e-05, 0.0005487264133989811, 7.333824032684788e-05, 0.00022814843396190554, 2.3318256353377365e-05, 3.5567102258937666e-06, 1.1559690392459743e-05, 1.7747285028235638e-06, 0.0001432548597222194, 2.9383365927060368e-06, 1.5501025245612254e-06, 1.940226184160565e-06], "target_probs": 0.5627710819244385}}


{"result": {"time": "2021-02-21 12:51:56.660893", "n_pass": [254, 29, 14], "n_token": 65, "loss": [0.7097703814506531, 0.2572689950466156], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "=", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 28, "repair_targets": [3], "repair_candidates": [8, 30, 39, 41, 1, 28, 34, 59, 12, 43, 45, 16, 47, 49, 24, 63, 3, 7, 36, 38, 20, 52, 54, 22, 56, 58, 5, 32, 17, 50]}}
{"prediction": {"error_location": 0.4917570948600769, "repair_targets": [0.7731602191925049], "repair_candidates": [0.0008081684354692698, 0.7731602191925049, 0.029615337029099464, 0.15360702574253082, 0.004765978083014488, 0.023527225479483604, 0.007678522262722254, 0.0020596524700522423, 0.0001892042491817847, 8.982740109786391e-05, 0.001118117943406105, 9.528279770165682e-05, 8.38496475807915e-07, 1.119052853937319e-06, 3.058716902160086e-05, 0.000351964496076107, 0.00031519445474259555, 0.0004249897610861808, 8.32723017083481e-05, 0.001139333937317133, 0.0001762464380590245, 0.00041899626376107335, 5.779959246865474e-05, 7.573223228973802e-06, 1.7985934391617775e-05, 3.5639206998894224e-06, 0.00024333634064532816, 5.3901994760963134e-06, 2.623323325678939e-06, 4.669911959354067e-06], "target_probs": 0.7731602191925049}}


{"result": {"time": "2021-02-21 12:51:56.746125", "n_pass": [256, 30, 15], "n_token": 64, "loss": [0.6179715394973755, 0.1733015924692154], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "None", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 27, "repair_targets": [3], "repair_candidates": [8, 29, 38, 40, 1, 27, 33, 58, 11, 42, 44, 15, 46, 48, 23, 62, 3, 7, 35, 37, 19, 51, 53, 21, 55, 57, 5, 31, 16, 49]}}
{"prediction": {"error_location": 0.5390366911888123, "repair_targets": [0.8408839702606201], "repair_candidates": [0.0008101092535071075, 0.8408839702606201, 0.03860951215028763, 0.08458872139453888, 0.003570758504793048, 0.015414724126458168, 0.008083975873887539, 0.0022017620503902435, 0.00018256746989209205, 7.169689342845231e-05, 0.0014446057612076402, 0.00011365403042873368, 1.070594748853182e-06, 1.1478030046419008e-06, 3.5639572161016986e-05, 0.000457155576441437, 0.00030747047276236117, 0.0005447682924568653, 9.886125917546451e-05, 0.0014112559147179127, 0.0002172902604797855, 0.0005275424337014556, 7.965794065967202e-05, 9.320388926425949e-06, 2.2856165742268786e-05, 5.10117888552486e-06, 0.00028984263190068305, 6.022254183335463e-06, 3.1265572033589706e-06, 5.70620477446937e-06], "target_probs": 0.8408839702606201}}


{"result": {"time": "2021-02-21 12:51:56.830480", "n_pass": [257, 31, 16], "n_token": 63, "loss": [0.5124210715293884, 0.17962419986724854], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", ",", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 26, "repair_targets": [3], "repair_candidates": [8, 28, 37, 39, 1, 26, 32, 57, 10, 41, 43, 14, 45, 47, 22, 61, 3, 7, 34, 36, 18, 50, 52, 20, 54, 56, 5, 30, 15, 48]}}
{"prediction": {"error_location": 0.5990434288978577, "repair_targets": [0.8355841636657715], "repair_candidates": [0.000666300649754703, 0.8355841636657715, 0.03799736872315407, 0.0950847640633583, 0.006009713746607304, 0.004915924742817879, 0.010713493451476097, 0.0024709408171474934, 0.000301091669825837, 9.449482604395598e-05, 0.001539656426757574, 0.00015466829063370824, 1.156083271780517e-06, 1.3282917734613875e-06, 3.579343683668412e-05, 0.0004291366203688085, 0.000294749770546332, 0.0006750797037966549, 0.0001244156010216102, 0.0016779634170234203, 0.00023699039593338966, 0.0005205434863455594, 9.946567297447473e-05, 1.16303071990842e-05, 2.661084545252379e-05, 5.841435722686583e-06, 0.0003099654277320951, 7.3204664658987895e-06, 3.6767867186426884e-06, 5.8428840929991566e-06], "target_probs": 0.8355841636657715}}


{"result": {"time": "2021-02-21 12:51:56.914195", "n_pass": [258, 32, 17], "n_token": 62, "loss": [0.28252020478248596, 0.17687055468559265], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "=", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 25, "repair_targets": [3], "repair_candidates": [8, 27, 36, 38, 1, 25, 31, 56, 9, 40, 42, 13, 44, 46, 21, 60, 3, 7, 33, 35, 17, 49, 51, 19, 53, 55, 5, 29, 14, 47]}}
{"prediction": {"error_location": 0.7538813948631287, "repair_targets": [0.837888240814209], "repair_candidates": [0.0007809879607520998, 0.837888240814209, 0.04056864604353905, 0.0904875248670578, 0.007637485396116972, 0.006017865613102913, 0.008542112074792385, 0.002748802537098527, 0.00024962241877801716, 9.638278424972668e-05, 0.0012661818182095885, 9.987978410208598e-05, 9.708601282909513e-07, 1.2446763548723538e-06, 3.159180050715804e-05, 0.0004243544826749712, 0.00024872561334632337, 0.0004870378179475665, 6.291809404501691e-05, 0.0013696097303181887, 0.00014690285024698824, 0.00047081144293770194, 4.991534660803154e-05, 6.466147169703618e-06, 2.2779582650400698e-05, 3.848639607895166e-06, 0.0002761429932434112, 5.56770237380988e-06, 3.06706033370574e-06, 4.308940788178006e-06], "target_probs": 0.837888240814209}}


{"result": {"time": "2021-02-21 12:51:57.000765", "n_pass": [260, 33, 18], "n_token": 61, "loss": [0.3347873091697693, 0.16377566754817963], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "None", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 24, "repair_targets": [3], "repair_candidates": [8, 26, 35, 37, 1, 24, 30, 55, 9, 39, 41, 12, 43, 45, 20, 59, 3, 7, 32, 34, 16, 48, 50, 18, 52, 54, 5, 28, 13, 46]}}
{"prediction": {"error_location": 0.7154901623725891, "repair_targets": [0.8489324450492859], "repair_candidates": [0.0008387607522308826, 0.8489324450492859, 0.04492180049419403, 0.08401686698198318, 0.004181946162134409, 0.001364035764709115, 0.006438608281314373, 0.002071768743917346, 0.00039025238947942853, 0.00014788877160754055, 0.001472311094403267, 0.00020496755314525217, 1.5321113551181043e-06, 1.5532139059359906e-06, 4.5299279008759186e-05, 0.0006557760643772781, 0.00037665199488401413, 0.0004596849612426013, 0.0001051104482030496, 0.0019298371626064181, 0.0002781817165669054, 0.0006174221052788198, 0.00010298585402779281, 1.165543835668359e-05, 2.8406911951606162e-05, 8.267852535936981e-06, 0.00037700022221542895, 8.100672857835889e-06, 4.2939836930599995e-06, 6.56273414278985e-06], "target_probs": 0.8489324450492859}}


{"result": {"time": "2021-02-21 12:51:57.083668", "n_pass": [261, 34, 19], "n_token": 60, "loss": [0.45238882303237915, 0.24708272516727448], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", ",", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 23, "repair_targets": [3], "repair_candidates": [8, 25, 34, 36, 1, 23, 29, 54, 9, 38, 40, 11, 42, 44, 19, 58, 3, 7, 31, 33, 15, 47, 49, 17, 51, 53, 5, 27, 12, 45]}}
{"prediction": {"error_location": 0.6361067891120911, "repair_targets": [0.7810760736465454], "repair_candidates": [0.001103684538975358, 0.7810760736465454, 0.048287276178598404, 0.14066654443740845, 0.010084996931254864, 0.004323760513216257, 0.004665394779294729, 0.0015762046677991748, 0.0003628004342317581, 0.0001245194289367646, 0.0018166893860325217, 0.00028569591813720763, 1.6593114651186625e-06, 2.1879677660763264e-06, 5.848878572578542e-05, 0.0004953737370669842, 0.0005324461380951107, 0.0005130882491357625, 0.00010491688590263948, 0.0023448430001735687, 0.00028934713918715715, 0.0007232329808175564, 0.00010223678691545501, 1.3588153706223238e-05, 3.1050956749822944e-05, 9.549561582389288e-06, 0.00038140208926051855, 9.833950571191963e-06, 5.25490168001852e-06, 7.826123692211695e-06], "target_probs": 0.7810760736465454}}


{"result": {"time": "2021-02-21 12:51:57.166172", "n_pass": [262, 35, 20], "n_token": 59, "loss": [0.15202458202838898, 0.1565881222486496], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "=", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 22, "repair_targets": [3], "repair_candidates": [8, 24, 33, 35, 1, 22, 28, 53, 9, 37, 39, 10, 41, 43, 18, 57, 3, 7, 30, 32, 14, 46, 48, 16, 50, 52, 5, 26, 11, 44]}}
{"prediction": {"error_location": 0.8589671850204468, "repair_targets": [0.8550561666488647], "repair_candidates": [0.0009056164999492466, 0.8550561666488647, 0.04445391148328781, 0.0875328779220581, 0.0032104398123919964, 0.0009280965896323323, 0.0007421381305903196, 0.0002467581653036177, 0.00028719959664158523, 0.00017005890549626201, 0.0017202881863340735, 0.00022291592904366553, 1.539313643661444e-06, 1.6516534060428967e-06, 4.828837336390279e-05, 0.0005543900188058615, 0.0004853244172409177, 0.0003709963639266789, 9.744264389155433e-05, 0.0014923859853297472, 0.00033148936927318573, 0.0006218592170625925, 0.00010855562868528068, 1.2770252396876458e-05, 2.828647120622918e-05, 8.89337661647005e-06, 0.00033965377951972187, 8.188923857233021e-06, 4.4797584450861905e-06, 7.343569905060576e-06], "target_probs": 0.8550561666488647}}


{"result": {"time": "2021-02-21 12:51:57.247816", "n_pass": [265, 36, 21], "n_token": 58, "loss": [0.16682180762290955, 0.15448631346225739], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "None", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 21, "repair_targets": [3], "repair_candidates": [8, 23, 32, 34, 1, 21, 27, 52, 9, 36, 38, 10, 40, 42, 17, 56, 3, 7, 29, 31, 13, 45, 47, 15, 49, 51, 5, 25, 11, 43]}}
{"prediction": {"error_location": 0.8463503122329712, "repair_targets": [0.8568552136421204], "repair_candidates": [0.0010035157902166247, 0.8568552136421204, 0.03886473551392555, 0.09375455230474472, 0.003201174084097147, 0.0007770837983116508, 0.0002851091849151999, 7.007928070379421e-05, 0.000817367690615356, 9.555555152473971e-05, 0.000888670445419848, 0.00012593464634846896, 1.0192896979788202e-06, 1.134434114646865e-06, 3.5290908272145316e-05, 0.0004360151360742748, 0.00034146764664910734, 0.0002898949314840138, 9.217890328727663e-05, 0.0010268721962347627, 0.0002672132686711848, 0.00038226123433560133, 9.376973321195692e-05, 9.526433132123202e-06, 1.9473402062430978e-05, 6.652450338151539e-06, 0.00024382751144003123, 5.523038907995215e-06, 3.1208353448164416e-06, 5.967536253592698e-06], "target_probs": 0.8568552136421204}}


{"result": {"time": "2021-02-21 12:51:57.328742", "n_pass": [266, 37, 22], "n_token": 57, "loss": [0.08469164371490479, 0.17558550834655762], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", ",", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 20, "repair_targets": [3], "repair_candidates": [8, 22, 31, 33, 1, 20, 26, 51, 9, 35, 37, 10, 39, 41, 16, 55, 3, 7, 28, 30, 12, 44, 46, 14, 48, 50, 5, 24, 11, 42]}}
{"prediction": {"error_location": 0.9187955260276794, "repair_targets": [0.838965654373169], "repair_candidates": [0.0014206072082743049, 0.838965654373169, 0.04332521930336952, 0.10510086268186569, 0.003313750494271517, 0.0006777438102290034, 0.00031386545742861927, 0.00018958054715767503, 5.04885392729193e-05, 0.00010743496386567131, 0.001365887583233416, 0.0003655132313724607, 2.0946461063431343e-06, 1.7676273955657962e-06, 5.503933789441362e-05, 0.0005890934844501317, 0.0005563278682529926, 0.0005492490017786622, 0.00016020299517549574, 0.0014138204278424382, 0.0002474887005519122, 0.0006011089426465333, 0.00018200009071733803, 1.8006105165113695e-05, 3.1177485652733594e-05, 1.1724855539796408e-05, 0.00036070437636226416, 9.674072316556703e-06, 5.353301276045386e-06, 8.544611773686484e-06], "target_probs": 0.838965654373169}}


{"result": {"time": "2021-02-21 12:51:57.412317", "n_pass": [268, 38, 23], "n_token": 56, "loss": [0.27551400661468506, 0.16862714290618896], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "\"\\n        Upload a file and store it under a key\\n\\n        Params:\\n            - key           The key to store the file under.\\n\\n            - local_file    A file-like object which would be uploaded\\n\\n            - bucket        (Optional) The name of the bucket to use (can be skipped if setting the default_bucket)\\n                            option for the connection\\n\\n            - expires       (Optional) Sets the the Cache-Control headers. The value can be a number (used as seconds),\\n                            A Timedelta or the 'max' string, which will automatically set the file to be cached for a\\n                            year. Defaults to no caching\\n\\n            - content_type  (Optional) Explicitly sets the Content-Type header. if not specified, tinys3 will try to\\n                            guess the right content type for the file (using the mimetypes lib)\\n\\n            - public        (Optional) If set to true, tinys3 will set the file to be publicly available using the acl\\n                            headers. Defaults to True.\\n\\n            - headers       (Optional) Allows you to specify extra headers for the request using a dict.\\n\\n            - rewind        (Optional) If true, tinys3 will seek the file like object to the beginning before uploading.\\n                            Defaults to True.\\n\\n            - Close         (Optional) If true, tinys3 will close the file like object after the upload was complete\\n\\n        Returns:\\n            - A response object from the requests lib or a future that wraps that response object if used with a pool.\\n\\n        Usage:\\n\\n        >>> with open('my_local_file.zip', 'rb') as f:\\n        >>>     conn.upload('my_awesome_key.zip',f,\\n        >>>                 expires='max',\\n        >>>                 bucket='sample_bucket',\\n        >>>                 headers={\\n        >>>                     'x-amz-storage-class': 'REDUCED_REDUNDANCY'\\n        >>>                 })\\n\\n        There are more usage examples in the readme file.\\n\\n        \"", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 19, "repair_targets": [3], "repair_candidates": [8, 21, 30, 32, 1, 19, 25, 50, 9, 34, 36, 10, 38, 40, 15, 54, 3, 7, 27, 29, 12, 43, 45, 13, 47, 49, 5, 23, 11, 41]}}
{"prediction": {"error_location": 0.7591817378997803, "repair_targets": [0.8448238372802734], "repair_candidates": [0.0020187709014862776, 0.8448238372802734, 0.041848160326480865, 0.10087937116622925, 0.0033971620723605156, 0.000715244619641453, 0.0002300804917467758, 5.534094088943675e-05, 2.586449045338668e-05, 2.702800338738598e-05, 0.0003560050972737372, 0.0005802029627375305, 2.2023007204552414e-06, 1.77570768755686e-06, 4.562722460832447e-05, 0.000656419841106981, 0.0006858356646262109, 0.0005237804143689573, 0.00010642148117767647, 0.0016025853110477328, 0.00021426542662084103, 0.0006128625827841461, 0.00016025271906983107, 2.0129111362621188e-05, 3.128585376543924e-05, 1.1678992450470105e-05, 0.0003441633016336709, 9.017994671012275e-06, 5.091271304991096e-06, 9.51784477365436e-06], "target_probs": 0.8448238372802734}}


{"result": {"time": "2021-02-21 12:51:57.491237", "n_pass": [270, 39, 24], "n_token": 55, "loss": [0.021829914301633835, 0.17231842875480652], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "run", "(", "r", ")"]}}
{"position": {"error_location": 18, "repair_targets": [3], "repair_candidates": [8, 20, 29, 31, 1, 18, 24, 49, 9, 33, 35, 10, 37, 39, 14, 53, 3, 7, 26, 28, 12, 42, 44, 13, 46, 48, 5, 22, 11, 40]}}
{"prediction": {"error_location": 0.9784066081047058, "repair_targets": [0.8417111039161682], "repair_candidates": [0.001440372783690691, 0.8417111039161682, 0.035036586225032806, 0.11280890554189682, 0.0035171941854059696, 0.0010390918469056487, 0.00024140861933119595, 4.057566911797039e-05, 1.761415296641644e-05, 0.00011532288044691086, 0.00010401992767583579, 0.00016102736117318273, 1.2642134379348136e-06, 1.1294745263512596e-06, 4.232804349157959e-05, 0.00036804136470891535, 0.0003585059894248843, 0.0007681332062929869, 6.681208469672129e-05, 0.0011997601250186563, 0.00016950879944488406, 0.0003326958976686001, 0.00012426674948073924, 1.478298054280458e-05, 2.67528976110043e-05, 7.772924618620891e-06, 0.0002681278274394572, 7.023464604571927e-06, 4.497272584558232e-06, 5.428529675555183e-06], "target_probs": 0.8417111039161682}}


{"result": {"time": "2021-02-21 12:51:57.647416", "n_pass": [290, 41, 25], "n_token": 53, "loss": [0.028623411431908607, 0.22647994756698608], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def upload(", "self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 18, "repair_targets": [3], "repair_candidates": [8, 20, 29, 31, 1, 18, 24, 49, 9, 33, 35, 10, 37, 39, 14, 51, 3, 7, 26, 28, 12, 42, 44, 13, 46, 48, 5, 22, 11, 40]}}
{"prediction": {"error_location": 0.971782386302948, "repair_targets": [0.7973353266716003], "repair_candidates": [0.001483934698626399, 0.7973353266716003, 0.04397941008210182, 0.14412541687488556, 0.005826171021908522, 0.001924482872709632, 0.0004067051340825856, 0.00010987214045599103, 5.868342122994363e-05, 0.00040641360101290047, 0.000690498563926667, 0.0001548898871988058, 1.6720794064895017e-06, 1.501774022472091e-06, 5.5410760978702456e-05, 0.0003998148313257843, 0.00037114962469786406, 0.0008236780995503068, 7.143920811358839e-05, 0.0007684805314056575, 8.374828757951036e-05, 0.00033238212927244604, 2.8774835300282575e-05, 5.019360742153367e-06, 5.4557309340452775e-05, 7.75510761741316e-06, 0.00039350028964690864, 5.3237610700307414e-05, 1.3114186003804207e-05, 3.295519491075538e-05], "target_probs": 0.7973353266716003}}


{"result": {"time": "2021-02-21 12:51:57.724233", "n_pass": [292, 42, 26], "n_token": 52, "loss": [0.28616756200790405, 0.6026954650878906], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "UploadRequest", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 17, "repair_targets": [2], "repair_candidates": [7, 19, 28, 30, 0, 17, 23, 48, 8, 32, 34, 9, 36, 38, 13, 50, 2, 6, 25, 27, 11, 41, 43, 12, 45, 47, 4, 21, 10, 39]}}
{"prediction": {"error_location": 0.7511367201805115, "repair_targets": [0.5473343133926392], "repair_candidates": [0.025961212813854218, 0.5473343133926392, 0.11739765107631683, 0.2762529253959656, 0.011121782474219799, 0.002994069131091237, 0.000697916024364531, 0.00017789239063858986, 0.00015633330622222275, 0.001041118404828012, 0.0011167451739311218, 0.001361262984573841, 5.812365088786464e-06, 6.700361154798884e-06, 0.00012211297871544957, 0.001257259980775416, 0.0016318167326971889, 0.005314148962497711, 0.00017681786266621202, 0.002732824767008424, 0.00021556699357461184, 0.001494868891313672, 7.291324436664581e-05, 1.4784882296225987e-05, 0.00016375718405470252, 2.61568548012292e-05, 0.0008725777151994407, 0.0001716751285130158, 3.58844808943104e-05, 7.10631356923841e-05], "target_probs": 0.5473343133926392}}


{"result": {"time": "2021-02-21 12:51:58.186380", "n_pass": [365, 48, 27], "n_token": 51, "loss": [0.4674472212791443, 0.6502882838249207], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", ",", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 18, 27, 29, 0, 16, 22, 47, 8, 31, 33, 9, 35, 37, 13, 49, 2, 6, 24, 26, 11, 40, 42, 12, 44, 46, 4, 20, 10, 38]}}
{"prediction": {"error_location": 0.6265998482704163, "repair_targets": [0.5218952894210815], "repair_candidates": [0.034287963062524796, 0.5218952894210815, 0.13912971317768097, 0.2424837201833725, 0.012245225720107555, 0.003605386009439826, 0.0012690426083281636, 0.0005072412313893437, 0.0004578919324558228, 0.004158963914960623, 0.014673860743641853, 0.001011769869364798, 0.00018607637321110815, 0.00013893812138121575, 0.00022080390772316605, 0.0017751605482771993, 0.002678631106391549, 0.011171068996191025, 0.00040851806988939643, 0.003606656799092889, 0.0003822626022156328, 0.0012579617323353887, 0.00015276140766218305, 2.9434369935188442e-05, 0.00030126282945275307, 3.6269866541260853e-05, 0.0014350300189107656, 0.0003134977596346289, 6.996688898652792e-05, 0.00010953961464110762], "target_probs": 0.5218952894210815}}


{"result": {"time": "2021-02-21 12:51:58.337445", "n_pass": [368, 50, 28], "n_token": 50, "loss": [0.560869038105011, 0.5388445854187012], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", ",", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 26, 28, 0, 16, 21, 46, 8, 30, 32, 9, 34, 36, 13, 48, 2, 6, 23, 25, 11, 39, 41, 12, 43, 45, 4, 19, 10, 37]}}
{"prediction": {"error_location": 0.5707128643989563, "repair_targets": [0.5834219455718994], "repair_candidates": [0.026099173352122307, 0.5834219455718994, 0.08990407735109329, 0.25581011176109314, 0.010840976610779762, 0.002296013291925192, 0.0005112841026857495, 0.00015162903582677245, 0.00014431404997594655, 0.0024173774290829897, 0.012261494994163513, 0.0007120298105292022, 5.399125802796334e-05, 6.548112287418917e-05, 8.998934208648279e-05, 0.0009876531548798084, 0.0027150739915668964, 0.0046884142793715, 0.0005260325269773602, 0.0031314613297581673, 0.000415781803894788, 0.0009801335399970412, 0.00019625249842647463, 2.5142004233202897e-05, 0.00016678255633451045, 2.4036469767452218e-05, 0.001018732669763267, 0.0002119518758263439, 5.265702202450484e-05, 8.00188718130812e-05], "target_probs": 0.5834219455718994}}


{"result": {"time": "2021-02-21 12:51:58.412798", "n_pass": [370, 51, 29], "n_token": 49, "loss": [0.033452797681093216, 0.4457884430885315], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", ",", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 25, 27, 0, 16, 20, 45, 8, 29, 31, 9, 33, 35, 13, 47, 2, 6, 22, 24, 11, 38, 40, 12, 42, 44, 4, 18, 10, 36]}}
{"prediction": {"error_location": 0.9671007990837097, "repair_targets": [0.6403192281723022], "repair_candidates": [0.03152187541127205, 0.6403192281723022, 0.09759489446878433, 0.18914824724197388, 0.01822306029498577, 0.00448188278824091, 0.0008327055838890374, 0.0002534352242946625, 0.00023641635198146105, 0.0016956795006990433, 0.002262126887217164, 0.00010771067900350317, 3.226538319722749e-05, 6.759996904293075e-05, 4.3002277379855514e-05, 0.0010596541687846184, 0.0038574240170419216, 0.0009044697508215904, 0.0013855791185051203, 0.0016036629676818848, 0.0017500718822702765, 0.0004153595073148608, 0.0007558259530924261, 5.5555541621288285e-05, 9.993648563977331e-05, 5.509104084922001e-05, 0.0009795204969123006, 0.0001419355976395309, 3.269980879849754e-05, 8.313082798849791e-05], "target_probs": 0.6403192281723022}}


{"result": {"time": "2021-02-21 12:51:58.487813", "n_pass": [372, 52, 30], "n_token": 48, "loss": [0.04636450484395027, 0.564037561416626], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", ".", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 24, 26, 0, 16, 19, 44, 8, 28, 30, 9, 32, 34, 13, 46, 2, 6, 21, 23, 11, 37, 39, 12, 41, 43, 4, 18, 10, 35]}}
{"prediction": {"error_location": 0.9546939134597778, "repair_targets": [0.5689074397087097], "repair_candidates": [0.04190772771835327, 0.5689074397087097, 0.12114398181438446, 0.17635555565357208, 0.03682926669716835, 0.010246321558952332, 0.0022118939086794853, 0.0006840858259238303, 0.0006978297606110573, 0.005738913547247648, 0.006913148332387209, 0.0009495205013081431, 9.11691749934107e-05, 0.0002940166159532964, 1.175493343907874e-05, 0.0026022992096841335, 0.005349418614059687, 0.0011594598181545734, 0.003504791297018528, 0.003298356896266341, 0.00542095210403204, 0.0006013402598910034, 0.002203462878242135, 0.00016774768300820142, 0.00017104264406953007, 0.0002414421905996278, 0.001850214903242886, 0.00026212475495412946, 5.267748565529473e-05, 0.0001320840819971636], "target_probs": 0.5689074397087097}}


{"result": {"time": "2021-02-21 12:51:58.564804", "n_pass": [374, 53, 31], "n_token": 47, "loss": [0.09261689335107803, 0.5367032885551453], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "=", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 25, 0, 16, 19, 43, 8, 27, 29, 9, 31, 33, 13, 45, 2, 6, 20, 22, 11, 36, 38, 12, 40, 42, 4, 18, 10, 34]}}
{"prediction": {"error_location": 0.9115424752235413, "repair_targets": [0.5846725702285767], "repair_candidates": [0.0494435615837574, 0.5846725702285767, 0.13059841096401215, 0.14510202407836914, 0.03650211915373802, 0.009646360762417316, 0.0025208494625985622, 0.0009456034749746323, 0.0009653653833083808, 0.006556660868227482, 0.006076617632061243, 0.0013376338174566627, 0.0001937012275448069, 0.0006618390325456858, 5.666407378157601e-05, 3.2423155062133446e-05, 0.004404034931212664, 0.0008978641708381474, 0.003023061202839017, 0.004324433859437704, 0.005331612192094326, 0.000835719401948154, 0.0023252475075423717, 0.00016252321074716747, 0.00022554732277058065, 0.0002043556742137298, 0.0023656177800148726, 0.0003450026561040431, 6.356038647936657e-05, 0.00017905229469761252], "target_probs": 0.5846725702285767}}


{"result": {"time": "2021-02-21 12:51:58.712000", "n_pass": [379, 55, 32], "n_token": 46, "loss": [0.18966548144817352, 0.5687616467475891], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", ",", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 42, 8, 26, 28, 9, 30, 32, 13, 44, 2, 6, 20, 22, 11, 35, 37, 12, 39, 41, 4, 18, 10, 33]}}
{"prediction": {"error_location": 0.8272356390953064, "repair_targets": [0.5662261843681335], "repair_candidates": [0.04752933233976364, 0.5662261843681335, 0.13557776808738708, 0.15991614758968353, 0.03564343601465225, 0.010744213126599789, 0.002996788825839758, 0.0012479430297389627, 0.0013945982791483402, 0.0106806680560112, 0.01435738243162632, 0.0025911524426192045, 0.0002466943406034261, 0.00036655637086369097, 3.922096220776439e-05, 7.912379078334197e-05, 0.0018904486205428839, 4.74319385830313e-05, 0.00013978137576486915, 0.0009372913627885282, 0.0016876941081136465, 0.0013934946618974209, 0.0011924456339329481, 7.574406481580809e-05, 0.00026594704831950366, 0.00010357953578932211, 0.001953651662915945, 0.0003986974770668894, 8.396826888201758e-05, 0.00019267058814875782], "target_probs": 0.5662261843681335}}


{"result": {"time": "2021-02-21 12:51:58.785679", "n_pass": [381, 56, 33], "n_token": 45, "loss": [0.16998906433582306, 0.5225384831428528], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "=", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 41, 8, 25, 27, 9, 29, 31, 13, 43, 2, 6, 20, 22, 11, 34, 36, 12, 38, 40, 4, 18, 10, 32]}}
{"prediction": {"error_location": 0.8436739444732666, "repair_targets": [0.5930132865905762], "repair_candidates": [0.052565380930900574, 0.5930132865905762, 0.11333780735731125, 0.13589969277381897, 0.041162680834531784, 0.011416124179959297, 0.003181198611855507, 0.0011863104300573468, 0.00117537344340235, 0.012327438220381737, 0.011580660939216614, 0.0017024725675582886, 0.00027701471117325127, 0.0005338852060958743, 5.53582030988764e-05, 9.23859333852306e-05, 0.0009664103854447603, 0.00013908441178500652, 0.003516770899295807, 0.0013526788679882884, 0.004432372748851776, 0.002166864462196827, 0.003785771783441305, 0.0002218767476733774, 0.00026786859962157905, 0.0005073597421869636, 0.002501449082046747, 0.00039735547034069896, 5.481327752931975e-05, 0.00018224315135739744], "target_probs": 0.5930132865905762}}


{"result": {"time": "2021-02-21 12:51:58.859074", "n_pass": [383, 57, 34], "n_token": 44, "loss": [0.1568068414926529, 0.5833376049995422], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", ",", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 40, 8, 25, 26, 9, 28, 30, 13, 42, 2, 6, 20, 22, 11, 33, 35, 12, 37, 39, 4, 18, 10, 31]}}
{"prediction": {"error_location": 0.8548690676689148, "repair_targets": [0.558032751083374], "repair_candidates": [0.057184793055057526, 0.558032751083374, 0.13573139905929565, 0.12661470472812653, 0.038824256509542465, 0.011285170912742615, 0.0038709589280188084, 0.0019815387204289436, 0.002249325392767787, 0.019290918484330177, 0.026080762967467308, 0.002949036890640855, 0.0005244078929536045, 0.001013709232211113, 9.488924843026325e-05, 0.00012124512431910262, 0.001546351471915841, 9.57332958932966e-05, 0.00014199317956808954, 0.00013281116844154894, 0.0005373279564082623, 0.0011576514225453138, 0.0056616454385221004, 0.0005800449871458113, 0.00035839734482578933, 0.0006345880683511496, 0.002662861021235585, 0.00039153339457698166, 5.021803008276038e-05, 0.00019904659711755812], "target_probs": 0.558032751083374}}


{"result": {"time": "2021-02-21 12:51:58.931398", "n_pass": [385, 58, 35], "n_token": 43, "loss": [0.13116376101970673, 0.6430850625038147], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "=", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 39, 8, 25, 26, 9, 27, 29, 13, 41, 2, 6, 20, 22, 11, 32, 34, 12, 36, 38, 4, 18, 10, 30]}}
{"prediction": {"error_location": 0.877074122428894, "repair_targets": [0.525668203830719], "repair_candidates": [0.05750761553645134, 0.525668203830719, 0.12160485237836838, 0.11883385479450226, 0.03878668695688248, 0.011142377741634846, 0.004239468369632959, 0.0022860663011670113, 0.002626788569614291, 0.03360087051987648, 0.04698105528950691, 0.001928445533849299, 0.0005492600612342358, 0.0011793046724051237, 8.182760211639106e-05, 0.00015681926743127406, 0.0028714402578771114, 0.00014232374087441713, 0.0002049032918876037, 0.00028105100500397384, 0.013082949444651604, 0.01027800515294075, 0.00367569038644433, 0.00018909880600403994, 0.0001962757669389248, 0.0002455828071106225, 0.0012801425764337182, 0.00020754672004841268, 3.06922011077404e-05, 0.00014073887723498046], "target_probs": 0.525668203830719}}


{"result": {"time": "2021-02-21 12:51:59.005462", "n_pass": [387, 59, 36], "n_token": 42, "loss": [0.0647767037153244, 0.656095027923584], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "=", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 38, 8, 25, 26, 9, 27, 28, 13, 40, 2, 6, 20, 22, 11, 31, 33, 12, 35, 37, 4, 18, 10, 29]}}
{"prediction": {"error_location": 0.9372768402099609, "repair_targets": [0.5188735723495483], "repair_candidates": [0.058229684829711914, 0.5188735723495483, 0.12943695485591888, 0.11483926326036453, 0.0377245657145977, 0.011047006584703922, 0.0043314057402312756, 0.002583191031590104, 0.0031197424978017807, 0.034279122948646545, 0.060070302337408066, 0.0010932997101917863, 0.0004891654243692756, 0.00109490763861686, 5.731319106416777e-05, 0.00014591452782042325, 0.00228106533177197, 0.00010602769179968163, 0.00019619370868895203, 0.00021540145098697394, 0.0015728125581517816, 0.006856436841189861, 0.0059854318387806416, 0.0026776636950671673, 0.00027066265465691686, 0.0006264079129323363, 0.0013424712233245373, 0.0002683083002921194, 4.032532888231799e-05, 0.00014536285016220063], "target_probs": 0.5188735723495483}}


{"result": {"time": "2021-02-21 12:51:59.148628", "n_pass": [392, 61, 37], "n_token": 41, "loss": [0.07017429918050766, 0.646467387676239], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "rewind", ",", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 37, 8, 25, 26, 9, 27, 28, 13, 39, 2, 6, 20, 22, 11, 31, 32, 12, 34, 36, 4, 18, 10, 29]}}
{"prediction": {"error_location": 0.9322314262390137, "repair_targets": [0.5238932371139526], "repair_candidates": [0.05744446814060211, 0.5238932371139526, 0.13304109871387482, 0.12424078583717346, 0.03813805803656578, 0.011902611702680588, 0.004607798997312784, 0.002722127130255103, 0.003296256298199296, 0.024119878187775612, 0.0489821583032608, 0.0018710421863943338, 0.00047661253483965993, 0.0006270363228395581, 7.857895252527669e-05, 0.0001491563452873379, 0.0018863733857870102, 8.920131949707866e-05, 0.0001495521719334647, 0.0001333384425379336, 0.0012367694871500134, 0.004693880677223206, 0.005722814705222845, 0.003990696277469397, 0.00501425052061677, 5.4776442993897945e-05, 0.0007399158785119653, 0.0003941223258152604, 7.2434515459463e-05, 0.0002309768897248432], "target_probs": 0.5238932371139526}}


{"result": {"time": "2021-02-21 12:51:59.219707", "n_pass": [394, 62, 38], "n_token": 40, "loss": [0.07987228035926819, 0.6467005014419556], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "rewind", "close", "=", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 36, 8, 25, 26, 9, 27, 28, 13, 38, 2, 6, 20, 22, 11, 31, 32, 12, 33, 35, 4, 18, 10, 29]}}
{"prediction": {"error_location": 0.9232341647148132, "repair_targets": [0.5237711071968079], "repair_candidates": [0.05743151903152466, 0.5237711071968079, 0.13550370931625366, 0.12852445244789124, 0.04123668372631073, 0.011872909031808376, 0.004803485702723265, 0.0029359357431530952, 0.0033345487900078297, 0.022678932175040245, 0.04758523032069206, 0.0016580113442614675, 0.0005138918058946729, 0.0006544060888700187, 7.878670294303447e-05, 0.00016404000052716583, 0.001853106776252389, 8.505755249643698e-05, 0.00010963954264298081, 0.00012038069689879194, 0.0008923596469685435, 0.0031629279255867004, 0.004279916640371084, 0.003531823866069317, 0.0024838964454829693, 7.642775744898245e-05, 0.0001406257797498256, 0.00022056707530282438, 5.423913535196334e-05, 0.0002413538022665307], "target_probs": 0.5237711071968079}}


{"result": {"time": "2021-02-21 12:51:59.289996", "n_pass": [396, 63, 39], "n_token": 39, "loss": [0.12291860580444336, 0.6307403445243835], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "rewind", "close", "close", "self", ".", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 35, 8, 25, 26, 9, 27, 28, 13, 37, 2, 6, 20, 22, 11, 31, 32, 12, 33, 34, 4, 18, 10, 29]}}
{"prediction": {"error_location": 0.8843355178833008, "repair_targets": [0.5321976542472839], "repair_candidates": [0.054736748337745667, 0.5321976542472839, 0.13340115547180176, 0.14011316001415253, 0.040201086550951004, 0.012810498476028442, 0.005280786659568548, 0.002504565753042698, 0.0025876066647469997, 0.016901910305023193, 0.026351014152169228, 0.0024143573828041553, 0.0004743757890537381, 0.0005955438246019185, 9.523845073999837e-05, 0.00014203687896952033, 0.003499900223687291, 0.00016796489944681525, 0.0003528352244757116, 0.00028801130247302353, 0.0018118659500032663, 0.004884153138846159, 0.0075296214781701565, 0.007129398640245199, 0.0030365856364369392, 5.8526329667074606e-05, 2.6101357434527017e-05, 5.346882971934974e-05, 0.00010017693421104923, 0.00025363019085489213], "target_probs": 0.5321976542472839}}


{"result": {"time": "2021-02-21 12:51:59.360136", "n_pass": [399, 64, 40], "n_token": 38, "loss": [0.05292018502950668, 0.627512514591217], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", ",", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "rewind", "close", "close", "self", "r", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [7, 17, 23, 24, 0, 16, 19, 35, 8, 25, 26, 9, 27, 28, 13, 36, 2, 6, 20, 22, 11, 31, 32, 12, 33, 34, 4, 18, 10, 29]}}
{"prediction": {"error_location": 0.948455810546875, "repair_targets": [0.5339182615280151], "repair_candidates": [0.06293150782585144, 0.5339182615280151, 0.14010705053806305, 0.13801740109920502, 0.03708188235759735, 0.0120827192440629, 0.004390097223222256, 0.002004328416660428, 0.0021973378024995327, 0.0153345363214612, 0.02075897715985775, 0.002165899146348238, 0.0005950360791757703, 0.000626099354121834, 5.437124855234288e-05, 0.00014751993876416236, 0.0032562853302806616, 0.00022962209186516702, 0.00040814015665091574, 0.0003552553534973413, 0.002163864439353347, 0.007311725988984108, 0.0074426522478461266, 0.004236026667058468, 0.0015485124895349145, 3.779196413233876e-05, 2.256574953207746e-05, 2.6165747840423137e-05, 0.00026091630570590496, 0.00028751103673130274], "target_probs": 0.5339182615280151}}


{"result": {"time": "2021-02-21 12:51:59.636393", "n_pass": [407, 68, 41], "n_token": 37, "loss": [0.18204519152641296, 0.6093552708625793], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", ",", "rewind", "rewind", "close", "close", "self", "r", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [6, 16, 22, 23, 0, 15, 18, 34, 7, 24, 25, 8, 26, 27, 12, 35, 2, 5, 19, 21, 10, 30, 31, 11, 32, 33, 4, 17, 9, 28]}}
{"prediction": {"error_location": 0.8335637450218201, "repair_targets": [0.5437012910842896], "repair_candidates": [0.0936029776930809, 0.5437012910842896, 0.1098269522190094, 0.053413569927215576, 0.03817998617887497, 0.025072377175092697, 0.008303842507302761, 0.003508893074467778, 0.0034340750426054, 0.023527175188064575, 0.03316504880785942, 0.00515998899936676, 0.0009387047030031681, 0.0011733216233551502, 0.00021483127784449607, 0.0003248767170589417, 0.00627141771838069, 0.00038508421857841313, 0.0007946742116473615, 0.0006084272172302008, 0.00387354614213109, 0.012047491036355495, 0.017004327848553658, 0.010925971902906895, 0.003264341037720442, 8.481011900585145e-05, 4.9405749450670555e-05, 4.892954166280106e-05, 0.0005511213676072657, 0.0005425091949291527], "target_probs": 0.5437012910842896}}


{"result": {"time": "2021-02-21 12:51:59.914489", "n_pass": [432, 72, 42], "n_token": 36, "loss": [0.12423761188983917, 0.6271157264709473], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", ",", "key", ",", "local_file", "bucket", "expires", "content_type", "public", "headers", "rewind", "close", "r", "=", "(", "self", "expires", "local_file", "self", "bucket", "(", "bucket", "expires", "expires", "content_type", "content_type", "public", "public", "headers", "rewind", "rewind", "close", "close", "self", "r", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2], "repair_candidates": [6, 16, 22, 23, 0, 15, 18, 33, 7, 24, 25, 8, 26, 27, 12, 34, 2, 5, 19, 21, 10, 29, 30, 11, 31, 32, 4, 17, 9, 28]}}
{"prediction": {"error_location": 0.8831700682640076, "repair_targets": [0.5341301560401917], "repair_candidates": [0.09414342790842056, 0.5341301560401917, 0.10655056685209274, 0.05020228773355484, 0.038410484790802, 0.025856727734208107, 0.008233540691435337, 0.0035992481280118227, 0.0032302967738360167, 0.023863909766077995, 0.04031970351934433, 0.002878217725083232, 0.000901459832675755, 0.001888912171125412, 0.00020824780222028494, 0.00040276540676131845, 0.0033311008010059595, 0.00032921836827881634, 0.0007812507683411241, 0.0008497231174260378, 0.0052008009515702724, 0.026014158502221107, 0.022077124565839767, 0.004363613203167915, 0.0011902147671207786, 0.00010875044245040044, 5.6857639719964936e-05, 4.2607392970239744e-05, 0.00043306563748046756, 0.0004015911545138806], "target_probs": 0.5341301560401917}}




Minimal simplified tokens:

['self', ',', 'key', ',', 'local_file', 'bucket', 'expires', 'content_type', 'public', 'headers', 'rewind', 'close', 'r', '=', '(', 'self', 'expires', 'local_file', 'self', 'bucket', '(', 'bucket', 'expires', 'expires', 'content_type', 'content_type', 'public', 'public', 'headers', 'rewind', 'rewind', 'close', 'close', 'self', 'r', ')']
