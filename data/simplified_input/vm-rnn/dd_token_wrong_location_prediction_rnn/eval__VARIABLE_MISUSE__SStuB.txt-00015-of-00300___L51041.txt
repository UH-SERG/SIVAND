
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", ":", "#NEWLINE#", "#INDENT#", "if", "np", ".", "can_cast", "(", "upcast", ",", "t", ")", ":", "#NEWLINE#", "#INDENT#", "_upcast_memo", "[", "hash", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "raise", "TypeError", "(", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"], "error_location": [77], "repair_targets": [10, 24, 32, 48, 61, 74], "repair_candidates": [3, 18, 41, 70, 88, 35, 59, 77, 10, 24, 32, 48, 61, 74], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "scipy/scipy/scipy/sparse/sputils.py", "license": "bsd-3-clause", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00015-of-00300", "js_count": 51041, "results": {"model": "rnn", "prob": {"loc": [[0.2307150810956955, 6.503830718429526e-07, 5.026668858931771e-08, 2.8229321742401225e-06, 4.519620677712055e-09, 1.1625054696651205e-08, 4.686052079705405e-07, 1.5066200376168126e-07, 7.202761054259099e-08, 7.633635590309495e-08, 1.7528074636175006e-07, 3.3027124146656206e-08, 5.437357231130591e-07, 2.2837036794953747e-07, 4.706015488409321e-08, 8.292193598435915e-08, 3.4885877653323405e-07, 9.338896234112326e-08, 0.001823725295253098, 7.898488263435866e-08, 3.2948346273542484e-08, 6.6342704485578e-07, 3.2794744697639544e-08, 6.697024446111755e-07, 0.01730850711464882, 9.466032224736409e-07, 1.0573947974990006e-06, 7.470287073374493e-07, 2.4070027393463533e-07, 1.803628322250006e-07, 3.73317412538654e-08, 3.0291187158582034e-06, 0.019124647602438927, 2.777612166937615e-07, 5.401220732892398e-07, 3.683411193833308e-07, 2.6579987988384346e-08, 2.0006925183224666e-07, 2.6395244390187145e-07, 5.351943599407605e-08, 5.405755700849113e-07, 0.03551856800913811, 1.7510315956315026e-05, 3.0237632017815486e-05, 0.00012138594320276752, 1.870180199148308e-06, 2.7560521630221047e-05, 4.035286451653519e-07, 2.1315428000434622e-07, 1.9923110983199877e-07, 0.003008994972333312, 6.199151357577648e-06, 1.1430547601776198e-06, 9.04539490420575e-07, 1.4802408543346246e-07, 1.726779487398744e-06, 3.761494156151457e-07, 3.003349604568939e-07, 1.2380479574858327e-07, 0.023388201370835304, 5.294035076985892e-07, 0.02041933685541153, 5.879555260435154e-07, 2.732927555371134e-07, 6.647024974881788e-07, 2.3059430986904772e-07, 9.678662900114432e-05, 1.3514228385247407e-06, 8.265211590696708e-07, 2.2887389761194754e-08, 0.5174710154533386, 1.3252512189865229e-06, 2.2805282107185576e-09, 9.464583428098194e-08, 0.010907793417572975, 9.820865010112811e-09, 1.1490551514725666e-06, 0.014270629733800888, 4.021235326945316e-06, 1.1794899137385073e-06, 7.611500222992618e-06, 1.7293174323640415e-06, 5.666350944011356e-07, 1.1707435731977966e-07, 1.6402752578414947e-07, 9.220444553648122e-06, 3.3327072657129975e-08, 6.018051834644211e-08, 0.1056809052824974, 8.818921060083085e-07, 6.594659225811483e-06, 2.294833763016868e-07, 1.0354264645684452e-07]], "pointer": [[0.0, 0.0, 0.0, 0.020051689818501472, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0686955526471138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008454238413833082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006161155761219561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012665082467719913, 0.0, 0.0, 0.08064772933721542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00043767664465121925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8239394426345825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00013265173765830696, 0.0, 7.3438131948933e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002567129908129573, 0.0, 0.0, 0.0, 0.0002349970891373232, 0.0, 0.0, 0.00011410794104449451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00037759458064101636, 0.0, 0.0, 0.0, 0.0]], "target": [0.8948260545730591]}, "loss": [4.249551773071289, 0.11112593114376068], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [70]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 13:11:32.526670", "n_pass": [1, 1, 1], "n_token": 93, "loss": [0.6588017344474792, 0.11112593114376068], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", ":", "#NEWLINE#", "#INDENT#", "if", "np", ".", "can_cast", "(", "upcast", ",", "t", ")", ":", "#NEWLINE#", "#INDENT#", "_upcast_memo", "[", "hash", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "raise", "TypeError", "(", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 70, "repair_targets": [10, 24, 32, 48, 61, 74], "repair_candidates": [3, 18, 41, 70, 88, 35, 59, 77, 10, 24, 32, 48, 61, 74]}}
{"prediction": {"error_location": 0.5174710154533386, "repair_targets": [0.0686955526471138, 0.0006161155761219561, 0.0012665082467719913, 0.8239394426345825, 7.3438131948933e-05, 0.0002349970891373232], "repair_candidates": [0.020051689818501472, 0.0686955526471138, 0.0008454238413833082, 0.0006161155761219561, 0.0012665082467719913, 0.08064772933721542, 0.00043767664465121925, 0.8239394426345825, 0.00013265173765830696, 7.3438131948933e-05, 0.002567129908129573, 0.0002349970891373232, 0.00011410794104449451, 0.00037759458064101636], "target_probs": 0.8948260545730591}}


{"result": {"time": "2021-02-21 13:11:32.721701", "n_pass": [53, 3, 2], "n_token": 87, "loss": [0.12064187228679657, 0.0370534211397171], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", ":", "#NEWLINE#", "#INDENT#", "_upcast_memo", "[", "hash", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "raise", "TypeError", "(", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 64, "repair_targets": [10, 24, 32, 48, 55, 68], "repair_candidates": [3, 18, 41, 64, 82, 35, 53, 71, 10, 24, 32, 48, 55, 68]}}
{"prediction": {"error_location": 0.8863513469696045, "repair_targets": [0.029120728373527527, 0.00024459074484184384, 0.0004206891171634197, 0.9337612986564636, 9.388092621520627e-06, 6.792253407184035e-05], "repair_candidates": [0.009667332284152508, 0.029120728373527527, 0.00029075381462462246, 0.00024459074484184384, 0.0004206891171634197, 0.02563374489545822, 0.00018212651775684208, 0.9337612986564636, 2.9520608677557902e-06, 9.388092621520627e-06, 0.00045555675751529634, 6.792253407184035e-05, 3.45175176335033e-05, 0.00010840706090675667], "target_probs": 0.9636246562004089}}


{"result": {"time": "2021-02-21 13:11:32.814983", "n_pass": [55, 4, 3], "n_token": 81, "loss": [0.654588520526886, 0.08658872544765472], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "raise", "TypeError", "(", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 58, "repair_targets": [10, 24, 32, 48, 55, 62], "repair_candidates": [3, 18, 41, 58, 76, 35, 53, 65, 10, 24, 32, 48, 55, 62]}}
{"prediction": {"error_location": 0.5196558833122253, "repair_targets": [0.05887705832719803, 0.0003575091250240803, 0.0008258274756371975, 0.8566386103630066, 0.0002731874119490385, 8.200242154998705e-05], "repair_candidates": [0.015065333805978298, 0.05887705832719803, 0.00041534402407705784, 0.0003575091250240803, 0.0008258274756371975, 0.06625059247016907, 0.00027476923423819244, 0.8566386103630066, 3.9097802073229104e-05, 0.0002731874119490385, 0.0005611258093267679, 8.200242154998705e-05, 0.00014728574024047703, 0.00019221098045818508], "target_probs": 0.9170541763305664}}


{"result": {"time": "2021-02-21 13:11:33.083969", "n_pass": [101, 7, 4], "n_token": 78, "loss": [0.7542510032653809, 0.1376771479845047], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "raise", "TypeError", "(", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 58, "repair_targets": [10, 24, 32, 48, 55, 62], "repair_candidates": [3, 18, 41, 58, 73, 35, 53, 65, 10, 24, 32, 48, 55, 62]}}
{"prediction": {"error_location": 0.4703627824783325, "repair_targets": [0.1372825652360916, 0.0007067961269058287, 0.0015632236609235406, 0.7314628958702087, 0.00028979533817619085, 7.468077092198655e-05], "repair_candidates": [0.0228328388184309, 0.1372825652360916, 0.0006705763516947627, 0.0007067961269058287, 0.0015632236609235406, 0.10327740013599396, 0.0003143812355119735, 0.7314628958702087, 6.291397585300729e-05, 0.00028979533817619085, 0.0011074935318902135, 7.468077092198655e-05, 0.00022683499264530838, 0.00012761975813191384], "target_probs": 0.8713799715042114}}


{"result": {"time": "2021-02-21 13:11:33.174401", "n_pass": [102, 8, 5], "n_token": 75, "loss": [0.5333940982818604, 0.14335374534130096], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "'no supported conversion for types: %r'", "%", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 58, "repair_targets": [10, 24, 32, 48, 55, 62], "repair_candidates": [3, 18, 41, 58, 70, 35, 53, 65, 10, 24, 32, 48, 55, 62]}}
{"prediction": {"error_location": 0.5866105556488037, "repair_targets": [0.21430131793022156, 0.00102844403591007, 0.0017461893148720264, 0.6488440632820129, 0.000447934668045491, 7.957676280057058e-05], "repair_candidates": [0.025590216740965843, 0.21430131793022156, 0.0011987130856141448, 0.00102844403591007, 0.0017461893148720264, 0.10358865559101105, 0.0005365530960261822, 0.6488440632820129, 7.8435885370709e-05, 0.000447934668045491, 0.0017713989363983274, 7.957676280057058e-05, 0.00036898109829053283, 0.0004194494686089456], "target_probs": 0.8664475083351135}}


{"result": {"time": "2021-02-21 13:11:33.262024", "n_pass": [103, 9, 6], "n_token": 72, "loss": [0.7543278932571411, 0.16596141457557678], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ",", ")", ")", ")"]}}
{"position": {"error_location": 58, "repair_targets": [10, 24, 32, 48, 55, 62], "repair_candidates": [3, 18, 41, 58, 67, 35, 53, 65, 10, 24, 32, 48, 55, 62]}}
{"prediction": {"error_location": 0.47032660245895386, "repair_targets": [0.3301447331905365, 0.0016384052578359842, 0.002258437918499112, 0.5121260285377502, 0.0007915137684904039, 0.00011982549040112644], "repair_candidates": [0.0378461629152298, 0.3301447331905365, 0.0022233328782022, 0.0016384052578359842, 0.002258437918499112, 0.10778868198394775, 0.0005056584486737847, 0.5121260285377502, 9.996710286941379e-05, 0.0007915137684904039, 0.0015462468145415187, 0.00011982549040112644, 0.0027764735277742147, 0.00013462593778967857], "target_probs": 0.8470789194107056}}


{"result": {"time": "2021-02-21 13:11:33.348408", "n_pass": [105, 10, 7], "n_token": 69, "loss": [0.7538524866104126, 0.1433776170015335], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def upcast(", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 58, "repair_targets": [10, 24, 32, 48, 55, 62], "repair_candidates": [3, 18, 41, 58, 67, 35, 53, 65, 10, 24, 32, 48, 55, 62]}}
{"prediction": {"error_location": 0.4705503284931183, "repair_targets": [0.1723395138978958, 0.000805852294433862, 0.001249091699719429, 0.6912522912025452, 0.0007029100670479238, 7.719613495282829e-05], "repair_candidates": [0.027986807748675346, 0.1723395138978958, 0.0022503568325191736, 0.000805852294433862, 0.001249091699719429, 0.09906864166259766, 0.0005049484898336232, 0.6912522912025452, 0.00010400752944406122, 0.0007029100670479238, 0.000821509980596602, 7.719613495282829e-05, 0.002789749065414071, 4.718864511232823e-05], "target_probs": 0.8664268255233765}}


{"result": {"time": "2021-02-21 13:11:33.433434", "n_pass": [106, 11, 8], "n_token": 67, "loss": [1.011253833770752, 0.4415903389453888], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 56, "repair_targets": [8, 22, 30, 46, 53, 60], "repair_candidates": [1, 16, 39, 56, 65, 33, 51, 63, 8, 22, 30, 46, 53, 60]}}
{"prediction": {"error_location": 0.36376258730888367, "repair_targets": [0.16785381734371185, 0.0036014127545058727, 0.0031244277488440275, 0.4666725993156433, 0.0015899424906820059, 0.00017082727572415024], "repair_candidates": [0.2319088578224182, 0.16785381734371185, 0.03594816103577614, 0.0036014127545058727, 0.0031244277488440275, 0.079680897295475, 0.0019520738860592246, 0.4666725993156433, 0.00030838922248221934, 0.0015899424906820059, 0.0030695293098688126, 0.00017082727572415024, 0.004019074607640505, 0.00010002026101574302], "target_probs": 0.6430130004882812}}


{"result": {"time": "2021-02-21 13:11:33.516921", "n_pass": [108, 12, 9], "n_token": 65, "loss": [0.7646307349205017, 0.18585480749607086], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "#INDENT#", "\"Returns the nearest supported sparse dtype for the\\n    combination of one or more types.\\n\\n    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype\\n\\n    Examples\\n    --------\\n\\n    >>> upcast('int32')\\n    <type 'numpy.int32'>\\n    >>> upcast('bool')\\n    <type 'numpy.bool_'>\\n    >>> upcast('int32','float32')\\n    <type 'numpy.float64'>\\n    >>> upcast('bool',complex,float)\\n    <type 'numpy.complex128'>\\n\\n    \"", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 54, "repair_targets": [6, 20, 28, 44, 51, 58], "repair_candidates": [1, 14, 37, 54, 63, 31, 49, 61, 6, 20, 28, 44, 51, 58]}}
{"prediction": {"error_location": 0.4655057489871979, "repair_targets": [0.3403821289539337, 0.002893890254199505, 0.00425970833748579, 0.48134365677833557, 0.0013822709443047643, 0.000132493456476368], "repair_candidates": [0.07013829052448273, 0.3403821289539337, 0.015896841883659363, 0.002893890254199505, 0.00425970833748579, 0.07565876841545105, 0.0016188040608540177, 0.48134365677833557, 0.0002981151337735355, 0.0013822709443047643, 0.0028870238456875086, 0.000132493456476368, 0.0029962060507386923, 0.00011177238775417209], "target_probs": 0.8303941488265991}}


{"result": {"time": "2021-02-21 13:11:33.599202", "n_pass": [109, 13, 10], "n_token": 62, "loss": [1.0589573383331299, 0.0771278589963913], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "_upcast_memo", ".", "get", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 51, "repair_targets": [3, 17, 25, 41, 48, 55], "repair_candidates": [1, 11, 34, 51, 60, 28, 46, 58, 3, 17, 25, 41, 48, 55]}}
{"prediction": {"error_location": 0.3468172252178192, "repair_targets": [0.8153343200683594, 0.0029094619676470757, 0.002564443973824382, 0.1044597402215004, 0.0004316393460612744, 7.18902301741764e-05], "repair_candidates": [0.0547952838242054, 0.8153343200683594, 0.0028940781485289335, 0.0029094619676470757, 0.002564443973824382, 0.012996303848922253, 0.0007641499396413565, 0.1044597402215004, 0.00010338331776438281, 0.0004316393460612744, 0.0017343516228720546, 7.18902301741764e-05, 0.0008887301082722843, 5.219945524004288e-05], "target_probs": 0.9257714748382568}}


{"result": {"time": "2021-02-21 13:11:33.682135", "n_pass": [111, 14, 11], "n_token": 59, "loss": [1.2862451076507568, 0.08655506372451782], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "(", "hash", "(", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 48, "repair_targets": [3, 14, 22, 38, 45, 52], "repair_candidates": [1, 8, 31, 48, 57, 25, 43, 55, 3, 14, 22, 38, 45, 52]}}
{"prediction": {"error_location": 0.2763063311576843, "repair_targets": [0.8072944283485413, 0.006090118084102869, 0.005154699552804232, 0.09801086038351059, 0.0004397543962113559, 9.516571299172938e-05], "repair_candidates": [0.05978739634156227, 0.8072944283485413, 0.0032410388812422752, 0.006090118084102869, 0.005154699552804232, 0.01602037250995636, 0.0006050754454918206, 0.09801086038351059, 9.479750588070601e-05, 0.0004397543962113559, 0.00191216089297086, 9.516571299172938e-05, 0.001172647112980485, 8.145864558173344e-05], "target_probs": 0.9170850515365601}}


{"result": {"time": "2021-02-21 13:11:33.761048", "n_pass": [112, 15, 12], "n_token": 56, "loss": [1.1433886289596558, 0.2512144148349762], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "#NEWLINE#", "if", "(", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 45, "repair_targets": [3, 11, 19, 35, 42, 49], "repair_candidates": [1, 5, 28, 45, 54, 22, 40, 52, 3, 11, 19, 35, 42, 49]}}
{"prediction": {"error_location": 0.31873708963394165, "repair_targets": [0.4647389054298401, 0.011742704547941685, 0.010569635778665543, 0.2894446551799774, 0.0011273350100964308, 0.0002323301014257595], "repair_candidates": [0.08756814152002335, 0.4647389054298401, 0.05246233567595482, 0.011742704547941685, 0.010569635778665543, 0.07101944833993912, 0.002879548352211714, 0.2894446551799774, 0.000359269673936069, 0.0011273350100964308, 0.005197479855269194, 0.0002323301014257595, 0.00242005567997694, 0.00023824372328817844], "target_probs": 0.7778555750846863}}


{"result": {"time": "2021-02-21 13:11:33.838907", "n_pass": [114, 16, 13], "n_token": 53, "loss": [0.9004748463630676, 0.12012895196676254], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 42, "repair_targets": [3, 8, 16, 32, 39, 46], "repair_candidates": [1, 5, 25, 42, 51, 19, 37, 49, 3, 8, 16, 32, 39, 46]}}
{"prediction": {"error_location": 0.4063766896724701, "repair_targets": [0.38292357325553894, 0.003295972477644682, 0.0014310608385130763, 0.4985744059085846, 0.0004942909581586719, 8.677785808686167e-05], "repair_candidates": [0.020880887284874916, 0.38292357325553894, 0.006435083691030741, 0.003295972477644682, 0.0014310608385130763, 0.08310475200414658, 0.0003798095276579261, 0.4985744059085846, 7.83350842539221e-05, 0.0004942909581586719, 0.0005681609036400914, 8.677785808686167e-05, 0.001691580517217517, 5.533228249987587e-05], "target_probs": 0.886806070804596}}


{"result": {"time": "2021-02-21 13:11:33.915642", "n_pass": [116, 17, 14], "n_token": 50, "loss": [1.0219547748565674, 0.11267855763435364], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "is not", "None", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 39, "repair_targets": [3, 8, 13, 29, 36, 43], "repair_candidates": [1, 5, 22, 39, 48, 16, 34, 46, 3, 8, 13, 29, 36, 43]}}
{"prediction": {"error_location": 0.35989072918891907, "repair_targets": [0.4079624116420746, 0.006588991731405258, 0.0005579802673310041, 0.47775018215179443, 0.00047862823703326285, 9.960586612578481e-05], "repair_candidates": [0.02080976404249668, 0.4079624116420746, 0.0051148561760783195, 0.006588991731405258, 0.0005579802673310041, 0.0774514228105545, 0.000536286155693233, 0.47775018215179443, 6.780556577723473e-05, 0.00047862823703326285, 0.0006848008488304913, 9.960586612578481e-05, 0.0018353242194280028, 6.192590080900118e-05], "target_probs": 0.8934378027915955}}


{"result": {"time": "2021-02-21 13:11:34.217924", "n_pass": [169, 21, 15], "n_token": 49, "loss": [1.0730581283569336, 0.09434320777654648], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "None", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 38, "repair_targets": [3, 8, 12, 28, 35, 42], "repair_candidates": [1, 5, 21, 38, 47, 15, 33, 45, 3, 8, 12, 28, 35, 42]}}
{"prediction": {"error_location": 0.34196120500564575, "repair_targets": [0.48277267813682556, 0.006367162335664034, 0.0008157603442668915, 0.4193914234638214, 0.0005286994273774326, 9.466852498007938e-05], "repair_candidates": [0.023741496726870537, 0.48277267813682556, 0.006887148134410381, 0.006367162335664034, 0.0008157603442668915, 0.05617549270391464, 0.00044219547999091446, 0.4193914234638214, 6.459046562667936e-05, 0.0005286994273774326, 0.0007905014208517969, 9.466852498007938e-05, 0.0018600539769977331, 6.804440636187792e-05], "target_probs": 0.9099704027175903}}


{"result": {"time": "2021-02-21 13:11:34.292318", "n_pass": [170, 22, 16], "n_token": 48, "loss": [0.9667048454284668, 0.06931139528751373], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "#INDENT#", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 37, "repair_targets": [3, 8, 11, 27, 34, 41], "repair_candidates": [1, 5, 20, 37, 46, 14, 32, 44, 3, 8, 11, 27, 34, 41]}}
{"prediction": {"error_location": 0.3803342580795288, "repair_targets": [0.5757510662078857, 0.006081412546336651, 0.00019122404046356678, 0.35064974427223206, 0.00029829758568666875, 6.435756949940696e-05], "repair_candidates": [0.015219094231724739, 0.5757510662078857, 0.0036913203075528145, 0.006081412546336651, 0.00019122404046356678, 0.04612485691905022, 0.00017324239888694137, 0.35064974427223206, 4.1977713408414274e-05, 0.00029829758568666875, 0.0004706513718701899, 6.435756949940696e-05, 0.0012025348842144012, 4.0230330341728404e-05], "target_probs": 0.9330360889434814}}


{"result": {"time": "2021-02-21 13:11:34.366654", "n_pass": [171, 23, 17], "n_token": 47, "loss": [1.0086865425109863, 0.07797770202159882], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "return", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 36, "repair_targets": [3, 8, 10, 26, 33, 40], "repair_candidates": [1, 5, 19, 36, 45, 13, 31, 43, 3, 8, 10, 26, 33, 40]}}
{"prediction": {"error_location": 0.3646976947784424, "repair_targets": [0.5093574523925781, 0.0034756099339574575, 5.620919182547368e-05, 0.4117757976055145, 0.00024985571508295834, 7.009685214143246e-05], "repair_candidates": [0.01575584150850773, 0.5093574523925781, 0.004219975788146257, 0.0034756099339574575, 5.620919182547368e-05, 0.05310746282339096, 0.00022075251035857946, 0.4117757976055145, 4.290692231734283e-05, 0.00024985571508295834, 0.00044772375258617103, 7.009685214143246e-05, 0.0011800372740253806, 4.030220952699892e-05], "target_probs": 0.9249850511550903}}


{"result": {"time": "2021-02-21 13:11:34.440548", "n_pass": [172, 24, 18], "n_token": 46, "loss": [0.9216642379760742, 0.08054881542921066], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "#NEWLINE#", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 35, "repair_targets": [3, 8, 9, 25, 32, 39], "repair_candidates": [1, 5, 18, 35, 44, 12, 30, 42, 3, 8, 9, 25, 32, 39]}}
{"prediction": {"error_location": 0.39785638451576233, "repair_targets": [0.3398120701313019, 0.0040618181228637695, 0.0003680280060507357, 0.5780147314071655, 0.000285252375761047, 6.796092202421278e-05], "repair_candidates": [0.014330635778605938, 0.3398120701313019, 0.0016252656932920218, 0.0040618181228637695, 0.0003680280060507357, 0.05955646187067032, 0.00017290924733970314, 0.5780147314071655, 3.877203562296927e-05, 0.000285252375761047, 0.00039935499080456793, 6.796092202421278e-05, 0.0012315548956394196, 3.510496753733605e-05], "target_probs": 0.9226098656654358}}


{"result": {"time": "2021-02-21 13:11:34.515737", "n_pass": [174, 25, 19], "n_token": 45, "loss": [0.8587886691093445, 0.06809084117412567], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "#UNINDENT#", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 34, "repair_targets": [3, 8, 9, 24, 31, 38], "repair_candidates": [1, 5, 17, 34, 43, 11, 29, 41, 3, 8, 9, 24, 31, 38]}}
{"prediction": {"error_location": 0.423675000667572, "repair_targets": [0.4772208333015442, 0.0029751628171652555, 0.0013931466965004802, 0.45218947529792786, 0.000327529851347208, 6.951219984330237e-05], "repair_candidates": [0.015501853078603745, 0.4772208333015442, 0.001501886872574687, 0.0029751628171652555, 0.0013931466965004802, 0.04679631069302559, 0.0001604025746928528, 0.45218947529792786, 4.203946446068585e-05, 0.000327529851347208, 0.00046849242062307894, 6.951219984330237e-05, 0.0013104587560519576, 4.2965461034327745e-05], "target_probs": 0.9341756105422974}}


{"result": {"time": "2021-02-21 13:11:34.588784", "n_pass": [175, 26, 20], "n_token": 44, "loss": [0.7993110418319702, 0.07316876947879791], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "upcast", "=", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 33, "repair_targets": [3, 8, 9, 23, 30, 37], "repair_candidates": [1, 5, 16, 33, 42, 10, 28, 40, 3, 8, 9, 23, 30, 37]}}
{"prediction": {"error_location": 0.44963860511779785, "repair_targets": [0.5709437131881714, 0.010781116783618927, 0.016046807169914246, 0.33127787709236145, 0.0003104477364104241, 8.396626799367368e-05], "repair_candidates": [0.022756606340408325, 0.5709437131881714, 0.0015372897032648325, 0.010781116783618927, 0.016046807169914246, 0.04408331587910652, 0.000211710314033553, 0.33127787709236145, 6.00662715442013e-05, 0.0003104477364104241, 0.0005543837905861437, 8.396626799367368e-05, 0.0013006216613575816, 5.215677811065689e-05], "target_probs": 0.9294439554214478}}


{"result": {"time": "2021-02-21 13:11:34.660848", "n_pass": [177, 27, 21], "n_token": 43, "loss": [0.7725300192832947, 0.028032345697283745], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "upcast", "np", ".", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 32, "repair_targets": [3, 8, 9, 22, 29, 36], "repair_candidates": [1, 5, 15, 32, 41, 10, 27, 39, 3, 8, 9, 22, 29, 36]}}
{"prediction": {"error_location": 0.4618431627750397, "repair_targets": [0.544184148311615, 0.00502752186730504, 0.0010192045010626316, 0.42172175645828247, 0.0003254374605603516, 7.883105718065053e-05], "repair_candidates": [0.02132890187203884, 0.544184148311615, 0.002078382996842265, 0.00502752186730504, 0.0010192045010626316, 0.0019050991395488381, 0.00023613698431290686, 0.42172175645828247, 6.351765478029847e-05, 0.0003254374605603516, 0.0005126052419655025, 7.883105718065053e-05, 0.0014702649787068367, 4.816971340915188e-05], "target_probs": 0.972356915473938}}


{"result": {"time": "2021-02-21 13:11:34.732484", "n_pass": [178, 28, 22], "n_token": 41, "loss": [0.9078851938247681, 0.019313210621476173], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", "[", "]", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 30, "repair_targets": [3, 8, 9, 20, 27, 34], "repair_candidates": [1, 5, 13, 30, 39, 10, 25, 37, 3, 8, 9, 20, 27, 34]}}
{"prediction": {"error_location": 0.40337634086608887, "repair_targets": [0.6200354099273682, 0.0014868208672851324, 0.00037995970342308283, 0.35853639245033264, 0.00036423816345632076, 6.932963151484728e-05], "repair_candidates": [0.015270795673131943, 0.6200354099273682, 0.0018018677365034819, 0.0014868208672851324, 0.00037995970342308283, 0.0002894453937187791, 3.375979940756224e-05, 0.35853639245033264, 5.3931235015625134e-05, 0.00036423816345632076, 0.00043155872845090926, 6.932963151484728e-05, 0.0012063905596733093, 4.00966418965254e-05], "target_probs": 0.9808720946311951}}


{"result": {"time": "2021-02-21 13:11:34.872660", "n_pass": [181, 30, 23], "n_token": 39, "loss": [0.9505280256271362, 0.02556466870009899], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "#NEWLINE#", "return", "upcast", "(", "args", ","]}}
{"position": {"error_location": 28, "repair_targets": [3, 8, 9, 18, 25, 32], "repair_candidates": [1, 5, 13, 28, 37, 10, 23, 35, 3, 8, 9, 18, 25, 32]}}
{"prediction": {"error_location": 0.3865368962287903, "repair_targets": [0.7776371836662292, 0.0013156561180949211, 0.0003582806675694883, 0.19508130848407745, 0.00029295566491782665, 7.39553797757253e-05], "repair_candidates": [0.02179029770195484, 0.7776371836662292, 0.001575861475430429, 0.0013156561180949211, 0.0003582806675694883, 0.00027735266485251486, 3.938731606467627e-05, 0.19508130848407745, 5.6259286793647334e-05, 0.00029295566491782665, 0.000669614935759455, 7.39553797757253e-05, 0.0007807864458300173, 5.105533273308538e-05], "target_probs": 0.9747593402862549}}


{"result": {"time": "2021-02-21 13:11:35.220378", "n_pass": [191, 35, 24], "n_token": 37, "loss": [0.7790034413337708, 0.018478073179721832], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "=", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 28, "repair_targets": [3, 8, 9, 18, 25, 32], "repair_candidates": [1, 5, 13, 28, 35, 10, 23, 33, 3, 8, 9, 18, 25, 32]}}
{"prediction": {"error_location": 0.4588630795478821, "repair_targets": [0.8639838695526123, 0.0007542743114754558, 0.00022572923626285046, 0.11629211902618408, 0.00018112511315848678, 0.00025442789774388075], "repair_candidates": [0.017088891938328743, 0.8639838695526123, 0.0005378867499530315, 0.0007542743114754558, 0.00022572923626285046, 0.00017284380737692118, 1.1672183063637931e-05, 0.11629211902618408, 2.3204162062029354e-05, 0.00018112511315848678, 0.00020304850477259606, 0.00025442789774388075, 0.0002479795948602259, 2.2857164367451333e-05], "target_probs": 0.9816915988922119}}


{"result": {"time": "2021-02-21 13:11:35.428818", "n_pass": [198, 38, 25], "n_token": 36, "loss": [0.790429413318634, 0.11115191131830215], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "can_cast", "(", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 27, "repair_targets": [3, 7, 8, 17, 24, 31], "repair_candidates": [1, 4, 12, 27, 34, 9, 22, 32, 3, 7, 8, 17, 24, 31]}}
{"prediction": {"error_location": 0.45364993810653687, "repair_targets": [0.21395663917064667, 0.0018878956325352192, 0.000863618915900588, 0.6750361323356628, 0.001504674437455833, 0.0015538197476416826], "repair_candidates": [0.09111065417528152, 0.21395663917064667, 0.010774225927889347, 0.0018878956325352192, 0.000863618915900588, 0.0005691718542948365, 5.632504326058552e-05, 0.6750361323356628, 0.00011425674165366217, 0.001504674437455833, 0.0010247223544865847, 0.0015538197476416826, 0.0014472706243395805, 0.0001005947488010861], "target_probs": 0.8948028087615967}}


{"result": {"time": "2021-02-21 13:11:35.837066", "n_pass": [210, 44, 26], "n_token": 34, "loss": [0.987330436706543, 0.07844318449497223], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "#NEWLINE#", "t", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 25, "repair_targets": [3, 7, 8, 17, 22, 29], "repair_candidates": [1, 4, 12, 25, 32, 9, 20, 30, 3, 7, 8, 17, 22, 29]}}
{"prediction": {"error_location": 0.3725699782371521, "repair_targets": [0.11631006747484207, 0.0017602471634745598, 0.0007017445750534534, 0.8031700253486633, 0.0007812680560164154, 0.0018312281463295221], "repair_candidates": [0.06591252237558365, 0.11631006747484207, 0.006513732019811869, 0.0017602471634745598, 0.0007017445750534534, 0.0005316182505339384, 8.741538476897404e-05, 0.8031700253486633, 6.396744720404968e-05, 0.0007812680560164154, 0.0005207937210798264, 0.0018312281463295221, 0.0017356075113639235, 7.976190681802109e-05], "target_probs": 0.9245545864105225}}


{"result": {"time": "2021-02-21 13:11:36.038026", "n_pass": [220, 47, 27], "n_token": 33, "loss": [0.853984534740448, 0.08307985216379166], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["*", "args", "t", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 24, "repair_targets": [2, 6, 7, 16, 21, 28], "repair_candidates": [1, 3, 11, 24, 31, 8, 19, 29, 2, 6, 7, 16, 21, 28]}}
{"prediction": {"error_location": 0.42571526765823364, "repair_targets": [0.04234941303730011, 0.0015282263047993183, 0.000545100774616003, 0.8742832541465759, 0.0005644346820190549, 0.0010071930009871721], "repair_candidates": [0.06950761377811432, 0.04234941303730011, 0.008045518770813942, 0.0015282263047993183, 0.000545100774616003, 0.00045401768875308335, 5.6408192904200405e-05, 0.8742832541465759, 4.1156472434522584e-05, 0.0005644346820190549, 0.00028919015312567353, 0.0010071930009871721, 0.0012868484482169151, 4.16126313211862e-05], "target_probs": 0.9202776551246643}}


{"result": {"time": "2021-02-21 13:11:36.505499", "n_pass": [240, 54, 28], "n_token": 32, "loss": [0.505233645439148, 0.04362082853913307], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 23, "repair_targets": [1, 5, 6, 15, 20, 27], "repair_candidates": [0, 2, 10, 23, 30, 7, 18, 28, 1, 5, 6, 15, 20, 27]}}
{"prediction": {"error_location": 0.6033646464347839, "repair_targets": [0.02637358196079731, 0.0014838111819699407, 0.0004560787638183683, 0.9281465411186218, 0.00034140056231990457, 0.0005154729587957263], "repair_candidates": [0.01721121557056904, 0.02637358196079731, 0.024174008518457413, 0.0014838111819699407, 0.0004560787638183683, 0.00048142264131456614, 3.633935557445511e-05, 0.9281465411186218, 3.2726777135394514e-05, 0.00034140056231990457, 0.00013319957361090928, 0.0005154729587957263, 0.0005944080767221749, 1.9834862541756593e-05], "target_probs": 0.9573168754577637}}


{"result": {"time": "2021-02-21 13:11:36.573854", "n_pass": [244, 55, 29], "n_token": 31, "loss": [1.0116164684295654, 0.09886898845434189], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "(", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 22, "repair_targets": [1, 4, 5, 14, 19, 26], "repair_candidates": [0, 2, 9, 22, 29, 6, 17, 27, 1, 4, 5, 14, 19, 26]}}
{"prediction": {"error_location": 0.36363065242767334, "repair_targets": [0.06355573982000351, 0.011357279494404793, 0.001308842678554356, 0.8276841044425964, 0.0006677488563582301, 0.0012876621913164854], "repair_candidates": [0.038640882819890976, 0.06355573982000351, 0.05290096625685692, 0.011357279494404793, 0.001308842678554356, 0.0007945004617795348, 7.523982640122995e-05, 0.8276841044425964, 7.115660991985351e-05, 0.0006677488563582301, 0.00043166839168407023, 0.0012876621913164854, 0.0011737040476873517, 5.048608363722451e-05], "target_probs": 0.9058613777160645}}


{"result": {"time": "2021-02-21 13:11:37.033681", "n_pass": [289, 62, 30], "n_token": 30, "loss": [0.6028140783309937, 0.012467293068766594], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", ",", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 21, "repair_targets": [1, 4, 5, 13, 18, 25], "repair_candidates": [0, 2, 8, 21, 28, 6, 16, 26, 1, 4, 5, 13, 18, 25]}}
{"prediction": {"error_location": 0.5472694039344788, "repair_targets": [0.0038528614677488804, 0.0020485841669142246, 0.00040077537414617836, 0.9809199571609497, 0.000167965074069798, 0.0002199670998379588], "repair_candidates": [0.0044782464392483234, 0.0038528614677488804, 0.007418415974825621, 0.0020485841669142246, 0.00040077537414617836, 0.00010259608825435862, 3.678812390717212e-06, 0.9809199571609497, 2.0794401279999875e-05, 0.000167965074069798, 6.039302752469666e-05, 0.0002199670998379588, 0.000297990336548537, 7.83873019827297e-06], "target_probs": 0.9876101016998291}}


{"result": {"time": "2021-02-21 13:11:37.099292", "n_pass": [291, 63, 31], "n_token": 29, "loss": [0.7385626435279846, 0.01074360590428114], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", ")", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 20, "repair_targets": [1, 4, 5, 12, 17, 24], "repair_candidates": [0, 2, 8, 20, 27, 6, 15, 25, 1, 4, 5, 12, 17, 24]}}
{"prediction": {"error_location": 0.477800190448761, "repair_targets": [0.0031216300558298826, 0.0009003026061691344, 0.00022931021521799266, 0.9846909642219543, 0.000156868583871983, 0.00021482615557033569], "repair_candidates": [0.004527496173977852, 0.0031216300558298826, 0.005667534656822681, 0.0009003026061691344, 0.00022931021521799266, 0.00011353281297488138, 4.974729563400615e-06, 0.9846909642219543, 2.614586082927417e-05, 0.000156868583871983, 5.910339314141311e-05, 0.00021482615557033569, 0.0002794693282339722, 7.875381015765015e-06], "target_probs": 0.9893139004707336}}


{"result": {"time": "2021-02-21 13:11:37.164210", "n_pass": [292, 64, 32], "n_token": 28, "loss": [0.7257227301597595, 0.024211645126342773], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "#NEWLINE#", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 19, "repair_targets": [1, 4, 5, 11, 16, 23], "repair_candidates": [0, 2, 8, 19, 26, 6, 14, 24, 1, 4, 5, 11, 16, 23]}}
{"prediction": {"error_location": 0.4839746654033661, "repair_targets": [0.007140427827835083, 0.002430666470900178, 0.0008732767892070115, 0.964512825012207, 0.0005471303593367338, 0.0005748039693571627], "repair_candidates": [0.010513976216316223, 0.007140427827835083, 0.011703216470777988, 0.002430666470900178, 0.0008732767892070115, 0.000647574954200536, 2.6250983864883892e-05, 0.964512825012207, 7.836139411665499e-05, 0.0005471303593367338, 0.0001653035869821906, 0.0005748039693571627, 0.0007645606528967619, 2.1645366359734908e-05], "target_probs": 0.9760791063308716}}


{"result": {"time": "2021-02-21 13:11:37.228418", "n_pass": [293, 65, 33], "n_token": 27, "loss": [0.6853591799736023, 0.04032257944345474], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", ",", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 18, "repair_targets": [1, 4, 5, 10, 15, 22], "repair_candidates": [0, 2, 8, 18, 25, 6, 13, 23, 1, 4, 5, 10, 15, 22]}}
{"prediction": {"error_location": 0.5039092302322388, "repair_targets": [0.01042173895984888, 0.016278356313705444, 0.004340942483395338, 0.9255176782608032, 0.002933477284386754, 0.0009873580420389771], "repair_candidates": [0.01586778834462166, 0.01042173895984888, 0.02016896940767765, 0.016278356313705444, 0.004340942483395338, 0.0015403066063299775, 0.00019087744294665754, 0.9255176782608032, 0.0004251988139003515, 0.002933477284386754, 0.00044475498725660145, 0.0009873580420389771, 0.0008453160990029573, 3.727063813130371e-05], "target_probs": 0.9604795575141907}}


{"result": {"time": "2021-02-21 13:11:37.484090", "n_pass": [299, 69, 34], "n_token": 26, "loss": [0.7530322670936584, 0.057587750256061554], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", ")", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 17, "repair_targets": [1, 4, 5, 10, 14, 21], "repair_candidates": [0, 2, 8, 17, 24, 6, 13, 22, 1, 4, 5, 10, 14, 21]}}
{"prediction": {"error_location": 0.4709363877773285, "repair_targets": [0.01589108072221279, 0.02649436891078949, 0.005640371236950159, 0.8742538094520569, 0.020245525985956192, 0.0015138436574488878], "repair_candidates": [0.020813515409827232, 0.01589108072221279, 0.02830679900944233, 0.02649436891078949, 0.005640371236950159, 0.0024704253301024437, 0.0003687146818265319, 0.8742538094520569, 0.0019821596797555685, 0.020245525985956192, 0.0006736315554007888, 0.0015138436574488878, 0.0012892680242657661, 5.648521619150415e-05], "target_probs": 0.9440390467643738}}


{"result": {"time": "2021-02-21 13:11:37.547196", "n_pass": [301, 70, 35], "n_token": 25, "loss": [1.0261802673339844, 0.04071386530995369], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", ")", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 16, "repair_targets": [1, 4, 5, 10, 14, 20], "repair_candidates": [0, 2, 8, 16, 23, 6, 13, 21, 1, 4, 5, 10, 14, 20]}}
{"prediction": {"error_location": 0.3583732545375824, "repair_targets": [0.015058410353958607, 0.01863577961921692, 0.0033403735142201185, 0.8843212127685547, 0.03729068860411644, 0.0014573553344234824], "repair_candidates": [0.01621956378221512, 0.015058410353958607, 0.020748933777213097, 0.01863577961921692, 0.0033403735142201185, 0.0013076431350782514, 0.0001429876429028809, 0.8843212127685547, 0.0002202915638918057, 0.03729068860411644, 0.00010860222391784191, 0.0014573553344234824, 0.001100231078453362, 4.8084886657306924e-05], "target_probs": 0.9601038098335266}}


{"result": {"time": "2021-02-21 13:11:37.672982", "n_pass": [304, 72, 36], "n_token": 24, "loss": [0.4089527130126953, 0.026829950511455536], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "(", "args", ","]}}
{"position": {"error_location": 16, "repair_targets": [1, 4, 5, 10, 14, 19], "repair_candidates": [0, 2, 8, 16, 22, 6, 13, 20, 1, 4, 5, 10, 14, 19]}}
{"prediction": {"error_location": 0.6643455624580383, "repair_targets": [0.010239253751933575, 0.015179256908595562, 0.003276240546256304, 0.9011462926864624, 0.04221551865339279, 0.0014702168991789222], "repair_candidates": [0.010801293887197971, 0.010239253751933575, 0.012876596301794052, 0.015179256908595562, 0.003276240546256304, 0.0018610575934872031, 0.00018597434973344207, 0.9011462926864624, 9.55710347625427e-05, 0.04221551865339279, 5.3768191719427705e-05, 0.0014702168991789222, 0.0005648165824823081, 3.4077911550411955e-05], "target_probs": 0.9735267758369446}}


{"result": {"time": "2021-02-21 13:11:37.861720", "n_pass": [309, 75, 37], "n_token": 23, "loss": [0.0876736119389534, 0.06841852515935898], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args", ","]}}
{"position": {"error_location": 16, "repair_targets": [1, 4, 5, 10, 14, 19], "repair_candidates": [0, 2, 8, 16, 21, 6, 13, 20, 1, 4, 5, 10, 14, 19]}}
{"prediction": {"error_location": 0.9160597920417786, "repair_targets": [0.02903752587735653, 0.03803024813532829, 0.010557242669165134, 0.8493903279304504, 0.006558820605278015, 0.0002953617658931762], "repair_candidates": [0.026218269020318985, 0.02903752587735653, 0.024950677528977394, 0.03803024813532829, 0.010557242669165134, 0.014037257991731167, 0.0006731098401360214, 0.8493903279304504, 7.833394192857668e-05, 0.006558820605278015, 3.819530684268102e-05, 0.0002953617658931762, 3.8372741983039305e-05, 9.616567695047706e-05], "target_probs": 0.9338695406913757}}


{"result": {"time": "2021-02-21 13:11:37.923314", "n_pass": [311, 76, 38], "n_token": 22, "loss": [0.046702686697244644, 0.021404869854450226], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", ")", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 16, "repair_targets": [1, 4, 5, 10, 14, 19], "repair_candidates": [0, 2, 8, 16, 21, 6, 13, 20, 1, 4, 5, 10, 14, 19]}}
{"prediction": {"error_location": 0.9543709754943848, "repair_targets": [0.008985908702015877, 0.010505832731723785, 0.003910441882908344, 0.9536531567573547, 0.001727277529425919, 3.994175131083466e-05], "repair_candidates": [0.00892171822488308, 0.008985908702015877, 0.006757967174053192, 0.010505832731723785, 0.003910441882908344, 0.005185131914913654, 0.0002488071913830936, 0.9536531567573547, 1.4046543583390303e-05, 0.001727277529425919, 1.2148017958679702e-05, 3.994175131083466e-05, 8.885493116395082e-06, 2.868291448976379e-05], "target_probs": 0.9788225889205933}}


{"result": {"time": "2021-02-21 13:11:37.984543", "n_pass": [315, 77, 39], "n_token": 21, "loss": [0.006324159447103739, 0.056497637182474136], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "find_common_type", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 15, "repair_targets": [1, 3, 4, 9, 13, 18], "repair_candidates": [0, 2, 7, 15, 20, 5, 12, 19, 1, 3, 4, 9, 13, 18]}}
{"prediction": {"error_location": 0.9936956763267517, "repair_targets": [0.010379611514508724, 0.03448686748743057, 0.05703423544764519, 0.8420983552932739, 0.0010306613985449076, 3.898238355759531e-05], "repair_candidates": [0.010570593178272247, 0.010379611514508724, 0.014773654751479626, 0.03448686748743057, 0.05703423544764519, 0.029043221846222878, 0.00046510694664902985, 0.8420983552932739, 1.234085993928602e-05, 0.0010306613985449076, 1.8230035493616015e-05, 3.898238355759531e-05, 9.040518307301681e-06, 3.906544952769764e-05], "target_probs": 0.9450687170028687}}


{"result": {"time": "2021-02-21 13:11:38.045185", "n_pass": [319, 78, 40], "n_token": 20, "loss": [0.011987431906163692, 0.006708783563226461], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "for", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 14, "repair_targets": [1, 3, 4, 8, 12, 17], "repair_candidates": [0, 2, 6, 14, 19, 5, 11, 18, 1, 3, 4, 8, 12, 17]}}
{"prediction": {"error_location": 0.9880841374397278, "repair_targets": [0.0033748536370694637, 0.026867615059018135, 0.021297402679920197, 0.9408494234085083, 0.0008996519609354436, 2.470357867423445e-05], "repair_candidates": [0.003265051869675517, 0.0033748536370694637, 0.0032986754085868597, 0.026867615059018135, 0.021297402679920197, 6.920906889718026e-05, 1.4801671568420716e-05, 0.9408494234085083, 6.30453587291413e-06, 0.0008996519609354436, 1.0691616807889659e-05, 2.470357867423445e-05, 4.350480139692081e-06, 1.7231244783033617e-05], "target_probs": 0.9933136701583862}}


{"result": {"time": "2021-02-21 13:11:38.107600", "n_pass": [321, 79, 41], "n_token": 19, "loss": [0.0007160721579566598, 0.1191253662109375], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "t", "in", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 13, "repair_targets": [1, 3, 4, 7, 11, 16], "repair_candidates": [0, 2, 6, 13, 18, 5, 10, 17, 1, 3, 4, 7, 11, 16]}}
{"prediction": {"error_location": 0.9992842078208923, "repair_targets": [0.04146624356508255, 0.4599300026893616, 0.3577812612056732, 0.02762090414762497, 0.0008180888253264129, 8.005066047189757e-05], "repair_candidates": [0.02045890875160694, 0.04146624356508255, 0.08234789222478867, 0.4599300026893616, 0.3577812612056732, 0.007147634867578745, 0.002180426148697734, 0.02762090414762497, 1.6023543139453977e-05, 0.0008180888253264129, 5.724679431295954e-05, 8.005066047189757e-05, 1.8132343029719777e-05, 7.711689249845222e-05], "target_probs": 0.8876965045928955}}


{"result": {"time": "2021-02-21 13:11:38.167119", "n_pass": [323, 80, 42], "n_token": 18, "loss": [0.0007890925044193864, 0.07970944046974182], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "t", "supported_dtypes", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 12, "repair_targets": [1, 3, 4, 7, 10, 15], "repair_candidates": [0, 2, 6, 12, 17, 5, 9, 16, 1, 3, 4, 7, 10, 15]}}
{"prediction": {"error_location": 0.9992111921310425, "repair_targets": [0.020784657448530197, 0.3912862539291382, 0.510188102722168, 6.6417087509762496e-06, 0.001074156491085887, 4.480257848626934e-05], "repair_candidates": [0.013287010602653027, 0.020784657448530197, 0.06065073609352112, 0.3912862539291382, 0.510188102722168, 0.0025036928709596395, 3.178221231792122e-05, 6.6417087509762496e-06, 1.1644761798379477e-05, 0.001074156491085887, 5.912496999371797e-05, 4.480257848626934e-05, 1.4718785678269342e-05, 5.6651380873518065e-05], "target_probs": 0.9233846068382263}}


{"result": {"time": "2021-02-21 13:11:38.225858", "n_pass": [324, 81, 43], "n_token": 17, "loss": [0.006480392999947071, 0.15798304975032806], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "t", "upcast", "t", "(", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 11, "repair_targets": [1, 3, 4, 7, 9, 14], "repair_candidates": [0, 2, 6, 11, 16, 5, 8, 15, 1, 3, 4, 7, 9, 14]}}
{"prediction": {"error_location": 0.9935405850410461, "repair_targets": [0.05167079344391823, 0.5369493961334229, 0.2634040415287018, 1.873282053566072e-05, 0.001741600688546896, 7.969299622345716e-05], "repair_candidates": [0.028093937784433365, 0.05167079344391823, 0.11676432192325592, 0.5369493961334229, 0.2634040415287018, 0.0008807769045233727, 3.492450196063146e-05, 1.873282053566072e-05, 9.365642472403124e-05, 0.001741600688546896, 0.0001401275076204911, 7.969299622345716e-05, 2.2789241484133527e-05, 0.0001051507206284441], "target_probs": 0.8538642525672913}}


{"result": {"time": "2021-02-21 13:11:38.284871", "n_pass": [327, 82, 44], "n_token": 16, "loss": [0.743022084236145, 0.5045785903930664], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "t", "upcast", "t", "args", "]", "=", "t", "upcast", "args"]}}
{"position": {"error_location": 10, "repair_targets": [1, 3, 4, 7, 9, 13], "repair_candidates": [0, 2, 6, 10, 15, 5, 8, 14, 1, 3, 4, 7, 9, 13]}}
{"prediction": {"error_location": 0.47567421197891235, "repair_targets": [0.1396552324295044, 0.17879587411880493, 0.2812531292438507, 0.00042128562927246094, 0.0019339545397087932, 0.0017004628898575902], "repair_candidates": [0.1922362893819809, 0.1396552324295044, 0.17905230820178986, 0.17879587411880493, 0.2812531292438507, 0.012740088626742363, 0.0007783734472468495, 0.00042128562927246094, 0.008695974014699459, 0.0019339545397087932, 0.0003756666847039014, 0.0017004628898575902, 0.00040402941522188485, 0.001957315020263195], "target_probs": 0.6037599444389343}}


{"result": {"time": "2021-02-21 13:11:38.401394", "n_pass": [330, 84, 45], "n_token": 15, "loss": [0.7207437753677368, 0.3056795597076416], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["args", "t", "args", "t", "t", "upcast", "args", "t", "upcast", "t", "args", "]", "t", "upcast", "args"]}}
{"position": {"error_location": 10, "repair_targets": [1, 3, 4, 7, 9, 12], "repair_candidates": [0, 2, 6, 10, 14, 5, 8, 13, 1, 3, 4, 7, 9, 12]}}
{"prediction": {"error_location": 0.4863904118537903, "repair_targets": [0.08354075253009796, 0.15859651565551758, 0.44514891505241394, 0.00037161193904466927, 0.00039061016286723316, 0.04857424646615982], "repair_candidates": [0.1617051512002945, 0.08354075253009796, 0.09233639389276505, 0.15859651565551758, 0.44514891505241394, 0.002866673283278942, 0.00018586205260362476, 0.00037161193904466927, 0.005144848488271236, 0.00039061016286723316, 5.893115667277016e-05, 0.04857424646615982, 0.0005263643688522279, 0.0005530375638045371], "target_probs": 0.7366226315498352}}




Minimal simplified tokens:

['args', 't', 'args', 't', 't', 'upcast', 'args', 't', 'upcast', 't', 'args', ']', 't', 'upcast', 'args']
