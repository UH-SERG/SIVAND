
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", ",", "setStdout", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "_legacyObservers", ".", "append", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "_logBeginner", ".", "beginLoggingTo", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"], "error_location": [26], "repair_targets": [13, 36], "repair_candidates": [13, 36, 6, 26, 41, 4, 17, 2, 20, 29], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "twisted/twisted/twisted/python/log.py", "license": "mit", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00009-of-00300", "js_count": 30325, "results": {"model": "rnn", "prob": {"loc": [[0.14747898280620575, 1.0651993420651706e-07, 1.851464404012404e-08, 1.6215325748802911e-09, 5.348915266267795e-08, 3.0482705248857656e-09, 1.4839405082511803e-07, 3.7839598121536255e-08, 9.367850495323182e-09, 5.308694426275906e-07, 5.399086262514174e-07, 1.9172928489297192e-07, 3.097805389984387e-08, 6.500509925899678e-07, 3.833101303030162e-08, 2.292142369242356e-07, 1.0111453718764096e-07, 0.0003943204355891794, 1.0357954494111254e-07, 8.986744859384999e-08, 3.3974865232266893e-07, 8.310144039569423e-08, 1.882842326494938e-08, 3.0371225534508994e-07, 5.201153641110068e-08, 2.7264238156021747e-07, 0.12353737652301788, 1.7450433915655594e-06, 1.1154662971080143e-08, 8.77770105489617e-07, 1.5050480861589222e-09, 6.819531961355096e-08, 6.158974770187342e-07, 2.052712222422315e-09, 7.182026138252695e-07, 1.2359858025945414e-08, 0.7222435474395752, 1.7879027325307106e-07, 5.763723365248552e-08, 6.034028388057777e-07, 5.3677609912483604e-08, 0.006336587481200695, 3.2384312476096966e-07]], "pointer": [[0.0, 0.0, 0.0002832453465089202, 0.0, 0.1915578544139862, 0.0, 0.047935523092746735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7415249943733215, 0.0, 0.0, 0.0, 0.018309449777007103, 0.0, 0.0, 0.00015409832121804357, 0.0, 0.0, 0.0, 0.0, 0.0, 7.411473052343354e-05, 0.0, 0.0, 2.0003679310320877e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.69225410092622e-05, 0.0, 0.0, 0.0, 0.0, 7.376807479886338e-05, 0.0]], "target": [0.7415919303894043]}, "loss": [2.0912115573883057, 0.29895615577697754], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [36]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:29:43.995332", "n_pass": [1, 1, 1], "n_token": 43, "loss": [0.3253929018974304, 0.29895615577697754], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", ",", "setStdout", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "_legacyObservers", ".", "append", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "_logBeginner", ".", "beginLoggingTo", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 36, "repair_targets": [13, 36], "repair_candidates": [13, 36, 6, 26, 41, 4, 17, 2, 20, 29]}}
{"prediction": {"error_location": 0.7222435474395752, "repair_targets": [0.7415249943733215, 6.69225410092622e-05], "repair_candidates": [0.0002832453465089202, 0.1915578544139862, 0.047935523092746735, 0.7415249943733215, 0.018309449777007103, 0.00015409832121804357, 7.411473052343354e-05, 2.0003679310320877e-05, 6.69225410092622e-05, 7.376807479886338e-05], "target_probs": 0.7415919303894043}}


{"result": {"time": "2021-02-21 12:29:44.137865", "n_pass": [48, 3, 2], "n_token": 41, "loss": [0.34542492032051086, 0.39273470640182495], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", ",", "setStdout", ")", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "_legacyObservers", ".", "append", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "_logBeginner", ".", "beginLoggingTo", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 34, "repair_targets": [11, 34], "repair_candidates": [11, 34, 6, 24, 39, 4, 15, 2, 18, 27]}}
{"prediction": {"error_location": 0.7079195380210876, "repair_targets": [0.6751410365104675, 6.678725185338408e-05], "repair_candidates": [0.0005044268327765167, 0.29885125160217285, 0.01627233438193798, 0.6751410365104675, 0.008884891867637634, 0.000144189631100744, 5.8113546401727945e-05, 1.6159339793375693e-05, 6.678725185338408e-05, 6.079181548557244e-05], "target_probs": 0.6752078533172607}}


{"result": {"time": "2021-02-21 12:29:44.275682", "n_pass": [53, 5, 3], "n_token": 38, "loss": [0.2550954520702362, 0.3095155954360962], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", ",", "setStdout", ")", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "_logBeginner", ".", "beginLoggingTo", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 31, "repair_targets": [11, 31], "repair_candidates": [11, 31, 6, 21, 36, 4, 15, 2, 18, 24]}}
{"prediction": {"error_location": 0.7748426198959351, "repair_targets": [0.733771562576294, 3.075129279750399e-05], "repair_candidates": [0.0002811505983117968, 0.248514324426651, 0.010690244846045971, 0.733771562576294, 0.006384511012583971, 0.00020717267761938274, 8.436593634542078e-05, 9.397542271472048e-06, 3.075129279750399e-05, 2.647256405907683e-05], "target_probs": 0.733802318572998}}


{"result": {"time": "2021-02-21 12:29:44.345939", "n_pass": [56, 6, 4], "n_token": 35, "loss": [0.5051613450050354, 0.6295405626296997], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", ",", "setStdout", ")", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 28, "repair_targets": [11, 28], "repair_candidates": [11, 28, 6, 21, 33, 4, 15, 2, 18, 24]}}
{"prediction": {"error_location": 0.60340815782547, "repair_targets": [0.532769501209259, 6.707006832584739e-05], "repair_candidates": [0.000771344406530261, 0.433054655790329, 0.018921760842204094, 0.532769501209259, 0.01403186097741127, 0.0001727376802591607, 8.233811240643263e-05, 1.3866703739040531e-05, 6.707006832584739e-05, 0.00011483504204079509], "target_probs": 0.5328365564346313}}


{"result": {"time": "2021-02-21 12:29:45.009401", "n_pass": [107, 16, 5], "n_token": 34, "loss": [0.6320556402206421, 0.3719433844089508], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "#INDENT#", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 27, "repair_targets": [10, 27], "repair_candidates": [10, 27, 5, 20, 32, 4, 14, 2, 17, 23]}}
{"prediction": {"error_location": 0.5314980745315552, "repair_targets": [0.6892029047012329, 0.0001903781230794266], "repair_candidates": [0.003834583330899477, 0.2329656332731247, 0.04390750452876091, 0.6892029047012329, 0.02904663234949112, 0.0003083009796682745, 0.0002170049847336486, 1.718187559163198e-05, 0.0001903781230794266, 0.00030986350611783564], "target_probs": 0.6893932819366455}}


{"result": {"time": "2021-02-21 12:29:45.143528", "n_pass": [110, 18, 6], "n_token": 33, "loss": [0.6705173850059509, 0.4087054431438446], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", ".", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 26, "repair_targets": [9, 26], "repair_candidates": [9, 26, 5, 19, 31, 4, 13, 2, 16, 22]}}
{"prediction": {"error_location": 0.5114439129829407, "repair_targets": [0.6643170118331909, 0.00019295545644126832], "repair_candidates": [0.002867221599444747, 0.22683826088905334, 0.07827619463205338, 0.6643170118331909, 0.026411153376102448, 0.0003927804937120527, 0.00038580369437113404, 1.9922514184145257e-05, 0.00019295545644126832, 0.0002986351610161364], "target_probs": 0.6645099520683289}}


{"result": {"time": "2021-02-21 12:29:46.191070", "n_pass": [155, 34, 7], "n_token": 32, "loss": [0.23208127915859222, 0.36911746859550476], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", ")", "#NEWLINE#", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 25, "repair_targets": [9, 25], "repair_candidates": [9, 25, 5, 18, 30, 4, 13, 2, 16, 21]}}
{"prediction": {"error_location": 0.7928816676139832, "repair_targets": [0.6911472678184509, 0.00019693777721840888], "repair_candidates": [0.0038993237540125847, 0.18741543591022491, 0.07028333097696304, 0.6911472678184509, 0.04584478959441185, 0.0003332578344270587, 0.00011299514153506607, 2.5603878384572454e-05, 0.00019693777721840888, 0.0007410548278130591], "target_probs": 0.6913442015647888}}


{"result": {"time": "2021-02-21 12:29:46.256324", "n_pass": [157, 35, 8], "n_token": 31, "loss": [0.11424809694290161, 0.5055087804794312], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "#NEWLINE#", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 24, "repair_targets": [9, 24], "repair_candidates": [9, 24, 5, 18, 29, 4, 13, 2, 16, 20]}}
{"prediction": {"error_location": 0.892036497592926, "repair_targets": [0.6029394865036011, 0.00025909271789714694], "repair_candidates": [0.0051880162209272385, 0.24754785001277924, 0.08786964416503906, 0.6029394865036011, 0.05439428985118866, 0.0008509561885148287, 0.00012284840340726078, 2.6710911697591655e-05, 0.00025909271789714694, 0.0008010798483155668], "target_probs": 0.6031985878944397}}


{"result": {"time": "2021-02-21 12:29:46.323693", "n_pass": [158, 36, 9], "n_token": 30, "loss": [0.1432388573884964, 0.6539117097854614], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "(", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 23, "repair_targets": [9, 23], "repair_candidates": [9, 23, 5, 18, 28, 4, 13, 2, 16, 19]}}
{"prediction": {"error_location": 0.866547167301178, "repair_targets": [0.5199606418609619, 4.702548176283017e-05], "repair_candidates": [0.00334394839592278, 0.3240823447704315, 0.12095093727111816, 0.5199606418609619, 0.030288565903902054, 0.0006202916847541928, 0.0004812581173609942, 7.727874617557973e-06, 4.702548176283017e-05, 0.0002172929234802723], "target_probs": 0.5200076699256897}}


{"result": {"time": "2021-02-21 12:29:46.450358", "n_pass": [161, 38, 10], "n_token": 29, "loss": [0.01308309193700552, 0.6299677491188049], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", ",", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 22, "repair_targets": [9, 22], "repair_candidates": [9, 22, 5, 18, 27, 4, 13, 2, 16, 19]}}
{"prediction": {"error_location": 0.9870021343231201, "repair_targets": [0.5325464010238647, 6.259013753151521e-05], "repair_candidates": [0.0026363497599959373, 0.30895325541496277, 0.11592169851064682, 0.5325464010238647, 0.03923875838518143, 0.0001739497238304466, 0.0002320879721082747, 9.662828233558685e-06, 6.259013753151521e-05, 0.00022517188335768878], "target_probs": 0.5326089859008789}}


{"result": {"time": "2021-02-21 12:29:46.640067", "n_pass": [165, 41, 11], "n_token": 28, "loss": [0.01646936684846878, 0.6929037570953369], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout", ")"]}}
{"position": {"error_location": 22, "repair_targets": [9, 22], "repair_candidates": [9, 22, 5, 18, 26, 4, 13, 2, 16, 19]}}
{"prediction": {"error_location": 0.9836656451225281, "repair_targets": [0.5000860095024109, 3.5683027817867696e-05], "repair_candidates": [0.002602175110951066, 0.36322465538978577, 0.10065819323062897, 0.5000860095024109, 0.03270464763045311, 0.00020556639356072992, 0.0002598181599751115, 1.7567967006471008e-05, 3.5683027817867696e-05, 0.00020569797197822481], "target_probs": 0.5001217126846313}}


{"result": {"time": "2021-02-21 12:29:46.831196", "n_pass": [169, 44, 12], "n_token": 27, "loss": [0.027529001235961914, 0.6454535722732544], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "LegacyLogObserverWrapper", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 22, "repair_targets": [9, 22], "repair_candidates": [9, 22, 5, 18, 26, 4, 13, 2, 16, 19]}}
{"prediction": {"error_location": 0.9728464484214783, "repair_targets": [0.5244016647338867, 2.292652425239794e-05], "repair_candidates": [0.002474946668371558, 0.34224990010261536, 0.09901310503482819, 0.5244016647338867, 0.031247487291693687, 0.00018723533139564097, 0.00023950595641508698, 1.4155339158605784e-05, 2.292652425239794e-05, 0.00014903408009558916], "target_probs": 0.5244246125221252}}


{"result": {"time": "2021-02-21 12:29:47.331752", "n_pass": [181, 52, 13], "n_token": 26, "loss": [0.04428454488515854, 0.29335811734199524], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "(", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 21, "repair_targets": [9, 21], "repair_candidates": [9, 21, 5, 17, 25, 4, 12, 2, 15, 18]}}
{"prediction": {"error_location": 0.9566817283630371, "repair_targets": [0.7457436919212341, 1.1315211850160267e-05], "repair_candidates": [0.0038371323607861996, 0.20370499789714813, 0.045786552131175995, 0.7457436919212341, 0.0004411378758959472, 0.00021301447122823447, 0.0001310479419771582, 1.526642699900549e-05, 1.1315211850160267e-05, 0.00011588974302867427], "target_probs": 0.7457550168037415}}


{"result": {"time": "2021-02-21 12:29:47.393936", "n_pass": [182, 53, 14], "n_token": 25, "loss": [0.025922421365976334, 0.6208762526512146], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", ")", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 20, "repair_targets": [9, 20], "repair_candidates": [9, 20, 5, 16, 24, 4, 11, 2, 14, 17]}}
{"prediction": {"error_location": 0.9744106531143188, "repair_targets": [0.5374529957771301, 2.023958040808793e-05], "repair_candidates": [0.010761147364974022, 0.3648158311843872, 0.08082745224237442, 0.5374529957771301, 0.005313104949891567, 0.00037803378654643893, 0.000204432726604864, 2.4078759452095255e-05, 2.023958040808793e-05, 0.00020272306574042886], "target_probs": 0.5374732613563538}}


{"result": {"time": "2021-02-21 12:29:47.457627", "n_pass": [184, 54, 15], "n_token": 24, "loss": [0.015354638919234276, 0.6914464235305786], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "(", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 19, "repair_targets": [9, 19], "repair_candidates": [9, 19, 5, 15, 23, 4, 11, 2, 13, 16]}}
{"prediction": {"error_location": 0.9847625494003296, "repair_targets": [0.500827968120575, 2.3098153178580105e-05], "repair_candidates": [0.010294277220964432, 0.36880454421043396, 0.11695817857980728, 0.500827968120575, 0.002458269940689206, 0.00028295416268520057, 0.00013914049486629665, 2.412148387520574e-05, 2.3098153178580105e-05, 0.00018738074868451804], "target_probs": 0.5008510947227478}}


{"result": {"time": "2021-02-21 12:29:47.578656", "n_pass": [187, 56, 16], "n_token": 23, "loss": [0.06689880788326263, 0.5215601921081543], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", ".", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 18, "repair_targets": [9, 18], "repair_candidates": [9, 18, 5, 14, 22, 4, 11, 2, 13, 15]}}
{"prediction": {"error_location": 0.935289740562439, "repair_targets": [0.593570351600647, 2.3348789909505285e-05], "repair_candidates": [0.00461905263364315, 0.30909213423728943, 0.08502374589443207, 0.593570351600647, 0.002558659063652158, 0.0021264711394906044, 0.0025578136555850506, 0.00019076956959906965, 2.3348789909505285e-05, 0.00023774532019160688], "target_probs": 0.5935937166213989}}


{"result": {"time": "2021-02-21 12:29:47.639143", "n_pass": [190, 57, 17], "n_token": 22, "loss": [0.3604040741920471, 0.2505132257938385], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "]", "True", ",", "setStdout"]}}
{"position": {"error_location": 17, "repair_targets": [9, 17], "repair_candidates": [9, 17, 5, 14, 21, 4, 11, 2, 13, 15]}}
{"prediction": {"error_location": 0.6973944902420044, "repair_targets": [0.7783796787261963, 2.150922955479473e-05], "repair_candidates": [0.0029835139866918325, 0.15291935205459595, 0.06200284883379936, 0.7783796787261963, 0.0027618028689175844, 0.00023568417236674577, 0.00029781777993775904, 0.00010760483564808965, 2.150922955479473e-05, 0.0002902144333347678], "target_probs": 0.7784011960029602}}


{"result": {"time": "2021-02-21 12:29:47.819414", "n_pass": [194, 60, 18], "n_token": 21, "loss": [0.24298785626888275, 0.1987352818250656], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "]", ",", "setStdout"]}}
{"position": {"error_location": 17, "repair_targets": [9, 17], "repair_candidates": [9, 17, 5, 14, 20, 4, 11, 2, 13, 15]}}
{"prediction": {"error_location": 0.7842811346054077, "repair_targets": [0.8197504281997681, 1.6444379070890136e-05], "repair_candidates": [0.002414533868432045, 0.10455239564180374, 0.06609448790550232, 0.8197504281997681, 0.006454844027757645, 0.00022686418378725648, 0.00025718333199620247, 0.00010730540088843554, 1.6444379070890136e-05, 0.00012556774890981615], "target_probs": 0.8197668790817261}}


{"result": {"time": "2021-02-21 12:29:47.878256", "n_pass": [195, 61, 19], "n_token": 20, "loss": [0.5409551858901978, 0.13896511495113373], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "]", "setStdout"]}}
{"position": {"error_location": 17, "repair_targets": [9, 17], "repair_candidates": [9, 17, 5, 14, 19, 4, 11, 2, 13, 15]}}
{"prediction": {"error_location": 0.5821918845176697, "repair_targets": [0.8702455759048462, 1.2825144949601963e-05], "repair_candidates": [0.0012199508491903543, 0.08676773309707642, 0.03985780477523804, 0.8702455759048462, 0.0014685107162222266, 0.0001308471692027524, 0.00012132758274674416, 4.585574060911313e-05, 1.2825144949601963e-05, 0.00012961315223947167], "target_probs": 0.8702583909034729}}


{"result": {"time": "2021-02-21 12:29:47.936733", "n_pass": [197, 62, 20], "n_token": 19, "loss": [0.08195417374372482, 0.24341721832752228], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "#NEWLINE#", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "]", "setStdout"]}}
{"position": {"error_location": 16, "repair_targets": [8, 16], "repair_candidates": [8, 16, 4, 13, 18, 3, 10, 1, 12, 14]}}
{"prediction": {"error_location": 0.9213141798973083, "repair_targets": [0.7839294672012329, 1.490740123699652e-05], "repair_candidates": [0.016918009147047997, 0.16292768716812134, 0.03462742641568184, 0.7839294672012329, 0.00101753743365407, 0.00014945617294870317, 0.00015974932466633618, 9.274627518607304e-05, 1.490740123699652e-05, 0.00016302458243444562], "target_probs": 0.7839443683624268}}


{"result": {"time": "2021-02-21 12:29:48.228598", "n_pass": [205, 67, 21], "n_token": 18, "loss": [0.002314747544005513, 0.21437416970729828], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "]", "setStdout"]}}
{"position": {"error_location": 15, "repair_targets": [7, 15], "repair_candidates": [7, 15, 4, 12, 17, 3, 9, 1, 11, 13]}}
{"prediction": {"error_location": 0.9976880550384521, "repair_targets": [0.8070395588874817, 6.804723852837924e-06], "repair_candidates": [0.0233045294880867, 0.1539258360862732, 0.014487704262137413, 0.8070395588874817, 0.0005415171617642045, 0.00012436628458090127, 0.00018866256868932396, 0.0002816779597196728, 6.804723852837924e-06, 9.938170114764944e-05], "target_probs": 0.8070463538169861}}


{"result": {"time": "2021-02-21 12:29:48.458260", "n_pass": [215, 71, 22], "n_token": 17, "loss": [0.11824535578489304, 0.06594522297382355], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _startLogging(", "self", ",", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "setStdout"]}}
{"position": {"error_location": 15, "repair_targets": [7, 15], "repair_candidates": [7, 15, 4, 12, 16, 3, 9, 1, 11, 13]}}
{"prediction": {"error_location": 0.8884780406951904, "repair_targets": [0.9361791610717773, 3.000739297931432e-06], "repair_candidates": [0.005538732744753361, 0.05166387930512428, 0.006399489939212799, 0.9361791610717773, 0.00015088032523635775, 1.6101223081932403e-05, 2.6108631573151797e-05, 2.010053867707029e-05, 3.000739297931432e-06, 2.694687509574578e-06], "target_probs": 0.9361821413040161}}


{"result": {"time": "2021-02-21 12:29:48.575199", "n_pass": [219, 73, 23], "n_token": 16, "loss": [0.40393757820129395, 0.2597338855266571], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def _startLogging(", "self", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "setStdout"]}}
{"position": {"error_location": 14, "repair_targets": [6, 14], "repair_candidates": [6, 14, 3, 11, 15, 2, 8, 1, 10, 12]}}
{"prediction": {"error_location": 0.6676856875419617, "repair_targets": [0.7712512016296387, 5.60796706849942e-06], "repair_candidates": [0.016887810081243515, 0.19275085628032684, 0.01893511600792408, 0.7712512016296387, 9.574038995197043e-05, 1.9158287614118308e-05, 2.6896892450167798e-05, 2.4040238713496365e-05, 5.60796706849942e-06, 3.648074425655068e-06], "target_probs": 0.7712568044662476}}


{"result": {"time": "2021-02-21 12:29:48.917827", "n_pass": [234, 79, 24], "n_token": 15, "loss": [0.8636406660079956, 0.4170149564743042], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "other", "setStdout", ")", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "setStdout"]}}
{"position": {"error_location": 13, "repair_targets": [5, 13], "repair_candidates": [5, 13, 2, 10, 14, 1, 7, 0, 9, 11]}}
{"prediction": {"error_location": 0.4216242730617523, "repair_targets": [0.6590019464492798, 9.101812793232966e-06], "repair_candidates": [0.014128029346466064, 0.20347946882247925, 0.12287918478250504, 0.6590019464492798, 0.00038539725937880576, 2.86693266389193e-05, 4.764881305163726e-05, 3.5226563340984285e-05, 9.101812793232966e-06, 5.276765023154439e-06], "target_probs": 0.6590110659599304}}


{"result": {"time": "2021-02-21 12:29:48.973776", "n_pass": [238, 80, 25], "n_token": 14, "loss": [0.3483092784881592, 0.3431675434112549], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "other", "setStdout", "'\\n        Begin logging to the L{LogBeginner} associated with this\\n        L{LogPublisher}.\\n\\n        @param other: the observer to log to.\\n        @type other: L{LogBeginner}\\n\\n        @param setStdout: if true, send standard I/O to the observer as well.\\n        @type setStdout: L{bool}\\n        '", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "setStdout"]}}
{"position": {"error_location": 12, "repair_targets": [4, 12], "repair_candidates": [4, 12, 2, 9, 13, 1, 6, 0, 8, 10]}}
{"prediction": {"error_location": 0.7058805227279663, "repair_targets": [0.709505558013916, 1.374046678392915e-05], "repair_candidates": [0.023504694923758507, 0.1925746649503708, 0.07215801626443863, 0.709505558013916, 0.001999960746616125, 8.139316196320578e-05, 0.00012101700122002512, 3.2061820093076676e-05, 1.374046678392915e-05, 8.921477274270728e-06], "target_probs": 0.7095193266868591}}


{"result": {"time": "2021-02-21 12:29:49.029213", "n_pass": [239, 81, 26], "n_token": 13, "loss": [0.5101737380027771, 0.6016230583190918], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "other", "setStdout", "wrapped", "=", "other", "#NEWLINE#", "self", "setStdout", "self", "[", "wrapped", "setStdout"]}}
{"position": {"error_location": 11, "repair_targets": [3, 11], "repair_candidates": [3, 11, 2, 8, 12, 1, 5, 0, 7, 9]}}
{"prediction": {"error_location": 0.6003912091255188, "repair_targets": [0.5478942394256592, 2.736998794716783e-05], "repair_candidates": [0.0282620657235384, 0.09417855739593506, 0.32584691047668457, 0.5478942394256592, 0.0034555268939584494, 0.00016150767623912543, 0.00013383777695707977, 2.4795252102194354e-05, 2.736998794716783e-05, 1.524501567473635e-05], "target_probs": 0.5479215979576111}}




Minimal simplified tokens:

['self', 'other', 'setStdout', 'wrapped', '=', 'other', '#NEWLINE#', 'self', 'setStdout', 'self', '[', 'wrapped', 'setStdout']
