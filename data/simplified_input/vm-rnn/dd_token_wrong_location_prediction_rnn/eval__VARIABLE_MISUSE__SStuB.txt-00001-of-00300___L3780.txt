
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", ":", "#NEWLINE#", "#INDENT#", "'Append message to output string with a delimiter\\n\\n    No delimiter is added if any of strings is empty.\\n    '", "#NEWLINE#", "return", "'\\n'", ".", "join", "(", "filter", "(", "None", ",", "(", "appendix", ",", "appendix", ")", ")", ")"], "error_location": [21], "repair_targets": [2], "repair_candidates": [2, 4, 21, 23], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "openstack/fuel-web/nailgun/nailgun/extensions/network_manager/connectivity_check.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00001-of-00300", "js_count": 3780, "results": {"model": "rnn", "prob": {"loc": [[0.15868771076202393, 1.609888755638167e-08, 6.328544259304181e-06, 2.1581939790848992e-07, 4.063784615482291e-07, 2.492340627213707e-07, 2.412397179796244e-07, 2.0136108105361927e-06, 1.6934268387558404e-07, 1.2965722362423548e-06, 1.6785251943929325e-07, 1.407283605203702e-07, 1.8544533020303788e-07, 7.666983492526924e-07, 7.301660502889717e-07, 5.498143309523584e-07, 3.5842961096932413e-06, 6.437747401832894e-07, 8.432762115262449e-06, 3.274940496567069e-08, 1.0479019692866132e-05, 0.1492278128862381, 7.164758426370099e-05, 0.6917144060134888, 0.00023745186626911163, 1.7371454305248335e-05, 7.000532605161425e-06]], "pointer": [[0.0, 0.0, 0.9877249598503113, 0.0, 0.011970196850597858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017547866445966065, 0.0, 0.00012936753046233207, 0.0, 0.0, 0.0]], "target": [0.9877249598503113]}, "loss": [1.9022811651229858, 0.012351000681519508], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [23]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 11:32:33.072197", "n_pass": [1, 1, 1], "n_token": 27, "loss": [0.3685821294784546, 0.012351000681519508], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", ":", "#NEWLINE#", "#INDENT#", "'Append message to output string with a delimiter\\n\\n    No delimiter is added if any of strings is empty.\\n    '", "#NEWLINE#", "return", "'\\n'", ".", "join", "(", "filter", "(", "None", ",", "(", "appendix", ",", "appendix", ")", ")", ")"]}}
{"position": {"error_location": 23, "repair_targets": [2], "repair_candidates": [2, 4, 21, 23]}}
{"prediction": {"error_location": 0.6917144060134888, "repair_targets": [0.9877249598503113], "repair_candidates": [0.9877249598503113, 0.011970196850597858, 0.00017547866445966065, 0.00012936753046233207], "target_probs": 0.9877249598503113}}


{"result": {"time": "2021-02-21 11:32:33.190687", "n_pass": [10, 3, 2], "n_token": 20, "loss": [0.6386978626251221, 0.0014535614755004644], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", ":", "#NEWLINE#", "#INDENT#", "'Append message to output string with a delimiter\\n\\n    No delimiter is added if any of strings is empty.\\n    '", "#NEWLINE#", "return", "'\\n'", "(", "appendix", ",", "appendix", ")", ")", ")"]}}
{"position": {"error_location": 16, "repair_targets": [2], "repair_candidates": [2, 4, 14, 16]}}
{"prediction": {"error_location": 0.5279794931411743, "repair_targets": [0.9985474944114685], "repair_candidates": [0.9985474944114685, 0.0013753741513937712, 2.1034184101154096e-05, 5.606943886959925e-05], "target_probs": 0.9985474944114685}}


{"result": {"time": "2021-02-21 11:32:33.357585", "n_pass": [24, 6, 3], "n_token": 17, "loss": [0.3139631152153015, 0.003479746403172612], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n'", "(", "appendix", ",", "appendix", ")", ")", ")"]}}
{"position": {"error_location": 13, "repair_targets": [2], "repair_candidates": [2, 4, 11, 13]}}
{"prediction": {"error_location": 0.7305459380149841, "repair_targets": [0.996526300907135], "repair_candidates": [0.996526300907135, 0.0033664258662611246, 6.458056304836646e-05, 4.2659015889512375e-05], "target_probs": 0.996526300907135}}


{"result": {"time": "2021-02-21 11:32:33.412698", "n_pass": [29, 7, 4], "n_token": 14, "loss": [0.734963595867157, 0.02259276807308197], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", "'\\n'", "(", "appendix", ",", "appendix", ")", ")", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [2, 4, 8, 10]}}
{"prediction": {"error_location": 0.4795229732990265, "repair_targets": [0.9776605367660522], "repair_candidates": [0.9776605367660522, 0.02146315388381481, 0.0006966872606426477, 0.000179616516106762], "target_probs": 0.9776605367660522}}


{"result": {"time": "2021-02-21 11:32:33.523471", "n_pass": [45, 9, 5], "n_token": 12, "loss": [0.4904329776763916, 0.008038917556405067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def append_message(", "original", ",", "appendix", ")", "'\\n'", "(", "appendix", ",", "appendix", ")"]}}
{"position": {"error_location": 10, "repair_targets": [2], "repair_candidates": [2, 4, 8, 10]}}
{"prediction": {"error_location": 0.6123612523078918, "repair_targets": [0.9919933080673218], "repair_candidates": [0.9919933080673218, 0.007630610838532448, 0.00029223388992249966, 8.381420775549486e-05], "target_probs": 0.9919933080673218}}


{"result": {"time": "2021-02-21 11:32:33.576628", "n_pass": [46, 10, 6], "n_token": 11, "loss": [0.7820135354995728, 0.1431683748960495], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def append_message(", "original", ",", "appendix", ")", "'\\n'", "(", "appendix", ",", "appendix", ")"]}}
{"position": {"error_location": 9, "repair_targets": [1], "repair_candidates": [1, 3, 7, 9]}}
{"prediction": {"error_location": 0.4574839472770691, "repair_targets": [0.8666081428527832], "repair_candidates": [0.8666081428527832, 0.12395377457141876, 0.00709808524698019, 0.0023400001227855682], "target_probs": 0.8666081428527832}}




Minimal simplified tokens:

['def append_message(', 'original', ',', 'appendix', ')', "'\\n'", '(', 'appendix', ',', 'appendix', ')']
