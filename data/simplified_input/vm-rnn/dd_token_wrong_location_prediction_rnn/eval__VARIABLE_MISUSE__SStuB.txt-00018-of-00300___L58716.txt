
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "float64", ",", "np", ".", "complex128", "]", ")", ")", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "=", "'0'", ",", "reduce_expr", "=", "'max(a,b)'", ",", "map_expr", "=", "'abs(x[i])'", ",", "arguments", "=", "'{ctype} *x'", ".", "format", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"], "error_location": [123], "repair_targets": [2, 19, 36, 46, 112], "repair_candidates": [2, 19, 36, 46, 112, 30, 102, 104, 62, 82, 41, 69, 123, 13, 76, 117, 121], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "lebedov/scikit-cuda/skcuda/misc.py", "license": "bsd-3-clause", "note": "license: manual_eval"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00018-of-00300", "js_count": 58716, "results": {"model": "rnn", "prob": {"loc": [[0.0002589528448879719, 3.0119440275200304e-09, 2.2154191814394153e-09, 1.3414960808866283e-10, 3.672563295142872e-11, 8.483886926313744e-10, 6.805795926823066e-10, 1.0301536290668878e-09, 3.3585221270726606e-09, 3.8164866822398835e-08, 8.494869696562546e-09, 1.1945187949891078e-08, 5.054014540206708e-09, 3.084705602063309e-09, 1.2898200729694054e-08, 0.9994639754295349, 3.9212845877045766e-06, 5.034652303947951e-07, 1.5841524758641867e-09, 5.7952416682383046e-05, 7.408706981237856e-09, 1.1630067575651992e-07, 8.855799982221413e-10, 2.7419668757744375e-09, 2.1819375195519797e-09, 7.285276826252129e-10, 2.1519934723102097e-09, 2.650193398068268e-10, 1.9146357832511285e-09, 2.5308882767305363e-10, 6.912892480670507e-10, 5.303167627257466e-11, 1.0266449912421649e-08, 5.036210337650004e-10, 2.494312811851529e-10, 3.041295687511436e-11, 9.15206237550592e-06, 2.793009157286974e-09, 2.0352922902588944e-08, 5.299325561702872e-11, 2.0485877438858324e-09, 2.00244751336065e-11, 3.675198340102881e-11, 7.886854502814344e-10, 1.1627920154522187e-10, 1.3191078229723985e-09, 1.6599437003606e-05, 8.599132517161934e-10, 6.450438405636305e-09, 5.047120410495154e-08, 5.300095917704084e-10, 7.189868256318732e-08, 4.4503244839289025e-11, 5.110182069167912e-11, 3.299918394095158e-10, 3.0123018746053276e-08, 5.458835050653477e-10, 4.905339329175362e-11, 1.3596893388978515e-08, 3.5526742658831267e-10, 3.765030648361645e-11, 4.945456266725046e-10, 3.1594157845482584e-10, 1.3022721789823777e-11, 3.5770023054659816e-10, 2.6075763770450067e-08, 8.959741282232869e-11, 4.0006137291825894e-11, 2.760631787168677e-06, 7.488922051379632e-07, 7.384912820151968e-11, 5.212878306792845e-08, 1.4665666459023896e-09, 4.642882606153975e-11, 2.749129257573202e-10, 4.542864695533666e-10, 1.1094936080979778e-09, 1.1104394487260194e-10, 1.100429614098175e-08, 1.8325835293708792e-10, 1.7845508404334964e-10, 3.714047819292077e-11, 1.611381594557315e-05, 1.8222888475971644e-12, 5.208281028679096e-10, 1.146353081904472e-10, 1.6712465855661662e-09, 8.418599845017027e-11, 1.054959675172995e-08, 2.9047894645195527e-10, 2.2376538122426126e-10, 1.0755319551636333e-10, 2.0357922014824226e-09, 2.434766832593027e-10, 5.297630667477904e-10, 1.3046892732848647e-10, 1.2095726198424472e-08, 8.43137434869412e-11, 5.882153791825218e-11, 1.9164956288619805e-09, 1.144749295356462e-10, 3.6651195967074557e-10, 8.251904048961478e-09, 9.346130119824991e-11, 3.9910132727527525e-06, 5.739978284347025e-11, 3.135676787668906e-11, 2.776162411066707e-09, 1.7345350045161467e-07, 1.0333158773079276e-09, 1.2232425739000519e-08, 1.1237181185563827e-09, 4.371800969238393e-05, 2.8702920040757363e-09, 9.61054382742077e-08, 2.6573696368381583e-11, 4.002646269984922e-10, 3.1955783924786374e-05, 2.951940358819627e-10, 7.090554254851611e-10, 1.0110247083972013e-09, 6.500906035711296e-09, 6.200601698758135e-10, 8.873051410773769e-05, 5.083460874466539e-10]], "pointer": [[0.0, 0.0, 0.9998231530189514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4985539969056845e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 4.026972237625159e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.064962700387696e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 8.806854020804167e-05, 0.0, 0.0, 0.0, 0.0, 1.0856556400540285e-06, 0.0, 0.0, 0.0, 0.0, 4.064728273078799e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.647047097070754e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.043345995796699e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.41265876563557e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 8.82714701333498e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8836267372535076e-06, 0.0, 1.2690095445577754e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.433400370842719e-06, 0.0, 0.0, 0.0, 0.0, 1.6105128963772586e-07, 0.0, 0.0, 0.0, 1.7331075241600047e-07, 0.0, 6.218283488124143e-08, 0.0]], "target": [0.9999570250511169]}, "loss": [9.329906463623047, 4.297587292967364e-05], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [15]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 13:31:18.399493", "n_pass": [1, 1, 1], "n_token": 125, "loss": [0.0005360596696846187, 4.297587292967364e-05], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "float64", ",", "np", ".", "complex128", "]", ")", ")", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "=", "'0'", ",", "reduce_expr", "=", "'max(a,b)'", ",", "map_expr", "=", "'abs(x[i])'", ",", "arguments", "=", "'{ctype} *x'", ".", "format", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 36, 46, 112], "repair_candidates": [2, 19, 36, 46, 112, 30, 102, 104, 62, 82, 41, 69, 123, 13, 76, 117, 121]}}
{"prediction": {"error_location": 0.9994639754295349, "repair_targets": [0.9998231530189514, 4.026972237625159e-05, 8.806854020804167e-05, 4.064728273078799e-06, 1.433400370842719e-06], "repair_candidates": [0.9998231530189514, 3.4985539969056845e-05, 4.026972237625159e-05, 2.064962700387696e-06, 8.806854020804167e-05, 1.0856556400540285e-06, 4.064728273078799e-06, 2.647047097070754e-07, 4.043345995796699e-07, 5.41265876563557e-07, 8.82714701333498e-08, 1.8836267372535076e-06, 1.2690095445577754e-06, 1.433400370842719e-06, 1.6105128963772586e-07, 1.7331075241600047e-07, 6.218283488124143e-08], "target_probs": 0.9999570250511169}}


{"result": {"time": "2021-02-21 13:31:18.518810", "n_pass": [47, 2, 2], "n_token": 117, "loss": [0.001364491879940033, 0.00036931896465830505], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "float64", ",", "np", ".", "complex128", "]", ")", ")", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "=", "'0'", ",", "reduce_expr", "=", "'max(a,b)'", ",", "map_expr", "=", "'abs(x[i])'", ",", "arguments", "=", "'{ctype} *x'", ".", "format", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 104], "repair_candidates": [2, 19, 28, 38, 104, 22, 94, 96, 54, 74, 33, 61, 115, 13, 68, 109, 113]}}
{"prediction": {"error_location": 0.9986363053321838, "repair_targets": [0.9993315935134888, 5.873002010048367e-05, 0.0002175334229832515, 1.679438355495222e-05, 6.072333690099185e-06], "repair_candidates": [0.9993315935134888, 0.0003149886033497751, 5.873002010048367e-05, 3.507638757582754e-05, 0.0002175334229832515, 3.284725153207546e-06, 1.679438355495222e-05, 8.605118750892871e-07, 1.2415275705279782e-06, 3.3155936307593947e-06, 2.2898768747836584e-07, 5.848557066201465e-06, 3.1863619369687513e-06, 6.072333690099185e-06, 4.878277763964434e-07, 6.175537237140816e-07, 2.2414998568365263e-07], "target_probs": 0.9996307492256165}}


{"result": {"time": "2021-02-21 13:31:18.627010", "n_pass": [51, 3, 3], "n_token": 109, "loss": [0.0033269552513957024, 0.0006870602956041694], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "=", "'0'", ",", "reduce_expr", "=", "'max(a,b)'", ",", "map_expr", "=", "'abs(x[i])'", ",", "arguments", "=", "'{ctype} *x'", ".", "format", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 96], "repair_candidates": [2, 19, 28, 38, 96, 22, 86, 88, 46, 66, 33, 53, 107, 13, 60, 101, 105]}}
{"prediction": {"error_location": 0.9966787099838257, "repair_targets": [0.998794674873352, 8.854780753608793e-05, 0.00039607545477338135, 2.275503720738925e-05, 1.1114196240669116e-05], "repair_candidates": [0.998794674873352, 0.0006133342976681888, 8.854780753608793e-05, 4.619861283572391e-05, 0.00039607545477338135, 3.7731549582531443e-06, 2.275503720738925e-05, 1.8227576674689772e-06, 1.5553686125713284e-06, 4.431787147041177e-06, 3.385879665529501e-07, 8.776798495091498e-06, 4.506423010752769e-06, 1.1114196240669116e-05, 7.082891784193635e-07, 1.004609316623828e-06, 3.154247281145217e-07], "target_probs": 0.9993131756782532}}


{"result": {"time": "2021-02-21 13:31:18.734399", "n_pass": [55, 4, 4], "n_token": 101, "loss": [0.0023754017893224955, 0.0006234204629436135], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "=", "'abs(x[i])'", ",", "arguments", "=", "'{ctype} *x'", ".", "format", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 88], "repair_candidates": [2, 19, 28, 38, 88, 22, 78, 80, 46, 66, 33, 53, 99, 13, 60, 93, 97]}}
{"prediction": {"error_location": 0.9976274371147156, "repair_targets": [0.9988256096839905, 8.4319879533723e-05, 0.00044286763295531273, 1.7335447410005145e-05, 6.630893494730117e-06], "repair_candidates": [0.9988256096839905, 0.0005576537805609405, 8.4319879533723e-05, 4.9852547817863524e-05, 0.00044286763295531273, 3.660882839540136e-06, 1.7335447410005145e-05, 1.424298375241051e-06, 1.1545402003321215e-06, 2.6787038223119453e-06, 3.652741327186959e-07, 2.072104734907043e-06, 2.829297045536805e-06, 6.630893494730117e-06, 5.37799110134074e-07, 7.625159241797519e-07, 2.561455687555281e-07], "target_probs": 0.9993767738342285}}


{"result": {"time": "2021-02-21 13:31:18.834213", "n_pass": [56, 5, 5], "n_token": 93, "loss": [0.0038224030286073685, 0.0007250552880577743], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ")", ")", "#NEWLINE#", "maxabs", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 80], "repair_candidates": [2, 19, 28, 38, 80, 22, 70, 72, 46, 66, 33, 53, 91, 13, 60, 85, 89]}}
{"prediction": {"error_location": 0.9961850047111511, "repair_targets": [0.9987002611160278, 9.426034375792369e-05, 0.000450349529273808, 2.023432716669049e-05, 1.0119696526089683e-05], "repair_candidates": [0.9987002611160278, 0.000649979105219245, 9.426034375792369e-05, 5.475426951306872e-05, 0.000450349529273808, 3.1781844427314354e-06, 2.023432716669049e-05, 1.7923825907928403e-06, 1.509419348622032e-06, 6.52907692710869e-06, 4.041567933654733e-07, 2.271168341394514e-06, 2.609433522593463e-06, 1.0119696526089683e-05, 5.560421527661674e-07, 8.21252172045206e-07, 4.0986842009260727e-07], "target_probs": 0.9992752075195312}}


{"result": {"time": "2021-02-21 13:31:18.934710", "n_pass": [94, 6, 6], "n_token": 89, "loss": [0.03370248153805733, 0.0019533627200871706], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", ".", "dtype", "]", "=", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 76], "repair_candidates": [2, 19, 28, 38, 76, 22, 70, 72, 46, 66, 33, 53, 87, 13, 60, 81, 85]}}
{"prediction": {"error_location": 0.966858983039856, "repair_targets": [0.9948664903640747, 0.0008003468974493444, 0.0022574015893042088, 5.55791993974708e-05, 6.873411621199921e-05], "repair_candidates": [0.9948664903640747, 0.0017236312851309776, 0.0008003468974493444, 0.00015995142166502774, 0.0022574015893042088, 9.831985153141432e-06, 5.55791993974708e-05, 4.915385488857282e-06, 3.4971967579622287e-06, 2.2206346329767257e-05, 6.757981054761331e-07, 1.2206195606268011e-05, 1.0753885362646542e-05, 6.873411621199921e-05, 1.0234526826025103e-06, 1.8058959767586202e-06, 8.952699772635242e-07], "target_probs": 0.9980485439300537}}


{"result": {"time": "2021-02-21 13:31:19.030539", "n_pass": [96, 7, 7], "n_token": 85, "loss": [0.21874958276748657, 0.021730706095695496], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get maximum absolute value.\\n\\n    Find maximum absolute value in the specified array.\\n\\n    Parameters\\n    ----------\\n    x_gpu : pycuda.gpuarray.GPUArray\\n        Input array.\\n\\n    Returns\\n    -------\\n    m_gpu : pycuda.gpuarray.GPUArray\\n        Array containing maximum absolute value in `x_gpu`.\\n\\n    Examples\\n    --------\\n    >>> import pycuda.autoinit\\n    >>> import pycuda.gpuarray as gpuarray\\n    >>> import misc\\n    >>> x_gpu = gpuarray.to_gpu(np.array([-1, 2, -3], np.float32))\\n    >>> m_gpu = misc.maxabs(x_gpu)\\n    >>> np.allclose(m_gpu.get(), 3.0)\\n    True\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 15, "repair_targets": [2, 19, 28, 38, 76], "repair_candidates": [2, 19, 28, 38, 76, 22, 70, 72, 46, 66, 33, 53, 83, 13, 60, 77, 81]}}
{"prediction": {"error_location": 0.8035230040550232, "repair_targets": [0.9659124612808228, 0.002406734274700284, 0.009618439711630344, 0.00028212848701514304, 0.0002839724184013903], "repair_candidates": [0.9659124612808228, 0.018804563209414482, 0.002406734274700284, 0.0015712440945208073, 0.009618439711630344, 0.00024470596690662205, 0.00028212848701514304, 0.0001375968276988715, 2.466401201672852e-05, 0.00030230352422222495, 8.869606972439215e-06, 0.00028719735564664006, 7.693407678743824e-05, 0.0002839724184013903, 2.3159091142588295e-05, 9.616352144803386e-06, 5.5233963394130114e-06], "target_probs": 0.9785037040710449}}


{"result": {"time": "2021-02-21 13:31:19.220876", "n_pass": [101, 9, 8], "n_token": 82, "loss": [0.03952106088399887, 0.006617938634008169], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 12, "repair_targets": [2, 16, 25, 35, 73], "repair_candidates": [2, 16, 25, 35, 73, 19, 67, 69, 43, 63, 30, 50, 80, 10, 57, 74, 78]}}
{"prediction": {"error_location": 0.9612494707107544, "repair_targets": [0.9862966537475586, 0.0018052485538646579, 0.004934187978506088, 0.00016247734311036766, 0.00020535885414574295], "repair_candidates": [0.9862966537475586, 0.0054757483303546906, 0.0018052485538646579, 0.000771949125919491, 0.004934187978506088, 7.135819032555446e-05, 0.00016247734311036766, 4.501804869505577e-05, 1.3130219485901762e-05, 7.928350532893091e-05, 6.5461063059046865e-06, 7.599691161885858e-05, 4.029311821796e-05, 0.00020535885414574295, 9.645571481087245e-06, 4.566094048641389e-06, 2.616391839183052e-06], "target_probs": 0.9934039115905762}}


{"result": {"time": "2021-02-21 13:31:19.313241", "n_pass": [102, 10, 9], "n_token": 78, "loss": [0.5183513164520264, 0.025175658985972404], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "in", "[", "np", ".", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 31, 69], "repair_candidates": [2, 12, 21, 31, 69, 15, 63, 65, 39, 59, 26, 46, 76, 6, 53, 70, 74]}}
{"prediction": {"error_location": 0.5955014228820801, "repair_targets": [0.9640682935714722, 0.004181503783911467, 0.0064527010545134544, 0.00020805411622859538, 0.00022804579930379987], "repair_candidates": [0.9640682935714722, 0.021991988644003868, 0.004181503783911467, 0.002013010671362281, 0.0064527010545134544, 0.000236995387240313, 0.00020805411622859538, 0.00011104423901997507, 2.136657349183224e-05, 0.0002070833434117958, 7.4836389103438705e-06, 0.00018227749387733638, 6.0538081015693024e-05, 0.00022804579930379987, 1.7956719602807425e-05, 7.495539193769218e-06, 4.1383091229363345e-06], "target_probs": 0.9751386046409607}}


{"result": {"time": "2021-02-21 13:31:19.495020", "n_pass": [110, 12, 10], "n_token": 74, "loss": [0.43903252482414246, 0.030400188639760017], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "#NEWLINE#", "ret_type", "=", "(", "np", ".", "float64", "if", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 31, 65], "repair_candidates": [2, 12, 21, 31, 65, 15, 59, 61, 35, 55, 26, 42, 72, 6, 49, 66, 70]}}
{"prediction": {"error_location": 0.6446597576141357, "repair_targets": [0.9582008719444275, 0.003987269941717386, 0.007259263191372156, 0.0003786668530665338, 0.00023122355923987925], "repair_candidates": [0.9582008719444275, 0.026852475479245186, 0.003987269941717386, 0.0022140187211334705, 0.007259263191372156, 0.0002621510939206928, 0.0003786668530665338, 0.00011399139475543052, 2.209457306889817e-05, 0.00018791621550917625, 8.19052911538165e-06, 0.0001925084798131138, 5.994345701765269e-05, 0.00023122355923987925, 1.771396455296781e-05, 7.550501322839409e-06, 4.234554580762051e-06], "target_probs": 0.9700572490692139}}


{"result": {"time": "2021-02-21 13:31:19.582902", "n_pass": [112, 13, 11], "n_token": 70, "loss": [0.3286451995372772, 0.02256624773144722], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "#NEWLINE#", "ret_type", "=", "(", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "=", "reduction", ".", "ReductionKernel", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 31, 61], "repair_candidates": [2, 12, 21, 31, 61, 15, 55, 57, 35, 51, 26, 38, 68, 6, 45, 62, 66]}}
{"prediction": {"error_location": 0.7198982834815979, "repair_targets": [0.9637783169746399, 0.004880097694694996, 0.008333653211593628, 0.0004610394244082272, 0.00023342469648923725], "repair_candidates": [0.9637783169746399, 0.019167905673384666, 0.004880097694694996, 0.0022969678975641727, 0.008333653211593628, 0.00030775732011534274, 0.0004610394244082272, 7.58169699111022e-05, 4.30269437856623e-06, 0.00017952696362044662, 7.6124620136397425e-06, 0.00018126299255527556, 6.32649171166122e-05, 0.00023342469648923725, 1.7458252841606736e-05, 7.427112905133981e-06, 4.104904292034917e-06], "target_probs": 0.9776864647865295}}


{"result": {"time": "2021-02-21 13:31:19.668519", "n_pass": [115, 14, 12], "n_token": 66, "loss": [0.01998210698366165, 0.005936086643487215], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", ".", "dtype", ")", "#NEWLINE#", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "#NEWLINE#", "ret_type", "=", "(", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 31, 57], "repair_candidates": [2, 12, 21, 31, 57, 15, 51, 53, 35, 47, 26, 38, 64, 6, 45, 58, 62]}}
{"prediction": {"error_location": 0.9802163243293762, "repair_targets": [0.9858667254447937, 0.0028567914851009846, 0.004970440175384283, 0.000302553060464561, 8.500695548718795e-05], "repair_candidates": [0.9858667254447937, 0.004933857824653387, 0.0028567914851009846, 0.0007676666718907654, 0.004970440175384283, 6.237096386030316e-05, 0.000302553060464561, 1.500483358540805e-05, 3.912381998816272e-06, 9.419192792847753e-06, 1.3428316378849559e-05, 5.0366877985652536e-05, 5.423122274805792e-05, 8.500695548718795e-05, 4.185078523732955e-06, 1.987401219594176e-06, 1.9960971258115023e-06], "target_probs": 0.9940814971923828}}


{"result": {"time": "2021-02-21 13:31:19.837583", "n_pass": [127, 16, 13], "n_token": 62, "loss": [0.2246050387620926, 0.03671494871377945], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "int", "(", "(", "x_gpu", ".", "dtype", "#NEWLINE#", "ret_type", "=", "(", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 27, 53], "repair_candidates": [2, 12, 21, 27, 53, 15, 47, 49, 31, 43, 22, 34, 60, 6, 41, 54, 58]}}
{"prediction": {"error_location": 0.798831582069397, "repair_targets": [0.9529911279678345, 0.008798290975391865, 0.0009440934518352151, 0.0008834339096210897, 0.00033389433519914746], "repair_candidates": [0.9529911279678345, 0.03165163844823837, 0.008798290975391865, 0.002403537044301629, 0.0009440934518352151, 0.001066062948666513, 0.0008834339096210897, 0.00015148620877880603, 1.742039057717193e-05, 8.728647662792355e-05, 3.893419852829538e-05, 0.0004020419728476554, 0.00018801537225954235, 0.00033389433519914746, 2.209750709880609e-05, 1.1614667528192513e-05, 9.061286618816666e-06], "target_probs": 0.9639508724212646}}


{"result": {"time": "2021-02-21 13:31:20.003218", "n_pass": [177, 18, 14], "n_token": 60, "loss": [0.22596007585525513, 0.03550058975815773], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", ".", "dtype", "#NEWLINE#", "ret_type", "=", "(", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 51], "repair_candidates": [2, 12, 21, 25, 51, 15, 45, 47, 29, 41, 22, 32, 58, 6, 39, 52, 56]}}
{"prediction": {"error_location": 0.797749936580658, "repair_targets": [0.9534552693367004, 0.009349570609629154, 0.0006222774973139167, 0.0013401949545368552, 0.000354836811311543], "repair_candidates": [0.9534552693367004, 0.030558669939637184, 0.009349570609629154, 0.0023395202588289976, 0.0006222774973139167, 0.001070643775165081, 0.0013401949545368552, 0.00013200198009144515, 1.8009104678640142e-05, 8.521152631146833e-05, 4.0774044464342296e-05, 0.0003999381442554295, 0.00019038221216760576, 0.000354836811311543, 2.279686123074498e-05, 1.1507628187246155e-05, 8.58357634569984e-06], "target_probs": 0.9651221632957458}}


{"result": {"time": "2021-02-21 13:31:20.084473", "n_pass": [179, 19, 15], "n_token": 58, "loss": [0.2789984941482544, 0.059963736683130264], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "=", "(", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 49], "repair_candidates": [2, 12, 21, 25, 49, 15, 43, 45, 27, 39, 22, 30, 56, 6, 37, 50, 54]}}
{"prediction": {"error_location": 0.7565409541130066, "repair_targets": [0.9302570819854736, 0.009992338716983795, 0.0009169834665954113, 0.0002861313405446708, 0.00034611858427524567], "repair_candidates": [0.9302570819854736, 0.05065736547112465, 0.009992338716983795, 0.002823565388098359, 0.0009169834665954113, 0.00356580619700253, 0.0002861313405446708, 0.00010721312719397247, 1.8887154510593973e-05, 0.00013970964937470853, 5.907825834583491e-05, 0.0005810430739074945, 0.00019619773956947029, 0.00034611858427524567, 2.570238029875327e-05, 1.3903953913541045e-05, 1.2978562153875828e-05], "target_probs": 0.9417986869812012}}


{"result": {"time": "2021-02-21 13:31:20.166986", "n_pass": [181, 20, 16], "n_token": 56, "loss": [0.4852059483528137, 0.03620927780866623], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "np", ".", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 47], "repair_candidates": [2, 12, 21, 25, 47, 15, 41, 43, 27, 37, 22, 28, 54, 6, 35, 48, 52]}}
{"prediction": {"error_location": 0.6155703663825989, "repair_targets": [0.9510021209716797, 0.011731180362403393, 0.0007165472488850355, 0.00044491386506706476, 0.0005436589708551764], "repair_candidates": [0.9510021209716797, 0.030140932649374008, 0.011731180362403393, 0.0019629697781056166, 0.0007165472488850355, 0.0018396744271740317, 0.00044491386506706476, 4.133764377911575e-05, 5.9080542996525764e-05, 0.0001503070816397667, 6.82054233038798e-05, 0.0008939713588915765, 0.0003306989383418113, 0.0005436589708551764, 4.393919152789749e-05, 1.6745698303566314e-05, 1.3671872693521436e-05], "target_probs": 0.9644384384155273}}


{"result": {"time": "2021-02-21 13:31:20.246940", "n_pass": [183, 21, 17], "n_token": 54, "loss": [0.644335925579071, 0.03976750746369362], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "float32", ")", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 45], "repair_candidates": [2, 12, 21, 25, 45, 15, 39, 41, 27, 35, 22, 28, 52, 6, 33, 46, 50]}}
{"prediction": {"error_location": 0.5250109434127808, "repair_targets": [0.9468382596969604, 0.012372815981507301, 0.0007435620645992458, 0.000572467630263418, 0.00048575198161415756], "repair_candidates": [0.9468382596969604, 0.0333048515021801, 0.012372815981507301, 0.0022025597281754017, 0.0007435620645992458, 0.002046911744400859, 0.000572467630263418, 6.217823829501867e-05, 6.714011396979913e-05, 0.00023031470482237637, 5.0498125347075984e-05, 0.0006710704183205962, 0.0002746259851846844, 0.00048575198161415756, 4.627644375432283e-05, 1.6755311662564054e-05, 1.403876012773253e-05], "target_probs": 0.9610128402709961}}


{"result": {"time": "2021-02-21 13:31:20.325600", "n_pass": [184, 22, 18], "n_token": 52, "loss": [0.7314320802688599, 0.06099136546254158], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", ".", "cache", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 43], "repair_candidates": [2, 12, 21, 25, 43, 15, 37, 39, 27, 33, 22, 28, 50, 6, 31, 44, 48]}}
{"prediction": {"error_location": 0.4812193512916565, "repair_targets": [0.9222397804260254, 0.016350354999303818, 0.0007551791495643556, 0.000762611220125109, 0.0007234549848362803], "repair_candidates": [0.9222397804260254, 0.05018480122089386, 0.016350354999303818, 0.0031738155521452427, 0.0007551791495643556, 0.0035993652418255806, 0.000762611220125109, 7.206416194094345e-05, 9.259834041586146e-05, 0.00022206536959856749, 0.00010822879994520918, 0.0012005872558802366, 0.0003978446184191853, 0.0007234549848362803, 7.514799654018134e-05, 2.307176146132406e-05, 1.9049793991143815e-05], "target_probs": 0.9408313632011414}}


{"result": {"time": "2021-02-21 13:31:20.480000", "n_pass": [190, 24, 19], "n_token": 50, "loss": [0.06433772295713425, 0.015818053856492043], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "#UNINDENT#", "return", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 41], "repair_candidates": [2, 12, 21, 25, 41, 15, 37, 39, 27, 33, 22, 28, 48, 6, 31, 42, 46]}}
{"prediction": {"error_location": 0.9376881718635559, "repair_targets": [0.98360276222229, 0.00040544327930547297, 0.00010291810031048954, 9.687180863693357e-05, 9.843289444688708e-05], "repair_candidates": [0.98360276222229, 0.015150151215493679, 0.00040544327930547297, 7.727029878878966e-05, 0.00010291810031048954, 0.00040636828634887934, 9.687180863693357e-05, 3.9452088458347134e-06, 5.591978151642252e-06, 8.286378943012096e-06, 8.972459909273311e-06, 1.9991695808130316e-05, 3.883414137817454e-06, 9.843289444688708e-05, 4.7708485908515286e-06, 2.673341896297643e-06, 1.5898000356173725e-06], "target_probs": 0.9843063950538635}}


{"result": {"time": "2021-02-21 13:31:20.557133", "n_pass": [193, 25, 20], "n_token": 48, "loss": [0.09617485105991364, 0.014616517350077629], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "=", "tools", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 21, 25, 41], "repair_candidates": [2, 12, 21, 25, 41, 15, 37, 39, 27, 33, 22, 28, 46, 6, 31, 42, 44]}}
{"prediction": {"error_location": 0.908305287361145, "repair_targets": [0.9845683574676514, 0.0005799633800052106, 0.00012437565601430833, 0.0001358351728413254, 8.12633297755383e-05], "repair_candidates": [0.9845683574676514, 0.013822437264025211, 0.0005799633800052106, 0.00010054454469354823, 0.00012437565601430833, 0.000506303331349045, 0.0001358351728413254, 5.585565304500051e-06, 7.0230471465038136e-06, 1.3884498002880719e-05, 1.3163744370103814e-05, 2.860975291696377e-05, 3.7142156088521006e-06, 8.12633297755383e-05, 4.411698682815768e-06, 4.6155685140547575e-07, 4.125495252083056e-06], "target_probs": 0.9854897856712341}}


{"result": {"time": "2021-02-21 13:31:20.937526", "n_pass": [205, 30, 21], "n_token": 46, "loss": [0.2154906690120697, 0.016470685601234436], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", ".", "dtype_to_ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 19, 23, 39], "repair_candidates": [2, 12, 19, 23, 39, 15, 35, 37, 25, 31, 20, 26, 44, 6, 29, 40, 42]}}
{"prediction": {"error_location": 0.8061456084251404, "repair_targets": [0.9815412759780884, 0.0009952487889677286, 0.0006095605785958469, 0.0003978713939432055, 0.00012021714064758271], "repair_candidates": [0.9815412759780884, 0.015518792904913425, 0.0009952487889677286, 5.99792701905244e-06, 0.0006095605785958469, 0.0006444939062930644, 0.0003978713939432055, 1.2213583431730513e-05, 1.6045789379859343e-05, 3.283442129031755e-05, 2.514793595764786e-05, 5.8510533563094214e-05, 6.121120350144338e-06, 0.00012021714064758271, 7.349345651164185e-06, 8.727268436814484e-07, 7.512102001783205e-06], "target_probs": 0.9836642146110535}}


{"result": {"time": "2021-02-21 13:31:21.014268", "n_pass": [206, 31, 22], "n_token": 44, "loss": [0.05550241097807884, 0.0055856844410300255], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", ",", "neutral", "(", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 37], "repair_candidates": [2, 12, 17, 21, 37, 15, 33, 35, 23, 29, 18, 24, 42, 6, 27, 38, 40]}}
{"prediction": {"error_location": 0.9460097551345825, "repair_targets": [0.9935972690582275, 0.00016202272672671825, 0.00036019011167809367, 0.00022651020844932646, 8.393859752686694e-05], "repair_candidates": [0.9935972690582275, 0.004884310532361269, 0.00016202272672671825, 1.5449622878804803e-05, 0.00036019011167809367, 0.0005326834507286549, 0.00022651020844932646, 1.3667583516507875e-05, 1.3614259842142928e-05, 1.279235311812954e-05, 3.447739072726108e-05, 4.498603448155336e-05, 7.472516699635889e-06, 8.393859752686694e-05, 3.944444870285224e-06, 4.0900604858506995e-07, 6.235940418264363e-06], "target_probs": 0.994429886341095}}


{"result": {"time": "2021-02-21 13:31:21.087826", "n_pass": [214, 32, 23], "n_token": 42, "loss": [0.12129613012075424, 0.0233001708984375], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "(", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 35], "repair_candidates": [2, 12, 17, 21, 35, 15, 31, 33, 23, 29, 18, 24, 40, 6, 27, 36, 38]}}
{"prediction": {"error_location": 0.8857716917991638, "repair_targets": [0.9746211171150208, 0.0006809972692281008, 0.0006961135077290237, 0.0005238012527115643, 0.00044713905663229525], "repair_candidates": [0.9746211171150208, 0.020672481507062912, 0.0006809972692281008, 4.46130579803139e-05, 0.0006961135077290237, 0.002032667398452759, 0.0005238012527115643, 5.786577457911335e-05, 6.386200402630493e-05, 1.5934365364955738e-05, 2.320679232070688e-05, 6.159450276754797e-05, 2.5424700652365573e-05, 0.00044713905663229525, 1.6701078493497334e-05, 1.1856573109980673e-06, 1.51330550579587e-05], "target_probs": 0.9769691824913025}}


{"result": {"time": "2021-02-21 13:31:21.452646", "n_pass": [277, 37, 24], "n_token": 41, "loss": [0.05932464823126793, 0.012837080284953117], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "=", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 34], "repair_candidates": [2, 12, 17, 21, 34, 15, 30, 32, 23, 29, 18, 24, 39, 6, 27, 35, 37]}}
{"prediction": {"error_location": 0.9424006938934326, "repair_targets": [0.9856998324394226, 0.0003249080909881741, 0.0006275082705542445, 0.00038910683360882103, 0.00020361180941108614], "repair_candidates": [0.9856998324394226, 0.011397583410143852, 0.0003249080909881741, 2.646965003805235e-05, 0.0006275082705542445, 0.0010040492052212358, 0.00038910683360882103, 2.5910243493854068e-05, 2.8827333153458312e-05, 1.7000309526338242e-05, 3.248261418775655e-05, 0.00019036912999581546, 1.2044372851960361e-05, 0.00020361180941108614, 1.0044369446404744e-05, 7.454556225638953e-07, 9.493842298979871e-06], "target_probs": 0.9872449636459351}}


{"result": {"time": "2021-02-21 13:31:21.524697", "n_pass": [278, 38, 25], "n_token": 40, "loss": [0.28671103715896606, 0.01052685547620058], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "[", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 33], "repair_candidates": [2, 12, 17, 21, 33, 15, 30, 31, 23, 29, 18, 24, 38, 6, 27, 34, 36]}}
{"prediction": {"error_location": 0.7507284283638, "repair_targets": [0.9880794882774353, 0.000587824615649879, 0.00020556844538077712, 0.00022225022257771343, 0.00043322687270119786], "repair_candidates": [0.9880794882774353, 0.009038364514708519, 0.000587824615649879, 3.3003561838995665e-05, 0.00020556844538077712, 0.0012697685742750764, 0.00022225022257771343, 3.0191960831871256e-05, 3.933986590709537e-05, 1.2818630239053164e-05, 4.007568350061774e-06, 8.252275620179716e-06, 8.076948688540142e-06, 0.00043322687270119786, 1.55298021127237e-05, 1.2977038750250358e-06, 1.093138416763395e-05], "target_probs": 0.9895283579826355}}


{"result": {"time": "2021-02-21 13:31:21.596178", "n_pass": [280, 39, 26], "n_token": 39, "loss": [0.0688653215765953, 0.006856168620288372], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "#NEWLINE#", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 32], "repair_candidates": [2, 12, 17, 21, 32, 15, 30, 31, 23, 29, 18, 24, 37, 6, 27, 33, 35]}}
{"prediction": {"error_location": 0.933452308177948, "repair_targets": [0.992139995098114, 0.0004684273444581777, 0.00016729935305193067, 0.00010999690130120143, 0.0002815571497194469], "repair_candidates": [0.992139995098114, 0.005921728443354368, 0.0004684273444581777, 2.2389933292288333e-05, 0.00016729935305193067, 0.0007866498199291527, 0.00010999690130120143, 1.3046774256508797e-05, 1.744752808008343e-05, 9.08927722775843e-06, 2.9392710985121084e-06, 5.915820565860486e-06, 3.496342833386734e-05, 0.0002815571497194469, 1.4537499737343751e-05, 1.1325740842949017e-06, 2.872787945307209e-06], "target_probs": 0.9931672811508179}}


{"result": {"time": "2021-02-21 13:31:21.667047", "n_pass": [283, 40, 27], "n_token": 38, "loss": [0.09144828468561172, 0.003456718986853957], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "(", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 32], "repair_candidates": [2, 12, 17, 21, 32, 15, 30, 31, 23, 29, 18, 24, 36, 6, 27, 33, 34]}}
{"prediction": {"error_location": 0.9126085042953491, "repair_targets": [0.9950509667396545, 0.0013509345008060336, 6.303171539912e-05, 7.401440961984918e-05, 1.0315357940271497e-05], "repair_candidates": [0.9950509667396545, 0.002932870527729392, 0.0013509345008060336, 1.819884346332401e-05, 6.303171539912e-05, 0.00045973752276040614, 7.401440961984918e-05, 1.0347182069381233e-05, 1.14356271296856e-05, 3.1845511330175214e-06, 1.0108834658240085e-06, 2.8941244636371266e-06, 5.326740392774809e-06, 1.0315357940271497e-05, 1.2157377113908296e-06, 2.7082717224402586e-06, 1.9002353610630962e-06], "target_probs": 0.9965492486953735}}


{"result": {"time": "2021-02-21 13:31:21.740488", "n_pass": [285, 41, 28], "n_token": 37, "loss": [0.07402189821004868, 0.005885481834411621], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double", ")"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 32], "repair_candidates": [2, 12, 17, 21, 32, 15, 30, 31, 23, 29, 18, 24, 35, 6, 27, 33, 34]}}
{"prediction": {"error_location": 0.9286511540412903, "repair_targets": [0.9928730726242065, 0.0010949239367619157, 8.179684664355591e-05, 7.710219506407157e-05, 4.868934411206283e-06], "repair_candidates": [0.9928730726242065, 0.00516060134395957, 0.0010949239367619157, 2.2094278392614797e-05, 8.179684664355591e-05, 0.0006150533445179462, 7.710219506407157e-05, 1.5130778592720162e-05, 1.8754997654468752e-05, 1.4007435311214067e-05, 5.188760496821487e-06, 5.3103290156286675e-06, 4.112491296837106e-06, 4.868934411206283e-06, 3.2642874430166557e-06, 1.3149401638656855e-06, 3.490126346150646e-06], "target_probs": 0.9941318035125732}}


{"result": {"time": "2021-02-21 13:31:21.810857", "n_pass": [287, 42, 29], "n_token": 36, "loss": [0.0645466223359108, 0.007474271114915609], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 8, "repair_targets": [2, 12, 17, 21, 32], "repair_candidates": [2, 12, 17, 21, 32, 15, 30, 31, 23, 29, 18, 24, 35, 6, 27, 33, 34]}}
{"prediction": {"error_location": 0.9374921917915344, "repair_targets": [0.9913260340690613, 0.001015910878777504, 9.339985263068229e-05, 0.00011143736628582701, 6.8230656324885786e-06], "repair_candidates": [0.9913260340690613, 0.0066301459446549416, 0.001015910878777504, 2.5944393200916238e-05, 9.339985263068229e-05, 0.0007011563284322619, 0.00011143736628582701, 1.805667307053227e-05, 2.4592112822574563e-05, 1.807257649488747e-05, 5.42943098480464e-06, 7.64513788453769e-06, 5.768051778431982e-06, 6.8230656324885786e-06, 3.22179857903393e-06, 1.4181883898345404e-06, 4.954838004778139e-06], "target_probs": 0.9925535917282104}}


{"result": {"time": "2021-02-21 13:31:21.880593", "n_pass": [288, 43, 30], "n_token": 35, "loss": [1.0591135025024414, 0.03508911654353142], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", ".", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 16, 20, 31], "repair_candidates": [1, 11, 16, 20, 31, 14, 29, 30, 22, 28, 17, 23, 34, 5, 26, 32, 33]}}
{"prediction": {"error_location": 0.34676313400268555, "repair_targets": [0.962583601474762, 0.0027111845556646585, 0.00011403989628888667, 5.9901009080931544e-05, 5.0657487008720636e-05], "repair_candidates": [0.962583601474762, 0.02620176039636135, 0.0027111845556646585, 8.182563760783523e-05, 0.00011403989628888667, 0.007524219341576099, 5.9901009080931544e-05, 5.6001274060690776e-05, 0.00010988666326738894, 0.00035108611336909235, 3.220031430828385e-05, 3.0743020033696666e-05, 2.765754470601678e-05, 5.0657487008720636e-05, 2.1762551114079542e-05, 7.217214260890614e-06, 3.62065875378903e-05], "target_probs": 0.965519368648529}}


{"result": {"time": "2021-02-21 13:31:22.503137", "n_pass": [301, 52, 31], "n_token": 34, "loss": [1.0509438514709473, 0.04814186692237854], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "(", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 15, 19, 30], "repair_candidates": [1, 11, 15, 19, 30, 13, 28, 29, 21, 27, 16, 22, 33, 5, 25, 31, 32]}}
{"prediction": {"error_location": 0.3496076166629791, "repair_targets": [0.9519644379615784, 0.0008648458169773221, 7.411544356727973e-05, 4.301594526623376e-05, 5.215607598074712e-05], "repair_candidates": [0.9519644379615784, 0.037792496383190155, 0.0008648458169773221, 4.9802671128418297e-05, 7.411544356727973e-05, 0.008287639357149601, 4.301594526623376e-05, 6.272682367125526e-05, 0.0001315396948484704, 0.0005120119312778115, 3.2015061151469126e-05, 3.380768248462118e-05, 3.1768158805789426e-05, 5.215607598074712e-05, 2.063148349407129e-05, 7.310725777642801e-06, 3.972209742642008e-05], "target_probs": 0.9529985785484314}}


{"result": {"time": "2021-02-21 13:31:22.642459", "n_pass": [304, 54, 32], "n_token": 33, "loss": [0.8502746820449829, 0.027036361396312714], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "#NEWLINE#", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 14, 18, 29], "repair_candidates": [1, 11, 14, 18, 29, 13, 27, 28, 20, 26, 15, 21, 32, 5, 24, 30, 31]}}
{"prediction": {"error_location": 0.4272976219654083, "repair_targets": [0.9723852276802063, 0.0006043725297786295, 0.00025353519595228136, 4.2279167246306315e-05, 4.047149923280813e-05], "repair_candidates": [0.9723852276802063, 0.022320842370390892, 0.0006043725297786295, 0.00020871074229944497, 0.00025353519595228136, 0.0033167232759296894, 4.2279167246306315e-05, 7.662999269086868e-05, 0.0001288653293158859, 0.0004679232370108366, 3.2135838409885764e-05, 3.198971171514131e-05, 2.866284194169566e-05, 4.047149923280813e-05, 1.7181795556098223e-05, 6.924722129042493e-06, 3.75605741282925e-05], "target_probs": 0.9733258485794067}}


{"result": {"time": "2021-02-21 13:31:22.845201", "n_pass": [310, 57, 33], "n_token": 32, "loss": [0.6562010645866394, 0.026461441069841385], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "ret_type", "use_double", "else", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 14, 18, 28], "repair_candidates": [1, 11, 14, 18, 28, 13, 26, 27, 19, 25, 15, 20, 31, 5, 23, 29, 30]}}
{"prediction": {"error_location": 0.5188185572624207, "repair_targets": [0.9731056094169617, 0.0004425634688232094, 0.0002758043119683862, 2.4508923161192797e-05, 3.7099285691510886e-05], "repair_candidates": [0.9731056094169617, 0.02132474072277546, 0.0004425634688232094, 0.00023135103401727974, 0.0002758043119683862, 0.003708167001605034, 2.4508923161192797e-05, 8.232526852225419e-06, 6.353785283863544e-05, 0.0006254297913983464, 2.6855119358515367e-05, 2.7291402147966437e-05, 2.504478834453039e-05, 3.7099285691510886e-05, 1.8994125639437698e-05, 8.255248758359812e-06, 4.657110548578203e-05], "target_probs": 0.9738855957984924}}


{"result": {"time": "2021-02-21 13:31:22.912827", "n_pass": [313, 58, 34], "n_token": 31, "loss": [0.2566695511341095, 0.014915404841303825], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "ret_type", "use_double", "#NEWLINE#", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 14, 18, 27], "repair_candidates": [1, 11, 14, 18, 27, 13, 25, 26, 19, 24, 15, 20, 30, 5, 22, 28, 29]}}
{"prediction": {"error_location": 0.7736237645149231, "repair_targets": [0.9845713376998901, 0.0003208331763744354, 0.0002759997732937336, 1.4089155229157768e-05, 1.3053659131401218e-05], "repair_candidates": [0.9845713376998901, 0.012841340154409409, 0.0003208331763744354, 0.00016274562221951783, 0.0002759997732937336, 0.0014232929097488523, 1.4089155229157768e-05, 6.82530298945494e-06, 0.00011576461110962555, 0.00018019213166553527, 1.594365130586084e-05, 1.385781797580421e-05, 1.0753480637504254e-05, 1.3053659131401218e-05, 5.852546564710792e-06, 3.6323172025731765e-06, 2.4537053832318634e-05], "target_probs": 0.9851952791213989}}


{"result": {"time": "2021-02-21 13:31:22.982359", "n_pass": [314, 59, 35], "n_token": 30, "loss": [0.5994447469711304, 0.01531817577779293], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "ret_type", "use_double", "func", "(", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 14, 18, 26], "repair_candidates": [1, 11, 14, 18, 26, 13, 24, 25, 19, 23, 15, 20, 29, 5, 21, 27, 28]}}
{"prediction": {"error_location": 0.5491163730621338, "repair_targets": [0.9835790991783142, 0.00043604389065876603, 0.0007275854586623609, 2.281990964547731e-05, 3.301323522464372e-05], "repair_candidates": [0.9835790991783142, 0.010400268249213696, 0.00043604389065876603, 0.0005018446827307343, 0.0007275854586623609, 0.003185636829584837, 2.281990964547731e-05, 1.4212117093848065e-05, 0.00023664873151574284, 0.0007205813890323043, 3.2227238989435136e-05, 1.8747350623016246e-05, 2.3178739866125397e-05, 3.301323522464372e-05, 1.0026516974903643e-05, 3.631737854448147e-06, 5.448914089356549e-05], "target_probs": 0.9847985506057739}}


{"result": {"time": "2021-02-21 13:31:23.049064", "n_pass": [316, 60, 36], "n_token": 29, "loss": [0.5062093734741211, 0.004692699760198593], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "#INDENT#", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "ret_type", "use_double", "func", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 14, 18, 25], "repair_candidates": [1, 11, 14, 18, 25, 13, 23, 24, 19, 22, 15, 20, 28, 5, 21, 26, 27]}}
{"prediction": {"error_location": 0.6027761697769165, "repair_targets": [0.9949518442153931, 0.0001345177588518709, 0.0002032184274867177, 6.712673894071486e-06, 2.2019123207428493e-05], "repair_candidates": [0.9949518442153931, 0.0032359010074287653, 0.0001345177588518709, 0.00016101387154776603, 0.0002032184274867177, 0.0010746376356109977, 6.712673894071486e-06, 6.366545676428359e-06, 4.0775921661406755e-05, 5.098144811199745e-06, 1.5485431504203007e-05, 7.042632933007553e-05, 2.902726555475965e-05, 2.2019123207428493e-05, 5.483648692461429e-06, 1.970004177564988e-06, 3.5634955565910786e-05], "target_probs": 0.9953182935714722}}


{"result": {"time": "2021-02-21 13:31:23.639581", "n_pass": [336, 69, 37], "n_token": 28, "loss": [0.32012152671813965, 0.004635990597307682], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "ctype", "x_gpu", "use_double", "=", "(", "x_gpu", "ret_type", "use_double", "func", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 13, 17, 24], "repair_candidates": [1, 11, 13, 17, 24, 12, 22, 23, 18, 21, 14, 19, 27, 5, 20, 25, 26]}}
{"prediction": {"error_location": 0.7260608077049255, "repair_targets": [0.9933494925498962, 4.2596446292009205e-05, 0.0019539750646799803, 9.291022252000403e-06, 1.935257932927925e-05], "repair_candidates": [0.9933494925498962, 0.0018761538667604327, 4.2596446292009205e-05, 0.0004543811664916575, 0.0019539750646799803, 0.0020696409046649933, 9.291022252000403e-06, 7.571462901978521e-06, 4.512750820140354e-05, 6.360045517794788e-06, 1.9221122784074396e-05, 8.253443229477853e-05, 3.0396473448490724e-05, 1.935257932927925e-05, 4.125501618545968e-06, 1.5808985835974454e-06, 2.8182552341604605e-05], "target_probs": 0.9953747391700745}}


{"result": {"time": "2021-02-21 13:31:23.773497", "n_pass": [341, 71, 38], "n_token": 27, "loss": [1.2743310928344727, 0.35887423157691956], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "ctype", "x_gpu", "use_double", "=", "x_gpu", "ret_type", "use_double", "func", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 13, 16, 23], "repair_candidates": [1, 11, 13, 16, 23, 12, 21, 22, 17, 20, 14, 18, 26, 5, 19, 24, 25]}}
{"prediction": {"error_location": 0.27961796522140503, "repair_targets": [0.6971182823181152, 4.571306999423541e-05, 0.0012041256995871663, 3.295925125712529e-05, 6.109079549787566e-05], "repair_candidates": [0.6971182823181152, 0.002603678498417139, 4.571306999423541e-05, 0.0005175917758606374, 0.0012041256995871663, 0.29763153195381165, 3.295925125712529e-05, 3.544343780959025e-05, 0.0002484870492480695, 2.5663477572379634e-05, 5.935172157478519e-05, 0.00022598479699809104, 0.0001071556398528628, 6.109079549787566e-05, 1.2536087524495088e-05, 5.6813055380189326e-06, 6.472208042396232e-05], "target_probs": 0.698462188243866}}


{"result": {"time": "2021-02-21 13:31:24.357743", "n_pass": [368, 80, 39], "n_token": 26, "loss": [0.24129672348499298, 0.002506115473806858], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def maxabs(", "x_gpu", ")", ":", "#NEWLINE#", "func", "=", "maxabs", ".", "cache", "[", "x_gpu", "ctype", "x_gpu", "use_double", "x_gpu", "ret_type", "use_double", "func", "ret_type", "ctype", "ctype", "x_gpu", "func", "func", "use_double"]}}
{"position": {"error_location": 7, "repair_targets": [1, 11, 13, 15, 22], "repair_candidates": [1, 11, 13, 15, 22, 12, 20, 21, 16, 19, 14, 17, 25, 5, 18, 23, 24]}}
{"prediction": {"error_location": 0.7856085300445557, "repair_targets": [0.9970494508743286, 4.856182204093784e-05, 0.00020102300914004445, 0.0001775091513991356, 2.0494748241617344e-05], "repair_candidates": [0.9970494508743286, 0.0015169883845373988, 4.856182204093784e-05, 0.0001335709384875372, 0.00020102300914004445, 8.990288915811107e-05, 0.0001775091513991356, 3.531583570293151e-05, 0.00017743873468134552, 4.797015571966767e-05, 0.00011037761578336358, 0.00027884673909284174, 6.135968578746542e-05, 2.0494748241617344e-05, 3.873626610584324e-06, 2.46800073000486e-06, 4.4817359594162554e-05], "target_probs": 0.997497022151947}}




Minimal simplified tokens:

['def maxabs(', 'x_gpu', ')', ':', '#NEWLINE#', 'func', '=', 'maxabs', '.', 'cache', '[', 'x_gpu', 'ctype', 'x_gpu', 'use_double', 'x_gpu', 'ret_type', 'use_double', 'func', 'ret_type', 'ctype', 'ctype', 'x_gpu', 'func', 'func', 'use_double']
