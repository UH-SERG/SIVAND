
Original sample:

{"has_bug": true, "bug_kind": 1, "bug_kind_name": "VARIABLE_MISUSE", "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ":", "#NEWLINE#", "#INDENT#", "with", "mock", ".", "patch", "(", "'cloudbaseinit.exception.ctypes.FormatError'", ",", "create", "=", "True", ")", "as", "mock_format_error", ":", "#NEWLINE#", "#INDENT#", "with", "mock", ".", "patch", "(", "'cloudbaseinit.exception.ctypes.GetLastError'", ",", "create", "=", "True", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"], "error_location": [29], "repair_targets": [13], "repair_candidates": [48, 68, 94, 108, 121, 7, 25, 126, 9, 29, 116, 119, 130, 64, 82, 88, 98, 32, 132, 11, 112, 13], "provenances": [{"datasetProvenance": {"datasetName": "ETHPy150Open", "filepath": "openstack/cloudbase-init/cloudbaseinit/tests/testutils.py", "license": "apache-2.0", "note": "license: bigquery_api"}}], "txt_file": "eval__VARIABLE_MISUSE__SStuB.txt-00010-of-00300", "js_count": 35332, "results": {"model": "rnn", "prob": {"loc": [[0.3446202278137207, 2.9045093469903804e-05, 1.3837153346685227e-05, 3.1239292752616166e-07, 8.440946430710028e-08, 2.171560566921471e-07, 5.315477835665661e-09, 5.07350193856837e-07, 1.932709131624577e-10, 6.658455617980508e-07, 4.245580953465833e-08, 1.677555246715201e-06, 9.187230531892965e-09, 5.790778345726721e-07, 4.117753249488487e-08, 4.220270511723356e-06, 1.4323957486794825e-07, 1.551934758481366e-08, 5.8190757101783674e-08, 1.6480832698562153e-07, 6.269164032346453e-07, 1.6472489505758858e-07, 4.760131560033187e-05, 4.1493427715977305e-07, 1.5042866152725765e-07, 2.557490688559483e-06, 1.0535422312329956e-08, 1.2360907248876174e-06, 3.040150797772867e-09, 0.08122795820236206, 1.9844257622025907e-05, 1.7353534076391952e-06, 7.8492112152162e-06, 1.7845359252532944e-06, 7.346008032982354e-07, 2.2625235374107433e-07, 1.5480435422432492e-07, 7.196246087914915e-07, 2.980526048190768e-08, 1.6731765128952247e-07, 1.1379427178326296e-07, 8.181164048437495e-07, 1.8087625619500614e-07, 3.385259788046824e-06, 8.599405276754624e-08, 3.0789121865382185e-06, 1.469991985914021e-07, 7.159705432968622e-07, 1.0033819307864178e-05, 2.325408331671497e-06, 5.892728154321958e-07, 1.2110542968457594e-07, 9.597712136155678e-08, 1.1169663594046142e-06, 1.589519804667816e-08, 7.201405338719269e-08, 9.380050869367551e-08, 6.798846357014554e-07, 1.39876760840707e-07, 2.377284545218572e-06, 8.623138825214482e-08, 3.385889385754126e-06, 1.7503880656022375e-07, 3.4523766316851834e-06, 6.274867700994946e-06, 1.5480553372526629e-07, 9.98985456135415e-07, 2.3484547639895936e-08, 2.9146690394554753e-06, 8.224451164551283e-08, 4.6996539992960606e-08, 1.8887928376898344e-07, 3.2637328786222497e-06, 4.6168202061380725e-07, 9.353453123139843e-09, 2.436136855976656e-05, 1.7107131498050876e-05, 9.721832157083554e-07, 6.176762781251455e-07, 1.2766331565217115e-06, 2.670101366675226e-06, 1.0049539014289621e-06, 0.06735485792160034, 6.461765877929793e-08, 2.150719956262037e-05, 4.1408989659430517e-07, 3.1420402137882775e-06, 5.1709406534428126e-08, 2.3352376956609078e-06, 5.1491504393652576e-08, 5.482240084120349e-08, 2.167397781249747e-07, 1.8307372329218197e-06, 1.1080758355319631e-07, 9.975070724976831e-07, 1.2141522631736734e-07, 6.129322827064243e-08, 1.3322791403425072e-07, 0.4378611445426941, 3.02333695856305e-08, 9.393156688020099e-06, 1.8410575819416408e-07, 1.4821431193468015e-07, 4.261710273567587e-06, 4.6958636090721484e-08, 6.830529173385003e-07, 1.1060545830332558e-06, 7.1969461501453225e-09, 1.2224171541674878e-06, 9.156123326192755e-08, 4.330531666596471e-08, 1.3697820122615667e-07, 0.0025100153870880604, 6.10918959864648e-08, 2.6459429136593826e-07, 7.323064892261755e-07, 2.4138634557857586e-07, 2.8653216688212524e-08, 1.7261514813071699e-06, 0.0268521960824728, 1.0625305968403609e-08, 0.019371597096323967, 2.455866479067481e-07, 1.9110300854663365e-05, 8.696566311527931e-08, 1.349966254338142e-07, 4.13191492043552e-06, 1.767834234556176e-08, 3.8440200000877667e-07, 2.4555235995649127e-06, 0.0018099370645359159, 1.1337063909877543e-07, 0.018050890415906906, 4.0598486350518215e-08, 1.609690662007779e-05, 1.4114156954292412e-07, 1.8713590179686435e-06, 9.96984894641173e-09, 1.1227800314372871e-05, 1.9047435273478186e-07, 6.487871928584354e-08]], "pointer": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019460984040051699, 0.0, 0.009171946905553341, 0.0, 0.09867724031209946, 0.0, 0.8570194840431213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.766606459976174e-05, 0.0, 0.0, 0.0, 0.000961214944254607, 0.0, 0.0, 0.022231649607419968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005440532695502043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002945271320641041, 0.0, 0.0, 0.0, 0.00013042386854067445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009694979526102543, 0.0, 0.0, 0.0, 0.0, 0.0, 7.234902295749635e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 1.479514321545139e-05, 0.0, 0.0, 0.0, 7.627836566825863e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.131991929374635e-05, 0.0, 0.0, 0.0, 6.779542309232056e-05, 0.0, 0.0, 0.0, 9.883894381346181e-05, 0.0, 0.0, 4.906630056211725e-05, 0.0, 6.513085099868476e-05, 0.0, 0.0, 0.0, 0.0, 5.761165084550157e-06, 0.0, 0.0, 0.0, 2.191139356000349e-05, 0.0, 1.4376393664861098e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "target": [0.8570194840431213]}, "loss": [2.510495662689209, 0.15429462492465973], "acc": [0.0, 0.0, 1.0, 0.0]}, "wrong_error_location": [98]}


Trace of simplified code(s):

{"result": {"time": "2021-02-21 12:42:36.381595", "n_pass": [1, 1, 1], "n_token": 141, "loss": [0.8258534073829651, 0.15429462492465973], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ":", "#NEWLINE#", "#INDENT#", "with", "mock", ".", "patch", "(", "'cloudbaseinit.exception.ctypes.FormatError'", ",", "create", "=", "True", ")", "as", "mock_format_error", ":", "#NEWLINE#", "#INDENT#", "with", "mock", ".", "patch", "(", "'cloudbaseinit.exception.ctypes.GetLastError'", ",", "create", "=", "True", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 98, "repair_targets": [13], "repair_candidates": [48, 68, 94, 108, 121, 7, 25, 126, 9, 29, 116, 119, 130, 64, 82, 88, 98, 32, 132, 11, 112, 13]}}
{"prediction": {"error_location": 0.4378611445426941, "repair_targets": [0.8570194840431213], "repair_candidates": [0.0019460984040051699, 0.009171946905553341, 0.09867724031209946, 0.8570194840431213, 3.766606459976174e-05, 0.000961214944254607, 0.022231649607419968, 0.005440532695502043, 0.002945271320641041, 0.00013042386854067445, 0.0009694979526102543, 7.234902295749635e-05, 1.479514321545139e-05, 7.627836566825863e-06, 5.131991929374635e-05, 6.779542309232056e-05, 9.883894381346181e-05, 4.906630056211725e-05, 6.513085099868476e-05, 5.761165084550157e-06, 2.191139356000349e-05, 1.4376393664861098e-05], "target_probs": 0.8570194840431213}}


{"result": {"time": "2021-02-21 12:42:36.629826", "n_pass": [48, 3, 2], "n_token": 132, "loss": [0.8473798632621765, 0.1801498532295227], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ":", "#NEWLINE#", "#INDENT#", "with", "mock", ".", "patch", "(", "'cloudbaseinit.exception.ctypes.GetLastError'", ",", "create", "=", "True", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 89, "repair_targets": [13], "repair_candidates": [39, 59, 85, 99, 112, 7, 25, 117, 9, 29, 107, 110, 121, 55, 73, 79, 89, 32, 123, 11, 103, 13]}}
{"prediction": {"error_location": 0.42853620648384094, "repair_targets": [0.8351450562477112], "repair_candidates": [0.0016132451128214598, 0.008668400347232819, 0.08531271666288376, 0.8351450562477112, 3.6063880543224514e-05, 0.0008651601965539157, 0.056024275720119476, 0.007928986102342606, 0.002848538104444742, 0.00014355478924699128, 0.0009584504296071827, 7.841122715035453e-05, 1.2757285730913281e-05, 6.1435516727215145e-06, 5.284002691041678e-05, 5.7319961342727765e-05, 0.00010196454968536273, 4.4094664190197363e-05, 6.149685941636562e-05, 6.2030185290495865e-06, 1.9914696167688817e-05, 1.4316125088953413e-05], "target_probs": 0.8351450562477112}}


{"result": {"time": "2021-02-21 12:42:36.745517", "n_pass": [50, 4, 3], "n_token": 123, "loss": [0.9030044078826904, 0.1799168586730957], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ":", "#NEWLINE#", "=", "True", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 80, "repair_targets": [13], "repair_candidates": [39, 50, 76, 90, 103, 7, 25, 108, 9, 29, 98, 101, 112, 46, 64, 70, 80, 32, 114, 11, 94, 13]}}
{"prediction": {"error_location": 0.405349999666214, "repair_targets": [0.8353396654129028], "repair_candidates": [0.0016978431958705187, 0.008996464312076569, 0.08538234978914261, 0.8353396654129028, 3.7317531678127125e-05, 0.0009356774389743805, 0.052965253591537476, 0.008863747119903564, 0.0041144960559904575, 0.0002883851411752403, 0.000919210200663656, 7.786873902659863e-05, 1.2534831512311939e-05, 7.73185911384644e-06, 5.455007703858428e-05, 5.6888500694185495e-05, 0.00010234170622425154, 4.4122945837443694e-05, 6.184269295772538e-05, 6.885927177791018e-06, 2.0049832528457046e-05, 1.480916307627922e-05], "target_probs": 0.8353396654129028}}


{"result": {"time": "2021-02-21 12:42:37.083833", "n_pass": [93, 7, 4], "n_token": 119, "loss": [0.7452903985977173, 0.16912685334682465], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 76, "repair_targets": [13], "repair_candidates": [39, 46, 72, 86, 99, 7, 25, 104, 9, 29, 94, 97, 108, 42, 60, 66, 76, 32, 110, 11, 90, 13]}}
{"prediction": {"error_location": 0.47459644079208374, "repair_targets": [0.8444017767906189], "repair_candidates": [0.0017659880686551332, 0.009199552237987518, 0.08702772855758667, 0.8444017767906189, 4.142145917285234e-05, 0.0009729404700919986, 0.048911988735198975, 0.004357786849141121, 0.0017498472006991506, 0.00022414834529627115, 0.0008758660987950861, 7.349369843723252e-05, 1.3426129044091795e-05, 7.43666396374465e-06, 5.579291973845102e-05, 6.119734462117776e-05, 0.00010344799375161529, 4.781495954375714e-05, 6.494572153314948e-05, 6.854753337393049e-06, 2.1239786292426288e-05, 1.5412462744279765e-05], "target_probs": 0.8444017767906189}}


{"result": {"time": "2021-02-21 12:42:37.307607", "n_pass": [97, 9, 5], "n_token": 115, "loss": [1.0182145833969116, 0.1670055389404297], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "called", ":", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 72, "repair_targets": [13], "repair_candidates": [39, 46, 68, 82, 95, 7, 25, 100, 9, 29, 90, 93, 104, 42, 56, 62, 72, 32, 106, 11, 86, 13]}}
{"prediction": {"error_location": 0.36123934388160706, "repair_targets": [0.8461949229240417], "repair_candidates": [0.0015765218995511532, 0.008730380795896053, 0.08602745831012726, 0.8461949229240417, 3.931420360459015e-05, 0.0009196033934131265, 0.05007648095488548, 0.0037899455055594444, 0.0013716949615627527, 0.00014717955491505563, 0.0006514167762361467, 7.193180499598384e-05, 1.1091322448919527e-05, 7.81836479291087e-06, 5.567461994360201e-05, 5.937609967077151e-05, 0.00010591687896521762, 5.0543156248750165e-05, 6.901469168951735e-05, 7.122607257770142e-06, 2.107709769916255e-05, 1.546609382785391e-05], "target_probs": 0.8461949229240417}}


{"result": {"time": "2021-02-21 12:42:38.401300", "n_pass": [179, 19, 6], "n_token": 113, "loss": [0.6631179451942444, 0.2030770629644394], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "#NEWLINE#", "#INDENT#", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 70, "repair_targets": [13], "repair_candidates": [39, 46, 66, 80, 93, 7, 25, 98, 9, 29, 88, 91, 102, 42, 56, 60, 70, 32, 104, 11, 84, 13]}}
{"prediction": {"error_location": 0.515242338180542, "repair_targets": [0.8162153363227844], "repair_candidates": [0.0011156653054058552, 0.007793785538524389, 0.06999575346708298, 0.8162153363227844, 3.283152909716591e-05, 0.0007406267104670405, 0.0972093790769577, 0.004566728137433529, 0.0015142776537686586, 0.00017513096099719405, 0.0002061743289232254, 4.438853284227662e-05, 7.046236078167567e-06, 5.382762992667267e-06, 5.234244599705562e-05, 5.595893890131265e-05, 0.00010885106166824698, 4.856129453401081e-05, 7.32731496100314e-05, 6.83295183989685e-06, 1.779977355909068e-05, 1.3923914593760855e-05], "target_probs": 0.8162153363227844}}


{"result": {"time": "2021-02-21 12:42:38.511076", "n_pass": [180, 20, 7], "n_token": 111, "loss": [0.8038631677627563, 0.1754111796617508], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", ")", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 68, "repair_targets": [13], "repair_candidates": [39, 46, 64, 78, 91, 7, 25, 96, 9, 29, 86, 89, 100, 42, 56, 58, 68, 32, 102, 11, 82, 13]}}
{"prediction": {"error_location": 0.4475964307785034, "repair_targets": [0.8391119241714478], "repair_candidates": [0.0012828289764001966, 0.007586052641272545, 0.07659787684679031, 0.8391119241714478, 3.1959323678165674e-05, 0.0007399185560643673, 0.06801526993513107, 0.003720306558534503, 0.001263187499716878, 0.00011434961925260723, 8.26860050437972e-05, 0.0010434389114379883, 9.316211617260706e-06, 5.3311127885535825e-06, 5.715831139241345e-05, 5.7927736634155735e-05, 0.00011112791253253818, 5.279760807752609e-05, 7.553032628493384e-05, 6.214178483787691e-06, 1.9765011529671028e-05, 1.5023513697087765e-05], "target_probs": 0.8391119241714478}}


{"result": {"time": "2021-02-21 12:42:38.729380", "n_pass": [183, 22, 8], "n_token": 109, "loss": [0.32446640729904175, 0.19168788194656372], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "return_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 76, 89, 7, 25, 94, 9, 29, 84, 87, 98, 42, 56, 58, 66, 32, 100, 11, 80, 13]}}
{"prediction": {"error_location": 0.7229129672050476, "repair_targets": [0.8255645036697388], "repair_candidates": [0.001175881247036159, 0.007392365951091051, 0.07392428070306778, 0.8255645036697388, 3.180786006851122e-05, 0.0007649620529264212, 0.08520140498876572, 0.003818592755123973, 0.001355665153823793, 9.082533506443724e-05, 1.625161530682817e-05, 0.0002946877502836287, 2.621656130941119e-05, 8.727579370315652e-06, 4.604169225785881e-05, 4.414012801134959e-05, 9.882728772936389e-05, 4.3665040720952675e-05, 6.546334770973772e-05, 7.077185273374198e-06, 1.5928997527225874e-05, 1.2741266800730955e-05], "target_probs": 0.8255645036697388}}


{"result": {"time": "2021-02-21 12:42:38.944660", "n_pass": [187, 24, 9], "n_token": 107, "loss": [0.31099504232406616, 0.26071879267692566], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 74, 87, 7, 25, 92, 9, 29, 82, 85, 96, 42, 56, 58, 66, 32, 98, 11, 78, 13]}}
{"prediction": {"error_location": 0.7327175736427307, "repair_targets": [0.7704975605010986], "repair_candidates": [0.0010623940033838153, 0.005941968876868486, 0.051523592323064804, 0.7704975605010986, 3.201659637852572e-05, 0.0004953714087605476, 0.16300112009048462, 0.005351248662918806, 0.001403954578563571, 0.00010033648868557066, 1.5714153050794266e-05, 0.00025179790100082755, 2.162563760066405e-05, 8.872935723047704e-06, 3.621554060373455e-05, 2.6859104764298536e-05, 0.00011044742859667167, 3.4160369978053495e-05, 5.663645424647257e-05, 6.397270681191003e-06, 1.1057953088311478e-05, 1.070850976248039e-05], "target_probs": 0.7704975605010986}}


{"result": {"time": "2021-02-21 12:42:39.155589", "n_pass": [189, 26, 10], "n_token": 105, "loss": [0.08160540461540222, 0.45867761969566345], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 72, 85, 7, 25, 90, 9, 29, 80, 83, 94, 42, 56, 58, 66, 32, 96, 11, 76, 13]}}
{"prediction": {"error_location": 0.9216355681419373, "repair_targets": [0.6321189999580383], "repair_candidates": [0.001381865469738841, 0.00510089285671711, 0.03138786181807518, 0.6321189999580383, 4.301067747292109e-05, 0.0005247854278422892, 0.32124996185302734, 0.005960341077297926, 0.0012134142452850938, 0.00017256014689337462, 2.9947075745440088e-05, 0.0004595568752847612, 3.250823283451609e-05, 4.107355380256195e-06, 2.364435749768745e-05, 1.95938628166914e-05, 0.000153638087795116, 3.651476799859665e-05, 6.061470048734918e-05, 7.216790436359588e-06, 9.935720299836248e-06, 8.990147762233391e-06], "target_probs": 0.6321189999580383}}


{"result": {"time": "2021-02-21 12:42:39.262653", "n_pass": [190, 27, 11], "n_token": 103, "loss": [0.26812732219696045, 0.17039577662944794], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "return_value", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 70, 83, 7, 25, 88, 9, 29, 78, 81, 92, 42, 56, 58, 66, 32, 94, 11, 74, 13]}}
{"prediction": {"error_location": 0.7648105025291443, "repair_targets": [0.843330979347229], "repair_candidates": [0.0009567922679707408, 0.007050094660371542, 0.06464183330535889, 0.843330979347229, 3.0469087505480275e-05, 0.0005348551785573363, 0.0786457359790802, 0.002923686522990465, 0.0009166326490230858, 9.878660785034299e-05, 2.868659248633776e-05, 0.00046779049444012344, 3.8948783185333014e-05, 1.0904414011747576e-05, 2.7554811822483316e-05, 3.269176886533387e-05, 0.00011043442646041512, 4.541058297036216e-05, 7.369922968791798e-05, 7.3567102845117915e-06, 1.4268757695390377e-05, 1.2411059287842363e-05], "target_probs": 0.843330979347229}}


{"result": {"time": "2021-02-21 12:42:39.366881", "n_pass": [196, 28, 12], "n_token": 100, "loss": [0.3636496663093567, 0.1623321771621704], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", ".", "args", "[", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 70, 83, 7, 25, 85, 9, 29, 78, 81, 89, 42, 56, 58, 66, 32, 91, 11, 74, 13]}}
{"prediction": {"error_location": 0.6951348185539246, "repair_targets": [0.8501587510108948], "repair_candidates": [0.0008081032428890467, 0.006438900716602802, 0.06944616883993149, 0.8501587510108948, 2.799827780108899e-05, 0.0004807734803762287, 0.05545343831181526, 0.0018778073135763407, 0.0007786068017594516, 9.313553891843185e-05, 2.7940421205130406e-05, 0.00045112913358025253, 4.069314309163019e-05, 1.229368535859976e-05, 2.1858630134374835e-05, 2.524517367419321e-05, 0.013354888185858727, 2.322839281987399e-05, 0.0003987629897892475, 4.7106066631386057e-05, 2.007116017921362e-05, 1.3154804946680088e-05], "target_probs": 0.8501587510108948}}


{"result": {"time": "2021-02-21 12:42:39.469456", "n_pass": [200, 29, 13], "n_token": 97, "loss": [0.2975230813026428, 0.18709434568881989], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception", "0", "]", ")"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 70, 83, 7, 25, 85, 9, 29, 78, 81, 89, 42, 56, 58, 66, 32, 91, 11, 74, 13]}}
{"prediction": {"error_location": 0.7426554560661316, "repair_targets": [0.8293654918670654], "repair_candidates": [0.0010771448723971844, 0.007655011489987373, 0.09498488903045654, 0.8293654918670654, 2.4029202904785052e-05, 0.0005509755574166775, 0.05951106920838356, 0.00226766150444746, 0.0008277120068669319, 0.00010898580512730405, 3.9789436414139345e-05, 0.0007005573716014624, 4.394706411403604e-05, 1.761195744620636e-05, 2.3965169020812027e-05, 3.8435413443949074e-05, 0.00251534185372293, 2.0562323697959073e-05, 0.00014619559806305915, 5.429284647107124e-05, 1.535292722110171e-05, 1.0913114238064736e-05], "target_probs": 0.8293654918670654}}


{"result": {"time": "2021-02-21 12:42:39.570047", "n_pass": [201, 30, 14], "n_token": 94, "loss": [0.30959904193878174, 0.15424127876758575], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["#NEWLINE#", "@", "contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 66, "repair_targets": [13], "repair_candidates": [39, 46, 62, 70, 83, 7, 25, 85, 9, 29, 78, 81, 89, 42, 56, 58, 66, 32, 91, 11, 74, 13]}}
{"prediction": {"error_location": 0.7337411046028137, "repair_targets": [0.8570652008056641], "repair_candidates": [0.0010329156648367643, 0.0068010929971933365, 0.08708011358976364, 0.8570652008056641, 2.3810394850443117e-05, 0.0005043413839302957, 0.03808465600013733, 0.0024110786616802216, 0.0009421114809811115, 0.00012314063496887684, 4.2802908865269274e-05, 0.0008505823207087815, 4.635236109606922e-05, 1.920956128742546e-05, 2.4519616999896243e-05, 3.879842552123591e-05, 0.004631091840565205, 2.6916897695627995e-05, 0.0001689526834525168, 5.9797308495035395e-05, 1.6226613297476433e-05, 6.200381449161796e-06], "target_probs": 0.8570652008056641}}


{"result": {"time": "2021-02-21 12:42:39.669571", "n_pass": [202, 31, 15], "n_token": 92, "loss": [0.3948097229003906, 0.21342115104198456], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contextlib", ".", "contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 64, "repair_targets": [11], "repair_candidates": [37, 44, 60, 68, 81, 5, 23, 83, 7, 27, 76, 79, 87, 40, 54, 56, 64, 30, 89, 9, 72, 11]}}
{"prediction": {"error_location": 0.673808217048645, "repair_targets": [0.8078158497810364], "repair_candidates": [0.0009796712547540665, 0.009900265373289585, 0.07633232325315475, 0.8078158497810364, 4.346284185885452e-05, 0.0005813933676108718, 0.08291707932949066, 0.004225314129143953, 0.0018517797579988837, 0.0002375301264692098, 9.904723265208304e-05, 0.0016047862591221929, 9.210565622197464e-05, 3.614853631006554e-05, 5.49610958842095e-05, 6.597369792871177e-05, 0.01255352795124054, 4.0122453356161714e-05, 0.00040541047928854823, 0.00012287449499126524, 2.6606794563122094e-05, 1.3705645869777072e-05], "target_probs": 0.8078158497810364}}


{"result": {"time": "2021-02-21 12:42:39.771411", "n_pass": [203, 32, 16], "n_token": 90, "loss": [0.38278207182884216, 0.20041510462760925], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["contextmanager", "#NEWLINE#", "def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 62, "repair_targets": [9], "repair_candidates": [35, 42, 58, 66, 79, 3, 21, 81, 5, 25, 74, 77, 85, 38, 52, 54, 62, 28, 87, 7, 70, 9]}}
{"prediction": {"error_location": 0.6819615364074707, "repair_targets": [0.818390965461731], "repair_candidates": [0.0008976084063760936, 0.006682978477329016, 0.10538262873888016, 0.818390965461731, 3.761574043892324e-05, 0.0004246284661348909, 0.05865280702710152, 0.0027069533243775368, 0.0011477965163066983, 0.00016693421639502048, 5.203413456911221e-05, 0.0009795682271942496, 6.770271284040064e-05, 2.6657076887204312e-05, 3.4940294426633045e-05, 4.38944625784643e-05, 0.003934599459171295, 2.0726307411678135e-05, 0.00024841452250257134, 7.099177310010418e-05, 2.016792495851405e-05, 9.384234544995707e-06], "target_probs": 0.818390965461731}}


{"result": {"time": "2021-02-21 12:42:39.868802", "n_pass": [204, 33, 17], "n_token": 88, "loss": [0.1533774584531784, 0.3279375433921814], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", ")", ":", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 60, "repair_targets": [7], "repair_candidates": [33, 40, 56, 64, 77, 1, 19, 79, 3, 23, 72, 75, 83, 36, 50, 52, 60, 26, 85, 5, 68, 7]}}
{"prediction": {"error_location": 0.8578058481216431, "repair_targets": [0.720408022403717], "repair_candidates": [0.0027889288030564785, 0.018972493708133698, 0.05485457181930542, 0.720408022403717, 3.1380881409859285e-05, 0.0006085747736506164, 0.11237281560897827, 0.0027782015968114138, 0.0013166769640520215, 0.0001267583720618859, 4.06929939344991e-05, 0.0005084609147161245, 5.568335473071784e-05, 1.838386924646329e-05, 2.482926720404066e-05, 4.941417864756659e-05, 0.08463228493928909, 3.74726987502072e-05, 0.00029992673080414534, 4.620082472683862e-05, 1.8250791981699876e-05, 9.958543159882538e-06], "target_probs": 0.720408022403717}}


{"result": {"time": "2021-02-21 12:42:40.159424", "n_pass": [211, 36, 18], "n_token": 86, "loss": [0.18867944180965424, 0.39982762932777405], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "create", "=", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 58, "repair_targets": [7], "repair_candidates": [31, 38, 54, 62, 75, 1, 17, 77, 3, 21, 70, 73, 81, 34, 48, 50, 58, 24, 83, 5, 66, 7]}}
{"prediction": {"error_location": 0.8280519247055054, "repair_targets": [0.6704356074333191], "repair_candidates": [0.004194646142423153, 0.03170066326856613, 0.103285051882267, 0.6704356074333191, 2.356756158405915e-05, 0.0010710698552429676, 0.11956477165222168, 0.0031399389263242483, 0.0014938245294615626, 0.00012130042887292802, 4.5862485421821475e-05, 0.0005927802994847298, 4.426881787367165e-05, 2.3718946977169253e-05, 2.206463432230521e-05, 6.485911580966786e-05, 0.06371959298849106, 5.162923480384052e-05, 0.0003201581712346524, 4.4324577174847946e-05, 2.771288745861966e-05, 1.2628177501028404e-05], "target_probs": 0.6704356074333191}}


{"result": {"time": "2021-02-21 12:42:40.637019", "n_pass": [219, 41, 19], "n_token": 84, "loss": [0.2546740770339966, 0.31412774324417114], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "True", ")", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 56, "repair_targets": [7], "repair_candidates": [29, 36, 52, 60, 73, 1, 17, 75, 3, 21, 68, 71, 79, 32, 46, 48, 56, 24, 81, 5, 64, 7]}}
{"prediction": {"error_location": 0.7751691341400146, "repair_targets": [0.7304257154464722], "repair_candidates": [0.003971624653786421, 0.03171805664896965, 0.11348960548639297, 0.7304257154464722, 2.1487729100044817e-05, 0.0011553828371688724, 0.04255063831806183, 0.004773357417434454, 0.0014162452425807714, 9.422969742445275e-05, 5.1410781452432275e-05, 0.000658454722724855, 4.452916982700117e-05, 3.05510257021524e-05, 2.281213710375596e-05, 6.772091001039371e-05, 0.06905997544527054, 5.113934093969874e-05, 0.0003128487733192742, 4.262656148057431e-05, 2.8697706511593424e-05, 1.3007164852751885e-05], "target_probs": 0.7304257154464722}}


{"result": {"time": "2021-02-21 12:42:40.731328", "n_pass": [220, 42, 20], "n_token": 82, "loss": [0.19966000318527222, 0.2081202119588852], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", ")", "as", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 54, "repair_targets": [7], "repair_candidates": [27, 34, 50, 58, 71, 1, 17, 73, 3, 21, 66, 69, 77, 30, 44, 46, 54, 24, 79, 5, 62, 7]}}
{"prediction": {"error_location": 0.8190090656280518, "repair_targets": [0.8121094107627869], "repair_candidates": [0.0026926472783088684, 0.02222198061645031, 0.1033191904425621, 0.8121094107627869, 1.2946337847097311e-05, 0.0005295344744808972, 0.02695770561695099, 0.0010290544014424086, 0.0007779994048178196, 5.693700222764164e-05, 2.5168241336359642e-05, 0.00035260056029073894, 2.5264387659262866e-05, 1.4430210285354406e-05, 1.5192578757705633e-05, 4.238217297825031e-05, 0.02954253926873207, 3.127337549813092e-05, 0.00018987510702572763, 2.75721940852236e-05, 1.8226746760774404e-05, 8.14788381831022e-06], "target_probs": 0.8121094107627869}}


{"result": {"time": "2021-02-21 12:42:40.825306", "n_pass": [222, 43, 21], "n_token": 80, "loss": [0.12623260915279388, 0.32653024792671204], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "#NEWLINE#", "#INDENT#", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 52, "repair_targets": [7], "repair_candidates": [27, 32, 48, 56, 69, 1, 17, 71, 3, 21, 64, 67, 75, 28, 42, 44, 52, 24, 77, 5, 60, 7]}}
{"prediction": {"error_location": 0.8814095854759216, "repair_targets": [0.721422553062439], "repair_candidates": [0.003195561468601227, 0.023661239072680473, 0.1042572483420372, 0.721422553062439, 1.6640160538372584e-05, 0.001868647988885641, 0.07962217926979065, 0.001908420817926526, 0.00027214764850214124, 4.63186479464639e-05, 2.7440926714916714e-05, 0.0002640769525896758, 2.9132455892977305e-05, 1.3246275557321496e-05, 1.6431231415481307e-05, 3.9021659176796675e-05, 0.06304627656936646, 3.18901875289157e-05, 0.00020857102936133742, 3.0645664082840085e-05, 1.442481607227819e-05, 7.896357601566706e-06], "target_probs": 0.721422553062439}}


{"result": {"time": "2021-02-21 12:42:40.920092", "n_pass": [224, 44, 22], "n_token": 78, "loss": [0.2502252161502838, 0.3297290802001953], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "return_value", "=", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 50, "repair_targets": [7], "repair_candidates": [27, 30, 46, 54, 67, 1, 17, 69, 3, 21, 62, 65, 73, 28, 40, 42, 50, 24, 75, 5, 58, 7]}}
{"prediction": {"error_location": 0.7786254286766052, "repair_targets": [0.7191185355186462], "repair_candidates": [0.0035285516642034054, 0.026217110455036163, 0.11087290942668915, 0.7191185355186462, 1.892521686386317e-05, 0.0018745179986581206, 0.03295270726084709, 0.0010351113742217422, 0.0001619433460291475, 4.1611838241806254e-05, 3.569838372641243e-05, 0.0004340273153502494, 3.8039714127080515e-05, 1.952997081389185e-05, 2.0265453713363968e-05, 5.5152864661067724e-05, 0.10320542007684708, 4.26075748691801e-05, 0.0002624687331262976, 3.584616933949292e-05, 1.8743909095064737e-05, 1.0243747965432703e-05], "target_probs": 0.7191185355186462}}


{"result": {"time": "2021-02-21 12:42:41.011832", "n_pass": [226, 45, 23], "n_token": 76, "loss": [0.4975006878376007, 0.3717137575149536], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "'description'", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 48, "repair_targets": [7], "repair_candidates": [27, 30, 44, 52, 65, 1, 17, 67, 3, 21, 60, 63, 71, 28, 38, 40, 48, 24, 73, 5, 56, 7]}}
{"prediction": {"error_location": 0.6080483794212341, "repair_targets": [0.689551591873169], "repair_candidates": [0.004463447257876396, 0.02932010404765606, 0.10663054138422012, 0.689551591873169, 3.2870051654754207e-05, 0.0032637014519423246, 0.04554865136742592, 0.0012269775616005063, 0.00047324097249656916, 0.00042087348992936313, 6.744940765202045e-05, 0.0007903605583123863, 5.301282726577483e-05, 2.26687770918943e-05, 2.3531660190201364e-05, 6.454254616983235e-05, 0.11765265464782715, 4.480920688365586e-05, 0.0002790572470985353, 3.888086212100461e-05, 1.9854707716149278e-05, 1.1178343811479863e-05], "target_probs": 0.689551591873169}}


{"result": {"time": "2021-02-21 12:42:41.102381", "n_pass": [227, 46, 24], "n_token": 74, "loss": [0.4008966088294983, 0.46836143732070923], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 46, "repair_targets": [7], "repair_candidates": [27, 30, 42, 50, 63, 1, 17, 65, 3, 21, 58, 61, 69, 28, 36, 38, 46, 24, 71, 5, 54, 7]}}
{"prediction": {"error_location": 0.6697192788124084, "repair_targets": [0.6260272264480591], "repair_candidates": [0.004273674450814724, 0.0296633280813694, 0.11304666101932526, 0.6260272264480591, 2.7253208827460185e-05, 0.003954768646508455, 0.03512691706418991, 0.0008554920786991715, 0.00017852844030130655, 7.347399514401332e-05, 5.487409725901671e-05, 0.0005516717792488635, 6.129686516942456e-05, 1.9839311789837666e-05, 2.2716812964063138e-05, 6.168965774122626e-05, 0.1855783462524414, 4.936316690873355e-05, 0.000301838357700035, 3.944604395655915e-05, 1.9725513993762434e-05, 1.1842268577311188e-05], "target_probs": 0.6260272264480591}}


{"result": {"time": "2021-02-21 12:42:41.191686", "n_pass": [228, 47, 25], "n_token": 72, "loss": [0.3859718143939972, 0.39905837178230286], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "#UNINDENT#", "if", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 44, "repair_targets": [7], "repair_candidates": [27, 30, 40, 48, 61, 1, 17, 63, 3, 21, 56, 59, 67, 28, 34, 36, 44, 24, 69, 5, 52, 7]}}
{"prediction": {"error_location": 0.679789662361145, "repair_targets": [0.6709515452384949], "repair_candidates": [0.004964896943420172, 0.030298713594675064, 0.10109135508537292, 0.6709515452384949, 3.677793938550167e-05, 0.00480753555893898, 0.05833195149898529, 0.0009544345084577799, 0.00035314264823682606, 0.0001308523933403194, 2.0380326532176696e-05, 0.00020551428315229714, 3.7973128200974315e-05, 1.600028554094024e-05, 2.2745658498024568e-05, 4.639529652195051e-05, 0.12736615538597107, 4.012628414784558e-05, 0.00026565551524981856, 3.654153260868043e-05, 1.2929368494951632e-05, 8.37656989460811e-06], "target_probs": 0.6709515452384949}}


{"result": {"time": "2021-02-21 12:42:41.280093", "n_pass": [229, 48, 26], "n_token": 70, "loss": [0.2019323855638504, 0.31071507930755615], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "assert_called_once_with", "(", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 42, "repair_targets": [7], "repair_candidates": [27, 30, 38, 46, 59, 1, 17, 61, 3, 21, 54, 57, 65, 28, 32, 34, 42, 24, 67, 5, 50, 7]}}
{"prediction": {"error_location": 0.8171499967575073, "repair_targets": [0.7329226732254028], "repair_candidates": [0.0034785964526236057, 0.024771541357040405, 0.09042976051568985, 0.7329226732254028, 2.0193658201606013e-05, 0.0024961966555565596, 0.046564411371946335, 0.000575442158151418, 0.00013805745402351022, 2.3312442863243632e-05, 0.00023384731321129948, 0.0001386178919347003, 2.1392577764345333e-05, 9.037564268510323e-06, 1.5880339560681023e-05, 2.8846961868111975e-05, 0.09785804897546768, 3.231341179343872e-05, 0.00020004692487418652, 2.610969568195287e-05, 9.385121302329935e-06, 6.231909537746105e-06], "target_probs": 0.7329226732254028}}


{"result": {"time": "2021-02-21 12:42:41.370155", "n_pass": [232, 49, 27], "n_token": 68, "loss": [0.1024746373295784, 0.3246685564517975], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", ".", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 40, "repair_targets": [7], "repair_candidates": [27, 30, 36, 44, 57, 1, 17, 59, 3, 21, 52, 55, 63, 28, 32, 34, 40, 24, 65, 5, 48, 7]}}
{"prediction": {"error_location": 0.9026008248329163, "repair_targets": [0.7227668762207031], "repair_candidates": [0.003237963654100895, 0.023348387330770493, 0.084067203104496, 0.7227668762207031, 1.8975211787619628e-05, 0.0021909826900810003, 0.0504574254155159, 0.0006018339772708714, 0.00012376839003991336, 1.6130643416545354e-05, 0.00017291113908868283, 0.000203428091481328, 0.0005539856501854956, 1.5538289517280646e-05, 1.984411574085243e-05, 3.204891618224792e-05, 0.11186523735523224, 3.713203841471113e-05, 0.00022220001847017556, 2.8615422706934623e-05, 1.1846107554447372e-05, 7.59733757149661e-06], "target_probs": 0.7227668762207031}}


{"result": {"time": "2021-02-21 12:42:42.149031", "n_pass": [324, 58, 28], "n_token": 67, "loss": [0.06676110625267029, 0.3258141875267029], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "assert_called_once_with", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 39, "repair_targets": [7], "repair_candidates": [27, 30, 36, 43, 56, 1, 17, 58, 3, 21, 51, 54, 62, 28, 32, 34, 39, 24, 64, 5, 47, 7]}}
{"prediction": {"error_location": 0.9354186654090881, "repair_targets": [0.7219393253326416], "repair_candidates": [0.0038252349477261305, 0.024818789213895798, 0.08514660596847534, 0.7219393253326416, 2.675930409168359e-05, 0.002750162733718753, 0.07734217494726181, 0.0005778667982667685, 0.00014895451022312045, 1.3067775398667436e-05, 0.00019594009791035205, 0.00020105687144678086, 0.0014819244388490915, 1.3864339052815922e-05, 2.0280591343180276e-05, 3.3901986171258613e-05, 0.08117441833019257, 3.367089811945334e-05, 0.00020883430261164904, 2.7855676307808608e-05, 1.1826090485556051e-05, 7.429132892866619e-06], "target_probs": 0.7219393253326416}}


{"result": {"time": "2021-02-21 12:42:42.235208", "n_pass": [325, 59, 29], "n_token": 66, "loss": [0.022778525948524475, 0.5082164406776428], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "(", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 38, "repair_targets": [7], "repair_candidates": [27, 30, 36, 42, 55, 1, 17, 57, 3, 21, 50, 53, 61, 28, 32, 34, 38, 24, 63, 5, 46, 7]}}
{"prediction": {"error_location": 0.9774789214134216, "repair_targets": [0.6015675663948059], "repair_candidates": [0.002702481811866164, 0.019529031589627266, 0.0554216131567955, 0.6015675663948059, 1.7289061361225322e-05, 0.002024927409365773, 0.234130859375, 0.0007072501466609538, 0.00018646082025952637, 9.243653948942665e-06, 0.00013127856072969735, 0.00010245740850223228, 0.003492936259135604, 1.042539042828139e-05, 1.6449437680421397e-05, 2.052821400866378e-05, 0.07968377321958542, 3.003610618179664e-05, 0.00017663961625657976, 2.537953514547553e-05, 8.023385817068629e-06, 5.386019438446965e-06], "target_probs": 0.6015675663948059}}


{"result": {"time": "2021-02-21 12:42:42.320734", "n_pass": [326, 60, 30], "n_token": 65, "loss": [0.4485364556312561, 0.642181396484375], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", ".", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 41, 54, 1, 17, 56, 3, 21, 49, 52, 60, 28, 32, 34, 37, 24, 62, 5, 45, 7]}}
{"prediction": {"error_location": 0.6385619640350342, "repair_targets": [0.5261434316635132], "repair_candidates": [0.0023084182757884264, 0.020440736785531044, 0.054816603660583496, 0.5261434316635132, 1.966826675925404e-05, 0.0028178866486996412, 0.21397289633750916, 0.00017782929353415966, 6.315622886177152e-05, 3.6504663967207307e-06, 7.169846503529698e-05, 0.0002442500554025173, 0.00813609641045332, 1.2890095604234375e-05, 1.627249366720207e-05, 3.319709139759652e-05, 0.17041052877902985, 4.078325946466066e-05, 0.00022414202976506203, 2.4520802980987355e-05, 1.2924450857099146e-05, 8.40465600049356e-06], "target_probs": 0.5261434316635132}}


{"result": {"time": "2021-02-21 12:42:42.406221", "n_pass": [328, 61, 31], "n_token": 64, "loss": [1.3120057582855225, 0.4646608531475067], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "#UNINDENT#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 40, 53, 1, 17, 55, 3, 21, 48, 51, 59, 28, 32, 34, 37, 24, 61, 5, 44, 7]}}
{"prediction": {"error_location": 0.2692793905735016, "repair_targets": [0.628348171710968], "repair_candidates": [0.005445108283311129, 0.02886885590851307, 0.0740545243024826, 0.628348171710968, 6.0460162785602733e-05, 0.004455931950360537, 0.14739583432674408, 0.0003312493208795786, 9.094539564102888e-05, 4.1252919800172094e-06, 8.918388630263507e-05, 0.00056774343829602, 0.016595281660556793, 2.217649671365507e-05, 1.4137851394480094e-05, 3.210273644072004e-05, 0.093240886926651, 4.490168430493213e-05, 0.0002742128272075206, 3.462164386291988e-05, 1.8105867638951167e-05, 1.1405655641283374e-05], "target_probs": 0.628348171710968}}


{"result": {"time": "2021-02-21 12:42:42.573963", "n_pass": [330, 63, 32], "n_token": 63, "loss": [0.8833276033401489, 0.5000622868537903], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "assert_called_once_with", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 39, 52, 1, 17, 54, 3, 21, 47, 50, 58, 28, 32, 34, 37, 24, 60, 5, 43, 7]}}
{"prediction": {"error_location": 0.4134049713611603, "repair_targets": [0.6064928770065308], "repair_candidates": [0.006049427203834057, 0.027124900370836258, 0.06567063927650452, 0.6064928770065308, 8.444491686532274e-05, 0.004230434074997902, 0.1916145235300064, 0.0003523360355757177, 9.119577589444816e-05, 3.46703882314614e-06, 6.914992991369218e-05, 0.0007897844188846648, 0.02843491919338703, 1.586064900038764e-05, 6.672155905107502e-06, 2.436786780890543e-05, 0.06853817403316498, 4.871731289313175e-05, 0.00029530105530284345, 2.8773767553502694e-05, 2.0985731680411845e-05, 1.303032422583783e-05], "target_probs": 0.6064928770065308}}


{"result": {"time": "2021-02-21 12:42:42.744846", "n_pass": [333, 65, 33], "n_token": 62, "loss": [1.2151713371276855, 0.48318377137184143], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "(", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 39, 51, 1, 17, 53, 3, 21, 46, 49, 57, 28, 32, 34, 37, 24, 59, 5, 42, 7]}}
{"prediction": {"error_location": 0.2966592013835907, "repair_targets": [0.6168164610862732], "repair_candidates": [0.0027595264837145805, 0.021545713767409325, 0.061236634850502014, 0.6168164610862732, 2.665279680513777e-05, 0.0023446432314813137, 0.22063177824020386, 0.0002092592476401478, 9.353009954793379e-05, 3.853481757687405e-06, 6.491015665233135e-05, 0.0005121149588376284, 0.018202515318989754, 2.3316410079132766e-05, 8.956588317232672e-06, 3.173530785716139e-05, 0.05523433908820152, 3.387819742783904e-05, 0.0001803302438929677, 1.996942955884151e-05, 1.2232727385708131e-05, 7.64247033657739e-06], "target_probs": 0.6168164610862732}}


{"result": {"time": "2021-02-21 12:42:42.828228", "n_pass": [334, 66, 34], "n_token": 61, "loss": [1.0123324394226074, 0.5172048211097717], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "error_code", ")", "#NEWLINE#", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 39, 50, 1, 17, 52, 3, 21, 45, 48, 56, 28, 32, 34, 37, 24, 58, 5, 41, 7]}}
{"prediction": {"error_location": 0.36337047815322876, "repair_targets": [0.5961846709251404], "repair_candidates": [0.004243288189172745, 0.019422294571995735, 0.06856738030910492, 0.5961846709251404, 5.195944686420262e-05, 0.0036928944755345583, 0.22766730189323425, 0.00027619636966846883, 0.00010448547982377931, 5.327444796421332e-06, 0.00012138364400016144, 0.001316529349423945, 0.01518929097801447, 2.101522659359034e-05, 1.5201147107291035e-05, 0.0009879160206764936, 0.06188364326953888, 2.8598566132131964e-05, 0.0001754840777721256, 2.3630873329238966e-05, 1.3745356227445882e-05, 7.822946827218402e-06], "target_probs": 0.5961846709251404}}


{"result": {"time": "2021-02-21 12:42:42.993360", "n_pass": [337, 68, 35], "n_token": 60, "loss": [1.3238664865493774, 0.5527392625808716], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", ",", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "error_code", ")", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 37, "repair_targets": [7], "repair_candidates": [27, 30, 36, 39, 49, 1, 17, 51, 3, 21, 44, 47, 55, 28, 32, 34, 37, 24, 57, 5, 41, 7]}}
{"prediction": {"error_location": 0.26610442996025085, "repair_targets": [0.5753715634346008], "repair_candidates": [0.005106864031404257, 0.017072495073080063, 0.08368685841560364, 0.5753715634346008, 5.9330748626962304e-05, 0.0029267200734466314, 0.3016517460346222, 0.0001682089059613645, 7.974837353685871e-05, 4.690188688982744e-06, 8.911748591344804e-05, 0.0008743202779442072, 0.009958598762750626, 1.2513994988694321e-05, 5.620878255285788e-06, 0.00043736782390624285, 0.0022395942360162735, 2.6348003302700818e-05, 0.00017140846466645598, 3.621175710577518e-05, 1.2548962331493385e-05, 8.087488822638988e-06], "target_probs": 0.5753715634346008}}


{"result": {"time": "2021-02-21 12:42:43.429121", "n_pass": [349, 73, 36], "n_token": 59, "loss": [1.117639183998108, 0.6261646747589111], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", ":", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "error_code", ")", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 36, "repair_targets": [6], "repair_candidates": [26, 29, 35, 38, 48, 1, 16, 50, 2, 20, 43, 46, 54, 27, 31, 33, 36, 23, 56, 4, 40, 6]}}
{"prediction": {"error_location": 0.32705095410346985, "repair_targets": [0.5346384048461914], "repair_candidates": [0.009563586674630642, 0.07340362668037415, 0.08426401019096375, 0.5346384048461914, 4.863626236328855e-05, 0.005213447846472263, 0.2704368829727173, 0.0003873645910061896, 0.00011389030260033906, 6.8295744313218165e-06, 0.0001585249265190214, 0.001444311928935349, 0.015317382290959358, 2.0951198166585527e-05, 9.981050425267313e-06, 0.00043468709918670356, 0.004159166011959314, 3.467322312644683e-05, 0.000277659302810207, 4.1920760850189254e-05, 1.4208773791324347e-05, 9.782484085008036e-06], "target_probs": 0.5346384048461914}}


{"result": {"time": "2021-02-21 12:42:44.981714", "n_pass": [376, 92, 37], "n_token": 58, "loss": [0.9226958751678467, 0.6356410980224609], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", ".", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "error_code", ")", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 35, "repair_targets": [6], "repair_candidates": [26, 28, 34, 37, 47, 1, 16, 49, 2, 20, 42, 45, 53, 27, 30, 32, 35, 23, 55, 4, 39, 6]}}
{"prediction": {"error_location": 0.3974460959434509, "repair_targets": [0.5295958518981934], "repair_candidates": [0.009440957568585873, 0.06782729178667068, 0.0797470435500145, 0.5295958518981934, 6.318117084447294e-05, 0.004359561484307051, 0.28833335638046265, 6.997989112278447e-05, 9.200287604471669e-05, 1.4048585398995783e-05, 7.924249803181738e-05, 0.0011261211475357413, 0.012583846226334572, 2.450534884701483e-05, 9.42290080274688e-06, 0.0004461909120436758, 0.005692923441529274, 4.063817686983384e-05, 0.000371921545593068, 5.6554872571723536e-05, 1.4574026863556355e-05, 1.0686916539270896e-05], "target_probs": 0.5295958518981934}}


{"result": {"time": "2021-02-21 12:42:45.143530", "n_pass": [380, 94, 38], "n_token": 57, "loss": [0.6221414804458618, 0.6130273342132568], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", ".", "error_code", ")", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 34, "repair_targets": [6], "repair_candidates": [26, 28, 33, 36, 46, 1, 16, 48, 2, 20, 41, 44, 52, 27, 30, 31, 34, 23, 54, 4, 38, 6]}}
{"prediction": {"error_location": 0.5367936491966248, "repair_targets": [0.5417084693908691], "repair_candidates": [0.00883854366838932, 0.07090934365987778, 0.07697699218988419, 0.5417084693908691, 5.2689265430672094e-05, 0.0046930876560509205, 0.2861059010028839, 6.466869672294706e-05, 9.975455031963065e-05, 3.115306026302278e-05, 0.0008639127481728792, 2.2235166397877038e-05, 0.0015753100160509348, 7.948876373120584e-06, 5.968292498437222e-06, 0.0005363235250115395, 0.007073893677443266, 4.063628875883296e-05, 0.0003234750183764845, 5.09740348206833e-05, 1.0829177881532814e-05, 7.838262717996258e-06], "target_probs": 0.5417084693908691}}


{"result": {"time": "2021-02-21 12:42:45.387107", "n_pass": [387, 97, 39], "n_token": 56, "loss": [0.7562041878700256, 0.5369470715522766], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", ")", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 34, "repair_targets": [6], "repair_candidates": [26, 28, 33, 36, 45, 1, 16, 47, 2, 20, 40, 43, 51, 27, 30, 31, 34, 23, 53, 4, 37, 6]}}
{"prediction": {"error_location": 0.46944496035575867, "repair_targets": [0.5845300555229187], "repair_candidates": [0.010794449597597122, 0.11271972209215164, 0.11471281945705414, 0.5845300555229187, 3.3159849408548325e-05, 0.004581950604915619, 0.16613978147506714, 6.220740760909393e-05, 8.814538159640506e-05, 2.9354025173233822e-05, 0.0005417586653493345, 1.2399525076034479e-05, 0.0024927640333771706, 1.9349867216078565e-05, 0.00015707651618868113, 2.09947884286521e-05, 0.002774455351755023, 3.826646934612654e-05, 0.0001935002364916727, 3.526479486026801e-05, 1.3844982277078088e-05, 8.734086804906838e-06], "target_probs": 0.5845300555229187}}


{"result": {"time": "2021-02-21 12:42:45.467372", "n_pass": [389, 98, 40], "n_token": 55, "loss": [1.009704351425171, 0.625374972820282], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "#UNINDENT#", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 34, "repair_targets": [6], "repair_candidates": [26, 28, 33, 36, 44, 1, 16, 46, 2, 20, 39, 42, 50, 27, 30, 31, 34, 23, 52, 4, 37, 6]}}
{"prediction": {"error_location": 0.3643266260623932, "repair_targets": [0.5350607633590698], "repair_candidates": [0.009652440436184406, 0.08737931400537491, 0.09443402290344238, 0.5350607633590698, 3.687282878672704e-05, 0.003319529816508293, 0.26243850588798523, 5.830488589708693e-05, 9.17435172596015e-05, 3.161718268529512e-05, 0.00064398831455037, 1.4091507182456553e-05, 0.0032051317393779755, 9.232222510036081e-06, 5.202510874369182e-05, 8.784205419942737e-06, 0.0032926416024565697, 2.469445826136507e-05, 0.0001892791478894651, 3.821179780061357e-05, 1.0309743629477452e-05, 8.340538443007972e-06], "target_probs": 0.5350607633590698}}


{"result": {"time": "2021-02-21 12:42:45.547198", "n_pass": [390, 99, 41], "n_token": 54, "loss": [0.8267907500267029, 0.5904473662376404], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", ",", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 34, "repair_targets": [6], "repair_candidates": [26, 28, 33, 36, 43, 1, 16, 45, 2, 20, 38, 41, 49, 27, 30, 31, 34, 23, 51, 4, 37, 6]}}
{"prediction": {"error_location": 0.43745097517967224, "repair_targets": [0.5540793538093567], "repair_candidates": [0.009842016734182835, 0.0883442834019661, 0.11845897883176804, 0.5540793538093567, 3.499516606098041e-05, 0.002933688461780548, 0.22321739792823792, 3.9945462049217895e-05, 5.5844786402303725e-05, 1.94129315786995e-05, 0.0003686431155074388, 8.41194560052827e-06, 0.002016699407249689, 8.224711564253084e-06, 9.001549187814817e-05, 8.637260179966688e-05, 0.0002800597285386175, 8.40116263134405e-06, 7.108306454028934e-05, 2.285572736582253e-05, 7.0231835707090795e-06, 6.3455477175011765e-06], "target_probs": 0.5540793538093567}}


{"result": {"time": "2021-02-21 12:42:47.124649", "n_pass": [423, 119, 42], "n_token": 53, "loss": [0.8201764822006226, 0.40029776096343994], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "as", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 33, "repair_targets": [6], "repair_candidates": [25, 27, 32, 35, 42, 1, 16, 44, 2, 20, 37, 40, 48, 26, 29, 30, 33, 23, 50, 4, 36, 6]}}
{"prediction": {"error_location": 0.4403538703918457, "repair_targets": [0.6701204776763916], "repair_candidates": [0.015936914831399918, 0.12800724804401398, 0.16059516370296478, 0.6701204776763916, 8.879329834599048e-05, 0.013173980638384819, 0.004352795425802469, 9.328719897894189e-05, 0.00010477674368303269, 2.9833614462404512e-05, 0.0008717155433259904, 2.998236050189007e-05, 0.0035453324671834707, 3.9407685108017176e-05, 0.000313394091790542, 0.0005358739872463048, 0.0017291806871071458, 3.361402195878327e-05, 0.0003054848639294505, 5.699394387193024e-05, 2.1682819351553917e-05, 1.4046527212485671e-05], "target_probs": 0.6701204776763916}}


{"result": {"time": "2021-02-21 12:42:47.203072", "n_pass": [424, 120, 43], "n_token": 52, "loss": [0.518246591091156, 0.49488168954849243], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", ".", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 32, "repair_targets": [6], "repair_candidates": [24, 26, 31, 34, 41, 1, 16, 43, 2, 20, 36, 39, 47, 25, 28, 29, 32, 23, 49, 4, 35, 6]}}
{"prediction": {"error_location": 0.5955638885498047, "repair_targets": [0.6096430420875549], "repair_candidates": [0.01758469268679619, 0.12543156743049622, 0.140966534614563, 0.6096430420875549, 0.0002797947672661394, 0.08858988434076309, 5.0336646381765604e-05, 0.0005300416960380971, 0.000166566765983589, 3.373553045094013e-05, 0.000764074211474508, 3.7260615499690175e-05, 0.0026635362301021814, 3.295077840448357e-05, 0.0006470797816291451, 0.0012194964801892638, 0.010598398745059967, 7.798091974109411e-05, 0.0005352445296011865, 9.160592162515968e-05, 3.644491880550049e-05, 1.9739771232707426e-05], "target_probs": 0.6096430420875549}}


{"result": {"time": "2021-02-21 12:42:47.282140", "n_pass": [428, 121, 44], "n_token": 51, "loss": [0.30148735642433167, 0.29816004633903503], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", ".", "assertEqual", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 31, "repair_targets": [6], "repair_candidates": [24, 26, 30, 33, 40, 1, 16, 42, 2, 20, 35, 38, 46, 25, 27, 28, 31, 23, 48, 4, 34, 6]}}
{"prediction": {"error_location": 0.7397171854972839, "repair_targets": [0.7421825528144836], "repair_candidates": [0.016298016533255577, 0.07832560688257217, 0.06260613352060318, 0.7421825528144836, 0.0008055315702222288, 0.07613619416952133, 3.590445703594014e-05, 0.0003754186036530882, 0.00011123068543383852, 0.00013266551832202822, 5.831136877532117e-05, 9.211744327330962e-06, 0.0008893105550669134, 1.341456936643226e-05, 0.000747595215216279, 0.0015206586103886366, 0.018961044028401375, 7.490913412766531e-05, 0.0006035158294253051, 8.247332880273461e-05, 1.791042450349778e-05, 1.234332285093842e-05], "target_probs": 0.7421825528144836}}


{"result": {"time": "2021-02-21 12:42:47.517423", "n_pass": [441, 124, 45], "n_token": 49, "loss": [0.2619500160217285, 0.3632705509662628], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm", ".", "exception"]}}
{"position": {"error_location": 31, "repair_targets": [6], "repair_candidates": [24, 26, 30, 33, 40, 1, 16, 42, 2, 20, 35, 38, 44, 25, 27, 28, 31, 23, 46, 4, 34, 6]}}
{"prediction": {"error_location": 0.7695494294166565, "repair_targets": [0.6953982710838318], "repair_candidates": [0.02036299742758274, 0.08324823528528214, 0.060721684247255325, 0.6953982710838318, 0.0010879216715693474, 0.08858802914619446, 5.22702575835865e-05, 0.0005981404101476073, 0.00016602395044174045, 0.00021693499002140015, 8.797609916655347e-05, 1.4879502487019636e-05, 0.0012900256551802158, 2.272209349030163e-05, 0.0012882896699011326, 0.0028736842796206474, 0.04113689810037613, 0.0002562801819294691, 0.00018677828484214842, 0.002277120715007186, 0.00011239250306971371, 1.2464865903893951e-05], "target_probs": 0.6953982710838318}}


{"result": {"time": "2021-02-21 12:42:47.594033", "n_pass": [444, 125, 46], "n_token": 47, "loss": [0.2332834154367447, 0.48652464151382446], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", ",", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 31, "repair_targets": [6], "repair_candidates": [24, 26, 30, 33, 40, 1, 16, 42, 2, 20, 35, 38, 44, 25, 27, 28, 31, 23, 46, 4, 34, 6]}}
{"prediction": {"error_location": 0.7919290065765381, "repair_targets": [0.6147592067718506], "repair_candidates": [0.025264130905270576, 0.12874716520309448, 0.08704874664545059, 0.6147592067718506, 0.001246828120201826, 0.10183905065059662, 7.754714897600934e-05, 0.000979964854195714, 0.0003031305386684835, 0.00038714031688869, 0.00011705663200700656, 2.758370465016924e-05, 0.002059328369796276, 4.925822213408537e-05, 0.0018915346590802073, 0.00413925526663661, 0.02858790010213852, 0.00043946251389570534, 0.00015164617798291147, 0.0016723981825634837, 0.00019622486433945596, 1.533270005893428e-05], "target_probs": 0.6147592067718506}}


{"result": {"time": "2021-02-21 12:42:47.744747", "n_pass": [448, 127, 47], "n_token": 46, "loss": [0.5336780548095703, 0.28901317715644836], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", ",", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 30, "repair_targets": [5], "repair_candidates": [23, 25, 29, 32, 39, 1, 15, 41, 2, 19, 34, 37, 43, 24, 26, 27, 30, 22, 45, 3, 33, 5]}}
{"prediction": {"error_location": 0.5864440202713013, "repair_targets": [0.7490023374557495], "repair_candidates": [0.00980085227638483, 0.04459936171770096, 0.1887688785791397, 0.7490023374557495, 0.000280795618891716, 0.004639856051653624, 1.3338070857571438e-05, 0.00013295418466441333, 7.026676030363888e-05, 0.00011010417802026495, 4.464063385967165e-05, 3.7814020288351458e-06, 0.0013790265657007694, 4.6042139729252085e-05, 0.0001880563359009102, 0.00028512097196653485, 0.00016920252528507262, 4.21842050855048e-05, 2.0246630811016075e-05, 0.0002906637964770198, 0.00010465642844792455, 7.621083568665199e-06], "target_probs": 0.7490023374557495}}


{"result": {"time": "2021-02-21 12:42:47.819759", "n_pass": [450, 128, 48], "n_token": 45, "loss": [0.07981427758932114, 0.14869779348373413], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "=", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 29, "repair_targets": [4], "repair_candidates": [22, 24, 28, 31, 38, 1, 14, 40, 2, 18, 33, 36, 42, 23, 25, 26, 29, 21, 44, 3, 32, 4]}}
{"prediction": {"error_location": 0.9232879281044006, "repair_targets": [0.8618295192718506], "repair_candidates": [0.005341734271496534, 0.033905211836099625, 0.09756376594305038, 0.8618295192718506, 9.654139284975827e-05, 0.0007641486008651555, 3.1104882509680465e-06, 2.2525127860717475e-05, 1.3829318049829453e-05, 1.5312916730181314e-05, 4.73488853458548e-06, 3.9093316672733636e-07, 0.0002801898226607591, 7.235199518618174e-06, 1.7103786376537755e-05, 3.3464733860455453e-05, 2.263003079860937e-05, 1.2345977665972896e-05, 3.7235872696328443e-06, 4.4784734200220555e-05, 1.5891540897428058e-05, 1.8526145595387788e-06], "target_probs": 0.8618295192718506}}


{"result": {"time": "2021-02-21 12:42:47.896882", "n_pass": [452, 129, 49], "n_token": 44, "loss": [0.3488282561302185, 0.6066306829452515], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "exception", ".", "WindowsCloudbaseInitException", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 28, "repair_targets": [4], "repair_candidates": [21, 23, 27, 30, 37, 1, 13, 39, 2, 17, 32, 35, 41, 22, 24, 25, 28, 20, 43, 3, 31, 4]}}
{"prediction": {"error_location": 0.7055142521858215, "repair_targets": [0.5451846718788147], "repair_candidates": [0.020953062921762466, 0.14879292249679565, 0.27392348647117615, 0.5451846718788147, 0.00037091076956130564, 0.006205441430211067, 2.15299914998468e-05, 0.0002597328566480428, 0.00014168091001920402, 0.00013798268628306687, 6.351353658828884e-05, 3.481252178971772e-06, 0.0010202373377978802, 0.00010592633043415844, 0.0003651801962405443, 0.0006431822548620403, 0.0004395015421323478, 0.00020948010205756873, 5.558700649999082e-05, 0.000910398259293288, 0.00018010035273618996, 1.2081550266884733e-05], "target_probs": 0.5451846718788147}}


{"result": {"time": "2021-02-21 12:42:48.118175", "n_pass": [455, 132, 50], "n_token": 43, "loss": [0.4422183930873871, 0.5894091725349426], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "exception", ".", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "with", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 27, "repair_targets": [4], "repair_candidates": [20, 22, 26, 29, 36, 1, 12, 38, 2, 16, 31, 34, 40, 21, 23, 24, 27, 19, 42, 3, 30, 4]}}
{"prediction": {"error_location": 0.6426092982292175, "repair_targets": [0.5546548962593079], "repair_candidates": [0.023125577718019485, 0.1457955539226532, 0.2589636445045471, 0.5546548962593079, 0.001072854152880609, 0.00782824493944645, 4.236914173816331e-05, 0.0004334199766162783, 0.0002225489151896909, 0.00020353718718979508, 9.543645865051076e-05, 5.580959623330273e-06, 0.0015321566024795175, 0.0001541839592391625, 0.0006295978091657162, 0.0013709227787330747, 0.0011239025043323636, 0.0004356627759989351, 9.885819599730894e-05, 0.001890599261969328, 0.00030114658875390887, 1.9415996575844474e-05], "target_probs": 0.5546548962593079}}


{"result": {"time": "2021-02-21 12:42:48.484953", "n_pass": [460, 137, 51], "n_token": 42, "loss": [0.36379897594451904, 0.529100239276886], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "exception", ".", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "self", ".", "assertRaises", "(", "expected_msg", ")", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 26, "repair_targets": [4], "repair_candidates": [19, 21, 25, 28, 35, 1, 11, 37, 2, 15, 30, 33, 39, 20, 22, 23, 26, 18, 41, 3, 29, 4]}}
{"prediction": {"error_location": 0.6950308680534363, "repair_targets": [0.5891348123550415], "repair_candidates": [0.01961934193968773, 0.13133974373340607, 0.23659725487232208, 0.5891348123550415, 0.005875216796994209, 0.008113336749374866, 3.2102227123687044e-05, 0.0004274227540008724, 0.0001909391867229715, 0.0001690226054051891, 7.788171933498234e-05, 4.510692178882891e-06, 0.0016527973348274827, 0.00015877478290349245, 0.0005234251730144024, 0.0016978030325844884, 0.0017286008223891258, 0.0006355838268063962, 9.85948063316755e-05, 0.0015695502515882254, 0.00033508604974485934, 1.816223630157765e-05], "target_probs": 0.5891348123550415}}


{"result": {"time": "2021-02-21 12:42:48.778096", "n_pass": [466, 141, 52], "n_token": 41, "loss": [0.38899439573287964, 0.40463894605636597], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "exception", ".", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "self", ".", "assertRaises", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 25, "repair_targets": [4], "repair_candidates": [18, 20, 24, 27, 34, 1, 11, 36, 2, 15, 29, 32, 38, 19, 21, 22, 25, 17, 40, 3, 28, 4]}}
{"prediction": {"error_location": 0.6777380108833313, "repair_targets": [0.6672176718711853], "repair_candidates": [0.013787781819701195, 0.0995822474360466, 0.2008122354745865, 0.6672176718711853, 0.009549173526465893, 0.0019491405691951513, 2.6385429009678774e-05, 0.00016406094073317945, 0.00010800315794767812, 0.00011322390491841361, 4.137375799473375e-05, 4.279146196495276e-06, 0.0008265713113360107, 7.932772132335231e-05, 0.00039941989234648645, 0.0013915753224864602, 0.0018284114776179194, 0.0004902408109046519, 5.834234252688475e-05, 0.0013626570580527186, 0.00019772718951571733, 1.0216211194347125e-05], "target_probs": 0.6672176718711853}}


{"result": {"time": "2021-02-21 12:42:49.141442", "n_pass": [491, 146, 53], "n_token": 40, "loss": [0.5541181564331055, 0.5135480165481567], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", ".", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "self", ".", "assertRaises", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 24, "repair_targets": [4], "repair_candidates": [17, 19, 23, 26, 33, 1, 10, 35, 2, 14, 28, 31, 37, 18, 20, 21, 24, 16, 39, 3, 27, 4]}}
{"prediction": {"error_location": 0.5745787620544434, "repair_targets": [0.598368763923645], "repair_candidates": [0.02914811484515667, 0.15184825658798218, 0.1533796340227127, 0.598368763923645, 0.02034536376595497, 0.0148954251781106, 7.642355922143906e-05, 0.0004699752607848495, 0.0002876092039514333, 0.00037504962529055774, 0.00012080787564627826, 2.3547376258648e-05, 0.002562897512689233, 0.00020551180932670832, 0.002135896822437644, 0.005637140944600105, 0.01556845661252737, 0.0009229960269294679, 0.00020627917547244579, 0.002973753260448575, 0.00042499296250753105, 2.314493031008169e-05], "target_probs": 0.598368763923645}}


{"result": {"time": "2021-02-21 12:42:49.213271", "n_pass": [492, 147, 54], "n_token": 39, "loss": [0.6569705605506897, 0.6148092746734619], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "#NEWLINE#", "#INDENT#", "'Helper method for testing raised error messages\\n\\n        This assert method is similar to :meth:`~assertRaises`, but\\n        it can only be used as a context manager. It will check that the\\n        block of the with statement raises an exception of type :class:`exc`,\\n        having as message the result of the interpolation between\\n        `expected_msg` and a formatted string, obtained through\\n        `ctypes.FormatError(error_code)`.\\n        '", "#NEWLINE#", "self", ".", "assertRaises", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 23, "repair_targets": [4], "repair_candidates": [16, 18, 22, 25, 32, 1, 9, 34, 2, 13, 27, 30, 36, 17, 19, 20, 23, 15, 38, 3, 26, 4]}}
{"prediction": {"error_location": 0.5184195041656494, "repair_targets": [0.5407440066337585], "repair_candidates": [0.018668917939066887, 0.13223962485790253, 0.27438682317733765, 0.5407440066337585, 0.006151244044303894, 0.010031652636826038, 4.518339119385928e-05, 0.00026518982485868037, 0.00018859549891203642, 0.0002764465461950749, 9.905450860969722e-05, 1.3246787602838594e-05, 0.0020295835565775633, 0.00012623386282939464, 0.0017839225474745035, 0.003635975532233715, 0.005934285465627909, 0.0006108787492848933, 0.00010626986477291211, 0.0022932926658540964, 0.00035176932578906417, 1.779494596121367e-05], "target_probs": 0.5407440066337585}}


{"result": {"time": "2021-02-21 12:42:49.426160", "n_pass": [495, 150, 55], "n_token": 38, "loss": [0.8241609930992126, 0.495745450258255], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "#NEWLINE#", "#INDENT#", "#NEWLINE#", "self", ".", "assertRaises", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 22, "repair_targets": [4], "repair_candidates": [15, 17, 21, 24, 31, 1, 8, 33, 2, 12, 26, 29, 35, 16, 18, 19, 22, 14, 37, 3, 25, 4]}}
{"prediction": {"error_location": 0.43860286474227905, "repair_targets": [0.6091166734695435], "repair_candidates": [0.012193601578474045, 0.09841713309288025, 0.22989806532859802, 0.6091166734695435, 0.017082488164305687, 0.0087051410228014, 6.0225731431273744e-05, 0.00017570795898791403, 0.00013577476784121245, 0.00019000950851477683, 8.333652658620849e-05, 1.129576594394166e-05, 0.0022109616547822952, 0.00016128621064126492, 0.0019519112538546324, 0.004879317712038755, 0.010003620758652687, 0.0006608308176510036, 0.00011557612742763013, 0.003390176920220256, 0.0005350739229470491, 2.177849819418043e-05], "target_probs": 0.6091166734695435}}


{"result": {"time": "2021-02-21 12:42:49.496610", "n_pass": [496, 151, 56], "n_token": 37, "loss": [0.8520783185958862, 0.5109674334526062], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "#NEWLINE#", "#INDENT#", "self", ".", "assertRaises", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 21, "repair_targets": [4], "repair_candidates": [14, 16, 20, 23, 30, 1, 7, 32, 2, 11, 25, 28, 34, 15, 17, 18, 21, 13, 36, 3, 24, 4]}}
{"prediction": {"error_location": 0.4265274703502655, "repair_targets": [0.5999149084091187], "repair_candidates": [0.019622281193733215, 0.12088625133037567, 0.2109854817390442, 0.5999149084091187, 0.010826597921550274, 0.009296782314777374, 8.327340765390545e-05, 0.00021405692677944899, 0.00017378112534061074, 0.00021824074792675674, 6.849753117421642e-05, 1.32957811729284e-05, 0.0017733288696035743, 0.00011757809988921508, 0.001741010113619268, 0.004440390970557928, 0.014631202444434166, 0.0007379447924904525, 0.00012338448141235858, 0.003636206267401576, 0.00047327385982498527, 2.233359555248171e-05], "target_probs": 0.5999149084091187}}


{"result": {"time": "2021-02-21 12:42:49.638840", "n_pass": [499, 153, 57], "n_token": 36, "loss": [0.3574979901313782, 0.45211076736450195], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["def assert_raises_windows_message(", "self", "expected_msg", "error_code", "exc", "#NEWLINE#", "#INDENT#", "self", ".", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 20, "repair_targets": [4], "repair_candidates": [13, 15, 19, 22, 29, 1, 7, 31, 2, 10, 24, 27, 33, 14, 16, 17, 20, 12, 35, 3, 23, 4]}}
{"prediction": {"error_location": 0.6994240283966064, "repair_targets": [0.6362836956977844], "repair_candidates": [0.008823702111840248, 0.0633675828576088, 0.14222675561904907, 0.6362836956977844, 0.1473596841096878, 0.0001517259661341086, 2.393671456957236e-05, 9.671366569818929e-05, 7.70347542129457e-05, 6.883482274133712e-05, 2.6125631848117337e-05, 1.5913029756120523e-06, 0.0003728269075509161, 5.733528087148443e-05, 6.636101170442998e-05, 0.00027586970827542245, 0.00014566315803676844, 9.143761417362839e-05, 1.6351574231521226e-05, 0.0003894913534168154, 7.19070085324347e-05, 5.3120634220249485e-06], "target_probs": 0.6362836956977844}}


{"result": {"time": "2021-02-21 12:42:49.990006", "n_pass": [521, 158, 58], "n_token": 35, "loss": [0.801028847694397, 0.42785707116127014], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "#INDENT#", "self", ".", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 19, "repair_targets": [3], "repair_candidates": [12, 14, 18, 21, 28, 0, 6, 30, 1, 9, 23, 26, 32, 13, 15, 16, 19, 11, 34, 2, 22, 3]}}
{"prediction": {"error_location": 0.44886690378189087, "repair_targets": [0.6519045829772949], "repair_candidates": [0.006716668605804443, 0.009009633213281631, 0.040771324187517166, 0.6519045829772949, 0.2885954678058624, 0.00025157464551739395, 2.5732953872648068e-05, 0.00017195226973854005, 0.00016788285574875772, 0.00011857901699841022, 7.871550042182207e-05, 3.93933851228212e-06, 0.0005918330862186849, 0.00010937750630546361, 0.00010508625564398244, 0.00041943785618059337, 0.00023886814597062767, 0.00014954469224903733, 1.88406393135665e-05, 0.00042459374526515603, 0.00011831638403236866, 8.05005674919812e-06], "target_probs": 0.6519045829772949}}


{"result": {"time": "2021-02-21 12:42:50.128654", "n_pass": [527, 160, 59], "n_token": 34, "loss": [0.8671058416366577, 0.22074301540851593], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", ".", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 18, "repair_targets": [3], "repair_candidates": [11, 13, 17, 20, 27, 0, 5, 29, 1, 8, 22, 25, 31, 12, 14, 15, 18, 10, 33, 2, 21, 3]}}
{"prediction": {"error_location": 0.4201657772064209, "repair_targets": [0.8019227385520935], "repair_candidates": [0.00610405532643199, 0.011236908845603466, 0.06172218918800354, 0.8019227385520935, 0.11465643346309662, 0.00044627866009250283, 3.0372508263099007e-05, 0.00021326233400031924, 0.00023878643696662039, 0.00016444295761175454, 8.505614823661745e-05, 6.660549388470827e-06, 0.0014515474904328585, 0.00022521834762301296, 0.00013955852773506194, 0.000550552096683532, 0.00020551332272589207, 0.00016070704441517591, 3.0104953111731447e-05, 0.0002589884970802814, 0.00013902015052735806, 1.173798864329001e-05], "target_probs": 0.8019227385520935}}


{"result": {"time": "2021-02-21 12:42:50.197663", "n_pass": [529, 161, 60], "n_token": 33, "loss": [0.6401433348655701, 0.27917352318763733], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "(", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 26, 0, 5, 28, 1, 7, 21, 24, 30, 11, 13, 14, 17, 9, 32, 2, 20, 3]}}
{"prediction": {"error_location": 0.5272168517112732, "repair_targets": [0.7564086318016052], "repair_candidates": [0.011898933909833431, 0.015402552671730518, 0.09009566158056259, 0.7564086318016052, 0.11475751549005508, 0.002538954606279731, 4.863781941821799e-05, 0.00036127620842307806, 0.0003894105029758066, 0.0003217194462195039, 0.00013773114187642932, 1.4280318282544613e-05, 0.0020880845841020346, 0.0002677402808330953, 0.0004109501314815134, 0.0016759858699515462, 0.0011367312399670482, 0.0006279791123233736, 0.00010919625492533669, 0.000876266451086849, 0.00040508777601644397, 2.6782417990034446e-05], "target_probs": 0.7564086318016052}}


{"result": {"time": "2021-02-21 12:42:50.677911", "n_pass": [571, 168, 61], "n_token": 32, "loss": [0.8519087433815002, 0.30419155955314636], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "expected_msg", "%", "mock_format_error", ".", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 25, 0, 5, 27, 1, 7, 21, 23, 29, 11, 13, 14, 17, 9, 31, 2, 20, 3]}}
{"prediction": {"error_location": 0.4265998899936676, "repair_targets": [0.7377195358276367], "repair_candidates": [0.011942459270358086, 0.014832520857453346, 0.08446834981441498, 0.7377195358276367, 0.13976764678955078, 0.002030799863860011, 4.498592170421034e-05, 0.0002889492316171527, 0.00033449052716605365, 0.00021781577379442751, 9.778722596820444e-05, 1.4826988262939267e-05, 0.002145752077922225, 0.0002813084574881941, 0.00026233712560497224, 0.0013899329351261258, 0.0005127321346662939, 0.001353076659142971, 0.0001237712858710438, 0.001825088867917657, 0.00031684059649705887, 2.9012262530159205e-05], "target_probs": 0.7377195358276367}}


{"result": {"time": "2021-02-21 12:42:50.812177", "n_pass": [574, 170, 62], "n_token": 31, "loss": [0.7105430960655212, 0.27893251180648804], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "expected_msg", "%", "mock_format_error", "self", "(", "expected_msg", ",", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 25, 0, 5, 26, 1, 7, 21, 23, 28, 11, 13, 14, 17, 9, 30, 2, 20, 3]}}
{"prediction": {"error_location": 0.4913772642612457, "repair_targets": [0.7565909624099731], "repair_candidates": [0.009177768602967262, 0.011460657231509686, 0.07438293099403381, 0.7565909624099731, 0.140977144241333, 0.0017869368894025683, 3.4485656215110794e-05, 0.00022510539565701038, 0.00029406521935015917, 0.00020416133338585496, 9.666402183938771e-05, 1.132528814196121e-05, 0.0018732440657913685, 0.0001840430632000789, 0.00020987592870369554, 0.0009095725836232305, 0.00023282824258785695, 0.0009774467907845974, 0.00016254324873443693, 0.00013821545871905982, 6.0227906942600384e-05, 9.781852895685006e-06], "target_probs": 0.7565909624099731}}


{"result": {"time": "2021-02-21 12:42:50.946219", "n_pass": [578, 172, 63], "n_token": 30, "loss": [0.19323071837425232, 0.22449949383735657], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "=", "expected_msg", "%", "mock_format_error", "self", "(", "expected_msg", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 25, 0, 5, 26, 1, 7, 21, 23, 28, 11, 13, 14, 17, 9, 29, 2, 20, 3]}}
{"prediction": {"error_location": 0.8242918252944946, "repair_targets": [0.7989159822463989], "repair_candidates": [0.004873984958976507, 0.006251699756830931, 0.05992412194609642, 0.7989159822463989, 0.12635406851768494, 0.0010557201458141208, 1.9309587514726445e-05, 0.0001234327646670863, 0.0001368190423818305, 0.00010078824561787769, 3.9659604226471856e-05, 4.193507265881635e-06, 0.0011015500640496612, 4.0372993680648506e-05, 4.396822623675689e-05, 0.00024712266167625785, 0.00029634247766807675, 0.00032606630702503026, 3.881029624608345e-05, 8.759307820582762e-05, 1.6520178178325295e-05, 1.8640546386450296e-06], "target_probs": 0.7989159822463989}}


{"result": {"time": "2021-02-21 12:42:51.347056", "n_pass": [602, 178, 64], "n_token": 29, "loss": [0.4661753177642822, 0.19590529799461365], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "expected_msg", "%", "mock_format_error", "self", "(", "expected_msg", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 24, 0, 5, 25, 1, 7, 21, 22, 27, 11, 13, 14, 17, 9, 28, 2, 20, 3]}}
{"prediction": {"error_location": 0.6273972988128662, "repair_targets": [0.8220900893211365], "repair_candidates": [0.00682763522490859, 0.00935831293463707, 0.07317308336496353, 0.8220900893211365, 0.08136025816202164, 0.002350668888539076, 2.3284861526917666e-05, 0.00027472234796732664, 0.0002710260741878301, 0.00030928527121432126, 0.00012674939353019, 1.7655025658314116e-05, 0.002392671536654234, 3.92966358049307e-05, 0.00015005641034804285, 2.8128561098128557e-05, 0.0004900361527688801, 0.0005315800081007183, 5.952318315394223e-05, 9.08997462829575e-05, 3.1148727430263534e-05, 3.958114575652871e-06], "target_probs": 0.8220900893211365}}


{"result": {"time": "2021-02-21 12:42:51.415674", "n_pass": [604, 179, 65], "n_token": 28, "loss": [0.769088625907898, 0.18463826179504395], "accuracy": [0.0, 1.0, 1.0, 1.0]}}
{"sample": {"has_bug": true, "source_tokens": ["self", "expected_msg", "error_code", "exc", "#NEWLINE#", "self", "(", "expected_msg", "as", "cm", "mock_format_error", "mock_get_last_error", "mock_format_error", "mock_get_last_error", "mock_get_last_error", ".", "mock_format_error", "mock_get_last_error", "#NEWLINE#", "mock_format_error", "error_code", "expected_msg", "expected_msg", "mock_format_error", "self", "(", "expected_msg", "cm"]}}
{"position": {"error_location": 17, "repair_targets": [3], "repair_candidates": [10, 12, 16, 19, 23, 0, 5, 24, 1, 7, 21, 22, 26, 11, 13, 14, 17, 9, 27, 2, 20, 3]}}
{"prediction": {"error_location": 0.46343523263931274, "repair_targets": [0.831404983997345], "repair_candidates": [0.007324433885514736, 0.009741977788507938, 0.07506442070007324, 0.831404983997345, 0.06965206563472748, 0.0015659164637327194, 1.865223384811543e-05, 0.00023237919958774, 0.00022408299264498055, 0.00027465616585686803, 0.00012885390606243163, 2.289688927703537e-05, 0.0028588243294507265, 3.5156725061824545e-05, 0.00035569092142395675, 6.111208494985476e-05, 0.0006516188732348382, 0.00012931358651258051, 1.3935851711721625e-05, 0.00020556991512421519, 2.700412369449623e-05, 6.364831278915517e-06], "target_probs": 0.831404983997345}}




Minimal simplified tokens:

['self', 'expected_msg', 'error_code', 'exc', '#NEWLINE#', 'self', '(', 'expected_msg', 'as', 'cm', 'mock_format_error', 'mock_get_last_error', 'mock_format_error', 'mock_get_last_error', 'mock_get_last_error', '.', 'mock_format_error', 'mock_get_last_error', '#NEWLINE#', 'mock_format_error', 'error_code', 'expected_msg', 'expected_msg', 'mock_format_error', 'self', '(', 'expected_msg', 'cm']
